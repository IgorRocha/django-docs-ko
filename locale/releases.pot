# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../releases/0.95.txt:3
# 31665c5154cb46ea83824d5720edb1e8
msgid "Django version 0.95 release notes"
msgstr ""

#: ../../releases/0.95.txt:5
# 54619d323ed94ae78b8f46b11c1d223e
msgid "Welcome to the Django 0.95 release."
msgstr ""

#: ../../releases/0.95.txt:7
# cd74539386404718a0e1d82a51d117fb
msgid "This represents a significant advance in Django development since the 0.91 release in January 2006. The details of every change in this release would be too extensive to list in full, but a summary is presented below."
msgstr ""

#: ../../releases/0.95.txt:12
# 52aa05aac3b04619a34be48a089c94b6
msgid "Suitability and API stability"
msgstr ""

#: ../../releases/0.95.txt:14
# bd40e215cd534459bbc0b6d7047a09ac
msgid "This release is intended to provide a stable reference point for developers wanting to work on production-level applications that use Django."
msgstr ""

#: ../../releases/0.95.txt:17
# 8d85f480029c4ba38fea0fc50f7a2aab
msgid "However, it's not the 1.0 release, and we'll be introducing further changes before 1.0. For a clear look at which areas of the framework will change (and which ones will *not* change) before 1.0, see the api-stability.txt file, which lives in the docs/ directory of the distribution."
msgstr ""

#: ../../releases/0.95.txt:22
# 2d5b38a53c0547d89bcd131f5167f89f
msgid "You may have a need to use some of the features that are marked as \"subject to API change\" in that document, but that's OK with us as long as it's OK with you, and as long as you understand APIs may change in the future."
msgstr ""

#: ../../releases/0.95.txt:26
# 5b7eb2649d7d47a4b0c058a0ffd1f693
msgid "Fortunately, most of Django's core APIs won't be changing before version 1.0. There likely won't be as big of a change between 0.95 and 1.0 versions as there was between 0.91 and 0.95."
msgstr ""

#: ../../releases/0.95.txt:31
# fbdcad0a8e054796a9cbd61c73080a43
msgid "Changes and new features"
msgstr ""

#: ../../releases/0.95.txt:33
# 0293580317e64009ba130f7b18de6f86
msgid "The major changes in this release (for developers currently using the 0.91 release) are a result of merging the 'magic-removal' branch of development. This branch removed a number of constraints in the way Django code had to be written that were a consequence of decisions made in the early days of Django, prior to its open-source release. It's now possible to write more natural, Pythonic code that works as expected, and there's less \"black magic\" happening behind the scenes."
msgstr ""

#: ../../releases/0.95.txt:41
# 75c332d977954484b8c1bd3502d25244
msgid "Aside from that, another main theme of this release is a dramatic increase in usability. We've made countless improvements in error messages, documentation, etc., to improve developers' quality of life."
msgstr ""

#: ../../releases/0.95.txt:45
# e8e86fed961e4a68bfd3bb0b980df339
msgid "The new features and changes introduced in 0.95 include:"
msgstr ""

#: ../../releases/0.95.txt:47
# 8dd35daa4dd144cabe151b0971699dd8
msgid "Django now uses a more consistent and natural filtering interface for retrieving objects from the database."
msgstr ""

#: ../../releases/0.95.txt:50
# c5869557cc404816b4cc0abfaaed1f9a
msgid "User-defined models, functions and constants now appear in the module namespace they were defined in. (Previously everything was magically transferred to the django.models.* namespace.)"
msgstr ""

#: ../../releases/0.95.txt:54
# d5b0a1a3edcb4338bc6e535b8975ede2
msgid "Some optional applications, such as the FlatPage, Sites and Redirects apps, have been decoupled and moved into django.contrib. If you don't want to use these applications, you no longer have to install their database tables."
msgstr ""

#: ../../releases/0.95.txt:59
# a6440a69a3e14f7d9bedd029315c5489
msgid "Django now has support for managing database transactions."
msgstr ""

#: ../../releases/0.95.txt:61
# c86cce86ce9e4ff086309132853d8af5
msgid "We've added the ability to write custom authentication and authorization backends for authenticating users against alternate systems, such as LDAP."
msgstr ""

#: ../../releases/0.95.txt:65
# 68802fd4b90747cca658c0fba2466b4f
msgid "We've made it easier to add custom table-level functions to models, through a new \"Manager\" API."
msgstr ""

#: ../../releases/0.95.txt:68
# a69553f94cab4bdfbb8fa00d31ce5930
msgid "It's now possible to use Django without a database. This simply means that the framework no longer requires you to have a working database set up just to serve dynamic pages. In other words, you can just use URLconfs/views on their own. Previously, the framework required that a database be configured, regardless of whether you actually used it."
msgstr ""

#: ../../releases/0.95.txt:74
# 60f0c40862954b7c9fac0446fb9ddcbc
msgid "It's now more explicit and natural to override save() and delete() methods on models, rather than needing to hook into the pre_save() and post_save() method hooks."
msgstr ""

#: ../../releases/0.95.txt:78
# 8c126d95cf954fb8a154a943a42409c3
msgid "Individual pieces of the framework now can be configured without requiring the setting of an environment variable. This permits use of, for example, the Django templating system inside other applications."
msgstr ""

#: ../../releases/0.95.txt:82
# 1c45e3897a324e63ab9066b636093b84
msgid "More and more parts of the framework have been internationalized, as we've expanded internationalization (i18n) support. The Django codebase, including code and templates, has now been translated, at least in part, into 31 languages. From Arabic to Chinese to Hungarian to Welsh, it is now possible to use Django's admin site in your native language."
msgstr ""

#: ../../releases/0.95.txt:88
# ec9f27f4b13c408b9c21df8de88d09d9
msgid "The number of changes required to port from 0.91-compatible code to the 0.95 code base are significant in some cases. However, they are, for the most part, reasonably routine and only need to be done once. A list of the necessary changes is described in the `Removing The Magic`_ wiki page. There is also an easy checklist_ for reference when undertaking the porting operation."
msgstr ""

#: ../../releases/0.95.txt:98
# e84320431d4e44d89900be588422ccbd
msgid "Problem reports and getting help"
msgstr ""

#: ../../releases/0.95.txt:100
# cd82f53898ed49bbabb88c98efef1c1d
msgid "Need help resolving a problem with Django? The documentation in the distribution is also available :doc:`online </index>` at the `Django Web site`_. The :doc:`FAQ </faq/index>` document is especially recommended, as it contains a number of issues that come up time and again."
msgstr ""

#: ../../releases/0.95.txt:105
# e5a995740a954572b14dfdf2632362f5
msgid "For more personalized help, the `django-users`_ mailing list is a very active list, with more than 2,000 subscribers who can help you solve any sort of Django problem. We recommend you search the archives first, though, because many common questions appear with some regularity, and any particular problem may already have been answered."
msgstr ""

#: ../../releases/0.95.txt:111
# 2cb39a7b2aa7469abcb4aff51d0416d4
msgid "Finally, for those who prefer the more immediate feedback offered by IRC, there's a #django channel on irc.freenode.net that is regularly populated by Django users and developers from around the world. Friendly people are usually available at any hour of the day -- to help, or just to chat."
msgstr ""

#: ../../releases/0.95.txt:119
# 2ead5188e9a0487ca2249361aa74b5ac
msgid "Thanks for using Django!"
msgstr ""

#: ../../releases/0.95.txt:121
# 46f3bae4544c47f792e9d295f6bfd08d
msgid "The Django Team July 2006"
msgstr ""

#: ../../releases/0.96.txt:3
# 37386d31f17c48efba9535ca272a17bb
msgid "Django version 0.96 release notes"
msgstr ""

#: ../../releases/0.96.txt:5
# 241c694b63174c688bbca0c48f8f9a9d
msgid "Welcome to Django 0.96!"
msgstr ""

#: ../../releases/0.96.txt:7
# f852cb3ee3354ca28a2a0093ce853a4e
msgid "The primary goal for 0.96 is a cleanup and stabilization of the features introduced in 0.95. There have been a few small `backwards-incompatible changes`_ since 0.95, but the upgrade process should be fairly simple and should not require major changes to existing applications."
msgstr ""

#: ../../releases/0.96.txt:12
# 9eef340c29bf4500ba737fc720b482fe
msgid "However, we're also releasing 0.96 now because we have a set of backwards-incompatible changes scheduled for the near future. Once completed, they will involve some code changes for application developers, so we recommend that you stick with Django 0.96 until the next official release; then you'll be able to upgrade in one step instead of needing to make incremental changes to keep up with the development version of Django."
msgstr ""

#: ../../releases/0.96.txt:21
#: ../../releases/1.0.txt:33
# faab29487d994861a274d523bdf8aa5a
# 3cbf1203d3e64caa920a6f744b0b4c7c
msgid "Backwards-incompatible changes"
msgstr ""

#: ../../releases/0.96.txt:23
# 5820c84859674d6d9073831bb1dda403
msgid "The following changes may require you to update your code when you switch from 0.95 to 0.96:"
msgstr ""

#: ../../releases/0.96.txt:27
# 3ebda5207ede48f8b1c9cbfd69eafe3c
msgid "``MySQLdb`` version requirement"
msgstr ""

#: ../../releases/0.96.txt:29
# 6abf355b25a14c81a9d04172d172bc70
msgid "Due to a bug in older versions of the ``MySQLdb`` Python module (which Django uses to connect to MySQL databases), Django's MySQL backend now requires version 1.2.1p2 or higher of ``MySQLdb``, and will raise exceptions if you attempt to use an older version."
msgstr ""

#: ../../releases/0.96.txt:34
# 231a8e3b8a1d435fb38a05d915ae6f18
msgid "If you're currently unable to upgrade your copy of ``MySQLdb`` to meet this requirement, a separate, backwards-compatible backend, called \"mysql_old\", has been added to Django. To use this backend, change the :setting:`DATABASE_ENGINE` setting in your Django settings file from this::"
msgstr ""

#: ../../releases/0.96.txt:42
#: ../../releases/1.2.txt:596
# e61d5d82d0bf40e2b49df9f8674515d9
# ef77a521650d4617a0227919d43e84e8
msgid "to this::"
msgstr ""

#: ../../releases/0.96.txt:46
# 7e7bdf0881f647e5962db68f9be9a989
msgid "However, we strongly encourage MySQL users to upgrade to a more recent version of ``MySQLdb`` as soon as possible, The \"mysql_old\" backend is provided only to ease this transition, and is considered deprecated; aside from any necessary security fixes, it will not be actively maintained, and it will be removed in a future release of Django."
msgstr ""

#: ../../releases/0.96.txt:52
# b433cffcbc81438db57d2738663cc052
msgid "Also, note that some features, like the new :setting:`DATABASE_OPTIONS` setting (see the :doc:`databases documentation </ref/databases>` for details), are only available on the \"mysql\" backend, and will not be made available for \"mysql_old\"."
msgstr ""

#: ../../releases/0.96.txt:58
# 1d992f7b9d0e44319e6eca0209b36789
msgid "Database constraint names changed"
msgstr ""

#: ../../releases/0.96.txt:60
# 17556636d2aa4af8b39f203402a0bf2e
msgid "The format of the constraint names Django generates for foreign key references have changed slightly. These names are generally only used when it is not possible to put the reference directly on the affected column, so they are not always visible."
msgstr ""

#: ../../releases/0.96.txt:65
# 74bfb15110b649f2a48bde7f65384040
msgid "The effect of this change is that running ``manage.py reset`` and similar commands against an existing database may generate SQL with the new form of constraint name, while the database itself contains constraints named in the old form; this will cause the database server to raise an error message about modifying non-existent constraints."
msgstr ""

#: ../../releases/0.96.txt:71
# 62777ec05c9543dfa55122461e2ef035
msgid "If you need to work around this, there are two methods available:"
msgstr ""

#: ../../releases/0.96.txt:73
# da00016327434f68bb9621ce5ffc2ebc
msgid "Redirect the output of ``manage.py`` to a file, and edit the generated SQL to use the correct constraint names before executing it."
msgstr ""

#: ../../releases/0.96.txt:77
# 91b36edbe8784b789701e99221d38928
msgid "Examine the output of ``manage.py sqlall`` to see the new-style constraint names, and use that as a guide to rename existing constraints in your database."
msgstr ""

#: ../../releases/0.96.txt:82
# 160e7b71873644808b4f19f33049d797
msgid "Name changes in ``manage.py``"
msgstr ""

#: ../../releases/0.96.txt:84
# 77380852d6fd40589a5868fd2a1016af
msgid "A few of the options to ``manage.py`` have changed with the addition of fixture support:"
msgstr ""

#: ../../releases/0.96.txt:87
# 64fb2a24dea34daa9615a47492b989fe
msgid "There are new ``dumpdata`` and ``loaddata`` commands which, as you might expect, will dump and load data to/from the database. These commands can operate against any of Django's supported serialization formats."
msgstr ""

#: ../../releases/0.96.txt:92
# f01d3849c76d49e18c7b164e2c259355
msgid "The ``sqlinitialdata`` command has been renamed to ``sqlcustom`` to emphasize that ``loaddata`` should be used for data (and ``sqlcustom`` for other custom SQL -- views, stored procedures, etc.)."
msgstr ""

#: ../../releases/0.96.txt:96
# 0b9024dbb7964d129a1dc4630661ed0d
msgid "The vestigial ``install`` command has been removed. Use ``syncdb``."
msgstr ""

#: ../../releases/0.96.txt:99
# 115c2163f04a4e85a0da5e3d30cc1e76
msgid "Backslash escaping changed"
msgstr ""

#: ../../releases/0.96.txt:101
# 7262b2aa79d942ffa55877f8398d1cbb
msgid "The Django database API now escapes backslashes given as query parameters. If you have any database API code that matches backslashes, and it was working before (despite the lack of escaping), you'll have to change your code to \"unescape\" the slashes one level."
msgstr ""

#: ../../releases/0.96.txt:106
# 9826083a3e994a82a90989651df7762b
msgid "For example, this used to work::"
msgstr ""

#: ../../releases/0.96.txt:111
# 6f3a99fed7714981817e5ae4e21ee37b
msgid "The above is now incorrect, and should be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:117
# 3c32973643684cdc9972a8ab892776fb
msgid "Removed ENABLE_PSYCO setting"
msgstr ""

#: ../../releases/0.96.txt:119
# 67e6cbf2b2ab4e6fbb12c68bee11ccb8
msgid "The ``ENABLE_PSYCO`` setting no longer exists. If your settings file includes ``ENABLE_PSYCO`` it will have no effect; to use Psyco_, we recommend writing a middleware class to activate it."
msgstr ""

#: ../../releases/0.96.txt:126
# fa56fa7c36d1403fa65906298c70fa39
msgid "What's new in 0.96?"
msgstr ""

#: ../../releases/0.96.txt:128
# 9c663f5abd9b4cf5ab764d079f34657f
msgid "This revision represents over a thousand source commits and over four hundred bug fixes, so we can't possibly catalog all the changes. Here, we describe the most notable changes in this release."
msgstr ""

#: ../../releases/0.96.txt:133
# 400474b808b046bdb0c01732a0b2aac6
msgid "New forms library"
msgstr ""

#: ../../releases/0.96.txt:135
# 7a624e082d4a42199ae3e148785efbd4
msgid "``django.newforms`` is Django's new form-handling library. It's a replacement for ``django.forms``, the old form/manipulator/validation framework.  Both APIs are available in 0.96, but over the next two releases we plan to switch completely to the new forms system, and deprecate and remove the old system."
msgstr ""

#: ../../releases/0.96.txt:141
# 05e5bf25c4374d37b141b731e87a7f51
msgid "There are three elements to this transition:"
msgstr ""

#: ../../releases/0.96.txt:143
# f3ae140e55bf46b29234313e269d27eb
msgid "We've copied the current ``django.forms`` to ``django.oldforms``. This allows you to upgrade your code *now* rather than waiting for the backwards-incompatible change and rushing to fix your code after the fact.  Just change your import statements like this::"
msgstr ""

#: ../../releases/0.96.txt:152
# 555f9bf38e9d47e19598626bd147d47b
msgid "The next official release of Django will move the current ``django.newforms`` to ``django.forms``. This will be a backwards-incompatible change, and anyone still using the old version of ``django.forms`` at that time will need to change their import statements as described above."
msgstr ""

#: ../../releases/0.96.txt:158
# ef07929072944290a9c928d9bd02960a
msgid "The next release after that will completely remove ``django.oldforms``."
msgstr ""

#: ../../releases/0.96.txt:161
# 8e0b6116ed5643199611cda993f61fc6
msgid "Although the ``newforms`` library will continue to evolve, it's ready for use for most common cases. We recommend that anyone new to form handling skip the old forms system and start with the new."
msgstr ""

#: ../../releases/0.96.txt:165
# a5d030709eb24e44adfa0d16a9721742
msgid "For more information about ``django.newforms``, read the :doc:`newforms documentation </topics/forms/index>`."
msgstr ""

#: ../../releases/0.96.txt:169
# 6e06a4520d154114b0904057cbd3dd45
msgid "URLconf improvements"
msgstr ""

#: ../../releases/0.96.txt:171
# 3fda7bae60b3484d8a9ac3dd4cc65a6a
msgid "You can now use any callable as the callback in URLconfs (previously, only strings that referred to callables were allowed). This allows a much more natural use of URLconfs. For example, this URLconf::"
msgstr ""

#: ../../releases/0.96.txt:181
# f0cb4d3b36894189b5a4f21c56dbca93
msgid "can now be rewritten as::"
msgstr ""

#: ../../releases/0.96.txt:190
# 4cef0600565346958093d064ce8c478c
msgid "One useful application of this can be seen when using decorators; this change allows you to apply decorators to views *in your URLconf*. Thus, you can make a generic view require login very easily::"
msgstr ""

#: ../../releases/0.96.txt:208
# ef56083989d2418e9b65e927678ddeb7
msgid "Note that both syntaxes (strings and callables) are valid, and will continue to be valid for the foreseeable future."
msgstr ""

#: ../../releases/0.96.txt:212
# 3c9665f2d1914945bc9a74f8ef88a271
msgid "The test framework"
msgstr ""

#: ../../releases/0.96.txt:214
# 7b74fa3f43ee42f88982b40a8cfb27fe
msgid "Django now includes a test framework so you can start transmuting fear into boredom (with apologies to Kent Beck). You can write tests based on :mod:`doctest` or :mod:`unittest` and test your views with a simple test client."
msgstr ""

#: ../../releases/0.96.txt:218
# a76f37f7e66d4eb38f456bcf3b11ef62
msgid "There is also new support for \"fixtures\" -- initial data, stored in any of the supported :doc:`serialization formats </topics/serialization>`, that will be loaded into your database at the start of your tests. This makes testing with real data much easier."
msgstr ""

#: ../../releases/0.96.txt:223
# 13bd06d6bcb849d180d858a5075b5834
msgid "See :doc:`the testing documentation </topics/testing>` for the full details."
msgstr ""

#: ../../releases/0.96.txt:226
# 94408a16c0a641d6865a7825db5ad739
msgid "Improvements to the admin interface"
msgstr ""

#: ../../releases/0.96.txt:228
# 894c77e14ed14811b8ee6d370f81d353
msgid "A small change, but a very nice one: dedicated views for adding and updating users have been added to the admin interface, so you no longer need to worry about working with hashed passwords in the admin."
msgstr ""

#: ../../releases/0.96.txt:233
# 8fde35e42c7447dc85f0178ee91db145
msgid "Thanks"
msgstr ""

#: ../../releases/0.96.txt:235
# 94cd343f8cff4e5db07246d5d9bd0b84
msgid "Since 0.95, a number of people have stepped forward and taken a major new role in Django's development. We'd like to thank these people for all their hard work:"
msgstr ""

#: ../../releases/0.96.txt:239
# c00cb078210d426cbe6e9f44d47b5dbb
msgid "Russell Keith-Magee and Malcolm Tredinnick for their major code contributions. This release wouldn't have been possible without them."
msgstr ""

#: ../../releases/0.96.txt:242
# f04cadf28fdc4c2eb499bbe2bc05a0eb
msgid "Our new release manager, James Bennett, for his work in getting out 0.95.1, 0.96, and (hopefully) future release."
msgstr ""

#: ../../releases/0.96.txt:245
# 13264e42aac34028b59791ec00b61adc
msgid "Our ticket managers Chris Beaven (aka SmileyChris), Simon Greenhill, Michael Radziej, and Gary Wilson. They agreed to take on the monumental task of wrangling our tickets into nicely cataloged submission. Figuring out what to work on is now about a million times easier; thanks again, guys."
msgstr ""

#: ../../releases/0.96.txt:251
# 8a3572237eb745fd9c5f09c9bbd70653
msgid "Everyone who submitted a bug report, patch or ticket comment. We can't possibly thank everyone by name -- over 200 developers submitted patches that went into 0.96 -- but everyone who's contributed to Django is listed in AUTHORS_."
msgstr ""

#: ../../releases/1.0.txt:3
# 2251d8e74a6740629b67acb2023915bf
msgid "Django 1.0 release notes"
msgstr ""

#: ../../releases/1.0.txt:5
# 9d1efe5ff8e9414da1fa9fd64cf08e05
msgid "Welcome to Django 1.0!"
msgstr ""

#: ../../releases/1.0.txt:7
# a4a306877efc4726a6995eeb73378111
msgid "We've been looking forward to this moment for over three years, and it's finally here. Django 1.0 represents a the largest milestone in Django's development to date: a Web framework that a group of perfectionists can truly be proud of."
msgstr ""

#: ../../releases/1.0.txt:11
# 071d0a12daf048bea06b42b271962044
msgid "Django 1.0 represents over three years of community development as an Open Source project. Django's received contributions from hundreds of developers, been translated into fifty languages, and today is used by developers on every continent and in every kind of job."
msgstr ""

#: ../../releases/1.0.txt:16
# 8eaee04506f14c15b6d417eb2956f144
msgid "An interesting historical note: when Django was first released in July 2005, the initial released version of Django came from an internal repository at revision number 8825. Django 1.0 represents revision 8961 of our public repository. It seems fitting that our 1.0 release comes at the moment where community contributions overtake those made privately."
msgstr ""

#: ../../releases/1.0.txt:23
# f9b4b27411cf4be3b6967f170238c559
msgid "Stability and forwards-compatibility"
msgstr ""

#: ../../releases/1.0.txt:25
# 49a54ad6d09f4295a88581173b51904c
msgid ":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API stability and forwards-compatibility. In a nutshell, this means that code you develop against Django 1.0 will continue to work against 1.1 unchanged, and you should need to make only minor changes for any 1.X release."
msgstr ""

#: ../../releases/1.0.txt:30
# 1d9c433df5ee4d43bab42a115fd19345
msgid "See the :doc:`API stability guide </misc/api-stability>` for full details."
msgstr ""

#: ../../releases/1.0.txt:35
# e23367200b1f4750955fbaa66d550619
msgid "Django 1.0 has a number of backwards-incompatible changes from Django 0.96. If you have apps written against Django 0.96 that you need to port, see our detailed porting guide:"
msgstr ""

#: ../../releases/1.0.txt:44
# 5969d6b307744c5cb57fec1b096beada
msgid "A complete list of backwards-incompatible changes can be found at https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges."
msgstr ""

#: ../../releases/1.0.txt:48
# 8c2960afbaa84bbeb1805fd185df67dd
msgid "What's new in Django 1.0"
msgstr ""

#: ../../releases/1.0.txt:50
# 893e55234ace49e5a82dd8eb852073de
msgid "A *lot*!"
msgstr ""

#: ../../releases/1.0.txt:52
# 66519bbc0bc64d288d43ba7cf22c5e6c
msgid "Since Django 0.96, we've made over 4,000 code commits, fixed more than 2,000 bugs, and edited, added, or removed around 350,000 lines of code. We've also added 40,000 lines of new documentation, and greatly improved what was already there."
msgstr ""

#: ../../releases/1.0.txt:57
# a5a5e7e3bb3f45d5ac61acaf4934bac4
msgid "In fact, new documentation is one of our favorite features of Django 1.0, so we might as well start there. First, there's a new documentation site:"
msgstr ""

#: ../../releases/1.0.txt:60
# 53c11de9de7148698943689d60ce0bca
msgid "https://docs.djangoproject.com/"
msgstr ""

#: ../../releases/1.0.txt:62
# 851a245d7f4f4ca99cd9a54d35bbfaf4
msgid "The documentation has been greatly improved, cleaned up, and generally made awesome. There's now dedicated search, indexes, and more."
msgstr ""

#: ../../releases/1.0.txt:65
# 8f485711a34a40e1888e9e490335e94d
msgid "We can't possibly document everything that's new in 1.0, but the documentation will be your definitive guide. Anywhere you see something like:"
msgstr ""

#: ../../releases/1.0.txt:71
# 9cf44cb93eac46a1923e1f117df07ce8
msgid "You'll know that you're looking at something new or changed."
msgstr ""

#: ../../releases/1.0.txt:73
# fa524a35e5254ff6b38e95bf2d660def
msgid "The other major highlights of Django 1.0 are:"
msgstr ""

#: ../../releases/1.0.txt:76
# 0da39d9b0a24497f8d6dcd3a78068ebd
msgid "Re-factored admin application"
msgstr ""

#: ../../releases/1.0.txt:78
#: ../../releases/1.0-alpha-1.txt:25
# a29fde8ce4074cc68195d7d86ad83928
# 326e3623cc88415eb840de7224722722
msgid "The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions (no more ``class Admin`` declaration in models!), rewritten to use Django's new form-handling library (introduced in the 0.96 release as ``django.newforms``, and now available as simply ``django.forms``) and redesigned with extensibility and customization in mind. Full documentation for the admin application is available online in the official Django documentation:"
msgstr ""

#: ../../releases/1.0.txt:86
# c28750d5f84b486e9025fdb2f51139cb
msgid "See the :doc:`admin reference </ref/contrib/admin/index>` for details"
msgstr ""

#: ../../releases/1.0.txt:89
# a0fa9a2fa2fe44f3ad2083fe75d0cd6e
msgid "Improved Unicode handling"
msgstr ""

#: ../../releases/1.0.txt:91
# 8748466396574f51b60ab5a05dc7b670
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation."
msgstr ""

#: ../../releases/1.0.txt:98
# fbc67f61e5024945872692af1a7b6e26
msgid "See :doc:`/ref/unicode`."
msgstr ""

#: ../../releases/1.0.txt:101
# 90034ea7c7164c808b5b56dd421e9368
msgid "An improved ORM"
msgstr ""

#: ../../releases/1.0.txt:103
# 50c0528f82f04d648a3cb8c8e331fba0
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is `available on the Django wiki`__."
msgstr ""

#: ../../releases/1.0.txt:115
# 4bfb337c6dd0426e976fa899f090c75b
msgid "Automatic escaping of template variables"
msgstr ""

#: ../../releases/1.0.txt:117
#: ../../releases/1.0-alpha-1.txt:63
# 26e1899d0c604b2a98f2069cb7cda0e9
# 055ddfaa71854de0892133749abbc808
msgid "To provide improved security against cross-site scripting (XSS) vulnerabilities, Django's template system now automatically escapes the output of variables. This behavior is configurable, and allows both variables and larger template constructs to be marked as safe (requiring no escaping) or unsafe (requiring escaping). A full guide to this feature is in the documentation for the :ttag:`autoescape` tag."
msgstr ""

#: ../../releases/1.0.txt:125
# ecc49248f20d46b1a98913511e5dd919
msgid "``django.contrib.gis`` (GeoDjango)"
msgstr ""

#: ../../releases/1.0.txt:127
# 4b38f90c76ca43359816bcd26402030d
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application. Its documentation is currently being maintained externally, and will be merged into the main Django documentation shortly. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0.txt:134
# c0f77a80f3f047ef9c46a82200196cbc
msgid "See http://geodjango.org/ for details."
msgstr ""

#: ../../releases/1.0.txt:139
# d6bd0038cfdb4019861418a7b6011782
msgid "Pluggable file storage"
msgstr ""

#: ../../releases/1.0.txt:141
#: ../../releases/1.0-alpha-2.txt:36
# caff570188e34142a8d48906dd84b47b
# 73d6d9416db0462fb0f563400d102437
msgid "Django's built-in ``FileField`` and ``ImageField`` now can take advantage of pluggable file-storage backends, allowing extensive customization of where and how uploaded files get stored by Django. For details, see :doc:`the files documentation </topics/files>`; big thanks go to Marty Alchin for putting in the hard work to get this completed."
msgstr ""

#: ../../releases/1.0.txt:148
# ecd78e6ff6234f4bb060bcaf8ea9e377
msgid "Jython compatibility"
msgstr ""

#: ../../releases/1.0.txt:150
#: ../../releases/1.0-alpha-2.txt:43
# 990e7258a79b46d3a87b2b78724dfa87
# fecda0d03ba9426ca8c0f6fc7989fa93
msgid "Thanks to a lot of work from Leo Soto during a Google Summer of Code project, Django's codebase has been refactored to remove incompatibilities with `Jython`_, an implementation of Python written in Java, which runs Python code on the Java Virtual Machine. Django is now compatible with the forthcoming Jython 2.5 release."
msgstr ""

#: ../../releases/1.0.txt:156
# 4e68c2f996fc4b998d97dbdb376b9e37
msgid "See :doc:`/howto/jython`."
msgstr ""

#: ../../releases/1.0.txt:161
# f9a25f65b0f44209906b67368eb96474
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../releases/1.0.txt:163
#: ../../releases/1.0-beta.txt:29
# 9ffdfd149a734e5f9fd85349434102ae
# 9d21129bf33245e7a21edbffe01c6351
msgid "Classes are now included in ``django.contrib.contenttypes`` which can be used to support generic relations in both the admin interface and in end-user forms. See :ref:`the documentation for generic relations <generic-relations>` for details."
msgstr ""

#: ../../releases/1.0.txt:168
# 008a45c06575454f8a0aa4f5cfd49975
msgid "``INSERT``/``UPDATE`` distinction"
msgstr ""

#: ../../releases/1.0.txt:170
# 7392678aed0a448f961d88b861bc5c86
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation."
msgstr ""

#: ../../releases/1.0.txt:176
# a60dd121d78f483393a004c658237809
msgid "See :ref:`ref-models-force-insert` for details."
msgstr ""

#: ../../releases/1.0.txt:179
# 38c65015c20a438e9de0f0f399e0dea4
msgid "Split ``CacheMiddleware``"
msgstr ""

#: ../../releases/1.0.txt:181
# d7b6f7149f43462bbb95970e824e4a16
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems."
msgstr ""

#: ../../releases/1.0.txt:188
# f7ae3409d5fd4ebc92fbf812c805c938
msgid "Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0.txt:192
# 86639d50c57c4d55ac8c6979eb87acf6
msgid "Refactored ``django.contrib.comments``"
msgstr ""

#: ../../releases/1.0.txt:194
# 61bcbb04994242b7b8a77d3d28970461
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as :doc:`an upgrade guide </ref/contrib/comments/upgrade>` if you were using the previous incarnation of the comments application."
msgstr ""

#: ../../releases/1.0.txt:202
# 5a634a2851204615917c62f269e8b3fd
msgid "Removal of deprecated features"
msgstr ""

#: ../../releases/1.0.txt:204
# 603f6fe81eec4fe38849dd35bcc4ec6e
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases."
msgstr ""

#: ../../releases/1.0.txt:214
# 2d9de17c55884e9eaaf50a05c715a449
msgid "Known issues"
msgstr ""

#: ../../releases/1.0.txt:216
# 8da636404c9241c48f60a66924a8ecd3
msgid "We've done our best to make Django 1.0 as solid as possible, but unfortunately there are a couple of issues that we know about in the release."
msgstr ""

#: ../../releases/1.0.txt:220
# 295cf54c5b2c430c91f2334745a9d63a
msgid "Multi-table model inheritance with ``to_field``"
msgstr ""

#: ../../releases/1.0.txt:222
# 03450df30fd746689b0bb8fc384c7588
msgid "If you're using :ref:`multiple table model inheritance <multi-table-inheritance>`, be aware of this caveat: child models using a custom ``parent_link`` and ``to_field`` will cause database integrity errors. A set of models like the following are **not valid**::"
msgstr ""

#: ../../releases/1.0.txt:235
# 69b18e76b3944f9f9db780d7a3255c6a
msgid "This bug will be fixed in the next release of Django."
msgstr ""

#: ../../releases/1.0.txt:238
# 137280de73f34f6abb30cb9bb28eb985
msgid "Caveats with support of certain databases"
msgstr ""

#: ../../releases/1.0.txt:240
# 6d3b61dca3604610a5c99c5f341388c7
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and in particular many of the supported database differ greatly from version to version. It's a good idea to checkout our :doc:`notes on supported database </ref/databases>`:"
msgstr ""

#: ../../releases/1.0.txt:243
# ae92f22227a947ad9872efdf1618ae76
msgid ":ref:`mysql-notes`"
msgstr ""

#: ../../releases/1.0.txt:244
# 79cf784f701f429aac37f1062465abb9
msgid ":ref:`sqlite-notes`"
msgstr ""

#: ../../releases/1.0.txt:245
# 1243a859855a40b98ad3fa1d9005a8f7
msgid ":ref:`oracle-notes`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:3
# c8d39695b6a74ed4856cae8e7d3e74ad
msgid "Django 1.0 alpha release notes"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:5
# 24cd358e55534da9a421b3337c7c4ecb
msgid "Welcome to Django 1.0 alpha!"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:7
# bb2c21b044194f1dbce8cb66ece5094b
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This release is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:13
#: ../../releases/1.0-alpha-2.txt:13
# 8449c5fdb2034b4a9789e7e774e434f7
# 4b514a7387d24589b4314fcd7f8791ce
msgid "As such, this release is *not* intended for production use, and any such use is strongly discouraged."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:18
# cd417bbfad414d2389ece1e5b4a265b4
msgid "What's new in Django 1.0 alpha"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:20
# 98672ad4caff4cecaa394ba9f44afecd
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. Some of the highlights include:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:35
# 99ef9977323f430899f9cb30acf1d04e
msgid ":doc:`admin reference </ref/contrib/admin/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:38
# 5ad3756937fc4602bc603ee5b9b7af61
msgid "Django's internals have been refactored to use Unicode throughout; this drastically simplifies the task of dealing with non-Western-European content and data in Django. Additionally, utility functions have been provided to ease interoperability with third-party libraries and systems which may or may not handle Unicode gracefully. Details are available in Django's Unicode-handling documentation:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:46
# a247244903a0481abe8d08b278c0e66e
msgid ":doc:`unicode reference </ref/unicode>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:49
# 75956eb128e14238a30867578ee2f267
msgid "Django's object-relational mapper -- the component which provides the mapping between Django model classes and your database, and which mediates your database queries -- has been dramatically improved by a massive refactoring. For most users of Django this is backwards-compatible; the public-facing API for database querying underwent a few minor changes, but most of the updates took place in the ORM's internals. A guide to the changes, including backwards-incompatible modifications and mentions of new features opened up by this refactoring, is available on the Django wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:60
# a1947de391a94f2194bcf0ad082b291c
msgid "https://code.djangoproject.com/wiki/QuerysetRefactorBranch"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:71
# 8657215a0a764db5954843fda234f8f6
msgid "There are many more new features, many bugfixes and many enhancements to existing features from previous releases. The ``newforms`` library, for example, has undergone massive improvements including several useful add-ons in ``django.contrib`` which complement and build on Django's form-handling capabilities, and Django's file-uploading handlers have been refactored to allow finer-grained control over the uploading process as well as streaming uploads of large files."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:79
# f4df8b6897f94501841f2978a9a05b32
msgid "Along with these improvements and additions, we've made a number of of backwards-incompatible changes to the framework, as features have been fleshed out and APIs have been finalized for the 1.0 release. A complete guide to these changes will be available as part of the final Django 1.0 release, and a comprehensive list of backwards-incompatible changes is also available on the Django wiki for those who want to begin developing and testing their upgrade process:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:87
# 5f8a37c690754042808a98c72248ecd6
msgid "https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:91
#: ../../releases/1.0-alpha-2.txt:64
#: ../../releases/1.0-beta.txt:86
#: ../../releases/1.0-beta-2.txt:65
# fc672e904f744f94a8bd854da3f9be57
# 1730f39c4db74e44a60594be9d29014c
# 4a18dc6f37d041769bb0490ddad9fe60
# 7457ff5ab0524f738f05e87f3a92bd0f
msgid "The Django 1.0 roadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:93
# 460eb5dbe7b24dabae2843604c80e2c0
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of sprints building up to a series of beta releases and a release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:100
# 0a6c7b6fa5bb4042ae3dfd8f4766f166
msgid "August 1, 2008: Sprint (based in Washington, DC, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:102
# 85ed4a56c3fc49639123a3e6f210e064
msgid "August 5, 2008: Django 1.0 beta 1 release. This will also constitute the feature freeze for 1.0. Any feature to be included in 1.0 must be completed and in trunk by this time."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:106
# 75ea6a8ce80744329cc13c3e4ad24025
msgid "August 8, 2008: Sprint (based in Lawrence, KS, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:108
# 6b73c6c835874ebfbb18eb7cbb5c32ae
msgid "August 12, 2008: Django 1.0 beta 2 release."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:110
# a18d0a508f2c4b86ada1d37e10fae75e
msgid "August 15, 2008: Sprint (based in Austin, TX, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:112
# 387506bb14364025a0d2d1f2bb84d077
msgid "August 19, 2008: Django 1.0 release candidate 1."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:114
# 5bc0b13b6aeb4068aa03cc14fd067a4e
msgid "August 22, 2008: Sprint (based in Portland, OR, and online)."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:116
# 0c4f8bbc2cd6406aa106ce17d4b9a19e
msgid "August 26, 2008: Django 1.0 release candidate 2."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:118
# 44675f298e424775976848cc80668532
msgid "September 2, 2008: Django 1.0 final release. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, CA, September 6-7."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:122
#: ../../releases/1.0-alpha-2.txt:97
#: ../../releases/1.0-beta.txt:114
# 5d21b091ca374d94b4ec156639df92cf
# 7bcd34e03fd4407b8214a83681e97e3f
# d417a14f1f474f31a08be8636a8c764c
msgid "Of course, like any estimated timeline, this is subject to change as requirements dictate. The latest information will always be available on the Django project wiki:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:126
#: ../../releases/1.0-alpha-2.txt:101
#: ../../releases/1.0-beta.txt:118
# 23e7cbf151a54e7fba6364a5521b0dea
# 7dea0ca84cca49a1a08d9153ddeb5fcc
# c118f340fe0c4302805c8b852554a35d
msgid "https://code.djangoproject.com/wiki/VersionOneRoadmap"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:130
#: ../../releases/1.0-alpha-2.txt:105
#: ../../releases/1.0-beta.txt:122
#: ../../releases/1.0-beta-2.txt:88
#: ../../releases/1.1-alpha-1.txt:129
#: ../../releases/1.1-beta-1.txt:174
#: ../../releases/1.1-rc-1.txt:78
#: ../../releases/1.2-alpha-1.txt:554
#: ../../releases/1.2-beta-1.txt:137
#: ../../releases/1.2-rc-1.txt:70
#: ../../releases/1.3-alpha-1.txt:368
#: ../../releases/1.3-beta-1.txt:204
#: ../../releases/1.4-alpha-1.txt:1090
#: ../../releases/1.4-beta-1.txt:1162
# e4311f481c824edb8a6e9a3ea5f0c691
# 749d0e33aa674e0ea63196ce5a92feb4
# 93798dc0aa06418d9051a6d0100e0ea5
# 5682358f9fda472080d8757395e98ec5
# c6f1c4db794045849ed4120a95c5dea4
# 1737f46234914515bb2be4386f503f33
# 79a51028171e45328bf608f9bd2fdf22
# 659d1af60b40445aba585425dae680fa
# 4edc738c2f2641e2b968b9cf1f0fc469
# 74957f75abb5485cbb7e01c47938a01c
# e5a13f90e6f247268ecc7b3bfff0bcde
# 5cc88c03e6684b8fba859821bca5d511
# c3b49c850f564d798497da5325580313
# 59f75f6221cf4ae68b4019ca7b4f39b9
msgid "What you can do to help"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:132
#: ../../releases/1.0-alpha-2.txt:107
# 214446a401ce4bcea5d51a357c1186d1
# b447869ba9994bf1af044983ed185296
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:139
#: ../../releases/1.0-alpha-2.txt:114
#: ../../releases/1.0-beta.txt:131
#: ../../releases/1.0-beta-2.txt:97
#: ../../releases/1.1-alpha-1.txt:137
#: ../../releases/1.1-beta-1.txt:182
#: ../../releases/1.1-rc-1.txt:87
#: ../../releases/1.2-alpha-1.txt:562
#: ../../releases/1.2-beta-1.txt:146
#: ../../releases/1.2-rc-1.txt:79
#: ../../releases/1.3-alpha-1.txt:376
#: ../../releases/1.3-beta-1.txt:212
#: ../../releases/1.4-alpha-1.txt:1098
#: ../../releases/1.4-beta-1.txt:1170
# 06c2db46582f45cc8ccd234d795256c8
# 16c9fecfc5cd42dab4582bc22811c167
# c9307c5103f2430d8d8522127e9a7b00
# 62d93db821c447fab7c77a166c797d0f
# 62f6815cd97a4e099accbb384249b823
# b3416f8339df4ef496f8a2c8a1c35a55
# 981db8c8be5944eaa058effdef64715e
# 0f365f56edd9431ca8dadf02ca99b975
# 5fbb8e4a573c46409ea90cf8aaff9303
# b466754665d6444188daac7ba21f78b9
# 48b995dc3e884a168b3365ff67ed1b47
# 5600000b0744449e9fd05422f0b12a8d
# 0e75dcd8ae3e4751b5acd0a156c6f266
# de444c8938da48e695039c6ea4231d23
msgid "https://code.djangoproject.com/timeline"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:141
#: ../../releases/1.0-alpha-2.txt:116
#: ../../releases/1.0-beta.txt:133
#: ../../releases/1.0-beta-2.txt:99
#: ../../releases/1.1-alpha-1.txt:139
#: ../../releases/1.1-beta-1.txt:184
#: ../../releases/1.2-alpha-1.txt:564
#: ../../releases/1.2-beta-1.txt:148
#: ../../releases/1.3-alpha-1.txt:378
#: ../../releases/1.3-beta-1.txt:214
#: ../../releases/1.4-alpha-1.txt:1100
#: ../../releases/1.4-beta-1.txt:1172
# fc2bf638710a413e80598e75773c51b0
# b49e3955ba7a4cfd8e215b2eb883d1b6
# 7e6cea7de1a24eebad96b1f77ff3183e
# d2b276d2c8d54b5fa9c5b86f1e9b5fe0
# 03669f538ca0486499103d6c5f2c910e
# d469c75f617e4758ba4bce7ebc020105
# baf661f1d64e4242b02768499cf109cb
# 03435eaedfe049f38b50d6c546fde717
# bdc7c46457fa4b64b3c69b552797f9aa
# 83e0698c6ba44d46ab915bb2f5c6d081
# c766fe2dfa5b4034a7fcdd36918614c2
# 2647620dbaa34e5da65b4fb76c0133c4
msgid "Please open new tickets if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:144
#: ../../releases/1.0-alpha-2.txt:119
#: ../../releases/1.0-beta.txt:136
#: ../../releases/1.0-beta-2.txt:102
# e5ddcf8f04af4aadaba0b9b32fc09fc6
# 2f87d8abfd064b0c80805638766c9253
# bc9df41cd9b844b38c2f5692d9efe7f7
# e99d58eef4c44292ae167fac94bcb2b5
msgid "Additionally, discussion of Django development, including progress toward the 1.0 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:148
#: ../../releases/1.0-alpha-2.txt:123
#: ../../releases/1.0-beta.txt:140
#: ../../releases/1.0-beta-2.txt:106
#: ../../releases/1.1.txt:449
#: ../../releases/1.1-alpha-1.txt:145
#: ../../releases/1.1-beta-1.txt:190
#: ../../releases/1.1-rc-1.txt:96
#: ../../releases/1.2-alpha-1.txt:570
#: ../../releases/1.2-beta-1.txt:155
#: ../../releases/1.2-rc-1.txt:88
#: ../../releases/1.3-alpha-1.txt:384
#: ../../releases/1.3-beta-1.txt:220
#: ../../releases/1.4-alpha-1.txt:1106
#: ../../releases/1.4-beta-1.txt:1178
# 50e326c3d57749239f0c560999fd5a5a
# 49a3d964687a42d9995eff4af85b8fb8
# c983d60393274d29b69e1cd7b3042ba6
# 1385f2c47c794e179dd9430197ac1860
# 5b8923754ef248babe9d0904619f9221
# 5246289da00f4ebf8e6676969e2093df
# fb04b82116fc4f0da45a4557b253340e
# 769b7a015ed14923903310c3389dfbaa
# 68777e15fb8c4fd4a3a21a24d441f827
# f4b731b989124215b8efd2e69226b5ce
# 7b8880094b214e4391ae01a247f0b868
# d362a8258ae54b658f5b22e83e16cd97
# 1ab78b3ca72c4c9f94a857dc8ceffd0d
# 957aad06d1fb48a0810426d295b6a596
# f765072f4fd94f8b8938587ae581bfe3
msgid "http://groups.google.com/group/django-developers"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:150
#: ../../releases/1.0-alpha-2.txt:125
#: ../../releases/1.0-beta.txt:142
#: ../../releases/1.0-beta-2.txt:108
# 6319c2f5ef054d7889a16046de1ca61c
# 33ec11ac5c3c4d1bb2f658b36d4d0b36
# d03e6479dfeb4bf194a582f2ae1f1e1c
# 02ada7288ab246c6bfbc2ba1caa83c60
msgid "...and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.0-alpha-1.txt:154
#: ../../releases/1.0-alpha-2.txt:129
#: ../../releases/1.0-beta.txt:146
#: ../../releases/1.0-beta-2.txt:112
#: ../../releases/1.1.txt:454
#: ../../releases/1.1-alpha-1.txt:151
#: ../../releases/1.1-beta-1.txt:196
#: ../../releases/1.1-rc-1.txt:102
#: ../../releases/1.2-alpha-1.txt:576
#: ../../releases/1.2-beta-1.txt:161
#: ../../releases/1.2-rc-1.txt:94
#: ../../releases/1.3-alpha-1.txt:390
#: ../../releases/1.3-beta-1.txt:226
#: ../../releases/1.4-alpha-1.txt:1112
#: ../../releases/1.4-beta-1.txt:1184
# 90af25a5328444aaaa4a13d7a48210f6
# 231bad72e59b49babe9fdf8b4f2b13ca
# 397961932a5d4e0a87b0613c7adb536c
# 34954de292fd4c54bce23472f811fd65
# 2b4c4caa592d4577a46861e02556e29f
# cf6329d878604967887eed296305de16
# cc69b5de1eb24a1b9701eed29f3a1335
# a9202f391eaa44aa986b53a295308184
# 55e2709d96604e0397c30b5ac238cbf1
# 1883f6cfda5546acb4137307a9f76203
# e09f949626194264a9bcec60640986f9
# 93ed2b259c5642c7bf1e56afceb46a03
# f20c87f0c1344ae69d52b4723cd8965d
# eef084a6b7c140a8b5de11961eb799a5
# ffd509a1e3c04d529ef2332409df7a84
msgid "Django's online documentation also includes pointers on how to contribute to Django:"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:157
#: ../../releases/1.0-alpha-2.txt:132
#: ../../releases/1.0-beta.txt:149
#: ../../releases/1.0-beta-2.txt:115
# 3bef2ec2f2994310894dad792e548ff6
# d0662bd5703a46bbb1ccfd162f1e419a
# 26980642f3f249f2bd2a66617dc0dca2
# 43f843afc9b248dd93f8b85433372120
msgid ":doc:`contributing to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.0-alpha-1.txt:159
#: ../../releases/1.0-alpha-2.txt:134
#: ../../releases/1.0-beta.txt:151
#: ../../releases/1.0-beta-2.txt:117
#: ../../releases/1.1.txt:459
#: ../../releases/1.1-alpha-1.txt:156
#: ../../releases/1.1-beta-1.txt:201
#: ../../releases/1.1-rc-1.txt:107
#: ../../releases/1.2-alpha-1.txt:581
#: ../../releases/1.2-beta-1.txt:166
#: ../../releases/1.2-rc-1.txt:99
#: ../../releases/1.3-alpha-1.txt:395
#: ../../releases/1.3-beta-1.txt:231
#: ../../releases/1.4-alpha-1.txt:1117
#: ../../releases/1.4-beta-1.txt:1189
# 77911d0c4f0b42269bf00376f9c97c59
# b83ce9b961fd45589568c299f549158a
# e1ffb265983c4fb2be438f5378a0a7dd
# 5a4eeea51521442988c6294d02624941
# 422914aba771429fb86919c86b693ffc
# ee564a84c0714d478f3c8da212c1cb25
# 14731771679545bb838d6457bbe47db8
# ddd49fdad7964bc8b94d0f71b7f311ab
# abab872d45174fe49ec823ee1b1f702d
# aad30826e344489ea95a78dea374c3f4
# 835500bc09f04a60badc6ca6282c93fd
# 11e7d678e8a3401db9642dba0df28f93
# 4dbc97f48de24ea09260447bd89c10e1
# 33d3dbb4088b41109d5f9a68958cec52
# 35966a6dddce4d75983555516be3afed
msgid "Contributions on any level -- developing code, writing documentation or simply triaging tickets and helping to test proposed bugfixes -- are always welcome and appreciated."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:3
# 0c5560d381864a0989946c3f7e099907
msgid "Django 1.0 alpha 2 release notes"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:5
# 0b4685fcb2984bcaab502e8c2694ec91
msgid "Welcome to Django 1.0 alpha 2!"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:7
# 1fb9fbc8287d4e8085fecdf32a0f2a99
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:18
# 5e81ddd9e54f494ba816b167b40dc59a
msgid "What's new in Django 1.0 alpha 2"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:20
# 3044d1e84d9944e6be7b4202568edd64
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. Since the 1.0 alpha 1 release several new features have landed, including:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:27
# 25309d836b284a1e8bc0dca2669d3e4a
msgid "A project over a year in the making, this adds world-class GIS (`Geographic Information Systems`_) support to Django, in the form of a ``contrib`` application.  `Its documentation`_ is currently being maintained externally, and will be merged into the main Django documentation prior to the final 1.0 release. Huge thanks go to Justin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in creating and completing this feature."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:50
# 161d6cce000c463d87fc7d0f874f74c7
msgid "There are many other new features and improvements in this release, including two major performance boosts: strings marked for translation using :doc:`Django's internationalization system </topics/i18n/index>` now consume far less memory, and Django's internal dispatcher -- which is invoked frequently during request/response processing and when working with Django's object-relational mapper -- is now significantly faster."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:66
# 816a89745e1945d8901d0bcbeb993402
msgid "One of the primary goals of this alpha release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the beta and release-candidate stages, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:73
# 96557e06199c4af38fd6e62bd330ea23
msgid "**August 14, 2008: Django 1.0 beta release.** Past this point Django will be in a \"feature freeze\" for the 1.0 release; after Django 1.0 beta, the development focus will be solely on bug fixes and stabilization."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:78
#: ../../releases/1.0-beta.txt:95
# 88e160d8969646ec8dcd2ec37b4ff6f0
# e1944b8716334f059489bd4d74470298
msgid "August 15, 2008: Sprint (based in Austin, Texas, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:80
#: ../../releases/1.0-beta.txt:97
# c2be7aed89224cd69e0d0855f375a214
# 9198e86472c4476e87ab2836598e93b5
msgid "August 17, 2008: Sprint (based in Tel Aviv, Israel, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:82
#: ../../releases/1.0-beta.txt:99
# fd6d4d3485b24f4dbeb76252b1be7fbb
# c3559afc3d2c4731ae12f8e1d83b841a
msgid "**August 21, 2008: Django 1.0 release candidate 1.** At this point, all strings marked for translation within Django's codebase will be frozen, to provide contributors time to check and finalize all of Django's bundled translation files prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:87
#: ../../releases/1.0-beta.txt:104
# 3f7cea138ef14899b110f6cf38b1f530
# fcfe18b2335e4cd09ce05b5efe1c1f4e
msgid "August 22, 2008: Sprint (based in Portland, Oregon, USA, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:89
#: ../../releases/1.0-beta.txt:106
# dd29f2a47b71472cbef1ddd377f4f29c
# b73a87ab1a4848c5b95ceef5341ea2ae
msgid "**August 26, 2008: Django 1.0 release candidate 2.**"
msgstr ""

#: ../../releases/1.0-alpha-2.txt:91
#: ../../releases/1.0-beta.txt:108
# 6a6052e878f34d32a36ab491db846fe2
# d7a98e095b364fec8f0a18d5645cf0dc
msgid "August 30, 2008: Sprint (based in London, England, UK, and online)."
msgstr ""

#: ../../releases/1.0-alpha-2.txt:93
#: ../../releases/1.0-beta.txt:110
# 267196b8115945a7856c1c816b4d4215
# 678b427340344b5ca5139d6934568f07
msgid "**September 2, 2008: Django 1.0 final release.** The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-beta.txt:3
# 778e3471928b4606808e2b5377d8f649
msgid "Django 1.0 beta 1 release notes"
msgstr ""

#: ../../releases/1.0-beta.txt:5
# 11e266f7648749f7993c022b7d8b3975
msgid "Welcome to Django 1.0 beta 1!"
msgstr ""

#: ../../releases/1.0-beta.txt:7
# 2f6f3157511147b48089a163ac121327
msgid "This is the third in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta.txt:13
#: ../../releases/1.0-beta-2.txt:13
#: ../../releases/1.1-alpha-1.txt:15
#: ../../releases/1.1-beta-1.txt:15
#: ../../releases/1.2-alpha-1.txt:15
#: ../../releases/1.2-beta-1.txt:16
#: ../../releases/1.3-alpha-1.txt:15
#: ../../releases/1.3-beta-1.txt:13
#: ../../releases/1.4-alpha-1.txt:15
#: ../../releases/1.4-beta-1.txt:15
#: ../../releases/1.5-alpha-1.txt:15
#: ../../releases/1.5-beta-1.txt:15
# 4fade39f265d424489f267cfc6d30e0a
# ee48c64d400045bb81edf1deadbbe3de
# 87bdd90ef6e84b20a96205407ce3b2ce
# 1daa4d563f6a43229f294a892c20ee2b
# 9a33e49dd45f4f67b584ff0a59b4d026
# 0be367e1c1f24659886f0f3f1e4de390
# 8b7d6b17fc07413f9865e42cf0c0b18a
# d4176508c724433e821cbdc59bc8d4e1
# 6789583841fe450cae69338a84824171
# 3f6642c4ae3f401481c19e8ad0a62c9a
# 4a630860d96445999de60847ec781950
# d0ecfbfdaf95479bbcab6c02ff55cf0c
msgid "As such, this release is *not* intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.0-beta.txt:17
# b4d7cf439f1d4489a20178c5638f9988
msgid "What's new in Django 1.0 beta 1"
msgstr ""

#: ../../releases/1.0-beta.txt:19
# c94c1b3eb1d34dc2916c88f7cf67a3cb
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release. For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`."
msgstr ""

#: ../../releases/1.0-beta.txt:25
# b845578ff8204a229aa0d642587e51c5
msgid "This beta release does not contain any major new features, but does include several smaller updates and improvements to Django:"
msgstr ""

#: ../../releases/1.0-beta.txt:35
# 318952efec3f4f14965e707de0d192b4
msgid "Following up on the refactoring of Django's administrative interface (``django.contrib.admin``), introduced in Django 1.0 alpha 1, two new hooks have been added to allow customized pre- and post-save handling of model instances in the admin. Full details are in :doc:`the admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-beta.txt:42
# 95f44a69bbb5474294930bacf450468f
msgid "Although Django's default behavior of having a model's ``save()`` method automatically determine whether to perform an ``INSERT`` or an ``UPDATE`` at the SQL level is suitable for the majority of cases, there are occasional situations where forcing one or the other is useful. As a result, models can now support an additional parameter to ``save()`` which can force a specific operation. Consult the database API documentation for details and important notes about appropriate use of this parameter."
msgstr ""

#: ../../releases/1.0-beta.txt:52
# bd4a697aedc9424e8a61615dc6182a8b
msgid "Django's ``CacheMiddleware`` has been split into three classes: ``CacheMiddleware`` itself still exists and retains all of its previous functionality, but it is now built from two separate middleware classes which handle the two parts of caching (inserting into and reading from the cache) separately, offering additional flexibility for situations where combining these functions into a single middleware posed problems. Full details, including updated notes on appropriate use, are in :doc:`the caching documentation </topics/cache>`."
msgstr ""

#: ../../releases/1.0-beta.txt:63
# c0cbb8232cb54dcfb48adf6dc3d84feb
msgid "A number of features and methods which had previously been marked as deprecated, and which were scheduled for removal prior to the 1.0 release, are no longer present in Django. These include imports of the form library from ``django.newforms`` (now located simply at ``django.forms``), the ``form_for_model`` and ``form_for_instance`` helper functions (which have been replaced by ``ModelForm``) and a number of deprecated features which were replaced by the dispatcher, file-uploading and file-storage refactorings introduced in the Django 1.0 alpha releases. A full list of these and all other backwards-incompatible changes is available on `the Django wiki`_."
msgstr ""

#: ../../releases/1.0-beta.txt:75
# 1cd42fbde9394eaca7d490a1043ce0ee
msgid "A number of other improvements and bugfixes have also been included: some tricky cases involving case-sensitivity in differing MySQL collations have been resolved, Windows packaging and installation has been improved and the method by which Django generates unique session identifiers has been made much more robust."
msgstr ""

#: ../../releases/1.0-beta.txt:88
# 27ad9c46c51341ff967faa42340f1c83
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. Following this release, we'll be conducting a series of development sprints building up to the release-candidate stage, followed soon after by Django 1.0. The timeline is projected to be:"
msgstr ""

#: ../../releases/1.0-beta.txt:124
#: ../../releases/1.0-beta-2.txt:90
# 0793100ad73049258cb1c0058548e1cd
# e7f2607ca2ff45a5928ddc1445389b66
msgid "In order to provide a high-quality 1.0 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:3
# 69a2a329870f4060bbd2bc71226ae02e
msgid "Django 1.0 beta 2 release notes"
msgstr ""

#: ../../releases/1.0-beta-2.txt:5
# 6cf2842231f942b3ae5ef637ca5e8cc1
msgid "Welcome to Django 1.0 beta 2!"
msgstr ""

#: ../../releases/1.0-beta-2.txt:7
# 4b1c7202656349d79668d5292b4b0d5f
msgid "This is the fourth in a series of preview/development releases leading up to the eventual release of Django 1.0, currently scheduled to take place in early September 2008. This releases is primarily targeted at developers who are interested in testing the Django codebase and helping to identify and resolve bugs prior to the final 1.0 release."
msgstr ""

#: ../../releases/1.0-beta-2.txt:17
# 07b41e9718c849828805b42b5ade7ab3
msgid "What's new in Django 1.0 beta 2"
msgstr ""

#: ../../releases/1.0-beta-2.txt:19
# ae6cfff414d54ef5bbd4bbe14f24b44b
msgid "Django's development trunk has been the site of nearly constant activity over the past year, with several major new features landing since the 0.96 release.  For features which were new as of Django 1.0 alpha 1, see :doc:`the 1.0 alpha 1 release notes </releases/1.0-alpha-1>`. For features which were new as of Django 1.0 alpha 2, see :doc:`the 1.0 alpha 2 release notes </releases/1.0-alpha-2>`. For features which were new as of Django 1.0 beta 1, see :doc:`the 1.0 beta 1 release notes </releases/1.0-beta>`."
msgstr ""

#: ../../releases/1.0-beta-2.txt:28
# fb4851e6c96e44439df5b9d48b97af09
msgid "This beta release includes two major features:"
msgstr ""

#: ../../releases/1.0-beta-2.txt:31
# c06ec904caea45a59cf8889113a58bb8
msgid "As part of a Google Summer of Code project, Thejaswi Puthraya carried out a major rewrite and refactoring of Django's bundled comment system, greatly increasing its flexibility and customizability. :doc:`Full documentation </ref/contrib/comments/index>` is available, as well as :doc:`an upgrade guide </ref/contrib/comments/upgrade>` if you were using the previous incarnation of the comments application.."
msgstr ""

#: ../../releases/1.0-beta-2.txt:40
# 33f9526f384741ba9dc3f4973ba1a1c2
msgid "Django's bundled and online documentation has also been significantly refactored; the new documentation system uses `Sphinx`_ to build the docs and handle such niceties as topical indexes, reference documentation and cross-references within the docs. You can check out the new documentation `online`_ or, if you have Sphinx installed, build the HTML yourself from the documentation files bundled with Django."
msgstr ""

#: ../../releases/1.0-beta-2.txt:51
# e2711087470b47778f8e7c7db6cc0c77
msgid "Along with these new features, the Django team has also been hard at work polishing Django's codebase for the final 1.0 release; this beta release contains a large number of smaller improvements and bugfixes from the ongoing push to 1.0."
msgstr ""

#: ../../releases/1.0-beta-2.txt:56
# 7ca979e376ca4e46bfbf5f761a13c665
msgid "Also, as part of its ongoing deprecation process, Django's old form-handling system has been removed; this means ``django.oldforms`` no longer exists, and its various API hooks (such as automatic manipulators) are no longer present in Django. This system has been completely replaced by :doc:`the new form-handling system </topics/forms/index>` in ``django.forms``."
msgstr ""

#: ../../releases/1.0-beta-2.txt:67
# f16102dee0064d26882e513f599e9d0c
msgid "One of the primary goals of this beta release is to focus attention on the remaining features to be implemented for Django 1.0, and on the bugs that need to be resolved before the final release. As of this beta release, Django is in its final \"feature freeze\" for 1.0; feature requests will be deferred to later releases, and the development effort will be focused solely on bugfixing and stability. Django is also now in a \"string freeze\"; translatable strings (labels, error messages, etc.) in Django's codebase will not be changed prior to the release, in order to allow our translators to produce the final 1.0 version of Django's translation files."
msgstr ""

#: ../../releases/1.0-beta-2.txt:78
# 8e159c9ceeb2426b9852cdadae52510e
msgid "Following this release, we'll be conducting a final development sprint on August 30, 2008, based in London and coordinated online; the goal of this sprint will be to squash as many bugs as possible in anticipation of the final 1.0 release, which is currently targeted for **September 2, 2008**. The official Django 1.0 release party will take place during the first-ever DjangoCon, to be held in Mountain View, California, USA, September 6-7."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:3
# cee5e3bd089d49288f9e72cbe982febc
msgid "Porting your apps from Django 0.96 to 1.0"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:7
# 989969b672e44ecf848a25de2630ae6c
msgid "Django 1.0 breaks compatibility with 0.96 in some areas."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:9
# 7739d02216e54e149f5dec253a974e10
msgid "This guide will help you port 0.96 projects and apps to 1.0. The first part of this document includes the common changes needed to run with 1.0. If after going through the first part your code still breaks, check the section `Less-common Changes`_ for a list of a bunch of less-common compatibility issues."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:16
# 99047235016048f2b170596c92663d4a
msgid "The :doc:`1.0 release notes </releases/1.0>`. That document explains the new features in 1.0 more deeply; the porting guide is more concerned with helping you quickly update your code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:21
# 5fedff01ff96420bb3a1bfa502ef9ab3
msgid "Common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:23
# 2443f4d3130f47498809abeb0f1565b9
msgid "This section describes the changes between 0.96 and 1.0 that most users will need to make."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:27
# 2126ed982524438a9aba4c7ecc663ea4
msgid "Use Unicode"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:29
# 39dcf3f3de494a469c08f1aea5245717
msgid "Change string literals (``'foo'``) into Unicode literals (``u'foo'``). Django now uses Unicode strings throughout. In most places, raw strings will continue to work, but updating to use Unicode literals will prevent some obscure problems."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:34
# f61bb9b2d1934c1caa9605e7e5165e02
msgid "See :doc:`/ref/unicode` for full details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:37
# 8e1d87efae4c4342add3489fa4d7d094
msgid "Models"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:39
# 6f831e0b312d4904a86139f83503f10e
msgid "Common changes to your models file:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:42
# 20a9a9d5c6cf4836a9b3b7ce03171525
msgid "Rename ``maxlength`` to ``max_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:44
# 8a51b681c3c943b8a3ec69653b33f960
msgid "Rename your ``maxlength`` argument to ``max_length`` (this was changed to be consistent with form fields):"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:48
# 32f8f21788f24cdb87ebf2549d567aa5
msgid "Replace ``__str__`` with ``__unicode__``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:50
# 7a38066e12b84cb69d0c57b53bcb435d
msgid "Replace your model's ``__str__`` function with a ``__unicode__`` method, and make sure you `use Unicode`_ (``u'foo'``) in that method."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:54
# 9488370614ad42d5a9408a049e493093
msgid "Remove ``prepopulated_from``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:56
# 87190f48165f432aa3f4d94193d2efde
msgid "Remove the ``prepopulated_from`` argument on model fields. It's no longer valid and has been moved to the ``ModelAdmin`` class in ``admin.py``. See `the admin`_, below, for more details about changes to the admin."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:61
# 61b2d8f1a8eb4c2b9ac0ed1891973068
msgid "Remove ``core``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:63
# dd19bcd952b84abbb9d46d8fbe670c55
msgid "Remove the ``core`` argument from your model fields. It is no longer necessary, since the equivalent functionality (part of :ref:`inline editing <admin-inlines>`) is handled differently by the admin interface now. You don't have to worry about inline editing until you get to `the admin`_ section, below. For now, remove all references to ``core``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:70
# c2828da0c2774a14b7e695b3e7ce82b3
msgid "Replace ``class Admin:`` with ``admin.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:72
# ec995257cdde4397b4363cf20dbc3130
msgid "Remove all your inner ``class Admin`` declarations from your models. They won't break anything if you leave them, but they also won't do anything. To register apps with the admin you'll move those declarations to an ``admin.py`` file; see `the admin`_ below for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:79
# 87576dea4ce44505ab8ab2014fd5c3d5
msgid "A contributor to djangosnippets__ has written a script that'll `scan your models.py and generate a corresponding admin.py`__."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:86
# 394c987b20374951bdf47bacfeca9ab7
msgid "Example"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:88
# 02c797f2d4194b3c8837efb7291bda24
msgid "Below is an example ``models.py`` file with all the changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:90
# 1bf881b0fa634feaa6afe0fc9c59a236
msgid "Old (0.96) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:103
# a7cbcb776e4e45dfb0663b4faf6fc903
msgid "New (1.0) ``models.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:113
# 71a691cf00bf4b9888a9f0947485aac9
msgid "New (1.0) ``admin.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:127
# 9a5cbc81b4694a758389f1bb3d3a4b59
msgid "The Admin"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:129
# e76ef022b8a4431b9975fd9383d9daca
msgid "One of the biggest changes in 1.0 is the new admin. The Django administrative interface (``django.contrib.admin``) has been completely refactored; admin definitions are now completely decoupled from model definitions, the framework has been rewritten to use Django's new form-handling library and redesigned with extensibility and customization in mind."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:135
# a524696bc9c04f3aac1984b302c5f426
msgid "Practically, this means you'll need to rewrite all of your ``class Admin`` declarations. You've already seen in `models`_ above how to replace your ``class Admin`` with a ``admin.site.register()`` call in an ``admin.py`` file. Below are some more details on how to rewrite that ``Admin`` declaration into the new syntax."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:142
# 7a8d534035a84a2f80e6544abc3f8c68
msgid "Use new inline syntax"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:144
# 64b0e6bca7b747c3a5175061bd46f09c
msgid "The new ``edit_inline`` options have all been moved to ``admin.py``. Here's an example:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:147
#: ../../releases/1.0-porting-guide.txt:176
#: ../../releases/1.0-porting-guide.txt:482
#: ../../releases/1.0-porting-guide.txt:504
#: ../../releases/1.0-porting-guide.txt:521
#: ../../releases/1.0-porting-guide.txt:647
# 0d462a63f1434d079adf32a64c8b17a4
# 9c162d4c4b67444a8d531be50bbb0253
# 41cd03026e4d4a09965aa16ba0902c13
# 9d9235cdb10d4a5689803859c6296d17
# a228abde64754dcdbca314f5e307c105
# 6f27c6f25372495fbdd0b4bcd4fc1a21
msgid "Old (0.96)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:156
#: ../../releases/1.0-porting-guide.txt:196
#: ../../releases/1.0-porting-guide.txt:489
#: ../../releases/1.0-porting-guide.txt:510
#: ../../releases/1.0-porting-guide.txt:527
#: ../../releases/1.0-porting-guide.txt:653
# b888f44ec4d2486bb102b8951288d413
# d58923129e164ac3accdb8936eef96b5
# 1a7b1101b7f343dba55387e75e27b83a
# 3e7744961f42492dbd22489afa8efa32
# d5ee27a398f84961ad3e86129dcfbee2
# 83d5c45d01f74056821a331f5a7a967c
msgid "New (1.0)::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:168
# 7d59c36189694c488597fd686c4e3a6f
msgid "See :ref:`admin-inlines` for more details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:171
# e8d6b5b78caf4bd5bafe0a66bde532ca
msgid "Simplify ``fields``, or use ``fieldsets``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:173
# 2e75c84b92b8496d8af1d4b6c482a978
msgid "The old ``fields`` syntax was quite confusing, and has been simplified. The old syntax still works, but you'll need to use ``fieldsets`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:210
# 55f564b04dd346c5b06017880b630b2b
msgid "More detailed information about the changes and the reasons behind them can be found on the `NewformsAdminBranch wiki page`__"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:213
# 2d2bfc4354d04b26bc1712702538d978
msgid "The new admin comes with a ton of new features; you can read about them in the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:219
# ebf5e151c6fb41669bdd438870c4f506
msgid "URLs"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:222
# b8fb4fd511294e099d47dd4d09abe05b
msgid "Update your root ``urls.py``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:224
# a085233782e54674bf6b0fc1ca999d1b
msgid "If you're using the admin site, you need to update your root ``urls.py``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:226
# b582ac47f96f4de49f64b967546566e4
msgid "Old (0.96) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:236
# e82f7899e2c24741bf495f4cd2c245aa
msgid "New (1.0) ``urls.py``::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:251
# 7b9ebdb974e1439abe85fbf691261460
msgid "Views"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:254
# 054bef67bded49d9865bc7f15ccd5fd3
msgid "Use ``django.forms`` instead of ``newforms``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:256
# 77754eb5447046829c80835ba88abb2d
msgid "Replace ``django.newforms`` with ``django.forms`` -- Django 1.0 renamed the ``newforms`` module (introduced in 0.96) to plain old ``forms``. The ``oldforms`` module was also removed."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:260
# 11de063e3d98481ab83392ddb9c5e6d3
msgid "If you're already using the ``newforms`` library, and you used our recommended ``import`` statement syntax, all you have to do is change your import statements."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:264
# 9ceaaf8dd8184805b9196cecb65250fe
msgid "Old::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:268
# a9fb20f68cb841458a1da64a13bd67eb
msgid "New::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:272
# 8830b547007e4467b9e1799cd4aac2d2
msgid "If you're using the old forms system (formerly known as ``django.forms`` and ``django.oldforms``), you'll have to rewrite your forms. A good place to start is the :doc:`forms documentation </topics/forms/index>`"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:277
# 27eaecc6f2644b0886416355610521fa
msgid "Handle uploaded files using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:279
# 3310950f3e5742b0b7371f5b9a0293d9
msgid "Replace use of uploaded files -- that is, entries in ``request.FILES`` -- as simple dictionaries with the new :class:`~django.core.files.UploadedFile`. The old dictionary syntax no longer works."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:283
# e93cf22182ec46bb8203543fe6c2a1a1
msgid "Thus, in a view like::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:289
# ebbf88f125394dce846021270615b0e6
msgid "...you'd need to make the following changes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:292
#: ../../releases/1.0-porting-guide.txt:309
#: ../../releases/1.0-porting-guide.txt:381
#: ../../releases/1.0-porting-guide.txt:739
# e5387a28daf549aa8d46915193767dae
# ace85089333f427692674e31dfc8120e
# 26e25cccf6ca4d6cafa9125298c00a20
# 742bcfd93e7e4e959adef28d8fb10ce1
msgid "Old (0.96)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:292
#: ../../releases/1.0-porting-guide.txt:309
#: ../../releases/1.0-porting-guide.txt:381
#: ../../releases/1.0-porting-guide.txt:739
# 809f3ba375cb4f78aa70f6c8696294a5
# 20e9ed65a02545ae8bff7aa31492009e
# 01f2f79b592a47efa3c00b2ca2e8a978
# 93e0dc79599e407fa543927856bc318d
msgid "New (1.0)"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:294
# dc105051fea14001a4d2b10dd49c153f
msgid "``f['content']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:294
# ca1ef255d3174c8ea8233fdf03df4275
msgid "``f.read()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# 6ba7523853494f6fb7dcf52e580c33df
msgid "``f['filename']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:295
# e20cb2f2a0a74348ba1756774f82f8d5
msgid "``f.name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# ce5fac3f94184963b214eb66a6975410
msgid "``f['content-type']``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:296
# 4992f65ed9b34bcfbdccb0e297dc56c3
msgid "``f.content_type``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:300
# c502c39d32a649f1b94d7bc865479dec
msgid "Work with file fields using the new API"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:302
# 39702b187f1f4a95bc1ae92b51e56e86
msgid "The internal implementation of :class:`django.db.models.FileField` have changed. A visible result of this is that the way you access special attributes (URL, filename, image size, etc) of these model fields has changed. You will need to make the following changes, assuming your model's :class:`~django.db.models.FileField` is called ``myfile``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:311
# 594a98d253624620be43c88494cee136
msgid "``myfile.get_content_filename()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:311
# e12a03e1e75a4025b1ba8e86fef57d24
msgid "``myfile.content.path``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 41eac94476dc46abaa330ed187776665
msgid "``myfile.get_content_url()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:312
# 759a4f090f704478969f9db454c624df
msgid "``myfile.content.url``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# f5582bf56c0c4f90a462e314e5fe113a
msgid "``myfile.get_content_size()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:313
# 011e26f801a04ccbac91465d6f5778b7
msgid "``myfile.content.size``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# 44ffeea5e7c44cfcb412c4e57d349846
msgid "``myfile.save_content_file()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:314
# a0302e6c12b747f99d1ec39c8dc13174
msgid "``myfile.content.save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# f83ac9eef0e6441e8b3a19d10c9bb8dc
msgid "``myfile.get_content_width()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:315
# 38da0e3b191943828a86064e0427d8e6
msgid "``myfile.content.width``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# 4f5569711a264de991aa66d1db060690
msgid "``myfile.get_content_height()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:316
# 826e584aef8847f7b78497375b66ab97
msgid "``myfile.content.height``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:319
# 425c0a2eab46469cab17392769f93b8b
msgid "Note that the ``width`` and ``height`` attributes only make sense for :class:`~django.db.models.ImageField` fields. More details can be found in the :doc:`model API </ref/models/fields>` documentation."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:324
# dfe601e1731a45ccb30108724ca227ca
msgid "Use ``Paginator`` instead of ``ObjectPaginator``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:326
# c9c0fc8a9b4b44fdab17418ee39ced8c
msgid "The ``ObjectPaginator`` in 0.96 has been removed and replaced with an improved version, :class:`django.core.paginator.Paginator`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:330
# dddd292bc20d4747b8977022bbcb01b0
msgid "Templates"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:333
# fec729e2bb6e4123b883ee62ca042036
msgid "Learn to love autoescaping"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:335
# a462c4571b8a4b05bc0450e63b2c6f8f
msgid "By default, the template system now automatically HTML-escapes the output of every variable. To learn more, see :ref:`automatic-html-escaping`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:338
# 8761108951374786a863ca97cfef8817
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:346
# 56121e3119fe449ba274e075438b7018
msgid "To disable auto-escaping for an entire template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:356
# 74c177928004415bb0f4520ff729352f
msgid "Less-common changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:358
# 5e46857622eb463cb0afc5096dd620b9
msgid "The following changes are smaller, more localized changes. They should only affect more advanced users, but it's probably worth reading through the list and checking your code for these things."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:363
# 908d62e72c9349adbc0a92af5d5aabf6
msgid "Signals"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:365
# df24bbcfab344d7ab8e2da5bb365a58c
msgid "Add ``**kwargs`` to any registered signal handlers."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:367
# 21b8ecfdd8a54a8f8242dd70a26abff6
msgid "Connect, disconnect, and send signals via methods on the :class:`~django.dispatch.Signal` object instead of through module methods in ``django.dispatch.dispatcher``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:371
# 4bf68106c61544e2b9e045c79b127f39
msgid "Remove any use of the ``Anonymous`` and ``Any`` sender options; they no longer exist. You can still receive signals sent by any sender by using ``sender=None``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:375
# 94eb6f4aab034fb08c87b339f397a442
msgid "Make any custom signals you've declared into instances of :class:`django.dispatch.Signal` instead of anonymous objects."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:378
# 5a6d8d5232f048109e99dc7d298fb6b1
msgid "Here's quick summary of the code changes you'll need to make:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:383
# 857294e2ef8a4a969fb395d62c761878
msgid "``def callback(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:383
# c7759672047f48bbbe9b0ceba9ee9c93
msgid "``def callback(sender, **kwargs)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# 8b4757fb1b09465e81f57f6a01832788
msgid "``sig = object()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:384
# fe0520d9f5174204ad6cf37dc3050aeb
msgid "``sig = django.dispatch.Signal()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# eda26d841fae47a9a02f648ef6476892
msgid "``dispatcher.connect(callback, sig)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:385
# f672eef88307492db5ae4b4c429f5fe6
msgid "``sig.connect(callback)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# bc6bcd12373645d9ab23b5f50c94bfc9
msgid "``dispatcher.send(sig, sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:386
# 4ece4455c4574d5cb360ce2d8e686bdd
msgid "``sig.send(sender)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# dabcc794310b49d783ecda2b6106ebc8
msgid "``dispatcher.connect(callback, sig, sender=Any)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:387
# ad0bcb2b559b4d1d96955029a3dcecbb
msgid "``sig.connect(callback, sender=None)``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:391
# 15cdea5d907f4af4985cec58c4748641
msgid "Comments"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:393
# afce12182ba54f0c8edcf1b05286748e
msgid "If you were using Django 0.96's ``django.contrib.comments`` app, you'll need to upgrade to the new comments app introduced in 1.0. See :doc:`/ref/contrib/comments/upgrade` for details."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:398
# f2403ff092e54b4a888e9410e4df2cbb
msgid "Template tags"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:401
# ec11de1f9fc54f6dbad7f310af6823c8
msgid ":ttag:`spaceless` tag"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:403
# a683f144304943bbac2be73788bd6a28
msgid "The spaceless template tag now removes *all* spaces between HTML tags, instead of preserving a single space."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:407
# 48992a7b7a084e67b666005e5441ca85
msgid "Local flavors"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:410
# 01e1f931d1594d06be98d973108852a3
msgid "U.S. local flavor"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:412
# 9d534713a6134697b6460531c73aa588
msgid "``django.contrib.localflavor.usa`` has been renamed to :mod:`django.contrib.localflavor.us`. This change was made to match the naming scheme of other local flavors. To migrate your code, all you need to do is change the imports."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:418
# 08054a1c983f44d9a13f309d1d327b30
msgid "Sessions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:421
# 44eb64733ca04f939f6c32edbfa60310
msgid "Getting a new session key"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:423
# f100ac03e35d46edab8a2cb79a0c2bd7
msgid "``SessionBase.get_new_session_key()`` has been renamed to ``_get_new_session_key()``. ``get_new_session_object()`` no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:427
# 8b04b34272af420aae47547205e39caa
msgid "Fixtures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:430
# e21451d7fea74578b4f5d97b8407e919
msgid "Loading a row no longer calls ``save()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:432
# 8489c0566c6b4bccaf87dddaaa947d03
msgid "Previously, loading a row automatically ran the model's ``save()`` method. This is no longer the case, so any fields (for example: timestamps) that were auto-populated by a ``save()`` now need explicit values in any fixture."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:437
# 4c1ea58967034e21ad116dac09582bd4
msgid "Settings"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:440
# 76ecf38492f4420fa597b5faafb4166a
msgid "Better exceptions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:442
# f086451e09ef45a78ac3381a5116d26d
msgid "The old :exc:`EnvironmentError` has split into an :exc:`ImportError` when Django fails to find the settings module and a :exc:`RuntimeError` when you try to reconfigure settings after having already used them"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:447
# 132988a5f0034bd7984adc3068017375
msgid ":setting:`LOGIN_URL` has moved"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:449
# c0f6cf7e8dee4472b818624914766a8b
msgid "The :setting:`LOGIN_URL` constant moved from ``django.contrib.auth`` into the ``settings`` module. Instead of using ``from django.contrib.auth import LOGIN_URL`` refer to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:454
# faf8ff2bcf9745efb1d1a834a17f5658
msgid ":setting:`APPEND_SLASH` behavior has been updated"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:456
# 3da643e96ea2491daa6997a4f8f97f1c
msgid "In 0.96, if a URL didn't end in a slash or have a period in the final component of its path, and :setting:`APPEND_SLASH` was True, Django would redirect to the same URL, but with a slash appended to the end. Now, Django checks to see whether the pattern without the trailing slash would be matched by something in your URL patterns. If so, no redirection takes place, because it is assumed you deliberately wanted to catch that pattern."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:463
# 0099433b306f40e580d300564d07997a
msgid "For most people, this won't require any changes. Some people, though, have URL patterns that look like this::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:468
# 4e8fa75c2e1042a7a064f542081a4d6c
msgid "Previously, those patterns would have been redirected to have a trailing slash. If you always want a slash on such URLs, rewrite the pattern as::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:474
# e2bd814d23394ee7a142d8558bcd4501
msgid "Smaller model changes"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:477
# 7bb8ca59ab2e4abeaf0b7c07137d0a3e
msgid "Different exception from ``get()``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:479
# 52a16896307b4cf686d7b82954e15f68
msgid "Managers now return a :exc:`MultipleObjectsReturned` exception instead of :exc:`AssertionError`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:497
# a19186754cdf45ef9fa024ae5f9ae95b
msgid "``LazyDate`` has been fired"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:499
# 53540587662f4facb0c319524954fd48
msgid "The ``LazyDate`` helper class no longer exists."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:501
# d34de3f531754c1caf5772753c813d30
msgid "Default field values and query arguments can both be callable objects, so instances of ``LazyDate`` can be replaced with a reference to ``datetime.datetime.now``:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:519
# 929d306386d64e1b8d7bc885f42474ac
msgid "``DecimalField`` is new, and ``FloatField`` is now a proper float"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:533
# 75a34340189349ef9e9bd43c5600ae7b
msgid "If you forget to make this change, you will see errors about ``FloatField`` not taking a ``max_digits`` attribute in ``__init__``, because the new ``FloatField`` takes no precision-related arguments."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:537
# 7ddff7e354334d95a9003b448f27fd46
msgid "If you're using MySQL or PostgreSQL, no further changes are needed. The database column types for ``DecimalField`` are the same as for the old ``FloatField``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:541
# 73680e32614f479da6000d8747292e44
msgid "If you're using SQLite, you need to force the database to view the appropriate columns as decimal types, rather than floats. To do this, you'll need to reload your data. Do this after you have made the change to using ``DecimalField`` in your code and updated the Django code."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:548
# 474adea453a9423e866483b73d29b867
msgid "**Back up your database first!**"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:550
# 583e6044b3e8420ebdd86ed900f60587
msgid "For SQLite, this means making a copy of the single file that stores the database (the name of that file is the :setting:`DATABASE_NAME` in your settings.py file)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:554
# c5b16f5cf7d54df2a85687a76af6dcc5
msgid "To upgrade each application to use a ``DecimalField``, you can do the following, replacing ``<app>`` in the code below with each app's name:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:563
# fcc29018a4184449a56e7ec6952878a3
msgid "Notes:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:565
# 3d652aa764514e7ebefdf3b12cc2d9f1
msgid "It's important that you remember to use XML format in the first step of this process. We are exploiting a feature of the XML data dumps that makes porting floats to decimals with SQLite possible."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:569
# 57071dc8b0704a2b9ed2c71d1b3f871d
msgid "In the second step you will be asked to confirm that you are prepared to lose the data for the application(s) in question. Say yes; we'll restore this data in the third step, of course."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:573
# f586e4a1e71e4074a0b5371263ec0461
msgid "``DecimalField`` is not used in any of the apps shipped with Django prior to this change being made, so you do not need to worry about performing this procedure for any of the standard Django models."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:577
# e6973ffe722f412394d526b5fc39e7ba
msgid "If something goes wrong in the above process, just copy your backed up database file over the original file and start again."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:581
# 03d2a9074aa14e99b1e1629cbd4d7c19
msgid "Internationalization"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:584
# 4e58421c41db4700b00df518c9e20dd6
msgid ":func:`django.views.i18n.set_language` now requires a POST request"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:586
# 7622cee420324d488f233ddf7eb3f57d
msgid "Previously, a GET request was used. The old behavior meant that state (the locale used to display the site) could be changed by a GET request, which is against the HTTP specification's recommendations. Code calling this view must ensure that a POST request is now made, instead of a GET. This means you can no longer use a link to access the view, but must use a form submission of some kind (e.g. a button)."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:594
# 2d70115196e143a090c70f714a912352
msgid "``_()`` is no longer in builtins"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:596
# 52df84f190694d91b6dc9d881bdcf0d3
msgid "``_()`` (the callable object whose name is a single underscore) is no longer monkeypatched into builtins -- that is, it's no longer available magically in every module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:600
# dcb02060d14e45619e179545feb642fd
msgid "If you were previously relying on ``_()`` always being present, you should now explicitly import ``ugettext`` or ``ugettext_lazy``, if appropriate, and alias it to ``_`` yourself::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:607
# 317dbc09dfea45d5a6e83046af5bb931
msgid "HTTP request/response objects"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:610
# e417d890548b4d748a58432301f3c3ff
msgid "Dictionary access to ``HttpRequest``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:612
# 30a9d0a4a25e4a4896db4d3af11fef9b
msgid "``HttpRequest`` objects no longer directly support dictionary-style access; previously, both ``GET`` and ``POST`` data were directly available on the ``HttpRequest`` object (e.g., you could check for a piece of form data by using ``if 'some_form_key' in request`` or by reading ``request['some_form_key']``. This is no longer supported; if you need access to the combined ``GET`` and ``POST`` data, use ``request.REQUEST`` instead."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:620
# a08bec531b7847509772efc9fd7bb41c
msgid "It is strongly suggested, however, that you always explicitly look in the appropriate dictionary for the type of request you expect to receive (``request.GET`` or ``request.POST``); relying on the combined ``request.REQUEST`` dictionary can mask the origin of incoming data."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:626
# e4cd177b5c254cc0bcdc12fc2179dded
msgid "Accessing ``HTTPResponse`` headers"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:628
# d69d8b00adf64a32b9091b96b80eed7e
msgid "``django.http.HttpResponse.headers`` has been renamed to ``_headers`` and :class:`~django.http.HttpResponse` now supports containment checking directly. So use ``if header in response:`` instead of ``if header in response.headers:``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:633
# e391fa62263843f4b43f06e99ed3c250
msgid "Generic relations"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:636
# 8e6dc994b90d44f2a4f2f2d32eae6805
msgid "Generic relations have been moved out of core"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:638
# 0aa4e6c014e940b3af1ae6c981540b90
msgid "The generic relation classes -- ``GenericForeignKey`` and ``GenericRelation`` -- have moved into the :mod:`django.contrib.contenttypes` module."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:642
# 36fceb3968a844aca875089c2f17673a
msgid "Testing"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:645
# c3a5556e9945415cba5c7891e0a3be79
msgid ":meth:`django.test.Client.login` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:659
# 3af51ebde3b04f67b7ebd6da323e72df
msgid "Management commands"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:662
# b8f3d298497c4437aeefb3e087317a32
msgid "Running management commands from your code"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:664
# fc90977b2d4e45c2828f213444f66ed7
msgid ":mod:`django.core.management` has been greatly refactored."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:666
# 96ea6a981f784d7a9490a8649d5185c1
msgid "Calls to management services in your code now need to use ``call_command``. For example, if you have some test code that calls flush and load_data::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:674
# 8229041e6e3e4d21a0275aed56c843c1
msgid "...you'll need to change this code to read::"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:681
# 7cf35f157ae345a098fcc07dfc5f85d5
msgid "Subcommands must now precede options"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:683
# 2b5cbfda8f0b42fda9edc95aa1b6519f
msgid "``django-admin.py`` and ``manage.py`` now require subcommands to precede options. So:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:690
# 72c4895e33d04402b09f2a91034c539b
msgid "...no longer works and should be changed to:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:697
# 5bd3c716e27043d68c67f74fc01cdf12
msgid "Syndication"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:700
# a3f7c4c556624b07aac1c6cd2757a69b
msgid "``Feed.__init__`` has changed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:702
# d2a43ad22c344d55828c97fce21a7ef1
msgid "The ``__init__()`` method of the syndication framework's ``Feed`` class now takes an ``HttpRequest`` object as its second parameter, instead of the feed's URL. This allows the syndication framework to work without requiring the sites framework. This only affects code that subclasses ``Feed`` and overrides the ``__init__()`` method, and code that calls ``Feed.__init__()`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:709
# 41d2daacec2c4d81924237261bcc838e
msgid "Data structures"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:712
# 63930c52cb594a12af877f856aebdb84
msgid "``SortedDictFromList`` is gone"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:714
# 9c2c755052974b51b92afa7ac71e0fb2
msgid "``django.newforms.forms.SortedDictFromList`` was removed. :class:`django.utils.datastructures.SortedDict` can now be instantiated with a sequence of tuples."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:718
# 3e0ba8c972f34f6ebd4709df2ed36710
msgid "To update your code:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:720
# 4ba30c7d22e243e3acb398998c2ed5fd
msgid "Use :class:`django.utils.datastructures.SortedDict` wherever you were using ``django.newforms.forms.SortedDictFromList``."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:723
# d40f49788d9c48a0876793bdb21007fe
msgid "Because :meth:`django.utils.datastructures.SortedDict.copy` doesn't return a deepcopy as ``SortedDictFromList.copy()`` did, you will need to update your code if you were relying on a deepcopy. Do this by using ``copy.deepcopy`` directly."
msgstr ""

#: ../../releases/1.0-porting-guide.txt:729
# 7b36fbe278554e7caa420146a8448c2f
msgid "Database backend functions"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:732
# ec80612e01a74d1497391aa59e54684e
msgid "Database backend functions have been renamed"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:734
# b701e48fc47840488a445225bfbdbd7e
msgid "Almost *all* of the database backend-level functions have been renamed and/or relocated. None of these were documented, but you'll need to change your code if you're using any of these functions, all of which are in :mod:`django.db`:"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:741
# a42e7d845c1947d8b751e076ad8e14a9
msgid "``backend.get_autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:741
# 182746dc0e6e4bb48a3f0c55ae2948ea
msgid "``connection.ops.autoinc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:742
# fb3ec2764c064e7ea1a0cdcfed875898
msgid "``backend.get_date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:742
# 537114bdac3742c09bce34feeb55bdf2
msgid "``connection.ops.date_extract_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# 5a519566eab34e08b93046c789a4e296
msgid "``backend.get_date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:743
# 2edd0dd974fc4ce38d0a4f577d3bb635
msgid "``connection.ops.date_trunc_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 9921123992d240248659c3630a121ebc
msgid "``backend.get_datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:744
# 6acb28b77f824fc2ba630d0f7ea80eee
msgid "``connection.ops.datetime_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# df005b665484413897da72df8c7efbd4
msgid "``backend.get_deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:745
# 2c7e3b02151140c29638208f4050b4bf
msgid "``connection.ops.deferrable_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# d47a4f99f4204a40bcc0b83d56b4826f
msgid "``backend.get_drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:746
# 0c66cb2ab68e46d6a51ab2d0c622631b
msgid "``connection.ops.drop_foreignkey_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# 474ac443f7d849bb8ec145ddfdc2ce3e
msgid "``backend.get_fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:747
# 7f3aa3d0a9434bbdb45e4bdeb99df508
msgid "``connection.ops.fulltext_search_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# f86fb10fdd9b4861bca8a673950bb105
msgid "``backend.get_last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:748
# 0a5508aebbd643e695b3b61c75552e2d
msgid "``connection.ops.last_insert_id``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# 9f60ee7c51584458a51eb59d4704bec8
msgid "``backend.get_limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:749
# e0017688408948afaa180d68a121535c
msgid "``connection.ops.limit_offset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# 8b5db2d4a3364b5e9fa85fc581bd2193
msgid "``backend.get_max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:750
# 9744d29f7240457c8e454216fee80579
msgid "``connection.ops.max_name_length``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# 23d526a9d7b146a69024615c4ae9b777
msgid "``backend.get_pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:751
# 2e148308caf9404a9b1161f984b2ce06
msgid "``connection.ops.pk_default_value``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# 83d187b111ad416daec5a27d4c28e2ae
msgid "``backend.get_random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:752
# ba911cba852b4e40a26869846c7a1f84
msgid "``connection.ops.random_function_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# e49ed6360bdd4f60918dfcad5311eac4
msgid "``backend.get_sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:753
# 953b671d6f3a46e7a650661537f5b234
msgid "``connection.ops.sql_flush``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# 3a6671549eff4f699b18f5e773249558
msgid "``backend.get_sql_sequence_reset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:754
# 389966539615433db88f49d7408eeb86
msgid "``connection.ops.sequence_reset_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# 8fec3664b272473789e353d0d17bf0bb
msgid "``backend.get_start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:755
# ec26a3ab93014a9db3dfebfb8a58640f
msgid "``connection.ops.start_transaction_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# 907b5c03332e485a989ae98aacd4fa7e
msgid "``backend.get_tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:756
# bdf8045f36c54971b210a34d3039fef9
msgid "``connection.ops.tablespace_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# 1152ba972d98422daf14d3dc713b4704
msgid "``backend.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:757
# e1bd212f2cfb41a8af97d0163cc6a9bd
msgid "``connection.ops.quote_name``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# 6cd820c0d6434f34a269b3b252f6e29b
msgid "``backend.get_query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:758
# 5fbc669c71244c95ad5177e5045604e6
msgid "``connection.ops.query_set_class``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# be58a512ea7a4343880444206d5dc012
msgid "``backend.get_field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:759
# 63f17614828e4cc8add611385a78a5b3
msgid "``connection.ops.field_cast_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# 9abeb955f6a149698b2f2987b8267687
msgid "``backend.get_drop_sequence``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:760
# 8b860c3e594e4c0f8c846dde534fd88f
msgid "``connection.ops.drop_sequence_sql``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# dd5d972e491049ad894fa3c7b76c3f9c
msgid "``backend.OPERATOR_MAPPING``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:761
# 4a65f6b69e60464da1339dc87000963b
msgid "``connection.operators``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# 83ea15814ead4121ab2670a02dc7e75b
msgid "``backend.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:762
# a76646f9df8c469abf582a0a1a7bac7c
msgid "``connection.features.allows_group_by_ordinal``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# b330ef3962de4c7ca831b227e7afa9ce
msgid "``backend.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:763
# f9abe371c8fb4c73bf8bdda26958fb6e
msgid "``connection.features.allows_unique_and_pk``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# e8ad6a9ae5e741b3b151f922e2df164d
msgid "``backend.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:764
# 0107c4de7b124f86855fe939222a5fcd
msgid "``connection.features.autoindexes_primary_keys``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# d339d038db294461b07f7f3b378461f8
msgid "``backend.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:765
# af1d2128cef84bd59acb8d22d1071973
msgid "``connection.features.needs_datetime_string_cast``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# 75b9e90d89484373ad8bba7763b133b6
msgid "``backend.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:766
# 62ae3f71cfc6451ea0e0d7c57992ba49
msgid "``connection.features.needs_upper_for_iops``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# 232bc2be9e014dd8abd386d72c89df92
msgid "``backend.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:767
# d20f7afffb814cb98ba855e3f3712554
msgid "``connection.features.supports_constraints``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# c0edad806a5547569c1f52532628193c
msgid "``backend.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:768
# 57f16cd50dc5470596e5d82592929ea7
msgid "``connection.features.supports_tablespaces``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# 1ff7000fca6a4c1fa3305419586d300e
msgid "``backend.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:769
# ccc9caead7264b32a9bd4c6dee44e55e
msgid "``connection.features.uses_case_insensitive_names``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# d3677a9ee6e1459f9b8aa0c5359531b9
msgid "``backend.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0-porting-guide.txt:770
# e06c1f7345c24b718bf8708607023f33
msgid "``connection.features.uses_custom_queryset``"
msgstr ""

#: ../../releases/1.0.1.txt:3
# 87a062d69b874845a0d975123c702303
msgid "Django 1.0.1 release notes"
msgstr ""

#: ../../releases/1.0.1.txt:5
# 00da340b587f473ab40ed1d41a0452db
msgid "Welcome to Django 1.0.1!"
msgstr ""

#: ../../releases/1.0.1.txt:7
# fc9390b1c9b94b628fb1cbf63c39b3dc
msgid "This is the first \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.1 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability/>`, maintains backwards compatibility with Django 1.0), but does contain a number of fixes and other improvements. Django 1.0.1 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.1.txt:17
# 0d76748c55744dfca638b8282e1424fb
msgid "Fixes and improvements in Django 1.0.1"
msgstr ""

#: ../../releases/1.0.1.txt:19
# 4ac0840019b64ac5b8cc18638b1c8da3
msgid "Django 1.0.1 contains over two hundred fixes to the original Django 1.0 codebase; full details of every fix are available in `the history of the 1.0.X branch`_, but here are some of the highlights:"
msgstr ""

#: ../../releases/1.0.1.txt:24
# 75eace8fca1b49ec9cbace3cf917a8d7
msgid "Several fixes in ``django.contrib.comments``, pertaining to RSS feeds of comments, default ordering of comments and the XHTML and internationalization of the default templates for comments."
msgstr ""

#: ../../releases/1.0.1.txt:28
# ce75b455c4624a1eb41ecaf2e167a07f
msgid "Multiple fixes for Django's support of Oracle databases, including pagination support for GIS QuerySets, more efficient slicing of results and improved introspection of existing databases."
msgstr ""

#: ../../releases/1.0.1.txt:32
# 7bd7d56e6a604a9f90e9d2d37a91f040
msgid "Several fixes for query support in the Django object-relational mapper, including repeated setting and resetting of ordering and fixes for working with ``INSERT``-only queries."
msgstr ""

#: ../../releases/1.0.1.txt:36
# 4da3b4f6a358495baa070589ee7a4947
msgid "Multiple fixes for inline forms in formsets."
msgstr ""

#: ../../releases/1.0.1.txt:38
# 0c880535b36d411a8f600b5452f872a2
msgid "Multiple fixes for ``unique`` and ``unique_together`` model constraints in automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:41
# 98511393173a42a5b5745e9d00583754
msgid "Fixed support for custom callable ``upload_to`` declarations when handling file uploads through automatically-generated forms."
msgstr ""

#: ../../releases/1.0.1.txt:44
# 417e061b02ef477bb4c56e42ca143a85
msgid "Fixed support for sorting an admin change list based on a callable attributes in ``list_display``."
msgstr ""

#: ../../releases/1.0.1.txt:47
# 171eb879635647d6bf4903ac5d1de86f
msgid "A fix to the application of autoescaping for literal strings passed to the ``join`` template filter. Previously, literal strings passed to ``join`` were automatically escaped, contrary to :ref:`the documented behavior for autoescaping and literal strings <string-literals-and-automatic-escaping>`. Literal strings passed to ``join`` are no longer automatically escaped, meaning you must now manually escape them; this is an incompatibility if you were relying on this bug, but not if you were relying on escaping behaving as documented."
msgstr ""

#: ../../releases/1.0.1.txt:57
# b3020bf2acbe47629a48d4cadd32629e
msgid "Improved and expanded translation files for many of the languages Django supports by default."
msgstr ""

#: ../../releases/1.0.1.txt:60
# d668f27fddb54af28703ae7cdb6600a6
msgid "And as always, a large number of improvements to Django's documentation, including both corrections to existing documents and expanded and new documentation."
msgstr ""

#: ../../releases/1.0.2.txt:3
# 6e1c78adf42f453eb6e53fcafcfec3e0
msgid "Django 1.0.2 release notes"
msgstr ""

#: ../../releases/1.0.2.txt:5
# d3be7b7cd7df4848a25721fa5d93166e
msgid "Welcome to Django 1.0.2!"
msgstr ""

#: ../../releases/1.0.2.txt:7
# 397a7cb635a943a3adb58cba9ded1b31
msgid "This is the second \"bugfix\" release in the Django 1.0 series, improving the stability and performance of the Django 1.0 codebase. As such, Django 1.0.2 contains no new features (and, pursuant to :doc:`our compatibility policy </misc/api-stability>`, maintains backwards compatibility with Django 1.0.0), but does contain a number of fixes and other improvements. Django 1.0.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.0."
msgstr ""

#: ../../releases/1.0.2.txt:17
# 34c4b8eab7de4ee3a4ee5a05a735b293
msgid "Fixes and improvements in Django 1.0.2"
msgstr ""

#: ../../releases/1.0.2.txt:19
# b7c8f8cc53c04cb48824df1403d95bf1
msgid "The primary reason behind this release is to remedy an issue in the recently-released Django 1.0.1; the packaging scripts used for Django 1.0.1 omitted some directories from the final release package, including one directory required by ``django.contrib.gis`` and part of Django's unit-test suite."
msgstr ""

#: ../../releases/1.0.2.txt:25
# 01c92a9fe9664d1cae619de37e2af0f3
msgid "Django 1.0.2 contains updated packaging scripts, and the release package contains the directories omitted from Django 1.0.1. As such, this release contains all of the fixes and improvements from Django 1.0.1; see :doc:`the Django 1.0.1 release notes </releases/1.0.1>` for details."
msgstr ""

#: ../../releases/1.0.2.txt:31
# f971616b6c58415d8ae6185bc3b81cf4
msgid "Additionally, in the period since Django 1.0.1 was released:"
msgstr ""

#: ../../releases/1.0.2.txt:33
# 8a59c17241894739988c1cc81caadb2a
msgid "Updated Hebrew and Danish translations have been added."
msgstr ""

#: ../../releases/1.0.2.txt:35
# 0432ab39c6354c1daed95dfa866cdfe6
msgid "The default ``__repr__`` method of Django models has been made more robust in the face of bad Unicode data coming from the ``__unicode__`` method; rather than raise an exception in such cases, ``repr()`` will now contain the string \"[Bad Unicode data]\" in place of the invalid Unicode."
msgstr ""

#: ../../releases/1.0.2.txt:41
# dd01e6e26e524866b3276510d60c8a8a
msgid "A bug involving the interaction of Django's ``SafeUnicode`` class and the MySQL adapter has been resolved; ``SafeUnicode`` instances (generated, for example, by template rendering) can now be assigned to model attributes and saved to MySQL without requiring an explicit intermediate cast to ``unicode``."
msgstr ""

#: ../../releases/1.0.2.txt:47
# 6bd2baf1a70843628115279c3068f929
msgid "A bug affecting filtering on a nullable ``DateField`` in SQLite has been resolved."
msgstr ""

#: ../../releases/1.0.2.txt:50
# e44827ed4d464baf817721f78af6162c
msgid "Several updates and improvements have been made to Django's documentation."
msgstr ""

#: ../../releases/1.1.txt:3
# fdde5f0561414658a167de8ef6d50724
msgid "Django 1.1 release notes"
msgstr ""

#: ../../releases/1.1.txt:6
# 5b5ee68382ce436598d1e1e060448733
msgid "July 29, 2009"
msgstr ""

#: ../../releases/1.1.txt:8
# 20728e2e6fa74cf9b57e295b7546ed8e
msgid "Welcome to Django 1.1!"
msgstr ""

#: ../../releases/1.1.txt:10
# ccc468d98c5e4272a6f7cd3075a1d621
msgid "Django 1.1 includes a number of nifty `new features`_, lots of bug fixes, and an easy upgrade path from Django 1.0."
msgstr ""

#: ../../releases/1.1.txt:18
# a89651b52e634e48aef3840a5d77c610
msgid "Backwards-incompatible changes in 1.1"
msgstr ""

#: ../../releases/1.1.txt:20
# b39e464f2f394054b085fbfdb0f73787
msgid "Django has a policy of :doc:`API stability </misc/api-stability>`. This means that, in general, code you develop against Django 1.0 should continue to work against 1.1 unchanged. However, we do sometimes make backwards-incompatible changes if they're necessary to resolve bugs, and there are a handful of such (minor) changes between Django 1.0 and Django 1.1."
msgstr ""

#: ../../releases/1.1.txt:26
# 908682560f6b4ae4bd21977de0c44a1d
msgid "Before upgrading to Django 1.1 you should double-check that the following changes don't impact you, and upgrade your code if they do."
msgstr ""

#: ../../releases/1.1.txt:30
# edd7adfa11f346b6b32ec4483b8b20bb
msgid "Changes to constraint names"
msgstr ""

#: ../../releases/1.1.txt:32
# 5bce67a77de740009042e61c8250990c
msgid "Django 1.1 modifies the method used to generate database constraint names so that names are consistent regardless of machine word size. This change is backwards incompatible for some users."
msgstr ""

#: ../../releases/1.1.txt:36
# 08c42f9cae2043b4abfe7ce98f4539b3
msgid "If you are using a 32-bit platform, you're off the hook; you'll observe no differences as a result of this change."
msgstr ""

#: ../../releases/1.1.txt:39
# 1707b43c569e47e997adfcc8317c45a6
msgid "However, **users on 64-bit platforms may experience some problems** using the :djadmin:`reset` management command. Prior to this change, 64-bit platforms would generate a 64-bit, 16 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:46
# 6d0d7a42e3624158bf2280f3a46f5b52
msgid "Following this change, all platforms, regardless of word size, will generate a 32-bit, 8 character digest in the constraint name; for example::"
msgstr ""

#: ../../releases/1.1.txt:51
# b7b2699c01cc4c24957839e87ebacdca
msgid "As a result of this change, you will not be able to use the :djadmin:`reset` management command on any table made by a 64-bit machine. This is because the the new generated name will not match the historically generated name; as a result, the SQL constructed by the reset command will be invalid."
msgstr ""

#: ../../releases/1.1.txt:56
# eefc77ea100b40a680256cb1ed6a6a24
msgid "If you need to reset an application that was created with 64-bit constraints, you will need to manually drop the old constraint prior to invoking :djadmin:`reset`."
msgstr ""

#: ../../releases/1.1.txt:61
# d13e3e73f36c4fb3ac24baf5a610da9c
msgid "Test cases are now run in a transaction"
msgstr ""

#: ../../releases/1.1.txt:63
# f831a1f2a1cc41988b5b9d1fb2bb989a
msgid "Django 1.1 runs tests inside a transaction, allowing better test performance (see `test performance improvements`_ for details)."
msgstr ""

#: ../../releases/1.1.txt:66
# 9f79337d47d747e29d26c4eaa408ffdf
msgid "This change is slightly backwards incompatible if existing tests need to test transactional behavior, if they rely on invalid assumptions about the test environment, or if they require a specific test case ordering."
msgstr ""

#: ../../releases/1.1.txt:70
# 662aa9e5003744d6928e3f8d5f8cc2f3
msgid "For these cases, :class:`~django.test.TransactionTestCase` can be used instead. This is a just a quick fix to get around test case errors revealed by the new rollback approach; in the long-term tests should be rewritten to correct the test case."
msgstr ""

#: ../../releases/1.1.txt:78
# 01e8ab25f24540f89e6cd9ce5cbbdcdb
msgid "Removed ``SetRemoteAddrFromForwardedFor`` middleware"
msgstr ""

#: ../../releases/1.1.txt:80
# d4f8bb3aeff84b4bb96a787df1a2f125
msgid "For convenience, Django 1.0 included an optional middleware class -- ``django.middleware.http.SetRemoteAddrFromForwardedFor`` -- which updated the value of ``REMOTE_ADDR`` based on the HTTP ``X-Forwarded-For`` header commonly set by some proxy configurations."
msgstr ""

#: ../../releases/1.1.txt:85
# 30500da837874faabaf654667d7dd416
msgid "It has been demonstrated that this mechanism cannot be made reliable enough for general-purpose use, and that (despite documentation to the contrary) its inclusion in Django may lead application developers to assume that the value of ``REMOTE_ADDR`` is \"safe\" or in some way reliable as a source of authentication."
msgstr ""

#: ../../releases/1.1.txt:90
# bb00664e965345108593ac3e6705f12b
msgid "While not directly a security issue, we've decided to remove this middleware with the Django 1.1 release. It has been replaced with a class that does nothing other than raise a ``DeprecationWarning``."
msgstr ""

#: ../../releases/1.1.txt:94
# 9762e3cd36ff41cf938e153cd2a1f9bd
msgid "If you've been relying on this middleware, the easiest upgrade path is:"
msgstr ""

#: ../../releases/1.1.txt:96
# b3eeccc5f2c34e318a7a64ca3e335e31
msgid "Examine `the code as it existed before it was removed`__."
msgstr ""

#: ../../releases/1.1.txt:98
# f72c188ece674d6489b671611a6aeb02
msgid "Verify that it works correctly with your upstream proxy, modifying it to support your particular proxy (if necessary)."
msgstr ""

#: ../../releases/1.1.txt:101
# a639646a72a54b57abe7d2148130744c
msgid "Introduce your modified version of ``SetRemoteAddrFromForwardedFor`` as a piece of middleware in your own project."
msgstr ""

#: ../../releases/1.1.txt:107
# d4ba7bc68dce4f0bbf972b33aa81aef2
msgid "Names of uploaded files are available later"
msgstr ""

#: ../../releases/1.1.txt:111
# d93247085eeb495296b26e801f66e32d
msgid "In Django 1.0, files uploaded and stored in a model's :class:`FileField` were saved to disk before the model was saved to the database. This meant that the actual file name assigned to the file was available before saving. For example, it was available in a model's pre-save signal handler."
msgstr ""

#: ../../releases/1.1.txt:116
# c77870616b6441049d254d1f9fe8e75e
msgid "In Django 1.1 the file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until *after* the model has been saved."
msgstr ""

#: ../../releases/1.1.txt:121
# 0c83b8b2e81e4a898db3bc3c6740a843
msgid "Changes to how model formsets are saved"
msgstr ""

#: ../../releases/1.1.txt:125
# bad7651b0be94e0b9aabe218124a5839
msgid "In Django 1.1, :class:`BaseModelFormSet` now calls :meth:`ModelForm.save()`."
msgstr ""

#: ../../releases/1.1.txt:127
# 48bf9553af004bc78570e25b1d8752f6
msgid "This is backwards-incompatible if you were modifying ``self.initial`` in a model formset's ``__init__``, or if you relied on the internal ``_total_form_count`` or ``_initial_form_count`` attributes of BaseFormSet. Those attributes are now public methods."
msgstr ""

#: ../../releases/1.1.txt:133
# 48300a54f31b486d9560d48f3163af29
msgid "Fixed the ``join`` filter's escaping behavior"
msgstr ""

#: ../../releases/1.1.txt:135
# 226ce21df5a74ffdb665846b6fff4995
msgid "The :ttag:`join` filter no longer escapes the literal value that is passed in for the connector."
msgstr ""

#: ../../releases/1.1.txt:138
# 8b0f36454b034aad9ef07b7b821045c3
msgid "This is backwards incompatible for the special situation of the literal string containing one of the five special HTML characters. Thus, if you were writing ``{{ foo|join:\"&\" }}``, you now have to write ``{{ foo|join:\"&amp;\" }}``."
msgstr ""

#: ../../releases/1.1.txt:142
# d8bc6ba083ab4135af3977a3c740b34f
msgid "The previous behavior was a bug and contrary to what was documented and expected."
msgstr ""

#: ../../releases/1.1.txt:146
# 6bbabf2a24b6420f850473d6455bd79c
msgid "Permanent redirects and the ``redirect_to()`` generic view"
msgstr ""

#: ../../releases/1.1.txt:148
# 91106e618d9e46589ebfb96e3c78d406
msgid "Django 1.1 adds a ``permanent`` argument to the :func:`django.views.generic.simple.redirect_to()` view. This is technically backwards-incompatible if you were using the ``redirect_to`` view with a format-string key called 'permanent', which is highly unlikely."
msgstr ""

#: ../../releases/1.1.txt:156
# f4795d0a0e30435d89e5ef410d24d5c9
msgid "Features deprecated in 1.1"
msgstr ""

#: ../../releases/1.1.txt:158
# e078e6830ff140d19156cbdd506f636c
msgid "One feature has been marked as deprecated in Django 1.1:"
msgstr ""

#: ../../releases/1.1.txt:160
# 5e0c2e0d7d4c46d8a9a8b1c43b9dd00f
msgid "You should no longer use ``AdminSite.root()`` to register that admin views. That is, if your URLconf contains the line::"
msgstr ""

#: ../../releases/1.1.txt:165
# f02e4ae7393b48809f8b532a45ce7021
msgid "You should change it to read::"
msgstr ""

#: ../../releases/1.1.txt:169
# 118594217d404ac9b20f71f26499e7d0
msgid "You should begin to remove use of this feature from your code immediately."
msgstr ""

#: ../../releases/1.1.txt:171
# ed987a8cd510433c9e642bb605e50463
msgid "``AdminSite.root`` will raise a ``PendingDeprecationWarning`` if used in Django 1.1. This warning is hidden by default. In Django 1.2, this warning will be upgraded to a ``DeprecationWarning``, which will be displayed loudly. Django 1.3 will remove ``AdminSite.root()`` entirely."
msgstr ""

#: ../../releases/1.1.txt:176
# 02f040c80bb34b05af064c46a0f326a4
msgid "For more details on our deprecation policies and strategy, see :doc:`/internals/release-process`."
msgstr ""

#: ../../releases/1.1.txt:180
# db565538a28a4c9090a513fb520a4f54
msgid "What's new in Django 1.1"
msgstr ""

#: ../../releases/1.1.txt:182
# 31961e3825b84d4d920f446fd7539fa4
msgid "Quite a bit: since Django 1.0, we've made 1,290 code commits, fixed 1,206 bugs, and added roughly 10,000 lines of documentation."
msgstr ""

#: ../../releases/1.1.txt:185
# 94e94bf1044e4a99887417fa4864b712
msgid "The major new features in Django 1.1 are:"
msgstr ""

#: ../../releases/1.1.txt:188
#: ../../releases/1.1-alpha-1.txt:22
# c3de613893064f65a9f8e713900dbd71
# 5a84fac236cb425bbbeb4d084e7e02f8
msgid "ORM improvements"
msgstr ""

#: ../../releases/1.1.txt:192
# 717d78f14a3646e09cfc9087461f4392
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM): aggregate support, and query expressions."
msgstr ""

#: ../../releases/1.1.txt:196
#: ../../releases/1.1-alpha-1.txt:28
# f3d3885be1d7439a9a1b2c04a401082b
# ddd4ffd845ac43c08f20d944316cd149
msgid "Aggregate support"
msgstr ""

#: ../../releases/1.1.txt:198
#: ../../releases/1.1-alpha-1.txt:32
# 893883938f5a4776be3d638215d4e106
# e14805cfc92b40509e1eb091879a9add
msgid "It's now possible to run SQL aggregate queries (i.e. ``COUNT()``, ``MAX()``, ``MIN()``, etc.) from within Django's ORM. You can choose to either return the results of the aggregate directly, or else annotate the objects in a :class:`QuerySet` with the results of the aggregate query."
msgstr ""

#: ../../releases/1.1.txt:203
# 411c182de01f4e6cb5e2f0e478325014
msgid "This feature is available as new :meth:`QuerySet.aggregate()`` and :meth:`QuerySet.annotate()`` methods, and is covered in detail in :doc:`the ORM aggregation documentation </topics/db/aggregation>`."
msgstr ""

#: ../../releases/1.1.txt:208
#: ../../releases/1.1-alpha-1.txt:42
# 68f1fab345364e0fbe09c15f6feffa92
# daae64ac97df4c6d9ed170c114b6aeee
msgid "Query expressions"
msgstr ""

#: ../../releases/1.1.txt:210
#: ../../releases/1.1-alpha-1.txt:44
# d5c5dd3edb074aa09edaa1065b621a20
# 4e8aba39923a4a8e89ae9dd7af0766ad
msgid "Queries can now refer to a another field on the query and can traverse relationships to refer to fields on related models. This is implemented in the new :class:`F` object; for full details, including examples, consult the :ref:`documentation for F expressions <query-expressions>`."
msgstr ""

#: ../../releases/1.1.txt:216
#: ../../releases/1.1-beta-1.txt:27
# aa4fd98f3a2c43878e375fb5c9f721d3
# 8095b2b45d9d40f7b778af84d9e1b6a6
msgid "Model improvements"
msgstr ""

#: ../../releases/1.1.txt:218
#: ../../releases/1.1-beta-1.txt:31
# 9bfdc8acaa8b40e99213f66a6d41a6ed
# addb83ffd0aa4df3ae397ca0030baf96
msgid "A number of features have been added to Django's model layer:"
msgstr ""

#: ../../releases/1.1.txt:221
#: ../../releases/1.1-beta-1.txt:34
# 9fa6bb9877404420944a0c9cb1f0217d
# d254519bc7fc44fc8467a16ac519210e
msgid "\"Unmanaged\" models"
msgstr ""

#: ../../releases/1.1.txt:223
# 41580d87f2264c28bd3333016ed23183
msgid "You can now control whether or not Django manages the life-cycle of the database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of the :djadmin:`reset` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1.txt:229
#: ../../releases/1.1-beta-1.txt:42
# e8feea042a40497ca263f4b7705c775c
# 9f829e3de61f410ba19c608f6945337c
msgid "If you set this to ``False``, however, no database table creating or deletion will be automatically performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means."
msgstr ""

#: ../../releases/1.1.txt:234
#: ../../releases/1.1-beta-1.txt:47
# 7ce7a3a5b8bf42babfaf8b1a81c5d297
# d5aaccd1262145ceaa2d06ecaec41ce5
msgid "For more details, see the documentation for the :attr:`~Options.managed` option."
msgstr ""

#: ../../releases/1.1.txt:238
#: ../../releases/1.1-beta-1.txt:51
# cf96534cbfd24c83b5c9cccffab490d5
# a00d6bf349374e74b8aaf388ec7756aa
msgid "Proxy models"
msgstr ""

#: ../../releases/1.1.txt:240
# 818db851582e48af9e781a36a590dd41
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python-level (rather than database-level) behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1.txt:245
#: ../../releases/1.1-beta-1.txt:58
# db73f0d23b714e27b3407bc89f5f7c84
# a8baff027f014dc1a5c840e3b05f821c
msgid "All the details can be found in the :ref:`proxy models documentation <proxy-models>`. This feature is similar on the surface to unmanaged models, so the documentation has an explanation of :ref:`how proxy models differ from unmanaged models <proxy-vs-unmanaged-models>`."
msgstr ""

#: ../../releases/1.1.txt:251
#: ../../releases/1.1-beta-1.txt:64
# 56b2f6975f7545a1b63f7972e6b58f87
# d1ce4d30c9914a2d922d113a65c7020d
msgid "Deferred fields"
msgstr ""

#: ../../releases/1.1.txt:253
#: ../../releases/1.1-beta-1.txt:66
# 14b64ccb73e34a1686f8d454deb3ce5b
# 134125b36af344b28934a18011df18cb
msgid "In some complex situations, your models might contain fields which could contain a lot of data (for example, large text fields), or require expensive processing to convert them to Python objects. If you know you don't need those particular fields, you can now tell Django not to retrieve them from the database."
msgstr ""

#: ../../releases/1.1.txt:259
#: ../../releases/1.1-beta-1.txt:72
# e4c714187c2c4cb599e6ae0111fee862
# 38044a5116964a0094098495dd489c7f
msgid "You'll do this with the new queryset methods :meth:`~django.db.models.query.QuerySet.defer` and :meth:`~django.db.models.query.QuerySet.only`."
msgstr ""

#: ../../releases/1.1.txt:264
#: ../../releases/1.1-beta-1.txt:100
# 39605c8bb19648bd94925113691d592f
# 4ab517707cd34661bf27d24e29fc8bb9
msgid "Testing improvements"
msgstr ""

#: ../../releases/1.1.txt:266
# 9f77334413694609b40b4f7e8c8a3bd3
msgid "A few notable improvements have been made to the :doc:`testing framework </topics/testing>`."
msgstr ""

#: ../../releases/1.1.txt:270
# fb900c8d01334cb99fab42de21f9a82e
msgid "Test performance improvements"
msgstr ""

#: ../../releases/1.1.txt:274
#: ../../releases/1.1-alpha-1.txt:54
# a73dcbb21ae545b9afa3c605aa6f0d91
# 572711eb725a43ff943b8c98b857fcf2
msgid "Tests written using Django's :doc:`testing framework </topics/testing>` now run dramatically faster (as much as 10 times faster in many cases)."
msgstr ""

#: ../../releases/1.1.txt:277
#: ../../releases/1.1-alpha-1.txt:57
# 3a773e51a1f645828eb784d289578568
# 59b53efe542e4da49040e167f0709f4e
msgid "This was accomplished through the introduction of transaction-based tests: when using :class:`django.test.TestCase`, your tests will now be run in a transaction which is rolled back when finished, instead of by flushing and re-populating the database. This results in an immense speedup for most types of unit tests. See the documentation for :class:`TestCase` and :class:`TransactionTestCase` for a full description, and some important notes on database support."
msgstr ""

#: ../../releases/1.1.txt:285
# c84604bb52204345999714fd9b379f0a
msgid "Test client improvements"
msgstr ""

#: ../../releases/1.1.txt:289
# 8701903e2c3240679a8a163169b87f66
msgid "A couple of small -- but highly useful -- improvements have been made to the test client:"
msgstr ""

#: ../../releases/1.1.txt:292
#: ../../releases/1.1-beta-1.txt:107
# 416137d7c8ce4eb4bf0ad0087334a629
# 1acd5670493e4c1a813837ae931714f9
msgid "The test :class:`Client` now can automatically follow redirects with the ``follow`` argument to :meth:`Client.get` and :meth:`Client.post`. This makes testing views that issue redirects simpler."
msgstr ""

#: ../../releases/1.1.txt:296
# c89b3267b83743ddac49708b00de017b
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template in the inheritance chain, is still available if you need it."
msgstr ""

#: ../../releases/1.1.txt:303
#: ../../releases/1.1-beta-1.txt:77
# 8a8bfe4c2dbe47b98879d07395040e89
# 55a08e1682cc4dada051ed70e20bef9a
msgid "New admin features"
msgstr ""

#: ../../releases/1.1.txt:305
# cd51190e88504141b1aec6c4a35ca26d
msgid "Django 1.1 adds a couple of nifty new features to Django's admin interface:"
msgstr ""

#: ../../releases/1.1.txt:308
#: ../../releases/1.1-beta-1.txt:83
# 50dd18caa4aa46a7876c02587e3b02e9
# 20d368130b364e84b17a2b3d9f09054c
msgid "Editable fields on the change list"
msgstr ""

#: ../../releases/1.1.txt:310
#: ../../releases/1.1-beta-1.txt:85
# c53cea15a24748038ac3c2a0c3e27a9d
# 35933ce2f3684ea2bb0f124c8c7e735c
msgid "You can now make fields editable on the admin list views via the new :ref:`list_editable <admin-list-editable>` admin option. These fields will show up as form widgets on the list pages, and can be edited and saved in bulk."
msgstr ""

#: ../../releases/1.1.txt:315
#: ../../releases/1.1-beta-1.txt:90
# b205dad38f734df5a06ee9b6a703a7ee
# 523ce1d4e02b4d75b7b7488088f30eff
msgid "Admin \"actions\""
msgstr ""

#: ../../releases/1.1.txt:317
#: ../../releases/1.1-beta-1.txt:92
# ad706b9d24694fd9a3d56edf105dce60
# c607be821bc74826a8861c894b535758
msgid "You can now define :doc:`admin actions </ref/contrib/admin/actions>` that can perform some action to a group of models in bulk. Users will be able to select objects on the change list page and then apply these bulk actions to all selected objects."
msgstr ""

#: ../../releases/1.1.txt:322
#: ../../releases/1.1-beta-1.txt:96
# 19c5e7b37e684ea298fb54152c7a66eb
# ea259078a4364649b054708ae6a4247b
msgid "Django ships with one pre-defined admin action to delete a group of objects in one fell swoop."
msgstr ""

#: ../../releases/1.1.txt:326
#: ../../releases/1.1-beta-1.txt:118
# 2f6afbc139c14b23a27f25be7974bf9e
# 2f9de72a63914a71ac38d0b8b2d44030
msgid "Conditional view processing"
msgstr ""

#: ../../releases/1.1.txt:328
#: ../../releases/1.1-beta-1.txt:120
# 3711c0d8bb484593b25bf2fa496eb4c8
# 2b4700e86e304f40a5e25ab31c684124
msgid "Django now has much better support for :doc:`conditional view processing </topics/conditional-view-processing>` using the standard ``ETag`` and ``Last-Modified`` HTTP headers. This means you can now easily short-circuit view processing by testing less-expensive conditions. For many views this can lead to a serious improvement in speed and reduction in bandwidth."
msgstr ""

#: ../../releases/1.1.txt:335
#: ../../releases/1.1-rc-1.txt:36
# c4603c256f254bed9e2cf268dd0f5b00
# c87584b25f5c4498a7262d18774fa302
msgid "URL namespaces"
msgstr ""

#: ../../releases/1.1.txt:337
# 914a4ce7808a49dd99da161fdef9fd80
msgid "Django 1.1 improves :ref:`named URL patterns <naming-url-patterns>` with the introduction of URL \"namespaces.\""
msgstr ""

#: ../../releases/1.1.txt:340
# 660096da9d5d4ef4af593b24f45009b1
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. In other words, reusable applications like Django's admin interface may be registered multiple times without URL conflicts."
msgstr ""

#: ../../releases/1.1.txt:346
# 9336141fb9da40478031d4cc760b4f82
msgid "For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1.txt:350
#: ../../releases/1.2.txt:341
#: ../../releases/1.2.txt:1084
#: ../../releases/1.2.4.txt:76
#: ../../releases/1.3.txt:261
#: ../../releases/1.3.txt:805
#: ../../releases/1.5.txt:209
#: ../../releases/1.5-alpha-1.txt:222
#: ../../releases/1.5-beta-1.txt:220
# ba1038e5b9834e779e9b2421c4a9c4a5
# 69dd094c6a924c4c9cb2143eb168d99e
# e7c09bb5c13e4a92be32247d16d21e6a
# 239920e2253f4713aba5911d978d6477
# 273595f343af467a97295bbf4a6ea916
# 3c163b54f3b148d3a5696f6c23cf9875
# f06bbf86e5004075b068614c2f809e84
# 562d7b10de6c45b7b5c4d9a4ebfa8488
# 3dda7345bab2406f86869edfed534842
msgid "GeoDjango"
msgstr ""

#: ../../releases/1.1.txt:352
# 3fd9c6580172451b953fc1ea0b9af019
msgid "In Django 1.1, GeoDjango_ (i.e. ``django.contrib.gis``) has several new features:"
msgstr ""

#: ../../releases/1.1.txt:355
# 8a074736bbd34ad7b7c3fc5b490b70f1
msgid "Support for SpatiaLite_ -- a spatial database for SQLite -- as a spatial backend."
msgstr ""

#: ../../releases/1.1.txt:358
# a64fdea7769b4b5bb46bafdc64c4d47b
msgid "Geographic aggregates (``Collect``, ``Extent``, ``MakeLine``, ``Union``) and ``F`` expressions."
msgstr ""

#: ../../releases/1.1.txt:361
# c193bf3b3dfb4805bc829896d5d6a0f1
msgid "New ``GeoQuerySet`` methods: ``collect``, ``geojson``, and ``snap_to_grid``."
msgstr ""

#: ../../releases/1.1.txt:364
# 46fec1283d9b4a1fa789bdd6d24765f5
msgid "A new list interface methods for ``GEOSGeometry`` objects."
msgstr ""

#: ../../releases/1.1.txt:366
# c63f9253899a40fabbbe8a53d5658b85
msgid "For more details, see the `GeoDjango documentation`_."
msgstr ""

#: ../../releases/1.1.txt:373
#: ../../releases/1.1-alpha-1.txt:65
#: ../../releases/1.1-beta-1.txt:127
# a00ba4cf0d5c4d0a8ca1d4b1835c4d44
# 4e7a62b1db7b44f797256f2ac08f192d
# d74b22c93fb8417bab829411a1177121
msgid "Other improvements"
msgstr ""

#: ../../releases/1.1.txt:375
#: ../../releases/1.1-alpha-1.txt:67
# 531e2fc8c5344781a5370be4070c7c6c
# f5802f71139c46489b3166f71d5309b3
msgid "Other new features and changes introduced since Django 1.0 include:"
msgstr ""

#: ../../releases/1.1.txt:377
#: ../../releases/1.1-alpha-1.txt:69
# ecabf14c3ade41a4a961876b2a0de29a
# 65824e883cf94729bfd88d975412149a
msgid "The :doc:`CSRF protection middleware </ref/contrib/csrf>` has been split into two classes -- ``CsrfViewMiddleware`` checks incoming requests, and ``CsrfResponseMiddleware`` processes outgoing responses. The combined ``CsrfMiddleware`` class (which does both) remains for backwards-compatibility, but using the split classes is now recommended in order to allow fine-grained control of when and where the CSRF processing takes place."
msgstr ""

#: ../../releases/1.1.txt:385
#: ../../releases/1.1-alpha-1.txt:77
# c021934830df435cab784bb7d74927a8
# 5bec622148c1429d9bf75ed0f38553d5
msgid ":func:`~django.core.urlresolvers.reverse` and code which uses it (e.g., the ``{% url %}`` template tag) now works with URLs in Django's administrative site, provided that the admin URLs are set up via ``include(admin.site.urls)`` (sending admin requests to the ``admin.site.root`` view still works, but URLs in the admin will not be \"reversible\" when configured this way)."
msgstr ""

#: ../../releases/1.1.txt:391
#: ../../releases/1.1-alpha-1.txt:83
# 6a0fb04c2c944ce2a8384ec7df8e6f8d
# 3ef206be72ca4a3c9d606e3064d51d48
msgid "The ``include()`` function in Django URLconf modules can now accept sequences of URL patterns (generated by ``patterns()``) in addition to module names."
msgstr ""

#: ../../releases/1.1.txt:394
#: ../../releases/1.1-alpha-1.txt:86
# 0bf8d51a52d245b58b666ab87331297c
# 3ad7a40f3da247cb937e6c1a4cad3638
msgid "Instances of Django forms (see :doc:`the forms overview </topics/forms/index>`) now have two additional methods, ``hidden_fields()`` and ``visible_fields()``, which return the list of hidden -- i.e., ``<input type=\"hidden\">`` -- and visible fields on the form, respectively."
msgstr ""

#: ../../releases/1.1.txt:399
#: ../../releases/1.1-alpha-1.txt:91
# 330093d1e24d4c63a02e843eda715ace
# 67703954bc05478a9aecb169bf0b891d
msgid "The ``redirect_to`` generic view now accepts an additional keyword argument ``permanent``. If ``permanent`` is ``True``, the view will emit an HTTP permanent redirect (status code 301). If ``False``, the view will emit an HTTP temporary redirect (status code 302)."
msgstr ""

#: ../../releases/1.1.txt:405
#: ../../releases/1.1-alpha-1.txt:97
# e16293afd4144845b368c4dd2f55f1e4
# f8763be403c64f088b1a5703480c9820
msgid "A new database lookup type -- ``week_day`` -- has been added for ``DateField`` and ``DateTimeField``. This type of lookup accepts a number between 1 (Sunday) and 7 (Saturday), and returns objects where the field value matches that day of the week. See :ref:`the full list of lookup types <field-lookups>` for details."
msgstr ""

#: ../../releases/1.1.txt:411
#: ../../releases/1.1-alpha-1.txt:103
# 7a75eca451754b589f1a4ffa26c0fd46
# e5465faa8f79404aa0c0a09df4809572
msgid "The ``{% for %}`` tag in Django's template language now accepts an optional ``{% empty %}`` clause, to be displayed when ``{% for %}`` is asked to loop over an empty sequence. See :doc:`the list of built-in template tags </ref/templates/builtins>` for examples of this."
msgstr ""

#: ../../releases/1.1.txt:416
#: ../../releases/1.1-beta-1.txt:132
# 83155b0851ed4226b76c1844b54e3011
# 7f54d6abdd164ce49e95a45032b658a1
msgid "The :djadmin:`dumpdata` management command now accepts individual model names as arguments, allowing you to export the data just from particular models."
msgstr ""

#: ../../releases/1.1.txt:420
#: ../../releases/1.1-beta-1.txt:136
# 9b55f4e4c65945b38eb4b3cd4caf0898
# 5808ead65f7b4a36892a097c3c760cd0
msgid "There's a new :tfilter:`safeseq` template filter which works just like :tfilter:`safe` for lists, marking each item in the list as safe."
msgstr ""

#: ../../releases/1.1.txt:423
#: ../../releases/1.1-beta-1.txt:139
# be68b35fa99147f3928a980fa8a79f7b
# f8b2657087574febbb4fb62266629e4c
msgid ":doc:`Cache backends </topics/cache>` now support ``incr()`` and ``decr()`` commands to increment and decrement the value of a cache key. On cache backends that support atomic increment/decrement -- most notably, the memcached backend -- these operations will be atomic, and quite fast."
msgstr ""

#: ../../releases/1.1.txt:429
#: ../../releases/1.1-beta-1.txt:145
# 16bc682ba264472f9cc2d7bb5bb21d00
# 9373da98881140e188a7d1908efecebf
msgid "Django now can :doc:`easily delegate authentication to the Web server </howto/auth-remote-user>` via a new authentication backend that supports the standard ``REMOTE_USER`` environment variable used for this purpose."
msgstr ""

#: ../../releases/1.1.txt:433
#: ../../releases/1.1-beta-1.txt:149
# 9fe918e1b32d47cbba7b581bec4666ed
# fe3136e3950d406bb8cc2bcbbeefdb83
msgid "There's a new :func:`django.shortcuts.redirect` function that makes it easier to issue redirects given an object, a view name, or a URL."
msgstr ""

#: ../../releases/1.1.txt:436
#: ../../releases/1.1-beta-1.txt:152
# fb697c4244aa4fdeb528c38bba2ec805
# fd3063aba429443eb3c9741f2cb75eae
msgid "The ``postgresql_psycopg2`` backend now supports :ref:`native PostgreSQL autocommit <postgresql-notes>`. This is an advanced, PostgreSQL-specific feature, that can make certain read-heavy applications a good deal faster."
msgstr ""

#: ../../releases/1.1.txt:442
# 28f61db318314cd085e969712c62c9f1
msgid "What's next?"
msgstr ""

#: ../../releases/1.1.txt:444
# b2441d12347a4dd3b6f5160998aad280
msgid "We'll take a short break, and then work on Django 1.2 will begin -- no rest for the weary! If you'd like to help, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1.txt:451
# 1468a5a54e04452e9ba8fdad6518edad
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. Feel free to join the discussions!"
msgstr ""

#: ../../releases/1.1.txt:457
#: ../../releases/1.1-alpha-1.txt:154
#: ../../releases/1.1-beta-1.txt:199
#: ../../releases/1.1-rc-1.txt:105
#: ../../releases/1.2-alpha-1.txt:579
#: ../../releases/1.2-beta-1.txt:164
#: ../../releases/1.2-rc-1.txt:97
#: ../../releases/1.3-alpha-1.txt:393
#: ../../releases/1.3-beta-1.txt:229
#: ../../releases/1.4-alpha-1.txt:1115
#: ../../releases/1.4-beta-1.txt:1187
# 153e80e771044802adf59a323807c9cd
# 9b0f90e56e224227b558229842b67343
# 13d8e679ad2544caba639ea4095e8870
# 73bf84ed884449a4b78ed9b29f6de931
# b924f8bb6f0640eca08d5ec336ae032d
# f4a8b285fef849f99e8b21e4274a3118
# bf13dbae39934cedb5fee916dc6ed52f
# de5e42ebdea04663b4fc2f530927f8c2
# 145881ad121642a4b32cd55e8f0d175b
# 9890206d6df142d4abb85bf92ec9730e
# 143112646f614553b5fc028dc073e2e7
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

#: ../../releases/1.1.txt:463
# 7013a346a4094523ab4ac281a1cd8af7
msgid "And that's the way it is."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:3
# a9fa73a12e4d43c280362bd8a0e6b891
msgid "Django 1.1 alpha 1 release notes"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:5
# 0dc7fba4afe24ca18601dec38ad42ecb
msgid "February 23, 2009"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:7
# 93a2a325b27b4870b318c25da40e2fba
msgid "Welcome to Django 1.1 alpha 1!"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:9
# 02f8548c10f5463d98f8c5a43afd5142
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:19
# 2b7be67dc49947ebaa60382504f92451
msgid "What's new in Django 1.1 alpha 1"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:24
# 9a1ea146e8e24e8eb815d3c6628d50aa
msgid "Two major enhancements have been added to Django's object-relational mapper (ORM):"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:37
# 69f8d0e6702f4868bf73b375652409a2
msgid "This feature is available as new :meth:`QuerySet.aggregate()`` and :meth:`QuerySet.annotate()`` methods, and is covered in detail in :doc:`the ORM aggregation documentation </topics/db/aggregation>`"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:50
# 8e087c862b284d2bb2d9bf9e8e5dbb09
msgid "Performance improvements"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:109
#: ../../releases/1.1-beta-1.txt:158
#: ../../releases/1.1-rc-1.txt:64
# 22dd9ae8646347748675dd4617508c36
# 7dad5edeb36a491cadda90dae8ec018f
# 31a1cf89fd904bb7b9cfe8bcad4d45ce
msgid "The Django 1.1 roadmap"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:111
# d1fdcc197a734cd794ad966881df56f9
msgid "Before Django 1.1 goes final, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:114
# 17454baaac8e477f852fc39279dc0dec
msgid "Week of *March 20, 2009:* Django 1.1 beta 1, at which point Django 1.1 will be in \"feature freeze\": no new features will be implemented for 1.1 past that point, and all new feature work will be deferred to Django 1.2."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:119
#: ../../releases/1.1-beta-1.txt:164
# 5b1964cccc6545e8b0faf9f1896a4ac3
# 887c8ce0bc554aee9a00a01d3c291182
msgid "Week of *April 2, 2009:* Django 1.1 release candidate. At this point all strings marked for translation must freeze to allow translations to be submitted in advance of the final release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:123
#: ../../releases/1.1-beta-1.txt:168
# a181709eb3ff4d3ea7b0006700b246b3
# 30dfaee1be62497d80a95352ac7901b4
msgid "Week of *April 13, 2009:* Django 1.1 final."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:125
# 92fa4e12ab8443f2ba3b452309a39420
msgid "If deemed necessary, additional alpha, beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:131
# 6d59503921a34b889ae67927c34f2e8f
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:142
#: ../../releases/1.1-beta-1.txt:187
#: ../../releases/1.1-rc-1.txt:92
# 12001d050d214b09b8c34338bb05803c
# c6681abcfad5475d892ab86727937d0b
# 52d19a955b6d46f8bf39cd53a8b7ff60
msgid "Additionally, discussion of Django development, including progress toward the 1.1 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.1-alpha-1.txt:147
#: ../../releases/1.1-beta-1.txt:192
#: ../../releases/1.1-rc-1.txt:98
#: ../../releases/1.2-alpha-1.txt:572
#: ../../releases/1.2-beta-1.txt:157
#: ../../releases/1.2-rc-1.txt:90
#: ../../releases/1.3-alpha-1.txt:386
#: ../../releases/1.3-beta-1.txt:222
#: ../../releases/1.4-alpha-1.txt:1108
#: ../../releases/1.4-beta-1.txt:1180
# a4624a99f52e47a797e743b1b00e8eec
# 15698d027f8040c18c4ccc28a3847ae6
# 496bf00f724d4d13a53161afed8399af
# 29034803de394ed08116a96d6ff0bda6
# 37e56305fd7b42338979448da024e656
# c025186b95fe46cba693f1e346de6f1f
# c8ee2b077f544df8bec0e5dbc1edb350
# 6bf45526fe4e4667a709182ca7bd4cc2
# a61f342032eb453b9871dc9e9e64d55e
# b6ee4369b18f472499599a0b22c31a70
msgid "... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If you're interested in helping out with Django's development, feel free to join the discussions there."
msgstr ""

#: ../../releases/1.1-alpha-1.txt:160
#: ../../releases/1.1-beta-1.txt:205
# 412e805d3c3b4e7aa153dd8946fbb327
# 700069fdbab94ba887c14637970fe025
msgid "Development sprints for Django 1.1 will also be taking place at PyCon US 2009, on the dedicated sprint days (March 30 through April 2), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.1-beta-1.txt:3
# 5ab82319ac744d128c5c347cd6ac1997
msgid "Django 1.1 beta 1 release notes"
msgstr ""

#: ../../releases/1.1-beta-1.txt:5
# 064886475a22411f91366aac5efe3b87
msgid "March 23, 2009"
msgstr ""

#: ../../releases/1.1-beta-1.txt:7
# d67669f6964346b59e6d3fd4007f86f0
msgid "Welcome to Django 1.1 beta 1!"
msgstr ""

#: ../../releases/1.1-beta-1.txt:9
# 5ff834daa5444f4f9bafb1b31dd86640
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place in April 2009. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:19
# 75a966bb31da4382aa445a6ecaa5a9ec
msgid "What's new in Django 1.1 beta 1"
msgstr ""

#: ../../releases/1.1-beta-1.txt:23
# 38e43bd4a84d41c8aed4a96f1e0d7797
msgid "The :doc:`1.1 alpha release notes </releases/1.1-alpha-1>`, which has a list of everything new between Django 1.0 and Django 1.1 alpha."
msgstr ""

#: ../../releases/1.1-beta-1.txt:36
# 2bf9a0581be443a79128e0a3c2834341
msgid "You can now control whether or not Django creates database tables for a model using the :attr:`~Options.managed` model option. This defaults to ``True``, meaning that Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of :djadmin:`reset` command. That is, Django *manages* the database table's lifecycle."
msgstr ""

#: ../../releases/1.1-beta-1.txt:53
# e1187127fea9457ea081c75f4d421e7b
msgid "You can now create :ref:`proxy models <proxy-models>`: subclasses of existing models that only add Python behavior and aren't represented by a new table. That is, the new model is a *proxy* for some underlying model, which stores all the real data."
msgstr ""

#: ../../releases/1.1-beta-1.txt:79
# 61ca4775926c470984a7f85ea86d9af0
msgid "Since 1.1 alpha, a couple of new features have been added to Django's admin application:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:104
# 16fc22195ce24be9845ea931d37fb472
msgid "A couple of small but very useful improvements have been made to the :doc:`testing framework </topics/testing>`:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:111
# 67d9b403b8f5453f894cd7c3a436369e
msgid "It's now easier to get at the template context in the response returned the test client: you'll simply access the context as ``request.context[key]``. The old way, which treats ``request.context`` as a list of contexts, one for each rendered template, is still available if you need it."
msgstr ""

#: ../../releases/1.1-beta-1.txt:129
# dcb1afb7aa3c42868ae6f3be0a80901e
msgid "Finally, a grab-bag of other neat features made their way into this beta release, including:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:160
# f39c1e931f964fc2b0bb3fa40bcc134c
msgid "Before Django 1.1 goes final, at least one other preview/development release will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.1-beta-1.txt:170
# f4b62f44627e412da880fb0f76277d7c
msgid "If deemed necessary, additional beta or release candidate packages will be issued prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-beta-1.txt:176
# 334b9d1a99984becb8d0b6561f2db0c9
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:3
# 0416464ca16a4b14a426023b9974d8e1
msgid "Django 1.1 RC 1 release notes"
msgstr ""

#: ../../releases/1.1-rc-1.txt:6
# 126fb51ab9f04544a95fe8370e5eb0ed
msgid "July 21, 2009"
msgstr ""

#: ../../releases/1.1-rc-1.txt:8
# 25c3c870db6c44c0b44e96df3f274e2b
msgid "Welcome to the first Django 1.1 release candidate!"
msgstr ""

#: ../../releases/1.1-rc-1.txt:10
# 430f66c2c804461a932cef7efa4d0874
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.1, currently scheduled to take place approximately one week after this release candidate. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:18
#: ../../releases/1.2-rc-1.txt:17
# 22c62e378b084dc4b86ec6466d2f75f3
# 37052767ad6c4fcab7fe740f810de1fc
msgid "As such, this release is not yet intended for production use, and any such use is discouraged."
msgstr ""

#: ../../releases/1.1-rc-1.txt:23
# a935d26d691c47edab26a3d66fac58e2
msgid "What's new in Django 1.1 RC 1"
msgstr ""

#: ../../releases/1.1-rc-1.txt:25
# 4ed91c20fd464bbca5806d6f0575dc2d
msgid "The Django codebase has -- with one exception -- been in feature freeze since the first 1.1 beta release, and so this release candidate contains only one new feature (see below); work leading up to this release candidate has instead been focused on bugfixing, particularly on the new features introduced prior to the 1.1 beta."
msgstr ""

#: ../../releases/1.1-rc-1.txt:31
# ba202aab436a4d44a41edb25e2daba23
msgid "For an overview of those features, consult :doc:`the Django 1.1 beta release notes </releases/1.1-beta-1>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:38
# a4cfb214f45f4019823e8be04ac3158d
msgid "The 1.1 beta release introduced the ability to use reverse URL resolution with Django's admin application, which exposed a set of :ref:`named URLs <naming-url-patterns>`. Unfortunately, achieving consistent and correct reverse resolution for admin URLs proved extremely difficult, and so one additional feature was added to Django to resolve this issue: URL namespaces."
msgstr ""

#: ../../releases/1.1-rc-1.txt:45
# 9a1a3eacb2004638a9f1128c8108ad6f
msgid "In short, this feature allows the same group of URLs, from the same application, to be included in a Django URLConf multiple times, with varying (and potentially nested) named prefixes which will be used when performing reverse resolution. For full details, see :ref:`the documentation on defining URL namespaces <topics-http-defining-url-namespaces>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:52
# d9645003fe5c426db3a5c793b403843e
msgid "Due to the changes needed to support this feature, the URL pattern names used when reversing admin URLs have changed since the 1.1 beta release; if you were developing applications which took advantage of this new feature, you will need to update your code to reflect the new names (for most purposes, changing ``admin_`` to ``admin:`` in names to be reversed will suffice). For a full list of URL pattern names used by the admin and information on how namespaces are applied to them, consult the documentation on :ref:`reversing admin URLs <admin-reverse-urls>`."
msgstr ""

#: ../../releases/1.1-rc-1.txt:66
# add28938474c432da6ba39b657f5d74d
msgid "As of this release candidate, Django 1.1 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.1 release. Only critical release-blocking bugs will receive attention between now and the final 1.1 release."
msgstr ""

#: ../../releases/1.1-rc-1.txt:72
# 30cd0f1e1f1943c880a1c9e3b4f91652
msgid "If no such bugs are discovered, Django 1.1 will be released approximately one week after this release candidate, on or about July 28, 2009."
msgstr ""

#: ../../releases/1.1-rc-1.txt:80
# 7b5303d9293546a3ba660d1c148d1292
msgid "In order to provide a high-quality 1.1 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.1-rc-1.txt:89
#: ../../releases/1.2-rc-1.txt:81
# ff3a6dcf310d4869a06aa65d706d284c
# d680f108fe3644329519f345108a6527
msgid "Please open a new ticket only if no existing ticket corresponds to a problem you're running into."
msgstr ""

#: ../../releases/1.1.2.txt:3
# 07692e583cad490db24d7d2e68fc3e8e
msgid "Django 1.1.2 release notes"
msgstr ""

#: ../../releases/1.1.2.txt:5
# 564f6a5f7ed44f9d88b72cb02ebdc8cd
msgid "Welcome to Django 1.1.2!"
msgstr ""

#: ../../releases/1.1.2.txt:7
# ae4f4a93d9594fbeb47f9bd63b5f3da5
msgid "This is the second \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.2.txt:10
# 61085c76355544bb8908214ced606677
msgid "Django 1.1.2 maintains backwards compatibility with Django 1.1.0, but contain a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.2.txt:15
#: ../../releases/1.1.3.txt:15
#: ../../releases/1.1.4.txt:15
# e3cbc0fdb6a34c1ab35577cf676e5da4
# 2c9ee789cb4f49e2a75e6ab919444363
# 1e1dd6102eea4bf494f3f0a786a01041
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

#: ../../releases/1.1.2.txt:19
# 265006fffa59469e8c0ef074ae2d95d6
msgid "Backwards-incompatible changes in 1.1.2"
msgstr ""

#: ../../releases/1.1.2.txt:22
#: ../../releases/1.2.txt:675
#: ../../releases/1.2-alpha-1.txt:181
# 38853fadf6484813bca8fbfc8c82be65
# fbfc550c03d3453eaa88871ac819577a
# e4f9676c1c8f4a8ebbce838840c447a1
msgid "Test runner exit status code"
msgstr ""

#: ../../releases/1.1.2.txt:24
#: ../../releases/1.2-alpha-1.txt:183
# fd1e7e014ea14e49bfa2a7ee53d52367
# b0b5df8a188945d8b6cfb4d14e939bf8
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, since a failure of 256 or more tests resulted in a wrong exit status code.  The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures.  If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.1.2.txt:32
#: ../../releases/1.2.txt:685
#: ../../releases/1.2-beta-1.txt:66
# ba1b2b0bfcc644a3aabb5abe8d4e28e9
# 1fb9bc9fbc6f4717964e12229df45220
# 759be86758194c79924fe6313b1669b9
msgid "Cookie encoding"
msgstr ""

#: ../../releases/1.1.2.txt:34
# 7560211778364dc68a681e9c3ac9b7bf
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the characters comma and semi-colon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.1.2.txt:43
#: ../../releases/1.2.2.txt:19
#: ../../releases/1.2.4.txt:53
# 2873dd4cb95a4699bfa72b5396e81746
# 5600a4ee85bc43c3b4f0e12a6197f379
# e74e8f905f844b96bd923bb520294e4e
msgid "One new feature"
msgstr ""

#: ../../releases/1.1.2.txt:45
# 09204077ebbb481fbbe46f272b51b65d
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.1.2, we have made an exception to this rule. Django 1.2 (the next major release of Django) will contain a feature that will improve protection against Cross-Site Request Forgery (CSRF) attacks. This feature requires the use of a new :ttag:`csrf_token` template tag in all forms that Django renders."
msgstr ""

#: ../../releases/1.1.2.txt:52
# 0b760e2c534e44c5b3b8b47f9d4433c4
msgid "To make it easier to support both 1.1.X and 1.2.X versions of Django with the same templates, we have decided to introduce the :ttag:`csrf_token` template tag to the 1.1.X branch. In the 1.1.X branch, :ttag:`csrf_token` does nothing - it has no effect on templates or form processing. However, it means that the same template will work with Django 1.2."
msgstr ""

#: ../../releases/1.1.3.txt:3
# 6e8feb96bfc5418591ffdebe39719696
msgid "Django 1.1.3 release notes"
msgstr ""

#: ../../releases/1.1.3.txt:5
# f1de86bd81ba40619c2886eef427c798
msgid "Welcome to Django 1.1.3!"
msgstr ""

#: ../../releases/1.1.3.txt:7
# 4ad5c050cafc464d9a59ec67ff754b74
msgid "This is the third \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.3.txt:10
# 774ad33672b94cf8bc6af2fd4f4df18f
msgid "With one exception, Django 1.1.3 maintains backwards compatibility with Django 1.1.2. It also contains a number of fixes and other improvements. Django 1.1.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.3.txt:19
#: ../../releases/1.1.4.txt:19
#: ../../releases/1.2.4.txt:19
#: ../../releases/1.2.5.txt:19
#: ../../releases/1.4.2.txt:39
# cf654841335a4152a447c30463d52514
# 1376b99018674ef4a81c7fd6d2f4da19
# 526640e300e04bf68959711c2b9acfe4
# b7e6f50b2f824ee6b288a9210f70e21b
# 28f6440899e5481085e1e532df442c6d
msgid "Backwards incompatible changes"
msgstr ""

#: ../../releases/1.1.3.txt:22
#: ../../releases/1.2.4.txt:22
#: ../../releases/1.3.txt:352
# a2c2988142c14ab684e877a8e6d383ed
# ead493a40b2b4124b81048ed4a035b98
# 2412fcd2dfcc4e9b84ab4aa2fb006cd2
msgid "Restricted filters in admin interface"
msgstr ""

#: ../../releases/1.1.3.txt:24
#: ../../releases/1.2.4.txt:24
# d331a803cbe84774b1fd2e66dca1c29e
# 1f93f451091445f8a6f55303172b737b
msgid "The Django administrative interface, django.contrib.admin, supports filtering of displayed lists of objects by fields on the corresponding models, including across database-level relationships. This is implemented by passing lookup arguments in the querystring portion of the URL, and options on the ModelAdmin class allow developers to specify particular fields or relationships which will generate automatic links for filtering."
msgstr ""

#: ../../releases/1.1.3.txt:32
#: ../../releases/1.2.4.txt:32
# 9fc994eb66f14ca781eba551e65b9b92
# bcb1987eaabb4d518ef1c1a10c8a9f02
msgid "One historically-undocumented and -unofficially-supported feature has been the ability for a user with sufficient knowledge of a model's structure and the format of these lookup arguments to invent useful new filters on the fly by manipulating the querystring."
msgstr ""

#: ../../releases/1.1.3.txt:37
#: ../../releases/1.2.4.txt:37
# 64854d3e086947438be6e230dba880d5
# 12ebf2386a6d465baf89f406e666a685
msgid "However, it has been demonstrated that this can be abused to gain access to information outside of an admin user's permissions; for example, an attacker with access to the admin and sufficient knowledge of model structure and relations could construct query strings which -- with repeated use of regular-expression lookups supported by the Django database API -- expose sensitive information such as users' password hashes."
msgstr ""

#: ../../releases/1.1.3.txt:45
#: ../../releases/1.2.4.txt:45
# cdc97b6888834da596653aa8c0ea6332
# a58a121887794da2b6ed82168cb56474
msgid "To remedy this, django.contrib.admin will now validate that querystring lookup arguments either specify only fields on the model being viewed, or cross relations which have been explicitly whitelisted by the application developer using the pre-existing mechanism mentioned above. This is backwards-incompatible for any users relying on the prior ability to insert arbitrary lookups."
msgstr ""

#: ../../releases/1.1.4.txt:3
# dc3dddf9932f4e53b20e3e48592bde56
msgid "Django 1.1.4 release notes"
msgstr ""

#: ../../releases/1.1.4.txt:5
# d97408a8d0c149f487e048a2b76f3946
msgid "Welcome to Django 1.1.4!"
msgstr ""

#: ../../releases/1.1.4.txt:7
# 23cb08f3a65c4e92af9f49585090d7c3
msgid "This is the fourth \"bugfix\" release in the Django 1.1 series, improving the stability and performance of the Django 1.1 codebase."
msgstr ""

#: ../../releases/1.1.4.txt:10
# 8831cc28a7ad4ea2b70282129b8ee5a0
msgid "With one exception, Django 1.1.4 maintains backwards compatibility with Django 1.1.3. It also contains a number of fixes and other improvements. Django 1.1.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.1."
msgstr ""

#: ../../releases/1.1.4.txt:22
#: ../../releases/1.2.5.txt:22
# 774968f7285d4c1f8fb84e9642c632d8
# e7ec29ebbe1c446e8830c1392cf21c3d
msgid "CSRF exception for AJAX requests"
msgstr ""

#: ../../releases/1.1.4.txt:24
#: ../../releases/1.2.5.txt:24
# 75b533654c114a32a1af5b39391c5648
# eb7d562cc5ce43088692a23b38b799d0
msgid "Django includes a CSRF-protection mechanism, which makes use of a token inserted into outgoing forms. Middleware then checks for the token's presence on form submission, and validates it."
msgstr ""

#: ../../releases/1.1.4.txt:28
#: ../../releases/1.2.5.txt:28
# be80a5c971c14eb398803c4742f8d4ac
# 42bfaa84049740439462e20524951ed4
msgid "Prior to Django 1.2.5, our CSRF protection made an exception for AJAX requests, on the following basis:"
msgstr ""

#: ../../releases/1.1.4.txt:31
#: ../../releases/1.2.5.txt:31
# ce7e730afaa54c14b0e71311d73dfb4d
# c7cf2667e53d40c0ae3e66c8e5f137e3
msgid "Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:34
#: ../../releases/1.2.5.txt:34
# 12ffea36607d493f9a34e6cd5c01a691
# b2fa30605f124691bf6774c06fbf06a0
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:37
#: ../../releases/1.2.5.txt:37
# d6336a91dbb84357996037f181f04c81
# dd38b24d03234684bf69f1bea5fdaa8a
msgid "In the context of a browser, the only way that a custom header of this nature can be added is with XMLHttpRequest."
msgstr ""

#: ../../releases/1.1.4.txt:40
#: ../../releases/1.2.5.txt:40
# 0a25a8872bd9447394bafa7a59223f07
# 0347c4ad4fb740c081bafdf8452f0e67
msgid "Therefore, for ease of use, we did not apply CSRF checks to requests that appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on Rails web framework had a similar exemption."
msgstr ""

#: ../../releases/1.1.4.txt:44
#: ../../releases/1.2.5.txt:44
# e2e9636c6da9406baf9106f1d46b3dfd
# fc872a21743d415fa543314fdc706c50
msgid "Recently, engineers at Google made members of the Ruby on Rails development team aware of a combination of browser plugins and redirects which can allow an attacker to provide custom HTTP headers on a request to any website. This can allow a forged request to appear to be an AJAX request, thereby defeating CSRF protection which trusts the same-origin nature of AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:51
#: ../../releases/1.2.5.txt:51
# 166a92b385f24a9699a29f83fa5fea60
# f9d1044c9d554ceea9fe5122545be1ab
msgid "Michael Koziarski of the Rails team brought this to our attention, and we were able to produce a proof-of-concept demonstrating the same vulnerability in Django's CSRF handling."
msgstr ""

#: ../../releases/1.1.4.txt:55
#: ../../releases/1.2.5.txt:55
# b1599c58d10a4633b34dd40600a67a98
# d55a8c4d67e249a9a9ad4d0fd6fb57ff
msgid "To remedy this, Django will now apply full CSRF validation to all requests, regardless of apparent AJAX origin. This is technically backwards-incompatible, but the security risks have been judged to outweigh the compatibility concerns in this case."
msgstr ""

#: ../../releases/1.1.4.txt:60
#: ../../releases/1.2.5.txt:60
# db7050310ac94a1582ce5142e61763e7
# 25d53b11ca794ce3b6d5936cf3c9c3c4
msgid "Additionally, Django will now accept the CSRF token in the custom HTTP header X-CSRFTOKEN, as well as in the form submission itself, for ease of use with popular JavaScript toolkits which allow insertion of custom headers into all AJAX requests."
msgstr ""

#: ../../releases/1.1.4.txt:65
#: ../../releases/1.2.5.txt:65
# a04bbcb5a6da4e33bf946b70ec8e907c
# c254ddce467b4706b3ac5bae2dc7ef0a
msgid "Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that demonstrates this technique, ensuring that you are looking at the documentation for your version of Django, as the exact code necessary is different for some older versions of Django."
msgstr ""

#: ../../releases/1.2.txt:3
# 2a17a8474eda48e3a8209187f2134062
msgid "Django 1.2 release notes"
msgstr ""

#: ../../releases/1.2.txt:5
# 89fc48b0b45841a892feea6ad86e0e7c
msgid "*May 17, 2010.*"
msgstr ""

#: ../../releases/1.2.txt:7
# 01e7e8185e284f71bbe9cc76fce653ed
msgid "Welcome to Django 1.2!"
msgstr ""

#: ../../releases/1.2.txt:9
# 2bce29da0fec4a51971e546b6bddfde8
msgid "Nearly a year in the making, Django 1.2 packs an impressive list of `new features`_ and lots of bug fixes. These release notes cover the new features, as well as important changes you'll want to be aware of when upgrading from Django 1.1 or older versions."
msgstr ""

#: ../../releases/1.2.txt:17
#: ../../releases/1.3.txt:16
#: ../../releases/1.4.txt:21
#: ../../releases/1.5.txt:19
#: ../../releases/1.5-alpha-1.txt:34
#: ../../releases/1.5-beta-1.txt:30
# 5c0f00a516ba4b4b91f6df567803b5a6
# 96f7b170f2d64ec082b5499ffffc5b1d
# 4bf05a8bd0eb452c8ce1fc73c09b481e
# 83280de25993470daa61e9d84d396d56
# 60f989354e994001965f499b4929ef81
# ac8d560e8b334d338a25775dabcb8b8a
msgid "Overview"
msgstr ""

#: ../../releases/1.2.txt:19
# 13434dac4c6041e2b2503569afb6bfce
msgid "Django 1.2 introduces several large, important new features, including:"
msgstr ""

#: ../../releases/1.2.txt:21
# 36072dd5b5b04ba69cb721b083802a46
msgid "Support for `multiple database connections`_ in a single Django instance."
msgstr ""

#: ../../releases/1.2.txt:23
# 15a890f3ee6d405eab77a362c46d4572
msgid "`Model validation`_ inspired by Django's form validation."
msgstr ""

#: ../../releases/1.2.txt:25
# ecd7b0fe71f3417eb027949b4338aed8
msgid "Vastly `improved protection against Cross-Site Request Forgery`_ (CSRF)."
msgstr ""

#: ../../releases/1.2.txt:27
# 7f14c29ecc05409f809ea9248b8ee64c
msgid "A new `user \"messages\" framework`_ with support for cookie- and session-based message for both anonymous and authenticated users."
msgstr ""

#: ../../releases/1.2.txt:30
# c26b05b919664fb0b48ed0c61e240845
msgid "Hooks for `object-level permissions`_, `permissions for anonymous users`_, and `more flexible username requirements`_."
msgstr ""

#: ../../releases/1.2.txt:33
# 8aec0f0cbcc34f5aa3b75db9d1708471
msgid "Customization of email sending via `email backends`_."
msgstr ""

#: ../../releases/1.2.txt:35
# b7d72985519f444c8bd64fcff85eaed2
msgid "New :ref:`\"smart\" if template tag <new-in-1.2-smart-if>` which supports comparison operators."
msgstr ""

#: ../../releases/1.2.txt:43
# 1fb1d9209ce44114957f78ece0d623bb
msgid "These are just the highlights; full details and a complete list of features `may be found below`_."
msgstr ""

#: ../../releases/1.2.txt:50
# a128c0ba421c47e8b0c1c2397fa61684
msgid "`Django Advent`_ covered the release of Django 1.2 with a series of articles and tutorials that cover some of the new features in depth."
msgstr ""

#: ../../releases/1.2.txt:55
# 405e69ae0ce34b648dccfdae037ce4ed
msgid "Wherever possible these features have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy."
msgstr ""

#: ../../releases/1.2.txt:58
# 36a5e1e174314f2bbc613d8f03bb2c8c
msgid "However, a handful of features *have* changed in ways that, for some users, will be backwards-incompatible. The big changes are:"
msgstr ""

#: ../../releases/1.2.txt:61
# 0ace30dcc4f448a784d5bc45f96af53a
msgid "Support for Python 2.3 has been dropped. See the full notes below."
msgstr ""

#: ../../releases/1.2.txt:64
# 16399a56f8ec42759d5e67bfbca70ec0
msgid "The new CSRF protection framework is not backwards-compatible with the old system. Users of the old system will not be affected until the old system is removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:68
# c5734f4439ba42e6ba4964113028d5f5
msgid "However, upgrading to the new CSRF protection framework requires a few important backwards-incompatible changes, detailed in `CSRF Protection`_, below."
msgstr ""

#: ../../releases/1.2.txt:72
# 76d734f5d7524b6ab3be6efd31078781
msgid "Authors of custom :class:`~django.db.models.Field` subclasses should be aware that a number of methods have had a change in prototype, detailed under `get_db_prep_*() methods on Field`_, below."
msgstr ""

#: ../../releases/1.2.txt:76
# ba6d4004f6134599b3ca5d7c76fd8faf
msgid "The internals of template tags have changed somewhat; authors of custom template tags that need to store state (e.g. custom control flow tags) should ensure that their code follows the new rules for `stateful template tags`_"
msgstr ""

#: ../../releases/1.2.txt:81
# 2cb32a6ace214e98b664ee8824a34c95
msgid "The :func:`~django.contrib.auth.decorators.user_passes_test`, :func:`~django.contrib.auth.decorators.login_required`, and :func:`~django.contrib.auth.decorators.permission_required`, decorators from :mod:`django.contrib.auth` only apply to functions and no longer work on methods. There's a simple one-line fix `detailed below`_."
msgstr ""

#: ../../releases/1.2.txt:89
# f2c8279d3a004bb08ba203502894baf4
msgid "Again, these are just the big features that will affect the most users. Users upgrading from previous versions of Django are heavily encouraged to consult the complete list of :ref:`backwards-incompatible changes <backwards-incompatible-changes-1.2>` and the list of :ref:`deprecated features <deprecated-features-1.2>`."
msgstr ""

#: ../../releases/1.2.txt:96
#: ../../releases/1.2-rc-1.txt:28
#: ../../releases/1.3.txt:54
#: ../../releases/1.4.txt:63
#: ../../releases/1.4-alpha-1.txt:28
#: ../../releases/1.4-beta-1.txt:44
#: ../../releases/1.5.txt:68
#: ../../releases/1.5-alpha-1.txt:83
#: ../../releases/1.5-beta-1.txt:79
# 8c85c1975b9d44f99c01b8f49763127f
# 9375e796d764468bb263206ba5e44f45
# bdf6a7471fc34dffb3014662ded1d94e
# a075283996514a9c9deed8f8e4679f6c
# c5d99b63de5a4e9588d72360c60a5ab4
# 21dcf8d2b438470ea6149f5c80712230
# 0b75a7adbedb4965afd0854131199978
# 084407b0e5d24c48910dd6dc23c22451
# f83f0691c6544865894e43a8541a0a01
msgid "Python compatibility"
msgstr ""

#: ../../releases/1.2.txt:98
#: ../../releases/1.2-rc-1.txt:30
# 626bb387ecde455e91aab630e77021e9
# 050761dd430f4a138c1f24146b0b37a8
msgid "While not a new feature, it's important to note that Django 1.2 introduces the first shift in our Python compatibility policy since Django's initial public debut. Previous Django releases were tested and supported on 2.x Python versions from 2.3 up; Django 1.2, however, drops official support for Python 2.3. As such, the minimum Python version required for Django is now 2.4, and Django is tested and supported on Python 2.4, 2.5 and 2.6, and will be supported on the as-yet-unreleased Python 2.7."
msgstr ""

#: ../../releases/1.2.txt:107
#: ../../releases/1.2-rc-1.txt:39
# 5f5e109a5d3b4f8f9546caebe5f6f105
# 1cf0d6f3a0664b24b43a7b850a032557
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.4 or newer as their default version. If you're still using Python 2.3, however, you'll need to stick to Django 1.1 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.1 will continue to receive security support until the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:114
#: ../../releases/1.2-rc-1.txt:46
# 4d8c53202ef64091aa0af62b5b294ecf
# 87871475bc584e7d9ae7fe27fd103a1f
msgid "A roadmap for Django's overall 2.x Python support, and eventual transition to Python 3.x, is currently being developed, and will be announced prior to the release of Django 1.3."
msgstr ""

#: ../../releases/1.2.txt:119
# 16eb37e2c96c4f5897a4246fb03ac57d
msgid "What's new in Django 1.2"
msgstr ""

#: ../../releases/1.2.txt:122
#: ../../releases/1.2-alpha-1.txt:427
# 569d58846b5542b2bb5e4ec6a921fd55
# f62a0441accb4353af9b7c03fe9f7fdc
msgid "Support for multiple databases"
msgstr ""

#: ../../releases/1.2.txt:124
# e1d5ff6bb1d74b029cb175ad1653da71
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the `using()` method on ``QuerySet`` objects. Individual objects can be saved to a specific database by providing a ``using`` argument when you call ``save()``."
msgstr ""

#: ../../releases/1.2.txt:131
# e08a7b51d3104571ae7f4731f405a1d3
msgid "Model validation"
msgstr ""

#: ../../releases/1.2.txt:133
# 269d70f4d1a143baa7e7e932333cc757
msgid "Model instances now have support for :ref:`validating their own data <validating-objects>`, and both model and form fields now accept configurable lists of :doc:`validators </ref/validators>` specifying reusable, encapsulated validation behavior. Note, however, that validation must still be performed explicitly. Simply invoking a model instance's ``save()`` method will not perform any validation of the instance's data."
msgstr ""

#: ../../releases/1.2.txt:141
# b15c2014c44d4dbc889ac4401b0bce30
msgid "Improved CSRF protection"
msgstr ""

#: ../../releases/1.2.txt:143
# 6b3171deaf9a499585662e3747b437e5
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some JavaScript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, \"login CSRF,\" where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2.txt:152
# f862297a3496406ab8f9ac59d00d5ac5
msgid "Messages framework"
msgstr ""

#: ../../releases/1.2.txt:154
#: ../../releases/1.2-alpha-1.txt:419
# 6f6c249915084d4e942d11e92c3537b8
# f46471a8f4044d778ec996aa48d6be6a
msgid "Django now includes a robust and configurable :doc:`messages framework </ref/contrib/messages>` with built-in support for cookie- and session-based messaging, for both anonymous and authenticated clients. The messages framework replaces the deprecated user message API and allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one)."
msgstr ""

#: ../../releases/1.2.txt:162
#: ../../releases/1.2-beta-1.txt:87
# 7dd8063b0a4f4733aba8cd1287b7dfb5
# 0574ac5f1d4d482f9000b2c1be53683a
msgid "Object-level permissions"
msgstr ""

#: ../../releases/1.2.txt:164
# b4728776c37f495dae96920935ba0117
msgid "A foundation for specifying permissions at the per-object level has been added. Although there is no implementation of this in core, a custom authentication backend can provide this implementation and it will be used by :class:`django.contrib.auth.models.User`. See the :doc:`authentication docs </topics/auth>` for more information."
msgstr ""

#: ../../releases/1.2.txt:171
#: ../../releases/1.2-beta-1.txt:99
# 9677cc9212834955b2115fd08a7ff9f5
# 77a7b463b3e24efc91418b7431e0a5b8
msgid "Permissions for anonymous users"
msgstr ""

#: ../../releases/1.2.txt:173
# 43f9403cae994e1f97b464242a1ba999
msgid "If you provide a custom auth backend with ``supports_anonymous_user`` set to ``True``, AnonymousUser will check the backend for permissions, just like User already did.  This is useful for centralizing permission handling - apps can always delegate the question of whether something is allowed or not to the authorization/authentication backend. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.2.txt:181
# 01bbe01646dc4249b37efa870a98c0f8
msgid "Relaxed requirements for usernames"
msgstr ""

#: ../../releases/1.2.txt:183
# d0aac0ff4408462882fd06f8e2212b95
msgid "The built-in :class:`~django.contrib.auth.models.User` model's :attr:`~django.contrib.auth.models.User.username` field now allows a wider range of characters, including ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../releases/1.2.txt:188
# 324140bf28264893ae7863427cbe7716
msgid "Email backends"
msgstr ""

#: ../../releases/1.2.txt:190
#: ../../releases/1.2-alpha-1.txt:401
# 5a5919efa86a495bb22e557d826aeff8
# c5c774c178c64165a7c7589cf990dfee
msgid "You can now :ref:`configure the way that Django sends email <topic-email-backends>`. Instead of using SMTP to send all email, you can now choose a configurable email backend to send messages. If your hosting provider uses a sandbox or some other non-SMTP technique for sending mail, you can now construct an email backend that will allow Django's standard :doc:`mail sending methods</topics/email>` to use those facilities."
msgstr ""

#: ../../releases/1.2.txt:198
# a68a29cf2572435ea0c5cc23c34196fe
msgid "This also makes it easier to debug mail sending. Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>`. You can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2.txt:208
# b446bdb448a041a4b2bbcee536072afe
msgid "\"Smart\" :ttag:`if` tag"
msgstr ""

#: ../../releases/1.2.txt:210
# e2b37bc64e6a4f3098493b6f4ee19e78
msgid "The :ttag:`if` tag has been upgraded to be much more powerful. First, we've added support for comparison operators. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2.txt:219
# 21216b587dc042f6894faddfefb4533f
msgid "You can now do this:"
msgstr ""

#: ../../releases/1.2.txt:227
# eb907933f04f4014a06b7ea69f4a3fac
msgid "There's really no reason to use ``{% ifequal %}`` or ``{% ifnotequal %}`` anymore, unless you're the nostalgic type."
msgstr ""

#: ../../releases/1.2.txt:230
# 61b51f104add4047bcabe4298c06e987
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``, ``in`` and ``not in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not``, which were already supported."
msgstr ""

#: ../../releases/1.2.txt:234
#: ../../releases/1.2-alpha-1.txt:459
# 70aa641306e94d9690ae130538e0c493
# 451f1d6d9c364735be5a44a0aa570e68
msgid "Also, filters may now be used in the ``if`` expression. For example:"
msgstr ""

#: ../../releases/1.2.txt:245
#: ../../releases/1.2-alpha-1.txt:470
# 27efaaed8f6442bdac6b57f1e4ec6f84
# bcedc87aeb0f4364a79e33b74e2523af
msgid "Template caching"
msgstr ""

#: ../../releases/1.2.txt:247
# 39375eaf10d04e0796747e5fa6efe2b9
msgid "In previous versions of Django, every time you rendered a template, it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then cache the result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2.txt:255
#: ../../releases/1.2-alpha-1.txt:480
# 621464ea0c834db9b7563bec628dcd8c
# 57b0111e61a040169be7b1865ea30c1a
msgid "As a side effect, it is now much easier to support non-Django template languages. For more details, see the :ref:`notes on supporting non-Django template languages<topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2.txt:260
# 93e5b111ad244423a2a0edc922dd7d33
msgid "Class-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:262
# d8ea156a7646496593ba030e257137d0
msgid "As part of the changes made to introduce `Template caching`_  and following a general trend in Django, the template loaders API has been modified to use template loading mechanisms that are encapsulated in Python classes as opposed to functions, the only method available until Django 1.1."
msgstr ""

#: ../../releases/1.2.txt:267
# 317ac5b508ea4c7fb1552488683d769b
msgid "All the template loaders :ref:`shipped with Django <template-loaders>` have been ported to the new API but they still implement the function-based API and the template core machinery still accepts function-based loaders (builtin or third party) so there is no immediate need to modify your :setting:`TEMPLATE_LOADERS` setting in existing projects, things will keep working if you leave it untouched up to and including the Django 1.3 release."
msgstr ""

#: ../../releases/1.2.txt:274
# 1eeb967728a743a0807316bccc3ce33e
msgid "If you have developed your own custom template loaders we suggest to consider porting them to a class-based implementation because the code for backwards compatibility with function-based loaders starts its deprecation process in Django 1.2 and will be removed in Django 1.4.  There is a description of the API these loader classes must implement :ref:`here <topic-template-alternate-language>` and you can also examine the source code of the loaders shipped with Django."
msgstr ""

#: ../../releases/1.2.txt:283
#: ../../releases/1.2-alpha-1.txt:485
# e6a54c3f727944d48c6174e1e49296f8
# 16d6f7750b3e4947bc984d63b357c733
msgid "Natural keys in fixtures"
msgstr ""

#: ../../releases/1.2.txt:285
# fd3f4327ce714e1093e72ce7a4ae2e5c
msgid "Fixtures can now refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2.txt:292
# 8fee2a0d91b0450488d313599dfd90e4
msgid "Fast failure for tests"
msgstr ""

#: ../../releases/1.2.txt:294
# 6e0d71f4d4654f03a271674866491917
msgid "Both the :djadmin:`test` subcommand of ``django-admin.py`` and the ``runtests.py`` script used to run Django's own test suite now support a ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run. In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests that were run before the interruption."
msgstr ""

#: ../../releases/1.2.txt:303
#: ../../releases/1.2-alpha-1.txt:494
# 4c2aca25148d4d919b0157502cea4a93
# 5db970baebcd42f1a03f943b8f2cb85d
msgid "``BigIntegerField``"
msgstr ""

#: ../../releases/1.2.txt:305
# 3b5ef147d27c4fa0bdbd06031f7e9c19
msgid "Models can now use a 64-bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2.txt:308
#: ../../releases/1.2-alpha-1.txt:509
# 00cd0da402524ae18f3906503a6bebea
# a99e569598a24918a22da51576bd2a53
msgid "Improved localization"
msgstr ""

#: ../../releases/1.2.txt:310
# 4756b10873b44301a2533555b2a3aea0
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded with locale-aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2.txt:317
# d47e3b39766d4511b937a4ffcf8ef6c6
msgid "``readonly_fields`` in ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2.txt:319
# 7ac0df1ab6a4465cbbf3e57762acbf1e
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed alongside editable fields."
msgstr ""

#: ../../releases/1.2.txt:324
#: ../../releases/1.2-alpha-1.txt:526
# 6545c005ff8140a485d0be5dbaa7a113
# fdd7df18d1e7474fb801564b6db744ff
msgid "Customizable syntax highlighting"
msgstr ""

#: ../../releases/1.2.txt:326
# 12736567d3924dc79156fec4fe8335c0
msgid "You can now use a ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2.txt:331
# 9ba0a60574a34868b5d56e53cbfef832
msgid "Syndication feeds as views"
msgstr ""

#: ../../releases/1.2.txt:333
# 6db96c12e0e94b61b26e9c6847d22d9f
msgid ":doc:`Syndication feeds </ref/contrib/syndication>` can now be used directly as views in your :doc:`URLconf </topics/http/urls>`. This means that you can maintain complete control over the URL structure of your feeds. Like any other view, feeds views are passed a ``request`` object, so you can do anything you would normally do with a view, like user based access control, or making a feed a named URL."
msgstr ""

#: ../../releases/1.2.txt:343
# 6017f2f87a7245eaaa1fc288f607f9aa
msgid "The most significant new feature for :doc:`GeoDjango </ref/contrib/gis/index>` in 1.2 is support for multiple spatial databases.  As a result, the following :ref:`spatial database backends <spatial-backends>` are now included:"
msgstr ""

#: ../../releases/1.2.txt:348
# 0dec1bb0a8814622a4c61c3b47a10fcb
msgid ":mod:`django.contrib.gis.db.backends.postgis`"
msgstr ""

#: ../../releases/1.2.txt:349
# 5e0a717db6b848af98a662b0e27ca915
msgid ":mod:`django.contrib.gis.db.backends.mysql`"
msgstr ""

#: ../../releases/1.2.txt:350
# 200b9d8f63c143dc8b7dfbd4c7d581d2
msgid ":mod:`django.contrib.gis.db.backends.oracle`"
msgstr ""

#: ../../releases/1.2.txt:351
# 449d409274924cfd92275844e1699e31
msgid ":mod:`django.contrib.gis.db.backends.spatialite`"
msgstr ""

#: ../../releases/1.2.txt:353
# c6e42f9cbf314cafa2af12d8e95017a2
msgid "GeoDjango now supports the rich capabilities added in the `PostGIS 1.5 release <http://postgis.refractions.net/documentation/manual-1.5/>`_. New features include suppport for the :ref:`geography type <geography-type>` and enabling of :ref:`distance queries <distance-queries>` with non-point geometries on geographic coordinate systems."
msgstr ""

#: ../../releases/1.2.txt:359
# 9daab41fb7004e56b0ff73c47962d574
msgid "Support for 3D geometry fields was added, and may be enabled by setting the :attr:`~django.contrib.gis.db.models.GeometryField.dim` keyword to 3 in your :class:`~django.contrib.gis.db.models.GeometryField`. The :class:`~django.contrib.gis.db.models.Extent3D` aggregate and :meth:`~django.contrib.gis.db.models.GeoQuerySet.extent3d` ``GeoQuerySet`` method were added as a part of this feature."
msgstr ""

#: ../../releases/1.2.txt:366
# c87980895b81438c99375a35f7b4e498
msgid "The following :class:`~django.contrib.gis.db.models.GeoQuerySet` methods are new in 1.2:"
msgstr ""

#: ../../releases/1.2.txt:369
# 1b79e36e008c4707a3872ed03955c2bd
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.force_rhr`"
msgstr ""

#: ../../releases/1.2.txt:370
# 98ba27b3147d4198a0e65a0b3197e986
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../releases/1.2.txt:371
# 248bff00ab7148dda811c30867106d23
msgid ":meth:`~django.contrib.gis.db.models.GeoQuerySet.geohash`"
msgstr ""

#: ../../releases/1.2.txt:373
# 4360d04a0d364039a369b52808768efe
msgid "The :ref:`GEOS interface <ref-geos>` was updated to use thread-safe C library functions when available on the platform."
msgstr ""

#: ../../releases/1.2.txt:376
# 39f62192a2dd477392a6953346656990
msgid "The :ref:`GDAL interface <ref-gdal>` now allows the user to set a :attr:`~django.contrib.gis.gdal.Layer.spatial_filter` on the features returned when iterating over a :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../releases/1.2.txt:381
# 6c5f5352b15645e1ac09d9aa5d7eedb1
msgid "Finally, :doc:`GeoDjango's documentation </ref/contrib/gis/index>` is now included with Django's and is no longer hosted separately at `geodjango.org <http://geodjango.org/>`_."
msgstr ""

#: ../../releases/1.2.txt:388
# 467dc69bcbd54a8eb6d5eac7790f4cb3
msgid "JavaScript-assisted handling of inline related objects in the admin"
msgstr ""

#: ../../releases/1.2.txt:390
# 9dcfc3b0af7f4ceeb545613a9156e46a
msgid "If a user has JavaScript enabled in their browser, the interface for inline objects in the admin now allows inline objects to be dynamically added and removed. Users without JavaScript-enabled browsers will see no change in the behavior of inline objects."
msgstr ""

#: ../../releases/1.2.txt:396
# 1831d6ca1c2d437eab2a7d6f3e514b3d
msgid "New ``now`` template tag format specifier characters: ``c`` and ``u``"
msgstr ""

#: ../../releases/1.2.txt:398
# fce454b3f59842abb10fe919217cee19
msgid "The argument to the :ttag:`now` has gained two new format characters: ``c`` to specify that a datetime value should be formatted in ISO 8601 format, and ``u`` that allows output of the microseconds part of a datetime or time value."
msgstr ""

#: ../../releases/1.2.txt:403
# ecda8c758d754eae84662847e685bee6
msgid "These are also available in others parts like the :tfilter:`date` and :tfilter:`time` template filters, the ``humanize`` template tag library and the new `format localization`_ framework."
msgstr ""

#: ../../releases/1.2.txt:412
#: ../../releases/1.2-alpha-1.txt:20
# 37db430b172044e2bbcc22fbbc22314b
# 17cdb793e4f143cb84f453a518c940d6
msgid "Backwards-incompatible changes in 1.2"
msgstr ""

#: ../../releases/1.2.txt:414
# 19644a1b7d504bc68b58b65e76864d0c
msgid "Wherever possible the new features above have been introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. This means that practically all existing code which worked with Django 1.1 will continue to work with Django 1.2; such code will, however, begin issuing warnings (see below for details)."
msgstr ""

#: ../../releases/1.2.txt:421
# 6016eefe1ade47cdae412652d952aafc
msgid "However, a handful of features *have* changed in ways that, for some users, will be immediately backwards-incompatible. Those changes are detailed below."
msgstr ""

#: ../../releases/1.2.txt:426
#: ../../releases/1.2-alpha-1.txt:23
# 36b5724780f04c8ba34ed3d60c7db0d3
# 0b34f7a983544d80a387dd55d24adf34
msgid "CSRF Protection"
msgstr ""

#: ../../releases/1.2.txt:428
# 4c98bdd973be439aa53121c4b3f78159
msgid "We've made large changes to the way CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`. Here are the major changes you should be aware of:"
msgstr ""

#: ../../releases/1.2.txt:432
# b05d8904916b403db1cdcc4040b10d3f
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated and will be removed completely in Django 1.4, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2.txt:436
# 6fbceee92a7b43ef8d9cde8f6076c4ab
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template. If you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2.txt:443
#: ../../releases/1.2.txt:871
#: ../../releases/1.2-alpha-1.txt:40
#: ../../releases/1.2-alpha-1.txt:208
# bb7372b9e488410e91da847f5f06881a
# 2b4c45c2717c4be6b434dccfcc842a8b
# a0eb4bc1dd3d4ed38a09243ba857ea6e
# 2e5183145f0b4a47981ae84812764a08
msgid "The upgrade notes have been removed in current Django docs. Please refer to the docs for Django 1.3 or older to find these instructions."
msgstr ""

#: ../../releases/1.2.txt:446
# f52fb4b02e224a228d7c233edd7b8929
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2.txt:451
# c811911fdf64407c8ea3b18562dfd7c9
msgid "All of the CSRF has moved from contrib to core (with backwards compatible imports in the old locations, which are deprecated and will cease to be supported in Django 1.4)."
msgstr ""

#: ../../releases/1.2.txt:456
# f8d81a0848294f8ca630c457727030e7
msgid "``get_db_prep_*()`` methods on ``Field``"
msgstr ""

#: ../../releases/1.2.txt:458
# d5f739089c0b46d5b10ee776302bd4fa
msgid "Prior to Django 1.2, a custom ``Field`` had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2.txt:476
#: ../../releases/1.2-alpha-1.txt:117
# 214e36e08ac941cc81dd9223c8b3ac37
# e91925574fce4b5983707904a16ae5b8
msgid "In 1.2, these three methods have undergone a change in prototype, and two extra methods have been introduced::"
msgstr ""

#: ../../releases/1.2.txt:500
# e096c93370444a86b1156e6969f624ef
msgid "These changes are required to support multiple databases -- ``db_type`` and ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2.txt:506
# 7c2b0b175ca54f7d8c31b17561cc1c5b
msgid "The two new methods exist to differentiate general data-preparation requirements from requirements that are database-specific. The ``prepared`` argument is used to indicate to the database-preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2.txt:514
# ace85615d535438e9817b5269a37fa22
msgid "We've provided conversion functions that will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, these conversion functions will be removed in Django 1.4, so you should upgrade your ``Field`` definitions to use the new prototype as soon as possible."
msgstr ""

#: ../../releases/1.2.txt:520
# d55e4c169cfd4e81a3388019fcdff6d8
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()``. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2.txt:529
#: ../../releases/1.2-alpha-1.txt:167
# de303e2662954492906a115d75186c3c
# 45fca56ab4e94f15be65ed982cc665cf
msgid "Stateful template tags"
msgstr ""

#: ../../releases/1.2.txt:531
# 04cf01778a5248b2862a97810e6c2885
msgid "Template tags that store rendering state on their ``Node`` subclass have always been vulnerable to thread-safety and other issues; as of Django 1.2, however, they may also cause problems when used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2.txt:536
# aabf9349321e44a59ec476707b5f4e67
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or from your own code, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2.txt:543
# 177082a635af4392ac594f8ae853e44b
msgid "You may also need to update your templates if you were relying on the implementation of Django's template tags *not* being thread safe. The :ttag:`cycle` tag is the most likely to be affected in this way, especially when used in conjunction with the :ttag:`include` tag. Consider the following template fragment::"
msgstr ""

#: ../../releases/1.2.txt:553
# 051e0e7a32124058bf5ffd0a2dba929f
msgid "with a ``subtemplate.html`` that reads::"
msgstr ""

#: ../../releases/1.2.txt:557
# 1f12bc5c53a74fdaae6079c7f5f81e0a
msgid "Using the non-thread-safe, pre-Django 1.2 renderer, this would output::"
msgstr ""

#: ../../releases/1.2.txt:561
# e5e40d31fae049a58ee6e0cacf039c46
msgid "Using the thread-safe Django 1.2 renderer, you will instead get::"
msgstr ""

#: ../../releases/1.2.txt:565
# 36e8daef8b3342d29e090d26bf296ffb
msgid "This is because each rendering of the :ttag:`include` tag is an independent rendering. When the :ttag:`cycle` tag was not thread safe, the state of the :ttag:`cycle` tag would leak between multiple renderings of the same :ttag:`include`. Now that the :ttag:`cycle` tag is thread safe, this leakage no longer occurs."
msgstr ""

#: ../../releases/1.2.txt:572
# d897d40bb571417f8be844cd67dc9e4e
msgid "``user_passes_test``, ``login_required`` and ``permission_required``"
msgstr ""

#: ../../releases/1.2.txt:574
# a4572761daa04aa3b0598cc83e5ec600
msgid "``django.contrib.auth.decorators`` provides the decorators ``login_required``, ``permission_required`` and ``user_passes_test``. Previously it was possible to use these decorators both on functions (where the first argument is 'request') and on methods (where the first argument is 'self', and the second argument is 'request'). Unfortunately, flaws were discovered in the code supporting this: it only works in limited circumstances, and produces errors that are very difficult to debug when it does not work."
msgstr ""

#: ../../releases/1.2.txt:584
# 4f14ce8fee7448a086989ba88b8a4fa1
msgid "For this reason, the 'auto adapt' behavior has been removed, and if you are using these decorators on methods, you will need to manually apply :func:`django.utils.decorators.method_decorator` to convert the decorator to one that works with methods. For example, you would change code from this::"
msgstr ""

#: ../../releases/1.2.txt:606
# a4744e01829f4448a3d13b39626eb779
msgid "or::"
msgstr ""

#: ../../releases/1.2.txt:618
# 9902f2902d5b4f80997de839ebb6dc47
msgid "For those of you who've been following the development trunk, this change also applies to other decorators introduced since 1.1, including ``csrf_protect``, ``cache_control`` and anything created using ``decorator_from_middleware``."
msgstr ""

#: ../../releases/1.2.txt:624
#: ../../releases/1.2-alpha-1.txt:53
# 9e62b79f6e3d4a2aaec3c49c46f67d2e
# f42cfbf0aedd4a949e99ef822e4dabab
msgid ":ttag:`if` tag changes"
msgstr ""

#: ../../releases/1.2.txt:626
# a6c36820c2964bbbaed64f987bede67b
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names. Previously, these strings could be used as variable names. Now, the keyword status is always enforced, and template code such as ``{% if not %}`` or ``{% if and %}`` will throw a ``TemplateSyntaxError``. Also, ``in`` is a new keyword and so is not a valid variable name in this tag."
msgstr ""

#: ../../releases/1.2.txt:634
#: ../../releases/1.2-alpha-1.txt:62
# ff5a94ee78384703b18407639c8c8797
# b7caf96edef9417487c73ab966eed52d
msgid "``LazyObject``"
msgstr ""

#: ../../releases/1.2.txt:636
# a934b36da5e64d42ac1e79383e9865e1
msgid "``LazyObject`` is an undocumented-but-often-used utility class used for lazily wrapping other objects of unknown type."
msgstr ""

#: ../../releases/1.2.txt:639
# 84a128bf264d491aae02f54a60fb404d
msgid "In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method named ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard Python introspection method, involving ``__members__`` and ``__dir__()``."
msgstr ""

#: ../../releases/1.2.txt:645
# e9c1e9f941764d5c8b9e4007df0e283a
msgid "If you used ``LazyObject`` in your own code and implemented the ``get_all_members()`` method for wrapped objects, you'll need to make a couple of changes:"
msgstr ""

#: ../../releases/1.2.txt:649
# 361f621f569447ac83f77032c45b91cd
msgid "First, if your class does not have special requirements for introspection (i.e., you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method. The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2.txt:655
# ef4a5d43060b43138fd9244d649f899c
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``. This is the standard introspection method for Python 2.6 and above. If you require support for Python versions earlier than 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2.txt:663
# 10dd678c5f554058b10b23496b85de22
msgid "``__dict__`` on model instances"
msgstr ""

#: ../../releases/1.2.txt:665
#: ../../releases/1.2-alpha-1.txt:89
# 257125e0dbc94e3eb922a659a217d6b1
# 942370a57155404eb41020a3340ed0b8
msgid "Historically, the ``__dict__`` attribute of a model instance has only contained attributes corresponding to the fields on a model."
msgstr ""

#: ../../releases/1.2.txt:668
# 4542be67f9564364ba4a76bb47536ca2
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over ``__dict__`` to obtain a list of fields, you must now be prepared to handle or filter out the ``_state`` attribute."
msgstr ""

#: ../../releases/1.2.txt:677
# fd61fbcd07ee459a93c7f1125e38a94f
msgid "The exit status code of the test runners (``tests/runtests.py`` and ``python manage.py test``) no longer represents the number of failed tests, because a failure of 256 or more tests resulted in a wrong exit status code. The exit status code for the test runner is now 0 for success (no failing tests) and 1 for any number of test failures. If needed, the number of test failures can be found at the end of the test runner's output."
msgstr ""

#: ../../releases/1.2.txt:687
# f01c7b8147bb433abf1a67a1e3882368
msgid "To fix bugs with cookies in Internet Explorer, Safari, and possibly other browsers, our encoding of cookie values was changed so that the comma and semicolon are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively.  This could produce backwards incompatibilities, especially if you are storing comma or semi-colon in cookies and have javascript code that parses and manipulates cookie values client-side."
msgstr ""

#: ../../releases/1.2.txt:696
# 1e414bacfe864eb6b9f7a22a01ac54ea
msgid "``ModelForm.is_valid()`` and ``ModelForm.errors``"
msgstr ""

#: ../../releases/1.2.txt:698
# 7be68226392446aa9761d2a548a44330
msgid "Much of the validation work for ModelForms has been moved down to the model level. As a result, the first time you call ``ModelForm.is_valid()``, access ``ModelForm.errors`` or otherwise trigger form validation, your model will be cleaned in-place. This conversion used to happen when the model was saved. If you need an unmodified instance of your model, you should pass a copy to the ``ModelForm`` constructor."
msgstr ""

#: ../../releases/1.2.txt:706
# 526a4256c26f488a9e48d5be55d0aab7
msgid "``BooleanField`` on MySQL"
msgstr ""

#: ../../releases/1.2.txt:708
# dd44cfc911314863ba3e437b420a20d4
msgid "In previous versions of Django, a model's ``BooleanField`` under MySQL would return its value as either ``1`` or ``0``, instead of ``True`` or ``False``; for most people this wasn't a problem because ``bool`` is a subclass of ``int`` in Python. In Django 1.2, however, ``BooleanField`` on MySQL correctly returns a real ``bool``.  The only time this should ever be an issue is if you were expecting the ``repr`` of a ``BooleanField`` to print ``1`` or ``0``."
msgstr ""

#: ../../releases/1.2.txt:717
# 1e73c3ed0e8e4acdbc1ebcd4f96e0228
msgid "Changes to the interpretation of ``max_num`` in FormSets"
msgstr ""

#: ../../releases/1.2.txt:719
# 21101e07027243d5a8adae3128d5d7eb
msgid "As part of enhancements made to the handling of FormSets, the default value and interpretation of the ``max_num`` parameter to the :ref:`django.forms.formsets.formset_factory() <formsets-max-num>` and :ref:`django.forms.models.modelformset_factory() <model-formsets-max-num>` functions has changed slightly. This change also affects the way the ``max_num`` argument is :ref:`used for inline admin objects <ref-contrib-admin-inline-max-num>`"
msgstr ""

#: ../../releases/1.2.txt:727
# c7587f033e2c487484f82dfd1d3856bf
msgid "Previously, the default value for ``max_num`` was ``0`` (zero). FormSets then used the boolean value of ``max_num`` to determine if a limit was to be imposed on the number of generated forms. The default value of ``0`` meant that there was no default limit on the number of forms in a FormSet."
msgstr ""

#: ../../releases/1.2.txt:733
# f3f35696adec4b2595384fb2cdd6d384
msgid "Starting with 1.2, the default value for ``max_num`` has been changed to ``None``, and FormSets will differentiate between a value of ``None`` and a value of ``0``. A value of ``None`` indicates that no limit on the number of forms is to be imposed; a value of ``0`` indicates that a maximum of 0 forms should be imposed. This doesn't necessarily mean that no forms will be displayed -- see the :ref:`ModelFormSet documentation <model-formsets-max-num>` for more details."
msgstr ""

#: ../../releases/1.2.txt:742
# 57a94ca94f4442b6b1b70107e4ecd249
msgid "If you were manually specifying a value of ``0`` for ``max_num``, you will need to update your FormSet and/or admin definitions."
msgstr ""

#: ../../releases/1.2.txt:747
# 5b12a158c4284a298809c2c75991f7c0
msgid ":ref:`1.2-js-assisted-inlines`"
msgstr ""

#: ../../releases/1.2.txt:750
# 55ea293a4ad54eef8f0b4c349e6ae159
msgid "``email_re``"
msgstr ""

#: ../../releases/1.2.txt:752
# 0e7ad0fe551f424dad32030828b52cc7
msgid "An undocumented regular expression for validating email addresses has been moved from ``django.form.fields`` to ``django.core.validators``. You will need to update your imports if you are using it."
msgstr ""

#: ../../releases/1.2.txt:759
#: ../../releases/1.2-alpha-1.txt:191
# a345fb5240c340e08bbeae1f03b47a65
# bb6ec91f5e8f4c5cbdcc4637b8e628c3
msgid "Features deprecated in 1.2"
msgstr ""

#: ../../releases/1.2.txt:761
# 4d8d4f72557e4d17a58e53c3fe5d8a86
msgid "Finally, Django 1.2 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.2.txt:765
# 80dc0a0b4a174ac5b892d572b9ac120c
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.2. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or `-Wall` flag."
msgstr ""

#: ../../releases/1.2.txt:770
# 7c88c0aa5f594bf89143f1062857172c
msgid "In Django 1.3, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.4 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.2.txt:776
# 322bb4e64aad44e8acab3bb13883a696
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`.`"
msgstr ""

#: ../../releases/1.2.txt:783
#: ../../releases/1.2-alpha-1.txt:248
# 06118a34bd9b4fe584a067623b87d700
# 1bedc7eb532446bcb76f1ff939c5bb0e
msgid "Specifying databases"
msgstr ""

#: ../../releases/1.2.txt:785
# 6b680d71e7d6468ba64fcd6ce96378e3
msgid "Prior to Django 1.2, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2.txt:790
# 10f2435153fc403ebeb60dad3b5341ae
msgid "Any existing Django settings file will continue to work as expected until Django 1.4. Until then, old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2.txt:794
# bac0c907657b42279ee1e8239ff21cc6
msgid "In the old-style (pre 1.2) format, you had a number of ``DATABASE_`` settings in your settings file. For example::"
msgstr ""

#: ../../releases/1.2.txt:802
# 571d25ffacd0458f87b688535210ac62
msgid "These settings are now in a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened. The previous sample settings would now look like this::"
msgstr ""

#: ../../releases/1.2.txt:817
#: ../../releases/1.2-alpha-1.txt:283
# 5f318a58e26e481d8cb5aa8c567d6ef2
# 614192ba343d421aaa9ce7136c2a5186
msgid "This affects the following settings:"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# 84f53495513a4706afe02ba03015c71a
# 769992d03dfa4d88bdab6bc7ca875580
msgid "Old setting"
msgstr ""

#: ../../releases/1.2.txt:820
#: ../../releases/1.2-alpha-1.txt:286
# 8967116a49a846ab867827e989b0256e
# b8c106bd29fa49c9b06ecb5913c7aab9
msgid "New Setting"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# f126d796288d482fb8ad01d4de72fb9d
# adc37829f135467c9cf30c00c0526fc8
msgid ":setting:`DATABASE_ENGINE`"
msgstr ""

#: ../../releases/1.2.txt:822
#: ../../releases/1.2-alpha-1.txt:288
# bce8f185f2264b5c88aff76ddc724e12
# 55998c96c59341a8804b7b38ea43dd97
msgid ":setting:`ENGINE`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# 067a7a7557b64aada28a5f5ecba77e66
# 7d91aa9f05984200a6a493c27a09fc8f
msgid ":setting:`DATABASE_HOST`"
msgstr ""

#: ../../releases/1.2.txt:823
#: ../../releases/1.2-alpha-1.txt:289
# e37a756ef4ef449485352c51f6d7c5e7
# 2f3fe4a41d134e66be8fc870f2a72d17
msgid ":setting:`HOST`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 839de9ab68d0431eb1b4c12191bef61f
# 57d3d49f9f6b408ebb871e7aeef779f5
msgid ":setting:`DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:824
#: ../../releases/1.2-alpha-1.txt:290
# 072560559e254f9093c93b224a5cea23
# cd6d522045954de0824f6cb7c9a88f49
msgid ":setting:`NAME`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# 2c9a95d46b8547edbfb76b75d72d1db7
# 24f68fe04f2d4ad08053a2ded51101ef
msgid ":setting:`DATABASE_OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:825
#: ../../releases/1.2-alpha-1.txt:291
# 2a1fadb44eba42acb9bf83975a618be6
# 4f59c69bf45d470495a73a095fb4bd7f
msgid ":setting:`OPTIONS`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# ec8c0587a4b040379769a3d260afee44
# b4fbc667761341fcbdb3c20c9367ad6a
msgid ":setting:`DATABASE_PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:826
#: ../../releases/1.2-alpha-1.txt:292
# d777b90540ed490b90f0f9529eef90ea
# 70e891b9ca164d26b409e2e9347f03cb
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# bae79b87d4454404a383486c6f8c27dc
# dc5174591b20450cb9a0d9ceca5c2ed0
msgid ":setting:`DATABASE_PORT`"
msgstr ""

#: ../../releases/1.2.txt:827
#: ../../releases/1.2-alpha-1.txt:293
# 528bceb9fc9d4cceb1609dc228023861
# bd083abb11e449c68eee963917a56c28
msgid ":setting:`PORT`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# b9450a188c1f443fa7c4c6e54a6d1bba
# 9cdcce115ec74e9a811a857ad0bf5790
msgid ":setting:`DATABASE_USER`"
msgstr ""

#: ../../releases/1.2.txt:828
#: ../../releases/1.2-alpha-1.txt:294
# 9cf67084442d4838875c79e1bf0bc183
# 26b82164057f4a29b6471ca49efbaf93
msgid ":setting:`USER`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# fc3ef0776cfd4487859be5597d08d5b1
# 5fefdc608dc741ccbbb0c90b250730d2
msgid ":setting:`TEST_DATABASE_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:829
#: ../../releases/1.2-alpha-1.txt:295
# 2cd4b4d7d62345389da0bd0347fdc38d
# fa763af7c61445f8871823ec43343675
msgid ":setting:`TEST_CHARSET`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# 6501cc20277f4e208560c9bac88d30b2
# 1cc29b65fc044b9da61b18eb5192720a
msgid ":setting:`TEST_DATABASE_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:830
#: ../../releases/1.2-alpha-1.txt:296
# 17c1e1779c14451b9c3c6718d784ca0f
# 0774c14aea6644dba7e43cd8400cf72e
msgid ":setting:`TEST_COLLATION`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# f6bc8be896144f2abc51da8d801ff041
# 383716ec6d744d2da035433ebec270f1
msgid ":setting:`TEST_DATABASE_NAME`"
msgstr ""

#: ../../releases/1.2.txt:831
#: ../../releases/1.2-alpha-1.txt:297
# 0f80bec4c88f480580f94627f55c0a39
# bc7d8b6be40c4a909904871cc9d8c6cc
msgid ":setting:`TEST_NAME`"
msgstr ""

#: ../../releases/1.2.txt:834
#: ../../releases/1.2-alpha-1.txt:300
# 9035fec2b113475ebe150d0175523214
# 3a377041a7794e98a8454694589e5fec
msgid "These changes are also required if you have manually created a database connection using ``DatabaseWrapper()`` from your database backend of choice."
msgstr ""

#: ../../releases/1.2.txt:837
#: ../../releases/1.2-alpha-1.txt:303
# cec1efa864a5495db993616e375b0bf3
# 7be311c1ca1a490299a221cc7c4bdb5a
msgid "In addition to the change in structure, Django 1.2 removes the special handling for the built-in database backends. All database backends must now be specified by a fully qualified module name (i.e., ``django.db.backends.postgresql_psycopg2``, rather than just ``postgresql_psycopg2``)."
msgstr ""

#: ../../releases/1.2.txt:844
# f0f87fdb4ac2469188bbe67758000d3d
msgid "``postgresql`` database backend"
msgstr ""

#: ../../releases/1.2.txt:846
# 6f5c023a4990426b98c38e5147de292a
msgid "The ``psycopg1`` library has not been updated since October 2005. As a result, the ``postgresql`` database backend, which uses this library, has been deprecated."
msgstr ""

#: ../../releases/1.2.txt:850
# cf0736cc664c4253b7476021ca74eb8a
msgid "If you are currently using the ``postgresql`` backend, you should migrate to using the ``postgresql_psycopg2`` backend. To update your code, install the ``psycopg2`` library and change the :setting:`DATABASE_ENGINE` setting to use ``django.db.backends.postgresql_psycopg2``."
msgstr ""

#: ../../releases/1.2.txt:857
# 30d1b92c8b084f0ea8b2e5b03a9ca8e4
msgid "CSRF response-rewriting middleware"
msgstr ""

#: ../../releases/1.2.txt:859
# 012ef23e00134ca8bc03c6f18341b208
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into ``POST`` forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware``, has likewise been deprecated."
msgstr ""

#: ../../releases/1.2.txt:866
#: ../../releases/1.2-alpha-1.txt:203
# 061e16e4fce048c9843bb813a0901f9a
# f95a21b11b4b45ec9d3d6382239e23fc
msgid "Also, the CSRF module has moved from contrib to core, and the old imports are deprecated, as described in the upgrading notes."
msgstr ""

#: ../../releases/1.2.txt:875
#: ../../releases/1.2-alpha-1.txt:212
# 2a4b9596a16e4adc91d8f1976a434127
# ecb8015e4d094872b901111eb65986d0
msgid "``SMTPConnection``"
msgstr ""

#: ../../releases/1.2.txt:877
# 16b4e75dc9e04143babb96c38ff41a66
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2.txt:886
# bb8475b2165a472996ed8b992955b933
msgid "...should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2.txt:894
#: ../../releases/1.2-alpha-1.txt:231
# cab996843c0042bea54db8b2839aad3b
# 1e6c9cbc0c83487faeff847d42273c24
msgid "Depending on the value of the :setting:`EMAIL_BACKEND` setting, this may not return an SMTP connection. If you explicitly require an SMTP connection with which to send email, you can explicitly request an SMTP connection::"
msgstr ""

#: ../../releases/1.2.txt:904
#: ../../releases/1.2-alpha-1.txt:241
# 886757b7fda7446fa7b60a18da80c3b2
# 9dd50153d7ad4e1caac639cbfda039d5
msgid "If your call to construct an instance of ``SMTPConnection`` required additional arguments, those arguments can be passed to the :meth:`~django.core.mail.get_connection()` call::"
msgstr ""

#: ../../releases/1.2.txt:911
#: ../../releases/1.2-alpha-1.txt:310
# dd0f97da49f941e5b039105bd8ebc8a7
# 6bca180f37274e24a13dfc3b4197b776
msgid "User Messages API"
msgstr ""

#: ../../releases/1.2.txt:913
#: ../../releases/1.2-alpha-1.txt:312
# 905103429023447b908811c46213111c
# a3acd8b42d874b40b7c8f5e01bead975
msgid "The API for storing messages in the user ``Message`` model (via ``user.message_set.create``) is now deprecated and will be removed in Django 1.4 according to the standard :doc:`release process </internals/release-process>`."
msgstr ""

#: ../../releases/1.2.txt:917
# 8724c3658bf64c4d95f4617ec7dd72a4
msgid "To upgrade your code, you need to replace any instances of this::"
msgstr ""

#: ../../releases/1.2.txt:921
# 23134332a9d34d81a99ca4dbc48a037c
msgid "...with the following::"
msgstr ""

#: ../../releases/1.2.txt:926
#: ../../releases/1.2-alpha-1.txt:325
# f57eb10464cd464799c8ff4f9f6d1fbf
# 8c86c6aaa7664540be0cd09600bb3363
msgid "Additionally, if you make use of the method, you need to replace the following::"
msgstr ""

#: ../../releases/1.2.txt:932
# 316c56435bc447998d077a834c964a0f
msgid "...with::"
msgstr ""

#: ../../releases/1.2.txt:938
#: ../../releases/1.2-alpha-1.txt:337
# 6de4394273ee4342ab438eabfa6dd03f
# 80acd1a6647c41a4a0c826fd3c32e781
msgid "For more information, see the full :doc:`messages documentation </ref/contrib/messages>`. You should begin to update your code to use the new API immediately."
msgstr ""

#: ../../releases/1.2.txt:943
#: ../../releases/1.2-alpha-1.txt:342
# 29fdacda1e064154a87b43fa8206a582
# 8498c976c5164e6197ea55245c2d666b
msgid "Date format helper functions"
msgstr ""

#: ../../releases/1.2.txt:945
# e10de64819c540818712fda2f9e39b19
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()``, which is locale-aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2.txt:951
# 201731cf05f143969f2d72df7081c617
msgid "To get the different date formats, instead of writing this::"
msgstr ""

#: ../../releases/1.2.txt:956
# 9feee13481d34db5a20fa271be745567
msgid "...use::"
msgstr ""

#: ../../releases/1.2.txt:963
# 084e82745427447c9afa0c01add1cceb
msgid "Or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2.txt:968
#: ../../releases/1.2-alpha-1.txt:368
# 4eaf2e57a1d047258eb24ca6de729c77
# 39b930e03a0e4199aff99447a22ab268
msgid "The same applies to the globals found in ``django.forms.fields``:"
msgstr ""

#: ../../releases/1.2.txt:970
#: ../../releases/1.2-alpha-1.txt:370
# faf101ff80354009bcf729e88b050b8a
# 3d3de42214e14c53b23cc8918216dc97
msgid "``DEFAULT_DATE_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:971
#: ../../releases/1.2-alpha-1.txt:371
# da0c9f02cb2f443da8957a5313b2b62f
# b2921bcc9016428a855b0f0304138133
msgid "``DEFAULT_TIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:972
#: ../../releases/1.2-alpha-1.txt:372
# 93d62ba1d28841fe85771e7a4b23f4c3
# 9a81ce25c0b64272a37a0e15ae2a8073
msgid "``DEFAULT_DATETIME_INPUT_FORMATS``"
msgstr ""

#: ../../releases/1.2.txt:974
#: ../../releases/1.2-alpha-1.txt:374
# 78324684cfd14d7aa8e5fcf1c01ef4cc
# 2acff352da2b417ca630ed96991a73c3
msgid "Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../releases/1.2.txt:977
# 2d3dac38561a4a1db2b2272549c049ea
msgid "Function-based test runners"
msgstr ""

#: ../../releases/1.2.txt:979
#: ../../releases/1.2-beta-1.txt:41
# 8e0eb63e6be343a4baf6a8fa9375448f
# 8699a82b20354cb3870f569fe5441587
msgid "Django 1.2 changes the test runner tools to use a class-based approach. Old style function-based test runners will still work, but should be updated to use the new :ref:`class-based runners <topics-testing-test_runner>`."
msgstr ""

#: ../../releases/1.2.txt:987
# 10be39183d5f4441982b17322c505bd8
msgid "``Feed`` in ``django.contrib.syndication.feeds``"
msgstr ""

#: ../../releases/1.2.txt:989
# 98743214997a4276bb44d90e772cf9e7
msgid "The :class:`django.contrib.syndication.feeds.Feed` class has been replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated, and will be removed in Django 1.4."
msgstr ""

#: ../../releases/1.2.txt:994
# e4e73d8dc43445e0abf62044c82268cb
msgid "The new class has an almost identical API, but allows instances to be used as views. For example, consider the use of the old framework in the following :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../releases/1.2.txt:1013
# 3490bda3565448deb6289bb55f751845
msgid "Using the new Feed class, these feeds can be deployed directly as views::"
msgstr ""

#: ../../releases/1.2.txt:1025
# 1324746086f649e9bc56c9d3da5d162d
msgid "If you currently use the ``feed()`` view, the ``LatestEntries`` class would often not need to be modified apart from subclassing the new :class:`~django.contrib.syndication.views.Feed` class. The exception is if Django was automatically working out the name of the template to use to render the feed's description and title elements (if you were not specifying the ``title_template`` and ``description_template`` attributes). You should ensure that you always specify ``title_template`` and ``description_template`` attributes, or provide ``item_title()`` and ``item_description()`` methods."
msgstr ""

#: ../../releases/1.2.txt:1034
# ace6eea6e01d454e89fe3ad2230893fa
msgid "However, ``LatestEntriesByCategory`` uses the ``get_object()`` method with the ``bits`` argument to specify a specific category to show. In the new :class:`~django.contrib.syndication.views.Feed` class, ``get_object()`` method takes a ``request`` and arguments from the URL, so it would look like this::"
msgstr ""

#: ../../releases/1.2.txt:1050
# aaa3fd46731a48a9b8c7bd7de75c8331
msgid "Additionally, the ``get_feed()`` method on ``Feed`` classes now take different arguments, which may impact you if you use the ``Feed`` classes directly. Instead of just taking an optional ``url`` argument, it now takes two arguments: the object returned by its own ``get_object()`` method, and the current ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1056
# 4b8359aa88d5424bb9dd97ba31b50b05
msgid "To take into account ``Feed`` classes not being initialized for each request, the ``__init__()`` method now takes no arguments by default. Previously it would have taken the ``slug`` from the URL and the ``request`` object."
msgstr ""

#: ../../releases/1.2.txt:1061
# d1699d56eb9348e9a82e7f84b59b3fb8
msgid "In accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2.txt:1065
#: ../../releases/1.2-beta-1.txt:59
# cdec291aa89648f79b07b5fc29e9451a
# 463386513f1c49efaa137ecbae8c8f4e
msgid "For more information, see the full :doc:`syndication framework documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../releases/1.2.txt:1071
# 23928d801a4c46d399f06d4121e11a6c
msgid "Technical message IDs"
msgstr ""

#: ../../releases/1.2.txt:1073
# 7948d02b9999430dae9c38564fc63d96
msgid "Up to version 1.1 Django used technical message IDs to provide localizers the possibility to translate date and time formats. They were translatable :term:`translation strings <translation string>` that could be recognized because they were all upper case (for example :setting:`DATETIME_FORMAT`, :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`). They have been deprecated in favor of the new :ref:`Format localization <format-localization>` infrastructure that allows localizers to specify that information in a ``formats.py`` file in the corresponding ``django/conf/locale/<locale name>/`` directory."
msgstr ""

#: ../../releases/1.2.txt:1086
# 2ddf72e02be34ec2b770d3bd1a30cc44
msgid "To allow support for multiple databases, the GeoDjango database internals were changed substantially.  The largest backwards-incompatible change is that the module ``django.contrib.gis.db.backend`` was renamed to :mod:`django.contrib.gis.db.backends`, where the full-fledged :ref:`spatial database backends <spatial-backends>` now exist.  The following sections provide information on the most-popular APIs that were affected by these changes."
msgstr ""

#: ../../releases/1.2.txt:1095
# c5d59399ca1d45c5831fc56e8359b7c5
msgid "``SpatialBackend``"
msgstr ""

#: ../../releases/1.2.txt:1097
# 170608113e9546898fa1be6c81fa30bc
msgid "Prior to the creation of the separate spatial backends, the ``django.contrib.gis.db.backend.SpatialBackend`` object was provided as an abstraction to introspect on the capabilities of the spatial database.  All of the attributes and routines provided by ``SpatialBackend`` are now a part of the ``ops`` attribute of the database backend."
msgstr ""

#: ../../releases/1.2.txt:1104
# 9865ac7187d24488b0060ccba7063380
msgid "The old module ``django.contrib.gis.db.backend`` is still provided for backwards-compatibility access to a ``SpatialBackend`` object, which is just an alias to the ``ops`` module of the *default* spatial database connection."
msgstr ""

#: ../../releases/1.2.txt:1109
# 5192e49f4cb44c0a87838b1e77ff1b1d
msgid "Users that were relying on undocumented modules and objects within ``django.contrib.gis.db.backend``, rather the abstractions provided by ``SpatialBackend``, are required to modify their code. For example, the following import which would work in 1.1 and below::"
msgstr ""

#: ../../releases/1.2.txt:1117
# 0eec4fbc9fb248c7a0b60d1823136027
msgid "Would need to be changed::"
msgstr ""

#: ../../releases/1.2.txt:1123
# c19b0da0ad5b48ac9b520b55ae6f4a71
msgid "``SpatialRefSys`` and ``GeometryColumns`` models"
msgstr ""

#: ../../releases/1.2.txt:1125
# ad399ffce827444291b0bc1705e2066b
msgid "In previous versions of GeoDjango, :mod:`django.contrib.gis.db.models` had ``SpatialRefSys`` and ``GeometryColumns`` models for querying the OGC spatial metadata tables ``spatial_ref_sys`` and ``geometry_columns``, respectively."
msgstr ""

#: ../../releases/1.2.txt:1130
# 4a062897c0dc44cf9d7cad045a190dc1
msgid "While these aliases are still provided, they are only for the *default* database connection and exist only if the default connection is using a supported spatial database backend."
msgstr ""

#: ../../releases/1.2.txt:1136
# 341ac62cda334f068919a19771e0f381
msgid "Because the table structure of the OGC spatial metadata tables differs across spatial databases, the ``SpatialRefSys`` and ``GeometryColumns`` models can no longer be associated with the ``gis`` application name.  Thus, no models will be returned when using the ``get_models`` method in the following example::"
msgstr ""

#: ../../releases/1.2.txt:1146
# 7715499fc2ee4184926db76fb8f593fa
msgid "To get the correct ``SpatialRefSys`` and ``GeometryColumns`` for your spatial database use the methods provided by the spatial backend::"
msgstr ""

#: ../../releases/1.2.txt:1155
# 83f156c2b56e45feaacaa9439dee85ab
msgid "When using the models returned from the ``spatial_ref_sys()`` and ``geometry_columns()`` method, you'll still need to use the correct database alias when querying on the non-default connection. In other words, to ensure that the models in the example above use the correct database::"
msgstr ""

#: ../../releases/1.2.txt:1165
# b430515109864e99ae6de0051686db08
msgid "Language code ``no``"
msgstr ""

#: ../../releases/1.2.txt:1167
# ef407b2db1e64c29a182d350822c54eb
msgid "The currently used language code for Norwegian Bokmål ``no`` is being replaced by the more common language code ``nb``."
msgstr ""

#: ../../releases/1.2.txt:1171
# 0a9d46af2a9a4fec94b014c2f25b5948
msgid "Function-based template loaders"
msgstr ""

#: ../../releases/1.2.txt:1173
# 642035b0e29f47a4b5445487a3dcc427
msgid "Django 1.2 changes the template loading mechanism to use a class-based approach. Old style function-based template loaders will still work, but should be updated to use the new :ref:`class-based template loaders <topic-template-alternate-language>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:3
# 07ea5fdd2b994996b8e41080155260f2
msgid "Django 1.2 alpha 1 release notes"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:5
# f560774366544cdba3af9f76e28e45ac
msgid "January 5, 2010"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:7
# 7fde6ea27a134361bab6d6fc8af97bad
msgid "Welcome to Django 1.2 alpha 1!"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:9
# ca4d99f4540c42babed2e7c5e627c0f3
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:25
# 24c495a8da6f4b049f9e94e2e6f4f2e2
msgid "There have been large changes to the way that CSRF protection works, detailed in :doc:`the CSRF documentation </ref/contrib/csrf>`.  The following are the major changes that developers must be aware of:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:29
# 0e1a4bddc2824eacb0c96e92a1fadf86
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` have been deprecated, and **will be removed completely in Django 1.4**, in favor of a template tag that should be inserted into forms."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:33
# 0f0c6fc3f859455b8a25bfccb54631af
msgid "All contrib apps use a ``csrf_protect`` decorator to protect the view. This requires the use of the ``csrf_token`` template tag in the template, so if you have used custom templates for contrib views, you MUST READ THE UPGRADE INSTRUCTIONS to fix those templates."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:43
# 27161e33c1524ee087f71301c6bf3964
msgid "``CsrfViewMiddleware`` is included in :setting:`MIDDLEWARE_CLASSES` by default. This turns on CSRF protection by default, so that views that accept POST requests need to be written to work with the middleware. Instructions on how to do this are found in the CSRF docs."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:48
# ca81bb20bd1d4cba9c8aee8c1eada5fa
msgid "CSRF-related code has moved from ``contrib`` to ``core`` (with backwards compatible imports in the old locations, which are deprecated)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:55
# 5993df38bf174482983ba0fda01aa034
msgid "Due to new features in the :ttag:`if` template tag, it no longer accepts 'and', 'or' and 'not' as valid **variable** names.  Previously that worked in some cases even though these strings were normally treated as keywords.  Now, the keyword status is always enforced, and template code like ``{% if not %}`` or ``{% if and %}`` will throw a TemplateSyntaxError."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:64
# 79a94cb753934ec8b4647e0b32eab3f4
msgid "``LazyObject`` is an undocumented utility class used for lazily wrapping other objects of unknown type.  In Django 1.1 and earlier, it handled introspection in a non-standard way, depending on wrapped objects implementing a public method ``get_all_members()``. Since this could easily lead to name clashes, it has been changed to use the standard method, involving ``__members__`` and ``__dir__()``. If you used ``LazyObject`` in your own code, and implemented the ``get_all_members()`` method for wrapped objects, you need to make the following changes:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:73
# ba7457808229433499bef4e041f90d1a
msgid "If your class does not have special requirements for introspection (i.e. you have not implemented ``__getattr__()`` or other methods that allow for attributes not discoverable by normal mechanisms), you can simply remove the ``get_all_members()`` method.  The default implementation on ``LazyObject`` will do the right thing."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:79
# d05e0883756041dea90cd8409151a90c
msgid "If you have more complex requirements for introspection, first rename the ``get_all_members()`` method to ``__dir__()``.  This is the standard method, from Python 2.6 onwards, for supporting introspection.  If you are require support for Python < 2.6, add the following code to the class::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:87
# 0508ccbe2dca4ff4a537acb13c0d572f
msgid "``__dict__`` on Model instances"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:92
# aeab48d8c6904c398bdd6c6f444957ac
msgid "In order to support multiple database configurations, Django 1.2 has added a ``_state`` attribute to object instances. This attribute will appear in ``__dict__`` for a model instance. If your code relies on iterating over __dict__ to obtain a list of fields, you must now filter the ``_state`` attribute of out ``__dict__``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:99
# e35a134a98fb4e1d94ce72b9691eb20b
msgid "``get_db_prep_*()`` methods on Field"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:101
# 511de2fd094b4bd48e1690010cd52e67
msgid "Prior to v1.2, a custom field had the option of defining several functions to support conversion of Python values into database-compatible values. A custom field might look something like::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:138
# 5a15d538f05741dcb82bad1a9bee0f04
msgid "These changes are required to support multiple databases: ``get_db_prep_*`` can no longer make any assumptions regarding the database for which it is preparing. The ``connection`` argument now provides the preparation methods with the specific connection for which the value is being prepared."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:144
# 2a5e5e63b87d4506906c412e8de8b78d
msgid "The two new methods exist to differentiate general data preparation requirements, and requirements that are database-specific. The ``prepared`` argument is used to indicate to the database preparation methods whether generic value preparation has been performed. If an unprepared (i.e., ``prepared=False``) value is provided to the ``get_db_prep_*()`` calls, they should invoke the corresponding ``get_prep_*()`` calls to perform generic data preparation."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:152
# 5756a03ce3da46b08c1f3176c1fac7fa
msgid "Conversion functions has been provided which will transparently convert functions adhering to the old prototype into functions compatible with the new prototype. However, this conversion function will be removed in Django 1.4, so you should upgrade your Field definitions to use the new prototype."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:158
# d6c684e9c5724cb3b485fc4b9cd63d4f
msgid "If your ``get_db_prep_*()`` methods made no use of the database connection, you should be able to upgrade by renaming ``get_db_prep_value()`` to ``get_prep_value()`` and ``get_db_prep_lookup()`` to ``get_prep_lookup()`. If you require database specific conversions, then you will need to provide an implementation ``get_db_prep_*`` that uses the ``connection`` argument to resolve database-specific values."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:169
# 19c98a1917054ad69f2e4899f654c885
msgid "Template tags that store rendering state on the node itself may experience problems if they are used with the new :ref:`cached template loader<template-loaders>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:173
# 384342570517476b80f785c4908c93e1
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:194
# c9092dff026b4af29e20cfbac5c0415e
msgid "CSRF response rewriting middleware"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:196
# 90ba4049adaa4b26a1b01fc930117212
msgid "``CsrfResponseMiddleware``, the middleware that automatically inserted CSRF tokens into POST forms in outgoing pages, has been deprecated in favor of a template tag method (see above), and will be removed completely in Django 1.4. ``CsrfMiddleware``, which includes the functionality of ``CsrfResponseMiddleware`` and ``CsrfViewMiddleware`` has likewise been deprecated."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:214
# b0adc94708d04efcaa63b4cf8e118207
msgid "The ``SMTPConnection`` class has been deprecated in favor of a generic Email backend API. Old code that explicitly instantiated an instance of an SMTPConnection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:223
# 743a03bcc3694be0800d01dd6e037ecc
msgid "should now call :meth:`~django.core.mail.get_connection()` to instantiate a generic email connection::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:250
# 1d313f58a7e742eb99db6f4eda3098fa
msgid "Prior to Django 1.1, Django used a number of settings to control access to a single database. Django 1.2 introduces support for multiple databases, and as a result, the way you define database settings has changed."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:254
# 27b182844e1d416f9bf696e7d55674d2
msgid "**Any existing Django settings file will continue to work as expected until Django 1.4.** Old-style database settings will be automatically translated to the new-style format."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:258
# 9d892a949419486981a1810461be2de5
msgid "In the old-style (pre 1.2) format, there were a number of ``DATABASE_`` settings at the top level of your settings file. For example::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:267
# 2da5ad9bc8aa4313941e28af5f6791cf
msgid "These settings are now contained inside a dictionary named :setting:`DATABASES`. Each item in the dictionary corresponds to a single database connection, with the name ``'default'`` describing the default database connection. The setting names have also been shortened to reflect the fact that they are stored in a dictionary. The sample settings given previously would now be stored using::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:316
# 4138d663d25b4c6eb1ca8d48a62cf612
msgid "To upgrade your code, you need to replace any instances of::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:320
# ecc40148cd8e49c7b5fc138fdf575078
msgid "with the following::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:331
# f0b07c23f16c44f9bd15ff8f70bd60a9
msgid "with::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:344
# d34e2e19e1a74bf8b2942c0160e7dac9
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()`` have been deprecated in favor of the appropriate calls to ``django.utils.formats.get_format()`` which is locale aware when :setting:`USE_L10N` is set to ``True``, and falls back to default settings if set to ``False``."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:350
# bc8ec16ea1224ad4aee509b189745f7c
msgid "To get the different date formats, instead of writing::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:355
# 3c1bc85347b64221b05c8aaaff21e07a
msgid "use::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:363
# 6180872a143b431594f5ffa800e5e555
msgid "or, when directly formatting a date value::"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:378
# cf270b366db74933b207592469aaadb5
msgid "What's new in Django 1.2 alpha 1"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:380
# 4d0e2cb2d5b6488b897cbf7c8bacf6ae
msgid "The following new features are present as of this alpha release; this release also marks the end of major feature development for the 1.2 release cycle. Some minor features will continue development until the 1.2 beta release, however."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:387
# 2deca005441b4301a30416901f77d479
msgid "CSRF support"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:389
# 2090b2a9686c47f1b5af8b98dbf899e1
msgid "Django now has much improved protection against :doc:`Cross-Site Request Forgery (CSRF) attacks</ref/contrib/csrf>`. This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser. A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:399
# 0bd6f940789a48a995fa0b6b70ec18f2
msgid "Email Backends"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:409
# 5c51d6e6a5cd43aa9f6b97ac7c9504ae
msgid "This also makes it easier to debug mail sending - Django ships with backend implementations that allow you to send email to a :ref:`file<topic-email-file-backend>`, to the :ref:`console<topic-email-console-backend>`, or to :ref:`memory<topic-email-memory-backend>` - you can even configure all email to be :ref:`thrown away<topic-email-dummy-backend>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:417
# 5208da03e6534d2bae1bb126e7f48379
msgid "Messages Framework"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:429
# 1c26f644fb714065b97ac195f7a90f16
msgid "Django 1.2 adds the ability to use :doc:`more than one database </topics/db/multi-db>` in your Django project. Queries can be issued at a specific database with the `using()` method on querysets; individual objects can be saved to a specific database by providing a ``using`` argument when you save the instance."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:436
# 083f9d999e724bcb9b3abc99845c2cf2
msgid "'Smart' if tag"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:438
# 401e6c5d38944e599478cc7809bb5290
msgid "The :ttag:`if` tag has been upgraded to be much more powerful.  First, support for comparison operators has been added. No longer will you have to type:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:447
# 09b08caf891d4b3790486b4d2262794c
msgid "...as you can now do:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:455
# 7edb82166f8f48a89ac8e8c88a226234
msgid "The operators supported are ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in``, all of which work like the Python operators, in addition to ``and``, ``or`` and ``not`` which were already supported."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:472
# 83286f33b65d40fc8a0818767c7dcece
msgid "In previous versions of Django, every time you rendered a template it would be reloaded from disk. In Django 1.2, you can use a :ref:`cached template loader <template-loaders>` to load templates once, then use the cached result for every subsequent render. This can lead to a significant performance improvement if your templates are broken into lots of smaller subtemplates (using the ``{% extends %}`` or ``{% include %}`` tags)."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:487
# 4d35495525574915b91607b50b279fe8
msgid "Fixtures can refer to remote objects using :ref:`topics-serialization-natural-keys`. This lookup scheme is an alternative to the normal primary-key based object references in a fixture, improving readability, and resolving problems referring to objects whose primary key value may not be predictable or known."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:496
# 5f410a0bda2f4bcb98008c4673d2f752
msgid "Models can now use a 64 bit :class:`~django.db.models.BigIntegerField` type."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:499
# 2b84fc5e96584b3e93eab33af9c16836
msgid "Fast Failure for Tests"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:501
# 3ead8a570ed8453aac872fce3f98b854
msgid "The :djadmin:`test` subcommand of ``django-admin.py``, and the ``runtests.py`` script used to run Django's own test suite, support a new ``--failfast`` option. When specified, this option causes the test runner to exit after encountering a failure instead of continuing with the test run.  In addition, the handling of ``Ctrl-C`` during a test run has been improved to trigger a graceful exit from the test run that reports details of the tests run before the interruption."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:511
# b683e033ef4a4bc390c3bc27c8ae69e9
msgid "Django's :doc:`internationalization framework </topics/i18n/index>` has been expanded by locale aware formatting and form processing. That means, if enabled, dates and numbers on templates will be displayed using the format specified for the current locale. Django will also use localized formats when parsing data in forms. See :ref:`Format localization <format-localization>` for more details."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:519
# e6d4097f86ab4d00b7051fb2647f1b08
msgid "Added ``readonly_fields`` to ``ModelAdmin``"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:521
# cb535df137894ec8978400302852b950
msgid ":attr:`django.contrib.admin.ModelAdmin.readonly_fields` has been added to enable non-editable fields in add/change pages for models and inlines. Field and calculated values can be displayed along side editable fields."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:528
# f47084ba53614c6e97a88e7968e99a22
msgid "You can now use the ``DJANGO_COLORS`` environment variable to modify or disable the colors used by ``django-admin.py`` to provide :ref:`syntax highlighting <syntax-coloring>`."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:534
#: ../../releases/1.2-beta-1.txt:120
#: ../../releases/1.2-rc-1.txt:52
# fc7283c235e04f77a7f32d1813157357
# 4b79cbb0812443628c39f1e4d40dc452
# d7159150312b432784ae7aac4d7e3694
msgid "The Django 1.2 roadmap"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:536
# 3aaca918f28c40b59cc5eb19b89a653a
msgid "Before the final Django 1.2 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:540
# c8f75032408043f89118d1e67265bfd4
msgid "Week of **January 26, 2010**: First Django 1.2 beta release. Final feature freeze for Django 1.2."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:543
#: ../../releases/1.2-beta-1.txt:126
# 5c5c6d6176264ae2817b54aeee3cda0f
# 62f46f7ddb214aec8958adeb81dc5d3c
msgid "Week of **March 2, 2010**: First Django 1.2 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:546
#: ../../releases/1.2-beta-1.txt:129
# 4a831cc72da145c8925efe3c64166718
# baeab182cec04b8a8a6120c6520516b5
msgid "Week of **March 9, 2010**: Django 1.2 final release."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:548
# 64073ed116914ec9923fa4788b04e5bc
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-alpha-1.txt:556
# 1bad06593bfa4b3692af2242322bb9f6
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:567
#: ../../releases/1.2-beta-1.txt:151
#: ../../releases/1.2-rc-1.txt:84
# 28837ac4c3054941a5233fd1d001be55
# b9bc737ca01046ca8f3e25048d4754ef
# e1f78283c92541c5a7e2a64489323523
msgid "Additionally, discussion of Django development, including progress toward the 1.2 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.2-alpha-1.txt:585
#: ../../releases/1.2-beta-1.txt:170
# c93ec6723d9d4ddc9e165cc7813751e6
# a80cfa05c1b744c59509823c40556d85
msgid "Development sprints for Django 1.2 will also be taking place at PyCon US 2010, on the dedicated sprint days (February 22 through 25), and anyone who wants to help out is welcome to join in, either in person at PyCon or virtually in the IRC channel or on the mailing list."
msgstr ""

#: ../../releases/1.2-beta-1.txt:3
# 68ace50541b84366a79c2175ac9b3686
msgid "Django 1.2 beta 1 release notes"
msgstr ""

#: ../../releases/1.2-beta-1.txt:5
# 47edd74c55da4c45b6de025b54347fd9
msgid "February 5, 2010"
msgstr ""

#: ../../releases/1.2-beta-1.txt:7
# 19a9b830003043ce95c4666c1d6d007c
msgid "Welcome to Django 1.2 beta 1!"
msgstr ""

#: ../../releases/1.2-beta-1.txt:9
# d05f624448ef403ea54abfe8d708b5b6
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.2, currently scheduled to take place in March 2010. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:19
# c71920d1d4ae4254b9200caf297564e2
msgid "This document covers changes since the Django 1.2 alpha release; the :doc:`1.2 alpha release notes </releases/1.2-alpha-1>` cover new and updated features in Django between 1.1 and 1.2 alpha."
msgstr ""

#: ../../releases/1.2-beta-1.txt:25
# 048bca9cf7894a059dccc1c085eee1c5
msgid "Deprecations and other changes in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:27
# 5683479960144b9aa186729d49708692
msgid "This beta release deprecates two portions of public API, and introduces a potentially backwards-incompatible change to another. Under :doc:`our API stability policy </misc/api-stability>`, deprecation proceeds over multiple release cycles: initially, the deprecated API will raise ``PendingDeprecationWarning``, followed by raising ``DeprecationWarning`` in the next release, and finally removal of the deprecated API in the release after that. APIs beginning the deprecation process in Django 1.2 will be removed in the Django 1.4 release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:39
# 6c462b41b8e644f78a5c973f12049435
msgid "Unit test runners"
msgstr ""

#: ../../releases/1.2-beta-1.txt:48
# 96c918e827cb4077bf959ad96790d000
msgid "Syndication feeds"
msgstr ""

#: ../../releases/1.2-beta-1.txt:50
# 84990c873cc74b61981237aff1ee17c9
msgid "The :class:`django.contrib.syndication.feeds.Feed` class is being replaced by the :class:`django.contrib.syndication.views.Feed` class. The old ``feeds.Feed`` class is deprecated. The new class has an almost identical API, but allows instances to be used as views."
msgstr ""

#: ../../releases/1.2-beta-1.txt:55
# dea558148b94426cb0e990e63b3838fd
msgid "Also, in accordance with `RSS best practices`_, RSS feeds will now include an ``atom:link`` element. You may need to update your tests to take this into account."
msgstr ""

#: ../../releases/1.2-beta-1.txt:68
# 37c81f815acb4a509f8870ce9a6b2cae
msgid "Due to cookie-handling bugs in Internet Explorer, Safari, and possibly other browsers, Django's encoding of cookie values was changed so that the characters comma (',') and semi-colon (';') are treated as non-safe characters, and are therefore encoded as ``\\054`` and ``\\073`` respectively. This could produce backwards incompatibilities if you are relying on the ability to set these characters directly in cookie values."
msgstr ""

#: ../../releases/1.2-beta-1.txt:78
# 18d7b60ee0154eb189e504cf15614719
msgid "What's new in 1.2 beta"
msgstr ""

#: ../../releases/1.2-beta-1.txt:80
# 0fa27d65c493449b976bf00d10d5cb68
msgid "This 1.2 beta release marks the final feature freeze for Django 1.2; while most feature development was completed for 1.2 alpha (which constituted a freeze on major features), a few other new features were added afterward and so are new as of 1.2 beta."
msgstr ""

#: ../../releases/1.2-beta-1.txt:89
# fdb72d7b89494e769ce7b43e39142fc3
msgid "A foundation for specifying permissions at the per-object level was added in Django 1.2 alpha but not documented with the alpha release."
msgstr ""

#: ../../releases/1.2-beta-1.txt:92
# fb5145b6374f4aaebc5e777945867c69
msgid "The default authentication backends shipped with Django do not currently make use of this, but third-party authentication backends are free to do so. See the :doc:`authentication docs </topics/auth>` for more information."
msgstr ""

#: ../../releases/1.2-beta-1.txt:101
# 38dff845a9a04f499e24506ecea5546a
msgid "If you provide a custom authentication backend with the attribute ``supports_anonymous_user`` set to ``True``, the ``AnonymousUser`` class will check the backend for permissions, just as the normal ``User`` does. This is intended to help centralize permission handling; apps can always delegate the question of whether something is allowed or not to the authorization/authentication system. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.2-beta-1.txt:111
# 39b41351f0c74c4e99946a55855acbec
msgid "``select_related()`` improvements"
msgstr ""

#: ../../releases/1.2-beta-1.txt:113
# ff2cac2c0b6b4deb888be7b6906bcb16
msgid "The ``select_related()`` method of ``QuerySet`` now accepts the ``related_name`` of a reverse one-to-one relation in the list of fields to select. One-to-one relations will not, however, be traversed by a depth-based ``select_related()`` call."
msgstr ""

#: ../../releases/1.2-beta-1.txt:122
# 8849de6c4d234379a8afb63d9a5f776a
msgid "Before the final Django 1.2 release, at least one additional preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.2-beta-1.txt:131
# 13338473c68b4cc6bba36bb0fb620cf9
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.2 release. Django 1.2 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.2-beta-1.txt:139
# 327bdbb8a80941a2ba854543533a9336
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2-rc-1.txt:3
# 308c090c5ba047b680f646ace3457ff1
msgid "Django 1.2 RC 1 release notes"
msgstr ""

#: ../../releases/1.2-rc-1.txt:6
# 481e06ee5d2341a88519c716b7c45f3d
msgid "May 5, 2010"
msgstr ""

#: ../../releases/1.2-rc-1.txt:8
# 1b5bf562698c4ae892dcc2516f844503
msgid "Welcome to the first Django 1.2 release candidate!"
msgstr ""

#: ../../releases/1.2-rc-1.txt:10
# ade4d91a42ba4b76840e6055579fcf8f
msgid "This is the third -- and likely last -- in a series of preview/development releases leading up to the eventual release of Django 1.2. This release is targeted primarily at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve any critical bugs prior to the final 1.2 release."
msgstr ""

#: ../../releases/1.2-rc-1.txt:20
# a8c7ab0a7c624dceaefbacc41c0a1f4c
msgid "Django has been feature frozen since the 1.2 beta release, so this release candidate contains no new features, only bugfixes; for a summary of features new to Django 1.2, consult the :doc:`1.2 alpha </releases/1.2-alpha-1>` and :doc:`1.2 beta </releases/1.2-beta-1>` release notes."
msgstr ""

#: ../../releases/1.2-rc-1.txt:54
# fcb8d180ccdc46b19991e876724553bc
msgid "As of this release candidate, Django 1.2 is in both feature freeze and \"string freeze\" -- all strings marked for translation in the Django codebase will retain their current form in the final Django 1.2 release. Only critical release-blocking bugs, documentation and updated translation files will receive attention between now and the final 1.2 release. Note that Django's localization infrastructure has been expanded for 1.2, and translation packages should now include a ``formats.py`` file containing data for localized formatting of numbers and dates."
msgstr ""

#: ../../releases/1.2-rc-1.txt:64
# f9675031d20146f8973a2395c36499f4
msgid "If no critical bugs are discovered, Django 1.2 will be released approximately one week after this release candidate, on or about May 12, 2010."
msgstr ""

#: ../../releases/1.2-rc-1.txt:72
# ae09609fe2d245c6a61969b90e3c1449
msgid "In order to provide a high-quality 1.2 release, we need your help. Although this release candidate is, again, *not* intended for production use, you can help the Django team by trying out this release candidate in a safe testing environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.2.1.txt:3
# fe4dacdc6d5e4f1cacd90089b7599999
msgid "Django 1.2.1 release notes"
msgstr ""

#: ../../releases/1.2.1.txt:5
# 5ffc7f97909a4392b5ef5e46461ce5dd
msgid "Django 1.2.1 was released almost immediately after 1.2.0 to correct two small bugs: one was in the documentation packaging script, the other was a bug_ that affected datetime form field widgets when localisation was enabled."
msgstr ""

#: ../../releases/1.2.2.txt:3
# 31e2bdbfedc64b3b88873c8d79dde342
msgid "Django 1.2.2 release notes"
msgstr ""

#: ../../releases/1.2.2.txt:5
# cf1d187c33e64586a3fea1a8d30b955a
msgid "Welcome to Django 1.2.2!"
msgstr ""

#: ../../releases/1.2.2.txt:7
# 47b520259231486da176ae16fe3220ab
msgid "This is the second \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.2.txt:10
# 25a73d52c1a74741a957fc095853e8f0
msgid "Django 1.2.2 maintains backwards compatibility with Django 1.2.1, but contain a number of fixes and other improvements. Django 1.2.2 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.2.txt:15
#: ../../releases/1.2.4.txt:15
#: ../../releases/1.2.5.txt:15
# 680c89eec2994d108eab88984c11db48
# b01ba86ee73245c792a12e1f1c17940f
# 90dd2e42f40b4d7ebcc6724085f7ca0c
msgid "For full details on the new features, backwards incompatibilities, and deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

#: ../../releases/1.2.2.txt:21
# 3137113a72a34964be0daa1e43e21e2d
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.2, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.2.txt:24
# 957f463550c84e43ba569b8ab6c651c0
msgid "In order to test a bug fix that forms part of the 1.2.2 release, it was necessary to add a feature -- the ``enforce_csrf_checks`` flag -- to the :mod:`test client <django.test.client>`. This flag forces the test client to perform full CSRF checks on forms. The default behavior of the test client hasn't changed, but if you want to do CSRF checks with the test client, it is now possible to do so."
msgstr ""

#: ../../releases/1.2.3.txt:3
# 6c321c46f12f4413b500e4bd1a26c10b
msgid "Django 1.2.3 release notes"
msgstr ""

#: ../../releases/1.2.3.txt:5
# 3ed3b8bd145c4bd38cec69d303cd9fbc
msgid "Django 1.2.3 fixed a couple of release problems in the 1.2.2 release and was released two days after 1.2.2."
msgstr ""

#: ../../releases/1.2.3.txt:8
# e02642b74d6e4c79b5b4abec9030de9e
msgid "This release corrects the following problems:"
msgstr ""

#: ../../releases/1.2.3.txt:10
# 34eb5f66493d4426904589cc4dbf2609
msgid "The patch_ applied for the security issue covered in Django 1.2.2 caused issues with non-ASCII responses using CSRF tokens."
msgstr ""

#: ../../releases/1.2.3.txt:13
# 3c3b29ff9c184b69afc733c613579c85
msgid "The patch also caused issues with some forms, most notably the user-editing forms in the Django administrative interface."
msgstr ""

#: ../../releases/1.2.3.txt:16
# 693d1b27f4ef477da508b471880f686c
msgid "The packaging manifest did not contain the full list of required files."
msgstr ""

#: ../../releases/1.2.4.txt:3
# a41bbc1e83f340a69bd78bb37b791c03
msgid "Django 1.2.4 release notes"
msgstr ""

#: ../../releases/1.2.4.txt:5
# bab86431ab2f4a3a9aa78eec8f2a9225
msgid "Welcome to Django 1.2.4!"
msgstr ""

#: ../../releases/1.2.4.txt:7
# 86a4c336b0614889935bd80198638113
msgid "This is the fourth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.4.txt:10
# 862c9e87ea0146bb998cb855bcb21aa7
msgid "With one exception, Django 1.2.4 maintains backwards compatibility with Django 1.2.3. It also contains a number of fixes and other improvements. Django 1.2.4 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.4.txt:55
# f9bad978415a4ffa8b8d67ee7cfc0ce5
msgid "Ordinarily, a point release would not include new features, but in the case of Django 1.2.4, we have made an exception to this rule."
msgstr ""

#: ../../releases/1.2.4.txt:58
# d252c730da724985a9045537e237414c
msgid "One of the bugs fixed in Django 1.2.4 involves a set of circumstances whereby a running a test suite on a multiple database configuration could cause the original source database (i.e., the actual production database) to be dropped, causing catastrophic loss of data. In order to provide a fix for this problem, it was necessary to introduce a new setting -- :setting:`TEST_DEPENDENCIES` -- that allows you to define any creation order dependencies in your database configuration."
msgstr ""

#: ../../releases/1.2.4.txt:67
# 32dc668772aa4c6b8a20ef6ddb693510
msgid "Most users -- even users with multiple-database configurations -- need not be concerned about the data loss bug, or the manual configuration of :setting:`TEST_DEPENDENCIES`. See the `original problem report`_ documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../releases/1.2.4.txt:78
# d5721c1567e24baa9c1c0577ab88853b
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, :func:`django.contrib.gis.tests.run_gis_tests`, was finally deprecated in favor of a class-based test runner, :class:`django.contrib.gis.tests.GeoDjangoTestSuiteRunner`, added in this release."
msgstr ""

#: ../../releases/1.2.4.txt:84
# 5ff9aee247ba4ea0822b03da921c93fe
msgid "In addition, the GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` and using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.2.5.txt:3
# ea12a4b8459d401891ae85e52af801f4
msgid "Django 1.2.5 release notes"
msgstr ""

#: ../../releases/1.2.5.txt:5
# a4a18d5e11bd4e7e924e26060c8fdf75
msgid "Welcome to Django 1.2.5!"
msgstr ""

#: ../../releases/1.2.5.txt:7
# c7e149d54a4540269b12d1822c68ecff
msgid "This is the fifth \"bugfix\" release in the Django 1.2 series, improving the stability and performance of the Django 1.2 codebase."
msgstr ""

#: ../../releases/1.2.5.txt:10
# 3c8c9399628e45d5906b1b4f76685e60
msgid "With four exceptions, Django 1.2.5 maintains backwards compatibility with Django 1.2.4. It also contains a number of fixes and other improvements. Django 1.2.5 is a recommended upgrade for any development or deployment currently using or targeting Django 1.2."
msgstr ""

#: ../../releases/1.2.5.txt:71
# 3dc66ab12d39497a8a59d3339826de4f
msgid "FileField no longer deletes files"
msgstr ""

#: ../../releases/1.2.5.txt:73
# ee8939f9679740459266764f60f5af49
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several potentially serious data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.2.5, :class:`~django.db.models.FileField` will never delete files from the backend storage. If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.2.5.txt:85
#: ../../releases/1.3.txt:537
# ced23182ccb64f29a23d81baee7b03ef
# 9fd0185994684a3ba2bd8ff5c29db389
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

#: ../../releases/1.2.5.txt:87
#: ../../releases/1.3.txt:539
# cadbf54f8b634c359bbcc5650aa4e039
# d04e70fb5a02423092b7563dc96f1495
msgid "Django provides a custom SQL hooks as a way to inject hand-crafted SQL into the database synchronization process. One of the possible uses for this custom SQL is to insert data into your database. If your custom SQL contains ``INSERT`` statements, those insertions will be performed every time your database is synchronized. This includes the synchronization of any test databases that are created when you run a test suite."
msgstr ""

#: ../../releases/1.2.5.txt:95
#: ../../releases/1.3.txt:547
# 99712b4dcf214062bc6c167c42ab2e8e
# 81a1b990cae64e9ebaa42b3050c1b4cc
msgid "However, in the process of testing the Django 1.3, it was discovered that this feature has never completely worked as advertised. When using database backends that don't support transactions, or when using a TransactionTestCase, data that has been inserted using custom SQL will not be visible during the testing process."
msgstr ""

#: ../../releases/1.2.5.txt:101
#: ../../releases/1.3.txt:553
# ff0d9ae799fc43a89f4251e590af5ed5
# e0a9ae22dc2740df86893c7435b6ec9d
msgid "Unfortunately, there was no way to rectify this problem without introducing a backwards incompatibility. Rather than leave SQL-inserted initial data in an uncertain state, Django now enforces the policy that data inserted by custom SQL will *not* be visible during testing."
msgstr ""

#: ../../releases/1.2.5.txt:107
#: ../../releases/1.3.txt:559
# 462542a723de4e50b2a177bcc6a9054f
# 090ecce2f0fb425ea3223839d12273b5
msgid "This change only affects the testing process. You can still use custom SQL to load data into your production database as part of the syncdb process. If you require data to exist during test conditions, you should either insert it using :ref:`test fixtures <topics-testing-fixtures>`, or using the ``setUp()`` method of your test case."
msgstr ""

#: ../../releases/1.2.5.txt:115
# cb63be7bd984473da1e0d22832765e4d
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

#: ../../releases/1.2.5.txt:117
# 6db4206954544faa95a24429bfdd2c36
msgid "Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to cope with a security issue (changeset `[15033] <https://code.djangoproject.com/changeset/15033>`_). Although this method was never documented, it seems some people have overridden ``lookup_allowed``, especially to cope with regressions introduced by that changeset. While the method is still undocumented and not marked as stable, it may be helpful to know that the signature of this function has changed."
msgstr ""

#: ../../releases/1.2.6.txt:3
# b12100aaddb64d57aea498e5c6f74660
msgid "Django 1.2.6 release notes"
msgstr ""

#: ../../releases/1.2.6.txt:5
#: ../../releases/1.3.1.txt:5
# 12022c5e38cd44708a73ffa894a14605
# 47c6864840d340ee8a0a4c1c505c9ddf
msgid "*September 9, 2011*"
msgstr ""

#: ../../releases/1.2.6.txt:7
# dcd180a330d347fe8a7e15f221356f18
msgid "Welcome to Django 1.2.6!"
msgstr ""

#: ../../releases/1.2.6.txt:9
# 50942fa66a22447d99677167c1fcc49c
msgid "This is the sixth bugfix/security release in the Django 1.2 series, fixing several security issues present in Django 1.2.5.  Django 1.2.6 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.6.txt:13
#: ../../releases/1.3.1.txt:13
#: ../../releases/1.3.2.txt:11
#: ../../releases/1.4.1.txt:11
# f5e276ad3ab046bf9b7e1034929ebc5d
# 5ec6ee5f9ed54540993c0de961bbb541
# de4183c4a47c4e349a7d18706c9361de
# 1c22a59bcadf43a2a250aec8ca41c31d
msgid "For a full list of issues addressed in this release, see the `security advisory`_."
msgstr ""

#: ../../releases/1.2.7.txt:3
# 63f10109bea245f4b003094349adeaa1
msgid "Django 1.2.7 release notes"
msgstr ""

#: ../../releases/1.2.7.txt:5
# 5568eef0a4d843aa82240282d790665e
msgid "*September 10, 2011*"
msgstr ""

#: ../../releases/1.2.7.txt:7
# 88c8d1e286d846e39682261958b4e13b
msgid "Welcome to Django 1.2.7!"
msgstr ""

#: ../../releases/1.2.7.txt:9
# 6688b34b1a184353b151aa4d351dcb50
msgid "This is the seventh bugfix/security release in the Django 1.2 series. It replaces Django 1.2.6 due to problems with the 1.2.6 release tarball. Django 1.2.7 is a recommended upgrade for all users of any Django release in the 1.2.X series."
msgstr ""

#: ../../releases/1.2.7.txt:14
# 5b1753e6e6e94c3f8971cc6560617585
msgid "For more information, see the `release advisory`_."
msgstr ""

#: ../../releases/1.3.txt:3
# cfac45974e6349feb790dd9bc8c2e436
msgid "Django 1.3 release notes"
msgstr ""

#: ../../releases/1.3.txt:5
# 15329b84874e4734bf06a63ca9aabb6d
msgid "*March 23, 2011*"
msgstr ""

#: ../../releases/1.3.txt:7
# 06960c89ee54463c9cb2b784ba102f62
msgid "Welcome to Django 1.3!"
msgstr ""

#: ../../releases/1.3.txt:9
# 3e92dde4e3504dc9aa24ca1634f228e8
msgid "Nearly a year in the making, Django 1.3 includes quite a few `new features`_ and plenty of bug fixes and improvements to existing features. These release notes cover the new features in 1.3, as well as some `backwards-incompatible changes`_ you'll want to be aware of when upgrading from Django 1.2 or older versions."
msgstr ""

#: ../../releases/1.3.txt:18
# 9be3f4c2cf504ed28ffa35ba2013219f
msgid "Django 1.3's focus has mostly been on resolving smaller, long-standing feature requests, but that hasn't prevented a few fairly significant new features from landing, including:"
msgstr ""

#: ../../releases/1.3.txt:22
# faa29fc076654ca583365332e3127dc1
msgid "A framework for writing `class-based views`_."
msgstr ""

#: ../../releases/1.3.txt:24
# ec46c70af2354fa8a5458a681a36bdde
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

#: ../../releases/1.3.txt:26
# a5ec7b6604654f8db69fe32d91e5c502
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

#: ../../releases/1.3.txt:28
# 55878e3648be4bafaaa177a4102666d8
msgid "Django's testing framework now supports (and ships with a copy of) `the unittest2 library`_."
msgstr ""

#: ../../releases/1.3.txt:31
# 31a2f62e2bea4e0689f15236e21febee
msgid "There's plenty more, of course; see the coverage of `new features`_ below for a full rundown and details."
msgstr ""

#: ../../releases/1.3.txt:34
# b893be40d19041369a66064a2f1a042f
msgid "Wherever possible, of course, new features are introduced in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. As a result of this policy, Django 1.3 `begins the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.3.txt:39
# 3f16572552864fa6bfed25d8fbed7683
msgid "Some changes, unfortunately, are genuinely backwards-incompatible; in most cases these are due to security issues or bugs which simply couldn't be fixed any other way. Django 1.3 includes a few of these, and descriptions of them -- along with the (minor) modifications you'll need to make to handle them -- are documented in the list of `backwards-incompatible changes`_ below."
msgstr ""

#: ../../releases/1.3.txt:56
# 9307df53977844b581a5a97b4e90e410
msgid "The release of Django 1.2 was notable for having the first shift in Django's Python compatibility policy; prior to Django 1.2, Django supported any 2.x version of Python from 2.3 up. As of Django 1.2, the minimum requirement was raised to Python 2.4."
msgstr ""

#: ../../releases/1.3.txt:61
# 85ea093ae4424f1d8e9d1d4b9da2517f
msgid "Django 1.3 continues to support Python 2.4, but will be the final Django release series to do so; beginning with Django 1.4, the minimum supported Python version will be 2.5. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published shortly after the release of Django 1.3."
msgstr ""

#: ../../releases/1.3.txt:68
# fef6a560d40043f3807cbd9bc7743cc7
msgid "What's new in Django 1.3"
msgstr ""

#: ../../releases/1.3.txt:71
#: ../../releases/1.3-alpha-1.txt:30
# dbcf8726d8fb4ea5b4dbc9530267bf38
# 1876ab217a624446b00090b60b2323bc
msgid "Class-based views"
msgstr ""

#: ../../releases/1.3.txt:73
#: ../../releases/1.3-alpha-1.txt:32
# 127368d38bb34dd484c7a975fb0abfa9
# 355bb4bd692846f8847156d5e85f3c63
msgid "Django 1.3 adds a framework that allows you to use a class as a view. This means you can compose a view out of a collection of methods that can be subclassed and overridden to provide common views of data without having to write too much code."
msgstr ""

#: ../../releases/1.3.txt:78
#: ../../releases/1.3-alpha-1.txt:37
# a11f9272b57844c3b529d39596a60db3
# 6b1d235b00d540eebb834ab1bd1e6bf5
msgid "Analogs of all the old function-based generic views have been provided, along with a completely generic view base class that can be used as the basis for reusable applications that can be easily extended."
msgstr ""

#: ../../releases/1.3.txt:83
# 651f832d4c0641a693160e402b92d5f9
msgid "See :doc:`the documentation on class-based generic views</topics/class-based-views/index>` for more details. There is also a document to help you `convert your function-based generic views to class-based views <https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../releases/1.3.txt:89
#: ../../releases/1.3-alpha-1.txt:47
# 3301e14f8d864743b4e3d7cff624e2d9
# 6834b0b442e14d4c9b10d4097c1be917
msgid "Logging"
msgstr ""

#: ../../releases/1.3.txt:91
# 8314422cf56a46c1932ec968ee84b6d4
msgid "Django 1.3 adds framework-level support for Python's ``logging`` module.  This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3.txt:100
#: ../../releases/1.3-alpha-1.txt:58
# f2df48ef5736434893da51d7e45600c3
# 4365508a85f449c89dc7581dffe9a2ee
msgid "Extended static files handling"
msgstr ""

#: ../../releases/1.3.txt:102
# e7fb9bd17dc94c75b2d39ccbf2da6533
msgid "Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3.txt:107
# 9adf5221c9d1494281f827c09a1e5e27
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files. Static assets should now go in ``static/`` subdirectories of your apps or in other static assets directories listed in :setting:`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

#: ../../releases/1.3.txt:116
#: ../../releases/1.3-alpha-1.txt:74
# ac18ec4a8cc74d7695ac533df85a025e
# 6ad7bf597db14ed3be7d4ff7cf9db2c3
msgid "See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` for more details or learn how to :doc:`manage static files </howto/static-files>`."
msgstr ""

#: ../../releases/1.3.txt:121
# af6825833c4e488b8d5db3a4ae9d2014
msgid "unittest2 support"
msgstr ""

#: ../../releases/1.3.txt:123
# 29bdc3dbf4684584a1af0516c4a3dbd0
msgid "Python 2.7 introduced some major changes to the ``unittest`` library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3.txt:129
# da6ad7a80c3347eea5656b7d98c5a0f0
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed ``unittest2`` locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3.txt:135
# bea3d56b49a44c5cbb8f43cf69b8f251
msgid "To take advantage of this alias, simply use::"
msgstr ""

#: ../../releases/1.3.txt:139
#: ../../releases/1.3-alpha-1.txt:97
# 810623e7b34340d1bd10151670f77ce6
# a75b8a24eeb54d0ab0ee947fb3cbc3a5
msgid "wherever you would have historically used::"
msgstr ""

#: ../../releases/1.3.txt:143
# 03e8df29926c426a89a3631cd74ffe21
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3.txt:149
#: ../../releases/1.3-alpha-1.txt:107
# 9d0bcacb352d4a57afc753024db2b61f
# 263e77b70298439096c49e764559e553
msgid "Transaction context managers"
msgstr ""

#: ../../releases/1.3.txt:151
#: ../../releases/1.3-alpha-1.txt:109
# cd19e001c8bd435a839da2ac38bc6108
# 34d8a97e304842169919f38e74644093
msgid "Users of Python 2.5 and above may now use :ref:`transaction management functions <transaction-management-functions>` as `context managers`_. For example::"
msgstr ""

#: ../../releases/1.3.txt:159
#: ../../releases/1.3-alpha-1.txt:117
# 6758c4d17da94db8bf4e9625f1511a97
# b456b522a99b42c4802406a7df667fff
msgid "For more information, see :ref:`transaction-management-functions`."
msgstr ""

#: ../../releases/1.3.txt:162
#: ../../releases/1.3-alpha-1.txt:120
# fe1bb001afa6408b87b5441f3acac43b
# 8444f801d8814ff88d7194bb532d3746
msgid "Configurable delete-cascade"
msgstr ""

#: ../../releases/1.3.txt:164
#: ../../releases/1.3-alpha-1.txt:122
# 691c7d4ee03e4442b564f38eb9e06df4
# 240ebd688e4d400eabb1dec3284a32e3
msgid ":class:`~django.db.models.ForeignKey` and :class:`~django.db.models.OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize behavior when the referenced object is deleted. Previously, deletes were always cascaded; available alternatives now include set null, set default, set to any value, protect, or do nothing."
msgstr ""

#: ../../releases/1.3.txt:171
#: ../../releases/1.3-alpha-1.txt:129
# bf2617b96bef426db1bf36ad8c3a7863
# 67949af9d43c4a1f966653f549b781e2
msgid "For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` documentation."
msgstr ""

#: ../../releases/1.3.txt:175
# 3f2eff1943bd4b67acb239953c4d011b
msgid "Contextual markers and comments for translatable strings"
msgstr ""

#: ../../releases/1.3.txt:177
#: ../../releases/1.3-alpha-1.txt:135
# 098c38fec0d44129b7182f7cd0ed64e4
# a8fe9b48c78044be9b68fb28c8138811
msgid "For translation strings with ambiguous meaning, you can now use the ``pgettext`` function to specify the context of the string."
msgstr ""

#: ../../releases/1.3.txt:180
# a3415d70e2be41339744042813ca362c
msgid "And if you just want to add some information for translators, you can also add special translator comments in the source."
msgstr ""

#: ../../releases/1.3.txt:183
# 503de81c2b7047919012bf53f74051c2
msgid "For more information, see :ref:`contextual-markers` and :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3.txt:187
# 8a1ca28bf22247c48a659c04f5acc21c
msgid "Improvements to built-in template tags"
msgstr ""

#: ../../releases/1.3.txt:189
# 887f8fd470d04c50bbe32359b41b2a23
msgid "A number of improvements have been made to Django's built-in template tags:"
msgstr ""

#: ../../releases/1.3.txt:191
# 5e2a33e7563c47b58c016671d31e8a84
msgid "The :ttag:`include` tag now accepts a ``with`` option, allowing you to specify context variables to the included template"
msgstr ""

#: ../../releases/1.3.txt:194
# ce052dd1c023449e9c9d114832944835
msgid "The :ttag:`include` tag now accepts an ``only`` option, allowing you to exclude the current context from the included context"
msgstr ""

#: ../../releases/1.3.txt:197
# 1906ef8b8f5c41699ee6f26e8ead707b
msgid "The :ttag:`with` tag now allows you to define multiple context variables in a single :ttag:`with` block."
msgstr ""

#: ../../releases/1.3.txt:200
# 484b699ab80c44178bbdeac19288a09c
msgid "The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a single tag or filter from a library."
msgstr ""

#: ../../releases/1.3.txt:204
# 9a5669c6e89c40fea493d03872945f38
msgid "TemplateResponse"
msgstr ""

#: ../../releases/1.3.txt:206
# 8ff94e53c2f24725a030b321bd9e45c1
msgid "It can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../releases/1.3.txt:211
# 1d83c75b6dc344b8a67670a0e4d398ac
msgid "However, you can't (easily) modify the content of a basic :class:`~django.http.HttpResponse` after it has been constructed. To overcome this limitation, Django 1.3 adds a new :class:`~django.template.response.TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` objects, :class:`~django.template.response.TemplateResponse` objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../releases/1.3.txt:221
# 3a1927b88d234a5188663c076dcdd570
msgid "For more details, see the :doc:`documentation </ref/template-response>` on the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

#: ../../releases/1.3.txt:225
# ff131208ed624d4ebdf65d2a141c8295
msgid "Caching changes"
msgstr ""

#: ../../releases/1.3.txt:227
# f8160e74a97940af8aa24a80645aec36
msgid "Django 1.3 sees the introduction of several improvements to the Django's caching infrastructure."
msgstr ""

#: ../../releases/1.3.txt:230
# 4b340146fff74532b28752b911d6cf1a
msgid "Firstly, Django now supports multiple named caches. In the same way that Django 1.2 introduced support for multiple database connections, Django 1.3 allows you to use the new :setting:`CACHES` setting to define multiple named cache connections."
msgstr ""

#: ../../releases/1.3.txt:235
# 6ddd32750c074a34999613de323aeeb5
msgid "Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing <cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` have been added to the cache API."
msgstr ""

#: ../../releases/1.3.txt:239
# f743850aa506453486e0e1004d569da9
msgid "Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to take the request query string into account on ``GET`` requests."
msgstr ""

#: ../../releases/1.3.txt:243
# a355b208a7d64dc29319240b364e0a69
msgid "Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

#: ../../releases/1.3.txt:246
# ebe9a8bc5cab4ce5a0b46b2b332e501a
msgid "For more details, see the :doc:`documentation on caching in Django</topics/cache>`."
msgstr ""

#: ../../releases/1.3.txt:252
#: ../../releases/1.3-beta-1.txt:59
# af95baed7160459cb134921a83aced98
# d3030dec509945f3bcf2c7e52b206970
msgid "Permissions for inactive users"
msgstr ""

#: ../../releases/1.3.txt:254
# 78a14fba9e184df3b6fd3f1ea47216d1
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive ``User`` instance will check the backend for permissions.  This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.3.txt:263
# 945cdb8651f44c318b490868252972bf
msgid "The GeoDjango test suite is now included when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../releases/1.3.txt:268
# b7840d663db04bcf8452a95bb3ff9a42
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

#: ../../releases/1.3.txt:270
# a25716ca5fb444be8bd9d046af1fe1eb
msgid "Previously, the :setting:`MEDIA_URL` setting only required a trailing slash if it contained a suffix beyond the domain name."
msgstr ""

#: ../../releases/1.3.txt:273
# edcd4dda5a5a46dc80ecd4217e87b748
msgid "A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :setting:`STATIC_URL` setting as long as it is not blank. This ensures there is a consistent way to combine paths in templates."
msgstr ""

#: ../../releases/1.3.txt:277
# 08a82cc0148b459fa21e6e25e1529bfe
msgid "Project settings which provide either of both settings without a trailing slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

#: ../../releases/1.3.txt:280
# 37af4301004a4fe0a8fd7670f2d6f913
msgid "In Django 1.4 this same condition will raise ``DeprecationWarning``, and in Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

#: ../../releases/1.3.txt:284
#: ../../releases/1.3-alpha-1.txt:141
# d0ef6c7013da42c7aa71fb328649a12d
# f03abe4c3c7f4bc6b78e0a286f6f955a
msgid "Everything else"
msgstr ""

#: ../../releases/1.3.txt:286
#: ../../releases/1.3-alpha-1.txt:143
# 2fcab113d4ec4ca7b634a0be8a6f75b7
# d0048121062e436fa1f0b1cf02c0d867
msgid "Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items to Django, like multiple-database support, model validation, and a session-based messages framework. However, this focus on big features came at the cost of lots of smaller features."
msgstr ""

#: ../../releases/1.3.txt:292
#: ../../releases/1.3-alpha-1.txt:149
# eb8e46a2104b44f39b638b8066ba99c5
# 0498c40395c5443d897b3fbb2dd1644f
msgid "To compensate for this, the focus of the Django 1.3 development process has been on adding lots of smaller, long standing feature requests. These include:"
msgstr ""

#: ../../releases/1.3.txt:296
# cf2fe1febb8648189cfdd52190d00c91
msgid "Improved tools for accessing and manipulating the current :class:`~django.contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/sites>`."
msgstr ""

#: ../../releases/1.3.txt:300
#: ../../releases/1.3-alpha-1.txt:156
# 6a9e4cde812c498498a05924d5ca6b88
# c4060c901c2e4156918848617d6859bd
msgid "A :class:`~django.test.client.RequestFactory` for mocking requests in tests."
msgstr ""

#: ../../releases/1.3.txt:303
# 281e33d5ae104a5882c3c23b45ba6929
msgid "A new test assertion -- :meth:`~django.test.TestCase.assertNumQueries` -- making it easier to test the database activity associated with a view."
msgstr ""

#: ../../releases/1.3.txt:307
# 495fbee220dc4b03af2851a424703f4c
msgid "Support for lookups spanning relations in admin's :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.3.txt:310
# 25b88788f82247d08a9127c5c112b85c
msgid "Support for HTTPOnly_ cookies."
msgstr ""

#: ../../releases/1.3.txt:312
# c76f602c10f04af2ad000da57473fc8e
msgid ":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail.mail_managers()` now support easily attaching HTML content to messages."
msgstr ""

#: ../../releases/1.3.txt:316
# 020de263f725433f827c5788a26d4490
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

#: ../../releases/1.3.txt:318
# 7da2b51581d04ca292b252aa7973407c
msgid "Error emails now include more of the detail and formatting of the debug server error page."
msgstr ""

#: ../../releases/1.3.txt:321
# 1e580762a5424448a3e9533d164429ad
msgid ":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` argument, making it easier to write simple template tags that require access to template context."
msgstr ""

#: ../../releases/1.3.txt:325
# 865baa7c172b45e59fab3ccc51e09d40
msgid "A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to :meth:`~django.shortcuts.render_to_response()` providing a :class:`~django.template.RequestContext` by default."
msgstr ""

#: ../../releases/1.3.txt:329
# 860c2a6ad6f04cf094c961c32e67aa25
msgid "Support for combining :ref:`F() expressions <query-expressions>` with timedelta values when retrieving or updating database values."
msgstr ""

#: ../../releases/1.3.txt:337
# f6e541754b4f4459a49858d23128ed3b
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

#: ../../releases/1.3.txt:340
# d51aadd62c454c469d58c9c2583fbcb8
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

#: ../../releases/1.3.txt:342
# bad9621b290645988fe2e009a9f947b0
msgid "Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX requests from CSRF verification; due to `security issues`_ reported to us, however, *all* requests are now subjected to CSRF verification. Consult :doc:`the Django CSRF documentation </ref/contrib/csrf>` for details on how to handle CSRF verification in AJAX requests."
msgstr ""

#: ../../releases/1.3.txt:354
# 2d8f1a8d33394ed8af64c998ee54bdff
msgid "Prior to Django 1.2.5, the Django administrative interface allowed filtering on any model field or relation -- not just those specified in ``list_filter`` -- via query string manipulation. Due to security issues reported to us, however, query string lookup arguments in the admin must be for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

#: ../../releases/1.3.txt:362
# 52ea52bdecb440ba966293127f908cbc
msgid "Deleting a model doesn't delete associated files"
msgstr ""

#: ../../releases/1.3.txt:364
# 068935fc2a1648d096727c118158abb0
msgid "In earlier Django versions, when a model instance containing a :class:`~django.db.models.FileField` was deleted, :class:`~django.db.models.FileField` took it upon itself to also delete the file from the backend storage. This opened the door to several data-loss scenarios, including rolled-back transactions and fields on different models referencing the same file. In Django 1.3, when a model is deleted the :class:`~django.db.models.FileField`'s :func:`~django.db.models.FileField.delete` method won't be called.  If you need cleanup of orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../releases/1.3.txt:377
#: ../../releases/1.3-alpha-1.txt:170
# 18d8990119e948d39f5c162d4310d3d4
# fbc3dae8952b4aeeb6df263d6efc6a84
msgid "PasswordInput default rendering behavior"
msgstr ""

#: ../../releases/1.3.txt:379
#: ../../releases/1.3-alpha-1.txt:172
# 820c2ecccdbc4df1866aa68e19902e83
# c1b92e13ddf641ad9c45f30eae472af1
msgid "The :class:`~django.forms.PasswordInput` form widget, intended for use with form fields which represent passwords, accepts a boolean keyword argument ``render_value`` indicating whether to send its data back to the browser when displaying a submitted form with errors. Prior to Django 1.3, this argument defaulted to ``True``, meaning that the submitted password would be sent back to the browser as part of the form. Developers who wished to add a bit of additional security by excluding that value from the redisplayed form could instantiate a :class:`~django.forms.PasswordInput` passing ``render_value=False`` ."
msgstr ""

#: ../../releases/1.3.txt:389
#: ../../releases/1.3-alpha-1.txt:182
# 3feb0c01865649b89fae8cfcf172a97b
# 80fbe9d1483c4b49aa23b1193fe2b91b
msgid "Due to the sensitive nature of passwords, however, Django 1.3 takes this step automatically; the default value of ``render_value`` is now ``False``, and developers who want the password value returned to the browser on a submission with errors (the previous behavior) must now explicitly indicate this. For example::"
msgstr ""

#: ../../releases/1.3.txt:400
#: ../../releases/1.3-alpha-1.txt:194
# 69e42835145147f59561f0b785695abf
# 410287b5a33b426eb4387ecf3b0ba788
msgid "Clearable default widget for FileField"
msgstr ""

#: ../../releases/1.3.txt:402
# 0fb2c040faf34bce9f3fad03fedbff50
msgid "Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form widget in addition to :class:`~django.forms.FileInput`. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3.txt:408
#: ../../releases/1.3-alpha-1.txt:201
# 631588bdc19241aebc0b892cf3458976
# f6654920f0ae4facac5d0a4d3271b12a
msgid "``ClearableFileInput`` is now the default widget for a ``FileField``, so existing forms including ``FileField`` without assigning a custom widget will need to account for the possible extra checkbox in the rendered form output."
msgstr ""

#: ../../releases/1.3.txt:412
#: ../../releases/1.3-alpha-1.txt:205
# 8d0cd9fd3b6b453bab0c1176307b3cce
# 82798c219fac4d289b07d412b48bcc35
msgid "To return to the previous rendering (without the ability to clear the ``FileField``), use the ``FileInput`` widget in place of ``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical ``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

#: ../../releases/1.3.txt:426
#: ../../releases/1.3-alpha-1.txt:219
# 3c57fba8d681438cb9b1d30d18936ce7
# 49dc6c751e734f35b8ea8f22ffe6345b
msgid "New index on database session table"
msgstr ""

#: ../../releases/1.3.txt:428
#: ../../releases/1.3-alpha-1.txt:221
# 1b02fe7fc3ea4012aa02a0b63c792b51
# 7ccc1f4d5d3149e39c93b29fa026749f
msgid "Prior to Django 1.3, the database table used by the database backend for the :doc:`sessions </topics/http/sessions>` app had no index on the ``expire_date`` column. As a result, date-based queries on the session table -- such as the query that is needed to purge old sessions -- would be very slow if there were lots of sessions."
msgstr ""

#: ../../releases/1.3.txt:434
#: ../../releases/1.3-alpha-1.txt:227
# 28a5cc032d0d4af28907bd178622d8c7
# 07c1ac04cdb049ad832ebaeee409b842
msgid "If you have an existing project that is using the database session backend, you don't have to do anything to accommodate this change. However, you may get a significant performance boost if you manually add the new index to the session table. The SQL that will add the index can be found by running the :djadmin:`sqlindexes` admin command::"
msgstr ""

#: ../../releases/1.3.txt:444
#: ../../releases/1.3-alpha-1.txt:237
# 218d0930e8c44911bea34c3362b29be5
# c158fc8f43f34c83acd38742e4a61738
msgid "No more naughty words"
msgstr ""

#: ../../releases/1.3.txt:446
#: ../../releases/1.3-alpha-1.txt:239
# 88e15d3627f0494e8c17d7fe3aaf0966
# 55a5efb456c947e798283a88c38450f4
msgid "Django has historically provided (and enforced) a list of profanities. The :doc:`comments app </ref/contrib/comments/index>` has enforced this list of profanities, preventing people from submitting comments that contained one of those profanities."
msgstr ""

#: ../../releases/1.3.txt:451
# 90bccbedb52640c98a36fe12a3664048
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3.txt:458
#: ../../releases/1.3-alpha-1.txt:251
# 5c7d6319d8db48e88c8d0ac03cbe3c4b
# 8f95cb5245d2419d9f1505f2f19f18b8
msgid "If you want to restore the old behavior, simply put a :setting:`PROFANITIES_LIST` setting in your settings file that includes the words that you want to prohibit (see the `commit that implemented this change`_ if you want to see the list of words that was historically prohibited). However, if avoiding profanities is important to you, you would be well advised to seek out a better, less naive approach to the problem."
msgstr ""

#: ../../releases/1.3.txt:470
#: ../../releases/1.3-alpha-1.txt:263
# 3224111798d04091957d058e178b28da
# 48c6785a1bfd4e74b0bea3d4ebd36c8f
msgid "Localflavor changes"
msgstr ""

#: ../../releases/1.3.txt:472
#: ../../releases/1.3-alpha-1.txt:265
# 5fbcc9b2b4ad4ab4b8e73154a7141f3a
# a42c981ffd6749e685dd930d704eeb01
msgid "Django 1.3 introduces the following backwards-incompatible changes to local flavors:"
msgstr ""

#: ../../releases/1.3.txt:475
# 2bd42c6190724536976f3f2533be5c95
msgid "Canada (ca) -- The province \"Newfoundland and Labrador\" has had its province code updated to \"NL\", rather than the older \"NF\". In addition, the Yukon Territory has had its province code corrected to \"YT\", instead of \"YK\"."
msgstr ""

#: ../../releases/1.3.txt:480
#: ../../releases/1.3-alpha-1.txt:268
# 5686fb69173b4262af02de0cf6019139
# 017382761e124dca902d1ada5fb8f4ba
msgid "Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been removed from the province list in favor of the new official designation \"Aceh (ACE)\"."
msgstr ""

#: ../../releases/1.3.txt:484
# 9f43f44906af472ba39acf0cecbaf7ba
msgid "United States of America (us) -- The list of \"states\" used by ``USStateField`` has expanded to include Armed Forces postal codes. This is backwards-incompatible if you were relying on ``USStateField`` not including them."
msgstr ""

#: ../../releases/1.3.txt:490
# e2efb0f6b4374053aa88d1335389f088
msgid "FormSet updates"
msgstr ""

#: ../../releases/1.3.txt:492
# 2d1a1a0fd96047479c6090350fa77c8f
msgid "In Django 1.3 ``FormSet`` creation behavior is modified slightly. Historically the class didn't make a distinction between not being passed data and being passed empty dictionary. This was inconsistent with behavior in other parts of the framework. Starting with 1.3 if you pass in empty dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

#: ../../releases/1.3.txt:498
# ea7df19a07c549c28b0abdf444f27824
msgid "For example with a ``FormSet``::"
msgstr ""

#: ../../releases/1.3.txt:505
# 0a20d72076674006bd2e844e90f13acb
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

#: ../../releases/1.3.txt:512
# 6044d6d77aec4554b81d30f3e73714a0
msgid "if you need to instantiate an empty ``FormSet``, don't pass in the data or use ``None``::"
msgstr ""

#: ../../releases/1.3.txt:519
# ce3c2bae3ec943719d696541d47434bd
msgid "Callables in templates"
msgstr ""

#: ../../releases/1.3.txt:521
# 3b8deede5a584320a96b6054d79e529b
msgid "Previously, a callable in a template would only be called automatically as part of the variable resolution process if it was retrieved via attribute lookup. This was an inconsistency that could result in confusing and unhelpful behavior::"
msgstr ""

#: ../../releases/1.3.txt:531
# ef25d8dbfa984e87898f3d25c39797f4
msgid "This has been resolved in Django 1.3 - the result in both cases will be ``u'Joe Bloggs'``. Although the previous behavior was not useful for a template language designed for web designers, and was never deliberately supported, it is possible that some templates may be broken by this change."
msgstr ""

#: ../../releases/1.3.txt:567
# 53e886b7978944b39c4c754439bf2536
msgid "Changed priority of translation loading"
msgstr ""

#: ../../releases/1.3.txt:569
# b1794b920180429ea3613f926c988b9c
msgid "Work has been done to simplify, rationalize and properly document the algorithm used by Django at runtime to build translations from the different translations found on disk, namely:"
msgstr ""

#: ../../releases/1.3.txt:573
# 1b7d691aa3904c57b93e4ac4b433c012
msgid "For translatable literals found in Python code and templates (``'django'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:576
# 24a89ecc8c3b415a8ef0cacc77e06516
msgid "Priorities of translations included with applications listed in the :setting:`INSTALLED_APPS` setting were changed. To provide a behavior consistent with other parts of Django that also use such setting (templates, etc.) now, when building the translation that will be made available, the apps listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:582
# c503adca835241babc6b37ac92651fb4
msgid "Now it is possible to override the translations shipped with applications by using the :setting:`LOCALE_PATHS` setting whose translations have now higher precedence than the translations of :setting:`INSTALLED_APPS` applications. The relative priority among the values listed in this setting has also been modified so the paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:589
# 1a336c1f8e4648a79e709b9eb4598c9a
msgid "The ``locale`` subdirectory of the directory containing the settings, that usually coincides with and is known as the *project directory* is being deprecated in this release as a source of translations. (the precedence of these translations is intermediate between applications and :setting:`LOCALE_PATHS` translations). See the `corresponding deprecated features section`_ of this document."
msgstr ""

#: ../../releases/1.3.txt:596
# d2047963ccbb4483bf6537a3dd717787
msgid "For translatable literals found in Javascript code (``'djangojs'`` gettext domain):"
msgstr ""

#: ../../releases/1.3.txt:599
# 1b521dc8b1a54d1eb4ba8a6c81132be0
msgid "Similarly to the ``'django'`` domain translations: Overriding of translations shipped with applications by using the :setting:`LOCALE_PATHS` setting is now possible for this domain too. These translations have higher precedence than the translations of Python packages passed to the :ref:`javascript_catalog view <javascript_catalog-view>`.  Paths listed first have higher precedence than the ones listed later."
msgstr ""

#: ../../releases/1.3.txt:606
# ae8368fe0ca341fd81c2c21298c7af7e
msgid "Translations under the ``locale`` subdirectory of the *project directory* have never been taken in account for JavaScript translations and remain in the same situation considering the deprecation of such location."
msgstr ""

#: ../../releases/1.3.txt:613
# 406c1b15c4374fad9f6d0cd3b985819a
msgid "Transaction management"
msgstr ""

#: ../../releases/1.3.txt:615
# 6ace17b926634e8bafc2cc967c3461e3
msgid "When using managed transactions -- that is, anything but the default autocommit mode -- it is important when a transaction is marked as \"dirty\". Dirty transactions are committed by the :func:`~django.db.transaction.commit_on_success` decorator or the :class:`~django.middleware.transaction.TransactionMiddleware`, and :func:`~django.db.transaction.commit_manually` forces them to be closed explicitly; clean transactions \"get a pass\", which means they are usually rolled back at the end of a request when the connection is closed."
msgstr ""

#: ../../releases/1.3.txt:625
# 5db30510e0f849fda9179bc7e0149103
msgid "Until Django 1.3, transactions were only marked dirty when Django was aware of a modifying operation performed in them; that is, either some model was saved, some bulk update or delete was performed, or the user explicitly called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked dirty when *any* database operation is performed."
msgstr ""

#: ../../releases/1.3.txt:632
# 1b679e89ff3d478da99831e540a07b0c
msgid "As a result of this change, you no longer need to set a transaction dirty explicitly when you execute raw SQL or use a data-modifying ``SELECT``. However, you *do* need to explicitly close any read-only transactions that are being managed using :func:`~django.db.transaction.commit_manually`. For example::"
msgstr ""

#: ../../releases/1.3.txt:643
# 06e5e77d870f4b51b10d405252e9564d
msgid "Prior to Django 1.3, this would work without error. However, under Django 1.3, this will raise a :class:`~django.db.transaction.TransactionManagementError` because the read operation that retrieves the ``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""

#: ../../releases/1.3.txt:650
# 324586b8e3bb4a088d16eb822ca2bb08
msgid "No password reset for inactive users"
msgstr ""

#: ../../releases/1.3.txt:652
# def9386414984a88bf3ddeeb4a6bbd6a
msgid "Prior to Django 1.3, inactive users were able to request a password reset email and reset their password. In Django 1.3 inactive users will receive the same message as a nonexistent account."
msgstr ""

#: ../../releases/1.3.txt:659
#: ../../releases/1.3-alpha-1.txt:274
# 0a085fe490f54c509566a97b77ebf84c
# 3ff2208ccb984de9a06826f962eb54f0
msgid "Features deprecated in 1.3"
msgstr ""

#: ../../releases/1.3.txt:661
#: ../../releases/1.3-alpha-1.txt:276
# 3b4af2f7818840f9a355684cf9992c39
# c42ff7756fa2428b918de223d0896267
msgid "Django 1.3 deprecates some features from earlier releases. These features are still supported, but will be gradually phased out over the next few release cycles."
msgstr ""

#: ../../releases/1.3.txt:665
#: ../../releases/1.3-alpha-1.txt:280
# 56ac1b76070f4d8dba82c08aeb61e9db
# 8ba5be7c82d442ffb0f0a15a8ecb6cc5
msgid "Code taking advantage of any of the features below will raise a ``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by default, but may be turned on using Python's :mod:`warnings` module, or by running Python with a ``-Wd`` or `-Wall` flag."
msgstr ""

#: ../../releases/1.3.txt:670
#: ../../releases/1.3-alpha-1.txt:285
# 430feb9dc65e44209e93191e5b3d8be0
# fad69c3e01f14ef09fc9fdb107ba3095
msgid "In Django 1.4, these warnings will become a ``DeprecationWarning``, which is *not* silent. In Django 1.5 support for these features will be removed entirely."
msgstr ""

#: ../../releases/1.3.txt:676
#: ../../releases/1.3-alpha-1.txt:291
# 7d0cdb2e9cdd4418843d7564e5461802
# 62d6bd64fad048bf91b008e663a6dbc5
msgid "For more details, see the documentation :doc:`Django's release process </internals/release-process>` and our :doc:`deprecation timeline </internals/deprecation>`."
msgstr ""

#: ../../releases/1.3.txt:681
#: ../../releases/1.3-alpha-1.txt:296
# 778392190e834e8885688dea95963303
# def2e103a1a74c8cb593be87cdded947
msgid "``mod_python`` support"
msgstr ""

#: ../../releases/1.3.txt:683
#: ../../releases/1.3-alpha-1.txt:298
# 3bb283bead364180b63d15e2fb3ea3d9
# 10da9d1828b44d328c00e8d89fca6a6f
msgid "The ``mod_python`` library has not had a release since 2007 or a commit since 2008. The Apache Foundation board voted to remove ``mod_python`` from the set of active projects in its version control repositories, and its lead developer has shifted all of his efforts toward the lighter, slimmer, more stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

#: ../../releases/1.3.txt:689
# 752392c2983149d5ad3b98ead248f99a
msgid "If you are currently using the ``mod_python`` request handler, you should redeploy your Django projects using another request handler. :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` is the request handler recommended by the Django project, but :doc:`FastCGI </howto/deployment/fastcgi>` is also supported. Support for ``mod_python`` deployment will be removed in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:697
#: ../../releases/1.3-alpha-1.txt:309
# 7d9a694cc70c484ea348ab71401743c9
# dd63cc55ebba419db9799be384f96695
msgid "Function-based generic views"
msgstr ""

#: ../../releases/1.3.txt:699
#: ../../releases/1.3-alpha-1.txt:311
# d35cd2ced8d14b369b02512ca28b3c01
# 24ef44dc403143f2a54b189ba9b15beb
msgid "As a result of the introduction of class-based generic views, the function-based generic views provided by Django have been deprecated. The following modules and the views they contain have been deprecated:"
msgstr ""

#: ../../releases/1.3.txt:703
#: ../../releases/1.3-alpha-1.txt:315
# e67e45e5ed9f454c91afb68d01e0cd3c
# 86cf601a56bd4972930652c754cf2495
msgid ":mod:`django.views.generic.create_update`"
msgstr ""

#: ../../releases/1.3.txt:705
#: ../../releases/1.3-alpha-1.txt:316
# 8191dbf61fe5402bbfd4abb34669dfc5
# fc3aa3dc9c51429592ce24eff02e48f5
msgid ":mod:`django.views.generic.date_based`"
msgstr ""

#: ../../releases/1.3.txt:707
#: ../../releases/1.3-alpha-1.txt:317
# 315f1374b914468e87742854a523c3ad
# d5b517d6db5044ae93dc57d1c6fa91f8
msgid ":mod:`django.views.generic.list_detail`"
msgstr ""

#: ../../releases/1.3.txt:709
#: ../../releases/1.3-alpha-1.txt:318
# 2a36c958ee734c46a6077f2d84cee521
# 2af7126ae6594a31bf7b96e23efc5b01
msgid ":mod:`django.views.generic.simple`"
msgstr ""

#: ../../releases/1.3.txt:712
#: ../../releases/1.3-alpha-1.txt:321
# 94731c890992464dabef8b7b82fcf38e
# 372d4de2352b478e8f99b6f0de702f0b
msgid "Test client response ``template`` attribute"
msgstr ""

#: ../../releases/1.3.txt:714
#: ../../releases/1.3-alpha-1.txt:323
# 3f2c10f561524bbe92e954bfd250f900
# 8a6c4224b82243af9073401dddc9451d
msgid "Django's :ref:`test client <test-client>` returns :class:`~django.test.client.Response` objects annotated with extra testing information. In Django versions prior to 1.3, this included a :attr:`~django.test.client.Response.template` attribute containing information about templates rendered in generating the response: either None, a single :class:`~django.template.Template` object, or a list of :class:`~django.template.Template` objects. This inconsistency in return values (sometimes a list, sometimes not) made the attribute difficult to work with."
msgstr ""

#: ../../releases/1.3.txt:723
#: ../../releases/1.3-alpha-1.txt:332
# 460d2d1428574a199716b0965974ee12
# 4a90c34a20044e5fbbb864ec94d440f5
msgid "In Django 1.3 the :attr:`~django.test.client.Response.template` attribute is deprecated in favor of a new :attr:`~django.test.client.Response.templates` attribute, which is always a list, even if it has only a single element or no elements."
msgstr ""

#: ../../releases/1.3.txt:729
#: ../../releases/1.3-alpha-1.txt:338
# 3392d64c921d4d95b37c73684efed9ed
# d2367162920444d082e42ec8b30cf6b8
msgid "``DjangoTestRunner``"
msgstr ""

#: ../../releases/1.3.txt:731
#: ../../releases/1.3-alpha-1.txt:340
# 284096fb49e046bb8c6750f5836b1efb
# 431fd9f40e1142edaf6d8f99cc99cc5f
msgid "As a result of the introduction of support for unittest2, the features of :class:`django.test.simple.DjangoTestRunner` (including fail-fast and Ctrl-C test termination) have been made redundant. In view of this redundancy, :class:`~django.test.simple.DjangoTestRunner` has been turned into an empty placeholder class, and will be removed entirely in Django 1.5."
msgstr ""

#: ../../releases/1.3.txt:739
# 2618c35ebd2f42be86726673d86b52a2
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

#: ../../releases/1.3.txt:741
# 5b6d647b5be249dc932eda9aa249db99
msgid "Most template tags will allow you to pass in either constants or variables as arguments -- for example::"
msgstr ""

#: ../../releases/1.3.txt:746
# 9bc804bff3a04ca89333f84dd194d7ab
msgid "allows you to specify a base template as a constant, but if you have a context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

#: ../../releases/1.3.txt:751
# 664717b52933457c9c91cb6a8ca0ad6f
msgid "is also legal."
msgstr ""

#: ../../releases/1.3.txt:753
# 9426126063ea47f5bb30276edf8c8f56
msgid "However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are different. These tags use the second, quoteless syntax, but interpret the argument as a constant. This means it isn't possible to use a context variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

#: ../../releases/1.3.txt:759
# 51726fe364e8417185e027014924e3a1
msgid "Django 1.3 marks the start of the process to correct this historical accident. Django 1.3 adds a new template library -- ``future`` -- that provides alternate implementations of the :ttag:`url` and :ttag:`ssi` template tags. This ``future`` library implement behavior that makes the handling of the first argument consistent with the handling of all other variables. So, an existing template that contains::"
msgstr ""

#: ../../releases/1.3.txt:768
# 742c41dacd1a44fab57db96370a855ea
msgid "should be replaced with::"
msgstr ""

#: ../../releases/1.3.txt:773
# d9f4b9ced8184c79b92ceda4e8f3b2b6
msgid "The tags implementing the old behavior have been deprecated, and in Django 1.5, the old behavior will be replaced with the new behavior. To ensure compatibility with future versions of Django, existing templates should be modified to use the new ``future`` libraries and syntax."
msgstr ""

#: ../../releases/1.3.txt:780
#: ../../releases/1.3-beta-1.txt:124
# 1e20448969fe4eeb9b33683214842aa6
# fd20c02cc43442a18479006f7849e16f
msgid "Changes to the login methods of the admin"
msgstr ""

#: ../../releases/1.3.txt:782
#: ../../releases/1.3-beta-1.txt:126
# 292d4642e3664b169d61e009e0f08cc9
# d090075a797149169617952f656a48aa
msgid "In previous version the admin app defined login methods in multiple locations and ignored the almost identical implementation in the already used auth app. A side effect of this duplication was the missing adoption of the changes made in r12634_ to support a broader set of characters for usernames."
msgstr ""

#: ../../releases/1.3.txt:787
#: ../../releases/1.3-beta-1.txt:131
# d86b62d38a7145b1be88b3d459936e40
# 246a5cac702c4f56bb0251152946ad41
msgid "This release refactors the admin's login mechanism to use a subclass of the :class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual form validation. The previously undocumented method ``'django.contrib.admin.sites.AdminSite.display_login_form'`` has been removed in favor of a new :attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""

#: ../../releases/1.3.txt:797
# 8e4f7c023ec84283b51558a6db82a697
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

#: ../../releases/1.3.txt:799
# 1394608f2d2e449ca54e8058b59dd52d
msgid "Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands can be used to delete everything. You can also use ALTER TABLE or DROP TABLE statements manually."
msgstr ""

#: ../../releases/1.3.txt:807
# 3191931d4b2a4f8ab1236a7297aa6679
msgid "The function-based :setting:`TEST_RUNNER` previously used to execute the GeoDjango test suite, :func:`django.contrib.gis.tests.run_gis_tests`, was deprecated for the class-based runner, :class:`django.contrib.gis.tests.GeoDjangoTestSuiteRunner`."
msgstr ""

#: ../../releases/1.3.txt:813
# 8715bd0a28b241c8a535642bcbb15779
msgid "Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` would silently do nothing when GDAL wasn't available.  Now, a :class:`~django.contrib.gis.geos.GEOSException` is properly raised to indicate possible faulty application code.  A warning is now raised if :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the geometry is less than 0 or ``None``."
msgstr ""

#: ../../releases/1.3.txt:822
# 853d6e29d279437ca97a0f6ae1c0c4cc
msgid "``CZBirthNumberField.clean``"
msgstr ""

#: ../../releases/1.3.txt:824
# caee3ff5747d40c5b98b8c10754e41fe
msgid "Previously this field's ``clean()`` method accepted a second, gender, argument which allowed stronger validation checks to be made, however since this argument could never actually be passed from the Django form machinery it is now pending deprecation."
msgstr ""

#: ../../releases/1.3.txt:830
# 46becdc70b124e15a6a142e85792597a
msgid "``CompatCookie``"
msgstr ""

#: ../../releases/1.3.txt:832
# 6caa37e44704418491b0397ebe261d92
msgid "Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, which was a bugfix wrapper around the standard library ``SimpleCookie``. As the fixes are moving upstream, this is now deprecated - you should use ``from django.http import SimpleCookie`` instead."
msgstr ""

#: ../../releases/1.3.txt:840
# 2ef6c1381e79497d9845d15f57b6a38f
msgid "Loading of *project-level* translations"
msgstr ""

#: ../../releases/1.3.txt:842
# b0db13a961154d1faec9b3def8f25f59
msgid "This release of Django starts the deprecation process for inclusion of translations located under the so-called *project path* in the translation building process performed at runtime. The :setting:`LOCALE_PATHS` setting can be used for the same task by adding the filesystem path to a ``locale`` directory containing project-level translations to the value of that setting."
msgstr ""

#: ../../releases/1.3.txt:848
# 6420a5b0755e456f9cae9ec0116901c2
msgid "Rationale for this decision:"
msgstr ""

#: ../../releases/1.3.txt:850
# 7888d90685ab4fd58f9f02dc125bb170
msgid "The *project path* has always been a loosely defined concept (actually, the directory used for locating project-level translations is the directory containing the settings module) and there has been a shift in other parts of the framework to stop using it as a reference for location of assets at runtime."
msgstr ""

#: ../../releases/1.3.txt:856
# 0f02e781ba3a4d7a934fbbd91634756f
msgid "Detection of the ``locale`` subdirectory tends to fail when the deployment scenario is more complex than the basic one. e.g. it fails when the settings module is a directory (ticket #10765)."
msgstr ""

#: ../../releases/1.3.txt:860
# fc61c8912dd54cfd97d9ba55f466e9c7
msgid "There are potential strange development- and deployment-time problems like the fact that the ``project_dir/locale/`` subdir can generate spurious error messages when the project directory is added to the Python path (``manage.py runserver`` does this) and then it clashes with the equally named standard library module, this is a typical warning message::"
msgstr ""

#: ../../releases/1.3.txt:870
# 0e38c0bd5fde4a9a8524ccc6749121de
msgid "This location wasn't included in the translation building process for JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

#: ../../releases/1.3.txt:875
# 72899bac6cf549449b0434158323babf
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

#: ../../releases/1.3.txt:877
# 9d005618b9c64dedbf7e42d1f7959a51
msgid "In Django 1.2, we began the process of changing the location of the ``auth`` context processor from ``django.core.context_processors`` to ``django.contrib.auth.context_processors``. However, the ``PermWrapper`` support class was mistakenly omitted from that migration. In Django 1.3, the ``PermWrapper`` class has also been moved to ``django.contrib.auth.context_processors``, along with the ``PermLookupDict`` support class. The new classes are functionally identical to their old versions; only the module location has changed."
msgstr ""

#: ../../releases/1.3.txt:887
# bcae03428e9b41e7afb39551cf201257
msgid "Removal of ``XMLField``"
msgstr ""

#: ../../releases/1.3.txt:889
# 11303d7ea3b4414888cbb10c4a7f20be
msgid "When Django was first released, Django included an :class:`~django.db.models.XMLField` that performed automatic XML validation for any field input. However, this validation function hasn't been performed since the introduction of ``newforms``, prior to the 1.0 release. As a result, ``XMLField`` as currently implemented is functionally indistinguishable from a simple :class:`~django.db.models.TextField`."
msgstr ""

#: ../../releases/1.3.txt:896
# 96fbf93a3dd647ae87df1f1c4a0ec751
msgid "For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` -- instead of a two-release deprecation, ``XMLField`` will be removed entirely in Django 1.4."
msgstr ""

#: ../../releases/1.3.txt:900
# 786d81166cbc4410b767aa75e5bb4db0
msgid "It's easy to update your code to accommodate this change -- just replace all uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` keyword argument (if it is specified)."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:3
# d464714a479f4ab1b769716d10695549
msgid "Django 1.3 alpha 1 release notes"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:5
# 44d8a1ceb7854483808274affa444b5c
msgid "November 11, 2010"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:7
# 5930f1e496434400b5e1dd7ee34a78c5
msgid "Welcome to Django 1.3 alpha 1!"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:9
# dd081558e0844a31a9de42bceefddebc
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:18
# 86cb05941f4046c0a314e0ddc6edc9b3
msgid "As of this alpha release, Django 1.3 contains a number of nifty `new features`_, lots of bug fixes, some minor `backwards incompatible changes`_ and an easy upgrade path from Django 1.2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:27
# bd5b5f52618243d899d50b325fea52e5
msgid "What's new in Django 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:41
# 71d2e235e97b4847bd2767e21ae96a4a
msgid "See :doc:`the documentation on Class-based Generic Views </topics/class-based-views/index>` for more details. There is also a document to help you `convert your function-based generic views to class-based views <https://docs.djangoproject.com/en/1.4/topics/generic-views-migration/>`_."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:49
# 449529046bcd425e93ef3ff2a7e846d6
msgid "Django 1.3 adds framework-level support for Python's logging module. This means you can now easily configure and control logging as part of your Django project. A number of logging handlers and logging calls have been added to Django's own code as well -- most notably, the error emails sent on a HTTP 500 server error are now handled as a logging activity. See :doc:`the documentation on Django's logging interface </topics/logging>` for more details."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:60
# a0024d037eb04f42938f25e5ceefaa70
msgid "Django 1.3 ships with a new contrib app ``'django.contrib.staticfiles'`` to help developers handle the static media files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:64
# 1d621df9211e4eb798b2a0918d2952bc
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files. For this reason, you will probably want to make your :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` different from your :setting:`STATICFILES_ROOT` and :setting:`STATICFILES_URL`. You will need to arrange for serving of files in :setting:`MEDIA_ROOT` yourself; ``staticfiles`` does not deal with user-uploaded media at all."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:79
# 3e311353398347cfac7c32dcb8718381
msgid "``unittest2`` support"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:81
# 28c54ced152a4947888715879adbc6f7
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.4 compatibility."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:87
# 5a8fffe63757415082995dd871c3ca6c
msgid "To access this library, Django provides the ``django.utils.unittest`` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use it's own bundled version of unittest2."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:93
# 4f39e419ccc34b2f95cb6a1c252c4006
msgid "To use this alias, simply use::"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:101
# 00b6ffa6ba5a4008a6398d83d59a0646
msgid "If you want to continue to use the base unittest libary, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:133
# ec5ec198dc24448a9d6f58cee2288528
msgid "Contextual markers in translatable strings"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:138
# e91b7b8bd7414304920744412904c456
msgid "For more information, see :ref:`contextual-markers`"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:153
# 20f38327e432471cb0e32a6165def55a
msgid "Improved tools for accessing and manipulating the current Site via :func:`django.contrib.sites.models.get_current_site`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:159
# 4cdf29841162448e95469c4eba4583e1
msgid "A new test assertion -- :meth:`~django.test.client.Client.assertNumQueries` -- making it easier to test the database activity associated with a view."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:167
# e17239f6ede844918b4c845df2b3c036
msgid "Backwards-incompatible changes in 1.3 alpha 1"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:196
# 0fda22235731461490d3a7e3b1eb43a3
msgid "Django 1.3 now includes a ``ClearableFileInput`` form widget in addition to ``FileInput``. ``ClearableFileInput`` renders with a checkbox to clear the field's value (if the field has a value and is not required); ``FileInput`` provided no means for clearing an existing file from a ``FileField``."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:244
# c1e2aab3f2c64d8e9cf1f513ee846e5f
msgid "Unfortunately, the technique used to implement this profanities list was woefully naive, and prone to the `Scunthorpe problem`_. Fixing the built in filter to fix this problem would require significant effort, and since natural language processing isn't the normal domain of a web framework, we have \"fixed\" the problem by making the list of prohibited words an empty list."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:304
# ae71d44ecdc747c1b2779c292769f5a9
msgid "If you are currently using the ``mod_python`` request handler, you are strongly encouraged to redeploy your Django instances using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:348
#: ../../releases/1.3-beta-1.txt:187
# db206b7571614da0ab37cb0d116e6e71
# 34d52c0b03114b2b84010c639f8248bc
msgid "The Django 1.3 roadmap"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:350
#: ../../releases/1.3-beta-1.txt:189
# 508e9b7b87804e7185599255bb0a8437
# 5ebda8c7d69743d2b83ac710d0646a4a
msgid "Before the final Django 1.3 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:354
# 80c3b64919e447c9ab2bd61b825e6bab
msgid "Week of **November 29, 2010**: First Django 1.3 beta release. Final feature freeze for Django 1.3."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:357
# 1d90c3ff86cf455ca065b03681a1f0f7
msgid "Week of **January 10, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:360
# 0e61791145ec44a6a7894e693dde29be
msgid "Week of **January 17, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:362
# 7585cbf6ef7b41b3a19f77dda7fe50e6
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-alpha-1.txt:370
# 7edcd66e6f3a4ecaafa7b5326728e78c
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:381
#: ../../releases/1.3-beta-1.txt:217
#: ../../releases/1.4-alpha-1.txt:1103
# ab14b915bd5a4384abc05924028ab73e
# 1ac1833c57e04c0298d0b3ceaeb05455
# 6dae3084ee454aeda902959cb4d01fc9
msgid "Additionally, discussion of Django development, including progress toward the 1.3 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.3-alpha-1.txt:399
# d83c3bcab3dc49c5b831394ba67b77f0
msgid "Several development sprints will also be taking place before the 1.3 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.3-beta-1.txt:3
# 7808e355fdec4532b8cf7732caf08d7e
msgid "Django 1.3 beta 1 release notes"
msgstr ""

#: ../../releases/1.3-beta-1.txt:5
# 36a4534ac9a94c89942f693b33786718
msgid "Welcome to Django 1.3 beta 1!"
msgstr ""

#: ../../releases/1.3-beta-1.txt:7
# 6ee9b3cbbf9947e9b53ca2aef391d771
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.3. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.3 release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:17
# 09473a40f9664ddaaa02dc3a06348b96
msgid "What's new in Django 1.3 beta 1"
msgstr ""

#: ../../releases/1.3-beta-1.txt:20
# 073f3047d8394c998096c9184a4e0e6b
msgid "Further tweaks to the staticfiles app"
msgstr ""

#: ../../releases/1.3-beta-1.txt:22
# 04a75950ea0042faac8ea376e3f11699
msgid "Django 1.3 ships with a new contrib app :mod:`django.contrib.staticfiles` to help developers handle the static media files (images, CSS, JavaScript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../releases/1.3-beta-1.txt:26
# 286cefc060d24395a6845ac759017799
msgid "The :mod:`~django.contrib.staticfiles` app ships with the ability to automatically serve static files during development (if the :setting:`DEBUG` setting is ``True``) when using the :djadmin:`runserver` management command. Based on feedback from the community this release adds two new options to the :djadmin:`runserver` command to modify this behavior:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:32
# a7a1374b90084a0382644f1a41ea8b22
msgid "``--nostatic``: prevents the :djadmin:`runserver` command from serving files completely."
msgstr ""

#: ../../releases/1.3-beta-1.txt:35
# b9c4c6c41e5741cf9f37b998285b7ac6
msgid "``--insecure``: enables serving of static files even if running with :setting:`DEBUG` set to False. (This is **not** recommended!)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:38
# c99d616ea2b2459c99634828104f5e89
msgid "See the :doc:`staticfiles reference documentation </ref/contrib/staticfiles>` for more details, or learn :doc:`how to manage static files </howto/static-files>`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:43
# efced04fdcd1479fb687b046245df6f8
msgid "Translation comments"
msgstr ""

#: ../../releases/1.3-beta-1.txt:45
# 6f960606274f464b9c2380b0f51cf54f
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../releases/1.3-beta-1.txt:53
# b3bbd828ab8f46d8b00889a6b9d43538
msgid "The comment will appear in the resulting .po file and should also be displayed by most translation tools."
msgstr ""

#: ../../releases/1.3-beta-1.txt:56
# e72cfbdcb9d94df1984501bbdf94f4d8
msgid "For more information, see :ref:`translator-comments`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:61
# 60eaa50379194b1786fa0b2ee668e357
msgid "If you provide a custom auth backend with ``supports_inactive_user`` set to ``True``, an inactive user model will check the backend for permissions. This is useful for further centralizing the permission handling. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:67
# 52ef7a22796949ba9f82268f501bb11f
msgid "Backwards-incompatible changes in 1.3 alpha 2"
msgstr ""

#: ../../releases/1.3-beta-1.txt:70
# e078bdd212034640a06dd66c3c1e4bab
msgid "Change to admin lookup filters"
msgstr ""

#: ../../releases/1.3-beta-1.txt:72
# b307714013784290bb56053132666eb0
msgid "The Django admin has long had an undocumented \"feature\" allowing savvy users to manipulate the query string of changelist pages to filter the list of objects displayed. However, this also creates a security issue, as a staff user with sufficient knowledge of model structure could use this \"feature\" to gain access to information he or she would not normally have."
msgstr ""

#: ../../releases/1.3-beta-1.txt:79
# 580cf65b6f74487a8c3a8b98ce90a0f7
msgid "As a result, changelist filtering now explicitly validates all lookup arguments in the query string, and permits only fields which are directly on the model, or relations explicitly permitted by the ``ModelAdmin`` definition. If you were relying on this undocumented feature, you will need to update your ``ModelAdmin`` definitions to whitelist the relations you choose to expose for filtering."
msgstr ""

#: ../../releases/1.3-beta-1.txt:87
# 90e8fc1e15834220a609317701eb15dd
msgid "Introduction of STATIC_URL and STATIC_ROOT settings"
msgstr ""

#: ../../releases/1.3-beta-1.txt:89
# 67101b476b9449c1ad54f37eb7baa3a6
msgid "The newly introduced :mod:`~django.contrib.staticfiles` app -- which extends Django's abilities to handle static files for apps and projects -- required the additon of two new settings to refer to those files in templates and code, especially in contrast to the :setting:`MEDIA_URL` and :setting:`MEDIA_ROOT` settings that refer to user-uploaded files."
msgstr ""

#: ../../releases/1.3-beta-1.txt:95
# 3e3dab2d7e8f4cbc8a96804039d4fb5d
msgid "Prior to 1.3 alpha 2 these settings were called ``STATICFILES_URL`` and ``STATICFILES_ROOT`` to follow the naming scheme for app-centric settings. Based on feedback from the community it became apparent that those settings created confusion, especially given the fact that handling static files is also desired outside the use of the optional :mod:`~django.contrib.staticfiles` app."
msgstr ""

#: ../../releases/1.3-beta-1.txt:101
# 92b892af7c0847b397b0778917c4251d
msgid "As a result, we took the following steps to rectify the issue:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:103
# b0b037843dcb4f198f65b50b478bebd1
msgid "Two new global settings were added that will be used by, **but are not limited to**, the :doc:`staticfiles</ref/contrib/staticfiles>` app:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:106
# 2e4b436988d24305b2197ae52e8c307d
msgid ":setting:`STATIC_ROOT` (formally ``STATICFILES_ROOT``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:108
# e70db3655c264fc0ba91da1e599be597
msgid ":setting:`STATIC_URL` (formally ``STATICFILES_URL``)"
msgstr ""

#: ../../releases/1.3-beta-1.txt:110
# cb0fd2d6aad6451dbf79fb72075f98e0
msgid "The ``django.contrib.staticfiles.templatetags.staticfiles.get_staticfiles_prefix`` template tag was moved to Django's core (``django.templatetags.static``) and renamed to :ttag:`get_static_prefix`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:114
# 4a54f6c5ae8143999885e0f868fdd4f0
msgid "The ``django.contrib.staticfiles.context_processors.staticfiles`` context processor was moved to Django's core (``django.core.context_processors.static``) and renamed to :func:`~django.core.context_processors.static`."
msgstr ""

#: ../../releases/1.3-beta-1.txt:119
# cf9746458317410ab0098d9f3d67030d
msgid ":ref:`form-media-paths` now uses :setting:`STATIC_URL` as the prefix **if the value is not None**, and falls back to the previously used :setting:`MEDIA_URL` setting otherwise."
msgstr ""

#: ../../releases/1.3-beta-1.txt:141
# 2d13716bc33d425996b16899cc3160cd
msgid "Changes to ``USStateField``"
msgstr ""

#: ../../releases/1.3-beta-1.txt:143
# 46be4503117346dab7c50c78b98ee551
msgid "The :mod:`django.contrib.localflavor` application contains collections of code relevant to specific countries or cultures. One such is :class:`~django.contrib.localflavor.us.models.USStateField`, which provides a field for storing the two-letter postal abbreviation of a U.S. state. This field has consistently caused problems, however, because it is often used to store the state portion of a U.S postal address, but not all \"states\" recognized by the U.S Postal Service are actually states of the U.S. or even U.S. territory. Several compromises over the list of choices resulted in some users feeling the field supported too many locations, while others felt it supported too few."
msgstr ""

#: ../../releases/1.3-beta-1.txt:155
# 22113ddd321d41ab9c33a39a024df8d2
msgid "In Django 1.3 we're taking a new approach to this problem, implemented as a pair of changes:"
msgstr ""

#: ../../releases/1.3-beta-1.txt:158
# 002617c2188b4a0081400e48346889b3
msgid "The choice list for `USStateField` has changed. Previously, it consisted of the 50 U.S. states, the District of Columbia and U.S. overseas territories. As of Django 1.3 it includes all previous choices, plus the U.S. Armed Forces postal codes."
msgstr ""

#: ../../releases/1.3-beta-1.txt:163
# b8e5fb0626584a1c97e52936ed82d317
msgid "A new model field, :class:`django.contrib.localflavor.us.models.USPostalCodeField`, has been added which draws its choices from a list of all postal abbreviations recognized by the U.S Postal Service. This includes all abbreviations recognized by `USStateField`, plus three independent nations -- the Federated States of Micronesia, the Republic of the Marshall Islands and the Republic of Palau -- which are serviced under treaty by the U.S. postal system. A new form widget, :class:`django.contrib.localflavor.us.forms.USPSSelect`, is also available and provides the same set of choices."
msgstr ""

#: ../../releases/1.3-beta-1.txt:174
# 722becd6e2b64cc4afe850f54d5d3e70
msgid "Additionally, several finer-grained choice tuples are provided which allow mixing and matching of subsets of the U.S. states and territories, and other locations serviced by the U.S. postal system. Consult the :mod:`django.contrib.localflavor` documentation for more details."
msgstr ""

#: ../../releases/1.3-beta-1.txt:180
# 714d4f28a42b4758a49f4217b228d698
msgid "The change to `USStateField` is technically backwards-incompatible for users who expect this field to exclude Armed Forces locations. If you need to support U.S. mailing addresses without Armed Forces locations, see the list of choice tuples available in the localflavor documentation."
msgstr ""

#: ../../releases/1.3-beta-1.txt:193
# ee0f0952d52e41e09abf4a5e71db38eb
msgid "Week of **January 24, 2011**: First Django 1.3 release candidate. String freeze for translations."
msgstr ""

#: ../../releases/1.3-beta-1.txt:196
# dbe9bc5e9ef94a86bf119f56e6f99441
msgid "Week of **January 31, 2011**: Django 1.3 final release."
msgstr ""

#: ../../releases/1.3-beta-1.txt:198
# a7e23bbd3f384c5f8a96c2e49ef2f5e7
msgid "If necessary, additional beta or release-candidate packages will be issued prior to the final 1.3 release. Django 1.3 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.3-beta-1.txt:206
# da58e34516944bc098afb2b3b44e6a98
msgid "In order to provide a high-quality 1.3 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.3.1.txt:3
# 026f4d0012a3423a9cc399358ce394f4
msgid "Django 1.3.1 release notes"
msgstr ""

#: ../../releases/1.3.1.txt:7
# 0da849195b2d4bc0b154c5e9e9e329f8
msgid "Welcome to Django 1.3.1!"
msgstr ""

#: ../../releases/1.3.1.txt:9
# 57c55f3bf455444b82c2ba37ee2e5495
msgid "This is the first security release in the Django 1.3 series, fixing several security issues in Django 1.3.  Django 1.3.1 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.3.2.txt:3
# e774348ccb794f6e9a64f172711463ee
msgid "Django 1.3.2 release notes"
msgstr ""

#: ../../releases/1.3.2.txt:5
#: ../../releases/1.4.1.txt:5
# 3836de30d95d4935a1aaa6a1c987cbbb
# ae19c967bf6b46568c679e4cfd320849
msgid "*July 30, 2012*"
msgstr ""

#: ../../releases/1.3.2.txt:7
# 7d5a76d7a10e46279bdf32dda3a2c3d4
msgid "This is the second security release in the Django 1.3 series, fixing several security issues in Django 1.3. Django 1.3.2 is a recommended upgrade for all users of Django 1.3."
msgstr ""

#: ../../releases/1.4.txt:3
# cb4511c4ffb54cbfafe1516f04e9887d
msgid "Django 1.4 release notes"
msgstr ""

#: ../../releases/1.4.txt:5
# 3e84f9c5834b4e38a54eb3a2895170b8
msgid "*March 23, 2012*"
msgstr ""

#: ../../releases/1.4.txt:7
# 5a5f8261ff3045649e688c6e19d3a48c
msgid "Welcome to Django 1.4!"
msgstr ""

#: ../../releases/1.4.txt:9
# 2ee594e32d2442478b1d1a50cda8eee8
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.3 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4.txt:23
# 91fb992a79f34d559e9c188e9d5d0ff2
msgid "The biggest new feature in Django 1.4 is `support for time zones`_ when handling date/times. When enabled, this Django will store date/times in UTC, use timezone-aware objects internally, and translate them to users' local timezones for display."
msgstr ""

#: ../../releases/1.4.txt:28
# 91ce8ea0627f4c0799a0f9fe3cce5f20
msgid "If you're upgrading an existing project to Django 1.4, switching to the time- zone aware mode may take some care: the new mode disallows some rather sloppy behavior that used to be accepted. We encourage anyone who's upgrading to check out the :ref:`timezone migration guide <time-zones-migration-guide>` and the :ref:`timezone FAQ <time-zones-faq>` for useful pointers."
msgstr ""

#: ../../releases/1.4.txt:34
# 2b1bed5109fb423ebcd18975fc309561
msgid "Other notable new features in Django 1.4 include:"
msgstr ""

#: ../../releases/1.4.txt:36
# 63bafb9f8c5b4be49991ae9cc60ce125
msgid "A number of ORM improvements, including `SELECT FOR UPDATE support`_, the ability to `bulk insert <#model-objects-bulk-create-in-the-orm>`_ large datasets for improved performance, and `QuerySet.prefetch_related`_, a method to batch-load related objects in areas where :meth:`~django.db.models.QuerySet.select_related` doesn't work."
msgstr ""

#: ../../releases/1.4.txt:43
# 153ff3c127a04f9ea673f04e57aeb764
msgid "Some nice security additions, including `improved password hashing`_ (featuring PBKDF2_ and bcrypt_ support), new `tools for cryptographic signing`_, several `CSRF improvements`_, and `simple clickjacking protection`_."
msgstr ""

#: ../../releases/1.4.txt:48
# 7aef66759ed442c897780b72a4055ef3
msgid "An `updated default project layout and manage.py`_ that removes the \"magic\" from prior versions. And for those who don't like the new layout, you can use `custom project and app templates`_ instead!"
msgstr ""

#: ../../releases/1.4.txt:52
# 7dda69e7b6e047ef88e29e9881d7ec2e
msgid "`Support for in-browser testing frameworks`_ (like Selenium_)."
msgstr ""

#: ../../releases/1.4.txt:54
# 6c0869ceef694342adba534a927fb2ce
msgid "... and a whole lot more; `see below <#what-s-new-in-django-1-4>`_!"
msgstr ""

#: ../../releases/1.4.txt:56
# 3a302a8905574acbb66b1b495b3c0001
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.4 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.4.txt:65
# b89fa72ec0674c4ba768439678488b76
msgid "Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum required Python version. Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4.txt:69
# fd4d12ce6d894ace97890041a1148f30
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4.txt:76
# df27c1caf6d1455985431a758208c867
msgid "Django does not support Python 3.x at this time. At some point before the release of Django 1.4, we plan to publish a document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

#: ../../releases/1.4.txt:81
#: ../../releases/1.4-alpha-1.txt:48
#: ../../releases/1.4-beta-1.txt:64
# 5889432e2cde4332a78ea5c07487293c
# 691757c2dc6d430797f8d615521d36ce
# 4a071f047a4548d89300ef38094db293
msgid "What's new in Django 1.4"
msgstr ""

#: ../../releases/1.4.txt:84
#: ../../releases/1.4-alpha-1.txt:470
#: ../../releases/1.4-beta-1.txt:508
# a415bbf5559f4b55a7eca79fbdc6b524
# 279f348c688b477d9f34300d60a01ff7
# 1eedec4579f541d390a0cc87090bb7f2
msgid "Support for time zones"
msgstr ""

#: ../../releases/1.4.txt:86
# 7a56c415c4ba46fa93ce46a1b4e29e68
msgid "In previous versions, Django used \"naive\" date/times (that is, date/times without an associated time zone), leaving it up to each developer to interpret what a given date/time \"really means\". This can cause all sorts of subtle timezone-related bugs."
msgstr ""

#: ../../releases/1.4.txt:91
# ea7bd68e21eb44df912928912067f030
msgid "In Django 1.4, you can now switch Django into a more correct, time-zone aware mode. In this mode, Django stores date and  time information in UTC in the database, uses time-zone-aware datetime objects internally and translates them to the end user's time zone in templates and forms. Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4.txt:97
#: ../../releases/1.4-alpha-1.txt:479
#: ../../releases/1.4-beta-1.txt:517
# 863b5fe128c14b3aa3f8cabe8c07cb83
# 33b01be4368642e4aa6d56de4c3f5843
# 0fcbd8085b2f477bb2bf5e36598619ca
msgid "Customizing date and time display for users around the world."
msgstr ""

#: ../../releases/1.4.txt:99
#: ../../releases/1.4-alpha-1.txt:480
#: ../../releases/1.4-beta-1.txt:518
# bf6b410b88ab4d62a26d6a2ad06b6cf5
# dc3dab9076da4e10855393aabab198f5
# 3ad455e2aec8401e98ca07589893e0b8
msgid "Storing datetimes in UTC for database portability and interoperability. (This argument doesn't apply to PostgreSQL, because it already stores timestamps with time zone information in Django 1.3.)"
msgstr ""

#: ../../releases/1.4.txt:103
#: ../../releases/1.4-alpha-1.txt:483
#: ../../releases/1.4-beta-1.txt:521
# bdb6af8be8844c6097e93f10a81f2e18
# a1084c9b6af14c5ca65059037b8b3cbb
# d89f4d5dc58f4538a1692622e7f84dcd
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

#: ../../releases/1.4.txt:105
# ccffdae5756f466b904767e9b82673e0
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, read the :ref:`migration guide <time-zones-migration-guide>`. If you encounter problems, there's a helpful :ref:`FAQ <time-zones-faq>`."
msgstr ""

#: ../../releases/1.4.txt:111
#: ../../releases/1.4-alpha-1.txt:51
#: ../../releases/1.4-beta-1.txt:67
# 2432b9edf1f24f2697e7bff590b52dea
# 5f929b84784f4ad4811eed49d2c8af81
# ebf445bab1de4ee2b03961a44ba87683
msgid "Support for in-browser testing frameworks"
msgstr ""

#: ../../releases/1.4.txt:113
#: ../../releases/1.4-alpha-1.txt:53
#: ../../releases/1.4-beta-1.txt:69
# ca4b507d191d488a857925054cbdc8cd
# 2d5a43aca884450393815803f304b684
# 3c9f8f91df534854a2fdcb327c39cd30
msgid "Django 1.4 supports integration with in-browser testing frameworks like Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets you test the interactions between your site's front and back ends more comprehensively. See the :class:`documentation<django.test.LiveServerTestCase>` for more details and concrete examples."
msgstr ""

#: ../../releases/1.4.txt:123
#: ../../releases/1.4-alpha-1.txt:366
#: ../../releases/1.4-beta-1.txt:404
# 7f998e0898244081a6399854bd8c8971
# ec1f62238c21411d886820dc2d42d5c2
# d9279da1df2e448688104779dcdf086d
msgid "Updated default project layout and ``manage.py``"
msgstr ""

#: ../../releases/1.4.txt:125
#: ../../releases/1.4-alpha-1.txt:368
#: ../../releases/1.4-beta-1.txt:406
# 5702ac8c65fa47f8aa1fb374090d97b0
# 72d22d1ad5154126a02d74dd6f30cfc6
# ea2fc740be0d449ea4fccde96c9078ab
msgid "Django 1.4 ships with an updated default project layout and ``manage.py`` file for the :djadmin:`startproject` management command. These fix some issues with the previous ``manage.py`` handling of Python import paths that caused double imports, trouble moving from development to deployment, and other difficult-to-debug path issues."
msgstr ""

#: ../../releases/1.4.txt:131
# a282c3461b9a4b44b68a84a09664adc0
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4.txt:136
#: ../../releases/1.4-alpha-1.txt:379
#: ../../releases/1.4-beta-1.txt:417
# 49712f5fc68f4340b59c7ebdd549a0ee
# 4d3d810ee1e34f239448be4e91f27ea8
# 7171e0f7316b4f51bec166dd48ca74c3
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

#: ../../releases/1.4.txt:148
#: ../../releases/1.4-alpha-1.txt:391
#: ../../releases/1.4-beta-1.txt:429
# 2a26c77bf14f41b19991b9f31abd60be
# 7d4a0091efe147b1a39f217dba18bdf0
# bd360ae1ade04f219260eb15d76f6c38
msgid "``{{ project_name }}`` should be replaced with the Python package name of the actual project."
msgstr ""

#: ../../releases/1.4.txt:151
# a7fe57c380b245dd84d6b467f483f1f0
msgid "If settings, URLconfs and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4.txt:157
#: ../../releases/1.4-alpha-1.txt:400
#: ../../releases/1.4-beta-1.txt:438
# f4a9be427c4c482c8c1014cfb0d9c093
# 6d6834faa4d84469ad6e2867b5255ac5
# ecb4a816c09947d290b56c55abec4519
msgid "For instance, with the following layout::"
msgstr ""

#: ../../releases/1.4.txt:168
#: ../../releases/1.4-alpha-1.txt:411
#: ../../releases/1.4-beta-1.txt:449
# 1da6ecaabc7f4710b7bfe7d8ae39fdd7
# c361b622e8a4449fa552bd2553dfe1b7
# dedda19de0c147a3917ee592aa94a165
msgid "You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

#: ../../releases/1.4.txt:171
#: ../../releases/1.4-alpha-1.txt:414
#: ../../releases/1.4-beta-1.txt:452
# 0880f5e236b540af94ca3de99ebdbf92
# 4ac30c30c2ae43efa9ba5473ca353559
# 81f91e8984294d8d8d0df12ed5b2a29f
msgid "Anything imported as a top-level module can be placed adjacent to the new ``manage.py``. For instance, to decouple \"myapp\" from the project module and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

#: ../../releases/1.4.txt:184
#: ../../releases/1.4-alpha-1.txt:427
#: ../../releases/1.4-beta-1.txt:465
# 7f7860fee9274553a0c64c95a0b10572
# 2755e540cef24d4cb98b0fb34319e8b1
# 1d2d8c1bfa8449eeb276f36dd8ee8ce4
msgid "If the same code is imported inconsistently (some places with the project prefix, some places without it), the imports will need to be cleaned up when switching to the new ``manage.py``."
msgstr ""

#: ../../releases/1.4.txt:189
#: ../../releases/1.4-alpha-1.txt:449
#: ../../releases/1.4-beta-1.txt:487
# 6c5fa2b22b124c0fa7164a249f47812e
# 6ae942de34ee4c67b045d8281b6415cd
# ea0dfb7c0bd54f4db456d7a34b7ce160
msgid "Custom project and app templates"
msgstr ""

#: ../../releases/1.4.txt:191
# c774be9453d440c29e77739dabe8f449
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands now have a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4.txt:195
# 0d3528cc32b04043a6c0c015ab3a9e57
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when you run the following command::"
msgstr ""

#: ../../releases/1.4.txt:200
#: ../../releases/1.4-alpha-1.txt:460
#: ../../releases/1.4-beta-1.txt:498
# c3c13fc9a54749d19c29da06827a5949
# aa400d3bd1d44861bd9de31ccdec9291
# c7dd50e65d694e2997df54572b230ce1
msgid "You can also now provide a destination directory as the second argument to both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

#: ../../releases/1.4.txt:206
#: ../../releases/1.4-alpha-1.txt:466
#: ../../releases/1.4-beta-1.txt:504
# 63cce0e9b3724e8583a6a4d513158cdb
# ac768803867d4d07a7fa1948e35d4ce5
# 9819b5eb34994119ba6096ae18093ccb
msgid "For more information, see the :djadmin:`startapp` and :djadmin:`startproject` documentation."
msgstr ""

#: ../../releases/1.4.txt:210
#: ../../releases/1.4-alpha-1.txt:432
#: ../../releases/1.4-beta-1.txt:470
# 076011ef187a48cc8e34cc14c010a10f
# d97fc2ea5cb74721911c0915e9b6d9c0
# 3b4d52ebe55142378ec7ae9e64af305e
msgid "Improved WSGI support"
msgstr ""

#: ../../releases/1.4.txt:212
#: ../../releases/1.4-alpha-1.txt:434
#: ../../releases/1.4-beta-1.txt:472
# 95812ce1349a4a8694c55ec949568c60
# 6caf8b2307384b129102ca95f7fa7fe8
# c619ae56bfb348f9ab8e771cf4f89d78
msgid "The :djadmin:`startproject` management command now adds a :file:`wsgi.py` module to the initial project layout, containing a simple WSGI application that can be used for :doc:`deploying with WSGI app servers</howto/deployment/wsgi/index>`."
msgstr ""

#: ../../releases/1.4.txt:217
# a2343b1976d44e26afc2011bc85b7334
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, which makes it possible to run runserver with the same WSGI configuration that is used for deployment. The new :setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4.txt:223
#: ../../releases/1.4-alpha-1.txt:445
#: ../../releases/1.4-beta-1.txt:483
# 65fd733411e0454c9787116a14257924
# 6a99f36e0e66402ea79210ea74211564
# d9234613a3444caf9add5dfd193adca9
msgid "(The :djadmin:`runfcgi` management command also internally wraps the WSGI callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

#: ../../releases/1.4.txt:227
#: ../../releases/1.4-alpha-1.txt:63
#: ../../releases/1.4-beta-1.txt:79
# 8788366ed3e645f9bb73b487cd94566b
# 30b65aee0bed474584b7d32dbdaea6dd
# 4ee15da7a848409999946e8aaea64499
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

#: ../../releases/1.4.txt:229
# 3de8b55e668c467293e5e10a31077a76
msgid "Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method, which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4.txt:235
#: ../../releases/1.4-alpha-1.txt:71
#: ../../releases/1.4-beta-1.txt:87
# 580417f042e84fbfb244721162cd3f11
# 90f4e57e05244471aa15cc5df3e3d2dd
# d8cde712d10947b19df9eeb4ef2de0da
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.select_for_update`."
msgstr ""

#: ../../releases/1.4.txt:239
#: ../../releases/1.4-alpha-1.txt:75
#: ../../releases/1.4-beta-1.txt:91
# 52a53751429d4487a3407099789ec0f1
# 4cfd6b962e9e429a98bb015df36a4155
# 300187d24b544f39abcd893a99db9008
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

#: ../../releases/1.4.txt:241
# bc7df68d6ca54082b93b900a07e8472e
msgid "This method lets you create multiple objects more efficiently. It can result in significant performance increases if you have many objects."
msgstr ""

#: ../../releases/1.4.txt:244
# 7dbabfe13c974b92be4cffeb75166051
msgid "Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4.txt:247
#: ../../releases/1.4-alpha-1.txt:82
#: ../../releases/1.4-beta-1.txt:98
# 446920b52fbe491f8eca972c792f2fe0
# e7cc298cd58a4dadbe100bee5bd3a08e
# c95a21a7029b46929a54794d1e33aedb
msgid "See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:251
#: ../../releases/1.4-alpha-1.txt:86
#: ../../releases/1.4-beta-1.txt:102
# ca60b07ab53f41fcaaff43bb9ed9b314
# 3eebb0716b724a0888c638431001efa3
# ec82505a9f064d65bc39105104ce7d1c
msgid "``QuerySet.prefetch_related``"
msgstr ""

#: ../../releases/1.4.txt:253
# c5db97074e08429b8a0051d674bd6655
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need to fetch."
msgstr ""

#: ../../releases/1.4.txt:267
#: ../../releases/1.4-alpha-1.txt:102
#: ../../releases/1.4-beta-1.txt:118
# 001c15c96088423b9027afb698b3ab38
# 92e17b9bfa604ea6849a95f836b19dc2
# 7178d50bca564dceb2fb02d5e3f785a4
msgid "Improved password hashing"
msgstr ""

#: ../../releases/1.4.txt:269
#: ../../releases/1.4-alpha-1.txt:104
#: ../../releases/1.4-beta-1.txt:120
# c6a16c34fa7d420d9f55b37f15f2f78c
# 77c3ce043c0d45cb8b447194ddb85f84
# 82e3858c7abf404da7fec92c85b39694
msgid "Django's auth system (``django.contrib.auth``) stores passwords using a one-way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor speeds and theoretical attacks have revealed that SHA1 isn't as secure as we'd like. Thus, Django 1.4 introduces a new password storage system: by default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You can also easily choose a different algorithm (including the popular bcrypt_ algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

#: ../../releases/1.4.txt:283
# a8c6578472de466e80a9f46a5fb1defb
msgid "HTML5 doctype"
msgstr ""

#: ../../releases/1.4.txt:285
#: ../../releases/1.4-alpha-1.txt:121
#: ../../releases/1.4-beta-1.txt:152
# bbcd9547cd05491382a55b4c153fccc1
# 4ae98ba964b5401bab39143103519007
# f692bcb71c134d23994bd47c4347e1f1
msgid "We've switched the admin and other bundled templates to use the HTML5 doctype. While Django will be careful to maintain compatibility with older browsers, this change means that you can use any HTML5 features you need in admin pages without having to lose HTML validity or override the provided templates to change the doctype."
msgstr ""

#: ../../releases/1.4.txt:292
#: ../../releases/1.4-alpha-1.txt:128
#: ../../releases/1.4-beta-1.txt:159
# 7dbcf98d3ebe4e2b82f8b54653854755
# 94e9440996b441bdbf93b094de0c59de
# e5203785673e4305b81bef82457986c8
msgid "List filters in admin interface"
msgstr ""

#: ../../releases/1.4.txt:294
# 888f0bb3e6174ef1a3dc52d8b7420b94
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify change list filters by specifying a field lookup, but it didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4.txt:301
#: ../../releases/1.4-alpha-1.txt:137
#: ../../releases/1.4-beta-1.txt:168
# 3e51178a5f83409cb874a44bbe62d2b8
# 683319713c81465bb61365317d525bb1
# d2abba91baf44452a60c5fefffe5c0c2
msgid "Multiple sort in admin interface"
msgstr ""

#: ../../releases/1.4.txt:303
# c00681cf300442b399c35727cfb5f45e
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. We also added a :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (i.e., depending on the request)."
msgstr ""

#: ../../releases/1.4.txt:311
#: ../../releases/1.4-alpha-1.txt:147
#: ../../releases/1.4-beta-1.txt:178
# ebffa1ef39f74459bcac5eac9e746638
# 41584f46d1604b12a022be426393b155
# e9e7e7ffbad74b8b849fbf8972ba0e39
msgid "New ``ModelAdmin`` methods"
msgstr ""

#: ../../releases/1.4.txt:313
# 67d6c237eae24c19b03926ece3dfde6e
msgid "We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4.txt:317
# d5e7513a56f647eb91b761d99e15baac
msgid "Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` enable dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4.txt:324
#: ../../releases/1.4-alpha-1.txt:160
#: ../../releases/1.4-beta-1.txt:191
# c7af3777227344b5b903cf070237b08c
# 692fbcb7baa549bc96fb469cd1ba2fd3
# 3855337803d34c5790a878a1c2f92e70
msgid "Admin inlines respect user permissions"
msgstr ""

#: ../../releases/1.4.txt:326
# f94a1191a0674b148ffcc7df1bca9e17
msgid "Admin inlines now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4.txt:333
#: ../../releases/1.4-alpha-1.txt:169
#: ../../releases/1.4-beta-1.txt:200
# 964c829d11e54df3a70a9213286dc596
# fc6376c1b56e4dbf9eeda5ff98d61152
# f964598ad6ed4ed8aa872ab776c36fbd
msgid "Tools for cryptographic signing"
msgstr ""

#: ../../releases/1.4.txt:335
#: ../../releases/1.4-alpha-1.txt:171
#: ../../releases/1.4-beta-1.txt:202
# c6c14981c1cb4da6a6215032d21653dd
# 5024c1c18dec4dc3a4b655f11f92e607
# a9ee3fabff074be2ab3e1d0cf7dd215b
msgid "Django 1.4 adds both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../releases/1.4.txt:339
#: ../../releases/1.4-alpha-1.txt:175
#: ../../releases/1.4-beta-1.txt:206
# 95339e64d6d341b1ab6232aceb5472e8
# 35577abd7130447bbd08cc976d00f93d
# a7a70178b1a342778fda92580d1c5e69
msgid "See the :doc:`cryptographic signing </topics/signing>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:343
#: ../../releases/1.4-alpha-1.txt:179
#: ../../releases/1.4-beta-1.txt:210
# 5946e912412a4162b61c5ca96c0fd12f
# 23fd858876b44085b6fdd2494de34007
# a1baa383b4fa4f529e5c31bb05a7c2a1
msgid "Cookie-based session backend"
msgstr ""

#: ../../releases/1.4.txt:345
# 7026b9b7b83b4f91bc62599e4e8cc721
msgid "Django 1.4 introduces a cookie-based session backend that uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4.txt:351
# 1cb6030e8acf4a8aab001aff1f0cb01e
msgid "Session data is signed and validated by the server, but it's not encrypted. This means a user can view any data stored in the session but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4.txt:356
#: ../../releases/1.4-alpha-1.txt:185
#: ../../releases/1.4-beta-1.txt:223
# 2297d1e34a194ab6a531979d8b46195e
# 012c8a6c2b274f4c85a7ec4dba006190
# 9e1f23fe98854b59aebc8704a92f09ab
msgid "See the :ref:`cookie-based session backend <cookie-session-backend>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:360
#: ../../releases/1.4-alpha-1.txt:189
#: ../../releases/1.4-beta-1.txt:227
# 6c6db5830805417d9fd7b758af1f128b
# cb150bc965ea429598a7499f72b53588
# 1180f3c1d90d49a98e7308eecb4ee9b8
msgid "New form wizard"
msgstr ""

#: ../../releases/1.4.txt:362
# 560d9983712c4acab876b1dba0b7de10
msgid "The previous ``FormWizard`` from :mod:`django.contrib.formtools` has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4.txt:367
#: ../../releases/1.4-alpha-1.txt:196
#: ../../releases/1.4-beta-1.txt:234
# a93e95d0be504e95a8c492e7aa610207
# a418242d51594acb9f7545b3062ab695
# 5867c7cce42249fca300b1c0e63922ea
msgid "Django 1.4 ships with a session-based storage backend and a cookie-based storage backend. The latter uses the tools for :doc:`cryptographic signing </topics/signing>` also introduced in Django 1.4 to store the wizard's state in the user's cookies."
msgstr ""

#: ../../releases/1.4.txt:372
#: ../../releases/1.4-alpha-1.txt:201
#: ../../releases/1.4-beta-1.txt:239
# bd50325b1c10490f95bf3e1df73af897
# 95ef1728cd534b9bb9ca0ce18d0020e2
# 1a03984138dd450e8b46b0483bc474ad
msgid "See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:376
#: ../../releases/1.4-alpha-1.txt:205
#: ../../releases/1.4-beta-1.txt:243
# 2e95eabd48904a43933441528aed4b07
# 6eb468f90a224ec09eb828e673569834
# 35dd8578868c49e9b60fd6b8b97c1948
msgid "``reverse_lazy``"
msgstr ""

#: ../../releases/1.4.txt:378
# b008d8b23b5144bd8098bc9b19f4ff6f
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

#: ../../releases/1.4.txt:382
#: ../../releases/1.4-alpha-1.txt:211
#: ../../releases/1.4-beta-1.txt:249
# 94818a15e4c0410c889f25110f1e3af4
# 5507450e34684edfb3302436d35b5c21
# 2bc0713f38e34c108c91fb7b840f66b2
msgid "Translating URL patterns"
msgstr ""

#: ../../releases/1.4.txt:384
# 9b573d34eef140cd9f599697f227b59d
msgid "Django can now look for a language prefix in the URLpattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4.txt:392
#: ../../releases/1.4-alpha-1.txt:221
#: ../../releases/1.4-beta-1.txt:259
# 86cbbe32d18f4f92a2418f9b9662597a
# 1e442a505c6e43f88bb16685a9dec011
# ea3674a84e2d4ab5907229d888234422
msgid "Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

#: ../../releases/1.4.txt:394
#: ../../releases/1.4-alpha-1.txt:223
#: ../../releases/1.4-beta-1.txt:261
# 75a06a3c2a9e4770a0c742f718c8b018
# 460f14747823444b94e41aab0e804cd8
# f70000128610472ea5aff8dfd24d8820
msgid "The :ref:`contextual translation<contextual-markers>` support introduced in Django 1.3 via the ``pgettext`` function has been extended to the :ttag:`trans` and :ttag:`blocktrans` template tags using the new ``context`` keyword."
msgstr ""

#: ../../releases/1.4.txt:400
#: ../../releases/1.4-alpha-1.txt:229
#: ../../releases/1.4-beta-1.txt:267
# 56b390536f8c4d769a00ee2512862a86
# c6b78fa7c00043f5a26c92f1040d8531
# 294fb03d26cb482681d6abf5cc6f1b90
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

#: ../../releases/1.4.txt:402
# fa0b9fa96c904787bdaf40df1b940acd
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLconf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4.txt:411
#: ../../releases/1.4-alpha-1.txt:240
#: ../../releases/1.4-beta-1.txt:278
# e38b0c8d8f7c4d41b5ccf87ff48ce106
# 9ca08853e8cd41cbbd71352b79de6d06
# 10f882480f9043ceb44543e1f44443f5
msgid "Assignment template tags"
msgstr ""

#: ../../releases/1.4.txt:413
#: ../../releases/1.4-alpha-1.txt:242
#: ../../releases/1.4-beta-1.txt:280
# 354f338c10934eb484ef0f4a1a69e172
# 0420b6ddddc647f38c44dce181506ede
# 562998ad06724c32a5a1786160135398
msgid "A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` helper function was added to ``template.Library`` to ease the creation of template tags that store data in a specified context variable."
msgstr ""

#: ../../releases/1.4.txt:418
#: ../../releases/1.4-alpha-1.txt:247
#: ../../releases/1.4-beta-1.txt:285
# 408e959c8abb4d24bab7382ce5b2a176
# d052cdf105c0469c9ac571b3d85bbbba
# 68d1158ac7414daa85f60530c3bb7b97
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

#: ../../releases/1.4.txt:420
#: ../../releases/1.4-alpha-1.txt:249
#: ../../releases/1.4-beta-1.txt:287
# 4ae23408ec364ae4aeb0772c23c6fbc8
# 8b36be85b5274cc0ba30af2f90a399be
# 31c6e434688249a78e28582065ce9ed2
msgid "The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` template helper functions may now accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../releases/1.4.txt:436
# 201694ef3f8f42b399a1da5a12de0e5c
msgid "Then, in the template, any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4.txt:444
#: ../../releases/1.4-alpha-1.txt:273
#: ../../releases/1.4-beta-1.txt:311
# 9e5381747657470784a63908dfbcb620
# 9307213e26b84c7a85d433c529a5f5bb
# fc458bb1257a4bcda2b134c3532e2d63
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

#: ../../releases/1.4.txt:446
#: ../../releases/1.4-alpha-1.txt:275
#: ../../releases/1.4-beta-1.txt:313
# e5ca9fe8e2c54ba4a1d49b7a822b4395
# 9b53cff044b547d29bd1279b72b2c03f
# ba6a6c479e414018be27622a926b6557
msgid "In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` setting was ``True``, any exception raised during template rendering (even exceptions unrelated to template syntax) were wrapped in ``TemplateSyntaxError`` and re-raised. This was done in order to provide detailed template source location information in the debug 500 page."
msgstr ""

#: ../../releases/1.4.txt:452
#: ../../releases/1.4-alpha-1.txt:281
#: ../../releases/1.4-beta-1.txt:319
# e1342b378f364752bb014f6de4a45f71
# 7161322fa4604d589ecd2bf0bbddf07f
# 34dc5383fa544e2e96c9be8fc5aed895
msgid "In Django 1.4, exceptions are no longer wrapped. Instead, the original exception is annotated with the source information. This means that catching exceptions from template rendering is now consistent regardless of the value of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap ``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

#: ../../releases/1.4.txt:459
#: ../../releases/1.4-alpha-1.txt:288
#: ../../releases/1.4-beta-1.txt:326
# 2b6493cbeac744eb8a59cf9c44eb2dd2
# 67a362e24ddd4ea39b1567e5db8bad08
# b6155cf39fd9490d85007cec28e0a0da
msgid "``truncatechars`` template filter"
msgstr ""

#: ../../releases/1.4.txt:461
# 0cd9bf4b05014ad486eb239d0a4e9f12
msgid "This new filter truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4.txt:467
#: ../../releases/1.4-alpha-1.txt:296
#: ../../releases/1.4-beta-1.txt:334
# 4b1345a772454a26a2f7c620871d7c4d
# ad375d20c8244e6588b0bb91616a65cd
# 6abd9b70d96b47e9b2e8122b00696106
msgid "``static`` template tag"
msgstr ""

#: ../../releases/1.4.txt:469
#: ../../releases/1.4-alpha-1.txt:298
#: ../../releases/1.4-beta-1.txt:336
# 10a4469c77b24a6885633db6e3aac931
# a4f38d82dc3340d8a75add4a1af1b68b
# c023b62fc67249c1b6ffef03ddfa2d2f
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :ttag:`static<staticfiles-static>` template tag to refer to files saved with the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage backend's ``url`` method and therefore supports advanced features such as :ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

#: ../../releases/1.4.txt:476
#: ../../releases/1.4-alpha-1.txt:305
#: ../../releases/1.4-beta-1.txt:343
# d9ab26d5af37474fac556cb31dd8918f
# bdd851584fed4a7781e3fa4fa6e41220
# 4179f0e69237449c91f83db596970096
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

#: ../../releases/1.4.txt:478
# 12dfbe1292c0499890d001f937bb4a64
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend that caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4.txt:485
#: ../../releases/1.4-alpha-1.txt:315
#: ../../releases/1.4-beta-1.txt:353
# 3758c05d97f14c0db0e4cc59bf146f50
# 6722b57d239f4b2bb6c494814237e05a
# 9a950628ffb54fbcba4e9cd3f1339701
msgid "See the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` docs for more information."
msgstr ""

#: ../../releases/1.4.txt:489
#: ../../releases/1.4-alpha-1.txt:319
#: ../../releases/1.4-beta-1.txt:357
# bc7d72dbc30048d1aa20f444d3fb2d07
# 887cd25193df4035b71a7a8f00179d56
# 18e6391484d34ac0941312b79bf274ac
msgid "Simple clickjacking protection"
msgstr ""

#: ../../releases/1.4.txt:491
#: ../../releases/1.4-alpha-1.txt:321
#: ../../releases/1.4-beta-1.txt:359
# 35db4071437a44e38417e1393dc50419
# d4a4c94f4e514c11825124f586fb7714
# b5a1d1b439974edd8158118218a81a96
msgid "We've added a middleware to provide easy protection against `clickjacking <http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` header. It's not enabled by default for backwards compatibility reasons, but you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to help plug that security hole for browsers that support the header."
msgstr ""

#: ../../releases/1.4.txt:498
#: ../../releases/1.4-alpha-1.txt:328
#: ../../releases/1.4-beta-1.txt:366
# ab0ec86ca8e04c9f9753c7e675357477
# af50d0a9a2f843e7a77ce03264a84b79
# 79cf1e3e297d4b11bf7826a44aab21aa
msgid "CSRF improvements"
msgstr ""

#: ../../releases/1.4.txt:500
# e3481075d3a04deda42a9dfad1b5b7c5
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help with AJAX-heavy sites; protection for PUT and DELETE requests; and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which can improve the security and usefulness of CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4.txt:508
#: ../../releases/1.4-alpha-1.txt:338
#: ../../releases/1.4-beta-1.txt:376
# 4506c8d634c6467898e47c8e5065b49b
# fc313f3bee704418a13ced8aa5c4fb11
# d3c57059fd074181a8c3430c04fb7222
msgid "Error report filtering"
msgstr ""

#: ../../releases/1.4.txt:510
# 0d08627c1dfb467ca6026d5ec5a53c22
msgid "We added two function decorators, :func:`sensitive_variables` and :func:`sensitive_post_parameters`, to allow designating the local variables and POST parameters that may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4.txt:515
# 0b9f765d1b5b47a5822a6b70aa2aa557
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change`` and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4.txt:521
# 5476e74cf97e46abac8c3f070ce04981
msgid "You can override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4.txt:526
#: ../../releases/1.4-alpha-1.txt:356
#: ../../releases/1.4-beta-1.txt:394
# 890eee71e1a14554adb8c391ffe5d2fa
# 01fae6d28ea249c7beea69288d0a359a
# f74ef720611549619141d21a485126dd
msgid "Extended IPv6 support"
msgstr ""

#: ../../releases/1.4.txt:528
# 15e8d4e2d0cb46e389627b5e0e8a877d
msgid "Django 1.4 can now better handle IPv6 addresses with the new :class:`~django.db.models.fields.GenericIPAddressField` model field, :class:`~django.forms.fields.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`."
msgstr ""

#: ../../releases/1.4.txt:535
# 2234e1bf912a430d8c10b1d30718be3c
msgid "HTML comparisons in tests"
msgstr ""

#: ../../releases/1.4.txt:537
# 33a536696652406ea16269aabd7fe3e0
msgid "The base classes in :mod:`django.test` now have some helpers to compare HTML without tripping over irrelevant differences in whitespace, argument quoting/ordering and closing of self-closing tags. You can either compare HTML directly with the new :meth:`~django.test.SimpleTestCase.assertHTMLEqual` and :meth:`~django.test.SimpleTestCase.assertHTMLNotEqual` assertions, or use the ``html=True`` flag with :meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase.assertNotContains` to test whether the client's response contains a given HTML fragment. See the :ref:`assertions documentation <assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:550
#: ../../releases/1.4-beta-1.txt:528
# cd98c008b12643bfae66749a6faadf16
# fe7246ed67184549b831258a4ec146ba
msgid "Two new date format strings"
msgstr ""

#: ../../releases/1.4.txt:552
#: ../../releases/1.4-beta-1.txt:530
# 90ecc8edc37a437183e5fd55669e7be9
# 87f6f7befb2143378305821467df7fd3
msgid "Two new :tfilter:`date` formats were added for use in template filters, template tags and :ref:`format-localization`:"
msgstr ""

#: ../../releases/1.4.txt:555
#: ../../releases/1.4-beta-1.txt:533
# aa87a512a02b4c0db31cfa7b4fda780a
# 14c1a4cff8224c92b5c684a15501bc3d
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

#: ../../releases/1.4.txt:556
#: ../../releases/1.4-beta-1.txt:534
# fb608786e4d84d7a922e50038466a582
# ab7912c6393c45d48e39ac9f8c5c98fa
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

#: ../../releases/1.4.txt:558
#: ../../releases/1.4-beta-1.txt:536
# 735d1b597cbe4b709990001d9804ab8c
# 4e3ee09cf3cb40ad9ec3a734ae68dc79
msgid "Please make sure to update your :ref:`custom format files <custom-format-files>` if they contain either ``e`` or ``o`` in a format string. For example a Spanish localization format previously only escaped the ``d`` format character::"
msgstr ""

#: ../../releases/1.4.txt:565
#: ../../releases/1.4-beta-1.txt:543
# 4e8d03e7ac704877add49e54532c6ca0
# d89b0df6b44a421f9d2c811178b6974e
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

#: ../../releases/1.4.txt:569
#: ../../releases/1.4-beta-1.txt:547
# 4cae6f54d3e142f7a19745b958db23a2
# dba159948cf4471ab7f50ec3044e4c59
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

#: ../../releases/1.4.txt:572
#: ../../releases/1.4-alpha-1.txt:490
#: ../../releases/1.4-beta-1.txt:550
#: ../../releases/1.5.txt:223
#: ../../releases/1.5-alpha-1.txt:236
#: ../../releases/1.5-beta-1.txt:234
# 72f599d4ecaa428d9bc558ad31fc7461
# d3fa84a389d84030820059809cc522e4
# 4f1290a751bc4983a57b93e88c01764c
# 4b6017942e474188a3fcb9258d293783
# 6f04420c382a43dfb6b5b08f6ff383e4
# 16a4b285ee7343468628c2dd83e79d6d
msgid "Minor features"
msgstr ""

#: ../../releases/1.4.txt:574
#: ../../releases/1.4-alpha-1.txt:492
#: ../../releases/1.4-beta-1.txt:552
# 8ce460e4d7914b75a6c516b7f51ffe25
# eb737f32cfbc44ce8fcc6690dbaac641
# 580dae004e584bbe80f2b0547153466e
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.4.txt:576
# cec6c3a4900449f79b6f4606c77a2249
msgid "A more usable stacktrace in the technical 500 page. Frames in the stack trace that reference Django's framework code are dimmed out, while frames in application code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in application code."
msgstr ""

#: ../../releases/1.4.txt:581
#: ../../releases/1.4-alpha-1.txt:499
#: ../../releases/1.4-beta-1.txt:559
# 6cf3e26ea5844d2c9bd17e2fdee16ec9
# c11a017d7de54f518b76ee2fbc1e2077
# c8d9fbd8ae5f48d4a52a7fd2f57c895f
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:583
#: ../../releases/1.4-alpha-1.txt:501
#: ../../releases/1.4-beta-1.txt:561
# ed2f3a0ea6ab4b488495226f14e08e9e
# 51b0a36f0a164430ba3034e520a9911f
# 331333088bdb410c8e71963cfeaa4afa
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

#: ../../releases/1.4.txt:585
#: ../../releases/1.4-alpha-1.txt:503
#: ../../releases/1.4-beta-1.txt:563
# 181fbbf228324e4ab9d78ab23799b67f
# b736fcacaefe4680ab50ba06303665f5
# 703c9eca3aa945c9b7b7d393ab7f6492
msgid "In the documentation, a helpful :doc:`security overview </topics/security>` page."
msgstr ""

#: ../../releases/1.4.txt:588
# 5eca5e82dc1743f58f5b8ed44352ff96
msgid "The :func:`django.contrib.auth.models.check_password` function has been moved to the :mod:`django.contrib.auth.hashers` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4.txt:592
# 788340f3de7e4260bc31898e475ca8e8
msgid "The :djadmin:`collectstatic` management command now has a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4.txt:596
# fe1bc3cb02654686b48805be22bcf519
msgid "It's now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4.txt:599
#: ../../releases/1.4-alpha-1.txt:517
#: ../../releases/1.4-beta-1.txt:577
# a3546b028a3941bbb5bbe88b032ad193
# ab7edf767b064c658d0fa504840b26b4
# 467e814a3c8d43ab9baff4d19b9696c8
msgid "A new 403 response handler has been added as ``'django.views.defaults.permission_denied'``. You can set your own handler by setting the value of :data:`django.conf.urls.handler403`. See the documentation about :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

#: ../../releases/1.4.txt:605
# 736826ef291c430d8c58d9842309bf7f
msgid "The :djadmin:`makemessages` command uses a new and more accurate lexer, `JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

#: ../../releases/1.4.txt:610
#: ../../releases/1.4-alpha-1.txt:523
#: ../../releases/1.4-beta-1.txt:583
# 784065a7f54e431fb7d7452eb58b3970
# aa9a250b7db54792a5e3035bfc39844d
# 249ee1a998e94da28e2cd8ede463175f
msgid "The :ttag:`trans` template tag now takes an optional ``as`` argument to be able to retrieve a translation string without displaying it but setting a template context variable instead."
msgstr ""

#: ../../releases/1.4.txt:614
#: ../../releases/1.4-alpha-1.txt:527
#: ../../releases/1.4-beta-1.txt:587
# 21a166435e54438cbff6d5762c1d1af3
# c725e5a1810a4726a06a966dd42ff108
# 6aff39b1578c494c8d59d95b762de9c3
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../releases/1.4.txt:616
# 2b21b25359d1410e9c079d65484f5617
msgid "If your Django app is behind a proxy, you might find the new :setting:`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your proxy \"eating\" the fact that a request came in via HTTPS. But only use this setting if you know what you're doing."
msgstr ""

#: ../../releases/1.4.txt:621
# 2858550e2f3c48c190f6843ea10b2bb6
msgid "A new, plain-text, version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code. (:meth:`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

#: ../../releases/1.4.txt:626
# d281581d86264ad089ab4262ebbf888a
msgid "Like its HTML counterpart, it contains a collection of different pieces of information about the state of the application."
msgstr ""

#: ../../releases/1.4.txt:629
# 5d529dc958e54214a136bde90d75ae19
msgid "This should make it easier to read when debugging interaction with client-side JavaScript."
msgstr ""

#: ../../releases/1.4.txt:632
#: ../../releases/1.4-alpha-1.txt:540
#: ../../releases/1.4-beta-1.txt:600
# 9a68930e0e0142c1ab982a2576a5c93c
# 678f413c263349ebaccef55ff6923652
# baedcb82386f411fa9a698cca1e261ca
msgid "Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` command."
msgstr ""

#: ../../releases/1.4.txt:635
#: ../../releases/1.4-alpha-1.txt:543
#: ../../releases/1.4-beta-1.txt:603
# 5bce484426354946aba83159274d7f8e
# 7865367f2f5143d2b3daed5c6f8dfaaf
# b323687c7617413fa6fa1a5962fd19da
msgid "Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for better compatibility with the other cache backends."
msgstr ""

#: ../../releases/1.4.txt:639
#: ../../releases/1.4-alpha-1.txt:547
#: ../../releases/1.4-beta-1.txt:607
# 0bdc1381b4ed4ac596dba8cc5972ce4e
# 3098c0230f73486784065c0a0d9c64d0
# 98eaaae52ece4e8daa6692aec0a6c1e1
msgid "Added support in the ORM for generating ``SELECT`` queries containing ``DISTINCT ON``."
msgstr ""

#: ../../releases/1.4.txt:642
#: ../../releases/1.4-alpha-1.txt:550
#: ../../releases/1.4-beta-1.txt:610
# e8f21b0888264e6292500352fb37dff4
# a7009c60ea1e4dfca983d6a91e67fec5
# 092ead6932f94fd3bd2bc73c69c7dd5e
msgid "The ``distinct()`` ``QuerySet`` method now accepts an optional list of model field names. If specified, then the ``DISTINCT`` statement is limited to these fields. This is only supported in PostgreSQL."
msgstr ""

#: ../../releases/1.4.txt:646
#: ../../releases/1.4-alpha-1.txt:554
#: ../../releases/1.4-beta-1.txt:614
# 97e84732654c41ca99f2232292a8c180
# 1e1d28e92f6049379c005c8582066a9b
# 2821c6d04cb446cf9657d3a6511224e0
msgid "For more details, see the documentation for :meth:`~django.db.models.query.QuerySet.distinct`."
msgstr ""

#: ../../releases/1.4.txt:649
# db027dc2367c4c0ea471fc81561cd744
msgid "The admin login page will add a password reset link if you include a URL with the name `'admin_password_reset'` in your urls.py, so plugging in the built-in password reset mechanism and making it available is now much easier. For details, see :ref:`auth_password_reset`."
msgstr ""

#: ../../releases/1.4.txt:654
# 85f02177903f409fb81917ea1d51cb9f
msgid "The MySQL database backend can now make use of the savepoint feature implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

#: ../../releases/1.4.txt:657
# c97e546513bd4958b07fd79a2fe27f5c
msgid "It's now possible to pass initial values to the model forms that are part of both model formsets and inline model formsets as returned from factory functions ``modelformset_factory`` and ``inlineformset_factory`` respectively just like with regular formsets. However, initial values only apply to extra forms, i.e. those which are not bound to an existing model instance."
msgstr ""

#: ../../releases/1.4.txt:663
# 43f729fdd6a840e8bcdbb7bfa368b08c
msgid "The sitemaps framework can now handle HTTPS links using the new :attr:`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class attribute."
msgstr ""

#: ../../releases/1.4.txt:667
# f2216c7d33984e23babd9e06c0ee7992
msgid "A new :class:`django.test.SimpleTestCase` subclass of :class:`unittest.TestCase` that's lighter than :class:`django.test.TestCase` and company. It can be useful in tests that don't need to hit a database. See :ref:`testcase_hierarchy_diagram`."
msgstr ""

#: ../../releases/1.4.txt:674
#: ../../releases/1.4-alpha-1.txt:558
#: ../../releases/1.4-beta-1.txt:626
# 3770004fda684356bc1ec6070a0aab78
# c77f8526464c49e7b85aa0cd8c3d94e7
# d1bc08e77b7a442c8e853b50ffa964dc
msgid "Backwards incompatible changes in 1.4"
msgstr ""

#: ../../releases/1.4.txt:677
# 1eb42dd2af8948788e20c24d213a792a
msgid "SECRET_KEY setting is required"
msgstr ""

#: ../../releases/1.4.txt:679
# ffe7566961b74444b8c86631191da81a
msgid "Running Django with an empty or known :setting:`SECRET_KEY` disables many of Django's security protections and can lead to remote-code-execution vulnerabilities. No Django site should ever be run without a :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:684
# 3f371398221849148d96a6b13ac0d258
msgid "In Django 1.4, starting Django with an empty :setting:`SECRET_KEY` will raise a `DeprecationWarning`. In Django 1.5, it will raise an exception and Django will refuse to start. This is slightly accelerated from the usual deprecation path due to the severity of the consequences of running Django with no :setting:`SECRET_KEY`."
msgstr ""

#: ../../releases/1.4.txt:691
#: ../../releases/1.4-alpha-1.txt:561
#: ../../releases/1.4-beta-1.txt:629
# 3735265ed7c34b889c9300c91e5639b6
# f2e09c8d92254d909ea98a02018db416
# 952f7b9c9b3e47a0931aeae98b715325
msgid "django.contrib.admin"
msgstr ""

#: ../../releases/1.4.txt:693
#: ../../releases/1.4-alpha-1.txt:563
#: ../../releases/1.4-beta-1.txt:631
# c86315b9bd4e428697257a25154f2a29
# e21328499cc84f39b0b7350846638e8a
# 2ec742d1621f495b88a6836696c82490
msgid "The included administration app ``django.contrib.admin`` has for a long time shipped with a default set of static files such as JavaScript, images and stylesheets. Django 1.3 added a new contrib app ``django.contrib.staticfiles`` to handle such files in a generic way and defined conventions for static files included in apps."
msgstr ""

#: ../../releases/1.4.txt:699
# fc167bef9e934179a8d7102bd0270cb9
msgid "Starting in Django 1.4, the admin's static files also follow this convention, to make the files easier to deploy. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files live on a Web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4.txt:707
# 2214fbfa0f1840f78a604b481963d516
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your Web server serves those files correctly. The development server continues to serve the admin files just like before. Read the :doc:`static files howto </howto/static-files>` for more details."
msgstr ""

#: ../../releases/1.4.txt:713
# bbd836ac628a49c791c72241463dfc7a
msgid "If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``), make sure to also set your :setting:`STATIC_URL` setting to the correct URL -- for example, ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4.txt:720
# 25ea3b09840540839cff5c90bb508158
msgid "If you're implicitly relying on the path of the admin static files within Django's source code, you'll need to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4.txt:726
#: ../../releases/1.4-alpha-1.txt:597
#: ../../releases/1.4-beta-1.txt:665
# c5cd350560af43ed8576df1dc2d82d00
# 41547142b9a54cd0a7650c693d890448
# 0d5e86dc77734de69c6edd35b2342098
msgid "Supported browsers for the admin"
msgstr ""

#: ../../releases/1.4.txt:728
# 4ce17b6cc95a4eb893701f1974984af0
msgid "Django hasn't had a clear policy on which browsers are supported by the admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

#: ../../releases/1.4.txt:733
# 85f0a5e820aa4cca82d4997d0b6a2b86
msgid "Released over 10 years ago, IE6 imposes many limitations on modern Web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4.txt:737
# 9ce0812af6a84cc48efb2a04ae5630d5
msgid "Obviously, this new policy **has no impact** on sites you develop using Django. It only applies to the Django admin. Feel free to develop apps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4.txt:744
#: ../../releases/1.4-alpha-1.txt:614
#: ../../releases/1.4-beta-1.txt:682
# 747e774f7cef4af688e3f3f6d500ce7b
# de1a3c61d8f542f68b39231933c59ea2
# f9160afa4e624882b10940c4c0ba4464
msgid "Removed admin icons"
msgstr ""

#: ../../releases/1.4.txt:746
# fa14c30e032c4b0aa35cf1424648164c
msgid "As part of an effort to improve the performance and usability of the admin's change-list sorting interface and :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4.txt:752
#: ../../releases/1.4-alpha-1.txt:622
#: ../../releases/1.4-beta-1.txt:690
# 6ed0015c250f4f97ad9f40b8ba7409fc
# 70844c1a88564d848b117088132718ff
# d5a9cf9fc4ac43e6bc34859d71a3e14d
msgid "Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and ``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-icons.gif``."
msgstr ""

#: ../../releases/1.4.txt:758
# 19d1ac1bdd304a9bb19aa0bc90bbd2c6
msgid "If you used those icons to customize the admin, then you'll need to replace them with your own icons or get the files from a previous release."
msgstr ""

#: ../../releases/1.4.txt:762
#: ../../releases/1.4-alpha-1.txt:632
#: ../../releases/1.4-beta-1.txt:700
# 7cfc7a8d7c1d44debf6aa89a2419f095
# e25d072c75024174a2a54d367c465a6c
# 16453c27f24a4d8e828691d0220e0d11
msgid "CSS class names in admin forms"
msgstr ""

#: ../../releases/1.4.txt:764
# 9893f74ef2eb483b873fd97616960dd4
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), we added a prefix (\"field-\") to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You'll need to take that prefix into account in your custom style sheets or JavaScript files if you previously used plain field names as selectors for custom styles or JavaScript transformations."
msgstr ""

#: ../../releases/1.4.txt:772
#: ../../releases/1.4-alpha-1.txt:642
#: ../../releases/1.4-beta-1.txt:710
# 318313af3d2447868219d02c7920c475
# 876c4f983f2b40d69c2ba204225864f7
# a8fdf74a5fb64b0d9f6df9d222352966
msgid "Compatibility with old signed data"
msgstr ""

#: ../../releases/1.4.txt:774
#: ../../releases/1.4-alpha-1.txt:644
#: ../../releases/1.4-beta-1.txt:712
# 7674f5cd097646f6bbf50b6d1cab8a58
# e150c84238f7489cabcaef7f03f373ea
# 737fcabbacc84020a35139f7909e9b0f
msgid "Django 1.3 changed the cryptographic signing mechanisms used in a number of places in Django. While Django 1.3 kept fallbacks that would accept hashes produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

#: ../../releases/1.4.txt:778
#: ../../releases/1.4-alpha-1.txt:648
#: ../../releases/1.4-beta-1.txt:716
# 715f9ad941ac4eb6943730ac531b8ade
# 12d6ff67fc4a47f2abb1fac531d310c5
# 7dc0b13f45844f13bf3acec767365274
msgid "So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/invalidate certain pieces of data that have been cryptographically signed using an old method. To avoid this, use Django 1.3 first for a period of time to allow the signed data to expire naturally. The affected parts are detailed below, with 1) the consequences of ignoring this advice and 2) the amount of time you need to run Django 1.3 for the data to expire or become irrelevant."
msgstr ""

#: ../../releases/1.4.txt:785
#: ../../releases/1.4-alpha-1.txt:655
#: ../../releases/1.4-beta-1.txt:723
# d1cd2b7ca95f4cb28d915404ee87dd4f
# 9c8113c6119a4f3ebb1e9dbef684af3e
# bd2d9968d9a64920b838873d914451a5
msgid "``contrib.sessions`` data integrity check"
msgstr ""

#: ../../releases/1.4.txt:787
# d715d782ca9d4bbd9649af432c0484c9
msgid "Consequences: The user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4.txt:789
# e1e962bd5ec14c71b9141fee0ad49d17
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4.txt:791
#: ../../releases/1.4-alpha-1.txt:661
#: ../../releases/1.4-beta-1.txt:729
# 18834376bdbf4b328ad11af2289ec3a2
# 2c11f8ffc7d345d9a9e76923354dd42b
# b039ed8ca8fc47e0994e6176522cabd9
msgid "``contrib.auth`` password reset hash"
msgstr ""

#: ../../releases/1.4.txt:793
# f4cd384afb8345adb5ff40cc0ac454d4
msgid "Consequences: Password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4.txt:795
# 2ed8500f58604fd189326ded1d8e7890
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4.txt:797
# 23da3e4e4424487284cfa8580930fc40
msgid "Form-related hashes: these have a are much shorter lifetime and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4.txt:802
#: ../../releases/1.4-alpha-1.txt:671
#: ../../releases/1.4-beta-1.txt:739
# dcdc953d190c460294839fcbaf3c485f
# d6688d5786cf4dcba59148caa19baed5
# 09a8baea331847189f07188ecb90c88e
msgid "``contrib.comments`` form security hash"
msgstr ""

#: ../../releases/1.4.txt:804
# 5e679f61ae8d4400854c820eaecc3569
msgid "Consequences: The user will see the validation error \"Security hash failed.\""
msgstr ""

#: ../../releases/1.4.txt:806
# 2dcb17ad9a904d4baad27f40def994f1
msgid "Time period: The amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4.txt:809
#: ../../releases/1.4-alpha-1.txt:678
#: ../../releases/1.4-beta-1.txt:746
# 3f83d0d0cd5d43498b698ebd6249a46e
# 9bdac78bde9840698f03722a3427e689
# 607fb299b9ad45e98a5c1ca9529548e3
msgid "``FormWizard`` security hash"
msgstr ""

#: ../../releases/1.4.txt:811
# 77d4da609d2946de8f6ac902a7c22745
msgid "Consequences: The user will see an error about the form having expired and will be sent back to the first page of the wizard, losing the data he has entered so far."
msgstr ""

#: ../../releases/1.4.txt:815
# 4ba0a7a8810e489192f50266c3498e7b
msgid "Time period: The amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4.txt:818
#: ../../releases/1.4-alpha-1.txt:687
#: ../../releases/1.4-beta-1.txt:755
# 61dc92d7734147eda7130fbb9968bb0b
# 0f78f459277549a699ab6099d3f5669f
# 44239f35385c4e7eaf1efc72188d4430
msgid "CSRF check"
msgstr ""

#: ../../releases/1.4.txt:820
# 3fd5e2064dae45fa999733598e395b66
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies only if you're upgrading from 1.1."
msgstr ""

#: ../../releases/1.4.txt:823
# 98d2b075e5a64ec4887eb7de55dd9d43
msgid "Consequences: The user will see a 403 error with any CSRF-protected POST form."
msgstr ""

#: ../../releases/1.4.txt:826
# c855c3e00a164170acaa9203eafb82c1
msgid "Time period: The amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4.txt:829
# 31be561577644ce89cf731f85f79b27e
msgid "``contrib.auth`` user password hash-upgrade sequence"
msgstr ""

#: ../../releases/1.4.txt:831
# ea477e13381a403b9aabd03e95bee143
msgid "Consequences: Each user's password will be updated to a stronger password hash when it's written to the database in 1.4. This means that if you upgrade to 1.4 and then need to downgrade to 1.3, version 1.3 won't be able to read the updated passwords."
msgstr ""

#: ../../releases/1.4.txt:836
# fb7abe814fa14aa6b4ae9c86fb1a2f73
msgid "Remedy: Set :setting:`PASSWORD_HASHERS` to use your original password hashing when you initially upgrade to 1.4. After you confirm your app works well with Django 1.4 and you won't have to roll back to 1.3, enable the new password hashes."
msgstr ""

#: ../../releases/1.4.txt:842
#: ../../releases/1.4-alpha-1.txt:699
#: ../../releases/1.4-beta-1.txt:767
# 3a7dabb157be441d925f04bae486fd6d
# 8e3004d63fa744dfaaa2f7df24f8467d
# 5f0370f5a5c14257b95e0810c95dcea5
msgid "django.contrib.flatpages"
msgstr ""

#: ../../releases/1.4.txt:844
# 25bc047cb29b48e98a2314ea4ca42db9
msgid "Starting in 1.4, the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""

#: ../../releases/1.4.txt:852
# 7bb26b787c414dd79da7360460b77afe
msgid "Also, redirects returned by flatpages are now permanent (with 301 status code), to match the behavior of :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4.txt:856
#: ../../releases/1.4-alpha-1.txt:712
#: ../../releases/1.4-beta-1.txt:780
# 9a4fcbbcd5054b208046941bb47eb954
# 77689a5d9f8440e1b6d0ad008e86b827
# 8a797b627acf4b14b55b25e638ba815e
msgid "Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

#: ../../releases/1.4.txt:858
# 900bb1c1d40a43b984f22680b172ffb0
msgid "As a consequence of time-zone support, and according to the ECMA-262 specification, we made changes to the JSON serializer:"
msgstr ""

#: ../../releases/1.4.txt:861
#: ../../releases/1.4-alpha-1.txt:717
#: ../../releases/1.4-beta-1.txt:785
# 4b0cc209ac5141078eac482dae64fa2f
# 877e4b36b1314a5d88a748fd04131395
# 41d0bcd82480402c81e58bdff1408c10
msgid "It includes the time zone for aware datetime objects. It raises an exception for aware time objects."
msgstr ""

#: ../../releases/1.4.txt:863
#: ../../releases/1.4-alpha-1.txt:719
#: ../../releases/1.4-beta-1.txt:787
# f3094fc4e4b14a53867870797973bcde
# 4c0b9a970a244335818b2a8838ba58b3
# 07243aa76b354818a0c71e4abeeb8b5b
msgid "It includes milliseconds for datetime and time objects. There is still some precision loss, because Python stores microseconds (6 digits) and JSON only supports milliseconds (3 digits). However, it's better than discarding microseconds entirely."
msgstr ""

#: ../../releases/1.4.txt:868
# fb89eb807b204b23ae66fdf69bbd0753
msgid "We changed the XML serializer to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4.txt:872
# aa881d05d7c340ef9c59fccc8ec2e9b6
msgid "Though the serializers now use these new formats when creating fixtures, they can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4.txt:876
#: ../../releases/1.4-alpha-1.txt:732
#: ../../releases/1.4-beta-1.txt:800
# df0c18cbb452498095bfcd8473c09f98
# 254654c960b54fc38bc5cfeb3c09f0a7
# 255037385a464055ba3380f22b0cbb28
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

#: ../../releases/1.4.txt:878
#: ../../releases/1.4-alpha-1.txt:734
#: ../../releases/1.4-beta-1.txt:802
# c13038808b2f4514a5c6296f6221df78
# 39cf746b77bd4e08a86323f398bb4d2a
# b4e9ba4f9b00492c91084167b67e360f
msgid "The database feature ``supports_timezone`` used to be ``True`` for SQLite. Indeed, if you saved an aware datetime object, SQLite stored a string that included an UTC offset. However, this offset was ignored when loading the value back from the database, which could corrupt the data."
msgstr ""

#: ../../releases/1.4.txt:883
# f72e6f627bd24990a4f41de9e3d0cbc1
msgid "In the context of time-zone support, this flag was changed to ``False``, and datetimes are now stored without time-zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4.txt:889
# 53af679cceac4763b30c13e9387b43a5
msgid "``MySQLdb``-specific exceptions"
msgstr ""

#: ../../releases/1.4.txt:891
# df209c77f31e4037b3f3af525d507e9a
msgid "The MySQL backend historically has raised :class:`MySQLdb.OperationalError` when a query triggered an exception. We've fixed this bug, and we now raise :class:`django.db.utils.DatabaseError` instead. If you were testing for :class:`MySQLdb.OperationalError`, you'll need to update your ``except`` clauses."
msgstr ""

#: ../../releases/1.4.txt:898
#: ../../releases/1.4-alpha-1.txt:745
#: ../../releases/1.4-beta-1.txt:813
# e6a098ed77ea4c4fa4c43560f9bff1a7
# da2593a823484833bbac8da0665ec679
# aab7a5685b63498290ef5e3a95f96c53
msgid "Database connection's thread-locality"
msgstr ""

#: ../../releases/1.4.txt:900
#: ../../releases/1.4-alpha-1.txt:747
#: ../../releases/1.4-beta-1.txt:815
# 7c1dddeb42684db2aaeec93292b7304c
# 0d56df25ac0d4afebc640cae3d5a3db8
# bbfc02e7396d45328988911b8588df93
msgid "``DatabaseWrapper`` objects (i.e. the connection objects referenced by ``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used to be thread-local. They are now global objects in order to be potentially shared between multiple threads. While the individual connection objects are now global, the ``django.db.connections`` dictionary referencing those objects is still thread-local. Therefore if you just use the ORM or ``DatabaseWrapper.cursor()`` then the behavior is still the same as before. Note, however, that ``django.db.connection`` does not directly reference the default ``DatabaseWrapper`` object anymore and is now a proxy to access that object's attributes. If you need to access the actual ``DatabaseWrapper`` object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

#: ../../releases/1.4.txt:912
#: ../../releases/1.4-alpha-1.txt:759
#: ../../releases/1.4-beta-1.txt:827
# 9685f24a6b164ff89ceb8bff422f5b3d
# 54cd659625ef4195b8db2ad4a837f3d7
# 4eebb01a3dcd4b6ea915d80cd0c53034
msgid "As part of this change, all underlying SQLite connections are now enabled for potential thread-sharing (by passing the ``check_same_thread=False`` attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous behavior by disabling thread-sharing by default, so this does not affect any existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()``."
msgstr ""

#: ../../releases/1.4.txt:918
# 7577209a78c8437193a404fc21e6b3c9
msgid "Finally, while it's now possible to pass connections between threads, Django doesn't make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4.txt:924
#: ../../releases/1.4-alpha-1.txt:771
#: ../../releases/1.4-beta-1.txt:839
# 078f5809fe514be8bc3d6f6a67c6de0f
# 2c4016dcae4949a0a630a73a894f3565
# c11aeef8cf324ea88d24fab1034649dc
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

#: ../../releases/1.4.txt:926
#: ../../releases/1.4-alpha-1.txt:773
#: ../../releases/1.4-beta-1.txt:841
# 796ee99311904b1f9d334aa78349eeff
# 0a8ec52dfcb34f78b3333b11092f6687
# dbc413eb22d043c086f36edee71462f1
msgid "Django's :doc:`comments app </ref/contrib/comments/index>` has historically supported excluding the comments of a special user group, but we've never documented the feature properly and didn't enforce the exclusion in other parts of the app such as the template tags. To fix this problem, we removed the code from the feed class."
msgstr ""

#: ../../releases/1.4.txt:932
# 0db65a7b2c234fc897905b4425fb6eb1
msgid "If you rely on the feature and want to restore the old behavior, use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4.txt:947
# fc1a9c11c6c04a03a56081024a46c578
msgid "Save this model manager in your custom comment app (e.g., in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4.txt:961
#: ../../releases/1.4-alpha-1.txt:808
#: ../../releases/1.4-beta-1.txt:876
# 9cb8fbb3728b45bfa2bcf930137510d6
# 1f88ce4317744799b47dcd5525d48903
# 7ef9964610944f4e8842270005ad8905
msgid "For more details, see the documentation about :doc:`customizing the comments framework </ref/contrib/comments/custom>`."
msgstr ""

#: ../../releases/1.4.txt:965
#: ../../releases/1.4-alpha-1.txt:812
#: ../../releases/1.4-beta-1.txt:880
# 704f83b1e4da42ca9bbbd76c7c3ba57b
# a2524ef3fede4bd198fcd441fb3eb9b2
# ba0ed88bbb434988bb2a68ba051cc147
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

#: ../../releases/1.4.txt:967
#: ../../releases/1.4-alpha-1.txt:814
#: ../../releases/1.4-beta-1.txt:882
# c25131740a484fa3a9d08797db2e0aa8
# 327bf7337d5546ab8f885d38b5b8939f
# 6f404ec918b34a7da5d2ec4157bfa5e0
msgid "Until Django 1.3, it was possible to exclude some URLs from Django's :doc:`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

#: ../../releases/1.4.txt:971
#: ../../releases/1.4-alpha-1.txt:818
#: ../../releases/1.4-beta-1.txt:886
# dd2c1280747047d3ab7d3a29d5317816
# b955e02e875640e2bcf54c01b23026c5
# 9ef5ad0a1af647a8a3edcb5e81b6cc8c
msgid "In Django 1.4, these two settings are superseded by :setting:`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

#: ../../releases/1.4.txt:975
#: ../../releases/1.4-alpha-1.txt:822
#: ../../releases/1.4-beta-1.txt:890
# f54cdd385f02415d8831dcbcca0021b5
# 82bc3777fc26472e9df8e81f21b99950
# a3aeaa8b91e7430fa58c376c22b1b47c
msgid "Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

#: ../../releases/1.4.txt:981
#: ../../releases/1.4-alpha-1.txt:828
#: ../../releases/1.4-beta-1.txt:896
# bcb6a9862dd04c289ef1297c27fd9252
# 29a3fa121e884d00ae3dfd73f86b5ccc
# b732a2f99268448687f8a6f071749a9f
msgid "It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` section or a ``favicon.ico``. As a consequence, the default values of :setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

#: ../../releases/1.4.txt:986
#: ../../releases/1.4-alpha-1.txt:833
#: ../../releases/1.4-beta-1.txt:901
# 3751002c715e499fb510441fc3e847e7
# dbdfdff354424242a1c1163e6dc74123
# c2795efd3f1e42db942f9680180634ed
msgid "If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you should add the following lines in your settings file::"
msgstr ""

#: ../../releases/1.4.txt:998
# 21d5e5364d7546fd8d55225bfdf32144
msgid "Don't forget to escape characters that have a special meaning in a regular expression, such as periods."
msgstr ""

#: ../../releases/1.4.txt:1002
#: ../../releases/1.4-alpha-1.txt:849
#: ../../releases/1.4-beta-1.txt:917
# cc92377e2178414cb70b46e6a2d04574
# 1244149fb2f445ada1c1da3cb83786ab
# c87a3d1987df4139b2ae6014ff68d860
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

#: ../../releases/1.4.txt:1004
# 31bbc69aca0b4824811206894d33bced
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection only against POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and TRACE, and we enforce protection on everything else."
msgstr ""

#: ../../releases/1.4.txt:1010
# e54d9d17f719466186297ccc35b6e5c9
msgid "If you're using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4.txt:1014
# 92aff6f480064ae1b1256686299bf1aa
msgid "Password reset view now accepts ``subject_template_name``"
msgstr ""

#: ../../releases/1.4.txt:1016
# d65dba9595314b0586b3eba0892fdadd
msgid "The ``password_reset`` view in ``django.contrib.auth`` now accepts a ``subject_template_name`` parameter, which is passed to the password save form as a keyword argument. If you are using this view with a custom password reset form, then you will need to ensure your form's ``save()`` method accepts this keyword argument."
msgstr ""

#: ../../releases/1.4.txt:1023
#: ../../releases/1.4-alpha-1.txt:861
#: ../../releases/1.4-beta-1.txt:929
# 0aa3618cb0e843a1944de367a1bbd84a
# bcc1c4ea8e654f37976722877ec542a6
# 27cd7c4e6d3340b8bcbd4ccfd8045f15
msgid "``django.core.template_loaders``"
msgstr ""

#: ../../releases/1.4.txt:1025
# a5a5796ab3cb4e3ba7fc4810310a196b
msgid "This was an alias to ``django.template.loader`` since 2005, and we've removed it without emitting a warning due to the length of the deprecation. If your code still referenced this, please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4.txt:1030
#: ../../releases/1.4-alpha-1.txt:868
#: ../../releases/1.4-beta-1.txt:936
# 89a44206fccc4e9a9b4c49878e213b8b
# 6e751e3715ae4efb832d947ca779eac4
# 566b0aff48bd4e7c84700442c4a3dad6
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

#: ../../releases/1.4.txt:1032
#: ../../releases/1.4-alpha-1.txt:870
#: ../../releases/1.4-beta-1.txt:938
# 7eff8de4906a4fe79f9be88b11dd70da
# f8fff71de07442efb18425f7bece72aa
# 295030b81ed541918c3c7ddfe3240f5f
msgid "This functionality has been removed due to intractable performance and security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

#: ../../releases/1.4.txt:1037
#: ../../releases/1.4-alpha-1.txt:875
#: ../../releases/1.4-beta-1.txt:943
# 52f0c29d02184021aea7044a84f8a7a1
# 33b09aba734945308214b36d109025d5
# e30b9e9dc82d48929724a711fa4e8aa8
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

#: ../../releases/1.4.txt:1039
# 5e5ecba4f7ed4e12b7d5ae987a6da01b
msgid "The ``open`` method of the base Storage class used to take an obscure parameter ``mixin`` that allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the `mixin` parameter, you can easily achieve the same by overriding the `open` method, like this::"
msgstr ""

#: ../../releases/1.4.txt:1063
#: ../../releases/1.4-alpha-1.txt:901
#: ../../releases/1.4-beta-1.txt:969
# edfe04b3291a47278b9a1847063bb189
# 9723fe3bc92f4ff5bc816a0666e570ed
# d37b102006f04e198c64027bd82d1bc8
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

#: ../../releases/1.4.txt:1065
# 32366dff526e431aa5b628bbc1fa993a
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, the YAML deserializer now uses ``yaml.safe_load`` for additional security."
msgstr ""

#: ../../releases/1.4.txt:1073
#: ../../releases/1.4-alpha-1.txt:1044
#: ../../releases/1.4-beta-1.txt:1112
# ce5717fa1a2f4f1a81eaba4ebfad4c4c
# 66b132b162c642a9bd8d06d2fd3b68ab
# a2cf14fdc24f47da8e40a4f1c4b1ea08
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

#: ../../releases/1.4.txt:1075
# 54925b134742442592d53e8e5d61803b
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from JavaScript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4.txt:1083
# 3b6753edf0f84d28bad91400d9ad64e3
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

#: ../../releases/1.4.txt:1085
# 0bc5123b459b423e8403646a6130a224
msgid "When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal digits, :tfilter:`urlize` now assumes that the URL is already escaped and doesn't apply URL escaping again. This is wrong for URLs whose unquoted form contains a ``%xx`` sequence, but such URLs are very unlikely to happen in the wild, because they would confuse browsers too."
msgstr ""

#: ../../releases/1.4.txt:1092
# 0493394ab1cf4e448fb52753dd3cbf6e
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

#: ../../releases/1.4.txt:1094
# 8f749441a09e47ccaa101bce45f7a520
msgid "It's now possible to check whether a template was used within a block of code with :meth:`~django.test.test.TestCase.assertTemplateUsed` and :meth:`~django.test.test.TestCase.assertTemplateNotUsed`. And they can be used as a context manager::"
msgstr ""

#: ../../releases/1.4.txt:1104
# 7d9c8f1546034af19b7353c265384919
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

#: ../../releases/1.4.txt:1107
# 09019c77ec09496faabf7af525103b67
msgid "Database connections after running the test suite"
msgstr ""

#: ../../releases/1.4.txt:1109
# f64a30bbd2f64bc189a40b6af0f5739a
msgid "The default test runner no longer restores the database connections after tests' execution. This prevents the production database from being exposed to potential threads that would still be running and attempting to create new connections."
msgstr ""

#: ../../releases/1.4.txt:1114
# b4b1f4ce8d4c402b97a2e0008a0004cf
msgid "If your code relied on connections to the production database being created after tests' execution, then you can restore the previous behavior by subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` method."
msgstr ""

#: ../../releases/1.4.txt:1120
# ac4db3f89a424f9891a773a946760a4e
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

#: ../../releases/1.4.txt:1122
# 9d635cccdf234225ad01241e606dcc89
msgid ":djadmin:`manage.py help <help>` now groups available commands by application. If you depended on the output of this command -- if you parsed it, for example -- then you'll need to update your code. To get a list of all available management commands in a script, use :djadmin:`manage.py help --commands <help>` instead."
msgstr ""

#: ../../releases/1.4.txt:1129
# 70da2ae574c04315924855171d607311
msgid "``extends`` template tag"
msgstr ""

#: ../../releases/1.4.txt:1131
# 024272a1afe944b9802096026ae3259e
msgid "Previously, the :ttag:`extends` tag used a buggy method of parsing arguments, which could lead to it erroneously considering an argument as a string literal when it wasn't. It now uses ``parser.compile_filter``, like other tags."
msgstr ""

#: ../../releases/1.4.txt:1135
# ddada688005c4b5ba6cbcfa58cd5010f
msgid "The internals of the tag aren't part of the official stable API, but in the interests of full disclosure, the ``ExtendsNode.__init__`` definition has changed, which may break any custom tags that use this class."
msgstr ""

#: ../../releases/1.4.txt:1140
# b6a415009e8e4db4a3efcf4af51acc36
msgid "Loading some incomplete fixtures no longer works"
msgstr ""

#: ../../releases/1.4.txt:1142
# bbda5fa6a4724e6e9be20811426a076c
msgid "Prior to 1.4, a default value was inserted for fixture objects that were missing a specific date or datetime value when auto_now or auto_now_add was set for the field. This was something that should not have worked, and in 1.4 loading such incomplete fixtures will fail. Because fixtures are a raw import, they should explicitly specify all field values, regardless of field options on the model."
msgstr ""

#: ../../releases/1.4.txt:1149
# 41afda996c81448282a19b1b58078369
msgid "Development Server Multithreading"
msgstr ""

#: ../../releases/1.4.txt:1151
# 8e9b31ec327c4b2bb75364eadde5a63f
msgid "The development server is now is multithreaded by default. Use the :djadminopt:`--nothreading` option to disable the use of threading in the development server::"
msgstr ""

#: ../../releases/1.4.txt:1158
# 300fcd3a37b64670ad37c3e813766d66
msgid "Attributes disabled in markdown when safe mode set"
msgstr ""

#: ../../releases/1.4.txt:1160
# 17c4b7d109654d19a9d4537ecb25362e
msgid "Prior to Django 1.4, attributes were included in any markdown output regardless of safe mode setting of the filter. With version > 2.1 of the Python-Markdown library, an enable_attributes option was added. When the safe argument is passed to the markdown filter, both the ``safe_mode=True`` and ``enable_attributes=False`` options are set. If using a version of the Python-Markdown library less than 2.1, a warning is issued that the output is insecure."
msgstr ""

#: ../../releases/1.4.txt:1169
# e0b9d51bd528429f950f656ea2f0dcc5
msgid "FormMixin get_initial returns an instance-specific dictionary"
msgstr ""

#: ../../releases/1.4.txt:1171
# b06d8e5bf2e64b5586c7948c3d3fe082
msgid "In Django 1.3, the ``get_initial`` method of the :class:`django.views.generic.edit.FormMixin` class was returning the class ``initial`` dictionary. This has been fixed to return a copy of this dictionary, so form instances can modify their initial data without messing with the class variable."
msgstr ""

#: ../../releases/1.4.txt:1178
#: ../../releases/1.4-alpha-1.txt:911
#: ../../releases/1.4-beta-1.txt:979
# 2aa2c16b4ff347e98c038e697f0ecadf
# bf2818dd8204424c85ba653c6f5a1427
# 2d81ea4083e74682ae608046eb3183af
msgid "Features deprecated in 1.4"
msgstr ""

#: ../../releases/1.4.txt:1181
#: ../../releases/1.4-alpha-1.txt:914
#: ../../releases/1.4-beta-1.txt:982
# 8b1f0efb70ca4e149e8446101d32112b
# 90c7600f8ea04e00a6a140340b3e3055
# 0f2183dda8a34790a902d17b969c7286
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

#: ../../releases/1.4.txt:1183
# 8c2c6624abe0458481b48ca5d3fdaa19
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated. Please see the documentation for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4.txt:1188
#: ../../releases/1.4-alpha-1.txt:921
#: ../../releases/1.4-beta-1.txt:989
# 75d4205230934986965c72d75650b9a6
# 0bf2a06a19f74c55a3aa52aa23005d5e
# 1c3963e733ce48a19f68ed021f12e82c
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

#: ../../releases/1.4.txt:1190
# 55b7184ed31d4f1c80c095b6de36c863
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we suggested using a more recent version because of performance improvements and, more importantly, the end of upstream support periods for 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4.txt:1195
#: ../../releases/1.4-alpha-1.txt:928
#: ../../releases/1.4-beta-1.txt:996
# 7ce1ddc47d5e421fb0283f45c6a57951
# 6c328bac5b434519801d00e526f4ccee
# 0d7b8b9a9ee54bd2884884eecf3e1028
msgid "Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL version it officially supports."
msgstr ""

#: ../../releases/1.4.txt:1199
#: ../../releases/1.4-alpha-1.txt:932
#: ../../releases/1.4-beta-1.txt:1000
# 038aba286b2a4cd78830c096de021b3d
# 3834273d0da048d7917fc46cbb5e0552
# 74ef43f81a304c91a252a7fc22c58407
msgid "Request exceptions are now always logged"
msgstr ""

#: ../../releases/1.4.txt:1201
# ab5a646deee24a3c94139cc092db8788
msgid "When we added :doc:`logging support </topics/logging/>` in Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4.txt:1208
#: ../../releases/1.4-alpha-1.txt:941
#: ../../releases/1.4-beta-1.txt:1009
# 513dd395d9154890887547f0f8a64804
# e95be3abcc704a84866903d3571beda2
# e39b2be47c534560901b36e1d073d22c
msgid "To increase the flexibility of error logging for requests, the ``'django.request'`` logger is now called regardless of the value of :setting:`DEBUG`, and the default settings file for new projects now includes a separate filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent admin error emails in ``DEBUG`` mode::"
msgstr ""

#: ../../releases/1.4.txt:1227
# 8900efea673642f3b8ba9ed1fa5ff991
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4.txt:1235
#: ../../releases/1.4-alpha-1.txt:968
#: ../../releases/1.4-beta-1.txt:1036
# ae1e91acf027479ba35e27bc8f6de783
# 03f26c4f073a4f8d90b66f74f5037e2d
# 079768f5cd074e348e84e577f9807e19
msgid "The existence of any ``'filters'`` key under the ``'mail_admins'`` handler will disable this backward-compatibility shim and deprecation warning."
msgstr ""

#: ../../releases/1.4.txt:1239
#: ../../releases/1.4-alpha-1.txt:972
#: ../../releases/1.4-beta-1.txt:1040
# f17b546974374e4ead459f3406588aed
# 954788d76db042b6a3e5adbc8732d639
# fac5278f3d06485c8f46f51ea8120f09
msgid "``django.conf.urls.defaults``"
msgstr ""

#: ../../releases/1.4.txt:1241
# 55e6ad16e33348e7bae3fa359b8a427d
msgid "Until Django 1.3, the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4.txt:1246
# 9522623c9122484d968e5bb662a13a7a
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4.txt:1249
#: ../../releases/1.4-alpha-1.txt:982
#: ../../releases/1.4-beta-1.txt:1050
# 05b710d4eba3461a97564d4ef2eecb1d
# 271207af933144a0be2d6ef9479c50cd
# d882b8cca49843a3800604d675331373
msgid "``django.contrib.databrowse``"
msgstr ""

#: ../../releases/1.4.txt:1251
#: ../../releases/1.4-alpha-1.txt:984
#: ../../releases/1.4-beta-1.txt:1052
# fba79c33fe274d4e99f31cfe6e7e3816
# de30042eb04f4704a43b956731df2623
# 1e5b71a1356c4034967a3d466469100d
msgid "Databrowse has not seen active development for some time, and this does not show any sign of changing. There had been a suggestion for a `GSOC project`_ to integrate the functionality of databrowse into the admin, but no progress was made. While Databrowse has been deprecated, an enhancement of ``django.contrib.admin`` providing a similar feature set is still possible."
msgstr ""

#: ../../releases/1.4.txt:1259
# a06cc36a80574c468ad745928982acca
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, so it's available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4.txt:1264
#: ../../releases/1.4-alpha-1.txt:997
#: ../../releases/1.4-beta-1.txt:1065
# ab3e3594763740cfba6915fc7e8ea999
# 67b34b3259c641fbbc4b199fcf708e11
# 7c8474b776154e938884c22d87c31347
msgid "``django.core.management.setup_environ``"
msgstr ""

#: ../../releases/1.4.txt:1266
#: ../../releases/1.4-alpha-1.txt:999
#: ../../releases/1.4-beta-1.txt:1067
# 5cae91b56ca94ee1937d108f4b4f1552
# ae6019bd84404f4abf5842b57aa41589
# 0f5324c2bafb4c8f857d56d8eef5cb25
msgid "This function temporarily modified ``sys.path`` in order to make the parent \"project\" directory importable under the old flat :djadmin:`startproject` layout. This function is now deprecated, as its path workarounds are no longer needed with the new ``manage.py`` and default project layout."
msgstr ""

#: ../../releases/1.4.txt:1271
# d090c531aacd4ba287ff1c78eb0828bc
msgid "This function was never documented or part of the public API, but it was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4.txt:1277
#: ../../releases/1.4-alpha-1.txt:1010
#: ../../releases/1.4-beta-1.txt:1078
# 1f9cc8b37f3b477b94d63a820cd2c12a
# b305303ca8d54edf98b002dd5e940262
# 2f17988e6d144236836dc09a0e979c3f
msgid "``django.core.management.execute_manager``"
msgstr ""

#: ../../releases/1.4.txt:1279
#: ../../releases/1.4-alpha-1.txt:1012
#: ../../releases/1.4-beta-1.txt:1080
# f78c38eed63e42089b9f9ddc886963b1
# a1e2addd693f4babaf42571785443fde
# 38577658e41b4c1bb81fe182d8659133
msgid "This function was previously used by ``manage.py`` to execute a management command. It is identical to ``django.core.management.execute_from_command_line``, except that it first calls ``setup_environ``, which is now deprecated. As such, ``execute_manager`` is also deprecated; ``execute_from_command_line`` can be used instead. Neither of these functions is documented as part of the public API, but a deprecation path is needed due to use in existing ``manage.py`` files."
msgstr ""

#: ../../releases/1.4.txt:1288
#: ../../releases/1.4-alpha-1.txt:1021
#: ../../releases/1.4-beta-1.txt:1089
# b9d294c48e5c41e5bb4e39102039bdef
# 286cdf793a4744ef9026c4369f9d7ae2
# c23a5747c98444e5b635b5e8e39e7e8f
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

#: ../../releases/1.4.txt:1290
#: ../../releases/1.4-alpha-1.txt:1023
#: ../../releases/1.4-beta-1.txt:1091
# bfb2b60c8e7c4b04b68094889a62d135
# 10db9eb19d5f4389b76a4aa4d9ec26bb
# 175221b00ee943129e60e2579c2c36c9
msgid "Two flags, ``is_safe`` and ``needs_autoescape``, define how each template filter interacts with Django's auto-escaping behavior. They used to be attributes of the filter function::"
msgstr ""

#: ../../releases/1.4.txt:1299
#: ../../releases/1.4-alpha-1.txt:1032
#: ../../releases/1.4-beta-1.txt:1100
# 6ec039b445304eac985950d00e3fbbaa
# 62f3bc17556a40eca6b7b5856b01d9bd
# 7cd2541cb34841238b8acf33dde98130
msgid "However, this technique caused some problems in combination with decorators, especially :func:`@stringfilter <django.template.defaultfilters.stringfilter>`. Now, the flags are keyword arguments of :meth:`@register.filter <django.template.Library.filter>`::"
msgstr ""

#: ../../releases/1.4.txt:1308
#: ../../releases/1.4-alpha-1.txt:1041
#: ../../releases/1.4-beta-1.txt:1109
# 153b764e89f1458fae4254610b66e45f
# 39383d3877a54ce6be3f4781cc1fa803
# 0f6f4db0fea045d2b570fe0bc3eba961
msgid "See :ref:`filters and auto-escaping <filters-auto-escaping>` for more information."
msgstr ""

#: ../../releases/1.4.txt:1311
#: ../../releases/1.4-alpha-1.txt:1051
#: ../../releases/1.4-beta-1.txt:1122
# 5771a7723f4c4e39b5ee6892c42636b4
# 9e7927d39e5140dfb0a0c47937e63c4e
# e5ce3bdc19264f1cb3c72bc88419238b
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

#: ../../releases/1.4.txt:1313
#: ../../releases/1.4-alpha-1.txt:1053
#: ../../releases/1.4-beta-1.txt:1124
# ca4ec2fa3ca344c9b795d8d87f2aac0c
# f0ab74ffd44c4d3493cfac8b7fec7722
# c2f4965f70df4d858bbe9278259f7271
msgid "Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in application names, like ``django.contrib.*``. The expansion was performed by a filesystem-based implementation of ``from <package> import *``. Unfortunately, `this can't be done reliably`_."
msgstr ""

#: ../../releases/1.4.txt:1318
#: ../../releases/1.4-alpha-1.txt:1058
#: ../../releases/1.4-beta-1.txt:1129
# 285f8783ae5644b186c7375097eb3338
# 502f962b79d340bcb6adae0053e91b98
# 2db614cc7f1f4a298df722157d8b8020
msgid "This behavior was never documented. Since it is un-pythonic and not obviously useful, it was removed in Django 1.4. If you relied on it, you must edit your settings file to list all your applications explicitly."
msgstr ""

#: ../../releases/1.4.txt:1325
#: ../../releases/1.4-alpha-1.txt:1065
#: ../../releases/1.4-beta-1.txt:1136
# 828c9bd9a46b43b19771510d8448eb10
# 2f001df219df41958a76213744edeec2
# fa88923731324ef5a5d48606c0075704
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

#: ../../releases/1.4.txt:1327
#: ../../releases/1.4-alpha-1.txt:1067
#: ../../releases/1.4-beta-1.txt:1138
# 747ddacfefcb4cc784fb5ccc0332b6cb
# 37e4a89c66504914bb7ab4d9515d52b5
# 8112d403b3c24ea3a0771208d87ef41b
msgid "This attribute was confusingly named ``HttpRequest.raw_post_data``, but it actually provided the body of the HTTP request. It's been renamed to ``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

#: ../../releases/1.4.txt:1332
# 200c18890a4d48f3af94eb48c10fe2df
msgid "``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

#: ../../releases/1.4.txt:1334
# 6cfbd2dc5ccc4b118aaf3715d4052755
msgid "In previous versions, ``Paginator`` objects used in sitemap classes were cached, which could result in stale site maps. We've removed the caching, so each request to a site map now creates a new Paginator object and calls the :attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your ``items()`` method is doing, this may have a negative performance impact. To mitigate the performance impact, consider using the :doc:`caching framework </topics/cache>` within your ``Sitemap`` subclass."
msgstr ""

#: ../../releases/1.4.txt:1344
# 18dd674236e3411e99ca1e07b6a093f3
msgid "Versions of Python-Markdown earlier than 2.1"
msgstr ""

#: ../../releases/1.4.txt:1346
# 2886f52419c14bd49f47a5882ad1998b
msgid "Versions of Python-Markdown earlier than 2.1 do not support the option to disable attributes. As a security issue, earlier versions of this library will not be supported by the markup contrib app in 1.5 under an accelerated deprecation timeline."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:3
# dffdfd7181fb4e8986ec7d95783004ae
msgid "Django 1.4 alpha release notes"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:5
# 343653e7073f4fe6854b2c56c7e269b4
msgid "December 22, 2011."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:7
# 7a960afffd7b47c29b3fb5cb363c4067
msgid "Welcome to Django 1.4 alpha!"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:9
# 1dfeae5bc9604e07b033c28fca540995
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:18
# ff8006b8e08e4d3fa78b3bd7deafd1a8
msgid "Django 1.4 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:30
#: ../../releases/1.4-beta-1.txt:46
# f92499bdbbd14d7881a5d056a8edef65
# d2ed1c2fd8e545ebbb2465e42032391b
msgid "While not a new feature, it's important to note that Django 1.4 introduces the second shift in our Python compatibility policy since Django's initial public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 drops support for Python 2.4. As such, the minimum Python version required for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 and 2.7."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:36
#: ../../releases/1.4-beta-1.txt:52
# c234b34455c844f2939f4a01b681d4f6
# 3bec55b70325410f8d3f667ba7303ee8
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.5 or newer as their default version. If you're still using Python 2.4, however, you'll need to stick to Django 1.3 until you can upgrade; per :doc:`our support policy </internals/release-process>`, Django 1.3 will continue to receive security support until the release of Django 1.5."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:43
#: ../../releases/1.4-beta-1.txt:59
# df0113ba35134b44bc125c185c873650
# 9b61ed10eea546ec82e3c5d23edb78ad
msgid "Django does not support Python 3.x at this time. A document outlining our full timeline for deprecating Python 2.x and moving to Python 3.x will be published before the release of Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:65
#: ../../releases/1.4-beta-1.txt:81
# 20d2a3deac0d4dcf8a6bc8eb1b775c7b
# a62b700ace0143d7a55ec4c094da871e
msgid "Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db.models.query.QuerySet.select_for_update>` method which generates a ``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of the transaction, meaning that other transactions cannot modify or delete rows matched by a ``FOR UPDATE`` query."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:77
#: ../../releases/1.4-beta-1.txt:93
# f45a07c8b8b347648afcb755a381fb33
# 8fc6659818a54e7e91ff076ee1ce3656
msgid "This method allows for more efficient creation of multiple objects in the ORM. It can provide significant performance increases if you have many objects. Django makes use of this internally, meaning some operations (such as database setup for test suites) have seen a performance benefit as a result."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:88
#: ../../releases/1.4-beta-1.txt:104
# 5f9f6b1bb8064a80aa2790c5838685d5
# 7c79c25b0e254ab3b6faa5c5cecc5b24
msgid "Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with a different strategy and broader scope, :meth:`~django.db.models.query.QuerySet.prefetch_related` has been added to :class:`~django.db.models.query.QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of the specified related lookups in a single batch as soon as the query begins to be evaluated. Unlike ``select_related``, it does the joins in Python, not in the database, and supports many-to-many relationships, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to fix a very common performance problem in which your code ends up doing O(n) database queries (or worse) if objects on your primary ``QuerySet`` each have many related objects that you also need."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:119
#: ../../releases/1.4-beta-1.txt:150
# 34807cbfa7444b73a37ce8194f9748cb
# 131b22287fcb4e979a46f63d057a212d
msgid "HTML5 Doctype"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:130
#: ../../releases/1.4-beta-1.txt:161
# f8ee86e32ebd4ba7919df325207f0cc2
# e547242dc2984fce8d533add21572a58
msgid "Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to specify change list filters by specifying a field lookup, but didn't allow you to create custom filters. This has been rectified with a simple API (previously used internally and known as \"FilterSpec\"). For more details, see the documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:139
#: ../../releases/1.4-beta-1.txt:170
# b7a8fdf670df48fd90015c58cf101b23
# d613b671207e487f920557ff77f4815c
msgid "The admin change list now supports sorting on multiple columns. It respects all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` attribute, and sorting on multiple columns by clicking on headers is designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the ordering dynamically (e.g. depending on the request) has also been added."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:149
#: ../../releases/1.4-beta-1.txt:180
# 3afa10fa4ee144d9b5cf5234286f3565
# 7b6a761092fc4dc290089594607468bf
msgid "A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related objects are saved in the admin."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:153
#: ../../releases/1.4-beta-1.txt:184
# da88fd6fd80f4c2b9f5bbec4181367b5
# 5d3145434ab04c008fe7980b9e09e60f
msgid "Two other new methods, :meth:`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django.contrib.admin.ModelAdmin.get_list_display_links` were added to :class:`~django.contrib.admin.ModelAdmin` to enable the dynamic customization of fields and links displayed on the admin change list."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:162
#: ../../releases/1.4-beta-1.txt:193
# 0e8314f5c5cb4325a6728be672411ac9
# d37b0d5e17c54d6296b38415e75e594b
msgid "Admin inlines will now only allow those actions for which the user has permission. For ``ManyToMany`` relationships with an auto-created intermediate model (which does not have its own permissions), the change permission for the related model determines if the user has the permission to add, change or delete relationships."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:181
#: ../../releases/1.4-beta-1.txt:212
# dc8a29dc5c884a0589e575ee64b8ab96
# 7fbc1930a97541d69b2ed20e8952dd3c
msgid "Django 1.4 introduces a new cookie-based backend for the session framework which uses the tools for :doc:`cryptographic signing </topics/signing>` to store the session data in the client's browser."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:191
#: ../../releases/1.4-beta-1.txt:229
# b9b47ab4481b46bb926acd503eff2dfd
# 1609fbafd8b6425bb064bc7642558324
msgid "The previous ``FormWizard`` from the formtools contrib app has been replaced with a new implementation based on the class-based views introduced in Django 1.3. It features a pluggable storage API and doesn't require the wizard to pass around hidden fields for every previous step."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:207
#: ../../releases/1.4-beta-1.txt:245
# d484fd6d5ece4022a4954e4e48291fa6
# f072309af9354db29901c027d8805f6c
msgid "A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:213
#: ../../releases/1.4-beta-1.txt:251
# 1659b58636904a0d81c352ff6d8f6ea5
# 261eeebe5de44a77a2222bbce15637b4
msgid "Django 1.4 gained the ability to look for a language prefix in the URL pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. Additionally, it's now possible to define translatable URL patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:231
#: ../../releases/1.4-beta-1.txt:269
# 90a35ca954b04bd78c23637a48e25fd0
# 5fe9f386233040019bcddfbd3d668535
msgid "Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail.SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views.generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:`~django.views.generic.detail.SingleObjectMixin` to enable the customization of URLConf keyword arguments used for single object generic views."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:265
#: ../../releases/1.4-beta-1.txt:303
# b7b70f72300649c19b4735cc17a13b74
# 65f236bf3ce24998bec916fb800a99fe
msgid "Then in the template any number of arguments may be passed to the template tag. For example:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:290
#: ../../releases/1.4-beta-1.txt:328
# ef2eb98483444d9699028f66a220d80c
# 479da80b947b4cebb8e11304b8997185
msgid "Added a filter which truncates a string to be no longer than the specified number of characters. Truncated strings end with a translatable ellipsis sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for more details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:307
#: ../../releases/1.4-beta-1.txt:345
# b52cc9310bb3469c8c667559e82a62a7
# 75dca623a826468f9dd5ea0e69df085d
msgid "In addition to the `static template tag`_, the :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend which caches the files it saves (when running the :djadmin:`collectstatic` management command) by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:330
#: ../../releases/1.4-beta-1.txt:368
# f08473155dc54298a33c7c7c2b3acb78
# cef4206728a049389a6650ea37da4bf9
msgid "We've made various improvements to our CSRF features, including the :func:`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help with AJAX heavy sites, protection for PUT and DELETE requests, and the :setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which can improve the security and usefulness of the CSRF protection. See the :doc:`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:340
#: ../../releases/1.4-beta-1.txt:378
# 84d96a1465d847b3b4d7453b8e91cf7c
# dd867bee3d324779aac63dd74c602126
msgid "Two new function decorators, :func:`sensitive_variables` and :func:`sensitive_post_parameters`, were added to allow designating the local variables and POST parameters which may contain sensitive information and should be filtered out of error reports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:345
#: ../../releases/1.4-beta-1.txt:383
# f06ded878afd4aa3a3b4e888a2a97a65
# 4cd8150f380d4c898e84141a9c88b211
msgid "All POST parameters are now systematically filtered out of error reports for certain views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` in :mod:`django.contrib.auth.views`, as well as ``user_change_password`` in the admin app) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:351
#: ../../releases/1.4-beta-1.txt:389
# d96538605a6e4de2ac6ef48c936af9b4
# cd0f7623baaf4489bb8ecf625ecfaa1c
msgid "You may override or customize the default filtering by writing a :ref:`custom filter<custom-error-reports>`. For more information see the docs on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:358
#: ../../releases/1.4-beta-1.txt:396
# c3187349d1b7441ea09908288dd64cd6
# 943637f306a44cd59518e567f0b12674
msgid "The previously added support for IPv6 addresses when using the runserver management command in Django 1.3 has now been further extended by adding a :class:`~django.db.models.fields.GenericIPAddressField` model field, a :class:`~django.forms.fields.GenericIPAddressField` form field and the validators :data:`~django.core.validators.validate_ipv46_address` and :data:`~django.core.validators.validate_ipv6_address`"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:374
#: ../../releases/1.4-beta-1.txt:412
# d02bf74a83c64487be0e944619f57013
# c31cf6eaca4b48ec8988ee0920c4335b
msgid "The previous ``manage.py`` called functions that are now deprecated, and thus projects upgrading to Django 1.4 should update their ``manage.py``. (The old-style ``manage.py`` will continue to work as before until Django 1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:394
#: ../../releases/1.4-beta-1.txt:432
# b93d3da94f2640979a328f9b99642824
# 93be7253e0a8479eb40e960e756b8ed4
msgid "If settings, URLconfs, and apps within the project are imported or referenced using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one directory up, so it is outside the project package rather than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:439
#: ../../releases/1.4-beta-1.txt:477
# 5dea2a99fe424883a8f7afebf21eb806
# 6e755294d29f460fa5302734ff25045c
msgid "The :djadmin:`built-in development server<runserver>` now supports using an externally-defined WSGI callable, so as to make it possible to run runserver with the same WSGI configuration that is used for deployment. A new :setting:`WSGI_APPLICATION` setting is available to configure which WSGI callable :djadmin:`runserver` uses."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:451
#: ../../releases/1.4-beta-1.txt:489
# fb1f1dee3fb04fb59adb5bae0d484e82
# 4df2cace59594604852d98e9c4e23670
msgid "The :djadmin:`startapp` and :djadmin:`startproject` management commands got a ``--template`` option for specifying a path or URL to a custom app or project template."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:455
#: ../../releases/1.4-beta-1.txt:493
# 21f0bb73dde945bfa129a46b9a019f04
# 9dad55dc64d74c529c1d7e335e3bd723
msgid "For example, Django will use the ``/path/to/my_project_template`` directory when running the following command::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:472
#: ../../releases/1.4-beta-1.txt:510
# 768f09283bcd445fa2e1ec25cab9fbca
# 7c6f482ab10444219096a8d7988cf04b
msgid "Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's enabled, Django stores date and time information in UTC in the database, uses time zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:477
#: ../../releases/1.4-beta-1.txt:515
# 2ae72e48790347e2af4f277819a0f531
# 66e5984286fb4b7ea5534b19a8d8cfdc
msgid "Reasons for using this feature include:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:485
#: ../../releases/1.4-beta-1.txt:523
# 0654079999464f08926553c0a4a96b6b
# 0d82d92c048e48319c3ade4916b1c33e
msgid "Time zone support is enabled by default in new projects created with :djadmin:`startproject`. If you want to use this feature in an existing project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:494
#: ../../releases/1.4-beta-1.txt:554
# c268c055d06b4db3bfab55e853e7777f
# eed4a2295f41420f82c10e868a3948ec
msgid "A more usable stacktrace in the technical 500 page: frames in the stack trace which reference Django's code are dimmed out, while frames in user code are slightly emphasized. This change makes it easier to scan a stacktrace for issues in user code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:506
#: ../../releases/1.4-beta-1.txt:566
# 997c991b64cf4b0ca930edb5dae2ec92
# 75048c6950d5443d9aec5efdc473c709
msgid "The :func:`django.contrib.auth.models.check_password` function has been moved to the :mod:`django.contrib.auth.utils` module. Importing it from the old location will still work, but you should update your imports."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:510
#: ../../releases/1.4-beta-1.txt:570
# efc9257042b1475298a38a4c41455f32
# 8d3263d2f694436ba2b741a463ae028b
msgid "The :djadmin:`collectstatic` management command gained a ``--clear`` option to delete all files at the destination before copying or linking the static files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:514
#: ../../releases/1.4-beta-1.txt:574
# 8887eb0d0b634768bd4d6792d1c5f2aa
# 1e37241b5c134f469b4f3dc617027c31
msgid "It is now possible to load fixtures containing forward references when using MySQL with the InnoDB database engine."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:529
#: ../../releases/1.4-beta-1.txt:589
# ce9d6f74aa3f4e94a70ffb04efeb6d76
# 914ca7608d394930b6ca71a9cbb5355b
msgid "A new plain text version of the HTTP 500 status code internal error page served when :setting:`DEBUG` is ``True`` is now sent to the client when Django detects that the request has originated in JavaScript code (:meth:`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:534
#: ../../releases/1.4-beta-1.txt:594
# 7094a45081074f3a8d5a104e2fe36b4c
# 70faaaa211e64ae6a87191f8e244f8bd
msgid "Similarly to its HTML counterpart, it contains a collection of different pieces of information about the state of the web application."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:537
#: ../../releases/1.4-beta-1.txt:597
# 0cd27460b0e441d0a0a77abe8a094c96
# 2e3efb8b784246b8b9ed5177e1dc60aa
msgid "This should make it easier to read when debugging interaction with client-side Javascript code."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:569
#: ../../releases/1.4-beta-1.txt:637
# 12da9b7e264840ffba7b9b206500d6ba
# f30f92f90f1c4ab9860d1595710f8b56
msgid "Starting in Django 1.4 the admin's static files also follow this convention to make it easier to deploy the included files. In previous versions of Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to point to the URL where the admin's static files are served by a web server. This setting has now been deprecated and replaced by the more general setting :setting:`STATIC_URL`. Django will now expect to find the admin static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:577
#: ../../releases/1.4-beta-1.txt:645
# 1918b02f8a734493ae1b73c29fcbeb57
# a86da00dc0b742659b45f88b3961f30e
msgid "If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` are configured and your web server serves the files correctly. The development server continues to serve the admin files just like before. Don't hesitate to consult the :doc:`static files howto </howto/static-files>` for further details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:584
#: ../../releases/1.4-beta-1.txt:652
# c5cd6a77290e402eb50905919badac85
# 3a81562ceefe4f2583d8f0dcf3944533
msgid "In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://media.example.com/admin/``) make sure to also set your :setting:`STATIC_URL` setting to the correct URL, for example ``http://media.example.com/``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:591
#: ../../releases/1.4-beta-1.txt:659
# 7d2af83a44964b39a26974edae414615
# 578680cf30e24dacbd52ac4ade4547ab
msgid "If you're implicitly relying on the path of the admin static files on your server's file system when you deploy your site, you have to update that path. The files were moved from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/static/admin/`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:599
#: ../../releases/1.4-beta-1.txt:667
# 6ffb4b8b78284bc383a353094e2bfe23
# 9ccb689663a74de29b552fa8661bf7d8
msgid "Django hasn't had a clear policy on which browsers are supported for using the admin app. Django's new policy formalizes existing practices: `YUI's A-grade`_ browsers should provide a fully-functional admin experience, with the notable exception of IE6, which is no longer supported."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:604
#: ../../releases/1.4-beta-1.txt:672
# 523107edae0543568cc38fd00f69078a
# 852cfc0358d24243a07a3308f68dc3d4
msgid "Released over ten years ago, IE6 imposes many limitations on modern web development. The practical implications of this policy are that contributors are free to improve the admin without consideration for these limitations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:608
#: ../../releases/1.4-beta-1.txt:676
# 9ae81cd8b0b64880a4f7a904ad4a8edd
# 3154c2aa99b04dd2ab8aa5fdce9a368a
msgid "This new policy **has no impact** on development outside of the admin. Users of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:616
#: ../../releases/1.4-beta-1.txt:684
# 6b77a2e9cded436697feef1b1efc8ad1
# 5bc11669c1bf499aabe2d1b262504630
msgid "As part of an effort to improve the performance and usability of the admin's changelist sorting interface and of the admin's :attr:`horizontal <django.contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were removed and grouped into two sprite files."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:628
#: ../../releases/1.4-beta-1.txt:696
# 6e6b3ab110044295825fcf7789dfd04a
# abdfdef4d0e6476cb91b91d70e60bf86
msgid "If you used those icons to customize the admin then you will want to replace them with your own icons or retrieve them from a previous release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:634
#: ../../releases/1.4-beta-1.txt:702
# fc89797fbe4e44089f76a7d0c6a210d0
# 44a81450d9b94454bea93b96638cdc0d
msgid "To avoid conflicts with other common CSS class names (e.g. \"button\"), a prefix \"field-\" has been added to all CSS class names automatically generated from the form field names in the main admin forms, stacked inline forms and tabular inline cells. You will need to take that prefix into account in your custom style sheets or javascript files if you previously used plain field names as selectors for custom styles or javascript transformations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:657
#: ../../releases/1.4-beta-1.txt:725
# bc1928a40bf341b08cb3557ad255f50f
# 88b590c12ec74b98980912c258c6b3f0
msgid "consequences: the user will be logged out, and session data will be lost."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:659
#: ../../releases/1.4-beta-1.txt:727
# 541664938b7f4b6087e53d9862a27caa
# e65e6e3698f94317ad56cf9e8953a474
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:663
#: ../../releases/1.4-beta-1.txt:731
# 09078731955b4ef5996f58a0be67463e
# 905dfc6c71e34723a367a7018d001580
msgid "consequences: password reset links from before the upgrade will not work."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:665
#: ../../releases/1.4-beta-1.txt:733
# 7216812c0d814cd5be8f781665fc3bae
# 9444b3c64f8448b8bac46e1bf4157bdc
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:667
#: ../../releases/1.4-beta-1.txt:735
# 5061db45bcaf46b3a78c541c79c706ca
# 9396eeb0b89541f4b595fb575384c0e1
msgid "Form-related hashes — these are much shorter lifetime, and are relevant only for the short window where a user might fill in a form generated by the pre-upgrade Django instance, and try to submit it to the upgraded Django instance:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:673
#: ../../releases/1.4-beta-1.txt:741
# 2d6ecb691570425f9c1378e87f4bb3c2
# 6348c4afb0c1474ba60854565febf3e9
msgid "consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:675
#: ../../releases/1.4-beta-1.txt:743
# d60e5d58833f416bab930faf98401d06
# 580b6fc2e4a54b40aec9f7f2b2f5be1d
msgid "time period: the amount of time you expect users to take filling out comment forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:680
#: ../../releases/1.4-beta-1.txt:748
# 19cbd17a5a6f473a89ee4df16b1137ea
# ff34e49188d64ed4b8dcf2113cb67114
msgid "consequences: the user will see an error about the form having expired, and will be sent back to the first page of the wizard, losing the data they have entered so far."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:684
#: ../../releases/1.4-beta-1.txt:752
# bb8a7b0aa6a1434da552b5bd7a190220
# e198eb932d1549799e91662fb17743ac
msgid "time period: the amount of time you expect users to take filling out the affected forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:689
#: ../../releases/1.4-beta-1.txt:757
# 64aef1eac55746dfb873bcf6150d4baa
# a6140112d1594458a3d0c4f147e5a2b7
msgid "Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies only if you are upgrading from 1.1."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:692
#: ../../releases/1.4-beta-1.txt:760
# 00c7530ee6684b1eaa859ac0dfcc74c0
# 90df567bcd844cd88548cd92d4413cb5
msgid "consequences: the user will see a 403 error with any CSRF protected POST form."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:695
#: ../../releases/1.4-beta-1.txt:763
# ae11ef34d98e4779b9f0c0a741a5c9c3
# a5a071e5d4b546b69dfd9d0319e6cf91
msgid "time period: the amount of time you expect user to take filling out such forms."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:701
#: ../../releases/1.4-beta-1.txt:769
# 41cd459fa8004d57aa6151a3912ca329
# 64ce5d69cdb54d0da5fbf596fce8400e
msgid "Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the resulting URL refers to an existing flatpage. For example, requesting ``/notaflatpageoravalidurl`` in a previous version would redirect to ``/notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting ``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally redirects returned by flatpages are now permanent (301 status code) to match the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:714
#: ../../releases/1.4-beta-1.txt:782
# cbcb4da653d0414eac62c124cc30514e
# ac38eaf8f6a8407bb8ba5ea66a90e0a5
msgid "As a consequence of time zone support, and according to the ECMA-262 specification, some changes were made to the JSON serializer:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:724
#: ../../releases/1.4-beta-1.txt:792
# 9535435be24f4121a5e371b2762a53bb
# 05e7b01e92cc4032929f44689867999f
msgid "The XML serializer was also changed to use the ISO8601 format for datetimes. The letter ``T`` is used to separate the date part from the time part, instead of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:728
#: ../../releases/1.4-beta-1.txt:796
# b8322ff463b8468492977a426d6de6e9
# 39a272734ac54036997921fc4574052b
msgid "The serializers will dump datetimes in fixtures with these new formats. They can still load fixtures that use the old format."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:739
#: ../../releases/1.4-beta-1.txt:807
# ade6480671594d31a71a1f55cefde0ff
# 3e67d4e095144e2d92d4cff663a8df6d
msgid "In the context of time zone support, this flag was changed to ``False``, and datetimes are now stored without time zone information in SQLite. When :setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime object, Django raises an exception."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:765
#: ../../releases/1.4-beta-1.txt:833
# eb9125d47f904e0daf085698cce5ba1e
# 28020fab29de48b3bd20f2ad2d18f8a8
msgid "Finally, while it is now possible to pass connections between threads, Django does not make any effort to synchronize access to the underlying backend. Concurrency behavior is defined by the underlying backend implementation. Check their documentation for details."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:779
#: ../../releases/1.4-beta-1.txt:847
# 12c03c6d66384e5483e474f49d3097e5
# dc56d4b9045943a780fc35a171e6fe64
msgid "If you rely on the feature and want to restore the old behavior, simply use a custom comment model manager to exclude the user group, like this::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:794
#: ../../releases/1.4-beta-1.txt:862
# 42d41cb5fb6f454e964f516f0c8939fa
# d4961879216c490b989ece6dc2b9f251
msgid "Save this model manager in your custom comment app (e.g. in ``my_comments_app/managers.py``) and add it your :ref:`custom comment app model <custom-comment-app-api>`::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:845
#: ../../releases/1.4-beta-1.txt:913
# e5761366ea01448a8fb34c1ca76e2eee
# 4f82dbb29e184745a106d4b7cdc78166
msgid "Don't forget to escape characters that have a special meaning in a regular expression."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:851
#: ../../releases/1.4-beta-1.txt:919
# 2cd4788ad6d84cb9ae38bedba88aba60
# df258ddce8724feb98884d747bcf9f50
msgid "Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided protection against only POST requests. Since use of PUT and DELETE methods in AJAX applications is becoming more common, we now protect all methods not defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, and enforce protection on everything else."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:857
#: ../../releases/1.4-beta-1.txt:925
# f1851d20121249548bf3081744dd57e4
# a8dea08feea847e69fdda6369eaa1d32
msgid "If you are using PUT or DELETE methods in AJAX applications, please see the :ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:863
#: ../../releases/1.4-beta-1.txt:931
# f67e4310a4344a9eb48a5ded1213eeee
# 2aa89a01451341edabe4d17398f5b704
msgid "This was an alias to ``django.template.loader`` since 2005, it has been removed without emitting a warning due to the length of the deprecation. If your code still referenced this please use ``django.template.loader`` instead."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:877
#: ../../releases/1.4-beta-1.txt:945
# 4e2cd6731862437593a609f55789b412
# 0e44cd8d7eb3462b9c7598f042b79253
msgid "The ``open`` method of the base Storage class took an obscure parameter ``mixin`` which allowed you to dynamically change the base classes of the returned file object. This has been removed. In the rare case you relied on the `mixin` parameter, you can easily achieve the same by overriding the `open` method, e.g.::"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:903
#: ../../releases/1.4-beta-1.txt:971
# 76370c27415a4bf898ae95cf59f0a531
# 34e79a4c664c4db581cf31ed54999097
msgid "``yaml.load`` is able to construct any Python object, which may trigger arbitrary code execution if you process a YAML document that comes from an untrusted source. This feature isn't necessary for Django's YAML deserializer, whose primary use is to load fixtures consisting of simple objects. Even though fixtures are trusted data, for additional security, the YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:916
#: ../../releases/1.4-beta-1.txt:984
# b62d3ca4653e42d3ae3c89ba936317f3
# 77a9544d8f0f4201a24658e5af4d5a09
msgid "Some legacy ways of calling :func:`~django.views.decorators.cache.cache_page` have been deprecated, please see the docs for the correct way to use this decorator."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:923
#: ../../releases/1.4-beta-1.txt:991
# 69bf3526363245f89eba754614d1ccbe
# accf12ca4e6f470d997141488bae3641
msgid "Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the relevant documents suggested to use a recent version because of performance reasons but more importantly because end of the upstream support periods for releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:934
#: ../../releases/1.4-beta-1.txt:1002
# 38173b8dfd84416280be9cab08012f5c
# 3ac46928334649fd900905d2b3f3c47a
msgid "When :doc:`logging support </topics/logging/>` was added to Django in 1.3, the admin error email support was moved into the :class:`django.utils.log.AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to maintain the established behavior of error emails, the ``'django.request'`` logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:960
#: ../../releases/1.4-beta-1.txt:1028
# 9a584c6eb1874313a97ee12583fa72f0
# 9138a40b4f9148159bc1f63b7ad3f78e
msgid "If your project was created prior to this change, your :setting:`LOGGING` setting will not include this new filter. In order to maintain backwards-compatibility, Django will detect that your ``'mail_admins'`` handler configuration includes no ``'filters'`` section, and will automatically add this filter for you and issue a pending-deprecation warning. This will become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-compatibility shim will be removed entirely."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:974
#: ../../releases/1.4-beta-1.txt:1042
# e3b649a6486c462998bac2b0bd515977
# 878a9341362a45d0832b31ce56e18c94
msgid "Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were located in a ``django.conf.urls.defaults`` module."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:979
#: ../../releases/1.4-beta-1.txt:1047
# 636433e898bf4cdab6391068c6c86f09
# 392075b8ac774ca4b80616db210ecd2c
msgid "Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:992
#: ../../releases/1.4-beta-1.txt:1060
# fb57a6e70b4943a8a1441392478f4515
# 5a8f62bf7ea54db6a429300096629b71
msgid "The code that powers Databrowse is licensed under the same terms as Django itself, and so is available to be adopted by an individual or group as a third-party project."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1004
#: ../../releases/1.4-beta-1.txt:1072
# a6385488c2c84a059133261c362481da
# e36e0cd6b1df497e8b87cc367eaf8eca
msgid "This function was never documented or part of the public API, but was widely recommended for use in setting up a \"Django environment\" for a user script. These uses should be replaced by setting the ``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf.settings.configure`."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1046
# da29d220dc1e41b8856e35d2005c335b
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1072
#: ../../releases/1.4-beta-1.txt:1144
# 1e7956a6d5c6410581fae345f2f88ddd
# 778c360f2545456a9dd4b4011aa7483d
msgid "The Django 1.4 roadmap"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1074
#: ../../releases/1.4-beta-1.txt:1146
# 29c48bad4d6e4cf497439093cfa0cd51
# accf8e62051844b28df02934687d37da
msgid "Before the final Django 1.4 release, several other preview/development releases will be made available. The current schedule consists of at least the following:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1077
# 778c9531c48a44a5a1f018caf710a550
msgid "Week of **January 30, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1080
#: ../../releases/1.4-beta-1.txt:1152
# 85becc0c32154c9c8c8726baf255503f
# 84122e7cfb5b48a6948c0ef8270103fd
msgid "Week of **February 27, 2012**: First Django 1.4 release candidate; string freeze for translations."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1083
#: ../../releases/1.4-beta-1.txt:1155
# 241882b0b0e745c995ea641b7ae70e76
# e743a40a49224795ae08bee851ab7371
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1085
#: ../../releases/1.4-beta-1.txt:1157
# 95aa7fdbf0e24dcc96caf16ed3b6fa5a
# bd25879c748d460998ab81b90affcf0e
msgid "If necessary, additional alpha, beta or release-candidate packages will be issued prior to the final 1.4 release. Django 1.4 will be released approximately one week after the final release candidate."
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1092
# 3ee6db02ca564a54b31071193b2a92fe
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this alpha release is, again, *not* intended for production use, you can help the Django team by trying out the alpha codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-alpha-1.txt:1121
#: ../../releases/1.4-beta-1.txt:1193
# 25de607387db4c09b369d3cca1dcccb5
# 4e17f0279e604c988455ffd8db1ed6db
msgid "Several development sprints will also be taking place before the 1.4 release; these will typically be announced in advance on the django-developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""

#: ../../releases/1.4-beta-1.txt:3
# bfd5fd005e204d7fbd03a27be8f2edfb
msgid "Django 1.4 beta release notes"
msgstr ""

#: ../../releases/1.4-beta-1.txt:5
# 2eabec619e9c4aedba6d32a2fd88051d
msgid "February 15, 2012."
msgstr ""

#: ../../releases/1.4-beta-1.txt:7
# 98d9ca4104cf40aa881a7b48339da022
msgid "Welcome to Django 1.4 beta!"
msgstr ""

#: ../../releases/1.4-beta-1.txt:9
# ed878c5ca7964f728cf1ab841637b3de
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.4, scheduled for March 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.4 release."
msgstr ""

#: ../../releases/1.4-beta-1.txt:18
# 6fcff5ddaf4248f38acd5b1241bb34e6
msgid "Django 1.4 beta includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:29
# 99f3387621f2438c8deedcfc335f64cb
msgid "Version numbering"
msgstr ""

#: ../../releases/1.4-beta-1.txt:31
# e3c2ee83f4b645bf90b264e56171ecbe
msgid "Internally, Django's version number is represented by the tuple ``django.VERSION``. This is used to generate human-readable version number strings; as of Django 1.4 beta 1, the algorithm for generating these strings has been changed to match the recommendations of :pep:`386`. This only affects the human-readable strings identifying Django alphas, betas and release candidates, and should not affect end users in any way."
msgstr ""

#: ../../releases/1.4-beta-1.txt:38
# dd51b69158664205bd111a76519798a5
msgid "For example purposes, the old algorithm would give Django 1.4 beta 1 a version string of the form \"1.4 beta 1\". The new algorithm generates the version string \"1.4b1\"."
msgstr ""

#: ../../releases/1.4-beta-1.txt:135
# 13ed528c79954e1e8e6ecb733abbf0de
msgid "Django 1.4 alpha contained a bug that corrupted PBKDF2 hashes. To determine which accounts are affected, run :djadmin:`manage.py shell <shell>` and paste this snippet::"
msgstr ""

#: ../../releases/1.4-beta-1.txt:147
# 039063d18da542e8af9d77ef63c0edbc
msgid "These users should reset their passwords."
msgstr ""

#: ../../releases/1.4-beta-1.txt:218
# 0739d4bc66d2476db628cea6894389af
msgid "Session data is signed and validated by the server, but is not encrypted.  This means that a user can view any data stored in the session, but cannot change it. Please read the documentation for further clarification before using this backend."
msgstr ""

#: ../../releases/1.4-beta-1.txt:617
# b80c0aabd3b044a590c1cd1f600c6d18
msgid "New phrases added to ``HIDDEN_SETTINGS`` regex in `django/views/debug.py`_."
msgstr ""

#: ../../releases/1.4-beta-1.txt:619
# 195204cee7204064ba16782d3f6666fc
msgid "``'API'``, ``'TOKEN'``, ``'KEY'`` were added, ``'PASSWORD'`` was changed to ``'PASS'``."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1114
# dbb3f040461e499d9b8f90066ae781e0
msgid "Session cookies now include the ``httponly`` attribute by default to help reduce the impact of potential XSS attacks. As a consequence of this change, session cookie data, including sessionid, is no longer accessible from Javascript in many browsers. For strict backwards compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1149
# f698feb805a545b5a42f840d215d6ce5
msgid "Week of **January 13, 2012**: First Django 1.4 beta release; final feature freeze for Django 1.4."
msgstr ""

#: ../../releases/1.4-beta-1.txt:1164
# 1deb7e89acac440a9ff067189b25e89e
msgid "In order to provide a high-quality 1.4 release, we need your help. Although this beta release is, again, *not* intended for production use, you can help the Django team by trying out the beta codebase in a safe test environment and reporting any bugs or issues you encounter. The Django ticket tracker is the central place to search for open issues:"
msgstr ""

#: ../../releases/1.4-beta-1.txt:1175
# 016c8d44991e4fe4a66a79898f6d5a5f
msgid "Additionally, discussion of Django development, including progress toward the 1.4 release, takes place daily on the django-developers mailing list:"
msgstr ""

#: ../../releases/1.4.1.txt:3
# 2c78701bd24a4d47b5b3a5e3a94ce950
msgid "Django 1.4.1 release notes"
msgstr ""

#: ../../releases/1.4.1.txt:7
# 42e0c38f75c54ec28253bba685ce3f43
msgid "This is the first security release in the Django 1.4 series, fixing several security issues in Django 1.4. Django 1.4.1 is a recommended upgrade for all users of Django 1.4."
msgstr ""

#: ../../releases/1.4.2.txt:3
# e5ad8c5875ec44ccb3377a35d9600337
msgid "Django 1.4.2 release notes"
msgstr ""

#: ../../releases/1.4.2.txt:5
# 5d8fe85a990b4ea3b3da0c20abe166e5
msgid "*October 17, 2012*"
msgstr ""

#: ../../releases/1.4.2.txt:7
# f206376bda2049b195439db33f9efb5e
msgid "This is the second security release in the Django 1.4 series."
msgstr ""

#: ../../releases/1.4.2.txt:10
# 26630731d3b34120b21a20bde788de95
msgid "Host header poisoning"
msgstr ""

#: ../../releases/1.4.2.txt:12
# 3fd202fe221b4da6b4f516455df94f52
msgid "Some parts of Django -- independent of end-user-written applications -- make use of full URLs, including domain name, which are generated from the HTTP Host header. Some attacks against this are beyond Django's ability to control, and require the web server to be properly configured; Django's documentation has for some time contained notes advising users on such configuration."
msgstr ""

#: ../../releases/1.4.2.txt:18
# 0267e5f12cf94d49ad78961793fcd67b
msgid "Django's own built-in parsing of the Host header is, however, still vulnerable, as was reported to us recently. The Host header parsing in Django 1.3.3 and Django 1.4.1 -- specifically, django.http.HttpRequest.get_host() -- was incorrectly handling username/password information in the header. Thus, for example, the following Host header would be accepted by Django when running on \"validsite.com\"::"
msgstr ""

#: ../../releases/1.4.2.txt:27
# 5466f45eeae749bb96d2735b493488b4
msgid "Using this, an attacker can cause parts of Django -- particularly the password-reset mechanism -- to generate and display arbitrary URLs to users."
msgstr ""

#: ../../releases/1.4.2.txt:30
# 595b802818294e79b90da190a5db5b95
msgid "To remedy this, the parsing in HttpRequest.get_host() is being modified; Host headers which contain potentially dangerous content (such as username/password pairs) now raise the exception django.core.exceptions.SuspiciousOperation"
msgstr ""

#: ../../releases/1.4.2.txt:34
# 774ae9b4fd8343ffa803e3a6199645a7
msgid "Details of this issue were initially posted online as a `security advisory`_."
msgstr ""

#: ../../releases/1.4.2.txt:41
# 827fb606770b44df8df1141b6559a053
msgid "The newly introduced :class:`~django.db.models.GenericIPAddressField` constructor arguments have been adapted to match those of all other model fields. The first two keyword arguments are now verbose_name and name."
msgstr ""

#: ../../releases/1.4.2.txt:46
# 5fbf033e1e534450b37a7d034063ecd0
msgid "Other bugfixes and changes"
msgstr ""

#: ../../releases/1.4.2.txt:48
# df6d8a82486d4a8d9cdbce0cd70838a9
msgid "Subclass HTMLParser only for appropriate Python versions (#18239)."
msgstr ""

#: ../../releases/1.4.2.txt:49
# ead5e5e8acfe454ca2d1f540fc3fab5d
msgid "Added batch_size argument to qs.bulk_create() (#17788)."
msgstr ""

#: ../../releases/1.4.2.txt:50
# 6ced43ca79aa404389caa15006ebfc66
msgid "Fixed a small regression in the admin filters where wrongly formatted dates passed as url parameters caused an unhandled ValidationError (#18530)."
msgstr ""

#: ../../releases/1.4.2.txt:51
# 1e5a0ea07cb1433ca52662aba86e4640
msgid "Fixed an endless loop bug when accessing permissions in templates (#18979)"
msgstr ""

#: ../../releases/1.4.2.txt:52
# 542d4067904047a0aa28f65576b5ffa8
msgid "Fixed some Python 2.5 compatibility issues"
msgstr ""

#: ../../releases/1.4.2.txt:53
# 22c3e071b78446bfb587ce4fb0c9b99e
msgid "Fixed an issue with quoted filenames in Content-Disposition header (#19006)"
msgstr ""

#: ../../releases/1.4.2.txt:54
# 48ec437e0cdb4de0a24f0f0963b92f7c
msgid "Made the context option in ``trans`` and ``blocktrans`` tags accept literals wrapped in single quotes (#18881)."
msgstr ""

#: ../../releases/1.4.2.txt:55
# ed7851fc683c4a82bcf6990de3bc1b3e
msgid "Numerous documentation improvements and fixes."
msgstr ""

#: ../../releases/1.5.txt:3
# 76c2678c93ff46b2b5e54a29b3cf5c08
msgid "Django 1.5 release notes - UNDER DEVELOPMENT"
msgstr ""

#: ../../releases/1.5.txt:5
# 8c07918dcbda48ed8a20e50240c10124
msgid "Welcome to Django 1.5!"
msgstr ""

#: ../../releases/1.5.txt:7
#: ../../releases/1.5-beta-1.txt:18
# 188c2d0bcfcf4434990726d8106c35d2
# ad5ea5fc7aa84c6f8bb657ed3cf33d96
msgid "These release notes cover the `new features`_, as well as some `backwards incompatible changes`_ you'll want to be aware of when upgrading from Django 1.4 or older versions. We've also dropped some features, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.5.txt:21
#: ../../releases/1.5-alpha-1.txt:36
#: ../../releases/1.5-beta-1.txt:32
# d809145e38ee46129f197b73712221e7
# 270478a5ee7b4403a5dffebd520e35b3
# f97f9c87922e456c938982617ebadc49
msgid "The biggest new feature in Django 1.5 is the `configurable User model`_. Before Django 1.5, applications that wanted to use Django's auth framework (:mod:`django.contrib.auth`) were forced to use Django's definition of a \"user\". In Django 1.5, you can now swap out the ``User`` model for one that you write yourself. This could be a simple extension to the existing ``User`` model -- for example, you could add a Twitter or Facebook ID field -- or you could completely replace the ``User`` with one totally customized for your site."
msgstr ""

#: ../../releases/1.5.txt:29
#: ../../releases/1.5-alpha-1.txt:44
#: ../../releases/1.5-beta-1.txt:40
# 772d0c663bf845e08bbbee55b03ea0e8
# a68c7420b4254de9a7cc375b59b3ce9a
# abc6400a6631476f80886f62b36bbe4d
msgid "Django 1.5 is also the first release with `Python 3 support`_! We're labeling this support \"experimental\" because we don't yet consider it production-ready, but everything's in place for you to start porting your apps to Python 3. Our next release, Django 1.6, will support Python 3 without reservations."
msgstr ""

#: ../../releases/1.5.txt:34
#: ../../releases/1.5-alpha-1.txt:49
#: ../../releases/1.5-beta-1.txt:45
# 8fea85fe00154c3b90342190e10aad6d
# 7c75d5d146b04e2ba693ddb86ee0f56b
# 72aac08276f44f36833a24b1f3d2bee5
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

#: ../../releases/1.5.txt:36
#: ../../releases/1.5-alpha-1.txt:51
#: ../../releases/1.5-beta-1.txt:47
# 02d8cc0d11ba459ea96688200e19216e
# a7d7f891d5384a188275dc0671eda23b
# c44919e390d24c3ca1fe45bc79474ac9
msgid "`Support for saving a subset of model's fields`_ - :meth:`Model.save() <django.db.models.Model.save()>` now accepts an ``update_fields`` argument, letting you specify which fields are written back to the database when you call ``save()``. This can help in high-concurrency operations, and can improve performance."
msgstr ""

#: ../../releases/1.5.txt:42
#: ../../releases/1.5-alpha-1.txt:57
# 3185eca43b30416f8f4341fb37810bd6
# 04c93d61ff974eb082915ff89c1618af
msgid "Better `support for streaming responses <#explicit-streaming-responses>`_ via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../releases/1.5.txt:45
#: ../../releases/1.5-alpha-1.txt:60
#: ../../releases/1.5-beta-1.txt:56
# 003a3cf9f1664edbb6cfe7e1c72c0eb0
# 12976367530d465aa01501df92327cf1
# c0a0b7596ef24b09b464ba2784d6e354
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

#: ../../releases/1.5.txt:47
#: ../../releases/1.5-alpha-1.txt:62
#: ../../releases/1.5-beta-1.txt:58
# 2e5bb51a52f345e293fddd0fb72b2e59
# 9667114f75584b48bfda7e0be4636a6d
# 397b58c3be534dd4893ecca97c81d4d4
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

#: ../../releases/1.5.txt:49
#: ../../releases/1.5-beta-1.txt:60
# 3a63cbfe82c84d9baa2fb51170dc346c
# ce36c12623e24ab0b13ed54216791845
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>`. However, as with previous releases, Django 1.5 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.5.txt:55
#: ../../releases/1.5-alpha-1.txt:70
#: ../../releases/1.5-beta-1.txt:66
# 9f1d7a83ff0f4ce687a8247f065543e6
# 1243ba1596844a0db522022f3373d43a
# b74f2466a3574418887e59633b133c35
msgid "One deprecated feature worth noting is the shift to \"new-style\" :ttag:`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was interpreted incorrectly (Django considered ``\"myview\"`` to be a literal name of a view, not a template variable named ``myview``). Django 1.3 and above introduced the ``{% load url from future %}`` syntax to bring in the corrected behavior where ``myview`` was seen as a variable."
msgstr ""

#: ../../releases/1.5.txt:62
#: ../../releases/1.5-alpha-1.txt:77
#: ../../releases/1.5-beta-1.txt:73
# 53b2236000f446838a86b109ff3f8a32
# 00b96a3e36ff4dada2c7d667d784b7d6
# 4de32fffc20549e19e6c1df93dd7127c
msgid "The upshot of this is that if you are not using ``{% load url from future %}`` in your templates, you'll need to change tags like ``{% url myview %}`` to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}`` you can simply remove that line under Django 1.5"
msgstr ""

#: ../../releases/1.5.txt:70
#: ../../releases/1.5-alpha-1.txt:85
# e4480eb3946a4e0d803df2bb99d14d73
# 987e504e75394197946a6ea05ab16d19
msgid "Django 1.5 requires Python 2.6.5 or above, though we **highly recommended** Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../releases/1.5.txt:73
#: ../../releases/1.5-alpha-1.txt:88
#: ../../releases/1.5-beta-1.txt:84
# cac3c5822ad64a01b6694a87564df900
# 7dc5a9e1525c4b67ab26952975051029
# 32872d996c834c99a3ac44eb4334cf43
msgid "This change should affect only a small number of Django users, as most operating-system vendors today are shipping Python 2.6 or newer as their default version. If you're still using Python 2.5, however, you'll need to stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our support policy </internals/release-process>`, Django 1.4 will continue to receive security support until the release of Django 1.6."
msgstr ""

#: ../../releases/1.5.txt:80
#: ../../releases/1.5-alpha-1.txt:95
#: ../../releases/1.5-beta-1.txt:91
# c51cffbf5ea34b53b1c83b706c941d58
# 9d59eebd85044818a717647fae456e99
# 84a87ab252d5445fa72ed4504c4d4e7f
msgid "Django 1.5 does not run on a Jython final release, because Jython's latest release doesn't currently support Python 2.6. However, Jython currently does offer an alpha release featuring 2.7 support, and Django 1.5 supports that alpha release."
msgstr ""

#: ../../releases/1.5.txt:86
#: ../../releases/1.5-alpha-1.txt:101
#: ../../releases/1.5-beta-1.txt:97
# 66ee21b35bbf404787400b1b77979da6
# 4ea84d800732473ebfad31e6968b51fe
# c7dedba36b2e4b7fb86edc6f6ff64f46
msgid "Python 3 support"
msgstr ""

#: ../../releases/1.5.txt:88
#: ../../releases/1.5-beta-1.txt:99
# 27d0be31c17b430ea80cc04acfc52729
# cb9b51cfc08f454b9dfbaba1ef636890
msgid "Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a **single** codebase; you don't need to install a different version of Django on Python 3. This means that you can write applications targeted for just Python 2, just Python 3, or single applications that support both platforms."
msgstr ""

#: ../../releases/1.5.txt:94
#: ../../releases/1.5-alpha-1.txt:109
#: ../../releases/1.5-beta-1.txt:105
# 63f9319333ba40bf8ae7d84cc9409f49
# b22f80ae0b2f4bfea2664e86f257d897
# 3b4daaf1f6df43918dec0167de9503fd
msgid "However, we're labeling this support \"experimental\" for now: although it's received extensive testing via our automated test suite, it's received very little real-world testing. We've done our best to eliminate bugs, but we can't be sure we covered all possible uses of Django. Further, Django's more than a web framework; it's an ecosystem of pluggable components. At this point, very few third-party applications have been ported to Python 3, so it's unlikely that a real-world application will have all its dependencies satisfied under Python 3."
msgstr ""

#: ../../releases/1.5.txt:103
#: ../../releases/1.5-alpha-1.txt:118
#: ../../releases/1.5-beta-1.txt:114
# 776151cfbab841969f4d8b58447eb657
# 26038fca5ab04e47a53b7033888cefdb
# c37475fcb8d447e2bc35d610b2a034d0
msgid "Thus, we're recommending that Django 1.5 not be used in production under Python 3. Instead, use this opportunity to begin :doc:`porting applications to Python 3 </topics/python3>`. If you're an author of a pluggable component, we encourage you to start porting now."
msgstr ""

#: ../../releases/1.5.txt:108
#: ../../releases/1.5-alpha-1.txt:123
#: ../../releases/1.5-beta-1.txt:119
# edd57b902f4f424f865f6a61ea3c3595
# 86833e5b40234f23b74287873e1b3f19
# 444f8ba68dff4070ad352e10cb504dfd
msgid "We plan to offer first-class, production-ready support for Python 3 in our next release, Django 1.6."
msgstr ""

#: ../../releases/1.5.txt:112
#: ../../releases/1.5-alpha-1.txt:127
#: ../../releases/1.5-beta-1.txt:123
# d834f02a1879457893f34ba53d73671d
# 4fe461d0551442f2bc27579e0003ded4
# 574e257fc6794ec98042399f1af14617
msgid "What's new in Django 1.5"
msgstr ""

#: ../../releases/1.5.txt:115
#: ../../releases/1.5-alpha-1.txt:130
#: ../../releases/1.5-beta-1.txt:126
# e6af7ccaff024e8895c4337e2441b832
# c67d3278703e4d669ac6972dac8b75b5
# 15489425a409401889262d7556777d4f
msgid "Configurable User model"
msgstr ""

#: ../../releases/1.5.txt:117
#: ../../releases/1.5-beta-1.txt:128
# 3f20e9dea41c45bf8d869463b25cfdbb
# 433116968b3a4122961b9bbda6896d48
msgid "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store user's names in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so."
msgstr ""

#: ../../releases/1.5.txt:123
#: ../../releases/1.5-alpha-1.txt:138
#: ../../releases/1.5-beta-1.txt:134
# c4ae4638aa1d412a8d66cfc6b02fa26a
# f80120e0aaad4aacb0e0b5d2aefd8b61
# c1bc05a376c64c579a76c98ec90c3e49
msgid "If you have a third-party reusable application that references the User model, you may need to make some changes to the way you reference User instances. You should also document any specific features of the User model that your application relies upon."
msgstr ""

#: ../../releases/1.5.txt:128
#: ../../releases/1.5-alpha-1.txt:143
#: ../../releases/1.5-beta-1.txt:139
# 3c0c958a2f124ef688977195b40b5294
# 90b31620d81c40ca966e9ca000cfbc2c
# c76900c294d549a99026c6b919b9b532
msgid "See the :ref:`documentation on custom User models <auth-custom-user>` for more details."
msgstr ""

#: ../../releases/1.5.txt:132
#: ../../releases/1.5-alpha-1.txt:147
#: ../../releases/1.5-beta-1.txt:143
# 9e21d772b6184a798a851e31a1df4c40
# baa8a0f7c7584a3a8aa0a3225d0731b5
# 1c4fabe5109a4604a869a3cf5396835e
msgid "Support for saving a subset of model's fields"
msgstr ""

#: ../../releases/1.5.txt:134
#: ../../releases/1.5-alpha-1.txt:149
#: ../../releases/1.5-beta-1.txt:145
# 2f8fdcbec62f4f6f91f10ab3491d5ab9
# d020054d0cf745e3b8886205783bba18
# f73bef3c3aad45919d565e36d040d958
msgid "The method :meth:`Model.save() <django.db.models.Model.save()>` has a new keyword argument ``update_fields``. By using this argument it is possible to save only a select list of model's fields. This can be useful for performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

#: ../../releases/1.5.txt:139
#: ../../releases/1.5-alpha-1.txt:154
#: ../../releases/1.5-beta-1.txt:150
# ca51c28459574beeafbfc0a8999c3978
# 21cc56f2111647958b22b8ef5d9b31ae
# 6936ea4675aa40edb8defcce950b5051
msgid "Deferred instances (those loaded by .only() or .defer()) will automatically save just the loaded fields. If any field is set manually after load, that field will also get updated on save."
msgstr ""

#: ../../releases/1.5.txt:143
#: ../../releases/1.5-alpha-1.txt:158
#: ../../releases/1.5-beta-1.txt:154
# 92c91f827a5142dcac729190f574fd75
# 7a697f11ccb744d895a1b73cb337b7f2
# 674aaf978558445d8ca74df7e079e7ba
msgid "See the :meth:`Model.save() <django.db.models.Model.save()>` documentation for more details."
msgstr ""

#: ../../releases/1.5.txt:147
#: ../../releases/1.5-alpha-1.txt:162
#: ../../releases/1.5-beta-1.txt:158
# dff55ea9720a41ccbc8977d6df72966b
# d58dc7cc142b4bcbb067fba86546dee7
# fa5ea75ea58f480e9ae2301dda9b73e0
msgid "Caching of related model instances"
msgstr ""

#: ../../releases/1.5.txt:149
#: ../../releases/1.5-alpha-1.txt:164
#: ../../releases/1.5-beta-1.txt:160
# 8155d89c5927426ba4799a4a5375b208
# 8567ecde03074b628a811c56fe21a161
# 5ad90965b7a74b22a45bdf19aa77f8f0
msgid "When traversing relations, the ORM will avoid re-fetching objects that were previously loaded. For example, with the tutorial's models::"
msgstr ""

#: ../../releases/1.5.txt:157
#: ../../releases/1.5-alpha-1.txt:172
#: ../../releases/1.5-beta-1.txt:168
# ca4d1dde700a483bb946c6de7d3980fe
# cebba55f8383488ba578c50d438bfe15
# de4db4c94f80453592a7d7f60db2a0c5
msgid "In Django 1.5, the third line no longer triggers a new SQL query to fetch ``first_choice.poll``; it was set by the second line."
msgstr ""

#: ../../releases/1.5.txt:160
#: ../../releases/1.5-alpha-1.txt:175
#: ../../releases/1.5-beta-1.txt:171
# 9e2c98063f5441cd86a81dd29c502e74
# d34c7baaf1f245d0b8901403c3c6bd97
# b0335479fbbe4445a662d247a82bae39
msgid "For one-to-one relationships, both sides can be cached. For many-to-one relationships, only the single side of the relationship can be cached. This is particularly helpful in combination with ``prefetch_related``."
msgstr ""

#: ../../releases/1.5.txt:167
#: ../../releases/1.5-alpha-1.txt:180
#: ../../releases/1.5-beta-1.txt:178
# 2ec195cd43e1493f8f63d075252816f0
# c5859e06f9354159bb0a8dd3af85ad87
# 97b4b74172cb4a1781f3d1577b161875
msgid "Explicit support for streaming responses"
msgstr ""

#: ../../releases/1.5.txt:169
#: ../../releases/1.5-alpha-1.txt:182
#: ../../releases/1.5-beta-1.txt:180
# d0e33013b793402e8453532cbd19d498
# a9f924bdb5c94fab8cf7c21d4a048a87
# 9a3078fac0394898ba39fc7a80d6a05f
msgid "Before Django 1.5, it was possible to create a streaming response by passing an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: any middleware that accessed the :attr:`~django.http.HttpResponse.content` attribute would consume the iterator prematurely."
msgstr ""

#: ../../releases/1.5.txt:174
#: ../../releases/1.5-alpha-1.txt:187
#: ../../releases/1.5-beta-1.txt:185
# eedbf2e54e7041448354ffccfb0f64cc
# 3a7591615f4c4d2ea2d01fa5b125d80d
# 4c1b7873d9024743af1c2b15e0b9ca64
msgid "You can now explicitly generate a streaming response with the new :class:`~django.http.StreamingHttpResponse` class. This class exposes a :class:`~django.http.StreamingHttpResponse.streaming_content` attribute which is an iterator."
msgstr ""

#: ../../releases/1.5.txt:179
#: ../../releases/1.5-alpha-1.txt:192
#: ../../releases/1.5-beta-1.txt:190
# 38b0720657f64d649284c7d4f2c0a382
# 80992257902b404d8cdba5a170d07ee8
# 86da29358e0b4b40b97a9f356b2e5e38
msgid "Since :class:`~django.http.StreamingHttpResponse` does not have a ``content`` attribute, middleware that needs access to the response content must test for streaming responses and behave accordingly. See :ref:`response-middleware` for more information."
msgstr ""

#: ../../releases/1.5.txt:185
#: ../../releases/1.5-alpha-1.txt:198
#: ../../releases/1.5-beta-1.txt:196
# 02e9c7c5efcd4b1abd6e21b5bb1b6f28
# 0c4b857bded947f5b3d573da2ea7c3fa
# 1f2d9771785548ecb3746142c01f17f9
msgid "``{% verbatim %}`` template tag"
msgstr ""

#: ../../releases/1.5.txt:187
#: ../../releases/1.5-alpha-1.txt:200
#: ../../releases/1.5-beta-1.txt:198
# 9bf3986c014843a8ba591e9c7fafa0a4
# 71e62b2733704ed09da08781665bc611
# 217970982fdb43f7943cde32851da0b2
msgid "To make it easier to deal with javascript templates which collide with Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid parsing the tag's content."
msgstr ""

#: ../../releases/1.5.txt:192
#: ../../releases/1.5-alpha-1.txt:205
#: ../../releases/1.5-beta-1.txt:203
# 9b7a1ed5bc4f4e45b8a5de167fe133ea
# 9857780b2ed740bc927ef2f1907ccdb4
# f648ecfe39394d89911867e852a458da
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

#: ../../releases/1.5.txt:194
#: ../../releases/1.5-alpha-1.txt:207
#: ../../releases/1.5-beta-1.txt:205
# 6a97f809c79e40769d6dd9a948222ab5
# 7e91874f4ab74f838c33c6bc0474b20f
# 51313eb8fbaa40198bcb70dff9d4b8e6
msgid "The methods :meth:`ContentTypeManager.get_for_model() <django.contrib.contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models.ContentTypeManager.get_for_models()>` have a new keyword argument – respectively ``for_concrete_model`` and ``for_concrete_models``. By passing ``False`` using this argument it is now possible to retrieve the :class:`ContentType <django.contrib.contenttypes.models.ContentType>` associated with proxy models."
msgstr ""

#: ../../releases/1.5.txt:202
#: ../../releases/1.5-alpha-1.txt:215
#: ../../releases/1.5-beta-1.txt:213
# 20b0c2dbfb9d48f5bc9da991b7832f14
# d3441df70299447cb2836aa2cc9ba3f1
# 22834e8e2f6340ffa9f6de49b25e6979
msgid "New ``view`` variable in class-based views context"
msgstr ""

#: ../../releases/1.5.txt:204
#: ../../releases/1.5-alpha-1.txt:217
#: ../../releases/1.5-beta-1.txt:215
# c453cce6604149d8b095cea50ff91f04
# 758cca58850745b894a613478e603cb8
# 28e48438e32e410db4312060444b2ff4
msgid "In all :doc:`generic class-based views </topics/class-based-views/index>` (or any class-based view inheriting from ``ContextMixin``), the context dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

#: ../../releases/1.5.txt:211
#: ../../releases/1.5-alpha-1.txt:224
#: ../../releases/1.5-beta-1.txt:222
# 43506bb87f1d4f81a348b3ba2485fc6b
# bc09a937334e4755b43239284c54b103
# 843d969e6dbe4c71b43479d5ed4b5fd7
msgid ":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis.geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib.gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos.GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

#: ../../releases/1.5.txt:217
#: ../../releases/1.5-alpha-1.txt:230
#: ../../releases/1.5-beta-1.txt:228
# b306156986764ef296e0559294086c98
# 3d4f87f5ef6447a5b7fbaa2147274110
# 1692266c162d46ad8d0c1625ec3d4c3d
msgid "The wkb and hex properties of `GEOSGeometry` objects preserve the Z dimension."
msgstr ""

#: ../../releases/1.5.txt:219
#: ../../releases/1.5-alpha-1.txt:232
#: ../../releases/1.5-beta-1.txt:230
# 109908910fe44531ae667ed255a7e2be
# a9b3fc78ae7d49f19e69bbb6e088fb0b
# ed90b0ea020d4cc6811ccca53ee5e27b
msgid "Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been dropped."
msgstr ""

#: ../../releases/1.5.txt:225
#: ../../releases/1.5-alpha-1.txt:238
#: ../../releases/1.5-beta-1.txt:236
# 46bf0e23b31844038cbc8b7aaa30cac1
# 0f65bac3af6b41d0a4f1dcae5ca02638
# c6046f838bf0407c9d53c351f3cf0731
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

#: ../../releases/1.5.txt:227
#: ../../releases/1.5-alpha-1.txt:240
#: ../../releases/1.5-beta-1.txt:238
# f0ae7aefbd8a46eab3be4d3aceaf0398
# 1b9357aa980743608316829fd75c1502
# 966658d13151496fb5b9cb3c1fd4a6dd
msgid "The template engine now interprets ``True``, ``False`` and ``None`` as the corresponding Python objects."
msgstr ""

#: ../../releases/1.5.txt:230
#: ../../releases/1.5-alpha-1.txt:243
#: ../../releases/1.5-beta-1.txt:241
# 4fc7df1554d24436aa4c50237bcfa7cc
# 7e6f03dc778a48bb98336bc81cd9fb30
# 04e710e3d76f4d6688d30c139eb766c8
msgid ":mod:`django.utils.timezone` provides a helper for converting aware datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

#: ../../releases/1.5.txt:233
#: ../../releases/1.5-alpha-1.txt:246
#: ../../releases/1.5-beta-1.txt:244
# 0466cd65075f48a5b7406e13ba09954b
# 9187b47b33ce4f608ac1c443ebe898bc
# 7a7bbb1dc289481c8ae4a62748001a45
msgid "The generic views support OPTIONS requests."
msgstr ""

#: ../../releases/1.5.txt:235
#: ../../releases/1.5-alpha-1.txt:248
#: ../../releases/1.5-beta-1.txt:246
# 696b047e57c341d4b370d8613463bf3a
# 4f57cb6721534e3388e5150d1a60ec21
# fefd7bc6e43e46e7a1f8b41b1cb14712
msgid "Management commands do not raise ``SystemExit`` any more when called by code from :ref:`call_command <call-command>`. Any exception raised by the command (mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

#: ../../releases/1.5.txt:239
#: ../../releases/1.5-alpha-1.txt:252
#: ../../releases/1.5-beta-1.txt:250
# b74e2472f3134469a2b50ce5c0d993de
# c5b8186a52264396970df32df2f8bab2
# 5fa8f5c058654f83a8c7203231285734
msgid "The dumpdata management command outputs one row at a time, preventing out-of-memory errors when dumping large datasets."
msgstr ""

#: ../../releases/1.5.txt:242
#: ../../releases/1.5-alpha-1.txt:255
#: ../../releases/1.5-beta-1.txt:253
# 2e16411a499541b289a48e16d3e7fde6
# e03aa7746ffa4b18b858ce2b31f4ed11
# af849ea7d08e4a7d800fd9330039eb79
msgid "In the localflavor for Canada, \"pq\" was added to the acceptable codes for Quebec. It's an old abbreviation."
msgstr ""

#: ../../releases/1.5.txt:245
#: ../../releases/1.5-alpha-1.txt:258
#: ../../releases/1.5-beta-1.txt:256
# 8d1e692441d245e5bf86450487c5aa97
# 523458f3ba1a42139db3624440030fcf
# 67ae4992ec2544ad9fef06f1935837b7
msgid "The :ref:`receiver <connecting-receiver-functions>` decorator is now able to connect to more than one signal by supplying a list of signals."
msgstr ""

#: ../../releases/1.5.txt:248
#: ../../releases/1.5-alpha-1.txt:261
#: ../../releases/1.5-beta-1.txt:259
# e88bd1af82fb4ee7be65739b479723ef
# 9489f61e7b59442493e4dd58acdd1f5f
# 4f32f437ae81417ba4b649f8bc1bdd05
msgid "In the admin, you can now filter users by groups which they are members of."
msgstr ""

#: ../../releases/1.5.txt:250
#: ../../releases/1.5-alpha-1.txt:263
#: ../../releases/1.5-beta-1.txt:261
# 1c47f515b7ba486ea5ba217f40d28f97
# 815aca4ebf02479197eafa7752513ced
# 45a39996e77b4a7da19606541a6167be
msgid ":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` now has a batch_size argument. By default the batch_size is unlimited except for SQLite where single batch is limited so that 999 parameters per query isn't exceeded."
msgstr ""

#: ../../releases/1.5.txt:255
#: ../../releases/1.5-alpha-1.txt:268
#: ../../releases/1.5-beta-1.txt:266
# 214d92e37d0f4df5a6c9221b945c8be5
# 43ad115cacb14b9fbdbb149e41726886
# 6c7633549b4649689e3ed3d108a0aad9
msgid "The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also accept view function names and :ref:`named URL patterns <naming-url-patterns>`. This allows you to reduce configuration duplication. More information can be found in the :func:`~django.contrib.auth.decorators.login_required` documentation."
msgstr ""

#: ../../releases/1.5.txt:261
#: ../../releases/1.5-alpha-1.txt:274
#: ../../releases/1.5-beta-1.txt:272
# d537a205b5c04b438337e396c98471e3
# 21e7d0da2a6b45a299aadfe51afbe0ec
# b68ef430b26f44618e234fa108d40e7c
msgid "Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/apache-auth>`."
msgstr ""

#: ../../releases/1.5.txt:264
#: ../../releases/1.5-alpha-1.txt:277
#: ../../releases/1.5-beta-1.txt:275
# ce5737491306431989a5a980055b4d3e
# 957d5af202fc46b19eab70466ea324ee
# 26452e98b4da4fa596cf1c946150b091
msgid "The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-path in some cases. The fast-path allows for less queries and less objects fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` for details."
msgstr ""

#: ../../releases/1.5.txt:270
#: ../../releases/1.5-alpha-1.txt:283
#: ../../releases/1.5-beta-1.txt:281
# 50ff1431b0634f13b22ceb5e8f9ae359
# deba770830a74babb91e14ee55d0632e
# 857046d36ecb43fab9242c356e302d72
msgid "An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on the request as ``resolver_match``."
msgstr ""

#: ../../releases/1.5.txt:273
#: ../../releases/1.5-alpha-1.txt:286
#: ../../releases/1.5-beta-1.txt:284
# 7d842502bfde4e8ea6bb1e770a55b455
# ae773904242e4af791e02d8d38e78e49
# dffde9694aad4432a8d6123b17f39c6c
msgid "By default, all logging messages reaching the `django` logger when :setting:`DEBUG` is `True` are sent to the console (unless you redefine the logger in your :setting:`LOGGING` setting)."
msgstr ""

#: ../../releases/1.5.txt:277
#: ../../releases/1.5-alpha-1.txt:290
#: ../../releases/1.5-beta-1.txt:288
# 74c59c6d34104f01a34ed91f574c71e3
# 8a876b167d864b0898bbcdbb18ad7bb5
# cc5f5708350a4cf09f43010e71188d51
msgid "When using :class:`~django.template.RequestContext`, it is now possible to look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in templates."
msgstr ""

#: ../../releases/1.5.txt:281
#: ../../releases/1.5-alpha-1.txt:294
#: ../../releases/1.5-beta-1.txt:292
# 05c09f03854843819f190c4c96e4d55f
# c973ca5fd6d449a9a517314c0d840738
# 896802990c444f0f9ee1a8796997c31b
msgid "It's not required any more to have ``404.html`` and ``500.html`` templates in the root templates directory. Django will output some basic error messages for both situations when those templates are not found. Of course, it's still recommended as good practice to provide those templates in order to present pretty error pages to the user."
msgstr ""

#: ../../releases/1.5.txt:287
#: ../../releases/1.5-alpha-1.txt:300
#: ../../releases/1.5-beta-1.txt:298
# c8bbe089a39346808d39b28fb579f2f5
# 2c8c3db42d46404884105f03c87ca264
# a9ac1b05653c4f3fa2e4d96e160db0d6
msgid ":mod:`django.contrib.auth` provides a new signal that is emitted whenever a user fails to login successfully. See :data:`~django.contrib.auth.signals.user_login_failed`"
msgstr ""

#: ../../releases/1.5.txt:291
#: ../../releases/1.5-alpha-1.txt:304
#: ../../releases/1.5-beta-1.txt:302
# f20770234aa74b11b2e3633a87009121
# 2d1745d7042a426ba3d39d6724840ed5
# 5dc738e93cd249af96cb9c80d05598aa
msgid "The loaddata management command now supports an `ignorenonexistent` option to ignore data for fields that no longer exist."
msgstr ""

#: ../../releases/1.5.txt:294
#: ../../releases/1.5-alpha-1.txt:307
#: ../../releases/1.5-beta-1.txt:305
# 784f4685427a4696af3594766ae65638
# 5656dbfb9d604956943cd583f295e555
# c461ff40084c4bb0ac2ef32dac0f5d83
msgid ":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test.SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality for XML content at a semantic level, without caring for syntax differences (spaces, attribute order, etc.)."
msgstr ""

#: ../../releases/1.5.txt:299
#: ../../releases/1.5-beta-1.txt:310
# 2450b2c682234ed696666182eff75353
# 9a83e3e784384314b98e53f62d879fef
msgid "RemoteUserMiddleware now forces logout when the REMOTE_USER header disappears during the same browser session."
msgstr ""

#: ../../releases/1.5.txt:302
#: ../../releases/1.5-beta-1.txt:313
# cc0afa4c093943a599dffa510fc5e34a
# 80314689e97f4c3595d2c1f9b76b8d01
msgid "The :ref:`cache-based session backend <cached-sessions-backend>` can store session data in a non-default cache."
msgstr ""

#: ../../releases/1.5.txt:305
#: ../../releases/1.5-beta-1.txt:316
# 27aa8fab9c4642638c210aea0229be00
# bea614d717434b5a9e74b943a4d066f2
msgid "Multi-column indexes can now be created on models. Read the :attr:`~django.db.models.Options.index_together` documentation for more information."
msgstr ""

#: ../../releases/1.5.txt:309
#: ../../releases/1.5-beta-1.txt:320
# 4cd25a1482db48b3bb4f8996dca70959
# 750fa2e598d6446797e743aa3909d4a6
msgid "During Django's logging configuration verbose Deprecation warnings are enabled and warnings are captured into the logging system. Logged warnings are routed through the ``console`` logging handler, which by default requires :setting:`DEBUG` to be True for output to be generated. The result is that DeprecationWarnings should be printed to the console in development environments the way they have been in Python versions < 2.7."
msgstr ""

#: ../../releases/1.5.txt:316
#: ../../releases/1.5-beta-1.txt:327
# 9e32ca9c71c942f48546cea770c106e4
# 7e0b8445e016493585879ea8a700f2e6
msgid "The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has been modified to accept additional arguments adding capabilities similar to :func:`django.contrib.messages.add_message`. This is useful for generating error messages from admin actions."
msgstr ""

#: ../../releases/1.5.txt:321
#: ../../releases/1.5-beta-1.txt:332
# 04bdc49fe3d942ca838473d4fa7f097f
# 67a8a692abfd439f9c51d57d4a2377ad
msgid "The admin's list filters can now be customized per-request thanks to the new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

#: ../../releases/1.5.txt:325
#: ../../releases/1.5-alpha-1.txt:313
#: ../../releases/1.5-beta-1.txt:336
# e4353bfe54b64a4b9afcbbb25f61ecca
# 101faef53020407795ae60cae5093377
# e6f2cb17719c4d2dbbb63531558ffcad
msgid "Backwards incompatible changes in 1.5"
msgstr ""

#: ../../releases/1.5.txt:329
#: ../../releases/1.5-alpha-1.txt:317
#: ../../releases/1.5-beta-1.txt:340
# 843e144cf068491ab553994a524707a5
# 6b6bc88a431f4905a4f5e349edd92933
# 9ec55a685fe44915a9c41d0a2c416c65
msgid "In addition to the changes outlined in this section, be sure to review the :doc:`deprecation plan </internals/deprecation>` for any features that have been removed. If you haven't updated your code within the deprecation timeline for a given feature, its removal may appear as a backwards incompatible change."
msgstr ""

#: ../../releases/1.5.txt:336
#: ../../releases/1.5-alpha-1.txt:324
#: ../../releases/1.5-beta-1.txt:347
# 5d2be0a3daa64c948392127c5ab65acd
# 64a55e11fd6547b8b57439f517bae9d0
# fdfa272fdbb44f9f91fae21d3b53c934
msgid "Context in year archive class-based views"
msgstr ""

#: ../../releases/1.5.txt:338
#: ../../releases/1.5-alpha-1.txt:326
#: ../../releases/1.5-beta-1.txt:349
# a6e5653462474f44b74e1d2e5aeecf4f
# f6beab0bfd8a46cd9547599b515a5e8a
# a2a5748a2fe94107bb1a42d4c396ce8c
msgid "For consistency with the other date-based generic views, :class:`~django.views.generic.dates.YearArchiveView` now passes ``year`` in the context as a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

#: ../../releases/1.5.txt:344
#: ../../releases/1.5-alpha-1.txt:332
#: ../../releases/1.5-beta-1.txt:355
# df5cee90c7424a2da0c3a2795057c51e
# 0b2e9240632b47ac9f1022301f8baba9
# 24e7eb48501746a19fd79a74fd09b69f
msgid "``next_year`` and ``previous_year`` were also added in the context. They are calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../releases/1.5.txt:348
#: ../../releases/1.5-alpha-1.txt:336
#: ../../releases/1.5-beta-1.txt:359
# da19a1368399456db32fc805fa711701
# 06a385a93d1a4d65b67ab9ff4e842918
# 0252094af81b45769d2e6956acf5a697
msgid "Context in year and month archive class-based views"
msgstr ""

#: ../../releases/1.5.txt:350
#: ../../releases/1.5-alpha-1.txt:338
#: ../../releases/1.5-beta-1.txt:361
# f342f2d29f764f0a86e0bf50c2ae15c3
# e0a3d3c202fb42e4ac0ba2c1c315b109
# 8c78f59bcf6e4299bbdaf741109cbe4f
msgid ":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django.views.generic.dates.MonthArchiveView` were documented to provide a ``date_list`` sorted in ascending order in the context, like their function-based predecessors, but it actually was in descending order. In 1.5, the documented order was restored. You may want to add (or remove) the ``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

#: ../../releases/1.5.txt:359
#: ../../releases/1.5-alpha-1.txt:347
#: ../../releases/1.5-beta-1.txt:370
# 6b7c0069201d405196ad1cda15009fb0
# dc7b4696de9f4fa287f5d260f2ce4c54
# d82c53ce0f834518803b59831bd0dff7
msgid ":class:`~django.views.generic.dates.ArchiveIndexView` still provides a ``date_list`` in descending order."
msgstr ""

#: ../../releases/1.5.txt:363
#: ../../releases/1.5-alpha-1.txt:351
#: ../../releases/1.5-beta-1.txt:374
# 29a00d15dd8d403793a35f2f616092f2
# 9fe4ea233d124867be7041ab888815cb
# d03134630b384f06b2f37be7ab1857e0
msgid "Context in TemplateView"
msgstr ""

#: ../../releases/1.5.txt:365
#: ../../releases/1.5-alpha-1.txt:353
#: ../../releases/1.5-beta-1.txt:376
# 557cb95137a84e6eb9a5cbf354e946f6
# 965ee04cc8424d999cd776a952f20765
# e7183b14ad19471a8a29b0c7b461ebc6
msgid "For consistency with the design of the other generic views, :class:`~django.views.generic.base.TemplateView` no longer passes a ``params`` dictionary into the context, instead passing the variables from the URLconf directly into the context."
msgstr ""

#: ../../releases/1.5.txt:371
#: ../../releases/1.5-alpha-1.txt:359
#: ../../releases/1.5-beta-1.txt:382
# cfedd3865ea64a28b34bd257e9e0a076
# c1ffca13efb74e168179daa8fbf6b1af
# ea05d6a49bfd459d9124ab9fbd064dc3
msgid "Non-form data in HTTP requests"
msgstr ""

#: ../../releases/1.5.txt:373
#: ../../releases/1.5-alpha-1.txt:361
#: ../../releases/1.5-beta-1.txt:384
# bbff4a2a09e248e4957b8ad050f6b20b
# cd98bc74595c44fc87d94fcda80f252d
# 7858c0dde7414ef4b0fb8f9087dc3ec9
msgid ":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include data posted via HTTP requests with non form-specific content-types in the header. In prior versions, data posted with content-types other than ``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still end up represented in the :attr:`request.POST <django.http.HttpRequest.POST>` attribute. Developers wishing to access the raw POST data for these cases, should use the :attr:`request.body <django.http.HttpRequest.body>` attribute instead."
msgstr ""

#: ../../releases/1.5.txt:383
#: ../../releases/1.5-alpha-1.txt:371
#: ../../releases/1.5-beta-1.txt:394
# b5be876cea034dae9866a30db6bcfbc5
# 4041bed61fa74a16bc37b38ad0f6b867
# 1600751ffca74214ad68a0b40e60efed
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

#: ../../releases/1.5.txt:385
#: ../../releases/1.5-alpha-1.txt:373
#: ../../releases/1.5-beta-1.txt:396
# 31ad6cf069ea4f639060c8be0110c473
# d7eefd2408e04c94b53f8f23f1d5eee7
# 0e5a862a3f094e6cba3841d4a6d09289
msgid "Unlike GET and POST, these HTTP methods aren't implemented by web browsers. Rather, they're used in APIs, which transfer data in various formats such as JSON or XML. Since such requests may contain arbitrary data, Django doesn't attempt to decode their body."
msgstr ""

#: ../../releases/1.5.txt:390
#: ../../releases/1.5-alpha-1.txt:378
#: ../../releases/1.5-beta-1.txt:401
# 3edcbb99ca1d46c789283c2d4db274cc
# 811592195a9b4087883e1877073e68f1
# 4c17fbb4730e414ebac3c10f7ca52576
msgid "However, the test client used to build a query string for OPTIONS and DELETE requests like for GET, and a request body for PUT requests like for POST. This encoding was arbitrary and inconsistent with Django's behavior when it receives the requests, so it was removed in Django 1.5."
msgstr ""

#: ../../releases/1.5.txt:395
#: ../../releases/1.5-alpha-1.txt:383
#: ../../releases/1.5-beta-1.txt:406
# d5fa2cd32d534ba6b94fe3ae88da8445
# eddcaee8bf094842ab84066d46cadebb
# 9b069af607644cc5b69086e01fafb22a
msgid "If you were using the ``data`` parameter in an OPTIONS or a DELETE request, you must convert it to a query string and append it to the ``path`` parameter."
msgstr ""

#: ../../releases/1.5.txt:398
#: ../../releases/1.5-alpha-1.txt:386
#: ../../releases/1.5-beta-1.txt:409
# a1ddcafbbdc94a5f87f911b20015ed3a
# 702363fa2cab4ccda34a9f040ebcc4bf
# afc012723c1543da8d4d2a3242151ea5
msgid "If you were using the ``data`` parameter in a PUT request without a ``content_type``, you must encode your data before passing it to the test client and set the ``content_type`` argument."
msgstr ""

#: ../../releases/1.5.txt:405
#: ../../releases/1.5-alpha-1.txt:391
#: ../../releases/1.5-beta-1.txt:416
# e266b04bcfc34cbdbc2c9e0cb1e3e080
# 1e323b44dfae4613a392f6fe95cd9622
# f313841e610842af86472af08172e09f
msgid "System version of :mod:`simplejson` no longer used"
msgstr ""

#: ../../releases/1.5.txt:407
# 93b831a9527b43b3b556d99143df5bc7
msgid ":ref:`As explained below <simplejson-deprecation>`, Django 1.5 deprecates :mod:`django.utils.simplejson` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5.txt:413
#: ../../releases/1.5-alpha-1.txt:399
#: ../../releases/1.5-beta-1.txt:424
# 1480a7adc08d431c93c179b399b65101
# 77865592e40f41bab6dbc743a0349e0e
# 232a31cd19da4c8791bab2fd5f7fe7a2
msgid "JSON-related features in Django 1.4 always used :mod:`django.utils.simplejson`. This module was actually:"
msgstr ""

#: ../../releases/1.5.txt:416
#: ../../releases/1.5-alpha-1.txt:402
#: ../../releases/1.5-beta-1.txt:427
# 75b25796fe7d40efa5d855a0a390b883
# 5315415fae9f4ed28608971fbe0f8370
# c1525974c0a34221b25d82e9e8e7cf4d
msgid "A system version of :mod:`simplejson`, if one was available (ie. ``import simplejson`` works), if it was more recent than Django's built-in copy or it had the C speedups, or"
msgstr ""

#: ../../releases/1.5.txt:419
#: ../../releases/1.5-alpha-1.txt:405
#: ../../releases/1.5-beta-1.txt:430
# 53c300dd7d97458cbe874236d24cb782
# b945433d17cd461d8d0fe2463374c471
# e57a0b78c4e84f24a2e1a1a203af92f4
msgid "The :mod:`json` module from the standard library, if it was available (ie. Python 2.6 or greater), or"
msgstr ""

#: ../../releases/1.5.txt:421
#: ../../releases/1.5-alpha-1.txt:407
#: ../../releases/1.5-beta-1.txt:432
# eccdb64659d24bb4849022df94701ee2
# 30dfa7f11fb145c7a829d7c1a1ab6ac1
# c602448aa6c0474da580258736a2c5cb
msgid "A built-in copy of version 2.0.7 of :mod:`simplejson`."
msgstr ""

#: ../../releases/1.5.txt:423
#: ../../releases/1.5-alpha-1.txt:409
#: ../../releases/1.5-beta-1.txt:434
# daf744fe131d4231b0588f97b84e77aa
# 20bcd11e64ee4c7aafa0273d21239e19
# 8a7796343582479597eeed498406ca36
msgid "In Django 1.5, those features use Python's :mod:`json` module, which is based on version 2.0.9 of :mod:`simplejson`."
msgstr ""

#: ../../releases/1.5.txt:426
#: ../../releases/1.5-alpha-1.txt:412
#: ../../releases/1.5-beta-1.txt:437
# 51bacd10d5e04c5d9dcd2a7241f9392a
# c348861cc9c645a0ad5b0f2a9516bb53
# c97cc52d84a44bacb10184cd371df572
msgid "There are no known incompatibilities between Django's copy of version 2.0.7 and Python's copy of version 2.0.9. However, there are some incompatibilities between other versions of :mod:`simplejson`:"
msgstr ""

#: ../../releases/1.5.txt:430
#: ../../releases/1.5-alpha-1.txt:416
#: ../../releases/1.5-beta-1.txt:441
# 5ec335b7d3114c70a1db5d8e338a19cb
# 959da49929714f97afe7deeebe048fe5
# 05a5dd6bb6004c4f88565cf7038f7195
msgid "While the :mod:`simplejson` API is documented as always returning unicode strings, the optional C implementation can return a byte string. This was fixed in Python 2.7."
msgstr ""

#: ../../releases/1.5.txt:433
#: ../../releases/1.5-alpha-1.txt:419
#: ../../releases/1.5-beta-1.txt:444
# e4e289c66d5c4b34a647ed1939db3a9b
# bd3ceb9f90f44a9189e7c69fa5e4ca0b
# 1abf794c5f4e40ebb95275ba1aa808ad
msgid ":class:`simplejson.JSONEncoder` gained a ``namedtuple_as_object`` keyword argument in version 2.2."
msgstr ""

#: ../../releases/1.5.txt:436
#: ../../releases/1.5-alpha-1.txt:422
#: ../../releases/1.5-beta-1.txt:447
# 0606a94ae0de4dd3bc26be0fcee5fbba
# 69a6135ab6d34a148835c94eef163501
# faf3fb90b7c743e4bd87957a5e1da4be
msgid "More information on these incompatibilities is available in `ticket #18023`_."
msgstr ""

#: ../../releases/1.5.txt:438
#: ../../releases/1.5-alpha-1.txt:424
#: ../../releases/1.5-beta-1.txt:449
# 527be239a182482392423e2223e508d1
# 18dfd984e491454e99c101335bfc4a20
# 54a2d5c3913449d88ecbb07e048b7834
msgid "The net result is that, if you have installed :mod:`simplejson` and your code uses Django's serialization internals directly -- for instance :class:`django.core.serializers.json.DjangoJSONEncoder`, the switch from :mod:`simplejson` to :mod:`json` could break your code. (In general, changes to internals aren't documented; we're making an exception here.)"
msgstr ""

#: ../../releases/1.5.txt:444
#: ../../releases/1.5-alpha-1.txt:430
#: ../../releases/1.5-beta-1.txt:455
# eaef92177801468b8a34e591de1cae21
# d25f50819049465e8caa2b0fc92c732a
# 6938ee75722643cfbaeeeabc5319f078
msgid "At this point, the maintainers of Django believe that using :mod:`json` from the standard library offers the strongest guarantee of backwards-compatibility. They recommend to use it from now on."
msgstr ""

#: ../../releases/1.5.txt:451
#: ../../releases/1.5-alpha-1.txt:437
#: ../../releases/1.5-beta-1.txt:462
# a914ad3df2fa4af0852fa43e80ba46b1
# 5729192ec6834d71b3514acb810c925c
# 59c56992232c4edfbc8cb70942d6dc36
msgid "String types of hasher method parameters"
msgstr ""

#: ../../releases/1.5.txt:453
#: ../../releases/1.5-alpha-1.txt:439
#: ../../releases/1.5-beta-1.txt:464
# 076fa2c385144951b586b57460ebde27
# a0f09503d3904c109a999c3730a9f42c
# 156c45919b134667bbc95840e5af078a
msgid "If you have written a :ref:`custom password hasher <auth_password_storage>`, your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the hashing methods need byte strings, you can use the :func:`~django.utils.encoding.force_bytes` utility to encode the strings."
msgstr ""

#: ../../releases/1.5.txt:460
#: ../../releases/1.5-alpha-1.txt:446
#: ../../releases/1.5-beta-1.txt:471
# 7b9c3e252a87470c963f5f0f8a3da789
# e872cde4622e47c691864b3fc6943e3b
# 712607ca19684c499284c8697666ead3
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

#: ../../releases/1.5.txt:462
#: ../../releases/1.5-alpha-1.txt:448
#: ../../releases/1.5-beta-1.txt:473
# fc51b4d4db4d477d9a5169476ea79d0a
# b46b787327944e4abf30c4bc33304c30
# aee02814c788490894213ec109d577ae
msgid "When using :doc:`object pagination </topics/pagination>`, the ``previous_page_number()`` and ``next_page_number()`` methods of the :class:`~django.core.paginator.Page` object did not check if the returned number was inside the existing page range. It does check it now and raises an :exc:`InvalidPage` exception when the number is either too low or too high."
msgstr ""

#: ../../releases/1.5.txt:470
#: ../../releases/1.5-alpha-1.txt:456
#: ../../releases/1.5-beta-1.txt:481
# b338309a870f4b8c85b26ceaa4732205
# cbb50620e1e24e23a2c8f384a882a596
# 332e446743dd4c0c8f485091551c6b2e
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

#: ../../releases/1.5.txt:472
#: ../../releases/1.5-alpha-1.txt:458
#: ../../releases/1.5-beta-1.txt:483
# dfec2a0bfc024da9a756e7e4da86b59e
# 2306d4944ccf407680babc3d576cbfe2
# db346637d33047ea83ada5e1771ac61f
msgid "PostgreSQL's autocommit option didn't work as advertised previously. It did work for single transaction block, but after the first block was left the autocommit behavior was never restored. This bug is now fixed in 1.5. While this is only a bug fix, it is worth checking your applications behavior if you are using PostgreSQL together with the autocommit option."
msgstr ""

#: ../../releases/1.5.txt:479
#: ../../releases/1.5-alpha-1.txt:465
#: ../../releases/1.5-beta-1.txt:490
# 6fa72f872c8d40198fea8d24479a697c
# 425b8fb348b84840b2e36a804fc32122
# ab2d3da261a54e3d8db0fae27b4a02d1
msgid "Session not saved on 500 responses"
msgstr ""

#: ../../releases/1.5.txt:481
#: ../../releases/1.5-alpha-1.txt:467
#: ../../releases/1.5-beta-1.txt:492
# ad9843be58034e09924d28549e10e29c
# f8c4666a73374426b7aa04fce41b8a1a
# 319ed3a3419b4e6a91ebf4d6aeae83b9
msgid "Django's session middleware will skip saving the session data if the response's status code is 500."
msgstr ""

#: ../../releases/1.5.txt:485
#: ../../releases/1.5-alpha-1.txt:471
#: ../../releases/1.5-beta-1.txt:496
# fd4cf35e68964baa8da6bc6cdaea8df2
# b956ff53ee63495baa769c1ef8f29c8d
# d4b534a929894c6a915a34160ab94e90
msgid "Email checks on failed admin login"
msgstr ""

#: ../../releases/1.5.txt:487
#: ../../releases/1.5-alpha-1.txt:473
#: ../../releases/1.5-beta-1.txt:498
# c995d45c6cc6481b8260d03f6ddbf002
# 45b85912a97d4154a0a8036cbefe1f12
# a20d6152cc7644cc8f347da207f6f296
msgid "Prior to Django 1.5, if you attempted to log into the admin interface and mistakenly used your email address instead of your username, the admin interface would provide a warning advising that your email address was not your username. In Django 1.5, the introduction of :ref:`custom User models <auth-custom-user>` has required the removal of this warning. This doesn't change the login behavior of the admin site; it only affects the warning message that is displayed under one particular mode of login failure."
msgstr ""

#: ../../releases/1.5.txt:497
#: ../../releases/1.5-alpha-1.txt:483
#: ../../releases/1.5-beta-1.txt:508
# c3bea0afb05b4d4fb2a32c821a2bd5b9
# d138113186294d36915c2876e13e07c9
# 16e9a085fa5a4e3481794c226c48e22e
msgid "Changes in tests execution"
msgstr ""

#: ../../releases/1.5.txt:499
#: ../../releases/1.5-alpha-1.txt:485
#: ../../releases/1.5-beta-1.txt:510
# 98ae440203964f2dac41ba2b7879d536
# ce184be6b4ea4410b18ce5a141b49980
# b0ef19b8a30b42c9b9465c04e1c87177
msgid "Some changes have been introduced in the execution of tests that might be backward-incompatible for some testing setups:"
msgstr ""

#: ../../releases/1.5.txt:503
#: ../../releases/1.5-alpha-1.txt:489
#: ../../releases/1.5-beta-1.txt:514
# b57eb6c28f04400f9faadb6e8bf9acc0
# 072361f572214b98acb9ce95cb39ec4c
# 1d54cece0ec1413a832e7ddb052e1862
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

#: ../../releases/1.5.txt:505
#: ../../releases/1.5-alpha-1.txt:491
#: ../../releases/1.5-beta-1.txt:516
# 5eb67b61bf894e3b9ddf61be582fe676
# 7ee86040de9c416a86ca28243c1f9540
# a7af61241afc44b68ad97f02849fe9d1
msgid "Previously, the test database was truncated *before* each test run in a :class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../releases/1.5.txt:508
#: ../../releases/1.5-alpha-1.txt:494
#: ../../releases/1.5-beta-1.txt:519
# 1fce9f9087a441c9b4af0b3b14ecabae
# 7591fbd777934075857bd5bd9c2df48c
# b5291a1a84cf4f4db9d6f14ce0aecf22
msgid "In order to be able to run unit tests in any order and to make sure they are always isolated from each other, :class:`~django.test.TransactionTestCase` will now reset the database *after* each test run instead."
msgstr ""

#: ../../releases/1.5.txt:513
#: ../../releases/1.5-alpha-1.txt:499
#: ../../releases/1.5-beta-1.txt:524
# 75dddf9b38c54eba87686b3e287d3955
# 0418b0ea806640cf903528850dc3ea13
# 1325e539d27346b4a52cb273e55bb213
msgid "No more implicit DB sequences reset"
msgstr ""

#: ../../releases/1.5.txt:515
#: ../../releases/1.5-alpha-1.txt:501
#: ../../releases/1.5-beta-1.txt:526
# 05a1bf0c154440f49508b8adb9057dab
# 8b696031f41140e79ee67f3f9a13b970
# 34e47f0b2e2d415d880a39874febdbcc
msgid ":class:`~django.test.TransactionTestCase` tests used to reset primary key sequences automatically together with the database flushing actions described above."
msgstr ""

#: ../../releases/1.5.txt:519
#: ../../releases/1.5-alpha-1.txt:505
#: ../../releases/1.5-beta-1.txt:530
# 718563629c464db38d250c3e98c57d82
# fd2f34a5e48144fc84911e15b6df8fa4
# ef99d96ca0f54a538ac41e1a32e2cff3
msgid "This has been changed so no sequences are implicitly reset. This can cause :class:`~django.test.TransactionTestCase` tests that depend on hard-coded primary key values to break."
msgstr ""

#: ../../releases/1.5.txt:523
#: ../../releases/1.5-alpha-1.txt:509
#: ../../releases/1.5-beta-1.txt:534
# 534f415338cc497f8d6f4a0145f765cb
# 3be13cca38e54d429323396c33490718
# ebe12d9e39f54ab99c61b5dfc2199fda
msgid "The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute can be used to force the old behavior for :class:`~django.test.TransactionTestCase` that might need it."
msgstr ""

#: ../../releases/1.5.txt:528
#: ../../releases/1.5-alpha-1.txt:514
#: ../../releases/1.5-beta-1.txt:539
# a18b307b53af4cd6ad0746b1d3cdfcf1
# ce427a69439d4ae8ae227698d5f90ccb
# 2e8fb69a16354331bdccbc933f8d96fe
msgid "Ordering of tests"
msgstr ""

#: ../../releases/1.5.txt:530
#: ../../releases/1.5-alpha-1.txt:516
#: ../../releases/1.5-beta-1.txt:541
# f95eac7ea0114369b4c5e76344417145
# 9feea81421dc49e7ad5395aec7194cba
# ebf689ecb8094c5595968bb2862bcf98
msgid "In order to make sure all ``TestCase`` code starts with a clean database, tests are now executed in the following order:"
msgstr ""

#: ../../releases/1.5.txt:533
#: ../../releases/1.5-alpha-1.txt:519
#: ../../releases/1.5-beta-1.txt:544
# 1a728d134b9a49439cba2627c24d8f67
# 524610a09f0045b28dd53b9827a211a4
# 5e196621a024440c8754a0707b808970
msgid "First, all unittests (including :class:`unittest.TestCase`, :class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django.test.TransactionTestCase`) are run with no particular ordering guaranteed nor enforced among them."
msgstr ""

#: ../../releases/1.5.txt:538
#: ../../releases/1.5-alpha-1.txt:524
#: ../../releases/1.5-beta-1.txt:549
# 26511f610918418dbc6c144fa7905459
# 035ca71818e441638518cc1b341967b4
# ff8cdc1964314c15a93cb7a134e821f7
msgid "Then any other tests (e.g. doctests) that may alter the database without restoring it to its original state are run."
msgstr ""

#: ../../releases/1.5.txt:541
#: ../../releases/1.5-alpha-1.txt:527
#: ../../releases/1.5-beta-1.txt:552
# c115594e98e440a9b5d1788d588edca7
# 5d8aed4fdfee402b8623f290ec000ad2
# 51ab3b1504f3420ba30ada1fca29d362
msgid "This should not cause any problems unless you have existing doctests which assume a :class:`~django.test.TransactionTestCase` executed earlier left some database state behind or unit tests that rely on some form of state being preserved after the execution of other tests. Such tests are already very fragile, and must now be changed to be able to run independently."
msgstr ""

#: ../../releases/1.5.txt:548
#: ../../releases/1.5-alpha-1.txt:534
#: ../../releases/1.5-beta-1.txt:559
# e8be97dcf9be4595bb3fd0552bbd5a9a
# dc5f2ed8cf484026a650df12dbd47375
# 2c9a7da307e446fdac735fc8f2ff5d4a
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

#: ../../releases/1.5.txt:550
#: ../../releases/1.5-alpha-1.txt:536
#: ../../releases/1.5-beta-1.txt:561
# 16e59210aba34af386a2820ec611b904
# 155ffe790e1c45d6a55d3b96cca028a8
# 024c8c6a428d4b28ba8a2abcd4fec4ce
msgid "The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present after form validation. When the form doesn't validate, it contains only the fields that passed validation. You should test the success of the validation with the :meth:`~django.forms.Form.is_valid()` method and not with the presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute on the form."
msgstr ""

#: ../../releases/1.5.txt:558
#: ../../releases/1.5-beta-1.txt:569
# 804bddf8b1424fd3825ea6f7334eeebe
# aa8a154eb2ea4337b2d1f4279ee08b95
msgid "Behavior of :djadmin:`syncdb` with multiple databases"
msgstr ""

#: ../../releases/1.5.txt:560
#: ../../releases/1.5-beta-1.txt:571
# 147df5441a8d4c0593724646cff609bf
# 4c2205f79edf4b818dbf7ee1520a2e2f
msgid ":djadmin:`syncdb` now queries the database routers to determine if content types (when :mod:`~django.contrib.contenttypes` is enabled) and permissions (when :mod:`~django.contrib.auth` is enabled) should be created in the target database. Previously, it created them in the default database, even when another database was specified with the :djadminopt:`--database` option."
msgstr ""

#: ../../releases/1.5.txt:566
#: ../../releases/1.5-beta-1.txt:577
# a7c2ebd276ec40f7a4e3c13419257f57
# cde2131050db42a5b3e94e2446509d9d
msgid "If you use :djadmin:`syncdb` on multiple databases, you should ensure that your routers allow synchronizing content types and permissions to only one of them. See the docs on the :ref:`behavior of contrib apps with multiple databases <contrib_app_multiple_databases>` for more information."
msgstr ""

#: ../../releases/1.5.txt:572
#: ../../releases/1.5-alpha-1.txt:544
#: ../../releases/1.5-beta-1.txt:583
# a24eb37f61c1447a88033a8abf21c9bc
# aa905200c039487e93df4938c343252c
# 61fa56e4df3647618bebddf731be0ac4
msgid "Miscellaneous"
msgstr ""

#: ../../releases/1.5.txt:574
#: ../../releases/1.5-alpha-1.txt:546
#: ../../releases/1.5-beta-1.txt:585
# 8ffe96aae01f4f1e82d312b6130e94f3
# f5f4e47bc5f341438128652382858454
# 2cd1f220b41a4b11acb0b050d086bccf
msgid ":class:`django.forms.ModelMultipleChoiceField` now returns an empty ``QuerySet`` as the empty value instead of an empty list."
msgstr ""

#: ../../releases/1.5.txt:577
#: ../../releases/1.5-alpha-1.txt:549
#: ../../releases/1.5-beta-1.txt:588
# da1a242afcc34b5cbf209953b4aa1c24
# 7f411c1630c647239383f410eb5c3023
# 9f5eafc545eb4bf1bc34d12f22844aee
msgid ":func:`~django.utils.http.int_to_base36` properly raises a :exc:`TypeError` instead of :exc:`ValueError` for non-integer inputs."
msgstr ""

#: ../../releases/1.5.txt:580
#: ../../releases/1.5-alpha-1.txt:552
#: ../../releases/1.5-beta-1.txt:591
# f98f892628da47fcb1d227a4200c5bd7
# 3b1544b5f96b4ce1b76fe184ae269bee
# 51433213f35446a68d86acfb3d23d700
msgid "The ``slugify`` template filter is now available as a standard python function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is available at :func:`django.utils.html.remove_tags`."
msgstr ""

#: ../../releases/1.5.txt:584
#: ../../releases/1.5-alpha-1.txt:556
#: ../../releases/1.5-beta-1.txt:595
# 8d59b78184dc4c878d5346cb2464a13c
# 0e5c2df3cbca4b0d9bb708f079ca8877
# 2df36857c9554643baa37212d56557d2
msgid "Uploaded files are no longer created as executable by default. If you need them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your needs. The new default value is `0666` (octal) and the current umask value is first masked out."
msgstr ""

#: ../../releases/1.5.txt:589
#: ../../releases/1.5-alpha-1.txt:561
#: ../../releases/1.5-beta-1.txt:600
# 118c4498d8a24ec3b1aa95c0bea7cc82
# d3b7b9aae52a4ae19e9702707b0cb1bd
# f0d7ddcbfa674ae396c3d42d9b433e40
msgid "The :ref:`F() expressions <query-expressions>` supported bitwise operators by ``&`` and ``|``. These operators are now available using ``.bitand()`` and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be consistent with :ref:`Q() expressions <complex-lookups-with-q>` and ``QuerySet`` combining where the operators are used as boolean AND and OR operators."
msgstr ""

#: ../../releases/1.5.txt:595
#: ../../releases/1.5-beta-1.txt:606
# c7c087b7092e48f589acbd67d55877a5
# 032fed027e664b888b3d55ef674a96e6
msgid "In a ``filter()`` call, when :ref:`F() expressions <query-expressions>` contained lookups spanning multi-valued relations, they didn't always reuse the same relations as other lookups along the same chain. This was changed, and now F() expressions will always use the same relations as other lookups within the same ``filter()`` call."
msgstr ""

#: ../../releases/1.5.txt:601
#: ../../releases/1.5-alpha-1.txt:567
#: ../../releases/1.5-beta-1.txt:612
# 17be59a1e2d34725b212fdd1eb2b1325
# 13d4bada6cf949b4b23971b341e02940
# 519007dd8c5d41d3892cc161d4d7cc64
msgid "The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you need HTML validation against pre-HTML5 Strict DTDs, you should add a div around it in your pages."
msgstr ""

#: ../../releases/1.5.txt:605
#: ../../releases/1.5-beta-1.txt:616
# eb0aad6f2ffe4bb983b02b2013c4341a
# dad0e761f06b4dda9501e835bb0b7c64
msgid "The template tags library ``adminmedia``, which only contained the deprecated template tag ``{% admin_media_prefix %}``, was removed. Attempting to load it with ``{% load adminmedia %}`` will fail. If your templates still contain that line you must remove it."
msgstr ""

#: ../../releases/1.5.txt:611
#: ../../releases/1.5-alpha-1.txt:572
#: ../../releases/1.5-beta-1.txt:622
# 85b96b2fb8d64c29b1925ed874a6e949
# ce9437610cbb4151a6483e779b0cb96f
# 214652c059b2461bbfc29da44c82dde6
msgid "Features deprecated in 1.5"
msgstr ""

#: ../../releases/1.5.txt:616
#: ../../releases/1.5-alpha-1.txt:575
#: ../../releases/1.5-beta-1.txt:627
# d086be30a74e48ffbe1c87cc1e8812de
# 332d76b1d46a4045a48e45b1dc9482ad
# 6db24b88c5e0424cac6130aeaffd553f
msgid ":setting:`AUTH_PROFILE_MODULE`"
msgstr ""

#: ../../releases/1.5.txt:618
#: ../../releases/1.5-alpha-1.txt:577
#: ../../releases/1.5-beta-1.txt:629
# 229228e76d0542e087677859998f58cb
# 2630e31879a64fad8f9928e0fd7dc434
# 2fe525f92eea4a9496518a902ae6a74a
msgid "With the introduction of :ref:`custom User models <auth-custom-user>`, there is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

#: ../../releases/1.5.txt:621
#: ../../releases/1.5-alpha-1.txt:580
#: ../../releases/1.5-beta-1.txt:632
# 783b461a052745c59141908c04160180
# a1c2ed00985b49f49c30e8d3b087e6b3
# f88b5d6082514014a304c22865b8b5fc
msgid "You can still define user profiles models that have a one-to-one relation with the User model - in fact, for many applications needing to associate data with a User account, this will be an appropriate design pattern to follow. However, the :setting:`AUTH_PROFILE_MODULE` setting, and the :meth:`~django.contrib.auth.models.User.get_profile()` method for accessing the user profile model, should not be used any longer."
msgstr ""

#: ../../releases/1.5.txt:629
#: ../../releases/1.5-alpha-1.txt:588
#: ../../releases/1.5-beta-1.txt:640
# 548794fdb1b1444ca7bbc15226e4f9ca
# c5d0469bf9d44e00b1d0419ef75852dd
# 7c2ff0ca56d74d2689d34cede32f593e
msgid "Streaming behavior of :class:`HttpResponse`"
msgstr ""

#: ../../releases/1.5.txt:631
# c0046fe892ad4c5589058cf29b4c06ff
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:`explicit-streaming-responses` above."
msgstr ""

#: ../../releases/1.5.txt:636
#: ../../releases/1.5-alpha-1.txt:594
#: ../../releases/1.5-beta-1.txt:647
# ac497a56f2f648ea8decee91e4afe885
# f3d994ad78fa4fef9cfbd5cb2a5a4c2c
# f8908e251518432da61c9549c71a181a
msgid "In Django 1.7 and above, the iterator will be consumed immediately by :class:`~django.http.HttpResponse`."
msgstr ""

#: ../../releases/1.5.txt:640
#: ../../releases/1.5-alpha-1.txt:598
#: ../../releases/1.5-beta-1.txt:651
# 5041e96e07cd418c926987def5098a5a
# 2b8237338df74c16a52c1b0fa0026759
# 6f97e3bc2f264c4e9bb002f601350e02
msgid "``django.utils.simplejson``"
msgstr ""

#: ../../releases/1.5.txt:642
#: ../../releases/1.5-alpha-1.txt:600
#: ../../releases/1.5-beta-1.txt:653
# f8c6dff5892c492fb39438c8b4333637
# 882a35c5bb164a8cba578daa4c42231a
# 66f602612599445c90670a609ab3a01e
msgid "Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:`json` module being available in Python's standard library, so we've removed our own copy of :mod:`simplejson`. You should now import :mod:`json` instead :mod:`django.utils.simplejson`."
msgstr ""

#: ../../releases/1.5.txt:647
# 9c8e4038bea24ecc9de1c05fca8f4a4a
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the :ref:`backwards-incompatible changes <simplejson-incompatibilities>` section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5.txt:654
#: ../../releases/1.5-alpha-1.txt:612
#: ../../releases/1.5-beta-1.txt:665
# 5a5786e038e4434b92012cfb87baa4d5
# e9e6687d7e9a443c8e60dca5eb028daf
# e127ad9df107487a8eb6674f0e343a84
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

#: ../../releases/1.5.txt:656
#: ../../releases/1.5-alpha-1.txt:614
#: ../../releases/1.5-beta-1.txt:667
# 89f95fd7874a41c2ac3ebd19ff434782
# f6341b068f284606ac069a9bb8a3cf3d
# 65d5eeb8f43e4cfebbd4442707a47535
msgid "The :class:`~django.utils.encoding.StrAndUnicode` mix-in has been deprecated. Define a ``__str__`` method and apply the :func:`~django.utils.encoding.python_2_unicode_compatible` decorator instead."
msgstr ""

#: ../../releases/1.5.txt:661
#: ../../releases/1.5-alpha-1.txt:619
#: ../../releases/1.5-beta-1.txt:672
# 781f4e25e5704fd5b36594da89c55852
# 174b06cfee454da2bbcad01854dcbd6b
# 8e752015552d4945a4cadca5d5a6d792
msgid "``django.utils.itercompat.product``"
msgstr ""

#: ../../releases/1.5.txt:663
#: ../../releases/1.5-alpha-1.txt:621
#: ../../releases/1.5-beta-1.txt:674
# 6fa9ffc0d2fe4011913ad40ddd51e22a
# 029abef608b54122a1ea3b3acd1368f1
# b6516a06f14c4650a1771117e7eb2534
msgid "The :func:`~django.utils.itercompat.product` function has been deprecated. Use the built-in :func:`itertools.product` instead."
msgstr ""

#: ../../releases/1.5.txt:667
#: ../../releases/1.5-alpha-1.txt:626
#: ../../releases/1.5-beta-1.txt:678
# 2a66eca7fb314d03adeb5b201ae531cf
# fa48216e02fd498a908248046539ce7e
# 5c275d1f563048cfa162d806ddc7b336
msgid "``django.utils.markup``"
msgstr ""

#: ../../releases/1.5.txt:669
#: ../../releases/1.5-alpha-1.txt:628
#: ../../releases/1.5-beta-1.txt:680
# de4e2ba744f9447d896636f930c6276e
# 0a7fafea25c14b5e953be7f0d0416698
# 875704e66beb44f1978b05a1489fbe79
msgid "The markup contrib module has been deprecated and will follow an accelerated deprecation schedule. Direct use of python markup libraries or 3rd party tag libraries is preferred to Django maintaining this functionality in the framework."
msgstr ""

#: ../../releases/1.5.txt:675
#: ../../releases/1.5-beta-1.txt:686
# aa479e04f822483f993a12f74217a20c
# 6f8aa76a10114d678c43507029932211
msgid "``cleanup`` management command"
msgstr ""

#: ../../releases/1.5.txt:677
#: ../../releases/1.5-beta-1.txt:688
# 6a2274d2ff8a42a795492cea68da1fb0
# 977858ecb2134ae0861168f7c785743f
msgid "The :djadmin:`cleanup` management command has been deprecated and replaced by :djadmin:`clearsessions`."
msgstr ""

#: ../../releases/1.5.txt:681
#: ../../releases/1.5-beta-1.txt:692
# fbb519b5864248c697b7c489d7960490
# b4feb75d74d6405bbc5ee301070bf5f5
msgid "``daily_cleanup.py`` script"
msgstr ""

#: ../../releases/1.5.txt:683
#: ../../releases/1.5-beta-1.txt:694
# 281f373267b74691840c8a81c06c07ab
# ea51587ae5454a49894fbf5579c2d616
msgid "The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :djadmin:`clearsessions` management command instead."
msgstr ""

#: ../../releases/1.5.txt:687
#: ../../releases/1.5-beta-1.txt:698
# 230af0d22c664420a0c13f06114c548c
# f510757f48c848a7aeb09571f797ce0c
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

#: ../../releases/1.5.txt:689
#: ../../releases/1.5-beta-1.txt:700
# c31b8294cb5448748d40a6b974e07257
# 54ffc7527b7b4b93810729c1160c62d1
msgid "The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet.select_related` has been deprecated. You should use field names instead."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:3
# a56f5793bd7249aa94dbf0c8c771e740
msgid "Django 1.5 alpha release notes"
msgstr ""

#: ../../releases/1.5-alpha-1.txt:5
# 984817c08ce54d208cf004ef6af791ab
msgid "October 25, 2012."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:7
# 8fdc76825ce3474fbdfdd25fe1b25bd0
msgid "Welcome to Django 1.5 alpha!"
msgstr ""

#: ../../releases/1.5-alpha-1.txt:9
# 143a992420b14f0594f0bc4067a24dcb
msgid "This is the first in a series of preview/development releases leading up to the eventual release of Django 1.5, scheduled for December 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.5 release."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:18
# f58361fd3c7a4989b144995718a5ea81
msgid "In particular, we need the community's help to test Django 1.5's new `Python 3 support`_ -- not just to report bugs on Python 3, but also regressions on Python 2. While Django is very conservative with regards to backwards compatibility, mistakes are always possible, and it's likely that the Python 3 refactoring work introduced some regressions."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:24
# 1a6bf78f2dbd43dda5d5d5924921ef1e
msgid "Django 1.5 alpha includes various `new features`_ and some minor `backwards incompatible changes`_. There are also some features that have been dropped, which are detailed in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun the deprecation process for some features`_."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:64
# 50df17df71d3472d810a3c7f5cce2a8b
msgid "Wherever possible we try to introduce new features in a backwards-compatible manner per :doc:`our API stability policy </misc/api-stability>` policy. However, as with previous releases, Django 1.5 ships with some minor `backwards incompatible changes`_; people upgrading from previous versions of Django should read that list carefully."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:103
# 054e9139647045ceadb6299a4f62dfd7
msgid "Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and above. This comes in the form of a **single** codebase; you don't need to install a different version of Django on Python 3. This means that you can write application targeted for just Python 2, just Python 3, or single applications that support both platforms."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:132
# cb4b0a95f1c44733a208019342b13790
msgid "In Django 1.5, you can now use your own model as the store for user-related data. If your project needs a username with more than 30 characters, or if you want to store usernames in a format other than first name/last name, or you want to put custom profile information onto your User object, you can now do so."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:393
# ac08fbf62d42461f8bdee527f396bcd3
msgid "As explained below, Django 1.5 deprecates :mod:`django.utils.simplejson` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:590
# 92855cb2bbb340458a6acc6debd3ee5e
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See above for more details."
msgstr ""

#: ../../releases/1.5-alpha-1.txt:605
# cf783f0ae4b546dc8ef5f71f398a7f81
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the backwards- incompatible changes section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/1.5-beta-1.txt:3
# f7753d7218ce4c2fa31ff70afa109f7f
msgid "Django 1.5 beta release notes"
msgstr ""

#: ../../releases/1.5-beta-1.txt:5
# c80fe97a5ee145f79d447c2d36370e45
msgid "November 27, 2012."
msgstr ""

#: ../../releases/1.5-beta-1.txt:7
# b43ffe8b9bfa491f948cbc77b142f599
msgid "Welcome to Django 1.5 beta!"
msgstr ""

#: ../../releases/1.5-beta-1.txt:9
# a74b885b5e4b4d1c9f1f64fb3ba31ee9
msgid "This is the second in a series of preview/development releases leading up to the eventual release of Django 1.5, scheduled for Decemeber 2012. This release is primarily targeted at developers who are interested in trying out new features and testing the Django codebase to help identify and resolve bugs prior to the final 1.5 release."
msgstr ""

#: ../../releases/1.5-beta-1.txt:53
# 47cd0b64d7d44161b9f03386b7a41ee3
msgid "Better `support for streaming responses <#explicit-streaming-responses-beta-1>`_ via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

#: ../../releases/1.5-beta-1.txt:81
# b4191bacec114be994f26467d48fd332
msgid "Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

#: ../../releases/1.5-beta-1.txt:418
# c4de3dd9c87347ef8eed7b7d60263605
msgid ":ref:`As explained below <simplejson-deprecation-beta-1>`, Django 1.5 deprecates :mod:`django.utils.simplejson` in favor of Python 2.6's built-in :mod:`json` module. In theory, this change is harmless. Unfortunately, because of incompatibilities between versions of :mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

#: ../../releases/1.5-beta-1.txt:642
# 394532795e3842528710acb5642a8cee
msgid "Django 1.5 deprecates the ability to stream a response by passing an iterator to :class:`~django.http.HttpResponse`. If you rely on this behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:`explicit-streaming-responses-beta-1` above."
msgstr ""

#: ../../releases/1.5-beta-1.txt:658
# 7efc6f91cdff4e1f95e853ff75767959
msgid "Unfortunately, this change might have unwanted side-effects, because of incompatibilities between versions of :mod:`simplejson` -- see the :ref:`backwards-incompatible changes <simplejson-incompatibilities-beta-1>` section. If you rely on features added to :mod:`simplejson` after it became Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

#: ../../releases/index.txt:3
# 9aec8589ff3348e1924ca864bb11c1e4
msgid "Release notes"
msgstr ""

#: ../../releases/index.txt:5
# 8958717d234c49d08baa39a2f242d039
msgid "Release notes for the official Django releases. Each release note will tell you what's new in each version, and will also describe any backwards-incompatible changes made in that version."
msgstr ""

#: ../../releases/index.txt:9
# 1c285979f428434192e0e05097f2afd2
msgid "For those upgrading to a new version of Django, you will need to check all the backwards-incompatible changes and deprecated features for each 'final' release from the one after your current Django version, up to and including the new version."
msgstr ""

#: ../../releases/index.txt:15
# 354b291daee340d391c695af78ebcca0
msgid "Final releases"
msgstr ""

#: ../../releases/index.txt:20
# add2eeda92c2437db03b0fa4a60e82fe
msgid "1.5 release"
msgstr ""

#: ../../releases/index.txt:27
# 13355a2c00cf471190650cea8bfe4d75
msgid "1.4 release"
msgstr ""

#: ../../releases/index.txt:36
# 813691376de24d3eac358e3458144875
msgid "1.3 release"
msgstr ""

#: ../../releases/index.txt:45
# 4aa3d03deae04f59bc936c10aa099877
msgid "1.2 release"
msgstr ""

#: ../../releases/index.txt:59
# 4dd3c3f43e2b4637a16b5afce6b04e55
msgid "1.1 release"
msgstr ""

#: ../../releases/index.txt:69
# 31c6ed6f673d450ca7dfa3781bdd85e3
msgid "1.0 release"
msgstr ""

#: ../../releases/index.txt:78
# 7a198ea698ab4173bddb5ee59f923563
msgid "Pre-1.0 releases"
msgstr ""

#: ../../releases/index.txt:86
# cae230d4959549b782b4af5bd611c78b
msgid "Development releases"
msgstr ""

#: ../../releases/index.txt:88
# 60b7232f45334b1d949ee4a680182d92
msgid "These notes are retained for historical purposes. If you are upgrading between formal Django releases, you don't need to worry about these notes."
msgstr ""

