# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Yong Choi <sk8er.choi@gmail.com>, 2013.
msgid ""
msgstr ""
"Project-Id-Version: Django Docs Korean\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-13 09:00\n"
"PO-Revision-Date: 2013-02-02 23:26+0900\n"
"Last-Translator: Yong Choi <sk8er.choi@gmail.com>\n"
"Language-Team: Korean (http://www.transifex.com/projects/p/django-docs-"
"korean/language/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.5.4\n"

# 0045a56c06e94bd29f584a0f28aa5d4b
#: ../../topics/auth.txt:3
msgid "User authentication in Django"
msgstr "Django에서의 사용자 인증"

# 0abb1b17c326477f81ce320012005bd6
#: ../../topics/auth.txt:8
msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This document explains "
"how things work."
msgstr ""
"장고는 사용자 인증 시스템을 갖추고 있습니다.  이 시스템은 사용자 계정, 그룹, "
"권한과 쿠키 기반 사용자 세션을 처리합니다. 이 문서는 그러한 것들이 어떻게 작"
"동하는지 설명합니다."

# 321ec86dd7894c02939b417e5aacfeff
# bf6c55c27c35431a8f42e1460b1bbcc0
# 17fb7bc1dfa446558d03736e41777232
# 680b7659ec3849ea9d3205a054b30ba2
# 2ee0d1d9794a4d99bcf5347c0d9e23ca
# 78d2cf0f04e8413194c5891f335a6c11
# 0d705abc590745488c7c12a87bb15bbf
#: ../../topics/auth.txt:13 ../../topics/forms/index.txt:26
#: ../../topics/http/urls.txt:18 ../../topics/i18n/formatting.txt:8
#: ../../topics/i18n/index.txt:14 ../../topics/i18n/timezones.txt:12
#: ../../topics/i18n/translation.txt:8
msgid "Overview"
msgstr "개요"

# fca14661faf6455baaa0a6bfc7bd3d4c
#: ../../topics/auth.txt:15
msgid "The auth system consists of:"
msgstr "인증 시스템의 구성은 다음과 같습니다."

# f094a2945e144ccebaf0acf35ee77703
# 2dd623b51a8f4bdeb373b96562442c83
# ce9e4776ff7d47d8ad1cba66ee3b73c1
#: ../../topics/auth.txt:17 ../../topics/auth.txt:50
#: ../../topics/auth.txt:1680
msgid "Users"
msgstr "사용자"

# 375932604161493a91662f0f7e4324e0
#: ../../topics/auth.txt:18
msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""
"권한: 사용자가 특정 작업을 수행할 수 있는지를 지정하는 이항(예/아니오) 플래"
"그."

# 7bb468ce649c4ac1a0509668f778a6fd
#: ../../topics/auth.txt:20
msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr "그룹: 한 명 이상의 사용자에게 라벨과 권한을 적용하는 일반적인 방법."

# 4a8ad412f66b4034a6c0e897cfb71b61
#: ../../topics/auth.txt:24
msgid "Installation"
msgstr "설치"

# d120d655da20486b923e2de49aef72f9
#: ../../topics/auth.txt:26
msgid ""
"Authentication support is bundled as a Django application in ``django."
"contrib.auth``. To install it, do the following:"
msgstr ""
"인증 지원은 ``django.contrib.auth`` 내의 장고 애플리케이션으로서 배포됩니다. "
"설치하려면 다음을 수행하십시오:"

# 999ba2ef0f134cd4b2ec9ecc7781f74c
#: ../../topics/auth.txt:29
msgid ""
"Put ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in your :"
"setting:`INSTALLED_APPS` setting. (The :class:`~django.contrib.auth.models."
"Permission` model in :mod:`django.contrib.auth` depends on :mod:`django."
"contrib.contenttypes`.)"
msgstr ""
":setting:`INSTALLED_APPS` 설정에 ``'django.contrib.auth'``\\ 와 ``'django."
"contrib.contenttypes'``\\ 를 추가합니다. (:mod:`django.contrib.auth`\\ 의 :"
"class:`~django.contrib.auth.models.Permission` 모델은 :mod:`django.contrib."
"contenttypes`\\ 에 의존합니다.)"

# 0c6d294d9c824970bb5555d91a4462b2
#: ../../topics/auth.txt:33
msgid "Run the command ``manage.py syncdb``."
msgstr "``manage.py syncdb`` 명령을 수행합니다."

# 510bad05a1054440b984a32c93645a28
#: ../../topics/auth.txt:35
msgid ""
"Note that the default :file:`settings.py` file created by :djadmin:`django-"
"admin.py startproject <startproject>` includes ``'django.contrib.auth'`` and "
"``'django.contrib.contenttypes'`` in :setting:`INSTALLED_APPS` for "
"convenience.  If your :setting:`INSTALLED_APPS` already contains these apps, "
"feel free to run :djadmin:`manage.py syncdb <syncdb>` again; you can run "
"that command as many times as you'd like, and each time it'll only install "
"what's needed."
msgstr ""

# 0165a9b777fd478fa5e38be8c1841d21
#: ../../topics/auth.txt:43
msgid ""
"The :djadmin:`syncdb` command creates the necessary database tables, creates "
"permission objects for all installed apps that need 'em, and prompts you to "
"create a superuser account the first time you run it."
msgstr ""

# 250f21670a414a508bf405b71527c68b
#: ../../topics/auth.txt:47
msgid "Once you've taken those steps, that's it."
msgstr ""

# ea7fc79e5a8749dc8b882607badb1069
# 664bc87d114249cfaee0538923bd311c
# 65644522b87a4513bd7027aef25f9a1a
#: ../../topics/auth.txt:55 ../../topics/auth.txt:1611
#: ../../topics/auth.txt:1767
msgid "API reference"
msgstr ""

# 7356dedf21604755b892f8d9d91ecd19
# bbe227e1feab499a9f9c73bbefcd0e8e
# bfaf551da6ef4b58b286b3852575b925
# eb6384e9285a4598afe6e6e17b56d9ac
#: ../../topics/auth.txt:58 ../../topics/auth.txt:1618
#: ../../topics/auth.txt:1772 ../../topics/db/models.txt:83
msgid "Fields"
msgstr ""

# 0fde0b9282354b0da08cf96b4b810305
#: ../../topics/auth.txt:62
msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

# aaf1ce87be5e4c869d1d9f085ba9705c
#: ../../topics/auth.txt:67
msgid ""
"Required. 30 characters or fewer. Usernames may contain alphanumeric, ``_``, "
"``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

# df5659ce4ec847c9ba8235a056fb3487
# 5cb184a680a345acaca05a6f48febbc0
#: ../../topics/auth.txt:72 ../../topics/auth.txt:76
msgid "Optional. 30 characters or fewer."
msgstr ""

# cf18c4df6de245a69e2a704077205bbd
#: ../../topics/auth.txt:80
msgid "Optional. Email address."
msgstr ""

# 2569fdb79c49472ebb816830bd92f465
#: ../../topics/auth.txt:84
msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the \"Passwords\" section below."
msgstr ""

# 56c5f8f56b314ef38a4eb8cd7108e205
#: ../../topics/auth.txt:90
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

# 81c664eb9fdf4bc495d2cde5bd95a172
#: ../../topics/auth.txt:94
msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the "
"foreign keys won't break."
msgstr ""

# 2daf7db2ef4543b2bf7499c9fd62b166
#: ../../topics/auth.txt:99
msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag, "
"and the default backends do not. If you want to reject a login based on "
"``is_active`` being ``False``, it's up to you to check that in your own "
"login view or a custom authentication backend. However, the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :func:`~django.contrib."
"auth.views.login` view (which is the default) *does* perform this check, as "
"do the permission-checking methods such as :meth:`~models.User.has_perm` and "
"the authentication in the Django admin. All of those functions/methods will "
"return ``False`` for inactive users."
msgstr ""

# bd4c026471eb4171a481dc12c1df30b4
#: ../../topics/auth.txt:113
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

# 454db8186e1f43ad99d9244313893636
#: ../../topics/auth.txt:118
msgid ""
"A datetime of the user's last login. Is set to the current date/time by "
"default."
msgstr ""

# f415448e2fd3468397e29b343013a342
#: ../../topics/auth.txt:123
msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr ""

# 399f5303d887414f9457bdb9ba9369f7
# 13d3f28f656b48a99420dcb7e0129cb8
# eaf050ffeff4444e98bc27abfea426cc
# ca5a9d26133c4f44b37816da0fafda50
# 5085fe8ecf5a4a0688771ddf4bc9e2cd
#: ../../topics/auth.txt:127 ../../topics/auth.txt:1637
#: ../../topics/pagination.txt:171 ../../topics/pagination.txt:242
#: ../../topics/testing.txt:2200
msgid "Methods"
msgstr ""

# e7beb3782742467a8731b12bec374c0d
#: ../../topics/auth.txt:131
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`:"
msgstr ""

# 34563776cbe34d069bfc575474e1f062
#: ../../topics/auth.txt:148
msgid ""
"In addition to those automatic API methods, :class:`~django.contrib.auth."
"models.User` objects have the following custom methods:"
msgstr ""

# 5908676b470a4adf96f248a667a3ed4f
#: ../../topics/auth.txt:154
msgid ""
"Returns the username for the user. Since the User model can be swapped out, "
"you should use  this method instead of referencing the username attribute "
"directly."
msgstr ""

# 0c87365b3f394b05a55e8e45a583aeee
#: ../../topics/auth.txt:160
msgid ""
"Always returns ``False``. This is a way of differentiating :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"AnonymousUser` objects. Generally, you should prefer using :meth:`~django."
"contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

# 2cbb16ae1aee48f0966f4535db47eb70
# 15aa4609eec94fb4994500e909b7fce1
#: ../../topics/auth.txt:169 ../../topics/auth.txt:1955
msgid ""
"Always returns ``True``. This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the "
"user is active - it only indicates that the user has provided a valid "
"username and password."
msgstr ""

# 09c3fa73409e4b6eaddeca4eb7f67070
#: ../../topics/auth.txt:176
msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

# a30167f3c6924c9982b23b62b6080943
#: ../../topics/auth.txt:182
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""

# ef40714ec4224e52947ec142c2a85ec4
# 58932d8e0e0347c084dc4fe17f33b8eb
#: ../../topics/auth.txt:188 ../../topics/auth.txt:1968
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

# dc2d18af32014455aa2da8f367d956cc
#: ../../topics/auth.txt:194
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""

# 519b6110fbdd4413a4613f839cb59795
# 479ef4ee4f42466da0461c8606e06f81
#: ../../topics/auth.txt:200 ../../topics/auth.txt:1980
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""

# 3ad252a9373d4dcd8bd523ca319dedef
#: ../../topics/auth.txt:205
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""

# 368047d5b660419ba5ebe289587e368b
#: ../../topics/auth.txt:211
msgid ""
"Returns a set of permission strings that the user has, through his/her "
"groups."
msgstr ""

# f2962c1bf1d2495fac803eef9da6c067
#: ../../topics/auth.txt:214
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

# a69f11a444254bafa7f45c32104d4293
#: ../../topics/auth.txt:219
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

# 0c8fd1e0850c4fe5a350065b4d169d98
#: ../../topics/auth.txt:222
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

# 8dc9ecbb083a4c9f993f07d782930eed
#: ../../topics/auth.txt:227
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see `permissions`_ "
"section below). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# b13c1c4ae8d84060b09016720ff53eff
#: ../../topics/auth.txt:232
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

# eb55ab752f05480cad6ef2e26d437d97
#: ../../topics/auth.txt:237
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""

# 3cf9948b1d184c54b3f107417b4d5cd8
#: ../../topics/auth.txt:242
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

# 2e84849e433e485c9015da341d2ac913
#: ../../topics/auth.txt:247
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# 5794f264e5df4ec2bc5bb9246741a725
#: ../../topics/auth.txt:253
msgid ""
"Sends an email to the user. If :attr:`~django.contrib.auth.models.User."
"from_email` is ``None``, Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

# fd82ae5c0a8548b7aa8a450dec2c4648
#: ../../topics/auth.txt:265
msgid ""
"Returns a site-specific profile for this user. Raises :exc:`django.contrib."
"auth.models.SiteProfileNotAvailable` if the current site doesn't allow "
"profiles, or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user "
"does not have a profile. For information on how to define a site-specific "
"user profile, see the section on `storing additional user information`_ "
"below."
msgstr ""

# 9ad5c8737c1e4eb1a72a43b13cd0435d
#: ../../topics/auth.txt:275
msgid "Manager functions"
msgstr ""

# 728871733c3d4a2babcb18ca49444b95
#: ../../topics/auth.txt:279
msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper functions:"
msgstr ""

# c46a1752081a4af7ac5ba654807a52f0
#: ../../topics/auth.txt:289
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

# b93d0abcb7054bd7bcf6bbefe7c4d39d
#: ../../topics/auth.txt:291
msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~models.User.is_active` set to ``True``."
msgstr ""

# ade3a0bea63a44078da9abaf044b8698
#: ../../topics/auth.txt:298
msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""

# 188582cdcf5746dcb17840cd50b692ba
#: ../../topics/auth.txt:302
msgid "See `Creating users`_ for example usage."
msgstr ""

# b5e13b35c41845eca534fd41d29aa1b3
# 2b022d678ac14411a12d586c0618d2d9
#: ../../topics/auth.txt:306 ../../topics/auth.txt:2040
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. (Note that the default value of ``allowed_chars`` doesn't "
"contain letters that can cause user confusion, including:"
msgstr ""

# 79768478147d439d9716a0447783898e
# a9aac5a1fbea49c99a0ed661187ff0f0
#: ../../topics/auth.txt:310 ../../topics/auth.txt:2044
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""

# a1a7ce395e9f4050830a6cff0f70aaaf
# 81a87fb71f0f40c685a75ca5df99c2be
#: ../../topics/auth.txt:312 ../../topics/auth.txt:2046
msgid ""
"``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""

# d55d093610d74b3d982e7ff71a1ccff6
# c9aede786f164bfd934147169215c3cc
#: ../../topics/auth.txt:316 ../../topics/cache.txt:685
msgid "Basic usage"
msgstr ""

# dfb1286fe9d34cac89953446f4ae2635
#: ../../topics/auth.txt:321
msgid "Creating users"
msgstr ""

# 486c6505630a47b0a0bd214c29908989
#: ../../topics/auth.txt:323
msgid ""
"The most basic way to create users is to use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper function that comes with Django::"
msgstr ""

# 9394f218ca7f4cd9bd5f29eb873ca3a6
#: ../../topics/auth.txt:336
msgid ""
"You can also create users using the Django admin site. Assuming you've "
"enabled the admin site and hooked it to the URL ``/admin/``, the \"Add user"
"\" page is at ``/admin/auth/user/add/``. You should also see a link to "
"\"Users\" in the \"Auth\" section of the main admin index page. The \"Add "
"user\" admin page is different than standard admin pages in that it requires "
"you to choose a username and password before allowing you to edit the rest "
"of the user's fields."
msgstr ""

# cd47f092aab84433bc2f1f7bce5a6415
#: ../../topics/auth.txt:343
msgid ""
"Also note: if you want your own user account to be able to create users "
"using the Django admin site, you'll need to give yourself permission to add "
"users *and* change users (i.e., the \"Add user\" and \"Change user\" "
"permissions). If your account has permission to add users but not to change "
"them, you won't be able to add users. Why? Because if you have permission to "
"add users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""

# 46e6796a60004d09acec5fa20567f963
#: ../../topics/auth.txt:352
msgid "Changing passwords"
msgstr ""

# ac8985cbf3444a23ab56ddab9cf227c1
#: ../../topics/auth.txt:354
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a User's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current user."
msgstr ""

# 22e3cf72f78449768ab2452322c9a9dc
#: ../../topics/auth.txt:361
msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""

# be389626d65849fcbca0ada156288127
#: ../../topics/auth.txt:371
msgid ""
"Don't set the :attr:`~django.contrib.auth.models.User.password` attribute "
"directly unless you know what you're doing. This is explained in the next "
"section."
msgstr ""

# a0818b5d22394cc28100a06474b3abf3
#: ../../topics/auth.txt:378
msgid "How Django stores passwords"
msgstr ""

# adc48c0a3b894a8ba1298f3740ddc5c8
#: ../../topics/auth.txt:385
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

# 01361a72c2794168ac0c4115bf488a97
#: ../../topics/auth.txt:390
msgid ""
"That's a storage algorithm, and hash, separated by the dollar-sign "
"character. The algorithm is one of a number of one way hashing or password "
"storage algorithms Django can use; see below. The hash is the result of the "
"one- way function."
msgstr ""

# 85ac94c5a79441ab95d2a4e5e77bb492
#: ../../topics/auth.txt:395
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""

# 32bb61f2e5734fa487d9a87d97980ff5
#: ../../topics/auth.txt:400
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""

# aa9270e69fa240d685f8669eb32475d6
#: ../../topics/auth.txt:405
msgid ""
"Django chooses the an algorithm by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords. This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm "
"first in the list."
msgstr ""

# d1e8538d859d4a219276c3cb30cf1713
#: ../../topics/auth.txt:413
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

# 76d81dc6f23644b8a6bcc94e949b0c85
#: ../../topics/auth.txt:424
msgid ""
"This means that Django will use PBKDF2_ to store all passwords, but will "
"support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The "
"next few sections describe a couple of common ways advanced users may want "
"to modify this setting."
msgstr ""

# 805c0ebd81bd4c0aa0871021fd652f85
#: ../../topics/auth.txt:432
msgid "Using bcrypt with Django"
msgstr ""

# 756acd6247374187ad9b4830ee59d4e5
#: ../../topics/auth.txt:434
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""

# 2c39f6bb05a541d5ada05add4f6a4d83
#: ../../topics/auth.txt:439
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

# 7615cbe153ee436893fc8e0eb4af4909
#: ../../topics/auth.txt:441
msgid ""
"Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-"
"bcrypt``, or downloading the library and installing it with ``python setup."
"py install``)."
msgstr ""

# 5092bd67aa3244c789505f2e2544165e
#: ../../topics/auth.txt:445
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""

# 9e937db302e84da6985bff30a12d6b32
#: ../../topics/auth.txt:457
msgid ""
"(You need to keep the other entries in this list, or else Django won't be "
"able to upgrade passwords; see below)."
msgstr ""

# 0ea015d2874049d898f14f89544f4d3b
#: ../../topics/auth.txt:460
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""

# e29bb66289cf4f51aff3c6c4779f60f3
#: ../../topics/auth.txt:465
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form `bcrypt$(raw bcrypt output)`. For example: `bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy`."
msgstr ""

# 16f185524d3f46948db76f2cdd797108
#: ../../topics/auth.txt:473
msgid "Increasing the work factor"
msgstr ""

# 3584ecc4c02d4d29a862f40c1d12141d
#: ../../topics/auth.txt:475
msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PBKDF2 algorithm:"
msgstr ""

# bd47a5686a0742b99f85a81bac8e3b02
#: ../../topics/auth.txt:485
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

# ddf92621a28c4616831f7d5b67322f5e
#: ../../topics/auth.txt:495
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

# 80ba0390dd624e079637ef80253c912c
#: ../../topics/auth.txt:498
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

# 41b6d78f898247ac9cb6dbdd24b3e3ee
#: ../../topics/auth.txt:511
msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""

# 2281d6051b8542749cd52eef65ccf228
#: ../../topics/auth.txt:515
msgid "Password upgrading"
msgstr ""

# 29ebca37016d4e0a91d16fbbd4c37944
#: ../../topics/auth.txt:517
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

# f627d5dda932424c843ab9613b62c4f2
#: ../../topics/auth.txt:523
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using un- "
"mentioned algorithms won't be able to upgrade."
msgstr ""

# 54ee532be78046f4af1df3a4681fb1c8
#: ../../topics/auth.txt:535
msgid "Anonymous users"
msgstr ""

# 84c601b498b04f519435d379844b2f2d
#: ../../topics/auth.txt:539
msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""

# 1011cf2fd1c740b0b8dcc560bb444eaf
#: ../../topics/auth.txt:543
msgid ":attr:`~django.contrib.auth.models.User.id` is always ``None``."
msgstr ""

# d71d9b7e28d447ff8598a0187cef8213
#: ../../topics/auth.txt:544
msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""

# efac9f2b66e2459f84aaad7a0659d5a6
#: ../../topics/auth.txt:547
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

# 3f5ce13f57e34093ada889280bd78dcc
#: ../../topics/auth.txt:548
msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""

# d19d4db5bb09438d908611b683ecf20a
#: ../../topics/auth.txt:551
msgid ""
":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` "
"instead of ``False``."
msgstr ""

# 3880df75db414d64a86c48d8c88ee93b
#: ../../topics/auth.txt:553
msgid ""
":meth:`~django.contrib.auth.models.User.is_authenticated()` returns "
"``False`` instead of ``True``."
msgstr ""

# 381a5d0548a1437b9b0aa01b55a85496
#: ../../topics/auth.txt:555
msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.contrib.auth."
"models.User.save()`, :meth:`~django.contrib.auth.models.User.delete()`, :"
"meth:`~django.contrib.auth.models.User.set_groups()` and :meth:`~django."
"contrib.auth.models.User.set_permissions()` raise :exc:`NotImplementedError`."
msgstr ""

# 5d6f91b1623b46058b7432b31d452a1f
#: ../../topics/auth.txt:563
msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by Web requests, "
"as explained in the next section."
msgstr ""

# 420d4a80bf0a4324bf192df7231e8582
#: ../../topics/auth.txt:570
msgid "Creating superusers"
msgstr ""

# 2808552628f84083839ce7ef4f101832
#: ../../topics/auth.txt:572
msgid ""
":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the "
"first time you run it after adding ``'django.contrib.auth'`` to your :"
"setting:`INSTALLED_APPS`. If you need to create a superuser at a later date, "
"you can use a command line utility::"
msgstr ""

# b19300edcb264e4b805d68068b4f7ad4
#: ../../topics/auth.txt:579
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :djadminopt:`--username` or the :"
"djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

# c0fd0cdc4f29423c81474c3e29f08a2d
#: ../../topics/auth.txt:583
msgid ""
"If you're using an older release of Django, the old way of creating a "
"superuser on the command line still works::"
msgstr ""

# a013fe23672a45c8919d9409dd266415
#: ../../topics/auth.txt:588
msgid ""
"...where :file:`/path/to` is the path to the Django codebase on your "
"filesystem. The ``manage.py`` command is preferred because it figures out "
"the correct path and environment for you."
msgstr ""

# c0b296400f4a403c966ce65e4abfe0f6
#: ../../topics/auth.txt:595
msgid "Storing additional information about users"
msgstr ""

# dea8cb1bf997442facfe5b020fc7b531
#: ../../topics/auth.txt:603
msgid ""
"If you'd like to store additional information related to your users, Django "
"provides a method to specify a site-specific related model -- termed a "
"\"user profile\" -- for this purpose."
msgstr ""

# 6dca90a61a2740e9aad0df5bb066ea56
#: ../../topics/auth.txt:607
msgid ""
"To make use of this feature, define a model with fields for the additional "
"information you'd like to store, or additional methods you'd like to have "
"available, and also add a :class:`~django.db.models.Field.OneToOneField` "
"named ``user`` from your model to the :class:`~django.contrib.auth.models."
"User` model. This will ensure only one instance of your model can be created "
"for each :class:`~django.contrib.auth.models.User`. For example::"
msgstr ""
"To make use of this feature, define a model with fields for the additional "
"information you'd like to store, or additional methods you'd like to have "
"available, and also add a :class:`~django.db.models.Field.OneToOneField` "
"named ``user`` from your model to the :class:`~django.contrib.auth.models."
"User` model. This will ensure only one instance of your model can be created "
"for each :class:`~django.contrib.auth.models.User`. 예를 들어 ::"

# 7a808eb583f64ae69708852122784e23
#: ../../topics/auth.txt:626
msgid ""
"To indicate that this model is the user profile model for a given site, fill "
"in the setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of "
"the following items, separated by a dot:"
msgstr ""

# ae356b45683b4060b1d8777fa5cd1ad2
#: ../../topics/auth.txt:630
msgid ""
"The name of the application (case sensitive) in which the user profile model "
"is defined (in other words, the name which was passed to :djadmin:`manage.py "
"startapp <startapp>` to create the application)."
msgstr ""

# c1b5d74365dc454099745efb8c90c354
#: ../../topics/auth.txt:635
msgid "The name of the model (not case sensitive) class."
msgstr ""

# d897a63dbd36449cb442d49459e3cd57
#: ../../topics/auth.txt:637
msgid ""
"For example, if the profile model was a class named ``UserProfile`` and was "
"defined inside an application named ``accounts``, the appropriate setting "
"would be::"
msgstr ""

# 6a482614faad4031beb71fed507af45f
#: ../../topics/auth.txt:643
msgid ""
"When a user profile model has been defined and specified in this manner, "
"each :class:`~django.contrib.auth.models.User` object will have a method -- :"
"class:`~django.contrib.auth.models.User.get_profile()` -- which returns the "
"instance of the user profile model associated with that :class:`~django."
"contrib.auth.models.User`."
msgstr ""

# 4b22c43beaad49f8bd98f14da25a7560
#: ../../topics/auth.txt:649
msgid ""
"The method :class:`~django.contrib.auth.models.User.get_profile()` does not "
"create a profile if one does not exist. You need to register a handler for "
"the User model's :attr:`django.db.models.signals.post_save` signal and, in "
"the handler, if ``created`` is ``True``, create the associated user profile::"
msgstr ""

# 4e08654511a04aba8b2694b6168395b1
#: ../../topics/auth.txt:672
msgid "Adding UserProfile fields to the admin"
msgstr ""

# 1fa9efb2728c4c1cad0eb2b3947738e6
#: ../../topics/auth.txt:674
msgid ""
"To add the UserProfile fields to the user page in the admin, define an :"
"class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use "
"a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the :class:"
"`~django.contrib.auth.models.User` class::"
msgstr ""

# 6a0991dffb424e33bea5fc6638f50400
#: ../../topics/auth.txt:702
msgid "Authentication in Web requests"
msgstr ""

# 2315617df3f64fb4afd39536c8b14022
#: ../../topics/auth.txt:704
msgid ""
"Until now, this document has dealt with the low-level APIs for manipulating "
"authentication-related objects. On a higher level, Django can hook this "
"authentication framework into its system of :class:`request objects <django."
"http.HttpRequest>`."
msgstr ""

# a25d3d14d63e4275832c97bfb91e83a5
#: ../../topics/auth.txt:709
msgid ""
"First, install the :class:`~django.contrib.sessions.middleware."
"SessionMiddleware` and :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` middlewares by adding them to your :setting:"
"`MIDDLEWARE_CLASSES` setting. See the :doc:`session documentation </topics/"
"http/sessions>` for more information."
msgstr ""

# 10f3ddbb0228490294438bfe1b86eb5b
#: ../../topics/auth.txt:715
msgid ""
"Once you have those middlewares installed, you'll be able to access :attr:"
"`request.user <django.http.HttpRequest.user>` in views. :attr:`request.user "
"<django.http.HttpRequest.user>` will give you a :class:`~django.contrib.auth."
"models.User` object representing the currently logged-in user. If a user "
"isn't currently logged in, :attr:`request.user <django.http.HttpRequest."
"user>` will be set to an instance of :class:`~django.contrib.auth.models."
"AnonymousUser` (see the previous section). You can tell them apart with :"
"meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

# 9b73331a0fac4ecfacbb00480d2d72e1
#: ../../topics/auth.txt:733
msgid "How to log a user in"
msgstr ""

# 4c23602921524f35bbdd79eb167b7e7c
#: ../../topics/auth.txt:735
msgid ""
"Django provides two functions in :mod:`django.contrib.auth`: :func:`~django."
"contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`."
msgstr ""

# 1b3f9f62423740d4810ed6253d85e975
#: ../../topics/auth.txt:741
msgid ""
"To authenticate a given username and password, use :func:`~django.contrib."
"auth.authenticate()`. It takes two keyword arguments, ``username`` and "
"``password``, and it returns a :class:`~django.contrib.auth.models.User` "
"object if the password is valid for the given username. If the password is "
"invalid, :func:`~django.contrib.auth.authenticate()` returns ``None``. "
"Example::"
msgstr ""

# fb2d69eb52314ad3b4b73acc133f900b
#: ../../topics/auth.txt:760
msgid ""
"To log a user in, in a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework, so, as "
"mentioned above, you'll need to make sure to have the session middleware "
"installed."
msgstr ""

# a3b07de26fb949f2b505c9083f104a60
#: ../../topics/auth.txt:767
msgid ""
"Note that data set during the anonymous session is retained when the user "
"logs in."
msgstr ""

# 09a855d40d064e988a7faa89e1dd51a9
#: ../../topics/auth.txt:770
msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

# 65f13a6e12e84d2a878c26d6e5d8d261
#: ../../topics/auth.txt:791
msgid ""
"When you're manually logging a user in, you *must* call :func:`~django."
"contrib.auth.authenticate()` before you call :func:`~django.contrib.auth."
"login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on "
"the :class:`~django.contrib.auth.models.User` noting which authentication "
"backend successfully authenticated that user (see the `backends "
"documentation`_ for details), and this information is needed later during "
"the login process."
msgstr ""

# fb75cf87d0da4da390f4f95a7906b1c5
#: ../../topics/auth.txt:803
msgid "Manually managing a user's password"
msgstr ""

# 91d3c6f0fa224899b22e9085d4c7f643
#: ../../topics/auth.txt:816
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`django.contrib.auth.hashers.check_password`. It takes two "
"arguments: the plain-text password to check, and the full value of a user's "
"``password`` field in the database to check against, and returns ``True`` if "
"they match, ``False`` otherwise."
msgstr ""

# 708ca24cba81486c903f319960c08b56
#: ../../topics/auth.txt:827
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). Currently supported "
"algorithms are: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt'`` (see :"
"ref:`bcrypt_usage`), ``'sha1'``, ``'md5'``, ``'unsalted_md5'`` (only for "
"backward compatibility) and ``'crypt'`` if you have the ``crypt`` library "
"installed. If the password argument is ``None``, an unusable password is "
"returned (a one that will be never accepted by :func:`django.contrib.auth."
"hashers.check_password`)."
msgstr ""

# 7b232b59e53541e7b75494629ccffc7b
#: ../../topics/auth.txt:842
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`django.contrib.auth.hashers.check_password`."
msgstr ""

# 9c5c1cc40f5b4c53b167e76872949f86
#: ../../topics/auth.txt:847
msgid "How to log a user out"
msgstr ""

# e1413d02f3184041bcc08d3ed0e0f13f
#: ../../topics/auth.txt:853
msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth.login"
"()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :"
"class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

# 88d4a4f37db14440b9e6b7d6d4cc1917
#: ../../topics/auth.txt:865
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""

# b1cdc80631a84fb29b3bea4eea477890
#: ../../topics/auth.txt:868
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth.logout"
"()`."
msgstr ""

# ea319aa61159402ea7ffe268839dd312
#: ../../topics/auth.txt:879
msgid "Login and logout signals"
msgstr ""

# 3484c0922b334a16ad4b26cd5b3cff14
#: ../../topics/auth.txt:881
msgid ""
"The auth framework uses two :doc:`signals </topics/signals>` that can be "
"used for notification when a user logs in or out."
msgstr ""

# 95d4234e87c147d094900aa549446b2a
#: ../../topics/auth.txt:887
msgid "Sent when a user logs in successfully."
msgstr ""

# 39c5b0cd183b48ca809eff0a08fa0b74
#: ../../topics/auth.txt:889
msgid "Arguments sent with this signal:"
msgstr ""

# 77297acef97c4bc49cb4d4ea5c80688d
#: ../../topics/auth.txt:892
msgid "The class of the user that just logged in."
msgstr ""

# bf8c5ce521d04e5f813bbb41713a5790
# afbac9d33f124741a5ffa468e4d17334
#: ../../topics/auth.txt:895 ../../topics/auth.txt:910
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

# 67f23b29995546fe8b032e509eccd6e0
#: ../../topics/auth.txt:898
msgid "The user instance that just logged in."
msgstr ""

# 4bbdaaa91da74b428e61ecb9f6f577d3
#: ../../topics/auth.txt:903
msgid "Sent when the logout method is called."
msgstr ""

# 5f47020b44384d46828054c847d39bf8
#: ../../topics/auth.txt:906
msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr ""

# 50fb803b193e44aba5273dea5a6573f5
#: ../../topics/auth.txt:913
msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""

# 220d4444428e420ea03781ceaca4a036
#: ../../topics/auth.txt:920
msgid "Sent when the user failed to login successfully"
msgstr ""

# 9687b00e6ead44a98d75c70e0ad467f4
#: ../../topics/auth.txt:923
msgid "The name of the module used for authentication."
msgstr ""

# e352b76cff924f9b8d0d27f8bf6deae0
#: ../../topics/auth.txt:926
msgid ""
"A dictonary of keyword arguments containing the user credentials that were "
"passed to :func:`~django.contrib.auth.authenticate()` or your own custom "
"authentication backend. Credentials matching a set of 'sensitive' patterns, "
"(including password) will not be sent in the clear as part of the signal."
msgstr ""

# 3983f4aa84f241bc8a6c72196d0a5d6c
#: ../../topics/auth.txt:932
msgid "Limiting access to logged-in users"
msgstr ""

# c0331bd3c39249dd913cc7724a22519e
#: ../../topics/auth.txt:935
msgid "The raw way"
msgstr ""

# 183d92a303a44652a8293aeede752397
#: ../../topics/auth.txt:937
msgid ""
"The simple, raw way to limit access to pages is to check :meth:`request.user."
"is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and "
"either redirect to a login page::"
msgstr ""

# ecfdf2eab873449eae4c173f12acc5dd
#: ../../topics/auth.txt:949
msgid "...or display an error message::"
msgstr ""

# 0c30dc70a0e64923913c9feb8a8ae94d
#: ../../topics/auth.txt:957
msgid "The login_required decorator"
msgstr ""

# 645de57a4f0a4e9fb9768c6b5f5ec76d
#: ../../topics/auth.txt:961
msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""

# 8f9acf974c274947b5053464999a2a1b
#: ../../topics/auth.txt:970
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

# 3894478263474a8bb03289c67d7b3a54
#: ../../topics/auth.txt:972
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

# 76cd028ea40e4e5fbd5319874a9f9ca2
#: ../../topics/auth.txt:976
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""

# d5e28e37e72748d685510c326e157f02
#: ../../topics/auth.txt:979
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""

# 44d72c4f088a49c98681971d4e2f5c84
#: ../../topics/auth.txt:991
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

# 1234af64132d4b22bf1d5dad7e708a59
#: ../../topics/auth.txt:996
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""

# c1dc28371262492381e1f7c66d0526a7
#: ../../topics/auth.txt:1005
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"map the appropriate Django view to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`. For example, using the defaults, add the following line to "
"your URLconf::"
msgstr ""

# 7995291dc8a542c096ce4d911f9e93b2
#: ../../topics/auth.txt:1013
msgid ""
"As of version 1.5 :setting:`settings.LOGIN_URL <LOGIN_URL>` now also accepts "
"view function names and :ref:`named URL patterns <naming-url-patterns>`. "
"This allows you to freely remap your login view within your URLconf without "
"having to update the setting."
msgstr ""

# 7fa99439cefe482f98570bfc6f03b9ef
#: ../../topics/auth.txt:1020
msgid "**URL name:** ``login``"
msgstr ""

# 236d98c3adfb45f89e90e0955a02e129
# d1b469a5fed54c65a2cde3c7bd669439
#: ../../topics/auth.txt:1022 ../../topics/auth.txt:1139
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# 8739db6453634099a6b1eb193ed0cc4e
#: ../../topics/auth.txt:1025
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

# ef7a87f326e7454e945c97f21e3459e7
#: ../../topics/auth.txt:1027
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

# 7ca4179a0bc740cdafa6530bd06dc7b3
#: ../../topics/auth.txt:1030
msgid ""
"If called via ``POST``, it tries to log the user in. If login is successful, "
"the view redirects to the URL specified in ``next``. If ``next`` isn't "
"provided, it redirects to :setting:`settings.LOGIN_REDIRECT_URL "
"<LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/profile/``). If login "
"isn't successful, it redisplays the login form."
msgstr ""

# 4cbc90a61ca24b40a522f68f4bedcd4f
#: ../../topics/auth.txt:1037
msgid ""
"It's your responsibility to provide the login form in a template called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

# 5c2f90607ec54936905a8195f3c9768f
#: ../../topics/auth.txt:1041
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the login form. "
"See the :doc:`forms documentation </topics/forms/index>` for more on "
"``Form`` objects."
msgstr ""

# 729009634d744c58b5282dbf487b49f8
#: ../../topics/auth.txt:1045
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

# 055a0f8756e64aed9a810d52f617cda0
# a943911f6b9d49a4a27071f836c7cb3e
#: ../../topics/auth.txt:1048 ../../topics/auth.txt:1158
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"models.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""

# 11ffcfea00704bca824286901765e801
# f1d05ef744ec40e0a7a23c19642f6968
# 4ad391d9b01e492eb38178cd0c551ef7
#: ../../topics/auth.txt:1055 ../../topics/auth.txt:1165
#: ../../topics/auth.txt:1274
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request.META"
"['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:"
"`/ref/contrib/sites`."
msgstr ""

# 157fd34ca6f2425e92375e23287fc269
#: ../../topics/auth.txt:1060
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"view in your URLconf. For example, this URLconf line would use :file:`myapp/"
"login.html` instead::"
msgstr ""

# 94533b33f7af491c9104c5593e2dba7b
#: ../../topics/auth.txt:1067
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login by passing ``redirect_field_name`` to the view. By "
"default, the field is called ``next``."
msgstr ""

# 0e6962c2b56046b49193aa94e13a36fa
#: ../../topics/auth.txt:1071
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

# ce73c8c52d77487b9de547ae42ddc83f
#: ../../topics/auth.txt:1104
msgid ""
"If you are using alternate authentication (see :ref:`authentication-"
"backends`) you can pass a custom authentication form to the login view via "
"the ``authentication_form`` parameter. This form must accept a ``request`` "
"keyword argument in its ``__init__`` method, and provide a ``get_user`` "
"method which returns the authenticated user object (this method is only ever "
"called after successful form validation)."
msgstr ""

# 4f2ecbab115840919fb96eeba6de3156
#: ../../topics/auth.txt:1116
msgid ""
"The :func:`~views.login` view and the :ref:`other-built-in-views` now all "
"return a :class:`~django.template.response.TemplateResponse` instance, which "
"allows you to easily customize the response data before rendering. For more "
"details, see the :doc:`TemplateResponse documentation </ref/template-"
"response>`."
msgstr ""

# dcb4179ee927472faf5b76dd8cb87359
#: ../../topics/auth.txt:1125
msgid "Other built-in views"
msgstr ""

# f21c6844b98843e9aa257a5301714b81
#: ../../topics/auth.txt:1129
msgid ""
"In addition to the :func:`~views.login` view, the authentication system "
"includes a few other useful built-in views located in :mod:`django.contrib."
"auth.views`:"
msgstr ""

# eed27008fcaf48ee9d9fa05e7d41fd8a
#: ../../topics/auth.txt:1135
msgid "Logs a user out."
msgstr ""

# 6a8b06df21cf4d6ea81bbd438c4e2643
#: ../../topics/auth.txt:1137
msgid "**URL name:** ``logout``"
msgstr ""

# f7bc8537b3ff4c24ab28eeb0aae302c2
# a520539d70954d8bb23790d1722faf71
# 71a4a894ac8c47f398f3a343bb875cf2
# 077e6013a5f84deab932810cdcd00286
# 04790577d26544438a74340f345c5d6d
# fc5c9f134c754a8689e5c655f00b95b8
# 97ed585fefed4b9bade5e50a8a806dad
# fc524ca5d2bd408980c525d5a5cda8e1
# 6ff3c9a07deb4e2795560b48ba371887
#: ../../topics/auth.txt:1142 ../../topics/auth.txt:1176
#: ../../topics/auth.txt:1187 ../../topics/auth.txt:1211
#: ../../topics/auth.txt:1231 ../../topics/auth.txt:1308
#: ../../topics/auth.txt:1320 ../../topics/auth.txt:1355
#: ../../topics/auth.txt:1374
msgid "**Optional arguments:**"
msgstr ""

# 66294c98454042c99b202608bc036510
#: ../../topics/auth.txt:1144
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

# 8dacd9024ffd48efbc0768cd7b0affa5
#: ../../topics/auth.txt:1146
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html` if no argument is "
"supplied."
msgstr ""

# 42f9cce5610b416ba660a03b8edef1ca
#: ../../topics/auth.txt:1150
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next_page`` if the given ``GET`` "
"parameter is passed."
msgstr ""

# ae0c2d2c2ef64b498eb4ead962afb452
# bbd7848962ca45699a0ff71e436ae352
# b95c7c0d3a0340689e165e8190bb273b
# 24119d98005743278cd8fe93d01bc293
#: ../../topics/auth.txt:1154 ../../topics/auth.txt:1201
#: ../../topics/auth.txt:1261 ../../topics/auth.txt:1340
msgid "**Template context:**"
msgstr ""

# ab87863b56f84ca995d4655dda54bd3e
#: ../../topics/auth.txt:1156
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

# 504f412dfaee4ea0bde1b4be5358e9e3
#: ../../topics/auth.txt:1172
msgid "Logs a user out, then redirects to the login page."
msgstr ""

# 615fd328d6594e31bdc1338603a39f58
#: ../../topics/auth.txt:1174
msgid "**URL name:** No default URL provided"
msgstr ""

# bce8cd82c9c04620a8b3bb688a98dccd
# 00648173a39b47e895e7628fbcd033f2
#: ../../topics/auth.txt:1178 ../../topics/auth.txt:1376
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

# fc5e1fd842e141d7a77a509a227b2fbc
#: ../../topics/auth.txt:1183
msgid "Allows a user to change their password."
msgstr ""

# 663e9238be964bedba0284c265edaf35
#: ../../topics/auth.txt:1185
msgid "**URL name:** ``password_change``"
msgstr ""

# d55fe5ee3f7d4d77b0b4e3318ec54335
#: ../../topics/auth.txt:1189
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""

# e4ac54466c374e9bafae3c4d6de435dc
#: ../../topics/auth.txt:1193
msgid ""
"``post_change_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 7e2f0b94dd05417bb67535700e539dc1
#: ../../topics/auth.txt:1196
msgid ""
"``password_change_form``: A custom \"change password\" form which must "
"accept a ``user`` keyword argument. The form is responsible for actually "
"changing the user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""

# 7496ada181c4425eb689cd1672a73457
#: ../../topics/auth.txt:1203
msgid ""
"``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

# d5994e0618d54016bb09bc3c1bb29c2e
#: ../../topics/auth.txt:1207
msgid "The page shown after a user has changed their password."
msgstr ""

# 5afe573b9d5242d487e723860222bcec
#: ../../topics/auth.txt:1209
msgid "**URL name:** ``password_change_done``"
msgstr ""

# 626de54ad20f4907ae93c957c0735af2
#: ../../topics/auth.txt:1213
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""

# a3b3de9357f9482988db90a757568a9b
#: ../../topics/auth.txt:1219
msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

# e84777b430704ba0837e001ec456bdc0
#: ../../topics/auth.txt:1229
msgid "**URL name:** ``password_reset``"
msgstr ""

# 3f75210a398a4be79327a2c0ab7878f5
#: ../../topics/auth.txt:1233
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""

# eef17f4739214857b04ac0d1cbba4a79
#: ../../topics/auth.txt:1237
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""

# 4c81b96d74f349f9b358bf4f5e2959e7
#: ../../topics/auth.txt:1241
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to :file:"
"`registration/password_reset_subject.txt` if not supplied."
msgstr ""

# 4ab70619c5604a73918389d8acacdd38
#: ../../topics/auth.txt:1247
msgid ""
"``password_reset_form``: Form that will be used to get the email of the user "
"to reset the password for. Defaults to :class:`~django.contrib.auth.forms."
"PasswordResetForm`."
msgstr ""

# 5e36a63e7c6345aa85586b0219ecdd6c
#: ../../topics/auth.txt:1251
msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of ``django."
"contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# ca770fd7e78944ebb57d596b03dc2fef
#: ../../topics/auth.txt:1255
msgid ""
"``post_reset_redirect``: The URL to redirect to after a successful password "
"reset request."
msgstr ""

# 6d9c093a0b5f4d7cae151f43798ca79b
#: ../../topics/auth.txt:1258
msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

# 021d2d23215f4ea399ed3d7226ddc499
#: ../../topics/auth.txt:1263
msgid ""
"``form``: The form (see ``password_reset_form`` above) for resetting the "
"user's password."
msgstr ""

# a9d61e664b92400cb39d97cf24b78514
#: ../../topics/auth.txt:1266
msgid "**Email template context:**"
msgstr ""

# 70c05a53e9d4446bab39153b178105c0
#: ../../topics/auth.txt:1268
msgid "``email``: An alias for ``user.email``"
msgstr ""

# 0610ae81867b4da18ef25d23436758a3
#: ../../topics/auth.txt:1270
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

# 6c14425a0cf34ed3a0f39a4200d36520
#: ../../topics/auth.txt:1279
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

# 12bcf94d22174915b614776baae99d4c
#: ../../topics/auth.txt:1283
msgid "``protocol``: http or https"
msgstr ""

# bbfe6ee28a8641e39f82a6e922fca9f8
#: ../../topics/auth.txt:1285
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

# 581c95c17981465197dcde54f3da4034
#: ../../topics/auth.txt:1287
msgid "``token``: Token to check that the reset link is valid."
msgstr ""

# 2e014a7e30f241f4b968684c46122f3b
#: ../../topics/auth.txt:1289
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

# a3030be3487a4947ab2d503f456de11d
#: ../../topics/auth.txt:1296
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

# 9dc957bf2ed84dff8650daae5bd559c6
#: ../../topics/auth.txt:1302
msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :func:`password_reset` view doesn't "
"have an explicit ``post_reset_redirect`` URL set."
msgstr ""

# 13febd1802c34456b7ae9442e99f8292
#: ../../topics/auth.txt:1306
msgid "**URL name:** ``password_reset_done``"
msgstr ""

# d7429a0e295e4bb4bb265c88472685a3
#: ../../topics/auth.txt:1310
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""

# 410b1317d064497f99745b0cef9daae1
#: ../../topics/auth.txt:1316
msgid "Presents a form for entering a new password."
msgstr ""

# 2e39caaf07624433bd686c36d61d2112
#: ../../topics/auth.txt:1318
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

# c7b154eb2485461d9f19b0502af28989
#: ../../topics/auth.txt:1322
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

# 5d265e66a48149e9bfc72379ef48b814
#: ../../topics/auth.txt:1324
msgid ""
"``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

# 84e476fc1c5148fe84ac1aabef2874a7
#: ../../topics/auth.txt:1327
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""

# fe70579460c7472a9211df36e983f190
#: ../../topics/auth.txt:1330
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# a1a8009c37204d9687dad3ac8b9e6e10
#: ../../topics/auth.txt:1334
msgid ""
"``set_password_form``: Form that will be used to set the password. Defaults "
"to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# 50f6477150b24e5ba0c91bf307131756
#: ../../topics/auth.txt:1337
msgid ""
"``post_reset_redirect``: URL to redirect after the password reset done. "
"Defaults to ``None``."
msgstr ""

# 6a4dc8f623764e04b3d817fc241474c2
#: ../../topics/auth.txt:1342
msgid ""
"``form``: The form (see ``set_password_form`` above) for setting the new "
"user's password."
msgstr ""

# d4d3490b05d3401ca48ab9ef17695ac2
#: ../../topics/auth.txt:1345
msgid ""
"``validlink``: Boolean, True if the link (combination of uidb36 and token) "
"is valid or unused yet."
msgstr ""

# 238df99906cc4ca1a5ad3a443e418f09
#: ../../topics/auth.txt:1350
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

# 1f81187b22274f0bb48daa5b3bd028bb
#: ../../topics/auth.txt:1353
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

# bd236551739f42c498a1deb69017c6f2
#: ../../topics/auth.txt:1357
msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""

# 834a0c1e30454f32911f35560429afba
#: ../../topics/auth.txt:1361
msgid "Helper functions"
msgstr ""

# f3c5f133bee742058cb029a9f503aae6
#: ../../topics/auth.txt:1367
msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""

# b0967e53e60f424fa8f828f002bc6245
#: ../../topics/auth.txt:1370
msgid "**Required arguments:**"
msgstr ""

# b9060ba4137040d1a667341a3953f27d
#: ../../topics/auth.txt:1372
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

# 6bb4bc49498249978fd9d331e2c58686
#: ../../topics/auth.txt:1379
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

# af3835a43f0544e09c5ad7e9bb4dd79b
#: ../../topics/auth.txt:1387
msgid "Built-in forms"
msgstr ""

# aebf94bf414748c899b0e38f36a2d3df
#: ../../topics/auth.txt:1391
msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

# 506045ec4d33488f9bcb0dbcfb971310
#: ../../topics/auth.txt:1397
msgid "A form used in the admin interface to change a user's password."
msgstr ""

# a04a1800811143f1af92b65473c6ab83
#: ../../topics/auth.txt:1401
msgid "A form for logging a user in."
msgstr ""

# 62203627cf154a0690cde03ed4419e46
#: ../../topics/auth.txt:1405
msgid "A form for allowing a user to change their password."
msgstr ""

# a122c2da64684f7fb04ab5db3553d7f0
#: ../../topics/auth.txt:1409
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

# c51958718e984c1b9a697201d7ce9b83
#: ../../topics/auth.txt:1414
msgid ""
"A form that lets a user change his/her password without entering the old "
"password."
msgstr ""

# 14de812063bc415d83eaf6bc3cdbd580
#: ../../topics/auth.txt:1419
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

# 6a4a672c42f74c378d77c81a2ca08ff7
#: ../../topics/auth.txt:1424
msgid "A form for creating a new user."
msgstr ""

# bd81edfabca147b5ab9ed771cbb080c0
#: ../../topics/auth.txt:1427
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

# dea5c3d0f0934bc4a60c25725080fb08
#: ../../topics/auth.txt:1431
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""

# be0ce3c0c3194c5e8471eb1bb3387aed
#: ../../topics/auth.txt:1434
msgid ""
"The simple way is to run your test on :attr:`request.user <django.http."
"HttpRequest.user>` in the view directly. For example, this view checks to "
"make sure the user is logged in and has the permission ``polls.can_vote``::"
msgstr ""

# 94103019b5604c4c82f51b05c06e897a
#: ../../topics/auth.txt:1446
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

# 739ca09f07e84238b7ac50c4e6bcd600
#: ../../topics/auth.txt:1454
msgid ""
"We're using this particular test as a relatively simple example. However, if "
"you just want to test whether a permission is available to a user, you can "
"use the :func:`~django.contrib.auth.decorators.permission_required()` "
"decorator, described later in this document."
msgstr ""

# 3e73428a12024b12b3e646e3bd26f62e
#: ../../topics/auth.txt:1459
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""

# 60d6f7a8b1de4f1a914fb0936f6cd1f5
#: ../../topics/auth.txt:1467
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional "
"``login_url`` argument, which lets you specify the URL for your login page (:"
"setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

# 67e05fa90f3c4552a298755ab01b9388
# fa82cee05efe461c81a00f7deb32815d
# cc4eadeb2cf149169c7de94aa513f405
# 4c6475ce4d9643489a6f1607c7b39dbb
# 376a360beb444e5781f73d3b31b95639
# fa210afb9f7c47f9bcaeb3f225a0d604
# e8e6aba9bc374a2cbc1b795691bfa745
# a6a9aee37c6e4a749dbc8b3e127af443
# 328e8585277c4ab59e064c390e76443c
# 16536b0dcb32411387dadd8fc25503b4
# 3919a94b02d445fb8948789a3d5b0b7b
# 6906bd64e0664d7999c235685778e556
# 8a2fddc4c2e44d3c8529f341c12202db
# 5f51bba2081c445ea944ed1aad1e0780
# 6603a04baf944aa5aa1af73e451ee752
# 430dc0fbf6924a78bfc484867c64e485
# 78b20bb3c8a34cf3ba99c80082192a20
# 6ac798814f5144a8a97a505b98524679
# c83cfb8c938b490588669bb70ca07478
# 15abaceb0cc749329a1717946f28b9f5
#: ../../topics/auth.txt:1471 ../../topics/db/managers.txt:147
#: ../../topics/db/queries.txt:1199 ../../topics/email.txt:266
#: ../../topics/email.txt:309 ../../topics/forms/modelforms.txt:23
#: ../../topics/http/urls.txt:401 ../../topics/http/urls.txt:806
#: ../../topics/i18n/formatting.txt:119 ../../topics/i18n/formatting.txt:137
#: ../../topics/i18n/timezones.txt:339 ../../topics/i18n/timezones.txt:352
#: ../../topics/i18n/timezones.txt:368 ../../topics/i18n/translation.txt:182
#: ../../topics/i18n/translation.txt:268
#: ../../topics/i18n/translation.txt:1320 ../../topics/settings.txt:250
#: ../../topics/templates.txt:152 ../../topics/testing.txt:1479
#: ../../topics/testing.txt:1515
msgid "For example::"
msgstr "예를 들어 ::"

# c9ceb986c67c4fc4bdd4fde9b58678a2
#: ../../topics/auth.txt:1480
msgid "The permission_required decorator"
msgstr ""

# 31c8b417ad6b43fb80f2f7e6d5f9ad8f
#: ../../topics/auth.txt:1484
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator. "
"Using this decorator, the earlier example can be written as::"
msgstr ""

# 7fb15c653cc2442485d481415f297876
#: ../../topics/auth.txt:1495
msgid ""
"As for the :meth:`User.has_perm` method, permission names take the form ``"
"\"<app label>.<permission codename>\"`` (i.e. ``polls.can_vote`` for a "
"permission on a model in the ``polls`` application)."
msgstr ""

# 70a7a1c9727c4a41ae96fff023dcfc07
#: ../../topics/auth.txt:1499
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter. Example::"
msgstr ""

# 8e108f5521b7403e816c9a6562114461
#: ../../topics/auth.txt:1508
msgid ""
"As in the :func:`~decorators.login_required` decorator, ``login_url`` "
"defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# b650846f47344f8686b9214f8bc0af9d
#: ../../topics/auth.txt:1513
msgid ""
"Added ``raise_exception`` parameter. If given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""

# 1395744d84624a949c8c4163181c170e
#: ../../topics/auth.txt:1521
msgid "Applying permissions to generic views"
msgstr ""

# 8631d73691844053a5434906a70a92e1
#: ../../topics/auth.txt:1523
msgid ""
"To apply a permission to a :doc:`class-based generic view </ref/class-based-"
"views/index>`, decorate the :meth:`View.dispatch <django.views.generic.base."
"View.dispatch>` method on the class. See :ref:`decorating-class-based-views` "
"for details."
msgstr ""

# 044cbc8d207f49a783ce92fefcfa1776
# 74982cb29d5549c39ea1ab2aaeef3256
#: ../../topics/auth.txt:1531 ../../topics/auth.txt:1699
msgid "Permissions"
msgstr ""

# d394d51843d645f5979514d52d468653
#: ../../topics/auth.txt:1533
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

# f1a8d17390c74defa035dae64d3f1fa2
#: ../../topics/auth.txt:1536
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""

# a9addf87aa0e4bc7be30e250b02ef566
#: ../../topics/auth.txt:1539
msgid "The Django admin site uses permissions as follows:"
msgstr ""

# 4b2377dabd1a49cab8b919bc789a5fa8
#: ../../topics/auth.txt:1541
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""

# 591df256492b44f4bf72cccd6948d0c2
#: ../../topics/auth.txt:1543
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""

# 8d52f298dd834e029fa81cc15d81cec7
#: ../../topics/auth.txt:1546
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""

# 30758af64e5d4017990f87d0e4da5dc6
#: ../../topics/auth.txt:1549
msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""

# 38cf37164c1045a49248b4b0b4de571a
#: ../../topics/auth.txt:1558
msgid "Default permissions"
msgstr ""

# 7f404396323441a99f1f090efbfed2a0
#: ../../topics/auth.txt:1560
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that three default permissions -- add, change and "
"delete -- are created for each Django model defined in one of your installed "
"applications."
msgstr ""

# 2a084c595cd34b0395f3f1722722ba8d
#: ../../topics/auth.txt:1565
msgid ""
"These permissions will be created when you run :djadmin:`manage.py syncdb "
"<syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

# 90f53029a99a48cd826864e712898f69
#: ../../topics/auth.txt:1573
msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""

# b6903d1acd084722b8e4ef0905f8764c
#: ../../topics/auth.txt:1577
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

# 97e1623e8257414d9e3361c0fdd98cee
#: ../../topics/auth.txt:1578
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

# 66acecf42d3244b8a1f391be8951e384
#: ../../topics/auth.txt:1579
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

# c786c996c3df4b2b9d8269155bd9f73a
#: ../../topics/auth.txt:1584
msgid "Custom permissions"
msgstr ""

# 939931ff8f9d49bb845fff90d2a00205
#: ../../topics/auth.txt:1586
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

# 680792339ebc4f0ebb3a49acffd22edd
#: ../../topics/auth.txt:1589
msgid ""
"This example Task model creates three custom permissions, i.e., actions "
"users can or cannot do with Task instances, specific to your application::"
msgstr ""

# ec8e489e80024d26acb310b37e994037
#: ../../topics/auth.txt:1601
msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the "
"value of these permissions when an user is trying to access the "
"functionality provided by the application (viewing tasks, changing the "
"status of tasks, closing tasks.) Continuing the above example, the following "
"checks if a user may view tasks::"
msgstr ""

# efe9bf53ac754e8192219d0952319650
#: ../../topics/auth.txt:1620
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""

# 9608b7f47f3240a99b73415390821864
#: ../../topics/auth.txt:1625
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

# 0de9acfc6fe24ceea50f8f86a0dbf7b3
#: ../../topics/auth.txt:1629
msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed Django model."
msgstr ""

# 28c19314ffd244a7b9370f965a92aed4
#: ../../topics/auth.txt:1634
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

# 6681cad2ff904cd58f070865dbadae60
#: ../../topics/auth.txt:1639
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""

# 3c575bc62e894e1298b46a29867fb33b
#: ../../topics/auth.txt:1645
msgid "Programmatically creating permissions"
msgstr ""

# 62e0321c15ff42659bcb83e82982775e
#: ../../topics/auth.txt:1647
msgid ""
"While custom permissions can be defined within a model's ``Meta`` class, you "
"can also create permissions directly. For example, you can create the "
"``can_publish`` permission for a ``BlogPost`` model in ``myapp``::"
msgstr ""

# e24100f5715a409e946d4c8b8e7374e0
#: ../../topics/auth.txt:1659
msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""

# 8d43d8558c724f3d92cef70050452fec
#: ../../topics/auth.txt:1665
msgid "Authentication data in templates"
msgstr ""

# 329467a86a754ec2a63e30f8f103f5aa
#: ../../topics/auth.txt:1667
msgid ""
"The currently logged-in user and his/her permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.context.RequestContext`."
msgstr ""

# d06a6e0c08894a5d87e2bfd5c38cf00d
#: ../../topics/auth.txt:1673
msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.context.RequestContext` *and* your :"
"setting:`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib."
"auth.context_processors.auth\"``, which is default. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

# 0b741a24e42b43e199555cc51a28e11b
#: ../../topics/auth.txt:1682
msgid ""
"When rendering a template :class:`~django.template.context.RequestContext`, "
"the currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

# 1fc6a1b369834f09a64dc4ebea6c25c7
#: ../../topics/auth.txt:1695
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

# c24020c6615a4077a2b4c4efd94cac74
#: ../../topics/auth.txt:1701
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of :class:`django.contrib.auth."
"context_processors.PermWrapper`, which is a template-friendly proxy of "
"permissions."
msgstr ""

# 9aa7c7ae64584a8baca6f699c05ecac5
#: ../../topics/auth.txt:1706
msgid ""
"In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:"
"`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. "
"This example would display ``True`` if the logged-in user had any "
"permissions in the ``foo`` app::"
msgstr ""

# 4597e4b4475c4e2caa9538d663e59b08
#: ../../topics/auth.txt:1713
msgid ""
"Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django."
"contrib.auth.models.User.has_perm>`. This example would display ``True`` if "
"the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

# 09c4480e97ac474a963c5b032621788e
#: ../../topics/auth.txt:1720
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

# b1fcf5a6200043d68e0a4022c15dd57e
#: ../../topics/auth.txt:1739
msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""

# ac90a629c49144518f145a7acb05ca33
#: ../../topics/auth.txt:1751
msgid "Groups"
msgstr ""

# 37229667294141fc83c3f8b51cbd9a5a
#: ../../topics/auth.txt:1753
msgid ""
"Groups are a generic way of categorizing users so you can apply permissions, "
"or some other label, to those users. A user can belong to any number of "
"groups."
msgstr ""

# 3879090bd5b4494eb9a8f3eab5c38e81
#: ../../topics/auth.txt:1756
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

# 29236201764642cc9e8f8e89cf4bc63a
#: ../../topics/auth.txt:1760
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""

# b245ce58a29f410d91de5ee4b27aedb7
#: ../../topics/auth.txt:1774
msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

# 882cd70ba67640fd81405c5a8ee0849e
#: ../../topics/auth.txt:1778
msgid ""
"Required. 80 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr ""

# 42014da8218a406eb774059d8d47acf7
#: ../../topics/auth.txt:1783
msgid ""
"Many-to-many field to :class:`~django.contrib.auth.models.Permissions`::"
msgstr ""

# 52e3b248a5dc47ac97311fca6e5a933e
#: ../../topics/auth.txt:1793
msgid "Customizing the User model"
msgstr ""

# 3284f058c7af48ac9112847d73c551b2
#: ../../topics/auth.txt:1797
msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""

# af3b05217ac14c0dbb6e575e24f4641d
#: ../../topics/auth.txt:1802
msgid ""
"Django allows you to override the default User model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""

# 567b011e1d3a4f70b4c17f9f0a9278ce
#: ../../topics/auth.txt:1807
msgid ""
"This dotted pair describes the name of the Django app, and the name of the "
"Django model that you wish to use as your User model."
msgstr ""

# b53f52c4403f49ac8bbc4b615d606b88
#: ../../topics/auth.txt:1812
msgid ""
"Changing :setting:`AUTH_USER_MODEL` has a big effect on your database "
"structure. It changes the tables that are available, and it will affect the "
"construction of foreign keys and many-to-many relationships. If you intend "
"to set :setting:`AUTH_USER_MODEL`, you should set it before running ``manage."
"py syncdb`` for the first time."
msgstr ""

# 820e9aeb84d14d1783a036c3e39a541d
#: ../../topics/auth.txt:1818
msgid ""
"If you have an existing project and you want to migrate to using a custom "
"User model, you may need to look into using a migration tool like South_ to "
"ease the transition."
msgstr ""

# e147ee00873c4103b436a11fa29fc12f
#: ../../topics/auth.txt:1825
msgid "Referencing the User model"
msgstr ""

# 5d38fc9b09144228b03d1a2b6260dc3d
#: ../../topics/auth.txt:1827
msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different User model."
msgstr ""

# a5e03d3312df4d53ac2c7a9c74b97985
#: ../../topics/auth.txt:1832
msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using :func:`django.contrib.auth."
"get_user_model()`. This method will return the currently active User model "
"-- the custom User model if one is specified, or :class:`~django.contrib."
"auth.User` otherwise."
msgstr ""

# 379521375a4548139896769f31b1f89e
#: ../../topics/auth.txt:1838
msgid ""
"When you define a foreign key or many-to-many relations to the User model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""
"When you define a foreign key or many-to-many relations to the User model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. 예를 들어 ::"

# bcc985eee3b54f70bdad847945b02a39
#: ../../topics/auth.txt:1849
msgid "Specifying a custom User model"
msgstr ""

# 2324bf9d911c40b1b42193d668968ac1
#: ../../topics/auth.txt:1853
msgid ""
"Think carefully before handling information not directly related to "
"authentication in your custom User Model."
msgstr ""

# 2e1eb6a0c60e4eab8183b2b2143c3516
#: ../../topics/auth.txt:1856
msgid ""
"It may be better to store app-specific user information in a model that has "
"a relation with the User model. That allows each app to specify its own user "
"data requirements without risking conflicts with other apps. On the other "
"hand, queries to retrieve this related information will involve a database "
"join, which may have an effect on performance."
msgstr ""

# f8a9e1c302b546348b38cd37dc96f0ea
#: ../../topics/auth.txt:1862
msgid ""
"Django expects your custom User model to meet some minimum requirements."
msgstr ""

# 5e492f562d23460f85e9ee8382d8d8ec
#: ../../topics/auth.txt:1864
msgid ""
"Your model must have a single unique field that can be used for "
"identification purposes. This can be a username, an email address, or any "
"other unique attribute."
msgstr ""

# 0577633de57448a4bd5c04d1bc6ed8ff
#: ../../topics/auth.txt:1868
msgid ""
"Your model must provide a way to address the user in a \"short\" and \"long"
"\" form. The most common interpretation of this would be to use the user's "
"given name as the \"short\" identifier, and the user's full name as the "
"\"long\" identifier. However, there are no constraints on what these two "
"methods return - if you want, they can return exactly the same value."
msgstr ""

# b8f4c2cc574e430a87b055e4de8aa13c
#: ../../topics/auth.txt:1875
msgid ""
"The easiest way to construct a compliant custom User model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django."
"contrib.auth.models.AbstractBaseUser` provides the core implementation of a "
"`User` model, including hashed passwords and tokenized password resets. You "
"must then provide some key implementation details:"
msgstr ""

# dc8c2957039c4670a56698df397a3447
#: ../../topics/auth.txt:1885
msgid ""
"A string describing the name of the field on the User model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. In the "
"following example, the field `identifier` is used as the identifying field::"
msgstr ""

# 16e9316513c249179ce44d0ad54447f7
#: ../../topics/auth.txt:1898
msgid ""
"A list of the field names that *must* be provided when creating a user. For "
"example, here is the partial definition for a User model that defines two "
"required fields - a date of birth and height::"
msgstr ""

# 71efc8cb8a5347fd88e95525c0377abf
#: ../../topics/auth.txt:1911
msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your User model, but "
"should *not* contain the ``USERNAME_FIELD``."
msgstr ""

# ff72ab04f1af41d094e9fa5188dfeb84
#: ../../topics/auth.txt:1916
msgid ""
"A boolean attribute that indicates whether the user is considered \"active"
"\".  This attribute is provided as an attribute on ``AbstractBaseUser`` "
"defaulting to ``True``. How you choose to implement it will depend on the "
"details of your chosen auth backends. See the documentation of the :attr:"
"`attribute on the builtin user model <django.contrib.auth.models.User."
"is_active>` for details."
msgstr ""

# d33c73e7fb7c4d48ad04546b7ea3cd58
#: ../../topics/auth.txt:1925
msgid ""
"A longer formal identifier for the user. A common interpretation would be "
"the full name name of the user, but it can be any string that identifies the "
"user."
msgstr ""

# efadc921fa764611bae4a9a1d156574d
#: ../../topics/auth.txt:1931
msgid ""
"A short, informal identifier for the user. A common interpretation would be "
"the first name of the user, but it can be any string that identifies the "
"user in an informal way. It may also return the same value as :meth:`django."
"contrib.auth.User.get_full_name()`."
msgstr ""

# 7a637571d1e543cf9097880959883365
#: ../../topics/auth.txt:1936
msgid ""
"The following methods are available on any subclass of :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"
msgstr ""

# fed6d216d3e44af7a8d23af6cfacaa34
#: ../../topics/auth.txt:1943
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr ""

# b737e8aaaaf94d10a847f99d8cac9af5
#: ../../topics/auth.txt:1947
msgid ""
"Always returns ``False``. This is a way of differentiating from  :class:"
"`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should "
"prefer using :meth:`~django.contrib.auth.models.AbstractBaseUser."
"is_authenticated()` to this method."
msgstr ""

# 272b42397fa14353b52c8092f3343a82
#: ../../topics/auth.txt:1962
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models."
"AbstractBaseUser` object."
msgstr ""

# 62f1303be31a41fb94317f9945ec788d
#: ../../topics/auth.txt:1974
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models."
"AbstractBaseUser.check_password()` for this user will never return ``True``. "
"Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` "
"object."
msgstr ""

# 9d66c89c53bb441f972a82a99d45a7e2
#: ../../topics/auth.txt:1985
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` has been called for this user."
msgstr ""

# 577b994737114dd2a893b8cdd6590e19
#: ../../topics/auth.txt:1990
msgid ""
"You should also define a custom manager for your User model. If your User "
"model defines `username` and `email` fields the same as Django's default "
"User, you can just install Django's :class:`~django.contrib.auth.models."
"UserManager`; however, if your User model defines different fields, you will "
"need to define a custom manager that extends :class:`~django.contrib.auth."
"models.BaseUserManager` providing two additional methods:"
msgstr ""

# e1bc7b8e81354b5f98879eccf3d270b2
#: ../../topics/auth.txt:2002
msgid ""
"The prototype of `create_user()` should accept the username field, plus all "
"required fields as arguments. For example, if your user model uses `email` "
"as the username field, and has `date_of_birth` as a required fields, then "
"create_user should be defined as::"
msgstr ""

# 6415630fcae547a1865f81ce55c2939c
#: ../../topics/auth.txt:2012
msgid ""
"The prototype of `create_user()` should accept the username field, plus all "
"required fields as arguments. For example, if your user model uses `email` "
"as the username field, and has `date_of_birth` as a required fields, then "
"create_superuser should be defined as::"
msgstr ""

# 1205da0efc2f4ac18c6535d6bc03d67e
#: ../../topics/auth.txt:2020
msgid ""
"Unlike `create_user()`, `create_superuser()` *must* require the caller to "
"provider a password."
msgstr ""

# 70e8dea9e849452abbe016b07a79da8e
#: ../../topics/auth.txt:2023
msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""

# d26d2713ec664b40846775c6fa51c3e5
#: ../../topics/auth.txt:2030
msgid ""
"A classmethod that normalizes email addresses by lowercasing the domain "
"portion of the email address."
msgstr ""

# ca7c50240d7d4b8a8c659c1296e44953
#: ../../topics/auth.txt:2035
msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr ""

# 89eb0b523fcf48458e1bd6ababa17827
#: ../../topics/auth.txt:2050
msgid "Extending Django's default User"
msgstr ""

# 5bd513d17be048c9bdf8107db6ee14e1
#: ../../topics/auth.txt:2052
msgid ""
"If you're entirely happy with Django's :class:`~django.contrib.auth.models."
"User` model and you just want to add some additional profile information, "
"you can simply subclass :class:`~django.contrib.auth.models.AbstractUser` "
"and add your custom profile fields."
msgstr ""

# c041a7f41bf848f69034e6d8725601b6
#: ../../topics/auth.txt:2058
msgid "Custom users and the built-in auth forms"
msgstr ""

# b8c969f38e744b69af70014a9d1db9be
#: ../../topics/auth.txt:2060
msgid ""
"As you may expect, built-in Django's :ref:`forms <built-in-auth-forms>` and :"
"ref:`views <other-built-in-views>` make certain assumptions about the user "
"model that they are working with."
msgstr ""

# 49fb47fd2ab14004b309a7a2dfd017ba
#: ../../topics/auth.txt:2064
msgid ""
"If your user model doesn't follow the same assumptions, it may be necessary "
"to define a replacement form, and pass that form in as part of the "
"configuration of the auth views."
msgstr ""

# 9dae01fd132e40479b5de7dc32c13392
#: ../../topics/auth.txt:2068
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ""

# 66862ef0e47b4f4893a2b0e83ef60025
# 9f987c7e93ba4b4f967fdfa221954437
#: ../../topics/auth.txt:2070 ../../topics/auth.txt:2075
msgid ""
"Depends on the :class:`~django.contrib.auth.models.User` model. Must be re-"
"written for any custom user model."
msgstr ""

# 0cb7fbec67c44e2aad6fc2c73ddc2eae
#: ../../topics/auth.txt:2073
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ""

# 172825157f964e609355577363a05c40
#: ../../topics/auth.txt:2078
msgid ":class:`~django.contrib.auth.forms.AuthenticationForm`"
msgstr ""

# bb3b9f37e6b642bbaa59630560e4b8b1
#: ../../topics/auth.txt:2080
msgid ""
"Works with any subclass of :class:`~django.contrib.auth.models."
"AbstractBaseUser`, and will adapt to use the field defined in "
"`USERNAME_FIELD`."
msgstr ""

# f065631f2b644134bc7c2ddeaf37e492
#: ../../topics/auth.txt:2083
msgid ":class:`~django.contrib.auth.forms.PasswordResetForm`"
msgstr ""

# 7d188e557044472c97f685c9431f9cc8
#: ../../topics/auth.txt:2085
msgid ""
"Assumes that the user model has an integer primary key, has a field named "
"`email` that can be used to identify the user, and a boolean field named "
"`is_active` to prevent password resets for inactive users."
msgstr ""

# 03738aa70f9e41a8bf08d4e12504988c
#: ../../topics/auth.txt:2089
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# fa1c8fca9d1b4852a1de5880eb9c769f
# 50e37c4ad2b54dd1b74ac09c1bd37367
# e5c350b63838400a9193f544708f39b9
#: ../../topics/auth.txt:2091 ../../topics/auth.txt:2095
#: ../../topics/auth.txt:2099
msgid ""
"Works with any subclass of :class:`~django.contrib.auth.models."
"AbstractBaseUser`"
msgstr ""

# 024fb7fed3734234b30116d231114f84
#: ../../topics/auth.txt:2093
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ""

# 628aa64b2d934be89726a84a1195dd8b
#: ../../topics/auth.txt:2097
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ""

# 639636abf43442c98b099febda525f09
#: ../../topics/auth.txt:2103
msgid "Custom users and django.contrib.admin"
msgstr ""

# 007aa3967e3049698c13a0baa246e5e1
#: ../../topics/auth.txt:2105
msgid ""
"If you want your custom User model to also work with Admin, your User model "
"must define some additional attributes and methods. These methods allow the "
"admin to control access of the User to admin content:"
msgstr ""

# 086f43ef2d0445e4bbaed84ebd4c7988
#: ../../topics/auth.txt:2111
msgid "Returns True if the user is allowed to have access to the admin site."
msgstr ""

# deeb19d07b224b24adb7283d513580f2
#: ../../topics/auth.txt:2115
msgid "Returns True if the user account is currently active."
msgstr ""

# dbb0ed3eed924333bfe6086639871e2c
#: ../../topics/auth.txt:2119
msgid ""
"Returns True if the user has the named permission. If `obj` is provided, the "
"permission needs to be checked against a specific object instance."
msgstr ""

# 3a1dcdb2498b46f4b9198b341dadc522
#: ../../topics/auth.txt:2125
msgid ""
"Returns True if the user has permission to access models in the given app."
msgstr ""

# 445c590f18f44d288b883ee8325b8842
#: ../../topics/auth.txt:2128
msgid ""
"You will also need to register your custom User model with the admin. If "
"your custom User model extends :class:`~django.contrib.auth.models."
"AbstractUser`, you can use Django's existing :class:`~django.contrib.auth."
"admin.UserAdmin` class. However, if your User model extends :class:`~django."
"contrib.auth.models.AbstractBaseUser`, you'll need to define a custom "
"ModelAdmin class. It may be possible to subclass the default :class:`~django."
"contrib.auth.admin.UserAdmin`; however, you'll need to override any of the "
"definitions that refer to fields on :class:`~django.contrib.auth.models."
"AbstractUser` that aren't on your custom User class."
msgstr ""

# 0200bc8a0dcd49d2b9be0323fdca8cf0
#: ../../topics/auth.txt:2140
msgid "Custom users and Proxy models"
msgstr ""

# 83148d387f9842be9f5a1cd5431dcf23
#: ../../topics/auth.txt:2142
msgid ""
"One limitation of custom User models is that installing a custom User model "
"will break any proxy model extending :class:`~django.contrib.auth.models."
"User`. Proxy models must be based on a concrete base class; by defining a "
"custom User model, you remove the ability of Django to reliably identify the "
"base class."
msgstr ""

# 24733622f28946a39353c059f8f3b698
#: ../../topics/auth.txt:2147
msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the User model that is currently in use in your project, or merge "
"your proxy's behavior into your User subclass."
msgstr ""

# 6bca3b4b812a4d50ae276461c73679c2
#: ../../topics/auth.txt:2152
msgid "Custom users and signals"
msgstr ""

# 71459ed899d2497e81b02d2bdb989e90
#: ../../topics/auth.txt:2154
msgid ""
"Another limitation of custom User models is that you can't use :func:`django."
"contrib.auth.get_user_model()` as the sender or target of a signal handler. "
"Instead, you must register the handler with the actual User model."
msgstr ""

# 1c43df9dd29543e1956a97d9a81e5274
# 637b2c2e54a64348b2cccc9e7c31c182
#: ../../topics/auth.txt:2159 ../../topics/forms/modelforms.txt:146
msgid "A full example"
msgstr ""

# 80966fb1e3eb48328d2f6df0cd3e8e48
#: ../../topics/auth.txt:2161
msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking, beyond a simple `admin` flag on the user "
"account. This model would be compatible with all the built-in auth forms and "
"views, except for the User creation forms."
msgstr ""

# f36a497b8f694947bee9d96af4487c31
#: ../../topics/auth.txt:2167
msgid ""
"This code would all live in a ``models.py`` file for a custom authentication "
"app::"
msgstr ""

# 7989e0479fd64db1a5fa162cc7cf40ff
#: ../../topics/auth.txt:2251
msgid ""
"Then, to register this custom User model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""

# c4a1b0c205304b58912d79b9d1ac5c4a
#: ../../topics/auth.txt:2342
msgid "Other authentication sources"
msgstr ""

# 9621a4ac04564bedaa0761398613a68d
#: ../../topics/auth.txt:2344
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have the need to hook into another authentication source "
"-- that is, another source of usernames and passwords or authentication "
"methods."
msgstr ""

# ddc650c76440497ebcae7312040795d5
#: ../../topics/auth.txt:2348
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""

# 1bf63115166047e5afd8702ae90bff43
#: ../../topics/auth.txt:2353
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""

# dd570282b7014a188aca6821a4314dac
#: ../../topics/auth.txt:2358
msgid ""
"See the :doc:`authentication backend reference </ref/authbackends>` for "
"information on the authentication backends included with Django."
msgstr ""

# a851b776910c437b91abb105641b43b0
#: ../../topics/auth.txt:2362
msgid "Specifying authentication backends"
msgstr ""

# 1e2902f8fcd245f99abae0b9426ecdef
#: ../../topics/auth.txt:2364
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` above -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""

# 53460ac9c876488387e984e1cefbe045
#: ../../topics/auth.txt:2371
msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""

# c17be5a5cdb54e7792750a04cbde4c78
#: ../../topics/auth.txt:2376
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""

# 63eb5b101199414293295575b50d1b5c
#: ../../topics/auth.txt:2380
msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the builtin permissions. It does not provide protection "
"against brute force attacks via any rate limiting mechanism. You may either "
"implement your own rate limiting mechanism in a custom auth backend, or use "
"the mechanisms provided by most Web servers."
msgstr ""

# 5c82715c58404272b3c02061ca51f318
#: ../../topics/auth.txt:2386
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""

# 5c44f2cea4904610817111d0221c6103
#: ../../topics/auth.txt:2392
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

# 67f994093928474785b8db3f9d7a658b
#: ../../topics/auth.txt:2402
msgid "Writing an authentication backend"
msgstr ""

# d204d456456449a2afa20033b3c3077b
#: ../../topics/auth.txt:2404
msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(**credentials)``, as well as a set "
"of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr ""

# 710bf8e5c01540d7972ed5120714a0be
#: ../../topics/auth.txt:2408
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever -- and returns a ``User`` object."
msgstr ""

# 86300dd838fb4c118f68e337749a02e3
#: ../../topics/auth.txt:2411
msgid ""
"The ``authenticate`` method takes credentials as keyword arguments. Most of "
"the time, it'll just look like this::"
msgstr ""

# 69928ccb31dd4fe982179dec6c80042a
#: ../../topics/auth.txt:2418
msgid "But it could also authenticate a token, like so::"
msgstr ""

# 60e804a608af4bf49d0a6c4fe8a3cb0e
#: ../../topics/auth.txt:2424
msgid ""
"Either way, ``authenticate`` should check the credentials it gets, and it "
"should return a ``User`` object that matches those credentials, if the "
"credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

# a437093abe7c45cc83b37a7300737092
#: ../../topics/auth.txt:2428
msgid ""
"The Django admin system is tightly coupled to the Django ``User`` object "
"described at the beginning of this document. For now, the best way to deal "
"with this is to create a Django ``User`` object for each user that exists "
"for your backend (e.g., in your LDAP directory, your external SQL database, "
"etc.) You can either write a script to do this in advance, or your "
"``authenticate`` method can do it the first time a user logs in."
msgstr ""

# a126e28245fc4fab9a5a0411621c3be6
#: ../../topics/auth.txt:2435
msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""

# e378a184ba574f658b304a2f483fb07b
#: ../../topics/auth.txt:2478
msgid "Handling authorization in custom backends"
msgstr ""

# 8c70dfc282d947f298f52b8b2ab56a9d
#: ../../topics/auth.txt:2480
msgid "Custom auth backends can provide their own permissions."
msgstr ""

# 659b52e8fba24f16ba4842d27c5be15c
#: ../../topics/auth.txt:2482
msgid ""
"The user model will delegate permission lookup functions (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()`, and :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) to any authentication backend that implements these "
"functions."
msgstr ""

# d47e86d0b6db4991b52e7d4e6be71f3b
#: ../../topics/auth.txt:2489
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""

# 0ec0ebf3d06645d6a1025662be6ebf91
#: ../../topics/auth.txt:2493
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr ""

# 8d9688e540f443af821f6e9e2570c771
#: ../../topics/auth.txt:2506
msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that in addition to the same arguments given to the associated :class:"
"`django.contrib.auth.models.User` functions, the backend auth functions all "
"take the user object, which may be an anonymous user, as an argument."
msgstr ""

# fb78c5bd339d4886a1707b5ceb769a50
#: ../../topics/auth.txt:2511
msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in `django/contrib/auth/backends.py`_, which is the default backend "
"and queries the ``auth_permission`` table most of the time. If you wish to "
"provide custom behavior for only part of the backend API, you can take "
"advantage of Python inheritence and subclass ``ModelBackend`` instead of "
"implementing the complete API in a custom backend."
msgstr ""

# 372a9911005649cc9cc65b31a043293e
#: ../../topics/auth.txt:2523
msgid "Authorization for anonymous users"
msgstr ""

# 57f7c2aad3a047e98236a29f79b597a1
#: ../../topics/auth.txt:2525
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most Web "
"sites authorize anonymous users to browse most of the site, and many allow "
"anonymous posting of comments etc."
msgstr ""

# 34a2e322053848f4ab5081f84c68e67b
#: ../../topics/auth.txt:2531
msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""

# bdbdd0f77a374d8b845c566af92e91b4
#: ../../topics/auth.txt:2542
msgid "Authorization for inactive users"
msgstr ""

# 9e598783493f4ae8b88df909cb6716f1
#: ../../topics/auth.txt:2544
msgid ""
"An inactive user is a one that is authenticated but has its attribute "
"``is_active`` set to ``False``. However this does not mean they are not "
"authorized to do anything. For example they are allowed to activate their "
"account."
msgstr ""

# 6ab3d9d09f15459ab0d5ccce3b699c8c
#: ../../topics/auth.txt:2549
msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""

# ae2d11aefdd34fb0a0a1e9ede5cfecb5
#: ../../topics/auth.txt:2553
msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr ""

# 35dfe3bfab374912aab53efdbe93db9f
#: ../../topics/auth.txt:2558
msgid "Handling object permissions"
msgstr ""

# be12b603b57248c58b48dff212bef32b
#: ../../topics/auth.txt:2560
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""

# 6c66a57b2c2b429883493afe560c05d7
#: ../../topics/cache.txt:3
msgid "Django's cache framework"
msgstr "장고의 캐시 프레임 워크"

# faee3393d79c4ea1a3c0a656c7ebe292
#: ../../topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""
"동적 웹 사이트에는 기본적으로 트레이드 오프가 있는데, 그것은 바로 동적이라는 "
"점입니다. 사용자가 페이지를 요청할 때마다, 사이트의 방문자가 보는 페이지를 생"
"성하기 위해 웹 서버는 데이터베이스 쿼리에서 비즈니스 로직의 렌더링에 이르기까"
"지의 온갖 종류의 계산을 수행합니다. 처리의 오버헤드 관점으로 볼 때, 이것은 파"
"일 시스템으로부터 파일을 읽는 표준적인 서버 구성에 비하여 한결 고비용입니다."

# 43915c3bd07341e88afa0f82d3488978
#: ../../topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't washingtonpost.com or slashdot.org; they're simply "
"small- to medium-sized sites with so-so traffic. But for medium- to high-"
"traffic sites, it's essential to cut as much overhead as possible."
msgstr ""
"대부분의 웹 애플리케이션에 있어서, 이 오버헤드는 큰 문제가 되지 않습니다. 대"
"부분의 웹 애플리케이션은 워싱턴포스트나 슬래쉬닷과 같은 큰 사이트가 아니라, "
"트래픽이 많지 않은 중소 규모의 사이트이기 때문입니다. 하지만 많은 트래픽이 몰"
"리는 사이트에 있어서는, 오버헤드를 가능한 줄이는 것이 필수적입니다."

# 3fd34657a15e48a5867b881df8568a59
#: ../../topics/cache.txt:17
msgid "That's where caching comes in."
msgstr "그래서 캐싱이 필요합니다."

# 4a1a47d40731435a82f08a981d7ae68c
#: ../../topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated Web page::"
msgstr ""
"무언가를 캐시한다는 것은, 고비용의 계산 결과를 저장해둠으로써 다음 번에는 실"
"행하지 않아도 되도록 하는 것입니다. 다음은 동적으로 생성되는 웹 페이지에 있어"
"서 캐싱이 어떻게 동작하는지를 설명하는 의사 코드입니다::"

# 5146cc0954724efa8b326da5dd4344d0
#: ../../topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""
"장고는 동적 페이지를 저장하는 강력한 캐시 시스템을 갖추고 있어 각 요청에 대하"
"여 계산을 할 필요가 없습니다. 편의를 위해, 장고는 세분화된 여러 수준의 캐시"
"를 제공합니다. 특정한 뷰의 결과를 캐시할 수 있고, 만들어내기 어려운 부분만 캐"
"시할 수 있고, 전체 사이트를 캐시할 수도 있습니다."

# 95cb64faa9a848968697f3e71dd6e054
#: ../../topics/cache.txt:37
msgid ""
"Django also works well with \"upstream\" caches, such as `Squid <http://www."
"squid-cache.org>`_ and browser-based caches. These are the types of caches "
"that you don't directly control but to which you can provide hints (via HTTP "
"headers) about which parts of your site should be cached, and how."
msgstr ""
"장고는 또한 `Squid <http://www.squid-cache.org>`_\\ 와 같은 \"업스트림\" 캐"
"시 및 브라우저 기반의 캐시와도 잘 작동합니다. 이러한 종류의 캐시들은 여러분"
"이 직접적으로 제어하는 대신에 HTTP 헤더 등을 통하여 사이트의 어느 부분이 어떻"
"게 캐시되어야할 지에 대한 힌트를 제공할 수 있게 되어 있습니다."

# bd04770914364262a4228a9dd852db8b
#: ../../topics/cache.txt:43
msgid "Setting up the cache"
msgstr "캐시 설정"

# ead66a18a1db4c3cafab90b03f81ef5f
#: ../../topics/cache.txt:45
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""
"캐시 시스템은 약간의 설치를 필요로합니다. 즉, 캐시된 데이터를 데이터베이스, "
"파일 시스템 혹은 메모리 중 어디에 둘 것인지를 알려주어야 합니다. 이것은 캐시"
"의 성능에 영향을 미치는 중요한 결정이며, 어떠한 종류의 캐시는 다른 것에 비하"
"여 더 빠릅니다."

# 0b0c331385e545fcbfdecc8a4fac23b9
#: ../../topics/cache.txt:50
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""
"캐시의 설정은 settings 파일의 :setting:`CACHES`\\ 에서 합니다. :setting:"
"`CACHES`\\ 에서 사용할 수 있는 설정들에 대하여 설명하도록 하겠습니다."

# 36ef803f50d34a36a8a1043b14b7f600
#: ../../topics/cache.txt:57
msgid "Memcached"
msgstr ""

# 8b96b2eda5d2400eb6acb8cb8e57ebf8
#: ../../topics/cache.txt:59
msgid ""
"By far the fastest, most efficient type of cache available to Django, "
"Memcached__ is an entirely memory-based cache framework originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive.  It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""
"현재 장고에 있어서 가장 빠르고 효율적인 형태의 캐시인 Memcached__\\ 는 완전"
"히 메모리 기반의 캐시 프레임워크로서, LiveJournal.com의 높은 부하를 처리하도"
"록 개발되었으며 이후 Danga Interactive에 의해 오픈 소스화되었습니다.  페이스"
"북과 위키피디아에서 데이터베이스 접근을 줄이기 위해 사용되어 사이트의 성능을 "
"극적으로 향상시켰습니다."

# 16b45dc7acf2467db8e1e34401126907
#: ../../topics/cache.txt:67
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting "
"arbitrary data in the cache.  All data is stored directly in memory, so "
"there's no overhead of database or filesystem usage."
msgstr ""
"Memcached는 데몬으로서 동작하며 RAM의 특정 용량을 차지합니다. 캐시 내의 임의"
"의 데이터에 대한 추가, 조회 및 삭제를 위한 더 빠른 인터페이스를 제공하는 일"
"을 합니다.  모든 데이터는 메모리에 직접 저장되므로, 데이터베이스 또는 파일 시"
"스템 사용에 오버헤드가 없습니다."

# 27ab104d02f242eb8f05c855e4b58a31
#: ../../topics/cache.txt:72
msgid ""
"After installing Memcached itself, you'll need to install a memcached "
"binding. There are several python memcached bindings available; the two most "
"common are `python-memcached`_ and `pylibmc`_."
msgstr ""
"Memcached 자체를 설치한 다음에는, memcached 바인딩을 설치할 필요가 있습니다. "
"파이썬 memcached 바인딩이 몇 가지 있으며, `python-memcached`_\\ 와 `pylibmc`_"
"\\ 이 많이 쓰입니다."

# a607c0d2ad124aee8919546633cbc651
#: ../../topics/cache.txt:79
msgid "To use Memcached with Django:"
msgstr "장고와 Memcached 사용하기:"

# d5ed46da8b404bdebc247b35db9738a6
#: ../../topics/cache.txt:81
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.MemcachedCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""
":setting:`BACKEND <CACHES-BACKEND>`\\ 를 ``django.core.cache.backends."
"memcached.MemcachedCache`` 또는 ``django.core.cache.backends.memcached."
"PyLibMCCache``\\ 로 설정합니다(선택한 memcached 바인딩에 따릅니다)."

# f1cd64004e8647499728c50201bdfcb0
#: ../../topics/cache.txt:86
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""
":setting:`LOCATION <CACHES-LOCATION>`\\ 을 ``ip:port`` 값으로 설정합니다. "
"``ip``\\ 는 Memcached 데몬의 IP 주소이고 ``port``\\ 는 Memcached가 실행되는 "
"포트입니다. 또는 ``unix:path`` 값을 지정하며, 이때 ``path``\\ 는 Memcached "
"Unix 소켓 파일의 경로입니다."

# 1dac62ea8eb14023b0b8d37387c2a545
#: ../../topics/cache.txt:91
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""
"이 예제에서, Memcached는 localhost (127.0.0.1) 포트 11211에서 수행되며, "
"``python-memcached`` 바인딩을 사용합니다::"

# a782ffe43cb341468115061446bd74b6
#: ../../topics/cache.txt:101
msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""
"이 예제헤서, Memcached는 ``python-memcached`` 바인딩을 사용하여 로컬 Unix 소"
"켓 파일 :file:`/tmp/memcached.sock`\\ 을 통하여 사용가능합니다::"

# 8b515481fcbe4298a0fd642fc309b7b8
#: ../../topics/cache.txt:111
msgid ""
"One excellent feature of Memcached is its ability to share cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""
"Memcached의 한 가지 훌륭한 점은 여러 서버에서 캐시를 공유할 수 있는 능력입니"
"다. 이는 Memcached 데몬을 여러 머신에서 실행시킬 수 있음을 뜻하며, 프로그램에"
"서는 캐시 값을 각 머신에 복제할 필요 없이 머신의 그룹을 *단일* 캐시로 취급할 "
"수 있습니다. 이 기능을 활용하려면, :setting:`LOCATION <CACHES-LOCATION>`\\ "
"에 모든 서버 주소를 세미콜론으로 구분하거나 리스트로서 포함시킵니다. "

# ed2949f9dad8410087ba98536f50b74b
#: ../../topics/cache.txt:118
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""
"이 예제에서, 캐시는 IP 주소 172.19.26.240과 172.19.26.242, 포트 11211에서 동"
"작하는 Memcached 인스턴스에서 공유됩니다::"

# 0820c5737cf14d24a6a48a2039a4f07f
#: ../../topics/cache.txt:131
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""
"다음의 예제에서, 캐시는 IP 주소 172.19.26.240 (포트 11211) 및 172.19.26.242 "
"(포트 11212), 그리고 172.19.26.244 (포트 11213)에서 동작하는 Memcached 인스턴"
"스에서 공유됩니다::"

# 5e3f3da0f9c745169ee5654d0af9ee06
#: ../../topics/cache.txt:146
msgid ""
"A final point about Memcached is that memory-based caching has one "
"disadvantage: Because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""
"Memcached에 대하여 마지막으로 짚고 넘어갈 부분은 메모리 기반의 캐시에는 한 가"
"지 단점이 있다는 것입니다. 캐시된 데이터는 메모리에 저장되기 때문에, 만약 서"
"버에 장애가 발생하면 데이터를 잃게 됩니다. 분명, 메모리는 영구적인 데이터 저"
"장을 위한 곳이 아니므로, 메모리 기반의 캐싱을 유일한 데이터 스토리지로서 의존"
"하여서는 안됩니다. 의심할 바 없이, 장고의 캐싱 백엔드 중 *어느 것도* 영구적"
"인 스토리지에 사용되어서는 안됩니다 -- 그것들은 모두 스토리지가 아닌 캐싱을 "
"위한 솔루션입니다 -- 여기서 이 점을 지적하는 것은 메모리 기반의 캐시가 특히 "
"임시적이기 때문입니다."

# a96382f1457a4b938e0eba7ca511779d
#: ../../topics/cache.txt:156
msgid "Database caching"
msgstr "데이터베이스 캐싱"

# 5115d0cea91d4d3cbb9f975247b4b61a
#: ../../topics/cache.txt:158
msgid ""
"To use a database table as your cache backend, first create a cache table in "
"your database by running this command::"
msgstr ""
"캐시 백​​엔드로 데이터베이스 테이블을 사용하려면, 먼저 이 명령을 실행하여 데이"
"터베이스에 캐시 테이블을 만듭니다::"

# 27174059aec74af3b8908eebd4604d47
#: ../../topics/cache.txt:163
msgid ""
"...where ``[cache_table_name]`` is the name of the database table to create. "
"(This name can be whatever you want, as long as it's a valid table name "
"that's not already being used in your database.) This command creates a "
"single table in your database that is in the proper format that Django's "
"database-cache system expects."
msgstr ""
"...``[cache_table_name]``\\ 은 생성할 데이터베이스 테이블의 이름입니다. (이 "
"이름은 데이터베이스에서 이미 사용되고 있지 않은 올바른 테이블 이름이라면 원하"
"는 무엇이든 가능합니다.) 이 명령은 여러분의 데이터베이스 내에, 장고의 데이터"
"베이스 캐시 시스템이 예상하는 적절한 형식의 단일 테이블을 생성합니다."

# 30720d05530441748c7412edd5ddde34
#: ../../topics/cache.txt:169
msgid ""
"Once you've created that database table, set your :setting:`BACKEND <CACHES-"
"BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, "
"and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of "
"the database table. In this example, the cache table's name is "
"``my_cache_table``::"
msgstr ""
"이 데이터베이스 테이블을 생성한 다음, :setting:`BACKEND <CACHES-BACKEND>`\\ "
"를 ``\"django.core.cache.backends.db.DatabaseCache\"``\\ 로, :setting:"
"`LOCATION <CACHES-LOCATION>`\\ 을 데이터베이스 테이블의 이름 ``tablename``\\ "
"으로 설정합니다. 이 예제에서, 캐시 테이블의 이름은 ``my_cache_table``\\ 입니"
"다::"

# 1840c14492834bb9b87bca102205ddf8
#: ../../topics/cache.txt:183
msgid ""
"The database caching backend uses the same database as specified in your "
"settings file. You can't use a different database backend for your cache "
"table."
msgstr ""
"데이터베이스 캐싱 백엔드는 여러분의 settings 파일에서 지정된 것과 동일한 데이"
"터베이스를 사용합니다. 캐시 테이블을 위하여 별도의 데이터베이스를 사용할 수"
"는 없습니다."

# 947c46ad7250436ca7f3f83441db1f18
#: ../../topics/cache.txt:186
msgid ""
"Database caching works best if you've got a fast, well-indexed database "
"server."
msgstr ""
"데이터베이스 캐싱은 빠르고 인덱스가 잘 잡힌 데이터베이스 서버에서 가장 잘 작"
"동합니다."

# 9f72237a288444e8b95fa36bf65fa4c7
#: ../../topics/cache.txt:189
msgid "Database caching and multiple databases"
msgstr "데이터베이스 캐싱 및 다중 데이터베이스"

# 2175d7dcda98400c9a73debd62350c49
#: ../../topics/cache.txt:191
msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""
"여러 개의 데이터베이스 캐시 데이터베이스를 사용하는 경우, 당신은 또한 데이터"
"베이스 캐시 테이블에 대한 라우팅 방법을 설정해야합니다. 라우팅을 위해, 데이터"
"베이스 캐시 테이블은 ``django_cache``\\ 라는 이름의 애플리케이션 내에 "
"``CacheEntry``\\ 라는 이름의 모델로 나타납니다. 이 모델은 모델 캐시에는 나타"
"나지 않지만, 모델 상세는 라우팅 목적으로 사용될 수 있습니다."

# e7b54aabc2ca49bca8bfa902697d265d
#: ../../topics/cache.txt:198
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_slave``, and all write operations to ``cache_master``. The cache "
"table will only be synchronized onto ``cache_master``::"
msgstr ""
"예를 들어, 다음의 라우터는 모든 캐시 읽기 연산을 ``cache_slave``\\ 로, 모든 "
"쓰기 연산을 ``cache_master``\\ 로 리다이렉트합니다. 캐시 테이블은 "
"``cache_master``\\ 로 동기화됩니다::"

# 9b5d09d253d04e7295114c238655906c
#: ../../topics/cache.txt:224
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""
"데이터베이스 캐시 모델에 대한 라우팅 방향을 지정하지 않으면, 캐시 백엔드는 "
"``default`` 데이터베이스를 사용합니다."

# d5829df5cbff40aca6cac67881d6f10a
#: ../../topics/cache.txt:227
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""
"물론, 데이터베이스 캐시 백엔드를 사용하지 않는다면, 데이터베이스 캐시 모델에 "
"대한 라우팅 인스트럭션을 제공하는 것을 걱정할 필요가 없습니다."

# 7adc9b00084748a582af9c5e77467deb
#: ../../topics/cache.txt:232
msgid "Filesystem caching"
msgstr "파일 시스템 캐싱"

# ed965349efa94730bed5b6c5dc2bbb78
#: ../../topics/cache.txt:234
msgid ""
"To store cached items on a filesystem, use ``\"django.core.cache.backends."
"filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For "
"example, to store cached data in ``/var/tmp/django_cache``, use this "
"setting::"
msgstr ""
"캐시된 아이템을 파일 시스템에 저장하려면, :setting:`BACKEND <CACHES-BACKEND>`"
"\\ 의 값으로 ``\"django.core.cache.backends.filebased.FileBasedCache\"``\\ "
"를 사용합니다. 예를 들어, 캐시된 데이터를 ``/var/tmp/django_cache``\\ 에 저장"
"하려면, 다음의 설정을 사용합니다::"

# 0d14e26f2f494f75a9d1eca25c097cb4
#: ../../topics/cache.txt:247
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr "윈도우즈에서는, 다음과 같이 경로에 드라이브 문자를 포함시킵니다::"

# 6e1a38aa3acd43dabcdb331def4f5476
#: ../../topics/cache.txt:257
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""
"디렉토리 경로에는 절대경로, 즉 파일 시스템의 루트에서부터 시작하는 경로를 지"
"정합니다. 설정의 끝에 슬래쉬를 넣는지의 여부는 중요하지 않습니다."

# a3e68cb5b21d4c0795a67367bbc69d8f
#: ../../topics/cache.txt:261
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing "
"the above example, if your server runs as the user ``apache``, make sure the "
"directory ``/var/tmp/django_cache`` exists and is readable and writable by "
"the user ``apache``."
msgstr ""
"이 설정이 카리키는 디렉토리가 존재하며 웹 서버가 동작하는 시스템의 사용자가 "
"읽고 쓸 수 있는지 확인하십시오. 위의 예제에 이어, 여러분의 서버가 ``apache`` "
"사용자로서 실행된다면, ``/var/tmp/django_cache`` 디렉토리가 존재하며 "
"``apache`` 사용자가 읽고 쓸 수 있는지 확인하십시오."

# b1737cd0f1ac476cb452e864a4c0ab87
#: ../../topics/cache.txt:267
msgid ""
"Each cache value will be stored as a separate file whose contents are the "
"cache data saved in a serialized (\"pickled\") format, using Python's "
"``pickle`` module. Each file's name is the cache key, escaped for safe "
"filesystem use."
msgstr ""
"각 캐시 값은 분리된 파일로서 저장되며, 그 내용은 파이썬의 ``pickle`` 모듈을 "
"사용하여 직렬화된(\"pickled\") 형식으로 저장되는 캐시 데이터입니다. 각 파일"
"의 이름은 캐시 키이며, 파일 시스템의 안전한 사용을 위하여 이스케이프 처리됩니"
"다."

# e86c5e9aaee64726894ac85975780443
#: ../../topics/cache.txt:272
msgid "Local-memory caching"
msgstr "지역 메모리 캐싱"

# dbda1ecd5d8d4814af743e09a5089e6c
#: ../../topics/cache.txt:274
msgid ""
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is multi-process and thread-safe. To use it, set :setting:"
"`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""
"메모리 내 캐시를 통한 속도의 장점을 원하지만, Memcached를 운영하기 힘든 경"
"우, 지역 메모리 캐시 백엔드를 고려하십시오. 이 캐시는 다중 프로세스로 동작하"
"며 스레드에 대하여 안전합니다. 이것을 사용하려면, :setting:`BACKEND <CACHES-"
"BACKEND>`\\ 를 ``\"django.core.cache.backends.locmem.LocMemCache\"``\\ 로 설"
"정합니다. 예를 들어 ::"

# 59f910b74d7c48b38419c7ac6c7f4d9d
#: ../../topics/cache.txt:287
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one locmem cache, you can omit "
"the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more than "
"one local memory cache, you will need to assign a name to at least one of "
"them in order to keep them separate."
msgstr ""
"캐시 :setting:`LOCATION <CACHES-LOCATION>`\\ 은 개별 메모리 저장소를 식별하"
"는 데에 사용됩니다. 하나의 locmem 캐시만 갖는다면, :setting:`LOCATION "
"<CACHES-LOCATION>`\\ 을 생략할 수 있습니다. 그러나, 그보다 많은 메모리 캐시"
"를 갖는다면, 그것들을 분리된 상태로 유지하기 위하여 최소한 하나의 이름을 할당"
"할 필요가 있습니다."

# 29e32048bcd247a5887bdef622315e15
#: ../../topics/cache.txt:293
msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""
"각 프로세스는 각자의 캐시 인스턴스를 가지며, 프로세스를 넘나드는 캐싱은 불가"
"능합니다. 이는 분명히 지역 메모리 캐시는 메모리의 효율성이 특히 떨어지며 프로"
"덕션 환경에 적합하지 않을 수 있음을 의미합니다. 개발에 있어서 좋습니다."

# 6b31062165434443844c040eec78e7a3
#: ../../topics/cache.txt:299
msgid "Dummy caching (for development)"
msgstr "더미 캐싱 (개발 용)"

# f6a5a168529a4955ac515814f2e1dea5
#: ../../topics/cache.txt:301
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""
"마지막으로, 장고에는 실제로 캐시를 하지 않는 '가짜' 캐시가 있습니다 -- 캐시 "
"인터페이스를 구현할 뿐 아무 것도 하지 않습니다."

# 0be171d2102d49688496257287f6905f
#: ../../topics/cache.txt:304
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""
"이것은 프로덕션 사이트에서는 여러 곳에서 강력한 캐싱을 사용하되,개발/테스트 "
"환경에서는 캐시를 하지 않고자 하며 환경에 따라 코드를 변경하고 싶지는 않은 경"
"우에 유용합니다. 더미 캐싱을 사용하려면, :setting:`BACKEND <CACHES-BACKEND>`"
"\\ 를 다음과 같이 설정합니다::"

# 2b8cf27fc1c8406a936c6d5f71aede19
#: ../../topics/cache.txt:316
msgid "Using a custom cache backend"
msgstr "커스텀 캐시 백엔드의 사용"

# 20c24b5f2c0840ecaa7bfb65689fae58
#: ../../topics/cache.txt:318
msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""
"바로 사용할 수 있는 여러 가지 캐시 백엔드들이 장고에 포함되어 있기는 하지만, "
"커스터마이즈된 캐시 백엔드를 사용하기를 원할 수도 있습니다. 장고에서 외부의 "
"캐시 백엔드를 사용하려면, :setting:`CACHES` 설정의 :setting:`BACKEND <CACHES-"
"BACKEND>`\\ 를 통해 파이썬 임포트 경로를 다음과 같이 사용합니다::"

# 29f56f4ab7554b0e81d6d1fba1325931
#: ../../topics/cache.txt:329
msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""
"스스로 백엔드를 구축하는 경우, 표준 캐시 백엔드를 참조 구현으로 사용할 수 있"
"습니다. 장고 소스의 ``django/core/cache/backends/`` 디렉토리에서 코드를 찾을 "
"수 있습니다."

# 942a45f4755540c2b2d2327951f152b7
#: ../../topics/cache.txt:333
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""
"참고: 호스트에서 지원하지 않는 것과 같이 부득이한 경우가 아니라면, 장고에서 "
"제공하는 캐시 백엔드를 사용하는 것이 좋습니다. 그것들이 테스트가 잘 되어있고 "
"사용하기도 쉽습니다."

# 0298c7ad3dde413a8cedb7da11d55b48
#: ../../topics/cache.txt:338
msgid "Cache arguments"
msgstr "캐시 인자"

# 2a8d3ba94ca14e6fbd6d43d180401219
#: ../../topics/cache.txt:340
msgid ""
"In addition to the defining the engine and name of the each cache backend, "
"each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""
"각 캐시 백엔드의 엔진 및 이름을 정의하는 것 외에도, 각각의 캐시 백엔드에 캐"
"싱 동작을 제어하는​​ 추가적인 인자를 제공할 수 있습니다. 이러한 인자들은 :"
"setting:`CACHES` 설정의 추가적인 키로서 제공합니다. 유효한 인수는 다음과 같습"
"니다:"

# 4ee5d20285ff43068d331ba476e327d4
#: ../../topics/cache.txt:345
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to 300 seconds (5 minutes)."
msgstr ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: 캐시를 위해 사용할 타임아웃의 기본값, "
"초 단위. 이 인자는 300 초(5 분)을 기본값으로 합니다."

# fe02b86d55b340f3a4cc28ffefcd8a1d
#: ../../topics/cache.txt:349
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"cache backend. The list options understood by each backend vary with each "
"backend."
msgstr ""
":setting:`OPTIONS <CACHES-OPTIONS>`: 캐시 백엔드에 전달할 선택사항들. 이 리스"
"트 옵션은 각 백엔드에 따라 달리 이해됩니다."

# fbdb8c31592d487b93cb9e512a52a91c
#: ../../topics/cache.txt:353
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""
"자체적인 culling 전략을 구현하는 캐시 백엔드(즉, ``locmem``, ``filesystem`` "
"및 ``database`` 백엔드)는 다음의 옵션을 존중합니다:"

# 4ee3cd4d27ba4fb38de6f9c25c6f9cf8
#: ../../topics/cache.txt:357
msgid ""
"``MAX_ENTRIES``: the maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""
"``MAX_ENTRIES``: 오래된 값이 삭제되기 전에 허용되는 항목의 최대값. 이 인자의 "
"기본값은 ``300``\\ 입니다."

# b441eca5ddc3403a8d2549f4e14dc7a4
#: ../../topics/cache.txt:361
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1/CULL_FREQUENCY``, so set "
"``CULL_FREQUENCY``: to ``2`` to cull half of the entries when "
"``MAX_ENTRIES`` is reached."
msgstr ""
"``CULL_FREQUENCY``: 엔트리의 부분은 ``MAX_ENTRIES``\\ 에 도달하면 도태됨. 실"
"제 비율은 ``1/CULL_FREQUENCY``\\ 이므로, ``MAX_ENTRIES`` 도달 시 항목의 절반"
"을 도태시키려면 ``CULL_FREQUENCY``\\ 를 ``2``\\ 로 설정합니다."

# 0068284dc57f475ba563a74a35fa5532
#: ../../topics/cache.txt:366
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. This makes culling *much* faster at "
"the expense of more cache misses."
msgstr ""
"``CULL_FREQUENCY`` 값이 ``0``\\ 인 것은 ``MAX_ENTRIES``\\ 에 도달하면 전체 캐"
"시가 덤프됨을 의미합니다. 이는 더 많은 캐시 미스의 비용에 대하여 컬링을 *더욱"
"* 빠르게 해줍니다."

# d52683c78b894f8fa9749b9d387ce184
#: ../../topics/cache.txt:371
msgid ""
"Cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library. As a result, the list of valid "
"options depends on the library in use."
msgstr ""
"서드 파티 라이브러리의 뒷받침을 받는 캐시 백엔드들은 옵션을 직접적으로 하부"
"의 캐시 라이브러리에 전달합니다. 그 결과로, 유효한 옵션의 목록은 사용하는 라"
"이브러리에 의존합니다."

# bfe063cbc44e41b2a0adfa06f93b6d14
#: ../../topics/cache.txt:375
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: 장고 서버에서 사용되는 모든 캐시"
"에 자동적으로 포함되는 문자열(기본 접두어)."

# e24b280b9402415091b594d4c1e52430
#: ../../topics/cache.txt:379
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr "자세한 내용은 :ref:`캐시 문서 <cache_key_prefixing>`\\ 를 참조."

# af586e03cfef4854b901240c72a364e7
#: ../../topics/cache.txt:382
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""
":setting:`VERSION <CACHES-VERSION>`: 장고 서버에 의해 생성된 캐시 키들의 기"
"본 버전 번호."

# f52ac681459e41c08ee4fe918adf4ac9
#: ../../topics/cache.txt:385
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr "자세한 내용은 :ref:`캐시 문서 <cache_versioning>` 참조."

# cdc183ca3c5f4a7f8c80e7da2e574b2f
#: ../../topics/cache.txt:388
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` 최종 캐시 키를 위한 접두어, 버"
"전 및 키를 작성하는 방법을 정의하는 함수에 대한, 점을 사용하는 경로를 포함하"
"는 문자열."

# d5c45c52538145df8f0acef93318fd30
#: ../../topics/cache.txt:392
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr "자세한 내용은 :ref:`캐시 문서 <cache_key_transformation>` 참조."

# 5b90f97fbc19411c87eba808cecd80b8
#: ../../topics/cache.txt:395
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""
"이 예에서 파일 시스템 백엔드는 60 초 제한 시간, 1000 항목의 최대 용량으로 구"
"성되고 있습니다::"

# 4f3ffc2268fe4afbab382781e09d1803
#: ../../topics/cache.txt:409
msgid ""
"Invalid arguments are silently ignored, as are invalid values of known "
"arguments."
msgstr "잘못된 인자나, 알려진 인자에 대한 잘못된 값은 조용히 무시됩니다."

# 02289ad223e5405e9d578940b6279ee1
#: ../../topics/cache.txt:413
msgid "The per-site cache"
msgstr ""

# 2bb4dca3e1c6453d887de06ce29396a2
#: ../../topics/cache.txt:415
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, "
"as in this example::"
msgstr ""

# 4511890e8ef1471b81f12c50b2595ad3
#: ../../topics/cache.txt:429
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

# 126b5d39a0784011802ce652be755ab8
#: ../../topics/cache.txt:433
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

# 01393e5372f047569c49e43858ee5afb
#: ../../topics/cache.txt:435
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

# 0f512bd31a904ccab81e7516a460bc54
#: ../../topics/cache.txt:436
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

# 39414a4bdeff4fba91da62b4fe1b3491
#: ../../topics/cache.txt:438
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

# 43936c13688d447e93af38e4cb5da8ad
#: ../../topics/cache.txt:443
msgid ""
"The cache middleware caches GET and HEAD responses with status 200, where "
"the request and response headers allow. Responses to requests for the same "
"URL with different query parameters are considered to be unique pages and "
"are cached separately. Optionally, if the :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous "
"requests (i.e., not those made by a logged-in user) will be cached. This is "
"a simple and effective way of disabling caching for any user-specific pages "
"(including Django's admin interface). Note that if you use :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated "
"``AuthenticationMiddleware``. The cache middleware expects that a HEAD "
"request is answered with the same response headers as the corresponding GET "
"request; in which case it can return a cached GET response for HEAD request."
msgstr ""

# 054363ba3a3342dc8c57b0d6cb0359a3
#: ../../topics/cache.txt:456
msgid ""
"Additionally, the cache middleware automatically sets a few headers in each :"
"class:`~django.http.HttpResponse`:"
msgstr ""

# 07f923d77afa4334b395effcf4da3c88
#: ../../topics/cache.txt:459
msgid ""
"Sets the ``Last-Modified`` header to the current date/time when a fresh "
"(uncached) version of the page is requested."
msgstr ""

# 92c7c8d016344bd5b1ac026e6d7cea65
#: ../../topics/cache.txt:462
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

# 035373d1bf804e1a8fe110d9b214de88
#: ../../topics/cache.txt:465
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

# 65f4ec49f58e47598d7575eb462fe186
#: ../../topics/cache.txt:468
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

# 85eb4697dc6c490d88127c938a6fc958
#: ../../topics/cache.txt:470
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the ``cache_control`` decorator) or disable caching for a "
"view (using the ``never_cache`` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""

# 46f21a8d74064551a2f7d557e56414d5
#: ../../topics/cache.txt:480
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

# 4667d05ac00c4e6e9203aa94c6d8c2ae
#: ../../topics/cache.txt:487
msgid ""
"Cache keys also include the active :term:`language <language code>` when :"
"setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

# 705e71f6e0244c3c846e1a86f17e35d3
#: ../../topics/cache.txt:494
msgid "The per-view cache"
msgstr ""

# 7e00a81ac0a748e6b0f820ac0477aad3
#: ../../topics/cache.txt:498
msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you. It's "
"easy to use::"
msgstr ""

# 564815fa31b04f39bbd943a3b1b565f2
#: ../../topics/cache.txt:509
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""

# 128fdd3bcc8b414584ef593273c09ff9
#: ../../topics/cache.txt:515
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

# 891c0f098f6140f990ce917d80be97e4
#: ../../topics/cache.txt:523
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

# 62c275248c4d49a5b988a07e6ce2822f
#: ../../topics/cache.txt:527
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

# ff9516e482824a9993d5d0b471127c85
#: ../../topics/cache.txt:537
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

# 9e0dac9328ea484c8b3326f4e80b552b
#: ../../topics/cache.txt:546
msgid ""
"The two settings can also be combined. If you specify a ``cache`` *and* a "
"``key_prefix``, you will get all the settings of the requested cache alias, "
"but with the key_prefix overridden."
msgstr ""

# 7b06785a01b14fe3988b9e177441cdf0
#: ../../topics/cache.txt:551
msgid "Specifying per-view cache in the URLconf"
msgstr ""

# fb3d540decf348238bbc6453f1b360fb
#: ../../topics/cache.txt:553
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

# daf98e4e4a914b7bac8d42ee51178722
#: ../../topics/cache.txt:562
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

# 86b32feaff194954a2e05e1e67a3b477
#: ../../topics/cache.txt:569
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

# e68816a61f6a448ead094d52e92b8034
#: ../../topics/cache.txt:580
msgid "Template fragment caching"
msgstr ""

# 644f7d14a0ee46ea8a46590971db5818
#: ../../topics/cache.txt:582
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

# 926fc498743244a5b456a40bd0eeb1ec
#: ../../topics/cache.txt:586
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. The name will be taken as "
"is, do not use a variable. For example:"
msgstr ""

# 03553d4dd8da454d85a2d1e1bf52c768
#: ../../topics/cache.txt:598
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing additional arguments to the ``{% "
"cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

# c8c8d4db990d4056b89d015ae25ae3f8
#: ../../topics/cache.txt:611
msgid ""
"It's perfectly fine to specify more than one argument to identify the "
"fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

# f4ec1d4c744d4c75beb97ee5704c408c
#: ../../topics/cache.txt:614
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""

# b76035643f8244d991d5ac6a152ebd68
#: ../../topics/cache.txt:631
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""

# 6b3fc284185540b980931dd2d708848a
#: ../../topics/cache.txt:641
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

# 75a14a9efaab45798c3a344a5ea5ecd0
#: ../../topics/cache.txt:645
msgid "The low-level cache API"
msgstr ""

# 6f8569d007644e338efc5ba55849a901
#: ../../topics/cache.txt:649
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

# a4082d327986456e83f6fe525a1aa82c
#: ../../topics/cache.txt:652
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

# 8c101c734a2446ea8f00b8d8e6fc394b
#: ../../topics/cache.txt:659
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you "
"like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

# 785b9865090b4f019535b3f91fe8577c
#: ../../topics/cache.txt:667
msgid "Accessing the cache"
msgstr ""

# fadaf3a39faf48f89ff8582d08ee7bd9
#: ../../topics/cache.txt:669
msgid ""
"The cache module, ``django.core.cache``, has a ``cache`` object that's "
"automatically created from the ``'default'`` entry in the :setting:`CACHES` "
"setting::"
msgstr ""

# 1f3c249cd296439eb7bc1e4e74b44ba8
#: ../../topics/cache.txt:675
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, then you can use :"
"func:`django.core.cache.get_cache` to retrieve a cache object for any key::"
msgstr ""

# 08e68f327aa64d8a83aa717e53ecba50
#: ../../topics/cache.txt:681
msgid ""
"If the named key does not exist, :exc:`InvalidCacheBackendError` will be "
"raised."
msgstr ""

# 24fa131f61374bcb93c2b744e1bbfb9a
#: ../../topics/cache.txt:687
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

# 79ef146201574713a04de384ff07641e
#: ../../topics/cache.txt:693
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache."
msgstr ""

# ea2fd398f2ac4ff080c5853eb0cbb15b
#: ../../topics/cache.txt:698
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

# 71edf3002d514e2dbff2ac6ae597c3a9
#: ../../topics/cache.txt:705
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

# bd7218f3eb294edbbe8afd2d34b72ee7
#: ../../topics/cache.txt:709
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

# 6a5250ac34ed4d41ad40cedbb77db077
#: ../../topics/cache.txt:715
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

# ee5de625b246456db3253b3a4617a34b
#: ../../topics/cache.txt:724
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

# 8cca2c2beab84748bc85cf45085d5e0e
#: ../../topics/cache.txt:728
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

# 24d3777a7b9e4b2f8f423163d722bb83
#: ../../topics/cache.txt:738
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

# a0fcaa8cfda848cd8191db5347d5fcac
#: ../../topics/cache.txt:745
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

# 72026d3bdd0b4f9ea1c95fb88c3ca256
#: ../../topics/cache.txt:747
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

# 953559f61c2b4cb7a357a8e6305c607c
#: ../../topics/cache.txt:752
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

# 90a3066ef0374dc08f98ecc06f814d51
#: ../../topics/cache.txt:757
msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache.clear()"
"``.  Be careful with this; ``clear()`` will remove *everything* from the "
"cache, not just the keys set by your application. ::"
msgstr ""

# a9971f000bfc4fb6b8316c12746a796f
#: ../../topics/cache.txt:763
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will incremented or decremented by 1. Other increment/decrement "
"values can be specified by providing an argument to the increment/decrement "
"call. A ValueError will be raised if you attempt to increment or decrement a "
"nonexistent cache key.::"
msgstr ""

# 9f20d2f121d54eefaf88396b9e2310c5
#: ../../topics/cache.txt:782
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

# b7b461f179954fbca3856d1c61dca947
#: ../../topics/cache.txt:791
msgid "Cache key prefixing"
msgstr ""

# 337ded9614ee4df2b1882b553443d3a2
#: ../../topics/cache.txt:793
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

# faaa65933c304f768ecbed8f73b74745
#: ../../topics/cache.txt:799
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

# d3d93caddf55431cbd19028f864a1889
#: ../../topics/cache.txt:804
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

# 99b05958d4e04cc78ed888f35a91a85e
#: ../../topics/cache.txt:811
msgid "Cache versioning"
msgstr ""

# a44b9cacd1364db98101fa542bab5b1b
#: ../../topics/cache.txt:813
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

# 1c645a3cd95f41b2812e799ef713c832
#: ../../topics/cache.txt:818
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""

# d37c102e630f46a2af4f1c5143eb7e84
#: ../../topics/cache.txt:824
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. 예를 들어 ::"

# b56899473b4046cca7d5ed7e1e6a8bc6
#: ../../topics/cache.txt:838
msgid ""
"The version of a specific key can be incremented and decremented using the :"
"func:`incr_version()` and :func:`decr_version()` methods. This enables "
"specific keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

# 236cd6aacca84edf9e1ad8cb33f1f956
#: ../../topics/cache.txt:858
msgid "Cache key transformation"
msgstr ""

# 5278324fa55242569167d26aa645aa38
#: ../../topics/cache.txt:860
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

# da6e84f3df714ceeabafbc2779062acc
#: ../../topics/cache.txt:868
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

# 71fda590dc2d46548e0f4418d8a2e4da
#: ../../topics/cache.txt:872
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of :func:`make_key()` "
"above. If provided, this custom key function will be used instead of the "
"default key combining function."
msgstr ""

# a8134c6c24ea4ff2b455d20c5996982f
#: ../../topics/cache.txt:878
msgid "Cache key warnings"
msgstr ""

# 0fafcfbd2f6a49388618a8ce8396691b
#: ../../topics/cache.txt:880
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

# b6559127ed2d48c38b79d3ec0d72b2e2
#: ../../topics/cache.txt:887
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

# d936980f01a141ff804bc07e39fb652e
#: ../../topics/cache.txt:899
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

# 2ca662e59df349dd8bdcbdc2dff4d9cf
#: ../../topics/cache.txt:911
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

# 12bd88201a1b46ef9218911cb7b326cb
#: ../../topics/cache.txt:915
msgid "Upstream caches"
msgstr ""

# 19071d53844e431798a2e4825c0f04ac
#: ../../topics/cache.txt:917
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"upstream\" caches. These are systems that cache pages for users even "
"before the request reaches your Web site."
msgstr ""

# e65216c3dbb9488d99f4dc94f5f633ed
#: ../../topics/cache.txt:922
msgid "Here are a few examples of upstream caches:"
msgstr ""

# 44b3fac4089b400aa69004113fa5dbba
#: ../../topics/cache.txt:924
msgid ""
"Your ISP may cache certain pages, so if you requested a page from http://"
"example.com/, your ISP would send you the page without having to access "
"example.com directly. The maintainers of example.com have no knowledge of "
"this caching; the ISP sits between example.com and your Web browser, "
"handling all of the caching transparently."
msgstr ""

# 5bb22568dc6941dfafd0429547e62488
#: ../../topics/cache.txt:930
msgid ""
"Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""

# f8f654a08fb3470b8536c5626492ce07
#: ../../topics/cache.txt:935
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""

# b3ea07e1f19f48cca853c873688c7e60
#: ../../topics/cache.txt:940
msgid ""
"Upstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""

# 18b26c3afeb54e3bb6baec52f6249cb4
#: ../../topics/cache.txt:945
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP "
"would have his user-specific inbox page cached for subsequent visitors to "
"the site. That's not cool."
msgstr ""

# 91fb3cc451a94670a882cd3881a24878
#: ../../topics/cache.txt:951
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct upstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""

# 26ba1be453e749e5b3c071633eeeb4fb
#: ../../topics/cache.txt:959
msgid "Using Vary headers"
msgstr ""

# ba9bb83ca5d540e4a2dfa64a9aa53db3
#: ../../topics/cache.txt:961
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""

# b0a2a1575f2a4b68816ee2d857ecd713
#: ../../topics/cache.txt:966
msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means "
"every request to that URL will use the same cached version, regardless of "
"user-agent differences such as cookies or language preferences. However, if "
"this page produces different content based on some difference in request "
"headers -- such as a cookie, or a language, or a user-agent -- you'll need "
"to use the ``Vary`` header to tell caching mechanisms that the page output "
"depends on those things."
msgstr ""

# c5c4b8f8708246d587122b17c413e058
#: ../../topics/cache.txt:974
msgid ""
"To do this in Django, use the convenient ``vary_on_headers`` view decorator, "
"like so::"
msgstr ""

# 1f91a2060e824876b8c3f7a7155f7513
#: ../../topics/cache.txt:983
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

# d22a4cf85736431aa388aca7a9ff3769
#: ../../topics/cache.txt:986
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like ``response"
"['Vary'] = 'user-agent'``) is that the decorator *adds* to the ``Vary`` "
"header (which may already exist), rather than setting it from scratch and "
"potentially overriding anything that was already in there."
msgstr ""

# 3dade0730314440ab4ff65c2bca73ad2
#: ../../topics/cache.txt:992
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

# 684299f8bf394af896e8a2fc63c1c366
#: ../../topics/cache.txt:998
msgid ""
"This tells upstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

# 6f43cec9b4dc4a6d881c942910b85e79
#: ../../topics/cache.txt:1004
msgid ""
"Because varying on cookie is so common, there's a ``vary_on_cookie`` "
"decorator. These two views are equivalent::"
msgstr ""

# aea3a6b007044c45ad92cbe4ca0c8a7d
#: ../../topics/cache.txt:1015
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

# 9aec4782062c4a53835b22138356f3a4
#: ../../topics/cache.txt:1018
msgid ""
"You can also use a helper function, ``django.utils.cache."
"patch_vary_headers``, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""
"You can also use a helper function, ``django.utils.cache."
"patch_vary_headers``, directly. This function sets, or adds to, the ``Vary "
"header``. 예를 들어 ::"

# 169c4c4a9db647e1a766f99d09868a3a
#: ../../topics/cache.txt:1029
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

# 7b93f36d600f4c71babf5587c1855554
#: ../../topics/cache.txt:1033
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

# 38c1c975e89a4342b39461c6f1d38894
#: ../../topics/cache.txt:1038
msgid "Controlling cache: Using other headers"
msgstr ""

# 2d2f56edab7d41afad1aca2879320cb9
#: ../../topics/cache.txt:1040
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""

# 818c51eb85574f1ebc40e07b10a5a20d
#: ../../topics/cache.txt:1043
msgid ""
"A user usually faces two kinds of caches: his or her own browser cache (a "
"private cache) and his or her provider's cache (a public cache). A public "
"cache is used by multiple users and controlled by someone else. This poses "
"problems with sensitive data--you don't want, say, your bank account number "
"stored in a public cache. So Web applications need a way to tell caches "
"which data is private and which is public."
msgstr ""

# 5f0eb6218f644ff7a4a4c44e83c3e83e
#: ../../topics/cache.txt:1050
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

# 3ac0dc6cf2db4f7c86f3994cc87bbea8
#: ../../topics/cache.txt:1059
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""

# 48cb9fc6e93c49c78a67919ababe969f
#: ../../topics/cache.txt:1062
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses "
"``patch_cache_control``, the manual way to modify the cache control header "
"(it is internally called by the ``cache_control`` decorator)::"
msgstr ""

# d79194d448b24680966c8e4608afeec9
#: ../../topics/cache.txt:1084
msgid ""
"There are a few other ways to control cache parameters. For example, HTTP "
"allows applications to do the following:"
msgstr ""

# a9a628d8e57441dfaa4a699875f6451b
#: ../../topics/cache.txt:1087
msgid "Define the maximum time a page should be cached."
msgstr ""

# cb43eeb49e994adfb8ad98e85b781e85
#: ../../topics/cache.txt:1089
msgid ""
"Specify whether a cache should always check for newer versions, only "
"delivering the cached content when there are no changes. (Some caches might "
"deliver cached content even if the server page changed, simply because the "
"cache copy isn't yet expired.)"
msgstr ""

# c7346773512a482c99dd1ea31854a775
#: ../../topics/cache.txt:1094
msgid ""
"In Django, use the ``cache_control`` view decorator to specify these cache "
"parameters. In this example, ``cache_control`` tells caches to revalidate "
"the cache on every access and to store cached versions for, at most, 3,600 "
"seconds::"
msgstr ""

# 3ee3a4610ac34a70b6ede19629c0c0de
#: ../../topics/cache.txt:1104
msgid ""
"Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. "
"Here's a full list:"
msgstr ""

# 600bdec063ed467eb11456130525bb67
#: ../../topics/cache.txt:1107
msgid "``public=True``"
msgstr ""

# cc71d83932d94026a900894a432bf04c
#: ../../topics/cache.txt:1108
msgid "``private=True``"
msgstr ""

# d855b09016044af9842d444f8f056dfe
#: ../../topics/cache.txt:1109
msgid "``no_cache=True``"
msgstr ""

# 22dd232a76b542a0807c7220a4a3ddcf
#: ../../topics/cache.txt:1110
msgid "``no_transform=True``"
msgstr ""

# 131fe10fb74a48869c2c008bb036afbf
#: ../../topics/cache.txt:1111
msgid "``must_revalidate=True``"
msgstr ""

# 59fc262ec2044931b4c95a8b4307c780
#: ../../topics/cache.txt:1112
msgid "``proxy_revalidate=True``"
msgstr ""

# b7c224dfa77e4a9b801639c10dd34673
#: ../../topics/cache.txt:1113
msgid "``max_age=num_seconds``"
msgstr ""

# a8ce036adb6449dd9450b0af34d8067d
#: ../../topics/cache.txt:1114
msgid "``s_maxage=num_seconds``"
msgstr ""

# 3d779de482d74f3580f59a0626b8d366
#: ../../topics/cache.txt:1116
msgid ""
"For explanation of Cache-Control HTTP directives, see the `Cache-Control "
"spec`_."
msgstr ""

# a8a56158f72641308b47e0b6c16af623
#: ../../topics/cache.txt:1118
msgid ""
"(Note that the caching middleware already sets the cache header's max-age "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you "
"use a custom ``max_age`` in a ``cache_control`` decorator, the decorator "
"will take precedence, and the header values will be merged correctly.)"
msgstr ""

# 2f2f9cf30388467ba46fc0a9cd503212
#: ../../topics/cache.txt:1123
msgid ""
"If you want to use headers to disable caching altogether, ``django.views."
"decorators.cache.never_cache`` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

# 2b32170c948a4a1d9f6baa64d71d0525
#: ../../topics/cache.txt:1137
msgid "Other optimizations"
msgstr ""

# 4fc37dde59264d1ca4673bbd87bb7533
#: ../../topics/cache.txt:1139
msgid ""
"Django comes with a few other pieces of middleware that can help optimize "
"your site's performance:"
msgstr ""

# 8bb46b9937434eb99b31a8107d61dc2a
#: ../../topics/cache.txt:1142
msgid ""
"``django.middleware.http.ConditionalGetMiddleware`` adds support for modern "
"browsers to conditionally GET responses based on the ``ETag`` and ``Last-"
"Modified`` headers."
msgstr ""

# b90191c911fd42f5852e7b92cd1258b8
#: ../../topics/cache.txt:1146
msgid ""
":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all "
"modern browsers, saving bandwidth and transfer time."
msgstr ""

# 2cb0b3060fb64a1dad2d1d064b00dc74
#: ../../topics/cache.txt:1150
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

# 215c9774f07f497ca5f52bc694f00c3a
#: ../../topics/cache.txt:1152
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the "
"cache middleware needs to know which headers by which to vary the cache "
"storage. Middleware always adds something to the ``Vary`` response header "
"when it can."
msgstr ""

# f850bc3372b7427e80d64ae1458170ca
#: ../../topics/cache.txt:1157
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

# e6ffb343a155451da0bc9c125f80bc43
#: ../../topics/cache.txt:1163
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

# c523576397594259bec32a5bdf84649c
#: ../../topics/cache.txt:1164
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

# 05362f4e641a469d8963f23fe8150d3e
#: ../../topics/cache.txt:1165
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

# 80fc8ffc6eb24ad99c70ba554e22da7e
#: ../../topics/cache.txt:1167
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""

# e19dca97521546b39ff2342db3903701
#: ../../topics/class-based-views/generic-display.txt:5
msgid "Class-based generic views"
msgstr ""

# ee021ee2c46a4e7b8e6f98f2b76d8c15
#: ../../topics/class-based-views/generic-display.txt:7
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 7f757617fa12443191e6ff08b65da9c5
#: ../../topics/class-based-views/generic-display.txt:12
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

# bcaa660b4cef4e43ba36bb83e23352bc
#: ../../topics/class-based-views/generic-display.txt:17
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

# d6b707abf56843248c0d8599be37b47a
#: ../../topics/class-based-views/generic-display.txt:21
msgid "Django ships with generic views to do the following:"
msgstr ""

# 14c6cc4cc35147b585329af0a245e6be
#: ../../topics/class-based-views/generic-display.txt:23
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# dd7d6a4247f24341b43fa4d567776b89
#: ../../topics/class-based-views/generic-display.txt:28
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""

# 939f1f7993674ed0bd8d3d9edb5ad069
#: ../../topics/class-based-views/generic-display.txt:31
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

# a4b765c151e64721b1e73dc2eaa064e5
#: ../../topics/class-based-views/generic-display.txt:34
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

# 5d7083bf5dbb4bbaa7bc08a80b9a0c12
#: ../../topics/class-based-views/generic-display.txt:39
msgid "Extending generic views"
msgstr ""

# aec2120ab85e4e3c88ac952459d9bc79
#: ../../topics/class-based-views/generic-display.txt:41
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

# f53bcc7e859e43438466919d01fd680c
#: ../../topics/class-based-views/generic-display.txt:47
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

# 79d0bd82af9a48148bcd4a74e71b4e36
#: ../../topics/class-based-views/generic-display.txt:53
msgid ""
"That said, generic views will have a limit. If you find you're struggling to "
"implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""

# da28d61afef5424e8508a9eafe7801df
#: ../../topics/class-based-views/generic-display.txt:58
msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""

# ff2da66a2ddb4d6ab16ab1643d33d259
#: ../../topics/class-based-views/generic-display.txt:63
msgid "Generic views of objects"
msgstr ""

# 7d9559d2b8bc41deaca6869ce4e1aba8
#: ../../topics/class-based-views/generic-display.txt:65
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views "
"of objects incredibly easy."
msgstr ""

# f7eee66e05b241c99387173937c4da47
#: ../../topics/class-based-views/generic-display.txt:71
msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""

# 85ab63de46134c988fed1ff4f6937f96
#: ../../topics/class-based-views/generic-display.txt:76
msgid "We'll be using these models::"
msgstr ""

# 4921ecf5f56b450bad3ab90eab86a267
#: ../../topics/class-based-views/generic-display.txt:101
msgid "Now we need to define a view::"
msgstr ""

# 55485c62946c474688ebb66adf0011e0
#: ../../topics/class-based-views/generic-display.txt:110
msgid "Finally hook that view into your urls::"
msgstr ""

# 1bfd1a1953be4ab9838a5cca90fe7448
#: ../../topics/class-based-views/generic-display.txt:120
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the "
"\"books\" part comes from the name of the app that defines the model, while "
"the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

# 08bc0cd1bb3c451a8b4e3ed080b83544
#: ../../topics/class-based-views/generic-display.txt:130
msgid ""
"Thus, when (for example) the :class:`django.template.loaders.app_directories."
"Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, a "
"template location could be: /path/to/project/books/templates/books/"
"publisher_list.html"
msgstr ""

# e802329a15ad46878946ac56d680a2cd
#: ../../topics/class-based-views/generic-display.txt:137
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following::"
msgstr ""

# 39cab060663c41a2bb6d968738284bf0
#: ../../topics/class-based-views/generic-display.txt:152
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic "
"views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""

# 7c745eff09c34473b733a1525253c3de
#: ../../topics/class-based-views/generic-display.txt:160
msgid "Making \"friendly\" template contexts"
msgstr ""

# 5ae6077f5b614da7bafcd5eb2e267e78
#: ../../topics/class-based-views/generic-display.txt:164
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

# d63a7a98424142d780732a2bf1de3323
#: ../../topics/class-based-views/generic-display.txt:169
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lower cased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""

# f47aa942799e446ba84365a4f5ed8291
#: ../../topics/class-based-views/generic-display.txt:175
msgid ""
"If the this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""

# 0f7f4cdcb3534d1ca1ef844eee7c965d
#: ../../topics/class-based-views/generic-display.txt:187
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# d74990048ad749d0881911a450aa90dc
#: ../../topics/class-based-views/generic-display.txt:192
msgid "Adding extra context"
msgstr ""

# 44dddb74a2c54a9f82855b29adcc85e3
#: ../../topics/class-based-views/generic-display.txt:194
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The :class:`~django.views.generic.detail."
"DetailView` generic view provides the publisher to the context, but how do "
"we get additional information in that template."
msgstr ""

# 55c3d0a538364b19be53bd809cadb799
#: ../../topics/class-based-views/generic-display.txt:201
msgid ""
"However, there is; you can subclass :class:`~django.views.generic.detail."
"DetailView` and provide your own implementation of the ``get_context_data`` "
"method. The default implementation of this that comes with :class:`~django."
"views.generic.detail.DetailView` simply adds in the object being displayed "
"to the template, but you can override it to send more::"
msgstr ""

# e3aee174495742afa867565eb446a82d
#: ../../topics/class-based-views/generic-display.txt:225
msgid ""
"Generally, get_context_data will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"get_context_data on the super class. When no two classes try to define the "
"same key, this will give the expected results. However if any class attempts "
"to override a key after parent classes have set it (after the call to "
"super), any children of that class will also need to explictly set it after "
"super if they want to be sure to override all parents. If you're having "
"trouble, review the method resolution order of your view."
msgstr ""

# 18992045aeae46ffa87e9c16afd07e4b
#: ../../topics/class-based-views/generic-display.txt:238
msgid "Viewing subsets of objects"
msgstr ""

# 7a0dfe4146054a75afd57d02252d8651
#: ../../topics/class-based-views/generic-display.txt:240
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

# 7a3cff93502e43b9add3d181a646db79
#: ../../topics/class-based-views/generic-display.txt:256
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects "
"that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`QuerySet` objects, and see the :doc:`class-based "
"views reference </ref/class-based-views/index>` for the complete details)."
msgstr ""

# 11196c00359046d8903656d40e89e011
#: ../../topics/class-based-views/generic-display.txt:264
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

# e5e301e016e5431a98e1c2098acddebb
#: ../../topics/class-based-views/generic-display.txt:274
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique::"
msgstr ""

# a33c368eb43a4f2fb9081b1c7cafc22e
#: ../../topics/class-based-views/generic-display.txt:288
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""

# e9590dc0e66444a0a218c1caac196196
#: ../../topics/class-based-views/generic-display.txt:292
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

# c183f151e9b04c7e83c66f20b3763be5
#: ../../topics/class-based-views/generic-display.txt:299
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""

# 258c356a4d5e472c824c33e333976f6b
#: ../../topics/class-based-views/generic-display.txt:307
msgid "Dynamic filtering"
msgstr ""

# e17f5a4ea65c41689eb196cf3dd1505a
#: ../../topics/class-based-views/generic-display.txt:309
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

# 8363e12fd1ef4888827d63f0c78e1a5e
#: ../../topics/class-based-views/generic-display.txt:314
msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.detail.ListView."
"get_queryset` method we can override. Previously, it has just been returning "
"the value of the ``queryset`` attribute, but now we can add more logic."
msgstr ""

# 46c9bc43a3194543b89b62a85a297a32
#: ../../topics/class-based-views/generic-display.txt:319
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

# 51315bc57e5a4ed5a42be708fd144112
#: ../../topics/class-based-views/generic-display.txt:324
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

# fbe67b39d6ec42d4986c9cc500ebed18
#: ../../topics/class-based-views/generic-display.txt:333
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

# e9466e277f374b7696498c8c641adbcf
#: ../../topics/class-based-views/generic-display.txt:348
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection; "
"if we wanted, we could use ``self.request.user`` to filter using the current "
"user, or other more complex logic."
msgstr ""

# 30ada2de273941019e7c1bfd13081914
#: ../../topics/class-based-views/generic-display.txt:352
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

# 4a51e4efb18149eab64dba3d589a773e
#: ../../topics/class-based-views/generic-display.txt:367
msgid "Performing extra work"
msgstr ""

# 120f0fd3b3fb45338eb7e278ed17237b
#: ../../topics/class-based-views/generic-display.txt:369
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

# c4452ad4d3de49fe9848f32c443d8b05
#: ../../topics/class-based-views/generic-display.txt:372
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` object that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

# 4622e0b1a52c487d9bbf60142b08ae00
#: ../../topics/class-based-views/generic-display.txt:384
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# 5b85a7a79d8b44f792c59cdca7673082
#: ../../topics/class-based-views/generic-display.txt:388
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""

# caa037122a7241749c49b0d25bd5386d
#: ../../topics/class-based-views/generic-display.txt:398
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

# 6e13407ff6694bada9679b3e7debe762
#: ../../topics/class-based-views/generic-display.txt:421
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""

# b48431d7927e4a7fb408b76862393eef
#: ../../topics/class-based-views/generic-display.txt:425
msgid ""
"If you want to call the group something else, you can set ``pk_url_kwarg`` "
"on the view. More details can be found in the reference for :class:`~django."
"views.generic.detail.DetailView`"
msgstr ""

# 74a1e8d306dd4172ab09e6ea29007a61
#: ../../topics/class-based-views/generic-editing.txt:2
msgid "Form handling with class-based views"
msgstr ""

# 1f1c0b4e3b294b6f8928e5a5a81e9a52
#: ../../topics/class-based-views/generic-editing.txt:4
msgid "Form processing generally has 3 paths:"
msgstr ""

# b097c8d254b6407d9548c1dbaccc03d5
#: ../../topics/class-based-views/generic-editing.txt:6
msgid "Initial GET (blank or prepopulated form)"
msgstr ""

# e1fc1344a1ac4770a4702857d7600921
#: ../../topics/class-based-views/generic-editing.txt:7
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

# 1a1d4eecb5f3447ea0e63dd6ebc98522
#: ../../topics/class-based-views/generic-editing.txt:8
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

# 996225f2fd754628ace56ebf63e995c9
#: ../../topics/class-based-views/generic-editing.txt:10
msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""

# 3a65cef259b14fe88d2f9f8e36c7f303
#: ../../topics/class-based-views/generic-editing.txt:16
msgid "Basic Forms"
msgstr ""

# d88843edaefa400985da6efdfa5f783e
#: ../../topics/class-based-views/generic-editing.txt:18
msgid "Given a simple contact form::"
msgstr ""

# e30ba6e6bb1f409fbc3149f220db3698
#: ../../topics/class-based-views/generic-editing.txt:31
msgid "The view can be constructed using a FormView::"
msgstr ""

# 8a773c659820465fa8ae99dcfbb1b7df
# fe61515416a94c3d9b3bdfc401171abd
# ebac472eee6a44b094d8b7c1099f7947
#: ../../topics/class-based-views/generic-editing.txt:48
#: ../../topics/http/urls.txt:79 ../../topics/i18n/translation.txt:1435
msgid "Notes:"
msgstr ""

# dbc0188957814b6c927b8144aa70a668
#: ../../topics/class-based-views/generic-editing.txt:50
msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here"
msgstr ""

# c2b8693a033741f890026c0739d6c95f
#: ../../topics/class-based-views/generic-editing.txt:54
msgid ""
"The default implementation for :meth:`~django.views.generic.edit.FormView."
"form_valid` simply redirects to the :attr:`success_url`"
msgstr ""

# 3a49093d744542dcbb0e5e6b7a128a97
#: ../../topics/class-based-views/generic-editing.txt:59
msgid "Model Forms"
msgstr ""

# a60bef7a018849ff9037e35abaca1191
#: ../../topics/class-based-views/generic-editing.txt:61
msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`ModelForm`, so long as they can work out "
"which model class to use:"
msgstr ""

# 098a46a51de84a4fb09939b161f1582a
#: ../../topics/class-based-views/generic-editing.txt:65
msgid "If the :attr:`model` attribute is given, that model class will be used"
msgstr ""

# 709069c86eb34a6ba5e096a157b95a88
#: ../../topics/class-based-views/generic-editing.txt:66
msgid ""
"If :meth:`get_object()` returns an object, the class of that object will be "
"used"
msgstr ""

# b9d1dc4c703e4e968e758a6eb1a01f8e
#: ../../topics/class-based-views/generic-editing.txt:68
msgid ""
"If a :attr:`queryset` is given, the model for that queryset will be used"
msgstr ""

# 44c396e134de4229b37c5826fec499c6
#: ../../topics/class-based-views/generic-editing.txt:70
msgid ""
"Model form views provide a :meth:`form_valid()` implementation that saves "
"the model automatically.  You can override this if you have any special "
"requirements; see below for examples."
msgstr ""

# e2e7e6649e3d45b9bcc61df7847c3af1
#: ../../topics/class-based-views/generic-editing.txt:74
msgid ""
"You don't even need to provide a attr:`success_url` for :class:`~django."
"views.generic.edit.CreateView` or :class:`~django.views.generic.edit."
"UpdateView` - they will use :meth:`get_absolute_url()` on the model object "
"if available."
msgstr ""

# a8645cc47b4a4008a99c580712fc5fc7
#: ../../topics/class-based-views/generic-editing.txt:79
msgid ""
"If you want to use a custom :class:`ModelForm` (for instance to add extra "
"validation) simply set :attr:`~django.views.generic.edit.FormMixin."
"form_class` on your view."
msgstr ""

# 245de00ff81045e2b7503deca1588f42
#: ../../topics/class-based-views/generic-editing.txt:84
msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`form_class` may be a :class:`ModelForm`."
msgstr ""

# 21ab5542b1b148699179f682174b11cd
#: ../../topics/class-based-views/generic-editing.txt:87
msgid ""
"First we need to add :meth:`get_absolute_url()` to our :class:`Author` class:"
msgstr ""

# 561d33cfc65a493fb52f1c77b63642fe
#: ../../topics/class-based-views/generic-editing.txt:102
msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves::"
msgstr ""

# cf83637c5a9442a5adfae20584fcfd6d
#: ../../topics/class-based-views/generic-editing.txt:122
msgid ""
"We have to use :func:`~django.core.urlresolvers.reverse_lazy` here, not just "
"``reverse`` as the urls are not loaded when the file is imported."
msgstr ""

# 7a3b7c5706d04735a3907b462c793ad9
#: ../../topics/class-based-views/generic-editing.txt:125
msgid "Finally, we hook these new views into the URLconf::"
msgstr ""

# da25c941c18d43078a1e65f5ac094fbe
#: ../../topics/class-based-views/generic-editing.txt:140
msgid ""
"These views inherit :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_prefix` to construct "
"the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"based on the model."
msgstr ""

# 1e821685d5dc4104904ce6e5bdac3011
#: ../../topics/class-based-views/generic-editing.txt:146
msgid "In this example:"
msgstr ""

# 2a14879ff95a4284ab61374977bf30ce
#: ../../topics/class-based-views/generic-editing.txt:148
msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

# 1576b36b7f7e4430bb533c47a161f394
#: ../../topics/class-based-views/generic-editing.txt:149
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

# d76d8630ec1e4aa2a056c84ce28ef3ec
#: ../../topics/class-based-views/generic-editing.txt:151
msgid ""
"If you wish to have separate templates for :class:`CreateView` and :"
"class:1UpdateView`, you can set either :attr:`template_name` or :attr:"
"`template_name_suffix` on your view class."
msgstr ""

# 4e0372d507054309a6a001f40d932fb6
#: ../../topics/class-based-views/generic-editing.txt:156
msgid "Models and request.user"
msgstr ""

# 4b1050a249434ceca4226c04c0d244ac
#: ../../topics/class-based-views/generic-editing.txt:158
msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`ModelForm` to do this. First, add the foreign key "
"relation to the model::"
msgstr ""

# 8373e0f5142246809a417af65065e56c
#: ../../topics/class-based-views/generic-editing.txt:172
msgid ""
"Create a custom :class:`ModelForm` in order to exclude the ``created_by`` "
"field and prevent the user from editing it:"
msgstr ""

# 51eae2ef0e3347ef8206a7d9461ec5b6
#: ../../topics/class-based-views/generic-editing.txt:186
msgid ""
"In the view, use the custom :attr:`form_class` and override :meth:`form_valid"
"()` to add the user::"
msgstr ""

# 513b6748ec6c487ca840c75ea465a14a
#: ../../topics/class-based-views/generic-editing.txt:202
msgid ""
"Note that you'll need to :ref:`decorate this view<decorating-class-based-"
"views>` using :func:`~django.contrib.auth.decorators.login_required`, or "
"alternatively handle unauthorised users in the :meth:`form_valid()`."
msgstr ""

# 6770fd0d40d14360a41f9538852494c5
#: ../../topics/class-based-views/generic-editing.txt:208
msgid "AJAX example"
msgstr ""

# ff3b015d810a49d4828ab4d87c897511
#: ../../topics/class-based-views/generic-editing.txt:210
msgid ""
"Here is a simple example showing how you might go about implementing a form "
"that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

# 8f5aa0b61a8747809a7d7099705bc64e
#: ../../topics/class-based-views/index.txt:3
msgid "Class-based views"
msgstr ""

# 2e0d01e484154d82a04f7bc828981d98
#: ../../topics/class-based-views/index.txt:5
msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes "
"which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic "
"views for simple tasks which we'll get to later, but you may want to design "
"your own structure of reusable views which suits your use case. For full "
"details, see the :doc:`class-based views reference documentation</ref/class-"
"based-views/index>`."
msgstr ""

# 5d947b6b7e404e539a511582267bb6f2
#: ../../topics/class-based-views/index.txt:22
msgid "Basic examples"
msgstr ""

# 18ed7602e6674d428260f199cdb5c627
#: ../../topics/class-based-views/index.txt:24
msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the :class:`~django.views.generic.base."
"View` class, which handles linking the view in to the URLs, HTTP method "
"dispatching and other simple features. :class:`~django.views.generic.base."
"RedirectView` is for a simple HTTP redirect, and :class:`~django.views."
"generic.base.TemplateView` extends the base class to make it also render a "
"template."
msgstr ""

# a5003b63f5dc4443af34d01d7cb39718
#: ../../topics/class-based-views/index.txt:33
msgid "Simple usage in your URLconf"
msgstr ""

# 68a33fe3273347ceabd92bc2333a6754
#: ../../topics/class-based-views/index.txt:35
msgid ""
"The simplest way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few simple attributes on a class-based "
"view, you can simply pass them into the :meth:`~django.views.generic.base."
"View.as_view` method call itself::"
msgstr ""

# 190bbfa0788740c48382bc590478d172
#: ../../topics/class-based-views/index.txt:47
msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will "
"override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on :class:`~django.views.generic.base."
"RedirectView`."
msgstr ""

# 391909ef31054787a0e51cb91632bf98
#: ../../topics/class-based-views/index.txt:54
msgid "Subclassing generic views"
msgstr ""

# ae3114dde60d477b878c96482ebb68bb
#: ../../topics/class-based-views/index.txt:56
msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - :class:"
"`~django.views.generic.base.TemplateView` - so we can just subclass it, and "
"override the template name::"
msgstr ""

# b53f5383ec6b45ac800b35f09cf4bea6
#: ../../topics/class-based-views/index.txt:70
msgid ""
"Then we just need to add this new view into our URLconf. `~django.views."
"generic.base.TemplateView` is a class, not a function, so we point the URL "
"to the :meth:`~django.views.generic.base.View.as_view` class method instead, "
"which provides a function-like entry to class-based views::"
msgstr ""

# b4d0a87925a5487ea0cd7b02a55939a9
#: ../../topics/class-based-views/index.txt:84
msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class based views</topics/class-based-views/"
"generic-display>`."
msgstr ""

# 50149b6a11884b7eb7a5176a79dc2c01
#: ../../topics/class-based-views/index.txt:90
msgid "Supporting other HTTP methods"
msgstr ""

# 0780241a1cbc4d1c972d594116750fb5
#: ../../topics/class-based-views/index.txt:92
msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book "
"data for the books published since last visit. But if no new books appeared "
"since then, it is a waste of CPU time and bandwidth to fetch the books from "
"the database, render a full response and send it to the client. It might be "
"preferable to ask the API when the most recent book was published."
msgstr ""

# cd398d9f53d5475f98dad5045c12eccd
#: ../../topics/class-based-views/index.txt:99
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

# ff7a1adb2cd045e888dedd3ba9d8bdc0
#: ../../topics/class-based-views/index.txt:108
msgid "And the view::"
msgstr ""

# d284e76d5deb4bcfbb13789ad781552a
#: ../../topics/class-based-views/index.txt:124
msgid ""
"If the view is accessed from a ``GET`` request, a plain-and-simple object "
"list is returned in the response (using ``book_list.html`` template). But if "
"the client issues a ``HEAD`` request, the response has an empty body and the "
"``Last-Modified`` header indicates when the most recent book was published. "
"Based on this information, the client may or may not download the full "
"object list."
msgstr ""

# 6563cfd449e44b1dbe1932da825cb775
#: ../../topics/class-based-views/index.txt:132
msgid "Decorating class-based views"
msgstr ""

# b2c5b01b3d8d48aea49b2bb2309a958c
#: ../../topics/class-based-views/index.txt:136
msgid ""
"Since class-based views aren't functions, decorating them works differently "
"depending on if you're using ``as_view`` or creating a subclass."
msgstr ""

# 8dcb9f4522694c90bc8b1cd1a2da3195
#: ../../topics/class-based-views/index.txt:140
msgid "Decorating in URLconf"
msgstr ""

# 793c56fec97340fa9c30c01a6fcffe84
#: ../../topics/class-based-views/index.txt:142
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

# bd0bed229a714ec38f059d04127d2ad3
#: ../../topics/class-based-views/index.txt:156
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

# 429d9f071f30410ebeb8d7b03e6e8c94
#: ../../topics/class-based-views/index.txt:163
msgid "Decorating the class"
msgstr ""

# db012fd349bb43c39eb1cc40e3f36c04
#: ../../topics/class-based-views/index.txt:165
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

# 12664e38bf4f452a8aa9d9abe2fea467
#: ../../topics/class-based-views/index.txt:169
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. 예를 들어 ::"

# 0e631b717ffa4e9cbdb63c07b2927983
#: ../../topics/class-based-views/index.txt:186
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

# 340a5038a5ba417db31327abb2323ad5
#: ../../topics/class-based-views/index.txt:191
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""

# 957468395a1e44498e829cb4d9721425
#: ../../topics/class-based-views/mixins.txt:3
msgid "Using mixins with class-based views"
msgstr ""

# 9cd3cde14a834b7e8047392b160ef566
#: ../../topics/class-based-views/mixins.txt:7
msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based "
"views<index>` is advised before exploring these techniques."
msgstr ""

# ddae78d01a1a4113a03d3d9573b99043
#: ../../topics/class-based-views/mixins.txt:11
msgid ""
"Django's built-in class-based views provide a lot of functionality, but some "
"of it you may want to use separately. For instance, you may want to write a "
"view that renders a template to make the HTTP response, but you can't use :"
"class:`~django.views.generic.base.TemplateView`; perhaps you need to render "
"a template only on `POST`, with `GET` doing something else entirely. While "
"you could use :class:`~django.template.response.TemplateResponse` directly, "
"this will likely result in duplicate code."
msgstr ""

# 4dc55426d60d43abb7fd633312fac5c5
#: ../../topics/class-based-views/mixins.txt:21
msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in "
"the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the mixins</"
"ref/class-based-views/mixins>`."
msgstr ""

# 6a9dc99863ea4873920442f7d7bb5e95
#: ../../topics/class-based-views/mixins.txt:29
msgid "Context and template responses"
msgstr ""

# 21cedcce418642b6be45c4b57c69e8ee
#: ../../topics/class-based-views/mixins.txt:31
msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""

# 888eff97457149a299ff475cd9b4b779
#: ../../topics/class-based-views/mixins.txt:35
msgid ""
"Every built in view which returns a :class:`~django.template.response."
"TemplateResponse` will call the :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that :class:"
"`TemplateResponseMixin` provides. Most of the time this will be called for "
"you (for instance, it is called by the ``get()`` method implemented by both :"
"class:`~django.views.generic.base.TemplateView` and :class:`~django.views."
"generic.base.DetailView`); similarly, it's unlikely that you'll need to "
"override it, although if you want your response to return something not "
"rendered via a Django template then you'll want to do it. For an example of "
"this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""

# 2eac7853d3d440efab4e483a45aa245a
#: ../../topics/class-based-views/mixins.txt:47
msgid ""
"``render_to_response`` itself calls :meth:`~django.views.generic.base."
"TemplateResponseMixin.get_template_names`, which by default will just look "
"up :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on "
"the class-based view; two other mixins (:class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`) override this to provide more flexible "
"defaults when dealing with actual objects."
msgstr ""

# 631b3cf92fed4428850dc254ddb80a2b
#: ../../topics/class-based-views/mixins.txt:61
msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including :class:`TemplateResponseMixin` above), should call :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data` passing any data "
"they want to ensure is in there as keyword arguments. ``get_context_data`` "
"returns a dictionary; in :class:`ContextMixin` it simply returns its keyword "
"arguments, but it is common to override this to add more members to the "
"dictionary."
msgstr ""

# 92cc673d25664ebb8d4d90990a357b33
#: ../../topics/class-based-views/mixins.txt:70
msgid "Building up Django's generic class-based views"
msgstr ""

# a0b2b5461767466799cca5f0a40017e2
#: ../../topics/class-based-views/mixins.txt:72
msgid ""
"Let's look at how two of Django's generic class-based views are built out of "
"mixins providing discrete functionality. We'll consider :class:`~django."
"views.generic.detail.DetailView`, which renders a \"detail\" view of an "
"object, and :class:`~django.views.generic.list.ListView`, which will render "
"a list of objects, typically from a queryset, and optionally paginate them. "
"This will introduce us to four mixins which between them provide useful "
"functionality when working with either a single Django object, or multiple "
"objects."
msgstr ""

# c4eeca1efcc64d6e806025040d54b0fd
#: ../../topics/class-based-views/mixins.txt:82
msgid ""
"There are also mixins involved in the generic edit views (:class:`~django."
"views.generic.edit.FormView`, and the model-specific views :class:`~django."
"views.generic.edit.CreateView`, :class:`~django.views.generic.edit."
"UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the "
"date-based generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""

# 3af49075abe64f48917ab8d05a8a6509
#: ../../topics/class-based-views/mixins.txt:92
msgid "DetailView: working with a single Django object"
msgstr ""

# 0a893f5cd3ad43aca14d5d43dc0d9502
#: ../../topics/class-based-views/mixins.txt:94
msgid ""
"To show the detail of an object, we basically need to do two things: we need "
"to look up the object and then we need to make a :class:`TemplateResponse` "
"with a suitable template, and that object as context."
msgstr ""

# 24f1a006637a48fda6cf7e6a628df7fc
#: ../../topics/class-based-views/mixins.txt:99
msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides "
"a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views."
"generic.detail.SingleObjectMixin.queryset` attribute if that's provided). :"
"class:`SingleObjectMixin` also overrides :meth:`~django.views.generic.base."
"ContextMixin.get_context_data`, which is used across all Django's built in "
"class-based views to supply context data for template renders."
msgstr ""

# 89144cf22a044bf6b104e3798c596e2c
#: ../../topics/class-based-views/mixins.txt:114
msgid ""
"To then make a :class:`TemplateResponse`, :class:`DetailView` uses :class:"
"`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, which "
"extends :class:`~django.views.generic.base.TemplateResponseMixin`, "
"overriding :meth:`get_template_names()` as discussed above. It actually "
"provides a fairly sophisticated set of options, but the main one that most "
"people are going to use is ``<app_label>/<object_name>_detail.html``. The "
"``_detail`` part can be changed by setting :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a subclass "
"to something else. (For instance, the :doc:`generic edit views<generic-"
"editing>` use ``_form`` for create and update views, and ``_confirm_delete`` "
"for delete views.)"
msgstr ""

# 3488bbfbafdd46eba70d56b2dae5e477
#: ../../topics/class-based-views/mixins.txt:129
msgid "ListView: working with many Django objects"
msgstr ""

# 1ee64fcccc6b4a2d958e884176e5149f
#: ../../topics/class-based-views/mixins.txt:131
msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a :class:`QuerySet`, and then we need "
"to make a :class:`TemplateResponse` with a suitable template using that list "
"of objects."
msgstr ""

# bc801c8788734cc086714e3dcb31dc19
#: ../../topics/class-based-views/mixins.txt:136
msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses :class:"
"`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:"
"`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike "
"with :class:`SingleObjectMixin`, there's no need to key off parts of the URL "
"to figure out the queryset to work with, so the default just uses the :attr:"
"`~django.views.generic.list.MultipleObjectMixin.queryset` or :attr:`~django."
"views.generic.list.MultipleObjectMixin.model` attribute on the view class. A "
"common reason to override :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` here would be to dynamically vary the "
"objects, such as depending on the current user or to exclude posts in the "
"future for a blog."
msgstr ""

# 59b50e3093c448dca6effe7970798ba1
#: ../../topics/class-based-views/mixins.txt:152
msgid ""
":class:`MultipleObjectMixin` also overrides :meth:`~django.views.generic."
"base.ContextMixin.get_context_data` to include appropriate context variables "
"for pagination (providing dummies if pagination is disabled). It relies on "
"``object_list`` being passed in as a keyword argument, which :class:"
"`ListView` arranges for it."
msgstr ""

# 10708a9f07004c7faa728db7be2999c1
#: ../../topics/class-based-views/mixins.txt:159
msgid ""
"To make a :class:`TemplateResponse`, :class:`ListView` then uses :class:"
"`~django.views.generic.list.MultipleObjectTemplateResponseMixin`; as with :"
"class:`SingleObjectTemplateResponseMixin` above, this overrides :meth:"
"`get_template_names()` to provide :meth:`a range of options <~django.views."
"generic.list.MultipleObjectTempalteResponseMixin>`, with the most commonly-"
"used being ``<app_label>/<object_name>_list.html``, with the ``_list`` part "
"again being taken from the :attr:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The "
"date based generic views use suffixes such as ``_archive``, "
"``_archive_year`` and so on to use different templates for the various "
"specialised date-based list views.)"
msgstr ""

# 694e13b8d5234b32bf69b1d8a189e4ea
#: ../../topics/class-based-views/mixins.txt:174
msgid "Using Django's class-based view mixins"
msgstr ""

# ff16b991ff284664831e7bf56c47f584
#: ../../topics/class-based-views/mixins.txt:176
msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. Of course we're still "
"going to be combining them with either built-in class-based views, or other "
"generic class-based views, but there are a range of rarer problems you can "
"solve than are provided for by Django out of the box."
msgstr ""

# 73c1dfd3d60647359f241e34359960b0
#: ../../topics/class-based-views/mixins.txt:185
msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""

# bfa82a41df8441c0af25d166150200eb
#: ../../topics/class-based-views/mixins.txt:193
msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/"
"mixins>` will help you in understanding which attributes and methods are "
"likely to cause conflict between different classes and mixins."
msgstr ""

# 6e4e83d28a234b9aa22ff5fe0926b80f
#: ../../topics/class-based-views/mixins.txt:199
msgid ""
"If in doubt, it's often better to back off and base your work on :class:"
"`View` or :class:`TemplateView`, perhaps with :class:`SimpleObjectMixin` "
"and :class:`MultipleObjectMixin`. Although you will probably end up writing "
"more code, it is more likely to be clearly understandable to someone else "
"coming to it later, and with fewer interactions to worry about you will save "
"yourself some thinking. (Of course, you can always dip into Django's "
"implementation of the generic class based views for inspiration on how to "
"tackle problems.)"
msgstr ""

# cc700e3ea18941dba84bcf1a69acf5a5
#: ../../topics/class-based-views/mixins.txt:213
msgid "Using SingleObjectMixin with View"
msgstr ""

# 73b27deb409a4c6c81338bff257f7e81
#: ../../topics/class-based-views/mixins.txt:215
msgid ""
"If we want to write a simple class-based view that responds only to "
"``POST``, we'll subclass :class:`~django.views.generic.base.View` and write "
"a ``post()`` method in the subclass. However if we want our processing to "
"work on a particular object, identified from the URL, we'll want the "
"functionality provided by :class:`~django.views.generic.detail."
"SingleObjectMixin`."
msgstr ""

# 7fea775943af47f7b21ec1a8d87ed9c8
#: ../../topics/class-based-views/mixins.txt:222
msgid ""
"We'll demonstrate this with the publisher modelling we used in the :doc:"
"`generic class-based views introduction<generic-display>`."
msgstr ""

# 6a691089e6584a899b74411b7eab1f90
#: ../../topics/class-based-views/mixins.txt:248
msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using :class:`SingleObjectMixin` "
"is where we want to look up the author we're interested in, which it just "
"does with a simple call to ``self.get_object()``. Everything else is taken "
"care of for us by the mixin."
msgstr ""

# ffcf0eb614dc44f8adfc09d1a224f0df
#: ../../topics/class-based-views/mixins.txt:256
msgid "We can hook this into our URLs easily enough::"
msgstr ""

# efe713fd13dc45b3954b96bbf4cad760
#: ../../topics/class-based-views/mixins.txt:266
msgid ""
"Note the ``pk`` named group, which :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` uses to look up the :class:`Author` instance. "
"You could also use a slug, or any of the other features of :class:"
"`SingleObjectMixin`."
msgstr ""

# e1a1423a8fc24365909ab2f61c6f68d8
#: ../../topics/class-based-views/mixins.txt:272
msgid "Using SingleObjectMixin with ListView"
msgstr ""

# 447eae7ff85747b891a9ccaba98c8b38
#: ../../topics/class-based-views/mixins.txt:274
msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to "
"paginate through all the books by a particular publisher."
msgstr ""

# 56ce75b6e90443bb8d50d56090a1bc3a
#: ../../topics/class-based-views/mixins.txt:280
msgid ""
"One way to do this is to combine :class:`ListView` with :class:"
"`SingleObjectMixin`, so that the queryset for the paginated list of books "
"can hang off the publisher found as the single object. In order to do this, "
"we need to have two different querysets:"
msgstr ""

# 76d98528983a440b8919fe98f5a87b3a
#: ../../topics/class-based-views/mixins.txt:286
msgid "We'll set that up directly when we call :meth:`get_object()`."
msgstr ""

# 57e1d6cac5fe445bbb91b8dcd1df8172
#: ../../topics/class-based-views/mixins.txt:289
msgid ""
"We'll figure that out ourselves in :meth:`get_queryset()` so we can take "
"into account the Publisher we're looking at."
msgstr ""

# 28930469d612470fb2a40f09b7e13539
#: ../../topics/class-based-views/mixins.txt:294
msgid ""
"We have to think carefully about :meth:`get_context_data()`. Since both :"
"class:`SingleObjectMixin` and :class:`ListView` will put things in the "
"context data under the value of :attr:`context_object_name` if it's set, "
"we'll instead explictly ensure the Publisher is in the context data. :class:"
"`ListView` will add in the suitable ``page_obj`` and ``paginator`` for us "
"providing we remember to call ``super()``."
msgstr ""

# 3ee73b77cf644c70b8b0804428d26604
#: ../../topics/class-based-views/mixins.txt:302
msgid "Now we can write a new :class:`PublisherDetail`::"
msgstr ""

# 55ad08714ead4568ba47895437d9cdac
#: ../../topics/class-based-views/mixins.txt:320
msgid ""
"Notice how we set ``self.object`` within :meth:`get_queryset` so we can use "
"it again later in :meth:`get_context_data`. If you don't set :attr:"
"`template_name`, the template will default to the normal :class:`ListView` "
"choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about :class:"
"`SingleObjectMixin`, so it doesn't have any clue this view is anything to do "
"with a Publisher."
msgstr ""

# ca9e465b25bb4a72a13dc6c3d4ce6932
#: ../../topics/class-based-views/mixins.txt:330
msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use::"
msgstr ""

# 044c158320e14a46b6b61e4411be970c
#: ../../topics/class-based-views/mixins.txt:363
msgid "Avoid anything more complex"
msgstr ""

# b8c38d7663ee44058a921c8abfbbd6bc
#: ../../topics/class-based-views/mixins.txt:365
msgid ""
"Generally you can use :class:`~django.views.generic.base."
"TemplateResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectMixin` when you need their functionality. As shown above, with a "
"bit of care you can even combine :class:`SingleObjectMixin` with :class:"
"`~django.views.generic.list.ListView`. However things get increasingly "
"complex as you try to do so, and a good rule of thumb is:"
msgstr ""

# bf5fd9b8e6e244a68fa2c20d5c3f7e40
#: ../../topics/class-based-views/mixins.txt:375
msgid ""
"Each of your views should use only mixins or views from one of the groups of "
"generic class-based views: :doc:`detail, list<generic-display>`, :doc:"
"`editing<generic-editing>` and date. For example it's fine to combine :class:"
"`TemplateView` (built in view) with :class:`MultipleObjectMixin` (generic "
"list), but you're likely to have problems combining :class:"
"`SingleObjectMixin` (generic detail) with :class:`MultipleObjectMixin` "
"(generic list)."
msgstr ""

# a5d3b6548d7044daab9f93c27a7dc329
#: ../../topics/class-based-views/mixins.txt:384
msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine :class:"
"`~django.views.generic.detail.DetailView` with :class:`~django.views.generic."
"edit.FormMixin` to enable use to ``POST`` a Django :class:`Form` to the same "
"URL as we're displaying an object using :class:`DetailView`."
msgstr ""

# 01d379cee19840669b70f9d1ffc216b7
#: ../../topics/class-based-views/mixins.txt:393
msgid "Using FormMixin with DetailView"
msgstr ""

# a06b8f8aba0b4ba4bec95f06991d3d56
#: ../../topics/class-based-views/mixins.txt:395
msgid ""
"Think back to our earlier example of using :class:`View` and :class:"
"`SingleObjectMixin` together. We were recording a user's interest in a "
"particular author; say now that we want to let them leave a message saying "
"why they like them. Again, let's assume we're not going to store this in a "
"relational database but instead in something more esoteric that we won't "
"worry about here."
msgstr ""

# 145b1890e7684f189febddfd07d71395
#: ../../topics/class-based-views/mixins.txt:402
msgid ""
"At this point it's natural to reach for a :class:`Form` to encapsulate the "
"information sent from the user's browser to Django. Say also that we're "
"heavily invested in `REST`_, so we want to use the same URL for displaying "
"the author as for capturing the message from the user. Let's rewrite our :"
"class:`AuthorDetailView` to do that."
msgstr ""

# e076ebfa02b64e05afd8dc879aa32a38
#: ../../topics/class-based-views/mixins.txt:410
msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`Form` into the context data so we can render it in the "
"template. We'll also want to pull in form processing from :class:`~django."
"views.generic.edit.FormMixin`, and write a bit of code so that on ``POST`` "
"the form gets called appropriately."
msgstr ""

# 23011046c83a43838f103edc38417110
#: ../../topics/class-based-views/mixins.txt:418
msgid ""
"We use :class:`FormMixin` and implement :meth:`post()` ourselves rather than "
"try to mix :class:`DetailView` with :class:`FormView` (which provides a "
"suitable :meth:`post()` already) because both of the views implement :meth:"
"`get()`, and things would get much more confusing."
msgstr ""

# dd2babdb80854265adbbb9646bd19456
#: ../../topics/class-based-views/mixins.txt:426
msgid "Our new :class:`AuthorDetail` looks like this::"
msgstr ""

# f51204cee5604a11a909bc130c7055a3
#: ../../topics/class-based-views/mixins.txt:476
msgid ""
":meth:`get_success_url()` is just providing somewhere to redirect to, which "
"gets used in the default implementation of :meth:`form_valid()`. We have to "
"provide our own :meth:`post()` as noted earlier, and override :meth:"
"`get_context_data()` to make the :class:`Form` available in the context data."
msgstr ""

# 9c0118fd0fa549d8af3aa4d00069a8a1
#: ../../topics/class-based-views/mixins.txt:483
msgid "A better solution"
msgstr ""

# 8b8595c543234b8eb3ce9dbc843fb32c
#: ../../topics/class-based-views/mixins.txt:485
msgid ""
"It should be obvious that the number of subtle interactions between :class:"
"`FormMixin` and :class:`DetailView` is already testing our ability to manage "
"things. It's unlikely you'd want to write this kind of class yourself."
msgstr ""

# 4bd5e83fd9f345d19d5564d0dc404b4c
#: ../../topics/class-based-views/mixins.txt:490
msgid ""
"In this case, it would be fairly easy to just write the :meth:`post()` "
"method yourself, keeping :class:`DetailView` as the only generic "
"functionality, although writing :class:`Form` handling code involves a lot "
"of duplication."
msgstr ""

# e0179ba362014d669eca5c613202b491
#: ../../topics/class-based-views/mixins.txt:495
msgid ""
"Alternatively, it would still be easier than the above approach to have a "
"separate view for processing the form, which could use :class:`~django.views."
"generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""

# 3fb9b11365a442bcbc0020a8a2522fb3
#: ../../topics/class-based-views/mixins.txt:501
msgid "An alternative better solution"
msgstr ""

# 999a96e2a52844e1b742c0fa416947ea
#: ../../topics/class-based-views/mixins.txt:503
msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with "
"the :class:`Form` added to the context data), and ``POST`` requests should "
"get the :class:`FormView`. Let's set up those views first."
msgstr ""

# 8a4961cd23c841eca218f8361e929048
#: ../../topics/class-based-views/mixins.txt:510
msgid ""
"The :class:`AuthorDisplay` view is almost the same as :ref:`when we first "
"introduced AuthorDetail<generic-views-extra-work>`; we have to write our "
"own :meth:`get_context_data()` to make the :class:`AuthorInterestForm` "
"available to the template. We'll skip the :meth:`get_object()` override from "
"before for clarity."
msgstr ""

# 2194ae5d3e4e4f6ebc37d25cd948fa52
#: ../../topics/class-based-views/mixins.txt:536
msgid ""
"Then the :class:`AuthorInterest` is a simple :class:`FormView`, but we have "
"to bring in :class:`SingleObjectMixin` so we can find the author we're "
"talking about, and we have to remember to set :attr:`template_name` to "
"ensure that form errors will render the same template as :class:"
"`AuthorDisplay` is using on ``GET``."
msgstr ""

# 1c61cd06b3784d49942ac31145396933
#: ../../topics/class-based-views/mixins.txt:571
msgid ""
"Finally we bring this together in a new :class:`AuthorDetail` view. We "
"already know that calling :meth:`as_view()` on a class-based view gives us "
"something that behaves exactly like a function based view, so we can do that "
"at the point we choose between the two subviews."
msgstr ""

# fc3965206a494d9f80eafbf5f172e3e4
#: ../../topics/class-based-views/mixins.txt:576
msgid ""
"You can of course pass through keyword arguments to :meth:`as_view()` in the "
"same way you would in your URLconf, such as if you wanted the :class:"
"`AuthorInterest` behaviour to also appear at another URL but using a "
"different template."
msgstr ""

# 7da2cbc0d3214674b767a4887af5c9ab
#: ../../topics/class-based-views/mixins.txt:595
msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or :class:"
"`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""

# 41bea90229834fd8b868bb9f28aaf9e3
#: ../../topics/class-based-views/mixins.txt:603
msgid "More than just HTML"
msgstr ""

# 43fa987c67ef42e5afd8f30227b0c977
#: ../../topics/class-based-views/mixins.txt:605
msgid ""
"Where class based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""

# 809fe702664e40b584b9cffda94a6fb6
#: ../../topics/class-based-views/mixins.txt:609
msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""

# 0deaec1ee68643f980cbc95a38822505
#: ../../topics/class-based-views/mixins.txt:612
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

# 1e5f52916c294cb28f36de0cc8c3f80c
#: ../../topics/class-based-views/mixins.txt:641
msgid "Now we mix this into the base TemplateView::"
msgstr ""

# 6135fe80f3894f768c1d71a05be36c2a
#: ../../topics/class-based-views/mixins.txt:648
msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing :class:`JSONResponseMixin` with the :class:`~django.views.generic."
"detail.BaseDetailView` -- (the :class:`~django.views.generic.detail."
"DetailView` before template rendering behavior has been mixed in)::"
msgstr ""

# 7daf9bef7b694c18979d5bbf99d49073
#: ../../topics/class-based-views/mixins.txt:658
msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""

# 9197805f9e2342c2b4c3ac178cc4a88c
#: ../../topics/class-based-views/mixins.txt:662
msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or a HTTP header. Just mix in both the :class:"
"`JSONResponseMixin` and a :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, and override the implementation of :func:"
"`render_to_response()` to defer to the appropriate subclass depending on the "
"type of response that the user requested::"
msgstr ""

# 8b5a211e75b743e0b82787b8dddd3e6f
#: ../../topics/class-based-views/mixins.txt:680
msgid ""
"Because of the way that Python resolves method overloading, the local "
"``render_to_response()`` implementation will override the versions provided "
"by :class:`JSONResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`."
msgstr ""

# 475532742b1743b29b95a04268fd2231
#: ../../topics/conditional-view-processing.txt:3
msgid "Conditional View Processing"
msgstr ""

# 3da1779e6ce749ad87b8da06f3220dc0
#: ../../topics/conditional-view-processing.txt:5
msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc)."
msgstr ""

# 747314a355ee44c1bca56bada10f8226
#: ../../topics/conditional-view-processing.txt:11
msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.common."
"CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

# 0e7c02c4889c48d7b2339959a7d6df1b
#: ../../topics/conditional-view-processing.txt:17
msgid ""
"When the client next requests the same resource, it might send along a "
"header such as `If-modified-since`_, containing the date of the last "
"modification time it was sent, or `If-none-match`_, containing the ``ETag`` "
"it was sent. If the current version of the page matches the ``ETag`` sent by "
"the client, or if the resource has not been modified, a 304 status code can "
"be sent back, instead of a full response, telling the client that nothing "
"has changed."
msgstr ""

# 17e6b28b3064487ebc98bcb3a15e89d5
#: ../../topics/conditional-view-processing.txt:27
msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

# aa6a329090ef4bb58d579dfc956f0efa
#: ../../topics/conditional-view-processing.txt:33
msgid "The ``condition`` decorator"
msgstr ""

# 2865d2b919a640b2a5f5c23f9dd5952d
#: ../../topics/conditional-view-processing.txt:35
msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django "
"can then use these functions to provide an \"early bailout\" option for the "
"view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

# d1449d5f18204b9fa1e479d1b19497d2
#: ../../topics/conditional-view-processing.txt:44
msgid ""
"These two functions are passed as parameters the ``django.views.decorators."
"http.condition`` decorator. This decorator uses the two functions (you only "
"need to supply one, if you can't compute both quantities easily and quickly) "
"to work out if the headers in the HTTP request match those on the resource. "
"If they don't match, a new copy of the resource must be computed and your "
"normal view is called."
msgstr ""

# 5a1304a53adf47f6a99327b58c92277f
#: ../../topics/conditional-view-processing.txt:51
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

# dd4dea9288ca40bf90a6005138ca8389
#: ../../topics/conditional-view-processing.txt:55
msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

# 8f0995614e7c4eba8c4b2fe94da7183c
#: ../../topics/conditional-view-processing.txt:63
msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

# 2a9fe131cef44dd0bcf18253cd4f6ce3
#: ../../topics/conditional-view-processing.txt:77
msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

# 09be2d4277aa4edc9a411e203adc978b
#: ../../topics/conditional-view-processing.txt:85
msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

# 16a51e67c1524e87b7d47d86da61873d
#: ../../topics/conditional-view-processing.txt:95
msgid "Shortcuts for only computing one value"
msgstr ""

# 1060ec0496b24dc1a85b8d3fb958cec2
#: ../../topics/conditional-view-processing.txt:97
msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

# a9c9365d61764359809cf83358c0e324
#: ../../topics/conditional-view-processing.txt:103
msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""

# 9577e4fa544c49b6b995f68357b2b0d2
#: ../../topics/conditional-view-processing.txt:110
msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

# b4dce1ae0a2146929c1acdd629e28701
#: ../../topics/conditional-view-processing.txt:117
msgid "...or::"
msgstr ""

# 5fce706767034049a689d80c51e09225
#: ../../topics/conditional-view-processing.txt:124
msgid "Use ``condition`` when testing both conditions"
msgstr ""

# a3f00f519c0f4332a63e8bcea6b80a11
#: ../../topics/conditional-view-processing.txt:126
msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

# c2982c2e51f249428cd78a5cd4791b4b
#: ../../topics/conditional-view-processing.txt:140
msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

# 96521f9d2d8944bfb85c6732f0866ae2
#: ../../topics/conditional-view-processing.txt:146
msgid "Using the decorators with other HTTP methods"
msgstr ""

# 1f73e27426d74de08eb0dcaa4cb4ac42
#: ../../topics/conditional-view-processing.txt:148
msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can be used also to be used to provide checking for ``POST``, "
"``PUT`` and ``DELETE`` requests. In these situations, the idea isn't to "
"return a \"not modified\" response, but to tell the client that the resource "
"they are trying to change has been altered in the meantime."
msgstr ""

# 462e92e629e44603b2425ee422423bd1
#: ../../topics/conditional-view-processing.txt:155
msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

# 3be40816e19f41fbbe710bf1b844f3e0
#: ../../topics/conditional-view-processing.txt:157
msgid "Client requests ``/foo/``."
msgstr ""

# 1653ae40c7f547a19e58186d3b3171a2
#: ../../topics/conditional-view-processing.txt:158
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

# b78311e9e7334ff4a016c99b3a70995e
#: ../../topics/conditional-view-processing.txt:159
msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""

# 05d3434bc15d46d59f73d6af6e53c6a2
#: ../../topics/conditional-view-processing.txt:162
msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code code, meaning "
"\"precondition failed\"."
msgstr ""

# 26312809dc7e4bf5a68a5407f7a019c6
#: ../../topics/conditional-view-processing.txt:166
msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""

# b672fb50ba7a4292be3749c6e05f0e9f
#: ../../topics/conditional-view-processing.txt:170
msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

# e968cbddbb9b4456bbf1891754bb9a9f
#: ../../topics/conditional-view-processing.txt:176
msgid "Comparison with middleware conditional processing"
msgstr ""

# d7009c02c99f44a0b19506d0d3fa955a
#: ../../topics/conditional-view-processing.txt:178
msgid ""
"You may notice that Django already provides simple and straightforward "
"conditional ``GET`` handling via the :class:`django.middleware.http."
"ConditionalGetMiddleware` and :class:`~django.middleware.common."
"CommonMiddleware`. Whilst certainly being easy to use and suitable for many "
"situations, those pieces of middleware functionality have limitations for "
"advanced usage:"
msgstr ""

# b441666a0fad4dc68dcd1f09ee1abe8b
#: ../../topics/conditional-view-processing.txt:185
msgid "They are applied globally to all views in your project"
msgstr ""

# d70386ce55dd407c93c45868caad7d77
#: ../../topics/conditional-view-processing.txt:186
msgid ""
"They don't save you from generating the response itself, which may be "
"expensive"
msgstr ""

# cc92cdb2488e4371bc2a210fbf1448db
#: ../../topics/conditional-view-processing.txt:188
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

# 36971f81dcdf4cce897ec07348c330b4
#: ../../topics/conditional-view-processing.txt:190
msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""

# feb4e793593b40bf915ee03c4ab25f4f
#: ../../topics/db/aggregation.txt:3
msgid "Aggregation"
msgstr ""

# f50681f59d8047a1932ff89f01ec78ac
#: ../../topics/db/aggregation.txt:7
msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""

# e45fdc5146904ad089d272b6eb8171be
#: ../../topics/db/aggregation.txt:14
msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr ""

# 899acd98e1de4937adf616b6819c25fe
#: ../../topics/db/aggregation.txt:45
msgid "Cheat sheet"
msgstr ""

# 80b5634740134189937bda771be651cc
#: ../../topics/db/aggregation.txt:47
msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above::"
msgstr ""

# 750324aac7a749399a225ef59ac90859
#: ../../topics/db/aggregation.txt:82
msgid "Generating aggregates over a QuerySet"
msgstr ""

# 025e89762bdd4d6db734311d4ba6898e
#: ../../topics/db/aggregation.txt:84
msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""

# 27c7f80e8c2642c6b3d60de345e6bdf5
#: ../../topics/db/aggregation.txt:91
msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""

# 072480b8372845b0b88dba63f414b5b9
#: ../../topics/db/aggregation.txt:99
msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

# 117c7e3297ed401f9c4a73d881d3c4c8
#: ../../topics/db/aggregation.txt:104
msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

# ee90bf4126604bd6a72d88129b0671cc
#: ../../topics/db/aggregation.txt:109
msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

# 25d27f951ec6475fb85e59d5d7bd75a9
#: ../../topics/db/aggregation.txt:119
msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""

# 276d012d7da44ac5ac2d7e8360074444
#: ../../topics/db/aggregation.txt:128
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

# ec8bfb29f9f04a69b7ade7352ebb61bd
#: ../../topics/db/aggregation.txt:130
msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a ``QuerySet``. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

# cbfbb881564e4ab484e0f6aadfe44eb4
#: ../../topics/db/aggregation.txt:136
msgid ""
"Per-object summaries can be generated using the ``annotate()`` clause. When "
"an ``annotate()`` clause is specified, each object in the ``QuerySet`` will "
"be annotated with the specified values."
msgstr ""

# 908f89214ccb4890b78b97cb91910834
#: ../../topics/db/aggregation.txt:140
msgid ""
"The syntax for these annotations is identical to that used for the "
"``aggregate()`` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate Books with the "
"number of authors::"
msgstr ""

# 86f57f27f4fe4a38a20bcefcc0a69088
#: ../../topics/db/aggregation.txt:158
msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""

# 805c02ee9e534193ab2053e1a88a691f
#: ../../topics/db/aggregation.txt:169
msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by``, or even additional calls to ``annotate()``."
msgstr ""

# 9db987c0c74c422eaa38c049b58f3c00
#: ../../topics/db/aggregation.txt:175
msgid "Joins and aggregates"
msgstr ""

# 261d5a2503104a98862ac5aa47283360
#: ../../topics/db/aggregation.txt:177
msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""

# 9c80b9c53f154928ae262235f02ed18e
#: ../../topics/db/aggregation.txt:181
msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""

# 0c4a0fb5ac7f45cb99c42301a26f7915
#: ../../topics/db/aggregation.txt:187
msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""

# 3737855e23534eaa9b6cbedc5c9685eb
#: ../../topics/db/aggregation.txt:192
msgid ""
"This tells Django to retrieve the Store model, join (through the many-to-"
"many relationship) with the Book model, and aggregate on the price field of "
"the book model to produce a minimum and maximum value."
msgstr ""

# 78e0f2f6ab294a339d398a1d57de70dd
#: ../../topics/db/aggregation.txt:196
msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in a "
"store, you could use the aggregate::"
msgstr ""

# 15ec251515184af4ac94cf4e0139b16c
#: ../../topics/db/aggregation.txt:202
msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""

# 7361589ea9f84f99b06e2038776480b3
#: ../../topics/db/aggregation.txt:209
msgid "Aggregations and other QuerySet clauses"
msgstr ""

# 3cf18e36ecb64b95970902b5dedc4fda
#: ../../topics/db/aggregation.txt:212
msgid "``filter()`` and ``exclude()``"
msgstr ""

# af3949a8daff4768af1f5a25bde4e8ab
#: ../../topics/db/aggregation.txt:214
msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or ``exclude()"
"``) applied to normal model fields will have the effect of constraining the "
"objects that are considered for aggregation."
msgstr ""

# ec536ed7c99f4469a0c578c85a0cce5c
#: ../../topics/db/aggregation.txt:218
msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""

# dd807445613a4ba38d071f734418917e
#: ../../topics/db/aggregation.txt:225
msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""

# 5859633fd8a445588638e1ecf9a2ae2d
#: ../../topics/db/aggregation.txt:233
msgid "Filtering on annotations"
msgstr ""

# 9b0dd9a0350e492494d917fe2d63bde4
#: ../../topics/db/aggregation.txt:235
msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""

# 472ce3289f9e4bbf92080b6b8f81119b
#: ../../topics/db/aggregation.txt:239
msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query::"
msgstr ""

# 5076bcc9fa4a4b7782feb4b282167460
#: ../../topics/db/aggregation.txt:244
msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""

# edd6f0f48649477095e444b79f8fe316
#: ../../topics/db/aggregation.txt:248
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

# d51be7553f2c45e197e1565d6252d8b0
#: ../../topics/db/aggregation.txt:250
msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, particular attention should be paid to the order in "
"which the clauses are applied to the ``QuerySet``."
msgstr ""

# fb8b83bd19454a5f83679061fd81e363
#: ../../topics/db/aggregation.txt:254
msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations -- that is, there is a "
"difference between the query::"
msgstr ""

# 62ddaac835234ca08d73e7527ca0202b
#: ../../topics/db/aggregation.txt:262
msgid "and the query::"
msgstr ""

# 6107b44827c24180a772910d6ddaf507
#: ../../topics/db/aggregation.txt:266
msgid ""
"Both queries will return a list of Publishers that have at least one good "
"book (i.e., a book with a rating exceeding 3.0). However, the annotation in "
"the first query will provide the total number of all books published by the "
"publisher; the second query will only include good books in the annotated "
"count. In the first query, the annotation precedes the filter, so the filter "
"has no effect on the annotation. In the second query, the filter precedes "
"the annotation, and as a result, the filter constrains the objects "
"considered when calculating the annotation."
msgstr ""

# f4cb428186df41b186b40d891d0167bc
#: ../../topics/db/aggregation.txt:276
msgid "``order_by()``"
msgstr ""

# f32f6a218bef4539a64b2e12bc779051
#: ../../topics/db/aggregation.txt:278
msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""

# 27efe14bedd947ad835aad1b4f5bcaa6
#: ../../topics/db/aggregation.txt:282
msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""

# 521c1c5b9b5d44b39743bf9105a5b00f
#: ../../topics/db/aggregation.txt:288
msgid "``values()``"
msgstr ""

# 76fcb315dedf449c9b4fb2f0cae860c4
#: ../../topics/db/aggregation.txt:290
msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""

# bad873a421ef44bca2cd5109e8ed9c8d
#: ../../topics/db/aggregation.txt:300
msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""

# 17b1867015b949709213adc7c5e40b79
#: ../../topics/db/aggregation.txt:305
msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""

# d8b784d1ca454e9f9749a66b1bc21c67
#: ../../topics/db/aggregation.txt:308
msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr ""

# 4dddb649481a4de9a8ee636041fae16b
#: ../../topics/db/aggregation.txt:312
msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""

# f1c81833c01f4e6d863bdb04086920b6
#: ../../topics/db/aggregation.txt:319
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

# 087819d06e38424c9065d0a64772e8fe
#: ../../topics/db/aggregation.txt:321
msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the ``values()"
"`` clause precedes the ``annotate()``, the annotation will be computed using "
"the grouping described by the ``values()`` clause."
msgstr ""

# f50143a1db3241b3bacfd4f02769d48d
#: ../../topics/db/aggregation.txt:326
msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""

# ef0c96c6130c494aba55f087fdc78695
#: ../../topics/db/aggregation.txt:331
msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""

# 206923034f884168872e261d020fdd67
#: ../../topics/db/aggregation.txt:336
msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""

# ea024bbc2ee44ef9ad13a75e222d28d2
#: ../../topics/db/aggregation.txt:340
msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""

# 991016e6a8ad4199a17965fb114e7fb2
#: ../../topics/db/aggregation.txt:344
msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""

# 6b9fcc9470184c47a24ecf75a93e8ae7
#: ../../topics/db/aggregation.txt:350
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

# 9a9671d4a0b346c88d8181440aa02a71
#: ../../topics/db/aggregation.txt:352
msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which "
"are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""

# 65150b803f7148d4831cd6642b835a9f
#: ../../topics/db/aggregation.txt:359
msgid "By way of example, suppose you have a model like this::"
msgstr ""

# 540e2e7d48c945d39ded033c663eab7a
#: ../../topics/db/aggregation.txt:368
msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""

# b1c39ec1cecf4a4abb4f51bb183f1c58
#: ../../topics/db/aggregation.txt:375
msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which "
"isn't what you want. Instead, you should construct this queryset::"
msgstr ""

# a3ceb9069bcc4ea4a846316655dd1a97
#: ../../topics/db/aggregation.txt:383
msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""

# 2e20a4ad854846fc84966d482d196c93
#: ../../topics/db/aggregation.txt:387
msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""

# 4900854003574396bcb64c83b1a79d1c
#: ../../topics/db/aggregation.txt:394
msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""

# 6cd0c0ef3a5c40d980fcb9598678a5f5
#: ../../topics/db/aggregation.txt:401
msgid "Aggregating annotations"
msgstr ""

# 5ba5868a0afd4b4f86d57f50c02d9b4c
#: ../../topics/db/aggregation.txt:403
msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

# b6aaf669f88f40e89249a857426b6fac
#: ../../topics/db/aggregation.txt:407
msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""

# 5c969bbbeaae4fcca76492871ba0ae62
#: ../../topics/db/examples/index.txt:3
msgid "Examples of model relationship API usage"
msgstr ""

# de9e9ed534a542f59b99acb166827563
# c76d67541e864c60ac2cad3fdd0198fa
# a6fe580bb7d0479990a127ae6513b852
#: ../../topics/db/examples/many_to_many.txt:3 ../../topics/db/models.txt:329
#: ../../topics/db/queries.txt:1165
msgid "Many-to-many relationships"
msgstr ""

# 9ddd0de52a5a45a397f3719bb6620ee5
#: ../../topics/db/examples/many_to_many.txt:7
msgid "To define a many-to-many relationship, use :ref:`ref-manytomany`."
msgstr ""

# fea3ff8d400448cebf5637ba41af9e45
#: ../../topics/db/examples/many_to_many.txt:9
msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication`` "
"objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

# 7ec29deb41b54763b2739719b59ff699
# c576a1c28c84474997bb845f5989a4f5
# 42c44c60ac1b4c6796ef1ff1891db1d0
#: ../../topics/db/examples/many_to_many.txt:35
#: ../../topics/db/examples/many_to_one.txt:32
#: ../../topics/db/examples/one_to_one.txt:37
msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr ""

# f0bb9bd796e54676b70b541e631bc074
#: ../../topics/db/examples/many_to_many.txt:38
msgid "Create a couple of Publications::"
msgstr ""

# aad683faef3e4d429ab6eb0fb1505b6b
# ea06289f03094ca086364482c8b2cca9
#: ../../topics/db/examples/many_to_many.txt:47
#: ../../topics/db/examples/many_to_one.txt:43
msgid "Create an Article::"
msgstr ""

# c11939271229427c940d344af93046d7
#: ../../topics/db/examples/many_to_many.txt:51
msgid "You can't associate it with a Publication until it's been saved::"
msgstr ""

# 368b83551c624813a35871c8d81439fe
#: ../../topics/db/examples/many_to_many.txt:58
msgid "Save it! ::"
msgstr ""

# 4a61859f464248a49385305ce26c440e
#: ../../topics/db/examples/many_to_many.txt:63
msgid "Associate the Article with a Publication::"
msgstr ""

# c7542abb198c4ef4ad84d60ca03ab410
#: ../../topics/db/examples/many_to_many.txt:67
msgid "Create another Article, and set it to appear in both Publications::"
msgstr ""

# 338ed6aaa1a644f3ad847a0ed0a9d850
#: ../../topics/db/examples/many_to_many.txt:74
msgid "Adding a second time is OK::"
msgstr ""

# 56d5fbcf8a264eae886e1a3b3a84d514
# 1b565d7e7dc341d093663250c3685d11
#: ../../topics/db/examples/many_to_many.txt:78
#: ../../topics/db/examples/many_to_one.txt:95
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

# 646aab58982c4001adede72cb41dff3c
#: ../../topics/db/examples/many_to_many.txt:85
msgid ""
"Add a Publication directly via publications.add by using keyword arguments::"
msgstr ""

# 9b98114ade0c4dc1ae337f95f673e774
#: ../../topics/db/examples/many_to_many.txt:89
msgid "Article objects have access to their related Publication objects::"
msgstr ""

# 54a20e2030e6403aa4b4f295a71cd878
#: ../../topics/db/examples/many_to_many.txt:96
msgid "Publication objects have access to their related Article objects::"
msgstr ""

# dc8dec6ef9d74461beffa36eceec4cd4
#: ../../topics/db/examples/many_to_many.txt:105
msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"
msgstr ""

# a8740dde05724c7eb5d533eb7acd8390
#: ../../topics/db/examples/many_to_many.txt:122
msgid "The count() function respects distinct() as well::"
msgstr ""

# bd5fa8aadcbc4660ad7ab8776d94ec8c
#: ../../topics/db/examples/many_to_many.txt:135
msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a ManyToManyField)::"
msgstr ""

# fba4a09f611147659a2dd5fa023c53d0
#: ../../topics/db/examples/many_to_many.txt:160
msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex)::"
msgstr ""

# d82d09da44f349baaa16e6798dd78dfa
#: ../../topics/db/examples/many_to_many.txt:166
msgid "If we delete a Publication, its Articles won't be able to access it::"
msgstr ""

# 802356910e3d4da9a27e16ecc5887368
#: ../../topics/db/examples/many_to_many.txt:175
msgid "If we delete an Article, its Publications won't be able to access it::"
msgstr ""

# a85b08369c7249578abe04b49ad508a1
#: ../../topics/db/examples/many_to_many.txt:183
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

# e6cd8724775e40a1bf4d8b3c6a8f4c9a
#: ../../topics/db/examples/many_to_many.txt:193
msgid "Adding via the other end using keywords::"
msgstr ""

# ebbb9af5e9b146d2a308c15b30167e05
#: ../../topics/db/examples/many_to_many.txt:202
msgid "Removing publication from an article::"
msgstr ""

# aeef71a2c85848ed9817359093032d71
#: ../../topics/db/examples/many_to_many.txt:210
msgid "And from the other end::"
msgstr ""

# ea65c03ebfaf4c0589638b2f04a8b989
#: ../../topics/db/examples/many_to_many.txt:218
msgid ""
"Relation sets can be assigned. Assignment clears any existing set members::"
msgstr ""

# efd1bb181f214985b118f01ae7bf2871
#: ../../topics/db/examples/many_to_many.txt:226
msgid "Relation sets can be cleared::"
msgstr ""

# c5e7098f1d9649dabb4feb85efcd1df3
#: ../../topics/db/examples/many_to_many.txt:232
msgid "And you can clear from the other end::"
msgstr ""

# 4351acccc5cf4ed98a51ba7c80767457
#: ../../topics/db/examples/many_to_many.txt:245
msgid "Recreate the article and Publication we have deleted::"
msgstr ""

# aea893c6afad4b0b97bf33910ffa80ec
#: ../../topics/db/examples/many_to_many.txt:253
msgid ""
"Bulk delete some Publications - references to deleted publications should "
"go::"
msgstr ""

# 9e7d5f3b361d442ab82f64615cda6529
#: ../../topics/db/examples/many_to_many.txt:263
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

# 4d9a2fee5bd64b069d6ba9a7f25b97c0
#: ../../topics/db/examples/many_to_many.txt:270
msgid ""
"After the delete, the QuerySet cache needs to be cleared, and the referenced "
"objects should be gone::"
msgstr ""

# 5635a48d1afe48f6993f0653227ec89e
#: ../../topics/db/examples/many_to_many.txt:278
msgid "An alternate to calling clear() is to assign the empty set::"
msgstr ""

# adba105c18f5494a8495eb4a2c09055e
# 0b8cd41e8b244fbca3235eb0de8e199e
#: ../../topics/db/examples/many_to_one.txt:3 ../../topics/db/models.txt:280
msgid "Many-to-one relationships"
msgstr ""

# 9fdb29c4b8304353b81213d1628375de
#: ../../topics/db/examples/many_to_one.txt:7
msgid ""
"To define a many-to-one relationship, use :class:`~django.db.models."
"ForeignKey`."
msgstr ""

# 481c5188a4254a88aae30e15db1ac109
#: ../../topics/db/examples/many_to_one.txt:35
msgid "Create a few Reporters::"
msgstr ""

# 620090ab8b834d948d9d1b66b586e714
#: ../../topics/db/examples/many_to_one.txt:55
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

# 984797603ad8460a96a787a379b90ce8
#: ../../topics/db/examples/many_to_one.txt:59
msgid ""
"These are strings instead of unicode strings because that's what was used in "
"the creation of this reporter (and we haven't refreshed the data from the "
"database, which always returns unicode strings)::"
msgstr ""

# fd50ff8eb511470ba21778113a538e6e
#: ../../topics/db/examples/many_to_one.txt:66
msgid "Create an Article via the Reporter object::"
msgstr ""

# af1505b8e7f44c54ad52df461c27bdcc
#: ../../topics/db/examples/many_to_one.txt:76
msgid "Create a new article, and add it to the article set::"
msgstr ""

# b52e704977fc43dba78f69ff91f607fd
#: ../../topics/db/examples/many_to_one.txt:87
msgid "Add the same article to a different article set - check that it moves::"
msgstr ""

# 8c174079b7e64359bd759f1ff1c76068
#: ../../topics/db/examples/many_to_one.txt:113
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

# 297e0f4924f74f07b61c06bca006bdee
#: ../../topics/db/examples/many_to_one.txt:115
msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate "
"relationships. This works as many levels deep as you want. There's no limit. "
"For example::"
msgstr ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate "
"relationships. This works as many levels deep as you want. There's no limit. "
"예를 들어 ::"

# 351c744bb1ec40a389595fc294caa45a
#: ../../topics/db/examples/many_to_one.txt:127
msgid "Exact match is implied here::"
msgstr ""

# 9ea829f0d11c4c6380bce3a7fc63fa0f
#: ../../topics/db/examples/many_to_one.txt:132
msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause::"
msgstr ""

# 38c504a0edbc4fbe8fe4fc6f1febc4b1
#: ../../topics/db/examples/many_to_one.txt:138
msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly::"
msgstr ""

# eee6913238794e07bd9329e8aca8ddd7
#: ../../topics/db/examples/many_to_one.txt:153
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

# 525aeaa3e7e940918758af68a6fcbe10
#: ../../topics/db/examples/many_to_one.txt:158
msgid "Querying in the opposite direction::"
msgstr ""

# 106c54e3bc1d411590924ab104a217d8
#: ../../topics/db/examples/many_to_one.txt:172
msgid ""
"Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

# c3e7be461d8643c29a11f043cde7abc5
#: ../../topics/db/examples/many_to_one.txt:179
msgid "Queries can go round in circles::"
msgstr ""

# 550a2b65ff6349089e17b211f26c857c
#: ../../topics/db/examples/many_to_one.txt:188
msgid ""
"If you delete a reporter, his articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default)::"
msgstr ""

# 4ebf7d37ec5742409043967145af2acd
#: ../../topics/db/examples/many_to_one.txt:202
msgid "You can delete using a JOIN in the query::"
msgstr ""

# f02ba1552de4468ba57537da55a08a01
# f6951ba239cb40fbb2ede43f80d97696
# 0f89ed6c7b70448585ebcba4b4b40e9c
#: ../../topics/db/examples/one_to_one.txt:3 ../../topics/db/models.txt:536
#: ../../topics/db/queries.txt:1192
msgid "One-to-one relationships"
msgstr ""

# 2a966410dbdc4ff2ac94280138b08aa4
#: ../../topics/db/examples/one_to_one.txt:7
msgid "To define a one-to-one relationship, use :ref:`ref-onetoone`."
msgstr ""

# f65ce5e732d842468dfb6661afc991ed
#: ../../topics/db/examples/one_to_one.txt:9
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``:"
msgstr ""

# e39d0c038ba94d8d8c56722a166c62bd
#: ../../topics/db/examples/one_to_one.txt:40
msgid "Create a couple of Places::"
msgstr ""

# c375ee8fc4d047abb738cb11ab6e1525
#: ../../topics/db/examples/one_to_one.txt:47
msgid ""
"Create a Restaurant. Pass the ID of the \"parent\" object as this object's "
"ID::"
msgstr ""

# b13c905ac924415496fb0136eed5961c
#: ../../topics/db/examples/one_to_one.txt:52
msgid "A Restaurant can access its place::"
msgstr ""

# e6defb6367324ea6a758194a9376fb4f
#: ../../topics/db/examples/one_to_one.txt:57
msgid "A Place can access its restaurant, if available::"
msgstr ""

# 94547ccc38194a0dad16c2e097fbe5de
#: ../../topics/db/examples/one_to_one.txt:62
msgid "p2 doesn't have an associated restaurant::"
msgstr ""

# 66668f71023e4f6f927fb9fffc47dc72
#: ../../topics/db/examples/one_to_one.txt:69
msgid ""
"Set the place using assignment notation. Because place is the primary key on "
"Restaurant, the save will create a new restaurant::"
msgstr ""

# 942a13cbc27748d398ca0ab0bc7ad063
#: ../../topics/db/examples/one_to_one.txt:79
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""

# 3115e3b0e3fc4ff586a6109154ae6fc5
#: ../../topics/db/examples/one_to_one.txt:85
msgid ""
"Restaurant.objects.all() just returns the Restaurants, not the Places.  Note "
"that there are two restaurants - Ace Hardware the Restaurant was created in "
"the call to r.place = p2::"
msgstr ""

# f01c32cbf914438c8e510ef361bce4a7
#: ../../topics/db/examples/one_to_one.txt:92
msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants::"
msgstr ""

# 136d504a68a9429a9529d4ea0b19e989
#: ../../topics/db/examples/one_to_one.txt:98
msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`::"
msgstr ""

# d774146ea31e4d3a92cc43110667cbd2
#: ../../topics/db/examples/one_to_one.txt:109
msgid "This of course works in reverse::"
msgstr ""

# 4e34a66a4bd741b19ee7350f740ce11f
#: ../../topics/db/examples/one_to_one.txt:120
msgid "Add a Waiter to the Restaurant::"
msgstr ""

# 02dbf23f875a416081ff8e12555aec5b
#: ../../topics/db/examples/one_to_one.txt:127
msgid "Query the waiters::"
msgstr ""

# a923cdc4540a487eaa4d4a941ca1cbbf
#: ../../topics/db/index.txt:2
msgid "Models and databases"
msgstr ""

# 7cc6caebbc3d422895ed23826131d578
# ce6d876aad854f7a96722c75fd4900ed
#: ../../topics/db/index.txt:6 ../../topics/db/models.txt:7
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""

# 5f306a9c074e43a3987576eb9323290a
#: ../../topics/db/managers.txt:3
msgid "Managers"
msgstr ""

# 77283fb63de542c4a8053fb47a8badff
#: ../../topics/db/managers.txt:9
msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

# 5c3641b41fdd48279e4b65249d61d72a
#: ../../topics/db/managers.txt:13
msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

# 75da8c180a9b46e99522036aa2b3c788
#: ../../topics/db/managers.txt:20
msgid "Manager names"
msgstr ""

# 2ab67ae36836434281825100904763ea
#: ../../topics/db/managers.txt:22
msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"예를 들어 ::"

# af3f120945544d908d840ddd8890b7b9
#: ../../topics/db/managers.txt:34
msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

# 74f65b03f5fd4931954b10150cdf8ffa
#: ../../topics/db/managers.txt:41
msgid "Custom Managers"
msgstr ""

# 05cbff36a72645daace72e5a576a115f
#: ../../topics/db/managers.txt:43
msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

# 5bcfd12d06964ebcb69fdd2ca73ccde3
#: ../../topics/db/managers.txt:46
msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

# d817181c2e2e4c7b9f93ed11af32ccea
#: ../../topics/db/managers.txt:51
msgid "Adding extra Manager methods"
msgstr ""

# a6cd9c6088c64fb88a56bda89745d618
#: ../../topics/db/managers.txt:53
msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

# ddc1c20fc29a4922938923d246f23d9d
#: ../../topics/db/managers.txt:58
msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""

# 0f4b6d796eca43b08be3cd7531faee2e
#: ../../topics/db/managers.txt:61
msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

# cc29ab15b879494c950f9208e7eb8398
#: ../../topics/db/managers.txt:92
msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return "
"that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

# c0b45628f5354cf8afc437f2a68b9eaf
#: ../../topics/db/managers.txt:95
msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

# 2fb6e2cd22e8436796bd2a219230b17b
#: ../../topics/db/managers.txt:99
msgid "Modifying initial Manager QuerySets"
msgstr ""

# 1c96a983a7ba40a19f06bd6a80e3d6c8
#: ../../topics/db/managers.txt:101
msgid ""
"A ``Manager``'s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

# a616c6479a1b499d9b4e1c006d2d8351
#: ../../topics/db/managers.txt:108
msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

# c427ebcd234049ca9185f5f82a969eeb
#: ../../topics/db/managers.txt:110
msgid ""
"You can override a ``Manager``\\'s base ``QuerySet`` by overriding the "
"``Manager.get_query_set()`` method. ``get_query_set()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

# 20814ecc0cea482bb23397f11b010d8c
#: ../../topics/db/managers.txt:114
msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

# 616b952be6cc4c2084f813c7707ef031
#: ../../topics/db/managers.txt:130
msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

# 7383dda58cd541f89b6b0966d5575451
#: ../../topics/db/managers.txt:134
msgid ""
"Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you "
"can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods "
"on it. So these statements are all legal::"
msgstr ""

# e77ff29590ef47ddb6364c9a73d8f157
#: ../../topics/db/managers.txt:142
msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

# 7d370a8b8fa24bfeabf0c80cf5440b29
#: ../../topics/db/managers.txt:165
msgid ""
"This example allows you to request ``Person.men.all()``, ``Person.women.all()"
"``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

# 78a8c432dcbe496fb05834a7fb1403ad
#: ../../topics/db/managers.txt:168
msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_query_set()`` results "
"in an inability to retrieve objects you'd like to work with."
msgstr ""

# 1fbd0828196a491e9ac2946b1079f1df
#: ../../topics/db/managers.txt:181
msgid "Using managers for related object access"
msgstr ""

# c56077a5e3c84286bcc22f2dbe3a0177
#: ../../topics/db/managers.txt:183
msgid ""
"By default, Django uses an instance of a \"plain\" manager class when "
"accessing related objects (i.e. ``choice.poll``), not the default manager on "
"the related object. This is because Django needs to be able to retrieve the "
"related object, even if it would otherwise be filtered out (and hence be "
"inaccessible) by the default manager."
msgstr ""

# 3b0da24b60a944728a480a751d9d11c9
#: ../../topics/db/managers.txt:189
msgid ""
"If the normal plain manager class (:class:`django.db.models.Manager`) is not "
"appropriate for your circumstances, you can force Django to use the same "
"class as the default manager for your model by setting the "
"`use_for_related_fields` attribute on the manager class. This is documented "
"fully below_."
msgstr ""

# 6df610a0ae82436ca04f340c437df058
#: ../../topics/db/managers.txt:199
msgid "Custom managers and model inheritance"
msgstr ""

# 4131e3dbfbdf4db1a061279d436ffd58
#: ../../topics/db/managers.txt:201
msgid ""
"Class inheritance and model managers aren't quite a perfect match for each "
"other. Managers are often specific to the classes they are defined on and "
"inheriting them in subclasses isn't necessarily a good idea. Also, because "
"the first manager declared is the *default manager*, it is important to "
"allow that to be controlled. So here's how Django handles custom managers "
"and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

# 0a14fc7b43464913971f521eba18d86d
#: ../../topics/db/managers.txt:208
msgid ""
"Managers defined on non-abstract base classes are *not* inherited by child "
"classes. If you want to reuse a manager from a non-abstract base, redeclare "
"it explicitly on the child class. These sorts of managers are likely to be "
"fairly specific to the class they are defined on, so inheriting them can "
"often lead to unexpected results (particularly as far as the default manager "
"goes). Therefore, they aren't passed onto child classes."
msgstr ""

# c9ff57985c654aabb7ab720e96b30bf4
#: ../../topics/db/managers.txt:216
msgid ""
"Managers from abstract base classes are always inherited by the child class, "
"using Python's normal name resolution order (names on the child class "
"override all others; then come names on the first parent class, and so on). "
"Abstract base classes are designed to capture information and behavior that "
"is common to their child classes. Defining common managers is an appropriate "
"part of this common information."
msgstr ""

# 2db0fce5e48a4702a38a9e6f8ce4a971
#: ../../topics/db/managers.txt:223
msgid ""
"The default manager on a class is either the first manager declared on the "
"class, if that exists, or the default manager of the first abstract base "
"class in the parent hierarchy, if that exists. If no default manager is "
"explicitly declared, Django's normal default manager is used."
msgstr ""

# 311cd744a7064c9c8bcd649f5354a152
#: ../../topics/db/managers.txt:229
msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""

# 78e4766545924e4db525d54038795a5a
#: ../../topics/db/managers.txt:241
msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""

# 2ddf2e19d12a43a5bc56f93c5b3c9a44
#: ../../topics/db/managers.txt:248
msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""

# 698a56a86a90454089673c37b52de250
#: ../../topics/db/managers.txt:256
msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr ""

# 283c95b81903493e85f154da7f7a0331
#: ../../topics/db/managers.txt:259
msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""

# 73577152ac3e43ffb691235cc7e932ac
#: ../../topics/db/managers.txt:278
msgid "Implementation concerns"
msgstr ""

# 44d1421892814850a2aef9d6c66b6e04
#: ../../topics/db/managers.txt:280
msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work::"
msgstr ""

# 65fbb639e5d24d9185a181afd7681040
#: ../../topics/db/managers.txt:288
msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""

# 309639144505413cbd948635dd68cc87
#: ../../topics/db/managers.txt:291
msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

# ee9b89af46a64e5486262a5d4ea06601
#: ../../topics/db/managers.txt:302
msgid "Controlling automatic Manager types"
msgstr ""

# 5097ecc34493482db917d100b6cdaeca
#: ../../topics/db/managers.txt:304
msgid ""
"This document has already mentioned a couple of places where Django creates "
"a manager class for you: `default managers`_ and the \"plain\" manager used "
"to `access related objects`_. There are other places in the implementation "
"of Django where temporary plain managers are needed. Those automatically "
"created managers will normally be instances of the :class:`django.db.models."
"Manager` class."
msgstr ""

# c2141af666d5483ba6d144e76d3f04d0
#: ../../topics/db/managers.txt:314
msgid ""
"Throughout this section, we will use the term \"automatic manager\" to mean "
"a manager that Django creates for you -- either as a default manager on a "
"model with no managers, or to use temporarily when accessing related objects."
msgstr ""

# 7e6563f00fc1498ea8179e79fadf1b51
#: ../../topics/db/managers.txt:318
msgid ""
"Sometimes this default class won't be the right choice. One example is in "
"the :mod:`django.contrib.gis` application that ships with Django itself. All "
"``gis`` models must use a special manager class (:class:`~django.contrib.gis."
"db.models.GeoManager`) because they need a special queryset (:class:`~django."
"contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the "
"database.  It turns out that models which require a special manager like "
"this need to use the same manager class wherever an automatic manager is "
"created."
msgstr ""

# 2f682527e0ae4062afb6271b8204d3e9
#: ../../topics/db/managers.txt:326
msgid ""
"Django provides a way for custom manager developers to say that their "
"manager class should be used for automatic managers whenever it is the "
"default manager on a model. This is done by setting the "
"``use_for_related_fields`` attribute on the manager class::"
msgstr ""

# a351dcfd4ae94404bd74b0e147ce0242
#: ../../topics/db/managers.txt:336
msgid ""
"If this attribute is set on the *default* manager for a model (only the "
"default manager is considered in these situations), Django will use that "
"class whenever it needs to automatically create a manager for the class.  "
"Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

# ad32ec82ea2648ca91763ef9ef2acb13
#: ../../topics/db/managers.txt:343
msgid ""
"Given the purpose for which it's used, the name of this attribute "
"(``use_for_related_fields``) might seem a little odd. Originally, the "
"attribute only controlled the type of manager used for related field access, "
"which is where the name came from. As it became clear the concept was more "
"broadly useful, the name hasn't been changed. This is primarily so that "
"existing code will :doc:`continue to work </misc/api-stability>` in future "
"Django versions."
msgstr ""

# 06b3d00faae349fe98a57971c316ea04
#: ../../topics/db/managers.txt:352
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

# 65515b3e1f8142e38fe3810f184f4b38
#: ../../topics/db/managers.txt:354
msgid ""
"As already suggested by the `django.contrib.gis` example, above, the "
"``use_for_related_fields`` feature is primarily for managers that need to "
"return a custom ``QuerySet`` subclass. In providing this functionality in "
"your manager, there are a couple of things to remember."
msgstr ""

# c550a70738d449239fa7312f6ce5b1ee
#: ../../topics/db/managers.txt:360
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

# 75c4d577af18438e8ccbfdf02b89454b
#: ../../topics/db/managers.txt:362
msgid ""
"One reason an automatic manager is used is to access objects that are "
"related to from some other model. In those situations, Django has to be able "
"to see all the objects for the model it is fetching, so that *anything* "
"which is referred to can be retrieved."
msgstr ""

# 61e6499ff89a432bad2d9b950e61614e
#: ../../topics/db/managers.txt:367
msgid ""
"If you override the ``get_query_set()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_query_set()`` is not appropriate for use as an automatic "
"manager."
msgstr ""

# 7dfbeabc01ab445a9ebb8e0e3792f00c
#: ../../topics/db/managers.txt:372
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

# 15cf333cc8414466a5d468701d561fa7
#: ../../topics/db/managers.txt:374
msgid ""
"The ``use_for_related_fields`` attribute must be set on the manager *class*, "
"not on an *instance* of the class. The earlier example shows the correct way "
"to set it, whereas the following will not work::"
msgstr ""

# f5e4e7a857a446a7809190a3ba062b05
#: ../../topics/db/managers.txt:393
msgid ""
"You also shouldn't change the attribute on the class object after it has "
"been used in a model, since the attribute's value is processed when the "
"model class is created and not subsequently reread. Set the attribute on the "
"manager class when it is first defined, as in the initial example of this "
"section and everything will work smoothly."
msgstr ""

# 9abf15f33b7241e48a156df31b75462c
#: ../../topics/db/models.txt:3
msgid "Models"
msgstr ""

# a8778fa4bf1441e3a8ac23ec25054b1b
#: ../../topics/db/models.txt:11
msgid "The basics:"
msgstr ""

# 2cee3aee836e43a38ffa42c5bd39c438
#: ../../topics/db/models.txt:13
msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

# db8df4ee73464db4884b8dfe9e837398
#: ../../topics/db/models.txt:16
msgid "Each attribute of the model represents a database field."
msgstr ""

# 0e4519daf31b453ba5a9e003c55e704f
#: ../../topics/db/models.txt:18
msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""

# d7dcf4994bc849369a1c85b6af18aaaf
# de63a004acd9423093a81224f778a3df
#: ../../topics/db/models.txt:23 ../../topics/email.txt:17
msgid "Quick example"
msgstr ""

# 8d829fce0ad34d189e765a1ff3faeae8
#: ../../topics/db/models.txt:25
msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""

# 423c16acb587402d92169895ef9f7d9d
#: ../../topics/db/models.txt:34
msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""

# e2f6e1dcc45d462e8dc2daae5a4a62d1
#: ../../topics/db/models.txt:37
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

# c1736a9570c9473f9bbfac0bc026ba09
#: ../../topics/db/models.txt:47
msgid "Some technical notes:"
msgstr ""

# 2839dacd54d94b9d83c306f73ee66362
#: ../../topics/db/models.txt:49
msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details.."
msgstr ""

# ad846e4f4b284872ae6cdeb42a44e7cb
#: ../../topics/db/models.txt:53
msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""

# 188f58ac7b0f477491ac6e9c48c86419
#: ../../topics/db/models.txt:56
msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

# 0fcdb862ef744b4d828a2fcbfc714252
#: ../../topics/db/models.txt:61
msgid "Using models"
msgstr ""

# 92453b42ea3d47b2af380d480a1956af
#: ../../topics/db/models.txt:63
msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""

# 0b338ae35aa8448690dffee4f9b350a7
#: ../../topics/db/models.txt:68
msgid ""
"For example, if the models for your application live in the module ``mysite."
"myapp.models`` (the package structure that is created for an application by "
"the :djadmin:`manage.py startapp <startapp>` script), :setting:"
"`INSTALLED_APPS` should read, in part::"
msgstr ""

# e8612708bfae44febc8a1053d7d7d147
#: ../../topics/db/models.txt:79
msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py syncdb <syncdb>`."
msgstr ""

# 63329974e13c410ebae28b293396f4b0
#: ../../topics/db/models.txt:85
msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the :doc:"
"`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""

# a87c31cef3114634affb09384d7fde0b
# 02089226601f4b54946383129e959982
# 80297a823b2e425886df14e7fa1a3f30
# 51848e994b7b4a45b6ddd9b02dcd8891
# 078e142f242d446ea20e0a3826a88cd5
# 0bf75e61d4364955a3791be3f5a579c6
#: ../../topics/db/models.txt:91 ../../topics/db/queries.txt:258
#: ../../topics/db/queries.txt:1044 ../../topics/db/queries.txt:1093
#: ../../topics/db/transactions.txt:122 ../../topics/settings.txt:180
msgid "Example::"
msgstr ""

# b89b848a52b84b0eab6b28ae7f1b2b4f
# 43790a89d2904dccbf2e993415739567
#: ../../topics/db/models.txt:105 ../../topics/forms/modelforms.txt:40
msgid "Field types"
msgstr ""

# 726968b9e10040728ee4d9688f3ba4f3
#: ../../topics/db/models.txt:107
msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""

# 135f89457274497b9a79069ef15a5098
#: ../../topics/db/models.txt:111
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

# cdc9b4943d6b418595a31d0d9d7b9af6
#: ../../topics/db/models.txt:113
msgid ""
"The default :doc:`widget </ref/forms/widgets>` to use when rendering a form "
"field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

# 703a0b1903b04071b2ade2edb9e3005a
#: ../../topics/db/models.txt:116
msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""

# 31c6eb93f21246099cfd3131ef0991ec
#: ../../topics/db/models.txt:119
msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""

# d4a9bc60f1c1421b88dd8c8c4b757bca
#: ../../topics/db/models.txt:125
msgid "Field options"
msgstr ""

# 8092145249ca4ce8bb09b8ec33428e8e
#: ../../topics/db/models.txt:127
msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""

# f7405c383a774158a4b2767b8302524a
#: ../../topics/db/models.txt:133
msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

# 28b9e844fb4e4c1484afce6605016a0b
#: ../../topics/db/models.txt:139
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

# 5588e596a5054149b6668ace60707181
#: ../../topics/db/models.txt:143
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

# 7a7e1dcb47b9421a9910d16a6ffc517c
#: ../../topics/db/models.txt:145
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, form validation will allow "
"entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, "
"the field will be required."
msgstr ""

# fadce8b5033547d18ff94edc4586bce5
#: ../../topics/db/models.txt:153
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, the default form widget will be a select box "
"instead of the standard text field and will limit choices to the choices "
"given."
msgstr ""

# 9ac04b6b83b742bd8173d33c28839ae7
#: ../../topics/db/models.txt:158
msgid "A choices list looks like this::"
msgstr ""

# 87b1bb22933f4e1a93a4725b08ca4c02
#: ../../topics/db/models.txt:168
msgid ""
"The first element in each tuple is the value that will be stored in the "
"database, the second element will be displayed by the default form widget or "
"in a ModelChoiceField. Given an instance of a model object, the display "
"value for a choices field can be accessed using the ``get_FOO_display`` "
"method. For example::"
msgstr ""
"The first element in each tuple is the value that will be stored in the "
"database, the second element will be displayed by the default form widget or "
"in a ModelChoiceField. Given an instance of a model object, the display "
"value for a choices field can be accessed using the ``get_FOO_display`` "
"method. 예를 들어 ::"

# 9de4a48b1dc246d9a5622fb70783a6ad
#: ../../topics/db/models.txt:195
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

# 80ebb8bc8398491298b226914b2b7e9d
#: ../../topics/db/models.txt:200
msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""

# 7fff01f2e559473bac3015a6ab63d3e3
#: ../../topics/db/models.txt:204
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

# 876369b7b5fa467eb637ea876de29798
#: ../../topics/db/models.txt:206
msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""

# 8c02d43361a0431da49b5983e7dd0715
#: ../../topics/db/models.txt:214
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

# 4b51fbf64b7249e8ae1d760080764004
#: ../../topics/db/models.txt:216
msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""

# 47d4c9cb207c48acbcbcadc3a6047598
#: ../../topics/db/models.txt:223
msgid "Automatic primary key fields"
msgstr ""

# 0bc99ef4a51e48fdae97f78143beacec
#: ../../topics/db/models.txt:225
msgid "By default, Django gives each model the following field::"
msgstr ""

# a6e6ff9675ed48759bb9263d87359040
#: ../../topics/db/models.txt:229
msgid "This is an auto-incrementing primary key."
msgstr ""

# a6441c41389c4fe39385cba77d48f014
#: ../../topics/db/models.txt:231
msgid ""
"If you'd like to specify a custom primary key, just specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""

# bd46d475fe854fdbb07fbbae6c10ba52
#: ../../topics/db/models.txt:236
msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>`."
msgstr ""

# a51c83d3f10e4c8eba67c3e2bd24e8e2
#: ../../topics/db/models.txt:242
msgid "Verbose field names"
msgstr ""

# e2f274d84cb647d5a0ae5693e03caf54
#: ../../topics/db/models.txt:244
msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""

# 55cf3711951d437bba511f7701649699
#: ../../topics/db/models.txt:251
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

# 147a7b02378a462aa96889a86ee41917
#: ../../topics/db/models.txt:255
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

# dc52331d458f4ee8a0e7a732d157404e
#: ../../topics/db/models.txt:259
msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""

# db8f196a428745ad8d39169e90d542aa
#: ../../topics/db/models.txt:268
msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""

# 5b760b073b1b4fbc82b6b7e68df74c12
#: ../../topics/db/models.txt:273
msgid "Relationships"
msgstr ""

# ff9725bb6b6445f5aa38dc424a55fc99
#: ../../topics/db/models.txt:275
msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

# 977bacc605fb4fd6b7ff8e921d962b7b
#: ../../topics/db/models.txt:282
msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""

# 57b1fa9f831644c09d56d83a6b3c4f10
#: ../../topics/db/models.txt:286
msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 1351ef6036094bca921492df4d8ae166
#: ../../topics/db/models.txt:289
msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""

# 420a005332aa4f7fa45dfa36ca027285
#: ../../topics/db/models.txt:300
msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""

# 8a77fd7556e2480dad428bad2798ca20
#: ../../topics/db/models.txt:305
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can, of course, call the field whatever you "
"want. For example::"
msgstr ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can, of course, call the field whatever you "
"want. 예를 들어 ::"

# 9f25a645aa714a9ab1868103822606e8
#: ../../topics/db/models.txt:316
msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""

# 757927a2fdc140d2ba1b34ff2802d62b
#: ../../topics/db/models.txt:321
msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""

# fa3a9d1e250a4279ae5435795852cb86
#: ../../topics/db/models.txt:324
msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one>`."
msgstr ""

# 5329ef9840ad45f6832b8f7e738ebea1
#: ../../topics/db/models.txt:331
msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""

# cf9bed53fa324dae9b2cc53bc751be8b
#: ../../topics/db/models.txt:336
msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""

# 878b0a5d1d8c4735a5e53709b8b92fcc
#: ../../topics/db/models.txt:339
msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""

# 0672e540ff42436f8c78bd724c8829a7
#: ../../topics/db/models.txt:350
msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`; see :ref:`the model field reference <ref-"
"manytomany>` for details."
msgstr ""

# 7de7885dbf004b3495c69600ab5fb413
#: ../../topics/db/models.txt:356
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""

# dfd219d6a4e64ffcb41931e212170047
#: ../../topics/db/models.txt:360
msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""

# 3b1d8dbf66044961b8dfad99b81009bd
#: ../../topics/db/models.txt:364
msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :"
"class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas. "
"The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr ""

# c2ad0b2ebcec48028af7d8be346b991d
#: ../../topics/db/models.txt:373
msgid ""
"See the :doc:`Many-to-many relationship model example </topics/db/examples/"
"many_to_many>` for a full example."
msgstr ""

# f7b84149945448758b1dabf3a3856efc
#: ../../topics/db/models.txt:376
msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""

# 4aeeaa22163c4ea290bdb2901c218cc8
#: ../../topics/db/models.txt:384
msgid "Extra fields on many-to-many relationships"
msgstr ""

# 3bad470f867b4d07a01087c7ad19fe6d
#: ../../topics/db/models.txt:386
msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard :class:`~django.db."
"models.ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""

# 138a8f4884e74e2a983cc3b5acb2e808
#: ../../topics/db/models.txt:391
msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""

# 8cc528d8b91b46a79380e7c0ace6fc76
#: ../../topics/db/models.txt:398
msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""

# 58b4b83a3848424f924a4da109f4d88d
#: ../../topics/db/models.txt:425
msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the ManyToMany relation. This explicit "
"declaration defines how the two models are related."
msgstr ""

# 20d097ca2a3d4b6e8314f9af1718bfdd
#: ../../topics/db/models.txt:429
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

# 492bc3e4c2704f75864681e3afa17a0c
#: ../../topics/db/models.txt:431
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the target model (this would be ``Person`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# b35c6582192d487e9b2371401af0d2ae
#: ../../topics/db/models.txt:435
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# ff61b1aeb60d4c15a4dd211fd7d0c812
#: ../../topics/db/models.txt:439
msgid ""
"The only exception to this is a model which has a many-to-many relationship "
"to itself, through an intermediary model. In this case, two foreign keys to "
"the same model are permitted, but they will be treated as the two "
"(different) sides of the many-to-many relation."
msgstr ""

# bb31f691188b495786317c86d438eb1b
#: ../../topics/db/models.txt:445
msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

# b8fde6c203524d12abc2845bc6592fcc
#: ../../topics/db/models.txt:450
msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""

# 920a8979b5e64f49b865e937e3fc804a
#: ../../topics/db/models.txt:472
msgid ""
"Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or "
"assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

# 227a5b426e4342d8aef18e2c3d6a9c42
#: ../../topics/db/models.txt:482
msgid ""
"Why? You can't just create a relationship between a ``Person`` and a "
"``Group`` - you need to specify all the detail for the relationship required "
"by the ``Membership`` model. The simple ``add``, ``create`` and assignment "
"calls don't provide a way to specify this extra detail. As a result, they "
"are disabled for many-to-many relationships that use an intermediate model. "
"The only way to create this type of relationship is to create instances of "
"the intermediate model."
msgstr ""

# a3db2de6cb4942c1947416404433b0ee
#: ../../topics/db/models.txt:490
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is "
"disabled for similar reasons. However, the :meth:`~django.db.models.fields."
"related.RelatedManager.clear` method can be used to remove all many-to-many "
"relationships for an instance::"
msgstr ""

# 2772e91a465d4009a09029d08be21064
#: ../../topics/db/models.txt:498
msgid ""
"Once you have established the many-to-many relationships by creating "
"instances of your intermediate model, you can issue queries. Just as with "
"normal many-to-many relationships, you can query using the attributes of the "
"many-to-many-related model::"
msgstr ""

# edd76c1848f94ec2907b333981109eb4
#: ../../topics/db/models.txt:507
msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr ""

# 87a3151eb0df44c688a61c475e2a17e0
#: ../../topics/db/models.txt:515
msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr ""

# a36deb373926425fb8454024c18a0917
#: ../../topics/db/models.txt:524
msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""

# 6b451701df924f30b1c8a46b9343d1d9
#: ../../topics/db/models.txt:538
msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""

# 64cf390b6b99450da16cd892152da15d
#: ../../topics/db/models.txt:542
msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""

# 4f45477d62be416a9bf837785294b57b
#: ../../topics/db/models.txt:545
msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 35d6970cca31452b851388c665eb69fb
#: ../../topics/db/models.txt:548
msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

# 80e0c2de780c49e5b29a808b47d23351
#: ../../topics/db/models.txt:558
msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the "
"model field reference <ref-onetoone>` for details."
msgstr ""

# d9cdb65c5c924478956eb1fe3a3fb200
#: ../../topics/db/models.txt:566
msgid ""
"See the :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` for a full example."
msgstr ""

# fb976dfe063c45f78769871da07b4877
#: ../../topics/db/models.txt:569
msgid ""
":class:`~django.db.models.OneToOneField` fields also accept one specific, "
"optional ``parent_link`` argument described in the :ref:`model field "
"reference <ref-onetoone>`."
msgstr ""

# 3ab9eea2044b403dafdc0c4639859925
#: ../../topics/db/models.txt:573
msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""

# cc87941ebb6542e891f779ec55b38a19
#: ../../topics/db/models.txt:580
msgid "Models across files"
msgstr ""

# ee868e10115d4a5fae6c826ae6562c62
#: ../../topics/db/models.txt:582
msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined. "
"Then, just refer to the other model class wherever needed. For example::"
msgstr ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined. "
"Then, just refer to the other model class wherever needed. 예를 들어 ::"

# a7717b988e17459282a664bb8879a14b
#: ../../topics/db/models.txt:593
msgid "Field name restrictions"
msgstr ""

# 560103e2c6cb47b6b4fb0d0dde7c8f20
#: ../../topics/db/models.txt:595
msgid "Django places only two restrictions on model field names:"
msgstr ""

# c9fd740faf3146e3b5c03bd20e8d98c2
#: ../../topics/db/models.txt:597
msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. 예를 들어 ::"

# be6241dc1a5849679018fabb5d212c74
#: ../../topics/db/models.txt:603
msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. 예를 들어 ::"

# 5552764de9cb44448c65f63abf0beabe
#: ../../topics/db/models.txt:609
msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""

# 23b1965792d5465a89342cdaba469f22
#: ../../topics/db/models.txt:613
msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""

# 119b681eefa241c89544b58891dbac9f
#: ../../topics/db/models.txt:619
msgid "Custom field types"
msgstr ""

# 7ad0c84ffda24937a45797a24da2fdbd
#: ../../topics/db/models.txt:621
msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

# a40185fca3ac4c689ac035fabad35c10
#: ../../topics/db/models.txt:629
msgid "Meta options"
msgstr ""

# 7e4c412a6cd94ddf90ced20c566f6fe4
#: ../../topics/db/models.txt:631
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

# dacbb937087d4927a3598b1cad3341ef
#: ../../topics/db/models.txt:640
msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""

# c003469e20b1429990ab7c26fdf506ce
#: ../../topics/db/models.txt:646
msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""

# 59c0aa4a016d42cbaa292254c1757d95
#: ../../topics/db/models.txt:652
msgid "Model methods"
msgstr ""

# 129d8407e36147db9fd2d9b69d2dcc69
#: ../../topics/db/models.txt:654
msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""

# 71e59ddec9bc43099c28321c05949da6
#: ../../topics/db/models.txt:658
msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""

# 2888fd219dde49b8b2a5165d11fcd26c
#: ../../topics/db/models.txt:661
msgid "For example, this model has a few custom methods::"
msgstr ""

# a2bf06ca41534a169b61f2211e5df520
#: ../../topics/db/models.txt:692
msgid "The last method in this example is a :term:`property`."
msgstr ""

# c3d1f90b23594dd3a467a8f8ce1dcba9
#: ../../topics/db/models.txt:694
msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""

# 32583e514dcc4fa89545063510a7a57b
#: ../../topics/db/models.txt:700
msgid ""
"A Python \"magic method\" that returns a unicode \"representation\" of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""

# fd88a5c981f24abda7b7743d85fd3652
#: ../../topics/db/models.txt:706
msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""

# 5e825d4ecc88425db38429e94097cb58
#: ../../topics/db/models.txt:710
msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""

# 7c222a21df1041ad91aadb2aa3e9ef62
#: ../../topics/db/models.txt:714
msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""

# 7e42c7f963574809b3037c90557c3c47
#: ../../topics/db/models.txt:720
msgid "Overriding predefined model methods"
msgstr ""

# cfeb07695e0a48b99dcc42d66938eac1
#: ../../topics/db/models.txt:722
msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""

# 7d7074b194e6428ba27e9a04c67f0e78
#: ../../topics/db/models.txt:727
msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""

# 191ff5ef0db94247887252ed36a563e3
#: ../../topics/db/models.txt:730
msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

# ea6bda5f421741c79976ad19c58a3a1c
#: ../../topics/db/models.txt:743
msgid "You can also prevent saving::"
msgstr ""

# 53e03995eb084925a90a1f3faec4dcb3
#: ../../topics/db/models.txt:755
msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the "
"object still gets saved into the database. If you forget to call the "
"superclass method, the default behavior won't happen and the database won't "
"get touched."
msgstr ""

# ad59ca9bf47b4230943dab9295e3b5f6
#: ../../topics/db/models.txt:761
msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""

# 4a23bbcb914b4bd19b52befad1ec0bce
#: ../../topics/db/models.txt:770
msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a "
"QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets "
"executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :"
"data:`~django.db.models.signals.post_delete` signals."
msgstr ""

# 8112236ff30147779c1f35d15e2fc0a9
#: ../../topics/db/models.txt:776
msgid ""
"Unfortunately, there isn't a workaround when :meth:`creating<django.db."
"models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models."
"query.QuerySet.update>` objects in bulk, since none of :meth:`~Model.save()"
"`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db.models."
"signals.post_save` are called."
msgstr ""

# 80b49f84699044a4b24fb423ec18882d
#: ../../topics/db/models.txt:784
msgid "Executing custom SQL"
msgstr ""

# a3101fdd9b924b63bec1d5066b521489
#: ../../topics/db/models.txt:786
msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

# b930e4fbc000427285a4148ec0347763
#: ../../topics/db/models.txt:793
msgid "Model inheritance"
msgstr ""

# 721c02a68cbd48139df7c5427f456363
#: ../../topics/db/models.txt:795
msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python. The only decision you have to make is whether "
"you want the parent models to be models in their own right (with their own "
"database tables), or if the parents are just holders of common information "
"that will only be visible through the child models."
msgstr ""

# 08b2c3aec01440e5996acfe6bdaf6802
#: ../../topics/db/models.txt:802
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

# c802822dedd74e48af94757011f11d37
#: ../../topics/db/models.txt:804
msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""

# 1548280eeca24d95b83e51e625979fc0
#: ../../topics/db/models.txt:808
msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""

# 256319c6fc404b0d990cd45e33a1c352
#: ../../topics/db/models.txt:811
msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""

# 2d96611970c0467c834dc0d915bd42d2
#: ../../topics/db/models.txt:818
msgid "Abstract base classes"
msgstr ""

# 84ab2a23b8b94efea74ad99391ef447f
#: ../../topics/db/models.txt:820
msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class. It is an error to have fields in the abstract base class with the "
"same name as those in the child (and Django will raise an exception)."
msgstr ""

# 4ed48c80a024483c92b3d844876c0612
# eec54c71cd1c450291ad5cc9129d8434
#: ../../topics/db/models.txt:829 ../../topics/i18n/translation.txt:593
msgid "An example::"
msgstr ""

# 450028468c254078bd5755c1b8c4c92d
#: ../../topics/db/models.txt:841
msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

# 569d5add8b1045a6a80d41c81ae4d026
#: ../../topics/db/models.txt:846
msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"whilst still only creating one database table per child model at the "
"database level."
msgstr ""

# bbc01239a73443ccbde6bba1cd6b84b6
#: ../../topics/db/models.txt:851
msgid "``Meta`` inheritance"
msgstr ""

# 704ab9bae2994c82b0c726f770cbef7e
#: ../../topics/db/models.txt:853
msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. 예를 들어 ::"

# 7b3329a0ac784040a937a78628edad89
#: ../../topics/db/models.txt:870
msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr ""

# 8dc399b2170440dd81bae598aa4be935
#: ../../topics/db/models.txt:877
msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""

# d73074cb2db44b77a894fb7d41fbdcaf
#: ../../topics/db/models.txt:885
msgid "Be careful with ``related_name``"
msgstr ""

# b23f22ae11a8457dadf8c60beb9e311e
#: ../../topics/db/models.txt:887
msgid ""
"If you are using the :attr:`~django.db.models.ForeignKey.related_name` "
"attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always "
"specify a *unique* reverse name for the field. This would normally cause a "
"problem in abstract base classes, since the fields on this class are "
"included into each of the child classes, with exactly the same values for "
"the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) "
"each time."
msgstr ""

# 30ffc88649c74cd59db70113ecacbaed
#: ../../topics/db/models.txt:893
msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` in an abstract base class (only), part of the name "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

# e7a325d0615b4bdca5ed58f5064be241
#: ../../topics/db/models.txt:897
msgid ""
"``'%(class)s'`` is replaced by the lower-cased name of the child class that "
"the field is used in."
msgstr ""

# 068eafcc2eec45248c8a38626dd0e210
#: ../../topics/db/models.txt:899
msgid ""
"``'%(app_label)s'`` is replaced by the lower-cased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""

# 392269d8afff4e8eb79a4e08c824921b
#: ../../topics/db/models.txt:904
msgid "For example, given an app ``common/models.py``::"
msgstr ""

# 508006fcafaa48888c50701db804e059
#: ../../topics/db/models.txt:918
msgid "Along with another app ``rare/models.py``::"
msgstr ""

# 8ecceef3f7374e0ca47db2210ab87e35
#: ../../topics/db/models.txt:925
msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related``, whilst the reverse name of the ``common.ChildB."
"m2m`` field will be ``common_childb_related``, and finally the reverse name "
"of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up "
"to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to "
"construct your related name, but if you forget to use it, Django will raise "
"errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

# 0322c8b0c58e420ebeeb6977a710e965
#: ../../topics/db/models.txt:933
msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""

# e87c957b5cf44c64a8170c8227f3f214
#: ../../topics/db/models.txt:945
msgid "Multi-table inheritance"
msgstr ""

# 5800af06e4044e58a15fec6b4f3920f5
#: ../../topics/db/models.txt:947
msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). 예를 들어 ::"

# 369bfa10c09f46769bcfcc54c39eef14
#: ../../topics/db/models.txt:962
msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""

# 52be446b714c4b9d807c3138be560f61
#: ../../topics/db/models.txt:969
msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lower-case "
"version of the model name::"
msgstr ""

# cb8bc00edd5a4472bd645a6afbb259eb
#: ../../topics/db/models.txt:978
msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist "
"exception."
msgstr ""

# 8ebdcf70d2d44861b409044415ae2e5e
#: ../../topics/db/models.txt:983
msgid "``Meta`` and multi-table inheritance"
msgstr ""

# e243efae301246fd8564f6518dc5a1c4
#: ../../topics/db/models.txt:985
msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""

# fd26b9c5cfc64b49b840e297048e5050
#: ../../topics/db/models.txt:992
msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

# 4622e22c29394c2db7df8d072c532d0b
#: ../../topics/db/models.txt:999
msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""

# 96107409ec8c408b80e8d6b0fae183ee
#: ../../topics/db/models.txt:1009
msgid "Inheritance and reverse relations"
msgstr ""

# 19d21bb3f1c54ba895472c05ff562119
#: ../../topics/db/models.txt:1011
msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of another model, you **must** specify the :"
"attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise an error when you run :djadmin:"
"`validate` or :djadmin:`syncdb`."
msgstr ""

# ba8c036506e547d7bca39e3a6ad18af0
#: ../../topics/db/models.txt:1024
msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

# 17aa033b6b204eab8f18bde39108d812
#: ../../topics/db/models.txt:1033
msgid "Specifying the parent link field"
msgstr ""

# 4fc07d72e42b4e21b280a46d2f73ead5
#: ../../topics/db/models.txt:1035
msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back any non-abstract parent models. "
"If you want to control the name of the attribute linking back to the parent, "
"you can create your own :class:`~django.db.models.OneToOneField` and set :"
"attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""

# a86f1319b5074277818bdcd46e3ebe06
#: ../../topics/db/models.txt:1046
msgid "Proxy models"
msgstr ""

# 1d432d7c3db84488bd5f795dd2b9b645
#: ../../topics/db/models.txt:1048
msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""

# 176f385c489948919a64ac39ee306471
#: ../../topics/db/models.txt:1055
msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""

# e7c1d815548440a396f36427fab5e35d
#: ../../topics/db/models.txt:1062
msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""

# 382045477b9a47159e0e169efdd0bd8f
#: ../../topics/db/models.txt:1066
msgid ""
"For example, suppose you want to add a method to the standard :class:"
"`~django.contrib.auth.models.User` model that will be used in your "
"templates. You can do it like this::"
msgstr ""

# 58d67c3b6a1447ea8380217785715ab8
#: ../../topics/db/models.txt:1079
msgid ""
"The ``MyUser`` class operates on the same database table as its parent :"
"class:`~django.contrib.auth.models.User` class. In particular, any new "
"instances of :class:`~django.contrib.auth.models.User` will also be "
"accessible through ``MyUser``, and vice-versa::"
msgstr ""

# 463ce068476845e9b6c6151e1e45e0e0
#: ../../topics/db/models.txt:1088
msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. The standard :class:`~django.contrib.auth.models.User` model has no "
"ordering defined on it (intentionally; sorting is expensive and we don't "
"want to do it all the time when we fetch users). You might want to regularly "
"order by the ``username`` attribute when you use the proxy. This is easy::"
msgstr ""

# 2281efbf7ec04bce801a3ac57830cb25
#: ../../topics/db/models.txt:1099
msgid ""
"Now normal :class:`~django.contrib.auth.models.User` queries will be "
"unordered and ``OrderedUser`` queries will be ordered by ``username``."
msgstr ""

# 169a02335aaf4fba82d66ed000f0f43d
#: ../../topics/db/models.txt:1103
msgid "QuerySets still return the model that was requested"
msgstr ""

# 4a8675913aa04213abdcdd6278342bb1
#: ../../topics/db/models.txt:1105
msgid ""
"There is no way to have Django return, say, a ``MyUser`` object whenever you "
"query for :class:`~django.contrib.auth.models.User` objects. A queryset for "
"``User`` objects will return those types of objects. The whole point of "
"proxy objects is that code relying on the original ``User`` will use those "
"and your own code can use the extensions you included (that no other code is "
"relying on anyway). It is not a way to replace the ``User`` (or any other) "
"model everywhere with something of your own creation."
msgstr ""

# a5cf4efe02974fe68255cc0f074ef6d7
#: ../../topics/db/models.txt:1114
msgid "Base class restrictions"
msgstr ""

# 4b2fac37f802418baff27d2603b2986a
#: ../../topics/db/models.txt:1116
msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields."
msgstr ""

# f0fa54aee11049e195125ddc97b7e876
#: ../../topics/db/models.txt:1122
msgid ""
"Proxy models inherit any ``Meta`` options that they don't define from their "
"non-abstract model parent (the model they are proxying for)."
msgstr ""

# f58dff53382340d9bb8a739be3e1f14c
#: ../../topics/db/models.txt:1126
msgid "Proxy model managers"
msgstr ""

# 92c994a8a2d04f8b8d95aa4024a37a08
#: ../../topics/db/models.txt:1128
msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""

# 81ae350b4ff546568bab8cee1d450490
#: ../../topics/db/models.txt:1133
msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``User`` model like this::"
msgstr ""

# 87aff2d4687740f281964a168f115430
#: ../../topics/db/models.txt:1145
msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""

# eae55f0617b04e4c80f2111c7ec7975e
#: ../../topics/db/models.txt:1161
msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""

# 104c03bac047445399d6e232424f5be1
#: ../../topics/db/models.txt:1167
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

# fb51970fa8da43d1b2c99be052a7dfc1
#: ../../topics/db/models.txt:1169
msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class. The two alternatives are not quite the same and it's "
"worth considering which one you should use."
msgstr ""

# 9b1d2007e6724f78abb3199a85dc3ec2
#: ../../topics/db/models.txt:1174
msgid ""
"One difference is that you can (and, in fact, must unless you want an empty "
"model) specify model fields on models with ``Meta.managed=False``. You "
"could, with careful setting of :attr:`Meta.db_table <django.db.models."
"Options.db_table>` create an unmanaged model that shadowed an existing model "
"and add Python methods to it. However, that would be very repetitive and "
"fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

# 6f1a9b08a0b64ee1b415c7a9e1a13d00
#: ../../topics/db/models.txt:1182
msgid ""
"The other difference that is more important for proxy models, is how model "
"managers are handled. Proxy models are intended to behave exactly like the "
"model they are proxying for. So they inherit the parent model's managers, "
"including the default manager. In the normal multi-table model inheritance "
"case, children do not inherit managers from their parents as the custom "
"managers aren't always appropriate when extra fields are involved. The :ref:"
"`manager documentation <custom-managers-and-inheritance>` has more details "
"about this latter case."
msgstr ""

# c8689be903fc454aacbc4a87d242f932
#: ../../topics/db/models.txt:1191
msgid ""
"When these two features were implemented, attempts were made to squash them "
"into a single option. It turned out that interactions with inheritance, in "
"general, and managers, in particular, made the API very complicated and "
"potentially difficult to understand and use. It turned out that two options "
"were needed in any case, so the current separation arose."
msgstr ""

# be061662e1b84de5b5c63de8db2a5801
#: ../../topics/db/models.txt:1197
msgid "So, the general rules are:"
msgstr ""

# 1495db4e659144209d34d5b190ebc9d5
#: ../../topics/db/models.txt:1199
msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""

# 30ce6788105b422080ba729dc364d5bc
#: ../../topics/db/models.txt:1203
msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""

# a8077bcd68ef4b1db81b0b1d10a42b5f
#: ../../topics/db/models.txt:1209
msgid "Multiple inheritance"
msgstr ""

# 2302724bbda14295bf617157090114a4
#: ../../topics/db/models.txt:1211
msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""

# 751b8ade28df4d6eba9abb9617f72ded
#: ../../topics/db/models.txt:1218
msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""

# 1a7de5ab869a40e18141aab20bf40538
#: ../../topics/db/models.txt:1226
msgid "Field name \"hiding\" is not permitted"
msgstr ""

# bd43ca8e63894cd1af94c4786fff6aea
#: ../../topics/db/models.txt:1228
msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this is not "
"permitted for attributes that are :class:`~django.db.models.Field` instances "
"(at least, not at the moment). If a base class has a field called "
"``author``, you cannot create another model field called ``author`` in any "
"class that inherits from that base class."
msgstr ""

# 7f4c19baadbd42ce823bbb9f01602385
#: ../../topics/db/models.txt:1235
msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""

# 76002af1cefe40faa571b4362e5fe081
#: ../../topics/db/models.txt:1242
msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""

# cdb3db504cec41a1bc518326d740e28f
#: ../../topics/db/models.txt:1250
msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""

# bdcc524c1a1a437b99daa00b3c389401
#: ../../topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr ""

# a001863aedda4c58bb26345759b4017e
#: ../../topics/db/multi-db.txt:5
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

# d566da03532c4bea85d6c7acf52e53c4
#: ../../topics/db/multi-db.txt:11
msgid "Defining your databases"
msgstr ""

# 5f9bcae2a41742f2a95d51069c3e1853
#: ../../topics/db/multi-db.txt:13
msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""

# 88dc86a1d3194af6bb4a451e978a6971
#: ../../topics/db/multi-db.txt:21
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected. If you don't have a ``default`` "
"database, you need to be careful to always specify the database that you "
"want to use."
msgstr ""

# 3921f2b598e1440da7ad995fd09775c3
#: ../../topics/db/multi-db.txt:27
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

# c15971c7f38243dd962db4ccd2d3ff30
#: ../../topics/db/multi-db.txt:48
msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.db.utils."
"ConnectionDoesNotExist`` exception."
msgstr ""

# 18f6fe26e5364ce8b706081e7a82b520
#: ../../topics/db/multi-db.txt:53
msgid "Synchronizing your databases"
msgstr ""

# 83234605379d4ee99c1dec5515f93cd4
#: ../../topics/db/multi-db.txt:55
msgid ""
"The :djadmin:`syncdb` management command operates on one database at a time. "
"By default, it operates on the ``default`` database, but by providing a :"
"djadminopt:`--database` argument, you can tell syncdb to synchronize a "
"different database. So, to synchronize all models onto all databases in our "
"example, you would need to call::"
msgstr ""

# d0ad14da54be47349fb89217de3056c8
#: ../../topics/db/multi-db.txt:64
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

# ae7470e4078948a08dfe7eb767ef5cf9
#: ../../topics/db/multi-db.txt:69
msgid ""
"Alternatively, if you want fine-grained control of synchronization, you can "
"pipe all or part of the output of :djadmin:`sqlall` for a particular "
"application directly into your database prompt, like this::"
msgstr ""

# 7b20082da38a4893bf5bdd75be0497d9
#: ../../topics/db/multi-db.txt:76
msgid "Using other management commands"
msgstr ""

# b7a218aaf5ee44068cf23adb92ba968d
#: ../../topics/db/multi-db.txt:78
msgid ""
"The other ``django-admin.py`` commands that interact with the database "
"operate in the same way as :djadmin:`syncdb` -- they only ever operate on "
"one database at a time, using :djadminopt:`--database` to control the "
"database used."
msgstr ""

# 6c76d409c44146cc9df2dfa05d4451ab
#: ../../topics/db/multi-db.txt:86
msgid "Automatic database routing"
msgstr ""

# e0cd89ae017f4a47905da7a77c83a79f
#: ../../topics/db/multi-db.txt:88
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""

# 9aa4c210dbad4070b6a587ba44d5b225
#: ../../topics/db/multi-db.txt:95
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

# fad406f1812840df855b33e2223ce7b5
#: ../../topics/db/multi-db.txt:101
msgid "Database routers"
msgstr ""

# 8ff141a2e4614e569971031c1b6972b8
#: ../../topics/db/multi-db.txt:103
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

# d2209517d9344e1c8285f61c6d144e17
#: ../../topics/db/multi-db.txt:107
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

# 755d7ce6bf4e4f4fba5b907538532e08
# 7177ea6ef51b413e8049fddda6b264ea
#: ../../topics/db/multi-db.txt:110 ../../topics/db/multi-db.txt:122
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""

# 0abc55d2335042999a3bf9864a547fb4
# f4e40e4b26784eab8c0688aaec1e9d84
#: ../../topics/db/multi-db.txt:115 ../../topics/db/multi-db.txt:127
msgid "Returns None if there is no suggestion."
msgstr ""

# 63cabe86574d477db08b1377e854bfb6
#: ../../topics/db/multi-db.txt:119
msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""

# 2b8c647acbe74563a76cc0c1db7586f5
#: ../../topics/db/multi-db.txt:131
msgid ""
"Return True if a relation between obj1 and obj2 should be allowed, False if "
"the relation should be prevented, or None if the router has no opinion. This "
"is purely a validation operation, used by foreign key and many to many "
"operations to determine if a relation should be allowed between two objects."
msgstr ""

# 048bb430579c405bbb536bc2490d88f3
#: ../../topics/db/multi-db.txt:139
msgid ""
"Determine if the ``model`` should be synchronized onto the database with "
"alias ``db``. Return True if the model should be synchronized, False if it "
"should not be synchronized, or None if the router has no opinion. This "
"method can be used to determine the availability of a model on a given "
"database."
msgstr ""

# 5cc92e418ed14a36acb1bab57d3e1fca
#: ../../topics/db/multi-db.txt:145
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""

# c45f45258e3f4ac6997a7886420f882e
#: ../../topics/db/multi-db.txt:152
msgid "Hints"
msgstr ""

# e61597920ae441d3a088baf8fe28a70c
#: ../../topics/db/multi-db.txt:154
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

# c78ca22c0cdd4f27acfe20a5d67fb64c
#: ../../topics/db/multi-db.txt:157
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

# 61de6f0cb1f04522a229f52ece45b822
#: ../../topics/db/multi-db.txt:166
msgid "Using routers"
msgstr ""

# 2aa247e4d8b840c79b71c10f743f048a
#: ../../topics/db/multi-db.txt:168
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

# e2faa32a63ff4ea698e279bf8500c704
#: ../../topics/db/multi-db.txt:173
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

# e44af2cd45d54297840b4fcadb482d16
# 61cebf2a927d4eb59dcc68be53830847
# d3157206e7e645419bd7bbb35f4a2c48
#: ../../topics/db/multi-db.txt:183 ../../topics/db/tablespaces.txt:45
#: ../../topics/logging.txt:240
msgid "An example"
msgstr ""

# 8ff5773a696e4b13a07e4408a06464e8
#: ../../topics/db/multi-db.txt:187
msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

# 331e444c353942c599c16ab898b5c7e7
#: ../../topics/db/multi-db.txt:192
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

# 504163322fd04a1da59238110618d277
#: ../../topics/db/multi-db.txt:198
msgid ""
"The master/slave configuration described is also flawed -- it doesn't "
"provide any solution for handling replication lag (i.e., query "
"inconsistencies introduced because of the time taken for a write to "
"propagate to the slaves). It also doesn't consider the interaction of "
"transactions with the database utilization strategy."
msgstr ""

# cccc4ae07b46415a8a4ffada51415b37
#: ../../topics/db/multi-db.txt:204
msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a master/slave setup with two read "
"slaves. Here are the settings specifying these databases::"
msgstr ""

# b933dde6c2be45dda5183a2635d59ee3
#: ../../topics/db/multi-db.txt:237
msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` app to ``auth_db``::"
msgstr ""

# 527c446f84d04fc7a6bbbfc49b5680c3
#: ../../topics/db/multi-db.txt:281
msgid ""
"And we also want a router that sends all other apps to the master/slave "
"configuration, and randomly chooses a slave to read from::"
msgstr ""

# 04560a8bbae046ac998d2ac1a3b14d66
#: ../../topics/db/multi-db.txt:316
msgid ""
"Finally, in the settings file, we add the following (substituting ``path.to."
"`` with the actual python path to the module(s) where the routers are "
"defined)::"
msgstr ""

# 15b51e7616364bb4a61f5718e9dcdc30
#: ../../topics/db/multi-db.txt:322
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order the are listed in the :setting:`DATABASE_ROUTERS` "
"setting . In this example, the ``AuthRouter`` is processed before the "
"``MasterSlaveRouter``, and as a result, decisions concerning the models in "
"``auth`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all "
"nature of the MasterSlaveRouter implementation would mean that all models "
"would be available on all databases."
msgstr ""

# ded5fd6576834b4ca096afab33423074
#: ../../topics/db/multi-db.txt:333
msgid "With this setup installed, lets run some Django code::"
msgstr ""

# 037a1defb5f0476eb90d599441671e33
#: ../../topics/db/multi-db.txt:360
msgid "Manually selecting a database"
msgstr ""

# 3498967ee0374d3099f1b27af18d639d
#: ../../topics/db/multi-db.txt:362
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

# 453f1256cdb14df6891c4bef988a9fb4
#: ../../topics/db/multi-db.txt:367
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

# f93942f52045422aae8059f612511d98
#: ../../topics/db/multi-db.txt:369
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

# 9c7ec8f925984ec184681e1f66e7e055
#: ../../topics/db/multi-db.txt:373
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. 예를 들어 ::"

# 69883a4d2b074977ad03dcd6ac6157b3
#: ../../topics/db/multi-db.txt:386
msgid "Selecting a database for ``save()``"
msgstr ""

# 3b13635de82f4ff4b9a961f59987927a
#: ../../topics/db/multi-db.txt:388
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

# 4370f8dc1df044cfab8ede85113aedf2
#: ../../topics/db/multi-db.txt:391
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

# 85edbdb4f92246118e8f79fd44f322e4
#: ../../topics/db/multi-db.txt:396
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

# 02ffb316d65a4767a4cf6bd7edfee1a1
#: ../../topics/db/multi-db.txt:400
msgid "Moving an object from one database to another"
msgstr ""

# 4b290558eb5341748bb26efa88995362
#: ../../topics/db/multi-db.txt:402
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

# 44012614e17a44fc8d03f55d30ab3d58
#: ../../topics/db/multi-db.txt:407
msgid "Consider the following example::"
msgstr ""

# 72b035c6d58f4d648e635412742d443e
#: ../../topics/db/multi-db.txt:413
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues a SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

# d69b430abb4349cc9579563946f1849e
#: ../../topics/db/multi-db.txt:418
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

# 96873399069d48be9997a588d53dacf2
#: ../../topics/db/multi-db.txt:424
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

# 9c6c76d28b434f75a3484ab58e14ef5d
#: ../../topics/db/multi-db.txt:428
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

# 4d6916d869924c8b8103d295a7b623ff
#: ../../topics/db/multi-db.txt:438
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does a SQL ``INSERT``::"
msgstr ""

# 494723881d704dfbbf2310f931b458db
#: ../../topics/db/multi-db.txt:445
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""

# c7b89238e4df4b69a4fabc4eb61570ea
#: ../../topics/db/multi-db.txt:451
msgid "Selecting a database to delete from"
msgstr ""

# d92f4f6c40954d03811da059fedbaa96
#: ../../topics/db/multi-db.txt:453
msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""

# 940a04f6505447e588a2526ff0bf0143
#: ../../topics/db/multi-db.txt:460
msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""

# 087e495cc9504c1ca18c0812741a164f
#: ../../topics/db/multi-db.txt:464
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

# ab5541ca1a4c4572897ddc356fa3af76
#: ../../topics/db/multi-db.txt:471
msgid "Using managers with multiple databases"
msgstr ""

# 93d5c9006f5f4f34b88ab8547b220b5c
#: ../../topics/db/multi-db.txt:473
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""

# d65cb7365119448daca5c7769b497698
#: ../../topics/db/multi-db.txt:476
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects.using"
"('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""

# 789f1db9ee674ff2b266111e78b9bb7c
#: ../../topics/db/multi-db.txt:486
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

# 70d8ba6af1af4ef783942d744b5a35ed
#: ../../topics/db/multi-db.txt:489
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

# cc8534d9935f41489d99c6177bc399df
#: ../../topics/db/multi-db.txt:491
msgid ""
"If you're overriding ``get_query_set()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

# f80da21755b540f093aab99ea2c0f21d
#: ../../topics/db/multi-db.txt:496
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_query_set`` method, you could do this::"
msgstr ""

# 4982436772a3468ba96dc7981b4e56ad
#: ../../topics/db/multi-db.txt:507
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

# 7dedc7b0420f47409facf9609f9b4943
#: ../../topics/db/multi-db.txt:509
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""

# a9304c053adb47459e95d204f649a4dd
#: ../../topics/db/multi-db.txt:515
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

# 85e6114d81794a4a8bfc347292fa9ffd
#: ../../topics/db/multi-db.txt:544
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

# 1bcfffa1ad6945e1bbda21b214f7581e
#: ../../topics/db/multi-db.txt:550
msgid ""
"Inlines can be handled in a similar fashion. They require three customized "
"methods::"
msgstr ""

# a625e0a58b5f4e66851d6baadc656002
#: ../../topics/db/multi-db.txt:569
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

# e06c027b3b5949a39e0e3929439de60f
#: ../../topics/db/multi-db.txt:587
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have an tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

# b3e89cd9a8f74741ad2b92be587417e6
#: ../../topics/db/multi-db.txt:594
msgid "Using raw cursors with multiple databases"
msgstr ""

# 08bef95da9cb473c8f1aaa48b00c2842
#: ../../topics/db/multi-db.txt:596
msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""

# c01ab7a6909a4558b1e0ce0aedfff5b3
#: ../../topics/db/multi-db.txt:606
msgid "Limitations of multiple databases"
msgstr ""

# 1fa9bc20bc1d4a9ab63658d47f5cb4db
#: ../../topics/db/multi-db.txt:611
msgid "Cross-database relations"
msgstr ""

# 08ec6f8ae69a413ea6533d159933e870
#: ../../topics/db/multi-db.txt:613
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

# 754bdd4a9628444c9e78304165a1545f
#: ../../topics/db/multi-db.txt:619
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

# 832fb0b1a85d4270a51e4a1be9048905
#: ../../topics/db/multi-db.txt:625
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

# 83b5c23d37ca4b8eac47502d71bfaec9
#: ../../topics/db/multi-db.txt:629
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""

# c0c8108e11b24edfb9c72d1866818828
#: ../../topics/db/multi-db.txt:637
msgid "Behavior of contrib apps"
msgstr ""

# 606403bebe5a4950b64c81af80173fb5
#: ../../topics/db/multi-db.txt:639
msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""

# 23eb6340da324328a1befdd912bc9d9b
#: ../../topics/db/multi-db.txt:643
msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites."
"Site`` can be stored in any database, given a suitable router."
msgstr ""

# 0612a0efd14b4ae5a52283fe0aef3781
#: ../../topics/db/multi-db.txt:645
msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""

# dff62927c8c3464694cc6f70fc10d388
#: ../../topics/db/multi-db.txt:648
msgid ""
"``admin`` and ``comments`` depend on ``auth``, so their models must be in "
"the same database as ``auth``."
msgstr ""

# 002e1396f12f4e82aa216f17eed7f111
#: ../../topics/db/multi-db.txt:650
msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be "
"in the same database as ``sites``."
msgstr ""

# 0da2824ad1194044b718ccb2826d59f1
#: ../../topics/db/multi-db.txt:653
msgid ""
"In addition, some objects are automatically created just after :djadmin:"
"`syncdb` creates a table to hold them in a database:"
msgstr ""

# 421d5d5615f3412db36b450467ea8352
#: ../../topics/db/multi-db.txt:656
msgid "a default ``Site``,"
msgstr ""

# 2c445d4bca69408da68b6c2e91e21103
#: ../../topics/db/multi-db.txt:657
msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""

# 9de3d3a20e5b4e2b881e914238f91b2e
#: ../../topics/db/multi-db.txt:659
msgid ""
"three ``Permission`` for each model (including those not stored in that "
"database)."
msgstr ""

# 9d349f8f4615457c8687a4d1f2392f0b
#: ../../topics/db/multi-db.txt:666
msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include master / slave and "
"connecting to external databases. Therefore, it's recommended:"
msgstr ""

# a9879ca8da62415f96f5106101a5d735
#: ../../topics/db/multi-db.txt:670
msgid "either to run :djadmin:`syncdb` only for the default database;"
msgstr ""

# 072d99b9958a470e84e3223e616fd9fb
#: ../../topics/db/multi-db.txt:671
msgid ""
"or to write :ref:`database router<topics-db-multi-db-routing>` that allows "
"synchronizing these three models only to one database."
msgstr ""

# ea5a5c0acbdf4d87ab6c065cab1a7a0e
#: ../../topics/db/multi-db.txt:676
msgid ""
"If you're synchronizing content types to more that one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""

# a91a167e1b5f40429ece3240c3522264
#: ../../topics/db/optimization.txt:3
msgid "Database access optimization"
msgstr ""

# 9e7d0a38aaa64e379b0556a0627b7195
#: ../../topics/db/optimization.txt:5
msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""

# 3b62444325b944fc8386d430637070e9
#: ../../topics/db/optimization.txt:11
msgid "Profile first"
msgstr ""

# 599fec906c874b55b2682a72771fab22
#: ../../topics/db/optimization.txt:13
msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. You may also want to use an external project like django-debug-"
"toolbar_, or a tool that monitors your database directly."
msgstr ""

# 5a303225ff8d4722b946b83118fd10a2
#: ../../topics/db/optimization.txt:18
msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""

# 43a74bf4db994f30ad9999146e087487
#: ../../topics/db/optimization.txt:26
msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""

# 39c10f9d09ab41f2997e2ec3ff2ce45b
#: ../../topics/db/optimization.txt:35
msgid "Use standard DB optimization techniques"
msgstr ""

# e77366e5396440ab8c3ab0f310cb18c3
#: ../../topics/db/optimization.txt:37
msgid "...including:"
msgstr ""

# 899621da214f40aa88e25933ca7b58ae
#: ../../topics/db/optimization.txt:39
msgid ""
"Indexes. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`django.db.models.Field."
"db_index` to add these from Django."
msgstr ""

# c324e6f9b05d419a8b35eac2a8fff26c
#: ../../topics/db/optimization.txt:43
msgid "Appropriate use of field types."
msgstr ""

# 1a80bf777a5644f0aa39784a856fca52
#: ../../topics/db/optimization.txt:45
msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

# 14e3cc6b19c845ba862f1634d356bf20
#: ../../topics/db/optimization.txt:52
msgid "Understand QuerySets"
msgstr ""

# 972bbb3306554819a324959e788a61a3
#: ../../topics/db/optimization.txt:54
msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""

# 9e594f210b8d41868793cbfbd6918784
#: ../../topics/db/optimization.txt:58
msgid "Understand QuerySet evaluation"
msgstr ""

# 3a77b1b4f73a45d4b09ff5f8840cc5af
#: ../../topics/db/optimization.txt:60
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

# 0d25cdc62a504512ba6247eb741e0bd2
#: ../../topics/db/optimization.txt:62
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

# 14249390fedb4870bc2d9d2fa428777b
#: ../../topics/db/optimization.txt:64
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

# a4997c708387452bae8292e101fb468d
#: ../../topics/db/optimization.txt:66
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

# 8a968e3db4a04b97a6024d7fe4613a33
#: ../../topics/db/optimization.txt:69
msgid "Understand cached attributes"
msgstr ""

# 448c2dd45e3c49948d08c49e3a5320ff
#: ../../topics/db/optimization.txt:71
msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""

# 2bd38696566c4b9eb70ea1ea7bf3eb78
#: ../../topics/db/optimization.txt:80
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

# 3438ec19e639406abd64c6299a1dbf37
#: ../../topics/db/optimization.txt:86
msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""

# 054e5217efd740b5994031bcd9a3c835
#: ../../topics/db/optimization.txt:90
msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching."
msgstr ""

# 1924927e58d248ffa5c70c71a7e8c060
#: ../../topics/db/optimization.txt:94
msgid "Use the ``with`` template tag"
msgstr ""

# 0bd4e3efcf90433b8d93c6101e79d729
#: ../../topics/db/optimization.txt:96
msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""

# d2623b529d32463e9f70c9a80613a695
#: ../../topics/db/optimization.txt:100
msgid "Use ``iterator()``"
msgstr ""

# 1faa9d5fe7d84a2e9a3e79213aea6d35
#: ../../topics/db/optimization.txt:102
msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""

# 663d552cf7d24bed8e4bc20337ecb745
#: ../../topics/db/optimization.txt:107
msgid "Do database work in the database rather than in Python"
msgstr ""

# 53458f55c0974d1499f8ae5be55c1d1d
#: ../../topics/db/optimization.txt:109
msgid "For instance:"
msgstr ""

# 6045717184934a688f6fdbfd93556535
#: ../../topics/db/optimization.txt:111
msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""

# 8b4ec40b59f44368aca32f7a8d4e6ce0
#: ../../topics/db/optimization.txt:114
msgid ""
"Use :ref:`F() object query expressions <query-expressions>` to do filtering "
"against other fields within the same model."
msgstr ""

# 920253b54a3b4da28d7674cce8991703
#: ../../topics/db/optimization.txt:117
msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""

# c6bfca13d8594e5c8408ff2bcab4ea71
#: ../../topics/db/optimization.txt:119
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

# 9759e2c323614bf187d99f74a1b7a755
#: ../../topics/db/optimization.txt:122
msgid "Use ``QuerySet.extra()``"
msgstr ""

# 1922ea062a1646099e4ea06dd266241c
#: ../../topics/db/optimization.txt:124
msgid ""
"A less portable but more powerful method is :meth:`~django.db.models.query."
"QuerySet.extra()`, which allows some SQL to be explicitly added to the "
"query. If that still isn't powerful enough:"
msgstr ""

# 36e261700a9e4269a3dd093f4a5800e1
#: ../../topics/db/optimization.txt:129
msgid "Use raw SQL"
msgstr ""

# b70c7f644c2e489c940e81aa1fc82349
#: ../../topics/db/optimization.txt:131
msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""

# d29594dec65543d1b0e56e67a0529dc5
#: ../../topics/db/optimization.txt:136
msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

# 20b7613d5e4f40c79a04f1eeaa864125
#: ../../topics/db/optimization.txt:138
msgid ""
"There are two reasons to use a column with :attr:`~django.db.models.Field."
"unique` or :attr:`~django.db.models.Field.db_index` when using :meth:"
"`~django.db.models.query.QuerySet.get` to retrieve individual objects. "
"First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""

# 5fb32d1ac6ef453a97fd0334ea279e44
#: ../../topics/db/optimization.txt:146
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

# 87ea4234b3ce4fbfa2ce092626356bbd
#: ../../topics/db/optimization.txt:150
msgid "will be quicker than:"
msgstr ""

# d9df10492ffd4a3197ba9c582c95bc03
#: ../../topics/db/optimization.txt:154
msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

# 7ac87a3401654b84a5546742882760b3
#: ../../topics/db/optimization.txt:156
msgid "Doing the following is potentially quite slow:"
msgstr ""

# e265ff421f3042999add78649af09302
#: ../../topics/db/optimization.txt:160
msgid ""
"First of all, `headline` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""

# 37cb20a64c49483a8d09a43947f0116f
#: ../../topics/db/optimization.txt:163
msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all "
"of them from the database. This penalty could be substantial if hundreds or "
"thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also "
"play a factor."
msgstr ""

# 36e677125dde47d982ac4865c0408df2
#: ../../topics/db/optimization.txt:171
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

# 62ca343c0aed47f2bba06a834d64e4f9
#: ../../topics/db/optimization.txt:173
msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""

# 35145b8e3ecc4e31982827fd9d08c3ce
#: ../../topics/db/optimization.txt:180
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

# 007c0f4e886a4ac78df6b7eea3039494
#: ../../topics/db/optimization.txt:182
msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

# 628a96e9af1f4ad0be58ad197a28efab
#: ../../topics/db/optimization.txt:186
msgid "in view code,"
msgstr ""

# 8e3e0182621546038d54301144ed8167
#: ../../topics/db/optimization.txt:188
msgid ""
"and in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""

# 7343d3ef70ee405580c95e927c0fbdac
#: ../../topics/db/optimization.txt:193
msgid "Don't retrieve things you don't need"
msgstr ""

# 41da90d8b1f64c9ba68bb509745f5f5e
#: ../../topics/db/optimization.txt:196
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

# 9dfb5923b68442a3b90355a66f8a4738
#: ../../topics/db/optimization.txt:198
msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""

# 689b5c84f3f1468c9878c8fca0a8a7ca
#: ../../topics/db/optimization.txt:206
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

# 3cfa32df49d84cb98e0ced781c64310a
#: ../../topics/db/optimization.txt:208
msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""

# 45fe1f193b9c4b97adae060139f00fb8
#: ../../topics/db/optimization.txt:214
msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read "
"most of the non-text, non-VARCHAR data from the disk for a single row in the "
"results, even if it ends up only using a few columns. The ``defer()`` and "
"``only()`` methods are most useful when you can avoid loading a lot of text "
"data or for fields that might take a lot of processing to convert back to "
"Python. As always, profile first, then optimize."
msgstr ""

# 508ba4194f174a9ab4350a46036e7bd6
#: ../../topics/db/optimization.txt:224
msgid "Use QuerySet.count()"
msgstr ""

# ad42d87aeee6481b8e5a700cb296f36c
#: ../../topics/db/optimization.txt:226
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

# 6780abe9b18a481095b1cb3f9563fdac
#: ../../topics/db/optimization.txt:229
msgid "Use QuerySet.exists()"
msgstr ""

# 946b388eefaa4146a8323ad8675dc3bf
#: ../../topics/db/optimization.txt:231
msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""

# dcb948c2ded047b0bf21f57b2b119f4d
#: ../../topics/db/optimization.txt:234
msgid "But:"
msgstr ""

# f0e173d705ba45fb8057c9fe1b6a570f
#: ../../topics/db/optimization.txt:237
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

# 0f9bd19258b941faa73a4accd8008f4b
#: ../../topics/db/optimization.txt:239
msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

# 98ccdd3335304ba6960d13728281870c
#: ../../topics/db/optimization.txt:241
msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""

# b422af6fb66748f9bc3bcc4758883fff
#: ../../topics/db/optimization.txt:260
msgid "It is optimal because:"
msgstr ""

# aa91e5c8a9bc48f49cc573367e31b19e
#: ../../topics/db/optimization.txt:262
msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""

# 0fa42f8d4bc043eb90195b8202dfe3d7
#: ../../topics/db/optimization.txt:265
msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""

# b1644a575d6c418aa003e4dc53a089f6
#: ../../topics/db/optimization.txt:268
msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't "
"any results, it will return False, otherwise True."
msgstr ""

# c72057d58ed548f7b3c3fa9304db0755
#: ../../topics/db/optimization.txt:273
msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out "
"the rest of the cache without doing another query."
msgstr ""

# 3560863a33914b05bd6319b68bff54a2
#: ../../topics/db/optimization.txt:276
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

# c10905286f9a457880b85370e70d5128
#: ../../topics/db/optimization.txt:278
msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""

# 60223e98fba349728989aa0667bf70ee
#: ../../topics/db/optimization.txt:284
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

# c0e772e9011f457883ef8b666cd6a18b
#: ../../topics/db/optimization.txt:286
msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""

# 960241247ac540e0a73965511e3faa53
#: ../../topics/db/optimization.txt:291
msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""

# 83f9f14971ed4333adbf0f7f9705de7c
#: ../../topics/db/optimization.txt:297
msgid "Use foreign key values directly"
msgstr ""

# 0ddbe61099ac4804bce611a14c52abe4
#: ../../topics/db/optimization.txt:299
msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""

# 7582a34d51f146a6a429282db63245cf
#: ../../topics/db/optimization.txt:305
msgid "instead of::"
msgstr ""

# 2f5ad570e303443183e070d5c2065eac
#: ../../topics/db/optimization.txt:310
msgid "Insert in bulk"
msgstr ""

# 54e2bf0a489a4ea99661941d6508f605
#: ../../topics/db/optimization.txt:312
msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. 예"
"를 들어 ::"

# 50f3e680d6774d38aef9fdc9a1448807
# 5f1d754f94c14e24a22a9591f659e35d
#: ../../topics/db/optimization.txt:321 ../../topics/db/optimization.txt:335
msgid "...is preferable to::"
msgstr ""

# d8549132bda94d26b2e56c07c3905f45
#: ../../topics/db/optimization.txt:326
msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""

# a3ec2327c3ff4ff7b04713bed2e0b2bd
#: ../../topics/db/optimization.txt:330
msgid ""
"This also applies to :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, so doing::"
msgstr ""

# 4c68150034404755951d13ae8590f4ad
#: ../../topics/db/optimization.txt:340
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

# f18e426659fd4ed2ad5a5e66405fe03a
#: ../../topics/db/queries.txt:3
msgid "Making queries"
msgstr ""

# 8ea3d68eed414d99bcd00099dfa016f0
#: ../../topics/db/queries.txt:7
msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""

# 5aa47b7f94f64f9a8f1d5067e3b2d48f
#: ../../topics/db/queries.txt:13
msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a Weblog application:"
msgstr ""

# 38ae3888487d46258c96025c9ecbe811
#: ../../topics/db/queries.txt:49
msgid "Creating objects"
msgstr ""

# 127725c8e8624a62980a0e5fb55fadf4
#: ../../topics/db/queries.txt:51
msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

# bfa589825b8f402a850f723d643c7868
#: ../../topics/db/queries.txt:55
msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""

# 5bc5eb262486420c9d7ffa0c6a540406
#: ../../topics/db/queries.txt:58
msgid ""
"You import the model class from wherever it lives on the Python path, as you "
"may expect. (We point this out here because previous Django versions "
"required funky model importing.)"
msgstr ""

# 02a3e3f73138439abe3333d58e11424f
#: ../../topics/db/queries.txt:62
msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

# 6949822b6a994835970cfeff417e33c6
#: ../../topics/db/queries.txt:68
msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

# aac284747a3949e5b079876efdd263ef
#: ../../topics/db/queries.txt:71
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

# 4c5afa347fe24f6284eb4e9dc04ed1e6
#: ../../topics/db/queries.txt:75
msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for :meth:`~django.db.models.Model."
"save` for complete details."
msgstr ""

# 9b446526dd9a4159ba1fb68d4b401c8c
#: ../../topics/db/queries.txt:79
msgid ""
"To create and save an object in a single step, use the :meth:`~django.db."
"models.query.QuerySet.create()` method."
msgstr ""

# feb3fe0024874978a691f20fd635a840
#: ../../topics/db/queries.txt:83
msgid "Saving changes to objects"
msgstr ""

# 985be40902234a9892d813e88ffa4838
#: ../../topics/db/queries.txt:85
msgid ""
"To save changes to an object that's already in the database, use :meth:"
"`~django.db.models.Model.save`."
msgstr ""

# 6c277079c1fa4ad0b52a229f3e15b3aa
#: ../../topics/db/queries.txt:88
msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

# 3e6ad40b535047abb3f194e4bfa84344
#: ../../topics/db/queries.txt:94
msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

# 27dc13da88dc41c5b58f04edcad8b462
#: ../../topics/db/queries.txt:98
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

# fe68a5436be845859a30c37d65599124
#: ../../topics/db/queries.txt:100
msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- simply assign an object of the right "
"type to the field in question. This example updates the ``blog`` attribute "
"of an ``Entry`` instance ``entry``::"
msgstr ""

# 4034db32269a4bf2b6d564045b8298fa
#: ../../topics/db/queries.txt:111
msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the :meth:`~django.db.models.fields.related."
"RelatedManager.add` method on the field to add a record to the relation. "
"This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

# 984071cb839b45d3b59f2d95416155bd
#: ../../topics/db/queries.txt:121
msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to :meth:`~django.db.models."
"fields.related.RelatedManager.add`, like this::"
msgstr ""

# d37588426c0d4c2e92c6ec469a12fd31
#: ../../topics/db/queries.txt:131
msgid ""
"Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

# 44f298379ce64640bab8bb2a7e0b445f
#: ../../topics/db/queries.txt:134
msgid "Retrieving objects"
msgstr ""

# 7f2df4d2795f4e53897ebdc0aa05b275
#: ../../topics/db/queries.txt:136
msgid ""
"To retrieve objects from your database, construct a :class:`~django.db."
"models.query.QuerySet` via a :class:`~django.db.models.Manager` on your "
"model class."
msgstr ""

# 97c46f9612f24c20806c24b4b7dff1bd
#: ../../topics/db/queries.txt:140
msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters* -- "
"criteria that narrow down the collection based on given parameters. In SQL "
"terms, a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

# eb66f36a14a54157a707fea617923bc1
#: ../../topics/db/queries.txt:146
msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's :"
"class:`~django.db.models.Manager`. Each model has at least one :class:"
"`~django.db.models.Manager`, and it's called ``objects`` by default. Access "
"it directly via the model class, like so::"
msgstr ""

# 413bc69cd8a2409c9537bee12c2241f0
#: ../../topics/db/queries.txt:161
msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""

# 6413f00a5a56426bb817517f184d8c84
#: ../../topics/db/queries.txt:165
msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. It acts as a \"root\" :class:`~django.db.models.query.QuerySet` "
"that describes all objects in the model's database table. For example, "
"``Blog.objects`` is the initial :class:`~django.db.models.query.QuerySet` "
"that contains all ``Blog`` objects in the database."
msgstr ""

# 370b068df0af425098836be85d87c1f7
#: ../../topics/db/queries.txt:172
msgid "Retrieving all objects"
msgstr ""

# a1c0a68b030245b494d1342d300bd1e2
#: ../../topics/db/queries.txt:174
msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :"
"class:`~django.db.models.Manager`::"
msgstr ""

# 43cbd88c939b407690c3ffe1f42d539c
#: ../../topics/db/queries.txt:180
msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:"
"`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

# 2be94538184d4e94aba257b6d740b005
#: ../../topics/db/queries.txt:183
msgid ""
"(If ``Entry.objects`` is a :class:`~django.db.models.query.QuerySet`, why "
"can't we just do ``Entry.objects``?  That's because ``Entry.objects``, the "
"root :class:`~django.db.models.query.QuerySet`, is a special case that "
"cannot be evaluated. The :meth:`~django.db.models.query.QuerySet.all` method "
"returns a :class:`~django.db.models.query.QuerySet` that *can* be evaluated.)"
msgstr ""

# c5d2bb9d26d94698a377f826ddde1151
#: ../../topics/db/queries.txt:191
msgid "Retrieving specific objects with filters"
msgstr ""

# d42be6c285a94821a7d34c6bd880ab33
#: ../../topics/db/queries.txt:193
msgid ""
"The root :class:`~django.db.models.query.QuerySet` provided by the :class:"
"`~django.db.models.Manager` describes all objects in the database table. "
"Usually, though, you'll need to select only a subset of the complete set of "
"objects."
msgstr ""

# 26550c4a600a405486c51bd2e585d1ec
#: ../../topics/db/queries.txt:198
msgid ""
"To create such a subset, you refine the initial :class:`~django.db.models."
"query.QuerySet`, adding filter conditions. The two most common ways to "
"refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

# b905b62ddc414be5a8a447b36318b931
#: ../../topics/db/queries.txt:203
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""

# 75b573a2ef3d4b37bff354e42f002141
#: ../../topics/db/queries.txt:207
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""

# 11f58bafb51d4983b5f7cfc896ba0a89
#: ../../topics/db/queries.txt:210
msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

# b118d2a082f74344a3a0051908bcecef
#: ../../topics/db/queries.txt:213
msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use :meth:`~django.db.models.query.QuerySet."
"filter` like so::"
msgstr ""

# 15e599bc3457473ab05e9e112a156b28
#: ../../topics/db/queries.txt:219
msgid ""
"We don't have to add an :meth:`~django.db.models.query.QuerySet.all` -- "
"``Entry.objects.all().filter(...)``. That would still work, but you only "
"need :meth:`~django.db.models.query.QuerySet.all` when you want all objects "
"from the root :class:`~django.db.models.query.QuerySet`."
msgstr ""

# 07b26a71ccf44faebe24bbe47dc803bb
#: ../../topics/db/queries.txt:227
msgid "Chaining filters"
msgstr ""

# ce54efe9d7ff406f9c166670496b414c
#: ../../topics/db/queries.txt:229
msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. 예를 들어 ::"

# 151e33c6c9b345c2b91bc3a377f584d4
#: ../../topics/db/queries.txt:241
msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""

# ddbcfb2fa85245c8b93a244e631b715e
#: ../../topics/db/queries.txt:250
msgid "Filtered QuerySets are unique"
msgstr ""

# cede39a7ef064c0ba484689b9a99d82c
#: ../../topics/db/queries.txt:252
msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""

# 388b2a8b7488493aa349257d86b9f0f1
#: ../../topics/db/queries.txt:264
msgid ""
"These three ``QuerySets`` are separate. The first is a base :class:`~django."
"db.models.query.QuerySet` containing all entries that contain a headline "
"starting with \"What\". The second is a subset of the first, with an "
"additional criteria that excludes records whose ``pub_date`` is greater than "
"now. The third is a subset of the first, with an additional criteria that "
"selects only the records whose ``pub_date`` is greater than now. The "
"initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by "
"the refinement process."
msgstr ""

# d39535614b5b495e951448ec5dd5760a
#: ../../topics/db/queries.txt:276
msgid "QuerySets are lazy"
msgstr ""

# 276de60fe2774884b4b007d395945901
#: ../../topics/db/queries.txt:278
msgid ""
"``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models."
"query.QuerySet` doesn't involve any database activity. You can stack filters "
"together all day long, and Django won't actually run the query until the :"
"class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this "
"example::"
msgstr ""

# 8936c0ac518245b38a012844d6e48d36
#: ../../topics/db/queries.txt:289
msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a :"
"class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the :class:`~django.db.models.query."
"QuerySet` is *evaluated* by accessing the database. For more details on "
"exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

# b39917cb0155438aba1f770346ebc8dc
#: ../../topics/db/queries.txt:301
msgid "Retrieving a single object with get"
msgstr ""

# 7fa0a677576645ed87b095731dad4dcf
#: ../../topics/db/queries.txt:303
msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a :"
"class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a :class:`~django.db.models."
"query.QuerySet` containing a single element."
msgstr ""

# 88d330b8ca1f4067a39dc96d80b53c33
#: ../../topics/db/queries.txt:308
msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a `Manager` which "
"returns the object directly::"
msgstr ""

# 6a36f23f7dd844f0a4704a9b81f43697
#: ../../topics/db/queries.txt:314
msgid ""
"You can use any query expression with :meth:`~django.db.models.query."
"QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet."
"filter` - again, see `Field lookups`_ below."
msgstr ""

# aa54a297f85c4ddc9dd9b9e1e80e03ee
#: ../../topics/db/queries.txt:319
msgid ""
"Note that there is a difference between using :meth:`~django.db.models.query."
"QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` "
"with a slice of ``[0]``. If there are no results that match the query, :meth:"
"`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

# 3af03bdc8be54d24b38c9e618517e60f
#: ../../topics/db/queries.txt:328
msgid ""
"Similarly, Django will complain if more than one item matches the :meth:"
"`~django.db.models.query.QuerySet.get` query. In this case, it will raise "
"``MultipleObjectsReturned``, which again is an attribute of the model class "
"itself."
msgstr ""

# 08a8d6407a8a443d8db14e84b9b7cf6d
#: ../../topics/db/queries.txt:335
msgid "Other QuerySet methods"
msgstr ""

# a82138fff6de4345b1c165611e926269
#: ../../topics/db/queries.txt:337
msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :"
"meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query."
"QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when "
"you need to look up objects from the database. However, that's far from all "
"there is; see the :ref:`QuerySet API Reference <queryset-api>` for a "
"complete list of all the various :class:`~django.db.models.query.QuerySet` "
"methods."
msgstr ""

# a1d391d648ac4cbcabdebe87530a5799
#: ../../topics/db/queries.txt:348
msgid "Limiting QuerySets"
msgstr ""

# c24eeb82e92b4362aba5f0537069c97a
#: ../../topics/db/queries.txt:350
msgid ""
"Use a subset of Python's array-slicing syntax to limit your :class:`~django."
"db.models.query.QuerySet` to a certain number of results. This is the "
"equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

# da1e0632dc88490ea6e6a31cc4590bcb
#: ../../topics/db/queries.txt:354
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

# 4c173054c5ee4c96beb7a6295dea5b21
#: ../../topics/db/queries.txt:358
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

# b33ef790ee51412b8a8ce5015a499919
#: ../../topics/db/queries.txt:362
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

# 0d0e5233e40f4bf7b77ffa9d1abc61b2
#: ../../topics/db/queries.txt:364
msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a "
"new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the "
"query. An exception is if you use the \"step\" parameter of Python slice "
"syntax. For example, this would actually execute the query in order to "
"return a list of every *second* object of the first 10::"
msgstr ""

# 95428d227dcf430f8ef712734cc2b365
#: ../../topics/db/queries.txt:372
msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use a simple index instead of a slice. For example, this returns "
"the first ``Entry`` in the database, after ordering entries alphabetically "
"by headline::"
msgstr ""

# fd19d89db2ec47a18c025162d0500507
#: ../../topics/db/queries.txt:379
msgid "This is roughly equivalent to::"
msgstr ""

# 2d35a41ad1464d3ba05549716f45b738
#: ../../topics/db/queries.txt:383
msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

# e15c88c4ee774a3eb2537412fc9de8fd
#: ../../topics/db/queries.txt:390
msgid "Field lookups"
msgstr ""

# a649dbb6c74b4b47bce978edf8507f45
#: ../../topics/db/queries.txt:392
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the :class:`~django.db.models."
"query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :"
"meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models."
"query.QuerySet.get`."
msgstr ""

# 9222a1986bb247f7a88bf3705e373ab6
#: ../../topics/db/queries.txt:398
msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). 예를 들어 ::"

# bbe6b63b631b4e679b5c8a929080529e
#: ../../topics/db/queries.txt:403
msgid "translates (roughly) into the following SQL::"
msgstr ""

# 45bd4fae269e4e779735f6c9b7ca5943
#: ../../topics/db/queries.txt:409
msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

# 6fd94f38b08645cea855c317f9db4a80
#: ../../topics/db/queries.txt:424
msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

# 562f86756004425ab5c5476f997cace5
#: ../../topics/db/queries.txt:427
msgid ""
"The database API supports about two dozen lookup types; a complete reference "
"can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""

# 71c5f8c0171242ed8daaf777b756d667
#: ../../topics/db/queries.txt:433
msgid "An \"exact\" match. For example::"
msgstr "An \"exact\" match. 예를 들어 ::"

# 2341e0fcb2904ce8b780f7b9e16756ca
#: ../../topics/db/queries.txt:437
msgid "Would generate SQL along these lines:"
msgstr ""

# 875903eb9ec64a9a9d29dc45ae8e2679
#: ../../topics/db/queries.txt:443
msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

# de0a7d1b2b7342e38728c01a9dc533fd
#: ../../topics/db/queries.txt:447
msgid "For example, the following two statements are equivalent::"
msgstr ""

# 5cea062f6b0d49b4910a48bb48e3d429
#: ../../topics/db/queries.txt:452
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

# 5032e43c6f0547baa4d0c522d7c0ef88
#: ../../topics/db/queries.txt:455
msgid "A case-insensitive match. So, the query::"
msgstr ""

# 43e942d2a0054d23bfb618bd5c5f6e14
#: ../../topics/db/queries.txt:459
msgid ""
"Would match a ``Blog`` titled \"Beatles Blog\", \"beatles blog\", or even "
"\"BeAtlES blOG\"."
msgstr ""

# a273f33306f44cfc9fa31a1600079ee9
#: ../../topics/db/queries.txt:463
msgid "Case-sensitive containment test. For example::"
msgstr "Case-sensitive containment test. 예를 들어 ::"

# 69c797b9781941df96152ae8aa963b6f
#: ../../topics/db/queries.txt:467
msgid "Roughly translates to this SQL:"
msgstr ""

# f291d14e567c4a0381eadfe856f66f66
#: ../../topics/db/queries.txt:473
msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

# a7e12fa9f71d4350a4439b900d47f313
#: ../../topics/db/queries.txt:476
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

# 710b62a986674bc3af615db556323658
#: ../../topics/db/queries.txt:479
msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

# 13468a90a38740b5b1eba954f086290c
#: ../../topics/db/queries.txt:483
msgid ""
"Again, this only scratches the surface. A complete reference can be found in "
"the :ref:`field lookup reference <field-lookups>`."
msgstr ""

# 3740cb96b5b24cefb2a013fc1e102580
#: ../../topics/db/queries.txt:489
msgid "Lookups that span relationships"
msgstr ""

# 23f63e446903482ba8b5bf48aac9b7f6
#: ../../topics/db/queries.txt:491
msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

# 3e3c533ffb4b49caa461dd08e3deb0ad
#: ../../topics/db/queries.txt:497
msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

# e0d70b9d9247459c9df1bca2e3b5b2df
#: ../../topics/db/queries.txt:502
msgid "This spanning can be as deep as you'd like."
msgstr ""

# 0ef442a708cc491b9726ee5a2667f572
#: ../../topics/db/queries.txt:504
msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

# 53421094e35d4f77be409888a3e54bf8
#: ../../topics/db/queries.txt:507
msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

# b3301a0c04ea488faeeb6c3c25c057f7
#: ../../topics/db/queries.txt:512
msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""

# 8b6f6e8cd92f4a6bb15fd5ce65b83e8a
#: ../../topics/db/queries.txt:519
msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

# 11be228e59ce4faf91b642300833256a
#: ../../topics/db/queries.txt:527
msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't "
"want those latter objects, you could write::"
msgstr ""

# 94eab6a64b494563b7f16777ab6223c1
#: ../../topics/db/queries.txt:535
msgid "Spanning multi-valued relationships"
msgstr ""

# 6f9d25e6cc2644548b7fbc70c3be6059
#: ../../topics/db/queries.txt:537
msgid ""
"When you are filtering an object based on a :class:`~django.db.models."
"ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there "
"are two different sorts of filter you may be interested in. Consider the "
"``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many "
"relation). We might be interested in finding blogs that have an entry which "
"has both *\"Lennon\"* in the headline and was published in 2008. Or we might "
"want to find blogs that have an entry with *\"Lennon\"* in the headline as "
"well as an entry that was published in 2008. Since there are multiple "
"entries associated with a single ``Blog``, both of these queries are "
"possible and make sense in some situations."
msgstr ""

# 2f7e682b3711420284db0c0c9e712eee
#: ../../topics/db/queries.txt:548
msgid ""
"The same type of situation arises with a :class:`~django.db.models."
"ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db."
"models.ManyToManyField` called ``tags``, we might want to find entries "
"linked to tags called *\"music\"* and *\"bands\"* or we might want an entry "
"that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

# 54ac8c9273084a87a24da9083bf9134d
#: ../../topics/db/queries.txt:554
msgid ""
"To handle both of these situations, Django has a consistent way of "
"processing :meth:`~django.db.models.query.QuerySet.filter` and :meth:"
"`~django.db.models.query.QuerySet.exclude` calls. Everything inside a "
"single :meth:`~django.db.models.query.QuerySet.filter` call is applied "
"simultaneously to filter out items matching all those requirements. "
"Successive :meth:`~django.db.models.query.QuerySet.filter` calls further "
"restrict the set of objects, but for multi-valued relations, they apply to "
"any object linked to the primary model, not necessarily those objects that "
"were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` "
"call."
msgstr ""

# 39a7cbf35a4346ea8ebf46bda0ac3851
#: ../../topics/db/queries.txt:564
msgid ""
"That may sound a bit confusing, so hopefully an example will clarify. To "
"select all blogs that contain entries with both *\"Lennon\"* in the headline "
"and that were published in 2008 (the same entry satisfying both conditions), "
"we would write::"
msgstr ""

# e334eb3ba9a3497f82d82d7d3e4f4947
#: ../../topics/db/queries.txt:572
msgid ""
"To select all blogs that contain an entry with *\"Lennon\"* in the headline "
"**as well as** an entry that was published in 2008, we would write::"
msgstr ""

# a2847bdbabde4f27acb7a39966a906eb
#: ../../topics/db/queries.txt:578
msgid ""
"In this second example, the first filter restricted the queryset to all "
"those blogs linked to that particular type of entry. The second filter "
"restricted the set of blogs *further* to those that are also linked to the "
"second type of entry. The entries select by the second filter may or may not "
"be the same as the entries in the first filter. We are filtering the "
"``Blog`` items with each filter statement, not the ``Entry`` items."
msgstr ""

# eec8a845fd804ff4835d3cee792a5bea
#: ../../topics/db/queries.txt:585
msgid ""
"All of this behavior also applies to :meth:`~django.db.models.query.QuerySet."
"exclude`: all the conditions in a single :meth:`~django.db.models.query."
"QuerySet.exclude` statement apply to a single instance (if those conditions "
"are talking about the same multi-valued relation). Conditions in subsequent :"
"meth:`~django.db.models.query.QuerySet.filter` or :meth:`~django.db.models."
"query.QuerySet.exclude` calls that refer to the same relation may end up "
"filtering on different linked objects."
msgstr ""

# b64cf1a0c0454446a59e10b3000cebdd
#: ../../topics/db/queries.txt:597
msgid "Filters can reference fields on the model"
msgstr ""

# d4f9c28cb5ef4751beb3e78674f96f08
#: ../../topics/db/queries.txt:599
msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""

# 0861cbddddba413187c2edf81ea00c48
#: ../../topics/db/queries.txt:603
msgid ""
"Django provides the :ref:`F() expressions <query-expressions>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within "
"a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""

# d67db84b21dc4cafafcbcd5799a285ab
#: ../../topics/db/queries.txt:608
msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""

# 2ab13f81ecb9407d8a5e19bd3e95e0b5
#: ../../topics/db/queries.txt:615
msgid ""
"Django supports the use of addition, subtraction, multiplication, division "
"and modulo arithmetic with ``F()`` objects, both with constants and with "
"other ``F()`` objects. To find all the blog entries with more than *twice* "
"as many comments as pingbacks, we modify the query::"
msgstr ""

# b0ba578a49bf4a1186746454ec3ab9f6
#: ../../topics/db/queries.txt:622
msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""

# 8415b29ca2c84d1e950467b1c7f43af5
#: ../../topics/db/queries.txt:628
msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""

# c091e9db0a974e75aba4e7fd094eb1f6
#: ../../topics/db/queries.txt:636
msgid ""
"For date and date/time fields, you can add or subtract a :class:`~datetime."
"timedelta` object. The following would return all entries that were modified "
"more than 3 days after they were published::"
msgstr ""

# 7eb45a5fe9ea40b59d2bac37ae7ac6d2
#: ../../topics/db/queries.txt:646
msgid ""
"The ``F()`` objects now support bitwise operations by ``.bitand()`` and ``."
"bitor()``, for example::"
msgstr ""

# aa91a8f31e8a412db78f0cd724c51dae
#: ../../topics/db/queries.txt:656
msgid "The pk lookup shortcut"
msgstr ""

# 3bf34cdaa27e42b19a8d5e9ac70e8e68
#: ../../topics/db/queries.txt:658
msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""

# ebdbcef03c4b4c9f90b09c3bc5f91a04
#: ../../topics/db/queries.txt:661
msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent::"
msgstr ""

# bea00fc704ca4f35ae4ecce5814f61ce
#: ../../topics/db/queries.txt:668
msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can "
"be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

# 675e99c717fd4f42a0178f6ff5d297eb
#: ../../topics/db/queries.txt:677
msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

# 57756947afc744b6b47a7ba7488c006d
#: ../../topics/db/queries.txt:685
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

# 241283b07cce4a4e8f9b0df02c4cfd2e
#: ../../topics/db/queries.txt:687
msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""

# 99ac72723fab49fe863f8b0e9d022aa7
#: ../../topics/db/queries.txt:694
msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

# 86a4ec3d14d14b459fa6c977dd30935d
#: ../../topics/db/queries.txt:700
msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""

# 9255ec5a690a463fa2be459d1c5b1970
#: ../../topics/db/queries.txt:707
msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""

# a5cc7fac0e7f4ee2aab229fb3c66726d
#: ../../topics/db/queries.txt:713
msgid "Caching and QuerySets"
msgstr ""

# 58b2a6c130f943b891ebd6dbb92f4ffd
#: ../../topics/db/queries.txt:715
msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache, to minimize "
"database access. It's important to understand how it works, in order to "
"write the most efficient code."
msgstr ""

# e267b023b5a54506977520165e5ce6a3
#: ../../topics/db/queries.txt:719
msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`\\'s cache and "
"returns the results that have been explicitly requested (e.g., the next "
"element, if the :class:`~django.db.models.query.QuerySet` is being iterated "
"over). Subsequent evaluations of the :class:`~django.db.models.query."
"QuerySet` reuse the cached results."
msgstr ""

# cd435785a7744f2c9932305d2641ad62
#: ../../topics/db/queries.txt:728
msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""

# ba5cc9cffdeb4a929521ca2bc46ed5fa
#: ../../topics/db/queries.txt:736
msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

# 4393a91c48fa4e68b59634af425378d8
#: ../../topics/db/queries.txt:741
msgid ""
"To avoid this problem, simply save the :class:`~django.db.models.query."
"QuerySet` and reuse it::"
msgstr ""

# 10755cb2212f43bab7a6b78f02b5ee61
#: ../../topics/db/queries.txt:751
msgid "Complex lookups with Q objects"
msgstr ""

# d10a9a86f7074a11b2efeb6056471468
#: ../../topics/db/queries.txt:753
msgid ""
"Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet."
"filter`, etc. -- are \"AND\"ed together. If you need to execute more complex "
"queries (for example, queries with ``OR`` statements), you can use ``Q`` "
"objects."
msgstr ""

# 600b3e96ee3f4e7a957fcbbaa104be42
#: ../../topics/db/queries.txt:759
msgid ""
"A :class:`~django.db.models.Q` object (``django.db.models.Q``) is an object "
"used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""

# 0cd32993442c484692a0276d093a5fde
#: ../../topics/db/queries.txt:763
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

# 24f48566a22943479eb039288d677dab
#: ../../topics/db/queries.txt:768
msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

# 7e681019ac484eb597adb1285f74afd3
#: ../../topics/db/queries.txt:771
msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

# de19cc467b30480d9ecd7eface8f0a34
#: ../../topics/db/queries.txt:776
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

# fba91452c5a842ae98f048650962427c
#: ../../topics/db/queries.txt:780
msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""

# 29684f47c39b4ab991aef27a4a0dd75d
#: ../../topics/db/queries.txt:787
msgid ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. For example::"
msgstr ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. 예를 들어 ::"

# 7e49d6bd781e4b669d937cbf72ecb412
#: ../../topics/db/queries.txt:800
msgid "... roughly translates into the SQL::"
msgstr ""

# 28748c3549a74953b4332fb315a9af42
#: ../../topics/db/queries.txt:805
msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. 예를 들어 ::"

# b9d39a1b8845447db8b94698dcab395b
#: ../../topics/db/queries.txt:814
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

# 77875cb8c4d4456cbf604707fe3a328b
#: ../../topics/db/queries.txt:821
msgid "... would not be valid."
msgstr ""

# ce3909a52e3d48e78835322d90804529
#: ../../topics/db/queries.txt:825
msgid ""
"The `OR lookups examples`_ in the Django unit tests show some possible uses "
"of ``Q``."
msgstr ""

# 55c713bdbdb948428058e48e8c2b460e
#: ../../topics/db/queries.txt:831
msgid "Comparing objects"
msgstr ""

# 6c05f7828abc4b378d82333c168a2915
#: ../../topics/db/queries.txt:833
msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

# 356fffc50cd34fc8b8d88b2f7cb5b817
#: ../../topics/db/queries.txt:837
msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

# 859aecac5419499eb6f14972356026fd
#: ../../topics/db/queries.txt:842
msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

# 8505f16e6d884b41ad6e187b202efed1
#: ../../topics/db/queries.txt:852
msgid "Deleting objects"
msgstr ""

# a6fea8803eaf473081d43ad3a31f4b48
#: ../../topics/db/queries.txt:854
msgid ""
"The delete method, conveniently, is named :meth:`~django.db.models.Model."
"delete`. This method immediately deletes the object and has no return value. "
"Example::"
msgstr ""

# 8f9a0e76126d4c578388144fe3e5f0d8
#: ../../topics/db/queries.txt:860
msgid ""
"You can also delete objects in bulk. Every :class:`~django.db.models.query."
"QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, "
"which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

# 97ee914eabec41a7a8c9beb04e1980d8
#: ../../topics/db/queries.txt:865
msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

# 5ff600a034f3410f9efa0013cdca0010
#: ../../topics/db/queries.txt:870
msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk :meth:"
"`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db."
"models.query.QuerySet`."
msgstr ""

# f90fbc5dc2284e9a898101d4c1f76ed2
#: ../../topics/db/queries.txt:880
msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. 예를 들어 ::"

# 98a41f1615f24a979df40c5a70a9b0a7
#: ../../topics/db/queries.txt:889
msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

# be49a99682174a8093ad9aad1b51b93c
#: ../../topics/db/queries.txt:893
msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:"
"`~django.db.models.query.QuerySet` method that is not exposed on a :class:"
"`~django.db.models.Manager` itself. This is a safety mechanism to prevent "
"you from accidentally requesting ``Entry.objects.delete()``, and deleting "
"*all* the entries. If you *do* want to delete all the objects, then you have "
"to explicitly request a complete query set::"
msgstr ""

# 54c3d0eb74694b0a824dcb905cb0641d
#: ../../topics/db/queries.txt:905
msgid "Copying model instances"
msgstr ""

# 79b1ce0ad0e442aaa702a7bdc73dcb26
#: ../../topics/db/queries.txt:907
msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can just set ``pk`` to ``None``. Using our blog "
"example::"
msgstr ""

# dff11bf86a8d48e7a6ff42321fa1aad7
#: ../../topics/db/queries.txt:917
msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""

# c1ad912b4866466e8d50ad68f6ba8f87
#: ../../topics/db/queries.txt:926
msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"None::"
msgstr ""

# 9ace1a5239f24aec9ab36d957d913033
#: ../../topics/db/queries.txt:932
msgid ""
"This process does not copy related objects. If you want to copy relations, "
"you have to write a little bit more code. In our example, ``Entry`` has a "
"many to many field to ``Author``::"
msgstr ""

# 26a8ae55dfbb4db79ef3f7bb568479e6
#: ../../topics/db/queries.txt:945
msgid "Updating multiple objects at once"
msgstr ""

# f7e2df9aac154d9f946783d1192a04c6
#: ../../topics/db/queries.txt:947
msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. 예를 들어 ::"

# 45976c58414845228c4114e40d65b414
#: ../../topics/db/queries.txt:954
msgid ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. For example::"
msgstr ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. 예를 들어 ::"

# 9b2fa8270ee347fa98072043d7df18aa
#: ../../topics/db/queries.txt:964
msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the :class:"
"`~django.db.models.query.QuerySet` that is updated is that it can only "
"access one database table, the model's main table. You can filter based on "
"related fields, but you can only update columns in the model's main table. "
"Example::"
msgstr ""

# 431fa16c5c2f48caa6f189820cbe1d82
#: ../../topics/db/queries.txt:977
msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any :"
"meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling :"
"meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models."
"DateField.auto_now` field option. If you want to save every item in a :class:"
"`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db."
"models.Model.save` method is called on each instance, you don't need any "
"special function to handle that. Just loop over them and call :meth:`~django."
"db.models.Model.save`::"
msgstr ""

# d1afa58813da4d16b54570ab9dc1f4bb
#: ../../topics/db/queries.txt:991
msgid ""
"Calls to update can also use :ref:`F() objects <query-expressions>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""

# 59e90aa7fe2342c39fb4b2db80207aad
#: ../../topics/db/queries.txt:998
msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

# 460e953d7e3c49018cb472f3ce78c689
#: ../../topics/db/queries.txt:1009
msgid "Related objects"
msgstr ""

# 1725a4e2511e4c9bae4bf9489ebd9185
#: ../../topics/db/queries.txt:1011
msgid ""
"When you define a relationship in a model (i.e., a :class:`~django.db.models."
"ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db."
"models.ManyToManyField`), instances of that model will have a convenient API "
"to access the related object(s)."
msgstr ""

# b561fb4eb73449d6a6465ce40beb1bcc
#: ../../topics/db/queries.txt:1017
msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

# e92d3d87a6e84918b972c0b91b10f7fe
#: ../../topics/db/queries.txt:1021
msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

# 3a022b8cbd1640aab1cc743691e51163
#: ../../topics/db/queries.txt:1024
msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""

# 956280544702439dbbfbea4a6406eb23
#: ../../topics/db/queries.txt:1029
msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

# 8fc144a54a1448f7b85c58d1774edf73
#: ../../topics/db/queries.txt:1035
msgid "One-to-many relationships"
msgstr ""

# 195f3c401117428cb5a4c06513c81465
#: ../../topics/db/queries.txt:1038
msgid "Forward"
msgstr ""

# 5d9cfeb9677d4467a7eec7754e8a01ec
#: ../../topics/db/queries.txt:1040
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via a simple "
"attribute of the model."
msgstr ""

# 1b77cff58781474e88fe5f50c5031da0
#: ../../topics/db/queries.txt:1049
msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call :meth:"
"`~django.db.models.Model.save`. Example::"
msgstr ""

# 76391f35eb0d4ebd91fc48b66dcbb85f
#: ../../topics/db/queries.txt:1057
msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i."
"e., it allows ``NULL`` values), you can assign ``None`` to it. Example::"
msgstr ""

# a9e8e2cbd27c41f6abd1e290b372c9aa
#: ../../topics/db/queries.txt:1064
msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

# 4d8e2ab81aba4ba5b3a8e4e6348432f7
#: ../../topics/db/queries.txt:1072
msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:"
"`~django.db.models.query.QuerySet` method recursively prepopulates the cache "
"of all one-to-many relationships ahead of time. Example::"
msgstr ""

# 38dbb429ed5a491ba221921c1f1b410a
#: ../../topics/db/queries.txt:1083
msgid "Following relationships \"backward\""
msgstr ""

# c3911151a7cf4fe5917cace564f8d0f1
#: ../../topics/db/queries.txt:1085
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this :class:"
"`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in "
"the \"Retrieving objects\" section above."
msgstr ""

# f499d4d96c25449b89275db264a9226d
#: ../../topics/db/queries.txt:1102
msgid ""
"You can override the ``FOO_set`` name by setting the ``related_name`` "
"parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` "
"model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, "
"the above example code would look like this::"
msgstr ""

# 4908ccac0c954e8a94340dc7fa172f45
#: ../../topics/db/queries.txt:1114
msgid ""
"You cannot access a reverse :class:`~django.db.models.ForeignKey` :class:"
"`~django.db.models.Manager` from the class; it must be accessed from an "
"instance::"
msgstr ""

# caac78ebe22e4322b2dbbec6159efa4a
#: ../../topics/db/queries.txt:1123
msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined "
"in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :"
"class:`~django.db.models.Manager` has additional methods used to handle the "
"set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

# e380241d7b224f5782da8257e805393f
#: ../../topics/db/queries.txt:1130
msgid "Adds the specified model objects to the related object set."
msgstr ""

# f55b7fe0b6fb4759869973aedce06b21
#: ../../topics/db/queries.txt:1133
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""

# 85937241d4ea417ebea9dffc728384a3
#: ../../topics/db/queries.txt:1137
msgid "Removes the specified model objects from the related object set."
msgstr ""

# ec065020a6f74950aa6a546773ecf767
#: ../../topics/db/queries.txt:1140
msgid "Removes all objects from the related object set."
msgstr ""

# e2cf285638834280a42ef30062d47ea8
#: ../../topics/db/queries.txt:1142
msgid ""
"To assign the members of a related set in one fell swoop, just assign to it "
"from any iterable object. The iterable can contain object instances, or just "
"a list of primary key values. For example::"
msgstr ""
"To assign the members of a related set in one fell swoop, just assign to it "
"from any iterable object. The iterable can contain object instances, or just "
"a list of primary key values. 예를 들어 ::"

# f55e9444c8004714aa43324e366d2a6e
#: ../../topics/db/queries.txt:1149
msgid ""
"In this example, ``e1`` and ``e2`` can be full Entry instances, or integer "
"primary key values."
msgstr ""

# e07d9a7b437c443db8c8f0b034306758
#: ../../topics/db/queries.txt:1152
msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

# b398ea2755a441f0b09b02122a017910
#: ../../topics/db/queries.txt:1158
msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

# 83a1712282ac4bc1b115695c7f145a1e
#: ../../topics/db/queries.txt:1167
msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works just as a \"backward\" one-to-many relationship, "
"above."
msgstr ""

# 2b356029f0864352a12c92e8e7c9ccc6
#: ../../topics/db/queries.txt:1170
msgid ""
"The only difference is in the attribute naming: The model that defines the :"
"class:`~django.db.models.ManyToManyField` uses the attribute name of that "
"field itself, whereas the \"reverse\" model uses the lowercased model name "
"of the original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

# 9f0a8ac443e549acb9d53f31e5726c68
#: ../../topics/db/queries.txt:1175
msgid "An example makes this easier to understand::"
msgstr ""

# d4972ab4c89141c493f909cb36efabdb
#: ../../topics/db/queries.txt:1185
msgid ""
"Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` can specify ``related_name``. In the above example, if the :"
"class:`~django.db.models.ManyToManyField` in ``Entry`` had specified "
"``related_name='entries'``, then each ``Author`` instance would have an "
"``entries`` attribute instead of ``entry_set``."
msgstr ""

# e424a8afdba247a0a90fd860d9487902
#: ../../topics/db/queries.txt:1194
msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via a simple "
"attribute of the model."
msgstr ""

# 07ec3c2c2f844832b388de02d9ee9a82
#: ../../topics/db/queries.txt:1208
msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""

# c5a9f8b0dca0438480ceae754fc111f4
#: ../../topics/db/queries.txt:1216
msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""

# 19a82c50728246c1879c8521dcfbbbdb
#: ../../topics/db/queries.txt:1219
msgid ""
"Instances can be assigned to the reverse relationship in the same way as you "
"would assign the forward relationship::"
msgstr ""

# 2ca4ecc816af4d00acd929c6fceca2bc
#: ../../topics/db/queries.txt:1225
msgid "How are the backward relationships possible?"
msgstr ""

# d68b77f32ed84fa89f7489bb5acf146e
#: ../../topics/db/queries.txt:1227
msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

# 900a0e63c8ae492c99aac8f69ec92b0d
#: ../../topics/db/queries.txt:1232
msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

# 401a785e4dc644a4b02f03417debaa8a
#: ../../topics/db/queries.txt:1235
msgid ""
"The answer lies in the :setting:`INSTALLED_APPS` setting. The first time any "
"model is loaded, Django iterates over every model in :setting:"
"`INSTALLED_APPS` and creates the backward relationships in memory as needed. "
"Essentially, one of the functions of :setting:`INSTALLED_APPS` is to tell "
"Django the entire model domain."
msgstr ""

# b48eb5e6ab7640f68ddbf15e219e5aaa
#: ../../topics/db/queries.txt:1242
msgid "Queries over related objects"
msgstr ""

# ce56959c6a044d45ba3d947e96e9fb97
#: ../../topics/db/queries.txt:1244
msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the value for a query to match, you may "
"use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

# 259c7b76b18443d08a69181ea5963d3b
#: ../../topics/db/queries.txt:1248
msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

# b6e112480ba84619830f7b942dde6153
#: ../../topics/db/queries.txt:1256
msgid "Falling back to raw SQL"
msgstr ""

# 8bd480c9567b4b5a8c4fbab65385197d
#: ../../topics/db/queries.txt:1258
msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see :doc:`/"
"topics/db/sql`."
msgstr ""

# a7e12390a8274da29d9e4b1eae1b02c5
#: ../../topics/db/queries.txt:1263
msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""

# 7725b7e4e1f74697a656602014adffb1
#: ../../topics/db/sql.txt:3
msgid "Performing raw SQL queries"
msgstr ""

# 1c62d47e0dcb49ddba9717596fb773e4
#: ../../topics/db/sql.txt:7
msgid ""
"When the :doc:`model query APIs </topics/db/queries>` don't go far enough, "
"you can fall back to writing raw SQL. Django gives you two ways of "
"performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform "
"raw queries and return model instances`__, or you can avoid the model layer "
"entirely and `execute custom SQL directly`__."
msgstr ""

# 949faf5b956047b6a4cffaa0ce554066
#: ../../topics/db/sql.txt:19
msgid "Performing raw queries"
msgstr ""

# 544174ad16984a7d8e5c68f492151a3f
#: ../../topics/db/sql.txt:21
msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

# 22a806b1da154e4bba38c9a168bf8f68
#: ../../topics/db/sql.txt:26
msgid ""
"This method method takes a raw SQL query, executes it, and returns a :class:"
"`~django.db.models.query.RawQuerySet` instance. This :class:`~django.db."
"models.query.RawQuerySet` instance can be iterated over just like an normal "
"QuerySet to provide object instances."
msgstr ""

# 4e7a4aae58fb4de28967d0e99a937ab7
#: ../../topics/db/sql.txt:31
msgid ""
"This is best illustrated with an example. Suppose you've got the following "
"model::"
msgstr ""

# 80b786d218b541fa9e9cc17321ec67a2
#: ../../topics/db/sql.txt:38
msgid "You could then execute custom SQL like so::"
msgstr ""

# 675e4ef798ee4c1fbf7e3574637af266
#: ../../topics/db/sql.txt:45
msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

# 535b732051e048b88e2d937ae629c00c
#: ../../topics/db/sql.txt:51
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

# 92061560aec14339b58d680328e57ab5
#: ../../topics/db/sql.txt:53
msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

# 2277d260b27947f0b0c59c4b520c790b
#: ../../topics/db/sql.txt:59
msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""

# b392f16421134fefb79bfa0ef0ec68ca
#: ../../topics/db/sql.txt:65
msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

# a73c649f489443988d09829c88433c1e
#: ../../topics/db/sql.txt:71
msgid "Mapping query fields to model fields"
msgstr ""

# f1acb417a3c4419cb1eaec29f64a06a8
#: ../../topics/db/sql.txt:73
msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

# 3fcb51591f2d47eabea62cf82f9bf05b
#: ../../topics/db/sql.txt:75
msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

# 6649011f7a224a539ee33957e8f0e1ad
#: ../../topics/db/sql.txt:83
msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

# 68116dc36a2a4259aba29de2dd249a42
#: ../../topics/db/sql.txt:93
msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

# 0275779b68dc4fe293f602a45858eef5
#: ../../topics/db/sql.txt:95
msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

# 16528cbeab364961b92f889f8cea740c
#: ../../topics/db/sql.txt:104
msgid "Index lookups"
msgstr ""

# 911cd47187674a33afaa5bb233c04bf9
#: ../../topics/db/sql.txt:106
msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

# 004dc5736d2947efa92e1f3f905e2286
#: ../../topics/db/sql.txt:111
msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a big amount of ``Person`` objects in your database, it is more "
"efficient to limit the query at the SQL level::"
msgstr ""

# e4ee6628d4e84732a44e8e9e66538277
#: ../../topics/db/sql.txt:118
msgid "Deferring model fields"
msgstr ""

# 99aadfc3d03541169627420b4cf184d7
#: ../../topics/db/sql.txt:120
msgid "Fields may also be left out::"
msgstr ""

# 9075c77f086d42e1bb71c0c281494d21
#: ../../topics/db/sql.txt:124
msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. 예"
"를 들어 ::"

# bf75cfbd8e6b472faf45fd33c31d163b
#: ../../topics/db/sql.txt:135
msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

# c8603ff5fd0e4244801fd0265dd3d453
#: ../../topics/db/sql.txt:140
msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

# 65461d0372664379b657a14e5407d682
#: ../../topics/db/sql.txt:146
msgid "Adding annotations"
msgstr ""

# b826969c47d642b9b3c8bbfff5fafbf8
#: ../../topics/db/sql.txt:148
msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

# 54a1405258244aa2a5a3c91ea97ee937
#: ../../topics/db/sql.txt:162
msgid "Passing parameters into ``raw()``"
msgstr ""

# 95b7fe5fb34643458ff451aad781144d
#: ../../topics/db/sql.txt:164
msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

# 876a217e353f4946af3a6cb70634d9ca
#: ../../topics/db/sql.txt:170
msgid ""
"``params`` is a list of parameters. You'll use ``%s`` placeholders in the "
"query string (regardless of your database engine); they'll be replaced with "
"parameters from the ``params`` list."
msgstr ""

# 0fb2e5601cc44b67a5b59fdca03c4cef
#: ../../topics/db/sql.txt:176
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

# 6c62c883959f4ce89ae9269805b770fd
#: ../../topics/db/sql.txt:178
msgid "It's tempting to write the above query as::"
msgstr ""

# 132d4339cbc047b889b90b5550302b32
#: ../../topics/db/sql.txt:183
msgid "**Don't.**"
msgstr ""

# 44a3216056e645a88e56ee1aad14b43a
#: ../../topics/db/sql.txt:185
msgid ""
"Using the ``params`` list completely protects you from `SQL injection "
"attacks`__, a common exploit where attackers inject arbitrary SQL into your "
"database. If you use string interpolation, sooner or later you'll fall "
"victim to SQL injection. As long as you remember to always use the "
"``params`` list you'll be protected."
msgstr ""

# 9139ee03b4274b4b96c9862379a100f1
#: ../../topics/db/sql.txt:196
msgid "Executing custom SQL directly"
msgstr ""

# f126bd20487348f6b2566e5001addd18
#: ../../topics/db/sql.txt:198
msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

# 97f3b5d0acff40d7b39f64bbfcaa89ea
#: ../../topics/db/sql.txt:202
msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

# 03c78bbec50f4182b383c8e40bc086db
#: ../../topics/db/sql.txt:205
msgid ""
"The object ``django.db.connection`` represents the default database "
"connection, and ``django.db.transaction`` represents the default database "
"transaction. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows. After performing a data changing operation, you should then "
"call ``transaction.commit_unless_managed()`` to ensure your changes are "
"committed to the database. If your query is purely a data retrieval "
"operation, no commit is required. For example::"
msgstr ""
"The object ``django.db.connection`` represents the default database "
"connection, and ``django.db.transaction`` represents the default database "
"transaction. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows. After performing a data changing operation, you should then "
"call ``transaction.commit_unless_managed()`` to ensure your changes are "
"committed to the database. If your query is purely a data retrieval "
"operation, no commit is required. 예를 들어 ::"

# 6eafb1ea3242422ba29ef66d5ff317f7
#: ../../topics/db/sql.txt:230
msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

# 603dde87b39c4ca2b040e9d6c1d4a261
#: ../../topics/db/sql.txt:241
msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance cost, you can return results as a ``dict`` by using "
"something like this::"
msgstr ""

# 9d0cc5d8d1264d008bc0743fa6971103
#: ../../topics/db/sql.txt:254
msgid "Here is an example of the difference between the two::"
msgstr ""

# b532590f83bd417292e2d8cc170eda47
#: ../../topics/db/sql.txt:268
msgid "Transactions and raw SQL"
msgstr ""

# ed392cd406564266badb184b9974b45f
#: ../../topics/db/sql.txt:270
msgid ""
"When you make a raw SQL call, Django will automatically mark the current "
"transaction as dirty. You must then ensure that the transaction containing "
"those calls is closed correctly. See :ref:`the notes on the requirements of "
"Django's transaction handling <topics-db-transactions-requirements>` for "
"more details."
msgstr ""

# 516ec4ca6e8740a19f2b27f7b7d2b95a
#: ../../topics/db/sql.txt:277
msgid "Connections and cursors"
msgstr ""

# b1c153e6ce0748ae8259725ed189f718
#: ../../topics/db/sql.txt:279
msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` (except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`). If you're not familiar with the Python DB-API, "
"note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s"
"\"``, rather than adding parameters directly within the SQL. If you use this "
"technique, the underlying database library will automatically add quotes and "
"escaping to your parameter(s) as necessary. (Also note that Django expects "
"the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used "
"by the SQLite Python bindings. This is for the sake of consistency and "
"sanity.)"
msgstr ""

# 1c75bfef9b824193bfc51457a14ccf31
#: ../../topics/db/tablespaces.txt:3
msgid "Tablespaces"
msgstr ""

# 6bf9045f6c5b4893b63158a6ad348c32
#: ../../topics/db/tablespaces.txt:5
msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""

# 7916e439977d44a7a6e9afb3f4e87df6
#: ../../topics/db/tablespaces.txt:11
msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""

# a1d679bb62c74c9e9ae1053508c1dfb6
#: ../../topics/db/tablespaces.txt:17
msgid "Declaring tablespaces for tables"
msgstr ""

# 31bcebf6731345de98eefcc81300cb9b
#: ../../topics/db/tablespaces.txt:19
msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

# 2481dba5916b48c9a746f6130b87fff5
#: ../../topics/db/tablespaces.txt:24
msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications "
"whose code you cannot control."
msgstr ""

# 4de0771a487c4ed19718ccb302c4fd56
#: ../../topics/db/tablespaces.txt:30
msgid "Declaring tablespaces for indexes"
msgstr ""

# 09d8618632234c3f8d297ada7af9f77a
#: ../../topics/db/tablespaces.txt:32
msgid ""
"You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a "
"``Field`` constructor to specify an alternate tablespace for the ``Field``'s "
"column index. If no index would be created for the column, the option is "
"ignored."
msgstr ""

# c3a4f41398e944639d31502d355236ef
#: ../../topics/db/tablespaces.txt:37
msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

# 326b31af4b594b4c9043884c1724d898
#: ../../topics/db/tablespaces.txt:40
msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""

# c9290df5d4f14768a8de462cddea2887
#: ../../topics/db/tablespaces.txt:57
msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model (i."
"e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default."
msgstr ""

# 57e428718f5d4b3b8b909c2c80606b93
#: ../../topics/db/tablespaces.txt:65
msgid "Database support"
msgstr ""

# c3e8fd4c24b74a56b33545b34b31ec79
#: ../../topics/db/tablespaces.txt:67
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

# df824792977a459ba45c992aeb69f155
#: ../../topics/db/tablespaces.txt:69
msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""

# 4fed1fc4e1474218affd1a936878c8c2
#: ../../topics/db/transactions.txt:3
msgid "Managing database transactions"
msgstr ""

# 5984d588d099423d9270582568b54a9a
#: ../../topics/db/transactions.txt:7
msgid ""
"Django gives you a few ways to control how database transactions are "
"managed, if you're using a database that supports transactions."
msgstr ""

# de1fcc2111824dbaa1d6591d24307fe4
#: ../../topics/db/transactions.txt:11
msgid "Django's default transaction behavior"
msgstr ""

# 24f6857cc10c4e3b97bc4ad78a43464b
#: ../../topics/db/transactions.txt:13
msgid ""
"Django's default behavior is to run with an open transaction which it "
"commits automatically when any built-in, data-altering model function is "
"called. For example, if you call ``model.save()`` or ``model.delete()``, the "
"change will be committed immediately."
msgstr ""

# 6a5e99a398274685be242c0dd8dd01c2
#: ../../topics/db/transactions.txt:18
msgid ""
"This is much like the auto-commit setting for most databases. As soon as you "
"perform an action that needs to write to the database, Django produces the "
"``INSERT``/``UPDATE``/``DELETE`` statements and then does the ``COMMIT``. "
"There's no implicit ``ROLLBACK``."
msgstr ""

# fd80d5931bf34db2bbb64cd31e40871c
#: ../../topics/db/transactions.txt:24
msgid "Tying transactions to HTTP requests"
msgstr ""

# 61230488f4914ac8ae326f2e9294cf80
#: ../../topics/db/transactions.txt:26
msgid ""
"The recommended way to handle transactions in Web requests is to tie them to "
"the request and response phases via Django's ``TransactionMiddleware``."
msgstr ""

# 10f1e96d18154556bb6e1ddcd496ad45
#: ../../topics/db/transactions.txt:29
msgid ""
"It works like this: When a request starts, Django starts a transaction. If "
"the response is produced without problems, Django commits any pending "
"transactions. If the view function produces an exception, Django rolls back "
"any pending transactions."
msgstr ""

# 9ef7d42887be41ad9b017590cbe4ccb0
#: ../../topics/db/transactions.txt:34
msgid ""
"To activate this feature, just add the ``TransactionMiddleware`` middleware "
"to your :setting:`MIDDLEWARE_CLASSES` setting::"
msgstr ""

# e3c555887a4445389229a98f86091293
#: ../../topics/db/transactions.txt:45
msgid ""
"The order is quite important. The transaction middleware applies not only to "
"view functions, but also for all middleware modules that come after it. So "
"if you use the session middleware after the transaction middleware, session "
"creation will be part of the transaction."
msgstr ""

# 10cc84970d3e4cc58068d3736db63287
#: ../../topics/db/transactions.txt:50
msgid ""
"The various cache middlewares are an exception: :class:`~django.middleware."
"cache.CacheMiddleware`, :class:`~django.middleware.cache."
"UpdateCacheMiddleware`, and :class:`~django.middleware.cache."
"FetchFromCacheMiddleware` are never affected. Even when using database "
"caching, Django's cache backend uses its own database cursor (which is "
"mapped to its own database connection internally)."
msgstr ""

# 189907f484d64c199bfcea7d3b31f1ca
#: ../../topics/db/transactions.txt:59
msgid ""
"The ``TransactionMiddleware`` only affects the database aliased as \"default"
"\" within your :setting:`DATABASES` setting.  If you are using multiple "
"databases and want transaction control over databases other than \"default"
"\", you will need to write your own transaction middleware."
msgstr ""

# 52b1c5d822a1443a8c7825c18b86db0f
#: ../../topics/db/transactions.txt:67
msgid "Controlling transaction management in views"
msgstr ""

# 7c3905dac7dc44dabf15877e825648a2
#: ../../topics/db/transactions.txt:69
msgid ""
"For most people, implicit request-based transactions work wonderfully. "
"However, if you need more fine-grained control over how transactions are "
"managed, you can use a set of functions in ``django.db.transaction`` to "
"control transactions on a per-function or per-code-block basis."
msgstr ""

# 4f36706cf5c84a219a1e13c11fb8bb4a
#: ../../topics/db/transactions.txt:74
msgid ""
"These functions, described in detail below, can be used in two different "
"ways:"
msgstr ""

# b1cefd7da7f74436971ea01b6b519303
#: ../../topics/db/transactions.txt:76
msgid "As a decorator_ on a particular function. For example::"
msgstr "As a decorator_ on a particular function. 예를 들어 ::"

# 235f20c7b0ff4f8a977f8f02a9ea9dc1
#: ../../topics/db/transactions.txt:86
msgid "As a `context manager`_ around a particular block of code::"
msgstr ""

# 3343ad2a31254937b6028dd123aaa9a5
#: ../../topics/db/transactions.txt:100
msgid "Both techniques work with all supported version of Python."
msgstr ""

# 364f3ddf4db84f87b41bd9a49503cfe4
#: ../../topics/db/transactions.txt:105
msgid ""
"For maximum compatibility, all of the examples below show transactions using "
"the decorator syntax, but all of the follow functions may be used as context "
"managers, too."
msgstr ""

# 085cd328562142a880102d0581d3306a
#: ../../topics/db/transactions.txt:111
msgid ""
"Although the examples below use view functions as examples, these decorators "
"and context managers can be used anywhere in your code that you need to deal "
"with transactions."
msgstr ""

# a1740345de984fc7ae19b5b91f3d521c
#: ../../topics/db/transactions.txt:119
msgid ""
"Use the ``autocommit`` decorator to switch a view function to Django's "
"default commit behavior, regardless of the global transaction setting."
msgstr ""

# 8babb1173fc5429186dd426d59759be8
#: ../../topics/db/transactions.txt:134
msgid ""
"Within ``viewfunc()``, transactions will be committed as soon as you call "
"``model.save()``, ``model.delete()``, or any other function that writes to "
"the database.  ``viewfunc2()`` will have this same behavior, but for the ``"
"\"my_other_database\"`` connection."
msgstr ""

# e2fb49661ed94e90bd25648dc78c9402
#: ../../topics/db/transactions.txt:141
msgid ""
"Use the ``commit_on_success`` decorator to use a single transaction for all "
"the work done in a function::"
msgstr ""

# 42c9b711ac2d488f97d03c266a9eb31a
#: ../../topics/db/transactions.txt:154
msgid ""
"If the function returns successfully, then Django will commit all work done "
"within the function at that point. If the function raises an exception, "
"though, Django will roll back the transaction."
msgstr ""

# 680f2c77044643b6a6a282c1aabf9ba3
#: ../../topics/db/transactions.txt:160
msgid ""
"Use the ``commit_manually`` decorator if you need full control over "
"transactions. It tells Django you'll be managing the transaction on your own."
msgstr ""

# e80e8a7b2900443ca3a5dd4ae36debe1
#: ../../topics/db/transactions.txt:164
msgid ""
"Whether you are writing or simply reading from the database, you must "
"``commit()`` or ``rollback()`` explicitly or Django will raise a :exc:"
"`TransactionManagementError` exception. This is required when reading from "
"the database because ``SELECT`` statements may call functions which modify "
"tables, and thus it is impossible to know if any data has been modified."
msgstr ""

# 04e1bfb5f2e84ba8bb4fa387d96e7cd0
#: ../../topics/db/transactions.txt:171
msgid "Manual transaction management looks like this::"
msgstr ""

# 7061847f031540e3851dca19d7512125
#: ../../topics/db/transactions.txt:197
msgid "Requirements for transaction handling"
msgstr ""

# 3d5aeae8f7c144a191c2485f5563145e
#: ../../topics/db/transactions.txt:199
msgid ""
"Django requires that every transaction that is opened is closed before the "
"completion of a request. If you are using :func:`autocommit` (the default "
"commit mode) or :func:`commit_on_success`, this will be done for you "
"automatically. However, if you are manually managing transactions (using "
"the :func:`commit_manually` decorator), you must ensure that the transaction "
"is either committed or rolled back before a request is completed."
msgstr ""

# d2a48b3fe0fe4026ab6a99e2938355fd
#: ../../topics/db/transactions.txt:207
msgid ""
"This applies to all database operations, not just write operations. Even if "
"your transaction only reads from the database, the transaction must be "
"committed or rolled back before you complete a request."
msgstr ""

# 03aa15d87a4c4ef4b6e2e7453355181e
#: ../../topics/db/transactions.txt:212
msgid "How to globally deactivate transaction management"
msgstr ""

# 579aeebe99ab49248c250fbfbfc15f75
#: ../../topics/db/transactions.txt:214
msgid ""
"Control freaks can totally disable all transaction management by setting "
"``DISABLE_TRANSACTION_MANAGEMENT`` to ``True`` in the Django settings file."
msgstr ""

# 00b8bbe928f54a06bc7bf35d6651955d
#: ../../topics/db/transactions.txt:217
msgid ""
"If you do this, Django won't provide any automatic transaction management "
"whatsoever. Middleware will no longer implicitly commit transactions, and "
"you'll need to roll management yourself. This even requires you to commit "
"changes done by middleware somewhere else."
msgstr ""

# cc75f9d1be974e668af881d9d36a7ce7
#: ../../topics/db/transactions.txt:222
msgid ""
"Thus, this is best used in situations where you want to run your own "
"transaction-controlling middleware or do something really strange. In almost "
"all situations, you'll be better off using the default behavior, or the "
"transaction middleware, and only modify selected functions as needed."
msgstr ""

# 5e52c3528e6d4008ab247b699f7ec87c
#: ../../topics/db/transactions.txt:230
msgid "Savepoints"
msgstr ""

# 92c9b7a2c1b44e488ffeed034988d7b5
#: ../../topics/db/transactions.txt:232
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the PostgreSQL 8, Oracle and MySQL (when using the InnoDB "
"storage engine) backends. Other backends provide the savepoint functions, "
"but they're empty operations -- they don't actually do anything."
msgstr ""

# b98602e8d2834d15864e35ca6739438a
#: ../../topics/db/transactions.txt:241
msgid ""
"Savepoints aren't especially useful if you are using the default "
"``autocommit`` behavior of Django. However, if you are using "
"``commit_on_success`` or ``commit_manually``, each open transaction will "
"build up a series of database operations, awaiting a commit or rollback. If "
"you issue a rollback, the entire transaction is rolled back. Savepoints "
"provide the ability to perform a fine-grained rollback, rather than the full "
"rollback that would be performed by ``transaction.rollback()``."
msgstr ""

# d74d8e64f6224fb48c33e59f8e2f1e0d
#: ../../topics/db/transactions.txt:249
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""

# 5e1ff69c7c7840df8fa0bff8b297cfc6
#: ../../topics/db/transactions.txt:253
msgid "Savepoints are controlled by three methods on the transaction object:"
msgstr ""

# 72f7ef58fae949f89080d250ceb4c04e
#: ../../topics/db/transactions.txt:257
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state."
msgstr ""

# 60ab8210b1b14ca1b42e1cc380dc1fb4
#: ../../topics/db/transactions.txt:260
msgid "Returns the savepoint ID (sid)."
msgstr ""

# c9b9dc0a3b7e4d9cbef8040370d8938e
#: ../../topics/db/transactions.txt:264
msgid ""
"Updates the savepoint to include any operations that have been performed "
"since the savepoint was created, or since the last commit."
msgstr ""

# 94a6040fd7724d0ba03e06ffc36e603e
#: ../../topics/db/transactions.txt:269
msgid ""
"Rolls the transaction back to the last point at which the savepoint was "
"committed."
msgstr ""

# bfbcfa37c8b94711bb3bfe4c8912bacb
#: ../../topics/db/transactions.txt:272
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

# 8b8bf3b9b3f14d19a85ec209c03d0eae
#: ../../topics/db/transactions.txt:296
msgid "Transactions in MySQL"
msgstr ""

# 7d713dfa20854ce0947fa35b625eda8c
#: ../../topics/db/transactions.txt:298
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""

# 8c2d06aaab8d437ea065ca3db5a785c3
#: ../../topics/db/transactions.txt:304
msgid ""
"If your MySQL setup does *not* support transactions, then Django will "
"function in auto-commit mode: Statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""

# 01b82e7898c04aff84586d9a4e0b8ca5
#: ../../topics/db/transactions.txt:312
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

# 84fa56de636647d7923e195e45c091e8
#: ../../topics/db/transactions.txt:314
msgid ""
"When a call to a PostgreSQL cursor raises an exception (typically "
"``IntegrityError``), all subsequent SQL in the same transaction will fail "
"with the error \"current transaction is aborted, queries ignored until end "
"of transaction block\". Whilst simple use of ``save()`` is unlikely to raise "
"an exception in PostgreSQL, there are more advanced usage patterns which "
"might, such as saving objects with unique fields, saving using the "
"force_insert/force_update flag, or invoking custom SQL."
msgstr ""

# c6133b6b84244aa59170dc5f56c1391d
#: ../../topics/db/transactions.txt:322
msgid "There are several ways to recover from this sort of error."
msgstr ""

# 12b2a4524ba74fdb9b8bb564e93538b7
#: ../../topics/db/transactions.txt:325
msgid "Transaction rollback"
msgstr ""

# abf6c3dec8d0415d9c90e94e9e5d8383
#: ../../topics/db/transactions.txt:327
msgid "The first option is to roll back the entire transaction. For example::"
msgstr "The first option is to roll back the entire transaction. 예를 들어 ::"

# 1287825b118541b58549f98bcddaad61
#: ../../topics/db/transactions.txt:336
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""

# b82de048ed65475da85df0c850d3b854
#: ../../topics/db/transactions.txt:342
msgid "Savepoint rollback"
msgstr ""

# aaa6fc0a70ca4e00970936f6c003e3e2
#: ../../topics/db/transactions.txt:344
msgid ""
"If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-"
"db-transactions-savepoints>` to control the extent of a rollback. Before "
"performing a database operation that could fail, you can set or update the "
"savepoint; that way, if the operation fails, you can roll back the single "
"offending operation, rather than the entire transaction. For example::"
msgstr ""
"If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-"
"db-transactions-savepoints>` to control the extent of a rollback. Before "
"performing a database operation that could fail, you can set or update the "
"savepoint; that way, if the operation fails, you can roll back the single "
"offending operation, rather than the entire transaction. 예를 들어 ::"

# 1d9bd176a2f44b44b46ef3753f1b471f
#: ../../topics/db/transactions.txt:359
msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b.save()"
"`` raises an exception."
msgstr ""

# cd77010f3c60453ea860b0b691eee760
#: ../../topics/db/transactions.txt:363
msgid "Database-level autocommit"
msgstr ""

# 8b7b2b4863a1448a8a9c58ad9acfd4d2
#: ../../topics/db/transactions.txt:365
msgid ""
"With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL "
"with :doc:`database-level autocommit </ref/databases>`. If you use this "
"option, there is no constantly open transaction, so it is always possible to "
"continue after catching an exception. For example::"
msgstr ""
"With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL "
"with :doc:`database-level autocommit </ref/databases>`. If you use this "
"option, there is no constantly open transaction, so it is always possible to "
"continue after catching an exception. 예를 들어 ::"

# 34c73753532941648d4e5500143efeda
#: ../../topics/db/transactions.txt:379
msgid ""
"This is not the same as the :ref:`autocommit decorator <topics-db-"
"transactions-autocommit>`. When using database level autocommit there is no "
"database transaction at all. The ``autocommit`` decorator still uses "
"transactions, automatically committing each transaction when a database "
"modifying operation occurs."
msgstr ""

# e85c0f44f7eb453584bb26ae5d238308
#: ../../topics/email.txt:3
msgid "Sending email"
msgstr ""

# 894853608e0443d989d3d95ac4021adb
#: ../../topics/email.txt:8
msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr ""

# bcfa2021783e4b909b09aad9ede9ce00
#: ../../topics/email.txt:14
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

# 3f199b4f507346c3aef955c1b17911f1
#: ../../topics/email.txt:19
msgid "In two lines::"
msgstr ""

# c06b868780604453a9d2dcf0c4bde667
#: ../../topics/email.txt:26
msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"setting controls whether a secure connection is used."
msgstr ""

# 7b84eaa4e2824e80a1b033ecda0abea5
#: ../../topics/email.txt:34
msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

# b6e79ec79c7549f4ba2d40669f49a24d
#: ../../topics/email.txt:38
msgid "send_mail()"
msgstr ""

# 722a86ae3e524ff2a56834dea51b7012
#: ../../topics/email.txt:42
msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

# 52b6e27a2021452a994424742752c66f
#: ../../topics/email.txt:45
msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""

# abe290d191c14693af0302a79458a3f9
#: ../../topics/email.txt:48
msgid "``subject``: A string."
msgstr ""

# f3209f9f58d4406dbd8261b05d05b3d3
#: ../../topics/email.txt:49
msgid "``message``: A string."
msgstr ""

# 445dee8bee66460593609d07a82a6d7f
#: ../../topics/email.txt:50
msgid "``from_email``: A string."
msgstr ""

# 5e2f6be76a08468ca8b0143fc88db89f
#: ../../topics/email.txt:51
msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""

# 2575eb3dbc7448bfb5d0cfba7c0684e0
#: ../../topics/email.txt:54
msgid ""
"``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise "
"an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of "
"possible exceptions, all of which are subclasses of :exc:`~smtplib."
"SMTPException`."
msgstr ""

# 2b30ce314dca4300b52ceecb3071c001
#: ../../topics/email.txt:58
msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""

# 91a7786d019e4053bba915f21aca691d
#: ../../topics/email.txt:61
msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""

# 8812bfd55b0c4000aa471101db284f04
#: ../../topics/email.txt:64
msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""

# 5e292d4cfaf14dbe9dc5054628120f46
#: ../../topics/email.txt:70
msgid "send_mass_mail()"
msgstr ""

# 4834722ce8ce4b059dd235a3c1730bdd
#: ../../topics/email.txt:74
msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

# af9843fa493541b0a3551bf8a87eb58b
#: ../../topics/email.txt:76
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

# ccdfc977102b4257966a9281e60bec42
#: ../../topics/email.txt:80
msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

# 620fa265782348768acb99f3316af0b4
#: ../../topics/email.txt:83
msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""

# 8be570ff968a49ae9a580e97086e75c5
#: ../../topics/email.txt:88
msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""

# a65ae4143e734389b00d407d4a63f34f
#: ../../topics/email.txt:97
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

# 5f68bca238bb46f3a1f327f0dc078eb3
#: ../../topics/email.txt:99
msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail.send_mass_mail()"
"` slightly more efficient."
msgstr ""

# 443a1cefa3344f6fa5b8ccb673dfc878
#: ../../topics/email.txt:107
msgid "mail_admins()"
msgstr ""

# 0678c4b084004da58800d649944c2d89
#: ../../topics/email.txt:111
msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

# 0537ef51a42848519113665f59a440a9
#: ../../topics/email.txt:114
msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

# 52c0298f0d7b4051a10a7259e3d6c109
#: ../../topics/email.txt:117
msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr ""

# 8127bcb4750b4eeeaaf153cd39f38f45
#: ../../topics/email.txt:120
msgid "This method exists for convenience and readability."
msgstr ""

# ca3eb3f78fe24fd58c75a59d88f79841
#: ../../topics/email.txt:122
msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

# 06bbff93e4fc4361a0331c62f8e04ada
#: ../../topics/email.txt:128
msgid "mail_managers()"
msgstr ""

# d83821e16d2845ee8336b4b886f7c01e
#: ../../topics/email.txt:132
msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""

# 0b3b7481f0474c9082d96db6f9d5ea22
# 8f1df5c3a9384dbc94ba2034d381dc39
# 46055122f0ae417c9e0fc20952fcc1ca
# e8e4916e701d43d4ad3efd737d2aec65
#: ../../topics/email.txt:137 ../../topics/http/sessions.txt:304
#: ../../topics/http/shortcuts.txt:174 ../../topics/http/urls.txt:562
msgid "Examples"
msgstr ""

# bf47c6a5dcb24bfcb657dc200ba4e91c
#: ../../topics/email.txt:139
msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""

# 4e9084b2421d4ef49790e84b4d4beef8
#: ../../topics/email.txt:145
msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""

# 029a97070b0c4d3ca041abc608108a86
#: ../../topics/email.txt:155
msgid "Preventing header injection"
msgstr ""

# bcb645a2ca69493dbca08d394fe50da5
#: ../../topics/email.txt:157
msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""

# bf2b58569bc449e1ada535d08b04aad6
#: ../../topics/email.txt:161
msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""

# da31d8503c834bd0942ed73ea919b3d5
#: ../../topics/email.txt:169
msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr ""

# c5ecaade6d0746f7baa8387800526ca4
#: ../../topics/email.txt:172
msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

# af26b128d2ef4ed38e55db669f62ec07
#: ../../topics/email.txt:198
msgid "The EmailMessage class"
msgstr ""

# aebc6c0228834259ac8fe93fcf2d9a28
#: ../../topics/email.txt:200
msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""

# 8e510b27fca5445681cc76b23aa28a79
#: ../../topics/email.txt:204
msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

# 15eaf02a474c4953a0d6b26507c41816
#: ../../topics/email.txt:211
msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""

# a9085b1ff6c34410ac3930b7fa993b7b
#: ../../topics/email.txt:218
msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""

# 4320730c7c534ada9194bf6b76a8b863
#: ../../topics/email.txt:222
msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""

# aa64bcfa95be44c1810ca2da8626bbe7
#: ../../topics/email.txt:228
msgid "EmailMessage Objects"
msgstr ""

# 01d1d8c77456438495cca91cb54471ac
#: ../../topics/email.txt:232
msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""

# 6625a5664a4b4fc790958c3536ae9323
#: ../../topics/email.txt:237
msgid "``subject``: The subject line of the email."
msgstr ""

# 1720a59b50a94820865e29536609e20a
#: ../../topics/email.txt:239
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

# 4056b708184941f68df2d368340d0ed4
#: ../../topics/email.txt:241
msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

# 4d35edb0a5f4483c99e973539544dbf6
#: ../../topics/email.txt:245
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

# 533662a743144dbeab5122b6829b679e
#: ../../topics/email.txt:247
msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""

# fceedad5a5d34f2c88370cf3ba81a8e0
#: ../../topics/email.txt:250
msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""

# bfee25f3699647a29a935c99eb765ad7
#: ../../topics/email.txt:254
msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, "
"mimetype)`` triples."
msgstr ""

# b574a0cee4dd470e978cd3e67e84cfc8
#: ../../topics/email.txt:258
msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message."
msgstr ""

# 16f5b8fbc1f04c96bf4047ae4ebe0a27
#: ../../topics/email.txt:263
msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""

# 521f1cf89ed745cfae9d570440f051ab
#: ../../topics/email.txt:272
msgid "The class has the following methods:"
msgstr ""

# 866315bae47f48928ebafd3e7cfff9d7
#: ../../topics/email.txt:274
msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed."
msgstr ""

# e83075943ec54e8facb36c8dc3f6045a
#: ../../topics/email.txt:280
msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core."
"mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever "
"need to extend the :class:`~django.core.mail.EmailMessage` class, you'll "
"probably want to override this method to put the content you want into the "
"MIME object."
msgstr ""

# 75de3c70692d4db29ec85e99dc988ce0
#: ../../topics/email.txt:287
msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""

# 921fa7d25f07487787ba9695d69fa3a6
#: ../../topics/email.txt:294
msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""

# da078e94bf5145d5b9b68ccc5df5fa38
#: ../../topics/email.txt:297
msgid ""
"You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` "
"instance. This will be inserted directly into the resulting message."
msgstr ""

# 3aeb3e875f6a448cacbc33e2fdecaaa4
#: ../../topics/email.txt:301
msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""

# 7a27f408266d4518ad62957f125e0b58
#: ../../topics/email.txt:313
msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. The simplest use would be::"
msgstr ""

# 494589014aa246d4a7fff908cb67955e
#: ../../topics/email.txt:323
msgid "Sending alternative content types"
msgstr ""

# 48812168d43249d3a27c826fa6352a60
#: ../../topics/email.txt:325
msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""

# ac5f7f48e4a24115a8e8ec9d8235e10c
#: ../../topics/email.txt:333
msgid "To send a text and HTML combination, you could write::"
msgstr ""

# 40b2b30722c647658cabf46343b0b2aa
#: ../../topics/email.txt:344
msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. For example::"
msgstr ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. 예를 들어 ::"

# c55fc40de2454a7bbef545ca48cdcfbc
#: ../../topics/email.txt:361
msgid "Email backends"
msgstr ""

# 6d5686f7b69e4749a1e7dbfea1f56bdc
#: ../../topics/email.txt:363
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

# 0dc0207cf3ae47479a1c04d0be2b4a23
#: ../../topics/email.txt:365
msgid "The email backend class has the following methods:"
msgstr ""

# 28917675f0f74a69a688c6088f334d79
#: ../../topics/email.txt:367
msgid "``open()`` instantiates an long-lived email-sending connection."
msgstr ""

# bdc399f4a10545f7a6a476a5e0be3317
#: ../../topics/email.txt:369
msgid "``close()`` closes the current email-sending connection."
msgstr ""

# 48fc880f9e6e4caf84d4718600822762
#: ../../topics/email.txt:371
msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterwards. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""

# 5de4e36491cd4d1faf896a3ed050e4a1
#: ../../topics/email.txt:378
msgid "Obtaining an instance of an email backend"
msgstr ""

# b2c18b1ef0334c279da4449ac08192c2
#: ../../topics/email.txt:380
msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""

# d3b63f64f26243cbb59546feee85d649
#: ../../topics/email.txt:387
msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

# 083cb22ea7604a01ba4029d3fbabe59b
#: ../../topics/email.txt:391
msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""

# 6c54a3cf48f84d96992c1cb4fb00321b
#: ../../topics/email.txt:395
msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""

# d624d91035d94a73ab2729a730d378eb
#: ../../topics/email.txt:398
msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

# 6b4c3bed7cda483eaaffe5efe4aa32cb
#: ../../topics/email.txt:406
msgid "SMTP backend"
msgstr ""

# c32c55ad9f664b33b451802b20be43fb
#: ../../topics/email.txt:408
msgid ""
"This is the default backend. Email will be sent through a SMTP server. The "
"server address and authentication credentials are set in the :setting:"
"`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:"
"`EMAIL_HOST_PASSWORD` and :setting:`EMAIL_USE_TLS` settings in your settings "
"file."
msgstr ""

# 1b2b16ce149f456b91062f0077258477
#: ../../topics/email.txt:414
msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""

# 4daf052185b14092a8643d1f5cfb6956
#: ../../topics/email.txt:422
msgid "Console backend"
msgstr ""

# 3bfb0c5c05064dea84384028da9a97cf
#: ../../topics/email.txt:424
msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be send to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

# 36378c7b344b4a0292be88c49bc52e77
# 880667056ed94e84960c51fddd660e95
# ebfa731198524dd5921688c8b767c2bd
#: ../../topics/email.txt:429 ../../topics/email.txt:447
#: ../../topics/email.txt:466
msgid "To specify this backend, put the following in your settings::"
msgstr ""

# fc7bda1e35c94bceb6883a9252700ead
# 95d3cecfbcf54eb796bebbcc775b1493
# b94258212dab4cce833535d316ac840e
#: ../../topics/email.txt:433 ../../topics/email.txt:452
#: ../../topics/email.txt:483
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""

# 1c8045bd102c4446be93069747ad1a7a
#: ../../topics/email.txt:439
msgid "File backend"
msgstr ""

# 06d81445056e4c1cb725e052534fb40e
#: ../../topics/email.txt:441
msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""

# 2c7d9c172a184cc4ad5459ab93d3c9c9
#: ../../topics/email.txt:458
msgid "In-memory backend"
msgstr ""

# f92b71aec93e4d62b5438971d3870e91
#: ../../topics/email.txt:460
msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be send."
msgstr ""

# 6743ac54e93540beb74c22b660882e70
#: ../../topics/email.txt:470
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""

# 1557fc99bda74339be6def035d53037f
#: ../../topics/email.txt:476
msgid "Dummy backend"
msgstr ""

# d44a8159303547989d83b7ec0c8a268c
#: ../../topics/email.txt:478
msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""

# e16fdaa63a8d463f87a7f095c0ffd22d
#: ../../topics/email.txt:489
msgid "Defining a custom email backend"
msgstr ""

# 7031a3c510d84cf687f5a52392a4a08d
#: ../../topics/email.txt:491
msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""

# 883aa7e1efef43178b4aa5137f186831
#: ../../topics/email.txt:495
msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""

# 3b3c05e44dc7402e88d7c150efa4da54
#: ../../topics/email.txt:507
msgid "Sending multiple emails"
msgstr ""

# 483585e5090c45faa9233bc38c3e68ff
#: ../../topics/email.txt:509
msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""

# 3b9d157090d3444d97d230c16b53aec6
#: ../../topics/email.txt:514
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

# fbe99c948a874c63836f3655597ab72b
#: ../../topics/email.txt:516
msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""

# e54f84b462ac4425a1677f3afdc20302
#: ../../topics/email.txt:520
msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""

# cdf7bc73caaf4d47ad9c3c9ad3147991
#: ../../topics/email.txt:530
msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""

# 536f24c51d844154bc8df4a00880635e
#: ../../topics/email.txt:533
msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. 예를 들어 ::"

# d6d4f8c8083e4260b68f879462e6d620
#: ../../topics/email.txt:563
msgid "Testing email sending"
msgstr ""

# 10da31c739a04508820b5ea43efac19c
#: ../../topics/email.txt:565
msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a Web site, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""

# 49fd2419a0dd4eeebb2681d0d31cedef
#: ../../topics/email.txt:571
msgid ""
"The easiest way to test your project's use of email is to use the "
"``console`` email backend. This backend redirects all email to stdout, "
"allowing you to inspect the content of mail."
msgstr ""

# f4dfa68913ed4618a6f84fbe2358c33b
#: ../../topics/email.txt:575
msgid ""
"The ``file`` email backend can also be useful during development -- this "
"backend dumps the contents of every SMTP connection to a file that can be "
"inspected at your leisure."
msgstr ""

# 26a14bc7dbff42c29f82dd1c9264a282
#: ../../topics/email.txt:579
msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr ""

# ae7158f9b84b4fe189e02c7780c15b23
#: ../../topics/email.txt:585
msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and :"
"setting:`EMAIL_PORT` accordingly, and you are set."
msgstr ""

# a1f37d64140e45a08294c1068dbe3c73
#: ../../topics/email.txt:590
msgid ""
"For a more detailed discussion of testing and processing of emails locally, "
"see the Python documentation for the :mod:`smtpd` module."
msgstr ""

# 6e7b2d905ac849f8b3b4134cf43707c1
#: ../../topics/files.txt:3
msgid "Managing files"
msgstr ""

# 94fa1e0fcdb94d0ebb3b9dcc387f2b7d
#: ../../topics/files.txt:5
msgid "This document describes Django's file access APIs."
msgstr ""

# e1aa44e2eec34c258e988ca4ae27eadd
#: ../../topics/files.txt:7
msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""

# 5db4d521678842a89162c9d2e7420632
#: ../../topics/files.txt:11
msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

# 7c6e8af22f4644e695bf5a21b0e20c12
#: ../../topics/files.txt:18
msgid "Using files in models"
msgstr ""

# b59c750f6d2f426f88e11068c416700d
#: ../../topics/files.txt:20
msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""

# ad01ad70c8984fcf8da534e7fa7ff2c3
#: ../../topics/files.txt:24
msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""

# 9840709b34204a8680d699167933b166
#: ../../topics/files.txt:32
msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo::"
msgstr ""

# 1dc42f9fc56a42539eaceb99f453b2a2
#: ../../topics/files.txt:45
msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

# 7efffc346bd04392b3849ef2143259f3
#: ../../topics/files.txt:49
msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

# 17d4ea8a78534cb098da3d16d72e910d
#: ../../topics/files.txt:55
msgid "The ``File`` object"
msgstr ""

# 4bf9cc1da19e426e854e496647a8fb67
#: ../../topics/files.txt:57
msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file. This object is a thin wrapper around Python's "
"`built-in file object`_ with some Django-specific additions."
msgstr ""

# 8353f30fd5fe4ebba0060e5fffdddd6d
#: ../../topics/files.txt:63
msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

# 34e13decfccf460da97151209b1abb29
#: ../../topics/files.txt:66
msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

# 595448a0f75c4845a50dcb8988903749
#: ../../topics/files.txt:75
msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""

# 741c36ef22534f85b8a763aa3bcfd7e0
#: ../../topics/files.txt:78
msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""

# c282508be45d43438e2fe28c94154847
#: ../../topics/files.txt:93
msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects:: If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error:"
msgstr ""

# 29b2706aa09b417c9bd8f2aad0f497e2
#: ../../topics/files.txt:98
msgid "IOError: [Errno 24] Too many open files"
msgstr ""

# bd088bc930da4466a996c13923a86437
#: ../../topics/files.txt:102
msgid "File storage"
msgstr ""

# 860e1e5729434e2380fd546adf0e3158
#: ../../topics/files.txt:104
msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""

# 89589e58b0f2410d97f9736ed602a6ae
#: ../../topics/files.txt:108
msgid ""
"Django's default file storage is given by the :setting:"
"`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage "
"system, this is the one that will be used."
msgstr ""

# a4c42b6fa67241f3b071d489ab72de6e
#: ../../topics/files.txt:112
msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

# 9a33dddce8514070aea2f00d7dc5100f
#: ../../topics/files.txt:117
msgid "Storage objects"
msgstr ""

# e3e6dcaf5f20491dbe603d7ec5c4f87b
#: ../../topics/files.txt:119
msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

# 2e105f7e38114a5b9680fd0ddb9f6add
#: ../../topics/files.txt:140
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

# 3059203e41344443b62e598ce23a9266
#: ../../topics/files.txt:145
msgid "The built-in filesystem storage class"
msgstr ""

# d8577929f84e4a4685aa2c4500b22ab5
#: ../../topics/files.txt:147
msgid ""
"Django ships with a built-in ``FileSystemStorage`` class (defined in "
"``django.core.files.storage``) which implements basic local filesystem file "
"storage. Its initializer takes two arguments:"
msgstr ""

# 26a3a9e9dff34872b3fc38ed262c2155
#: ../../topics/files.txt:152
msgid "Argument"
msgstr ""

# bb30512ade7f4d5e98e64fedd366035a
#: ../../topics/files.txt:152
msgid "Description"
msgstr ""

# 1cb26e0db52b47998603f321ba5850b2
#: ../../topics/files.txt:154
msgid "``location``"
msgstr ""

# 08008227339b494d94c9b0affa94f3ce
#: ../../topics/files.txt:154
msgid ""
"Optional. Absolute path to the directory that will hold the files. If "
"omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

# 1eb41776d98c4edca447e2677acc4ca1
#: ../../topics/files.txt:157
msgid "``base_url``"
msgstr ""

# 3529a1ccb5004692a465808a0bf22952
#: ../../topics/files.txt:157
msgid ""
"Optional. URL that serves the files stored at this location. If omitted, it "
"will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

# ad4dbf54e716436da142cf3905103c85
#: ../../topics/files.txt:162
msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

# 22752f60106b4164ad2863d0df20e4f1
#: ../../topics/files.txt:174
msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""

# 52693c944c22452ea2b5d28b5857a671
#: ../../topics/forms/formsets.txt:4
msgid "Formsets"
msgstr ""

# a6313173a7064117a612ac64a01cfb93
#: ../../topics/forms/formsets.txt:6
msgid ""
"A formset is a layer of abstraction to working with multiple forms on the "
"same page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr ""

# 007bfb177d7f4e6c922aae1ff0f4c0b9
#: ../../topics/forms/formsets.txt:15
msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

# a84ed848925f465e8e0541e9eb235120
#: ../../topics/forms/formsets.txt:21
msgid ""
"You now have created a formset named ``ArticleFormSet``. The formset gives "
"you the ability to iterate over the forms in the formset and display them as "
"you would with a regular form::"
msgstr ""

# 0c2ffee4bad04ec2b361c2755c10c44f
#: ../../topics/forms/formsets.txt:31
msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, "
"``formset_factory`` defines one extra form; the following example will "
"display two blank forms::"
msgstr ""

# eaf1e3024efb48e5be41ed4638857ff9
#: ../../topics/forms/formsets.txt:38
msgid ""
"Iterating over the ``formset`` will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the :meth:`__iter__()` method."
msgstr ""

# 108e3875525b4615885443680a167d96
#: ../../topics/forms/formsets.txt:42
msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to "
"have matching behavior."
msgstr ""

# 5326988a5e25435caa8cb9c5937d2b52
#: ../../topics/forms/formsets.txt:49
msgid "Using initial data with a formset"
msgstr ""

# 65ed724f5fd24240bed59c71e4ceef2c
#: ../../topics/forms/formsets.txt:51
msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Lets take a look at an "
"example::"
msgstr ""

# cc86f72040d84b7db166ad45dcfc4399
#: ../../topics/forms/formsets.txt:72
msgid ""
"There are now a total of three forms showing above. One for the initial data "
"that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""

# 2758321f4e68429d8387ff7fa37196da
#: ../../topics/forms/formsets.txt:78
msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

# 3e932236d78f4a3185549e7c8757dbc0
#: ../../topics/forms/formsets.txt:83
msgid "Limiting the maximum number of forms"
msgstr ""

# c34422e29e2e49da8fee7654495338df
#: ../../topics/forms/formsets.txt:85
msgid ""
"The ``max_num`` parameter to ``formset_factory`` gives you the ability to "
"limit the maximum number of empty forms the formset will display::"
msgstr ""

# 44e73808e8a24e98a2de93d413b8ea47
#: ../../topics/forms/formsets.txt:95
msgid ""
"If the value of ``max_num`` is greater than the number of existing objects, "
"up to ``extra`` additional blank forms will be added to the formset, so long "
"as the total number of forms does not exceed ``max_num``."
msgstr ""

# 4467caeab79a4a4caee6ed1029ff7247
# 649f9938ee004c828f011e5ed4107f28
#: ../../topics/forms/formsets.txt:99 ../../topics/forms/modelforms.txt:706
msgid ""
"A ``max_num`` value of ``None`` (the default) puts no limit on the number of "
"forms displayed."
msgstr ""

# 200a4bddd15a4776b6f75a61658e4a8a
#: ../../topics/forms/formsets.txt:103
msgid "Formset validation"
msgstr ""

# bf70f0684d5d44d0a71f7e839e01a466
#: ../../topics/forms/formsets.txt:105
msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr ""

# 78b76f3fed344b2ea2818b685b28b607
#: ../../topics/forms/formsets.txt:119
msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr ""

# 3abca38c8b94475a9e6d5f3d97684afe
#: ../../topics/forms/formsets.txt:138
msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""

# 3e61ac641960460c9dc28ec8d27b766e
#: ../../topics/forms/formsets.txt:144
msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr ""

# 0150021e4fde4868881840e9f4e5a12c
#: ../../topics/forms/formsets.txt:161
msgid "Understanding the ManagementForm"
msgstr ""

# 46cba12f7091490ebe0017a657425f3d
#: ../../topics/forms/formsets.txt:163
msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the "
"formset's data above. This data is required for the ``ManagementForm``. This "
"form is used by the formset to manage the collection of forms contained in "
"the formset. If you don't provide this management data, an exception will be "
"raised::"
msgstr ""

# 3d23837d20554f248bcc1385d145231a
#: ../../topics/forms/formsets.txt:179
msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well."
msgstr ""

# 3db05708202946b7a1f1f9ff176f6f1d
#: ../../topics/forms/formsets.txt:183
msgid ""
"The management form is available as an attribute of the formset itself. When "
"rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""

# 740b398b8ab54740907bfc6f4c0a4493
#: ../../topics/forms/formsets.txt:189
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

# f97b69f419d743a3b43a9948e8255013
#: ../../topics/forms/formsets.txt:191
msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

# 1958ff2f69544bb49a107f928b3e28cd
#: ../../topics/forms/formsets.txt:194
msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""

# 630c04cdcd7b4cb2a5312d5e9d61c428
#: ../../topics/forms/formsets.txt:201
msgid "``empty_form``"
msgstr ""

# 31298461522a4909bccf8a46a0f81016
#: ../../topics/forms/formsets.txt:203
msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""

# 37141dbd09aa4b1597cc19fb4de77695
#: ../../topics/forms/formsets.txt:208
msgid "Custom formset validation"
msgstr ""

# 2098a6e558004a8a815f676a7303e88c
#: ../../topics/forms/formsets.txt:210
msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr ""

# 55634506c0a3424d99ab36a9016c778e
#: ../../topics/forms/formsets.txt:247
msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""

# 3a8d14cf0ad1438e93908102e7010ecc
#: ../../topics/forms/formsets.txt:252
msgid "Dealing with ordering and deletion of forms"
msgstr ""

# 604289e1c185402ba19b157abfcb8569
#: ../../topics/forms/formsets.txt:254
msgid ""
"Common use cases with a formset is dealing with ordering and deletion of the "
"form instances. This has been dealt with for you. The ``formset_factory`` "
"provides two optional parameters ``can_order`` and ``can_delete`` that will "
"do the extra work of adding the extra fields and providing simpler ways of "
"getting to that data."
msgstr ""

# 07f311b1139f44d9ad8e4a9a56486d29
#: ../../topics/forms/formsets.txt:261
msgid "``can_order``"
msgstr ""

# eed14a55304a4c4da0fd07803857c6a0
# e3aa37b8afab4b9f9d1693f22ffe496b
# eedae1b5446643b48fc238f279ab3e3a
# 22b120451ace417588a5d6ca05cce1de
# a2f6c9ffdaae42ac9fe40711882fcbbf
#: ../../topics/forms/formsets.txt:263 ../../topics/forms/formsets.txt:319
#: ../../topics/http/sessions.txt:588 ../../topics/http/sessions.txt:597
#: ../../topics/http/sessions.txt:605
msgid "Default: ``False``"
msgstr ""

# 7004d9a7397741299819585f037f910d
#: ../../topics/forms/formsets.txt:265
msgid "Lets you create a formset with the ability to order::"
msgstr ""

# 2dfd42815c8c4cb19fd6087786c35eec
#: ../../topics/forms/formsets.txt:284
msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the "
"initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr ""

# 9e090361c7304261afa0cdc462c892c1
#: ../../topics/forms/formsets.txt:317
msgid "``can_delete``"
msgstr ""

# b7dfa0b03388486d9960a1bf0c26ef7f
#: ../../topics/forms/formsets.txt:321
msgid "Lets you create a formset with the ability to delete::"
msgstr ""

# 959b87b48b8e4d82ac666368d581344a
#: ../../topics/forms/formsets.txt:341
msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE`` "
"and is a ``forms.BooleanField``. When data comes through marking any of the "
"delete fields you can access them with ``deleted_forms``::"
msgstr ""

# 55bb45a9445348ffa76ee2c717ee5b11
#: ../../topics/forms/formsets.txt:368
msgid "Adding additional fields to a formset"
msgstr ""

# c73116e505da42969146fedc4e4ca81b
#: ../../topics/forms/formsets.txt:370
msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can simply override this method to add your own fields or even redefine the "
"default fields/attributes of the order and deletion fields::"
msgstr ""

# 18a55a85e9b8419ab6f1f39cb9a7b5f5
#: ../../topics/forms/formsets.txt:389
msgid "Using a formset in views and templates"
msgstr ""

# 07954bca505a4225bd05fd0f5203159f
#: ../../topics/forms/formsets.txt:391
msgid ""
"Using a formset inside a view is as easy as using a regular ``Form`` class. "
"The only thing you will want to be aware of is making sure to use the "
"management form inside the template. Let's look at a sample view:"
msgstr ""

# 82f73bf6f61c4b42b20ed4f12423a39b
#: ../../topics/forms/formsets.txt:408
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

# 8ab78b8134d84c6c8031e86e581e597b
#: ../../topics/forms/formsets.txt:421
msgid ""
"However the above can be slightly shortcutted and let the formset itself "
"deal with the management form:"
msgstr ""

# c4254ebaff414b3a806d584a68e84df3
#: ../../topics/forms/formsets.txt:432
msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

# 29c011c9f7c64ef28140f6037564c08a
#: ../../topics/forms/formsets.txt:437
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

# fd1cfa18ec5c4184b8d97f993c9b4340
#: ../../topics/forms/formsets.txt:439
msgid ""
"If you manually render fields in the template, you can render ``can_delete`` "
"parameter with ``{{ form.DELETE }}``:"
msgstr ""

# 6f0c942cb5434b07a7f3f27b6343d26d
#: ../../topics/forms/formsets.txt:458
msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

# 279fdee615224d8881ec2a4ea3764388
#: ../../topics/forms/formsets.txt:462
msgid "Using more than one formset in a view"
msgstr ""

# ccfe304d1adf4c20802d5782afec3439
#: ../../topics/forms/formsets.txt:464
msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Lets take "
"a look at how this might be accomplished:"
msgstr ""

# edff0311c91a494db29bca4717504d8b
#: ../../topics/forms/formsets.txt:489
msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that "
"it is rendered and processed correctly."
msgstr ""

# 16e85ccf735b454f836e26e72d2ee2c1
#: ../../topics/forms/index.txt:3
msgid "Working with forms"
msgstr ""

# 004a3a3a79714564b8b1c246e9abc1b8
#: ../../topics/forms/index.txt:7
msgid ""
"This document provides an introduction to Django's form handling features. "
"For a more detailed look at specific areas of the forms API, see :doc:`/ref/"
"forms/api`, :doc:`/ref/forms/fields`, and :doc:`/ref/forms/validation`."
msgstr ""

# 500ca77808fb4ae49db9ba82c453c089
#: ../../topics/forms/index.txt:14
msgid "``django.forms`` is Django's form-handling library."
msgstr ""

# a54e253797c7441696e34cea88f9424f
#: ../../topics/forms/index.txt:16
msgid ""
"While it is possible to process form submissions just using Django's :class:"
"`~django.http.HttpRequest` class, using the form library takes care of a "
"number of common form-related tasks. Using it, you can:"
msgstr ""

# 0a869ad4d5e04c699fc0da13598a62f9
#: ../../topics/forms/index.txt:20
msgid "Display an HTML form with automatically generated form widgets."
msgstr ""

# 3af526c7ed144e2cbeac165f433f406e
#: ../../topics/forms/index.txt:21
msgid "Check submitted data against a set of validation rules."
msgstr ""

# 95afc97ee8524885a3ff66c4908314f7
#: ../../topics/forms/index.txt:22
msgid "Redisplay a form in the case of validation errors."
msgstr ""

# 97e59b987d164272bec00fea8629f5fb
#: ../../topics/forms/index.txt:23
msgid "Convert submitted form data to the relevant Python data types."
msgstr ""

# b82a00cd039a45ef9d9454e7e9fb8fea
#: ../../topics/forms/index.txt:28
msgid "The library deals with these concepts:"
msgstr ""

# 710c0b9c956549eb8ca002ad39844d87
#: ../../topics/forms/index.txt:33
msgid ""
"A class that corresponds to an HTML form widget, e.g. ``<input type=\"text"
"\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
msgstr ""

# 2249f635a70947b687e605d684572bd4
#: ../../topics/forms/index.txt:38
msgid ""
"A class that is responsible for doing validation, e.g. an ``EmailField`` "
"that makes sure its data is a valid email address."
msgstr ""

# bf94515dca544f8aad61163ad9b357d9
#: ../../topics/forms/index.txt:42
msgid ""
"A collection of fields that knows how to validate itself and display itself "
"as HTML."
msgstr ""

# 189058010efa431fab2f516d8b38858a
#: ../../topics/forms/index.txt:46
msgid "The CSS and JavaScript resources that are required to render a form."
msgstr ""

# 6ae28bc6f2794525a58bfb9f83b76b74
#: ../../topics/forms/index.txt:48
msgid ""
"The library is decoupled from the other Django components, such as the "
"database layer, views and templates. It relies only on Django settings, a "
"couple of ``django.utils`` helper functions and Django's "
"internationalization hooks (but you're not required to be using "
"internationalization features to use this library)."
msgstr ""

# 7ac53c31214a453d96ef1748590e5687
#: ../../topics/forms/index.txt:55
msgid "Form objects"
msgstr ""

# bbd63be84c7e424bb28112a7ac8af3fd
#: ../../topics/forms/index.txt:57
msgid ""
"A Form object encapsulates a sequence of form fields and a collection of "
"validation rules that must be fulfilled in order for the form to be "
"accepted. Form classes are created as subclasses of ``django.forms.Form`` "
"and make use of a declarative style that you'll be familiar with if you've "
"used Django's database models."
msgstr ""

# 898e1cef10dd41a3bb16a927584f9592
#: ../../topics/forms/index.txt:63
msgid ""
"For example, consider a form used to implement \"contact me\" functionality "
"on a personal Web site:"
msgstr ""

# 53f15cf71aa44ab2a6518e1fcbbbd2a4
#: ../../topics/forms/index.txt:76
msgid ""
"A form is composed of ``Field`` objects. In this case, our form has four "
"fields: ``subject``, ``message``, ``sender`` and ``cc_myself``. "
"``CharField``, ``EmailField`` and ``BooleanField`` are just three of the "
"available field types; a full list can be found in :doc:`/ref/forms/fields`."
msgstr ""

# e0722833a9aa493fab39ce0c4b8f0f00
#: ../../topics/forms/index.txt:81
msgid ""
"If your form is going to be used to directly add or edit a Django model, you "
"can use a :doc:`ModelForm </topics/forms/modelforms>` to avoid duplicating "
"your model description."
msgstr ""

# 749cee941bf64f4c8e87d45c7b04b442
#: ../../topics/forms/index.txt:88
msgid "Using a form in a view"
msgstr ""

# e328b7a689fb41d18313b8956f1873e0
#: ../../topics/forms/index.txt:90
msgid "The standard pattern for processing a form in a view looks like this:"
msgstr ""

# 541938e5e8794d4a8a4933f50f5e43f2
#: ../../topics/forms/index.txt:112
msgid "There are three possible code paths here:"
msgstr ""

# 2b8a32b6e1aa428380dc6aaf30886e2d
#: ../../topics/forms/index.txt:115
msgid "Form submitted?"
msgstr ""

# 341f496ece344136a146657761633792
#: ../../topics/forms/index.txt:115
msgid "Data?"
msgstr ""

# 56836fa026764abb81f3917c089ed39a
#: ../../topics/forms/index.txt:115
msgid "What occurs"
msgstr ""

# 6636af06e68441608a4e57f7987768fc
#: ../../topics/forms/index.txt:117
msgid "Unsubmitted"
msgstr ""

# 178e95c63d544831ac1cc1901229a17f
#: ../../topics/forms/index.txt:117
msgid "None yet"
msgstr ""

# d82c1ee9962647d8b1d995188519c9da
#: ../../topics/forms/index.txt:117
msgid "Template gets passed unbound instance of ContactForm."
msgstr ""

# 03cf47d64566417e8bc555b0d9d9f103
# bb0c1cdcc089432db6d00be99a681724
#: ../../topics/forms/index.txt:120 ../../topics/forms/index.txt:123
msgid "Submitted"
msgstr ""

# c86542676c5d40209153e08e2af0f71a
#: ../../topics/forms/index.txt:120
msgid "Invalid data"
msgstr ""

# dec25763f59e4f93a4ea6ceb02ca8416
#: ../../topics/forms/index.txt:120
msgid "Template gets passed bound instance of ContactForm."
msgstr ""

# 88b1349f39824e17b6f1b59cbed93c68
#: ../../topics/forms/index.txt:123
msgid "Valid data"
msgstr ""

# 050bd1955d804db2acd144218acfb1d8
#: ../../topics/forms/index.txt:123
msgid "Valid data is processed. Redirect to a \"thanks\" page."
msgstr ""

# 7d8f795041644d7596c9a7e1ad372088
#: ../../topics/forms/index.txt:127
msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr ""

# 06aa709ca81c4c4baca24cc0a131eabb
#: ../../topics/forms/index.txt:129
msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""

# 076522243ad14639a13241f3da1f674b
#: ../../topics/forms/index.txt:132
msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""

# 02d0af3e312e4788993c550e59c9c076
#: ../../topics/forms/index.txt:137
msgid "Handling file uploads with a form"
msgstr ""

# 606f4c91e6a44af89106d486d1c07b88
#: ../../topics/forms/index.txt:139
msgid ""
"To see how to handle file uploads with your form, see :ref:`binding-uploaded-"
"files`."
msgstr ""

# 5d9fff65796f4c1b853b424d7067b5f4
#: ../../topics/forms/index.txt:143
msgid "Processing the data from a form"
msgstr ""

# 9770f28ba22b4a9cbafc2b91487dbd0d
#: ../../topics/forms/index.txt:145
msgid ""
"Once ``is_valid()`` returns ``True``, the successfully validated form data "
"will be in the ``form.cleaned_data`` dictionary. This data will have been "
"converted nicely into Python types for you."
msgstr ""

# de1e533164ca4df2b3b4b809aaefe725
#: ../../topics/forms/index.txt:151
msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""

# ea1d6f24a1b74751af6d0d704106229e
#: ../../topics/forms/index.txt:154
msgid ""
"In the above example, ``cc_myself`` will be a boolean value. Likewise, "
"fields such as ``IntegerField`` and ``FloatField`` convert values to a "
"Python int and float respectively."
msgstr ""

# f71c116af2524feabadce55886e47c4c
#: ../../topics/forms/index.txt:158
msgid ""
"Read-only fields are not available in ``form.cleaned_data`` (and setting a "
"value in a custom ``clean()`` method won't have any effect). These fields "
"are displayed as text rather than as input elements, and thus are not posted "
"back to the server."
msgstr ""

# f88b981486ce4e2eb3f66156167345e8
#: ../../topics/forms/index.txt:163
msgid ""
"Extending the earlier example, here's how the form data could be processed:"
msgstr ""

# ddf9d2e7e87242b6a75293760c04284c
#: ../../topics/forms/index.txt:183
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

# 3820bcd84c904c1887e4815bd002dba1
#: ../../topics/forms/index.txt:186
msgid "Displaying a form using a template"
msgstr ""

# 23a8662c2bba419ba0c028a78005e5a6
#: ../../topics/forms/index.txt:188
msgid ""
"Forms are designed to work with the Django template language. In the above "
"example, we passed our ``ContactForm`` instance to the template using the "
"context variable ``form``. Here's a simple example template::"
msgstr ""

# 8be1a50f1b0d491ba549833b6fb9222f
#: ../../topics/forms/index.txt:197
msgid ""
"The form only outputs its own fields; it is up to you to provide the "
"surrounding ``<form>`` tags and the submit button."
msgstr ""

# 68651b2ef95542f491f299e26cf78a11
#: ../../topics/forms/index.txt:202
msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/contrib/csrf>`. When submitting a form via POST with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""

# 2061fd5eb7da417ba4fed591248e5e29
#: ../../topics/forms/index.txt:209
msgid ""
"``form.as_p`` will output the form with each form field and accompanying "
"label wrapped in a paragraph. Here's the output for our example template::"
msgstr ""

# 0019a8b96b7943aa9f8ff643c786c7d0
#: ../../topics/forms/index.txt:224
msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important for "
"ensuring forms are accessible to assistive technology such as screen reader "
"software. You can also :ref:`customize the way in which labels and ids are "
"generated <ref-forms-api-configuring-label>`."
msgstr ""

# 99979dcfe3eb454a9f47b1bce64c2d2f
#: ../../topics/forms/index.txt:230
msgid ""
"You can also use ``form.as_table`` to output table rows (you'll need to "
"provide your own ``<table>`` tags) and ``form.as_ul`` to output list items."
msgstr ""

# 9bab1023da0d4c34a9adc053ca57141a
#: ../../topics/forms/index.txt:234
msgid "Customizing the form template"
msgstr ""

# 6a9c7d53179540a1992d29d4c82aa129
#: ../../topics/forms/index.txt:236
msgid ""
"If the default generated HTML is not to your taste, you can completely "
"customize the way a form is presented using the Django template language. "
"Extending the above example::"
msgstr ""

# d5deb8a64eeb451cade6b6775dc52580
#: ../../topics/forms/index.txt:265
msgid ""
"Each named form-field can be output to the template using ``{{ form."
"name_of_field }}``, which will produce the HTML needed to display the form "
"widget. Using ``{{ form.name_of_field.errors }}`` displays a list of form "
"errors, rendered as an unordered list. This might look like::"
msgstr ""

# f77b14fa173744c980921aebedcf6671
#: ../../topics/forms/index.txt:274
msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them::"
msgstr ""

# 57bab99680284af98ef3e136ec4a04d3
#: ../../topics/forms/index.txt:287
msgid "Looping over the form's fields"
msgstr ""

# 64e3377404464362a88735b61fead88a
#: ../../topics/forms/index.txt:289
msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop::"
msgstr ""

# 6493353c915c4bd5bd353a4e6f15a4f1
#: ../../topics/forms/index.txt:303
msgid ""
"Within this loop, ``{{ field }}`` is an instance of :class:`BoundField`. "
"``BoundField`` also has the following attributes, which can be useful in "
"your templates:"
msgstr ""

# 7dc88199a7d84dfe85a5a95764aa6528
#: ../../topics/forms/index.txt:308
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

# 7dbc3f0ec9fc4996aa6994f82f1d6b36
#: ../../topics/forms/index.txt:311
msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag, e.g. "
"``<label for=\"id_email\">Email address</label>``"
msgstr ""

# 7c35163eb4034a079127139cabfcaa9d
#: ../../topics/forms/index.txt:315
msgid "The value of the field. e.g ``someone@example.com``"
msgstr ""

# 0e15ef1e0c6441629706691ef80d11dd
#: ../../topics/forms/index.txt:318
msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""

# b67a59b899144443ae01b189f3860670
#: ../../topics/forms/index.txt:322
msgid "Any help text that has been associated with the field."
msgstr ""

# 2bc10b232bbc401dac9455d91338a621
#: ../../topics/forms/index.txt:325
msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr ""

# 1b9cd22f579f477cbe49911ee9f2172f
#: ../../topics/forms/index.txt:332
msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as::"
msgstr ""

# 445471121540443ab4cee25621516236
#: ../../topics/forms/index.txt:341
msgid "Looping over hidden and visible fields"
msgstr ""

# bb1ee040e5324f178576b1af20b386cb
#: ../../topics/forms/index.txt:343
msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input type=\"hidden"
"\">`` fields differently than non-hidden fields. For example, because hidden "
"fields don't display anything, putting error messages \"next to\" the field "
"could cause confusion for your users -- so errors for those fields should be "
"handled differently."
msgstr ""

# 97b3baf9fdc8429cbfd02e3ec4c1bb2c
#: ../../topics/forms/index.txt:350
msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and ``visible_fields()"
"``. Here's a modification of an earlier example that uses these two methods::"
msgstr ""

# 78c505f52d834b57b545df18ad10cb17
#: ../../topics/forms/index.txt:370
msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""

# 1d90c7bee2da41b1b833c78dd801b847
#: ../../topics/forms/index.txt:376
msgid "Reusable form templates"
msgstr ""

# 1f7ca2eea12a4af1a22378676bea21c5
#: ../../topics/forms/index.txt:378
msgid ""
"If your site uses the same rendering logic for forms in multiple places, you "
"can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates::"
msgstr ""

# 914b3c91df41432f8649c50ec3880c23
#: ../../topics/forms/index.txt:396
msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include` "
"tag::"
msgstr ""

# 98174df61fef4907a4a84a5f7e112201
#: ../../topics/forms/index.txt:405
msgid ""
"If you find yourself doing this often, you might consider creating a custom :"
"ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 8515c07692e74aad923578a98d4cc03a
#: ../../topics/forms/index.txt:409
msgid "Further topics"
msgstr ""

# 39b12c421b1c45d0be7bf4f9fd11e1c4
#: ../../topics/forms/index.txt:411
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

# e28a0eb4cb5e44f5998ef567626b5129
#: ../../topics/forms/index.txt:423
msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr ""

# 065fb9f558114a1fb7efb43254241975
#: ../../topics/forms/media.txt:2
msgid "Form Media"
msgstr ""

# f382e595d79740778c05111428fdc0a1
#: ../../topics/forms/media.txt:4
msgid ""
"Rendering an attractive and easy-to-use Web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"\"Web2.0\" widgets, you may also need to include some JavaScript on each "
"page. The exact combination of CSS and JavaScript that is required for any "
"given page will depend upon the widgets that are in use on that page."
msgstr ""

# 2f1da6481f1743abbd7adc7fc035670c
#: ../../topics/forms/media.txt:10
msgid ""
"This is where Django media definitions come in. Django allows you to "
"associate different media files with the forms and widgets that require that "
"media. For example, if you want to use a calendar to render DateFields, you "
"can define a custom Calendar widget. This widget can then be associated with "
"the CSS and JavaScript that is required to render the calendar. When the "
"Calendar widget is used on a form, Django is able to identify the CSS and "
"JavaScript files that are required, and provide the list of file names in a "
"form suitable for easy inclusion on your Web page."
msgstr ""

# f0186a070d29483a979b7d9d7968728b
#: ../../topics/forms/media.txt:21
msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define media "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those media files "
"that are required to render the widgets on any given page."
msgstr ""

# cde9e18d16274d7e874c55dece305800
#: ../../topics/forms/media.txt:28
msgid ""
"If you like the widgets that the Django Admin application uses, feel free to "
"use them in your own application! They're all stored in ``django.contrib."
"admin.widgets``."
msgstr ""

# 7efad236faea4b9e876ccd019962bc15
#: ../../topics/forms/media.txt:34
msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your "
"requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

# b659d942ae714e3291af04df4548c134
#: ../../topics/forms/media.txt:44
msgid "Media as a static definition"
msgstr ""

# 84fb9c50310d42c2b6594312f6e580d1
#: ../../topics/forms/media.txt:46
msgid ""
"The easiest way to define media is as a static definition. Using this "
"method, the media declaration is an inner class. The properties of the inner "
"class define the media requirements."
msgstr ""

# 66615838974045febf897f7a1b5afec3
#: ../../topics/forms/media.txt:50
msgid "Here's a simple example::"
msgstr ""

# bf844c284d6c4111b83449eb84dbc074
#: ../../topics/forms/media.txt:59
msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""

# d153dc5652b041babdc08b1ddbea6b41
#: ../../topics/forms/media.txt:64
msgid ""
"This static media definition is converted at runtime into a widget property "
"named ``media``. The media for a CalendarWidget instance can be retrieved "
"through this property::"
msgstr ""

# 8795fe6143374b6685f2e4c12d8608bf
#: ../../topics/forms/media.txt:74
msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr ""

# abacea21b3b2461aa165004634756e2d
#: ../../topics/forms/media.txt:77
msgid "``css``"
msgstr ""

# b1752ca25e5c44198297cd67bcb90e04
#: ../../topics/forms/media.txt:79
msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr ""

# 7d0f6ed8ab324bb6b224cc484297d300
#: ../../topics/forms/media.txt:82
msgid ""
"The values in the dictionary should be a tuple/list of file names. See :ref:"
"`the section on media paths <form-media-paths>` for details of how to "
"specify paths to media files."
msgstr ""

# b3fb4b69c8fd4f7dafa0e3edf264dcf1
#: ../../topics/forms/media.txt:86
msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""

# b2985b6ef63842a3b0556106c6297438
#: ../../topics/forms/media.txt:99
msgid ""
"If a group of CSS files are appropriate for multiple output media types, the "
"dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""

# 55cee23a21aa437ea133ada76403ea31
#: ../../topics/forms/media.txt:111
msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr ""

# 1dcbaa029c0744378f61f48c68c95a06
#: ../../topics/forms/media.txt:118
msgid "``js``"
msgstr ""

# 7072ee019f0f42cda40c057899d60cd8
#: ../../topics/forms/media.txt:120
msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"media paths <form-media-paths>` for details of how to specify paths to media "
"files."
msgstr ""

# fe1f6ccbad804a90952c84c3d3652d07
#: ../../topics/forms/media.txt:125
msgid "``extend``"
msgstr ""

# 91ac8a08c4f5492c80f8fd7b9d6f4fb9
#: ../../topics/forms/media.txt:127
msgid "A boolean defining inheritance behavior for media declarations."
msgstr ""

# 07838d7cc90c42abb14057450723a02e
#: ../../topics/forms/media.txt:129
msgid ""
"By default, any object using a static media definition will inherit all the "
"media associated with the parent widget. This occurs regardless of how the "
"parent defines its media requirements. For example, if we were to extend our "
"basic Calendar widget from the example above::"
msgstr ""

# 0dd333f91eb5436b90c8a5f6a02f8e49
#: ../../topics/forms/media.txt:149
msgid ""
"The FancyCalendar widget inherits all the media from it's parent widget. If "
"you don't want media to be inherited in this way, add an ``extend=False`` "
"declaration to the media declaration::"
msgstr ""

# 8f3d379face3428a90445eb11f905cca
#: ../../topics/forms/media.txt:166
msgid ""
"If you require even more control over media inheritance, define your media "
"using a :ref:`dynamic property <dynamic-property>`. Dynamic properties give "
"you complete control over which media files are inherited, and which are not."
msgstr ""

# 4463a7e463dc4f02b52ca1b673adc14d
#: ../../topics/forms/media.txt:173
msgid "Media as a dynamic property"
msgstr ""

# 4bc2305b987e420ca16ea73e6269cc64
#: ../../topics/forms/media.txt:175
msgid ""
"If you need to perform some more sophisticated manipulation of media "
"requirements, you can define the media property directly. This is done by "
"defining a widget property that returns an instance of ``forms.Media``. The "
"constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword arguments "
"in the same format as that used in a static media definition."
msgstr ""

# 41157d19bca0414391d0ca8de7599529
#: ../../topics/forms/media.txt:181
msgid ""
"For example, the static media definition for our Calendar Widget could also "
"be defined in a dynamic fashion::"
msgstr ""

# 22140be9fa2b4530be3dad2f7fbf27f4
#: ../../topics/forms/media.txt:190
msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic media properties."
msgstr ""

# eef6da886568481683e08db628cb8ac2
#: ../../topics/forms/media.txt:196
msgid "Paths in media definitions"
msgstr ""

# a0be86bb39fe4afa9178411ae3c77c96
#: ../../topics/forms/media.txt:198
msgid ""
"Paths used to specify media can be either relative or absolute. If a path "
"starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an "
"absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix."
msgstr ""

# 9dca21bce4ac45a08f923ad533681925
#: ../../topics/forms/media.txt:203
msgid ""
"As part of the introduction of the :doc:`staticfiles app </ref/contrib/"
"staticfiles>` two new settings were added to refer to \"static files"
"\" (images, CSS, Javascript, etc.) that are needed to render a complete web "
"page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

# 998a660b6fc540ed8b4bdf19678ff3d3
#: ../../topics/forms/media.txt:208
msgid ""
"To find the appropriate prefix to use, Django will check if the :setting:"
"`STATIC_URL` setting is not ``None`` and automatically fall back to using :"
"setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site "
"was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was "
"``None``::"
msgstr ""

# f3c1ddd416134073b23d41c3c8107b45
#: ../../topics/forms/media.txt:227
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

# 9f181499eefd4a4f8c9a9817fadced56
#: ../../topics/forms/media.txt:237
msgid "Media objects"
msgstr ""

# c23bcc0ac9d34118bb64914757cb2def
#: ../../topics/forms/media.txt:239
msgid ""
"When you interrogate the media attribute of a widget or form, the value that "
"is returned is a ``forms.Media`` object. As we have already seen, the string "
"representation of a Media object is the HTML required to include media in "
"the ``<head>`` block of your HTML page."
msgstr ""

# a0443b8cc1e5430c8b87839467be0605
#: ../../topics/forms/media.txt:244
msgid "However, Media objects have some other interesting properties."
msgstr ""

# 4e1fd16faf9146c8a0e26b7dba91bf18
#: ../../topics/forms/media.txt:247
msgid "Media subsets"
msgstr ""

# ab9517cc7ca64c38a481e1261525025e
#: ../../topics/forms/media.txt:249
msgid ""
"If you only want media of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr ""
"If you only want media of a particular type, you can use the subscript "
"operator to filter out a medium of interest. 예를 들어 ::"

# b503f5760a9e4712a80102cb06a756e6
#: ../../topics/forms/media.txt:261
msgid ""
"When you use the subscript operator, the value that is returned is a new "
"Media object -- but one that only contains the media of interest."
msgstr ""

# b6c8a64b9b7f4e5d8fd663379e94e5c9
#: ../../topics/forms/media.txt:265
msgid "Combining media objects"
msgstr ""

# 06f985a806d343e78df3b4fac6506d37
#: ../../topics/forms/media.txt:267
msgid ""
"Media objects can also be added together. When two media objects are added, "
"the resulting Media object contains the union of the media from both files::"
msgstr ""

# 052a9f37bb4e4e83aa90e04a10227d9a
#: ../../topics/forms/media.txt:290
msgid "Media on Forms"
msgstr ""

# ad576d90dc1745198cca479cc482d7d6
#: ../../topics/forms/media.txt:292
msgid ""
"Widgets aren't the only objects that can have media definitions -- forms can "
"also define media. The rules for media definitions on forms are the same as "
"the rules for widgets: declarations can be static or dynamic; path and "
"inheritance rules for those declarations are exactly the same."
msgstr ""

# 6876a53035ff4e0786dad81b368b2be9
#: ../../topics/forms/media.txt:297
msgid ""
"Regardless of whether you define a media declaration, *all* Form objects "
"have a media property. The default value for this property is the result of "
"adding the media definitions for all widgets that are part of the form::"
msgstr ""

# 94a02a48cffe4a6383e806fb814b9788
#: ../../topics/forms/media.txt:312
msgid ""
"If you want to associate additional media with a form -- for example, CSS "
"for form layout -- simply add a media declaration to the form::"
msgstr ""

# 5e75b34895ac4b9cbc9ee9561cea0236
#: ../../topics/forms/modelforms.txt:3
msgid "Creating forms from models"
msgstr ""

# e3e0fce00ba146baa0c1507dc35c7ad0
#: ../../topics/forms/modelforms.txt:11
msgid "``ModelForm``"
msgstr ""

# a9c161bfdfdb4518a6d2d1c3e250a40c
#: ../../topics/forms/modelforms.txt:14
msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""

# 5bc9db7ffa1d44c4910e51dd2e212706
#: ../../topics/forms/modelforms.txt:20
msgid ""
"For this reason, Django provides a helper class that let you create a "
"``Form`` class from a Django model."
msgstr ""

# 8f02a379ad7a491cad4903e62e98d93b
#: ../../topics/forms/modelforms.txt:42
msgid ""
"The generated ``Form`` class will have a form field for every model field. "
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""

# 2ec7e9537278446ea6010fcacdd7dcd3
#: ../../topics/forms/modelforms.txt:49
msgid "Model field"
msgstr ""

# 57cb484ccfd747209a01194b3cd1b9df
#: ../../topics/forms/modelforms.txt:49
msgid "Form field"
msgstr ""

# cf8ebacc110649af84021369cc908465
#: ../../topics/forms/modelforms.txt:51
msgid "``AutoField``"
msgstr ""

# d4933bebf6fb42f8a585f5d727091524
#: ../../topics/forms/modelforms.txt:51
msgid "Not represented in the form"
msgstr ""

# 6e79c2c589414651969ad5294ff3b959
#: ../../topics/forms/modelforms.txt:53
msgid "``BigIntegerField``"
msgstr ""

# bbcc50a6d2164cf8a0ab8fd06fd48079
#: ../../topics/forms/modelforms.txt:53
msgid ""
"``IntegerField`` with ``min_value`` set to -9223372036854775808 and "
"``max_value`` set to 9223372036854775807."
msgstr ""

# 3834d3d396e64d8d8625a10f59b05702
# 587ee39c4a804c819f36f0b0c6d61805
#: ../../topics/forms/modelforms.txt:57
msgid "``BooleanField``"
msgstr ""

# ed2e7aacc67c490f9e15c75a98ed95ed
# c1f78aa084e44c02b697f0c2d8f0b29a
# 1821d128fd8f47788f6fab9115264763
# 4530d29473284d0784a6b319ba3545ce
#: ../../topics/forms/modelforms.txt:59 ../../topics/forms/modelforms.txt:62
#: ../../topics/forms/modelforms.txt:74 ../../topics/forms/modelforms.txt:91
msgid "``CharField``"
msgstr ""

# f2654df0978b45dd8975b30193230932
#: ../../topics/forms/modelforms.txt:59
msgid ""
"``CharField`` with ``max_length`` set to the model field's ``max_length``"
msgstr ""

# dc30efc34b1245f492dfaedc834c7449
#: ../../topics/forms/modelforms.txt:62
msgid "``CommaSeparatedIntegerField``"
msgstr ""

# 5ca3ed008023495692a0db1d3d9474b3
# 9ad094d86d744be4adda592a9524cd7d
#: ../../topics/forms/modelforms.txt:64
msgid "``DateField``"
msgstr ""

# 7bed127fad0b4fa59968cbae0a20835b
# 41e8386f914b49258415398049d8d646
#: ../../topics/forms/modelforms.txt:66
msgid "``DateTimeField``"
msgstr ""

# 8dd3fb84cc9a4f9797ec03ff2ecfbc73
# df7e34797d6e4f458f7114a1c453ad69
#: ../../topics/forms/modelforms.txt:68
msgid "``DecimalField``"
msgstr ""

# 54a90bb2873d447199cbb207d753cdf3
# 757e094b41664ea28de05b2c8977c1cf
#: ../../topics/forms/modelforms.txt:70
msgid "``EmailField``"
msgstr ""

# c701123c1d5243cdb6b104414346cef9
# 9ac36940928548898094586182ef70b9
#: ../../topics/forms/modelforms.txt:72
msgid "``FileField``"
msgstr ""

# 56f8c2861f234141bc70ecc7178b6949
#: ../../topics/forms/modelforms.txt:74
msgid "``FilePathField``"
msgstr ""

# 265b728899d2458ebfe85d2ba7912811
# fce1e8cd3bc24907b4499e6358105550
#: ../../topics/forms/modelforms.txt:76
msgid "``FloatField``"
msgstr ""

# ddf968edde91410fab3c4d648dd35137
#: ../../topics/forms/modelforms.txt:78
msgid "``ForeignKey``"
msgstr ""

# 7388cc95a21a4daaafa8ed902071e37f
#: ../../topics/forms/modelforms.txt:78
msgid "``ModelChoiceField`` (see below)"
msgstr ""

# 3383f32e2f1c4262af82e03336d94710
# 46560255dc2548a0928525eaf41d6dfc
#: ../../topics/forms/modelforms.txt:80
msgid "``ImageField``"
msgstr ""

# 7e0975986815409fbbc750d6ae455806
# ad16e918341647fd943ae73db22a8650
# c4c62c202242458da9744d80436e654a
# 3da1ee0d716c41258ad8cd1cfd9e05bb
# fb701a5ac4534296a541f0a8747e29db
#: ../../topics/forms/modelforms.txt:82 ../../topics/forms/modelforms.txt:96
#: ../../topics/forms/modelforms.txt:98 ../../topics/forms/modelforms.txt:102
msgid "``IntegerField``"
msgstr ""

# 85304b3da20248a6af7de4d74e6a2992
# c16c11e787a44530ba955b699404dd4a
#: ../../topics/forms/modelforms.txt:84
msgid "``IPAddressField``"
msgstr ""

# 13f753f411904edaa9805189aa62f9b5
# f7cd737653034bf6806adbbbd4f39325
#: ../../topics/forms/modelforms.txt:86
msgid "``GenericIPAddressField``"
msgstr ""

# 2e89bf5db90f4815bc89d213da986a0d
#: ../../topics/forms/modelforms.txt:88
msgid "``ManyToManyField``"
msgstr ""

# a40ce8d8df3342cf9b131a2bf69f0efa
#: ../../topics/forms/modelforms.txt:88
msgid "``ModelMultipleChoiceField`` (see below)"
msgstr ""

# 00056d64b235430d81b7c0e9f496b225
#: ../../topics/forms/modelforms.txt:91
msgid "``NullBooleanField``"
msgstr ""

# c1f66625b2fb450ca57bf1c91b282195
#: ../../topics/forms/modelforms.txt:93
msgid "``PhoneNumberField``"
msgstr ""

# 7f8061dbd3634950b3644b789ebd8a20
#: ../../topics/forms/modelforms.txt:93
msgid "``USPhoneNumberField`` (from ``django.contrib.localflavor.us``)"
msgstr ""

# 2d9abc44ad934fac9823afb8eecb3341
#: ../../topics/forms/modelforms.txt:96
msgid "``PositiveIntegerField``"
msgstr ""

# d848fbf6a8734b6f81a6303b8b2d5c13
#: ../../topics/forms/modelforms.txt:98
msgid "``PositiveSmallIntegerField``"
msgstr ""

# ad492308d2874f16ab7d5114b08b6d42
# 40b1618deb73425b83bd001ecc53b9d3
#: ../../topics/forms/modelforms.txt:100
msgid "``SlugField``"
msgstr ""

# b91c40b4f4054fe2b6b38f2af818a02a
#: ../../topics/forms/modelforms.txt:102
msgid "``SmallIntegerField``"
msgstr ""

# 2934112730844f35a5c6dffd76527229
#: ../../topics/forms/modelforms.txt:104
msgid "``TextField``"
msgstr ""

# 0496b437ac514d7cb8ee70df9ea6ac6b
#: ../../topics/forms/modelforms.txt:104
msgid "``CharField`` with ``widget=forms.Textarea``"
msgstr ""

# 2b948b21d1ae44b4b53c70edb65c1200
# 719b6583009f46d9b1aad117be6795cc
#: ../../topics/forms/modelforms.txt:107
msgid "``TimeField``"
msgstr ""

# a55162f9923a48a39988ce5224b2f4af
# ef1b4fe98bcf435ead743f7410faab70
#: ../../topics/forms/modelforms.txt:109
msgid "``URLField``"
msgstr ""

# 0515db20116b44cbbbebac7e221f8ab7
#: ../../topics/forms/modelforms.txt:113
msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""

# 7525eed4fa784c05a3b160c849f75aa9
#: ../../topics/forms/modelforms.txt:116
msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

# 219ed580dd974383b9fd96dac203c6ef
#: ../../topics/forms/modelforms.txt:119
msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""

# 65f503984f884149a2cf1fac7a1168c8
#: ../../topics/forms/modelforms.txt:123
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

# fba341fa5dd94e728b091d0eca0e2525
#: ../../topics/forms/modelforms.txt:125
msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""

# a7baf9f8568948808b7a89f2a5e3ae49
#: ../../topics/forms/modelforms.txt:128
msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""

# f490f4574b1048aaa3ecebaba0ce7b68
#: ../../topics/forms/modelforms.txt:131
msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""

# fbf5b007b90b45bbbc248765ae809fb8
#: ../../topics/forms/modelforms.txt:134
msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""

# 2db3e657e9f141dcab0730a2967c8f07
#: ../../topics/forms/modelforms.txt:142
msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default field types or widgets`_ below."
msgstr ""

# 9b609fa210074336a11113572e56a5f0
#: ../../topics/forms/modelforms.txt:148
msgid "Consider this set of models::"
msgstr ""

# 7f6c63840be94c79adb5b984d8963e04
#: ../../topics/forms/modelforms.txt:179
msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""

# d255ceade3ba4323b7b511ee7ea2e5d2
#: ../../topics/forms/modelforms.txt:198
msgid "The ``is_valid()`` method and ``errors``"
msgstr ""

# 130ecf217f904c629a348dfed89d90ca
#: ../../topics/forms/modelforms.txt:200
msgid ""
"The first time you call ``is_valid()`` or access the ``errors`` attribute of "
"a ``ModelForm`` triggers :ref:`form validation <form-and-field-validation>` "
"as well as :ref:`model validation <validating-objects>`. This has the side-"
"effect of cleaning the model you pass to the ``ModelForm`` constructor. For "
"instance, calling ``is_valid()`` on your form will convert any date fields "
"on your model to actual date objects. If form validation fails, only some of "
"the updates may be applied. For this reason, you'll probably want to avoid "
"reusing the model instance passed to the form, especially if validation "
"fails."
msgstr ""

# e75e2e3d98c64e87b4329f52f007caf6
#: ../../topics/forms/modelforms.txt:211
msgid "The ``save()`` method"
msgstr ""

# c1c46dc9d8ce4b7fb830775926f1af29
#: ../../topics/forms/modelforms.txt:213
msgid ""
"Every form produced by ``ModelForm`` also has a ``save()`` method. This "
"method creates and saves a database object from the data bound to the form. "
"A subclass of ``ModelForm`` can accept an existing model instance as the "
"keyword argument ``instance``; if this is supplied, ``save()`` will update "
"that instance. If it's not supplied, ``save()`` will create a new instance "
"of the specified model:"
msgstr ""

# 60d59742bf8a4cc299a30f46bef2efb3
#: ../../topics/forms/modelforms.txt:239
msgid ""
"Note that if the form :ref:`hasn't been validated <modelform-is-valid-and-"
"errors>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- i."
"e., if ``form.errors`` evaluates to ``True``."
msgstr ""

# 5c27ad86279147888f1a1920c2e26bd5
#: ../../topics/forms/modelforms.txt:244
msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""

# 6161759755fc448eaa2eabb6dd14a105
#: ../../topics/forms/modelforms.txt:253
msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""

# eb0125d44451445cadf41d13dbd23d71
#: ../../topics/forms/modelforms.txt:260
msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example::"
msgstr ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. 예를 들어 ::"

# 485783a172824f949d2e1700da775625
#: ../../topics/forms/modelforms.txt:280
msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example::"
msgstr ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. 예를 "
"들어 ::"

# f28a953deefc4ac1b310e6ead6b14c09
#: ../../topics/forms/modelforms.txt:292
msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the ``is_valid"
"()`` method is used to check for validity, the ``is_multipart()`` method is "
"used to determine whether a form requires multipart file upload (and hence "
"whether ``request.FILES`` must be passed to the form), etc. See :ref:"
"`binding-uploaded-files` for more information."
msgstr ""

# dfa7c0d878e84d69bf66a73d44d26dc3
#: ../../topics/forms/modelforms.txt:300
msgid "Using a subset of fields on the form"
msgstr ""

# b814b2d695d54d358ab41708bb75314a
#: ../../topics/forms/modelforms.txt:302
msgid ""
"In some cases, you may not want all the model fields to appear on the "
"generated form. There are three ways of telling ``ModelForm`` to use only a "
"subset of the model fields:"
msgstr ""

# a8c68578078042dca9caf58ef4706e9d
#: ../../topics/forms/modelforms.txt:306
msgid ""
"Set ``editable=False`` on the model field. As a result, *any* form created "
"from the model via ``ModelForm`` will not include that field."
msgstr ""

# 799cd98e6668427eb5c19e71876ce10d
#: ../../topics/forms/modelforms.txt:310
msgid ""
"Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` class.  "
"This attribute, if given, should be a list of field names to include in the "
"form. The order in which the fields names are specified in that list is "
"respected when the form renders them."
msgstr ""

# 21664cc28bb04593a990c3eb1a2dcb0f
#: ../../topics/forms/modelforms.txt:315
msgid ""
"Use the ``exclude`` attribute of the ``ModelForm``'s inner ``Meta`` class.  "
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""

# fb794d000f604b2a9e7fc76202cac384
#: ../../topics/forms/modelforms.txt:319
msgid ""
"For example, if you want a form for the ``Author`` model (defined above) "
"that includes only the ``name`` and ``birth_date`` fields, you would specify "
"``fields`` or ``exclude`` like this::"
msgstr ""

# 0486c2b1f8c64d149b7492ea9e5215df
#: ../../topics/forms/modelforms.txt:333
msgid ""
"Since the Author model has only 3 fields, 'name', 'title', and 'birth_date', "
"the forms above will contain exactly the same fields."
msgstr ""

# 136353d55c5a410ea01b80d83c04f940
#: ../../topics/forms/modelforms.txt:338
msgid ""
"If you specify ``fields`` or ``exclude`` when creating a form with "
"``ModelForm``, then the fields that are not in the resulting form will not "
"be set by the form's ``save()`` method. Also, if you manually add the "
"excluded fields back to the form, they will not be initialized from the "
"model instance."
msgstr ""

# ff1a14bd227f409aa3db4a6f09bfb59f
#: ../../topics/forms/modelforms.txt:344
msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""

# afedfee10d3241eba0498f789b7f041b
#: ../../topics/forms/modelforms.txt:355
msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr ""

# 014200f26ff545c2ab737ecb23ccc213
#: ../../topics/forms/modelforms.txt:363
msgid ""
"See the `section on saving forms`_ for more details on using ``save"
"(commit=False)``."
msgstr ""

# 6edd2ae3ead84e4aa312c55862a006a7
#: ../../topics/forms/modelforms.txt:369
msgid "Overriding the default field types or widgets"
msgstr ""

# 2900282cf52f4b82a4ed1fe3dbf92cc3
#: ../../topics/forms/modelforms.txt:371
msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field type and "
"widget for a given model field."
msgstr ""

# 416c3262b530429b93554884801c8f58
#: ../../topics/forms/modelforms.txt:377
msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""

# 1cc7216fafee4cd58407241e55e2b209
#: ../../topics/forms/modelforms.txt:381
msgid ""
"For example, if you want the a ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

# 8ea998ac3b8a44ca88621e187481f0df
#: ../../topics/forms/modelforms.txt:396
msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., ``Textarea"
"(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

# 6c421dbc9c7e4721a6823c5985436d20
#: ../../topics/forms/modelforms.txt:399
msgid ""
"If you want to further customize a field -- including its type, label, etc. "
"-- you can do this by declaratively specifying fields like you would in a "
"regular ``Form``. Declared fields will override the default ones generated "
"by using the ``model`` attribute."
msgstr ""

# cc9a0a2fe063432caab81972d0732109
#: ../../topics/forms/modelforms.txt:404
msgid ""
"For example, if you wanted to use ``MyDateFormField`` for the ``pub_date`` "
"field, you could do the following::"
msgstr ""

# c789cb458d1a464fb57d7c632fc10955
#: ../../topics/forms/modelforms.txt:413
msgid ""
"If you want to override a field's default label, then specify the ``label`` "
"parameter when declaring the form field::"
msgstr ""

# be6d538df6684694ba3adbceffe39f55
#: ../../topics/forms/modelforms.txt:424
msgid ""
"If you explicitly instantiate a form field like this, Django assumes that "
"you want to completely define its behavior; therefore, default attributes "
"(such as ``max_length`` or ``required``) are not drawn from the "
"corresponding model. If you want to maintain the behavior specified in the "
"model, you must set the relevant arguments explicitly when declaring the "
"form field."
msgstr ""

# f462d83b1ffe44d88a057551cdf0b220
#: ../../topics/forms/modelforms.txt:430
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

# 815a995e6e4d4da39e7251704e8ab427
#: ../../topics/forms/modelforms.txt:437
msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""

# db5ca8c009b9468e9bd928d5715e93fc
#: ../../topics/forms/modelforms.txt:448
msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you "
"will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""

# 9a2a45c2c3134c7f9b287a63c1b25b16
#: ../../topics/forms/modelforms.txt:452
msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""

# f836ffc684734ece90c3ea5ab9717da7
#: ../../topics/forms/modelforms.txt:456
msgid "Changing the order of fields"
msgstr ""

# a8545de0572f414b919b8a56e219ee0f
#: ../../topics/forms/modelforms.txt:458
msgid ""
"By default, a ``ModelForm`` will render fields in the same order that they "
"are defined on the model, with ``ManyToManyField`` instances appearing last. "
"If you want to change the order in which fields are rendered, you can use "
"the ``fields`` attribute on the ``Meta`` class."
msgstr ""

# 0af3e71b33b5476e8094db204fecf216
#: ../../topics/forms/modelforms.txt:463
msgid ""
"The ``fields`` attribute defines the subset of model fields that will be "
"rendered, and the order in which they will be rendered. For example given "
"this model::"
msgstr ""

# 565fd57bab7b45f6b49a5ba5d0b0c865
#: ../../topics/forms/modelforms.txt:471
msgid ""
"the ``author`` field would be rendered first. If we wanted the title field "
"to be rendered first, we could specify the following ``ModelForm``::"
msgstr ""

# 115813cce5ca4f6f9ba46657e176bf2d
#: ../../topics/forms/modelforms.txt:482
msgid "Overriding the clean() method"
msgstr ""

# 49a2a19e59604bc3b3a381a3e5056932
#: ../../topics/forms/modelforms.txt:484
msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""

# ce2bf84adef94d959ed80fc47807d36e
#: ../../topics/forms/modelforms.txt:487
msgid ""
"In this regard, model forms have two specific characteristics when compared "
"to forms:"
msgstr ""

# 6736a68183244bf3bd00cc68213b32ca
#: ../../topics/forms/modelforms.txt:490
msgid ""
"By default the ``clean()`` method validates the uniqueness of fields that "
"are marked as ``unique``, ``unique_together`` or ``unique_for_date|month|"
"year`` on the model.  Therefore, if you would like to override the ``clean()"
"`` method and maintain the default validation, you must call the parent "
"class's ``clean()`` method."
msgstr ""

# 5a4464da493c49cf8c785cb5097f0d0e
#: ../../topics/forms/modelforms.txt:496
msgid ""
"Also, a model form instance bound to a model object will contain a ``self."
"instance`` attribute that gives model form methods access to that specific "
"model instance."
msgstr ""

# 84883b2e4ff04c529e6fd0dbd784919e
#: ../../topics/forms/modelforms.txt:501
msgid "Form inheritance"
msgstr ""

# a6f9ce0ddc9342c4afd8da56e8ed6b53
#: ../../topics/forms/modelforms.txt:503
msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""

# 2ef0ae159e2d40478bab3c323a29574d
#: ../../topics/forms/modelforms.txt:512
msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

# fae67a694eff413289c1b078fe757e72
#: ../../topics/forms/modelforms.txt:515
msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

# 0101c043a5dd4705ae72ea4d29a80982
#: ../../topics/forms/modelforms.txt:522
msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""

# 6bdecbdd55324e87ba30bfb60e4b084f
#: ../../topics/forms/modelforms.txt:525
msgid "There are a couple of things to note, however."
msgstr ""

# ab5d51af956c4ff59206c17bfd83b36a
#: ../../topics/forms/modelforms.txt:527
msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""

# c2f80532d9fa4e9ca2fb46306689dbd7
#: ../../topics/forms/modelforms.txt:532
msgid ""
"For technical reasons, a subclass cannot inherit from both a ``ModelForm`` "
"and a ``Form`` simultaneously."
msgstr ""

# 78149ebdd9ac470ba5e694466fa4e43d
#: ../../topics/forms/modelforms.txt:535
msgid ""
"Chances are these notes won't affect you unless you're trying to do "
"something tricky with subclassing."
msgstr ""

# f52ce958853d481082c3523b273a47f0
#: ../../topics/forms/modelforms.txt:539
msgid "Interaction with model validation"
msgstr ""

# 8399e6b0ac2a4561a10dc18597437adc
#: ../../topics/forms/modelforms.txt:541
msgid ""
"As part of its validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work. Also, your "
"model's ``clean()`` method will be called before any uniqueness checks are "
"made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""

# 450fd85852bc4e509d537dbb3cc38ecc
#: ../../topics/forms/modelforms.txt:553
msgid "Model formsets"
msgstr ""

# 80b0c6774f59414b9d155e28c94d9915
#: ../../topics/forms/modelforms.txt:555
msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr ""

# 85dd2eaa2c3c44adb31566f1d57c8af4
#: ../../topics/forms/modelforms.txt:562
msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

# 3a1dc54b11694de98ded91b5a8799317
#: ../../topics/forms/modelforms.txt:578
msgid ""
"``modelformset_factory`` uses ``formset_factory`` to generate formsets. This "
"means that a model formset is just an extension of a basic formset that "
"knows how to interact with a particular model."
msgstr ""

# 582ee2eeca2c45769c3b7221c9ea3ae3
#: ../../topics/forms/modelforms.txt:583
msgid "Changing the queryset"
msgstr ""

# 4afc5bdb827e40a6876d4b1acc98f7b7
#: ../../topics/forms/modelforms.txt:585
msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects.all()"
"``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

# ebf36a50664c488a9dc145d5c16a2a3e
#: ../../topics/forms/modelforms.txt:592
msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""

# 5f5746c390d34749a3ac851c427cccdb
#: ../../topics/forms/modelforms.txt:602
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

# 10e960a372e34c2a87e0f22ad06d393c
#: ../../topics/forms/modelforms.txt:606
msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""

# 8ab2c3a81c3a4a41bef48457486d4aee
#: ../../topics/forms/modelforms.txt:613
msgid "Controlling which fields are used with ``fields`` and ``exclude``"
msgstr ""

# 128eabddfe3b41a1b3d5c02e94a99c77
#: ../../topics/forms/modelforms.txt:615
msgid ""
"By default, a model formset uses all fields in the model that are not marked "
"with ``editable=False``. However, this can be overridden at the formset "
"level::"
msgstr ""

# 3605b0debc0247c1b4640b0db2ddbfc2
#: ../../topics/forms/modelforms.txt:620
msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude::"
msgstr ""

# 3a07b5ee860842c7ace5273b95641eae
#: ../../topics/forms/modelforms.txt:627
msgid "Providing initial values"
msgstr ""

# f634f521737149f8b4c939b4c5a77fda
#: ../../topics/forms/modelforms.txt:631
msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned by "
"``modelformset_factory``. However, with model formsets, the initial values "
"only apply to extra forms, those that aren't bound to an existing object "
"instance."
msgstr ""

# 8b26326175f3482bbb116355cad9a7ee
#: ../../topics/forms/modelforms.txt:640
msgid "Saving objects in the formset"
msgstr ""

# a53c7d8e3b414d959d06af599dd72a77
#: ../../topics/forms/modelforms.txt:642
msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method::"
msgstr ""

# 134c91733d064d858e36411c3f3178fe
#: ../../topics/forms/modelforms.txt:651
msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

# 9caaee9a4a8c402e845271d90c4177a6
#: ../../topics/forms/modelforms.txt:656
msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Using a subset of fields on the form`_."
msgstr ""

# 9b7f34845f2b4af183bc2cce85465a80
#: ../../topics/forms/modelforms.txt:662
msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""

# 50be781633cb4b36b69a78fe53e8e259
#: ../../topics/forms/modelforms.txt:670
msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

# a8aa2346994f471eb9895beec9a38311
#: ../../topics/forms/modelforms.txt:678
msgid "Limiting the number of editable objects"
msgstr ""

# d6609bedfe114cfaa7efd54e1df140e0
#: ../../topics/forms/modelforms.txt:680
msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to ``modelformset_factory`` to limit the number of extra forms "
"displayed."
msgstr ""

# c11834ff32c04f81bf8ff60ecfe9b240
#: ../../topics/forms/modelforms.txt:683
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

# 73c7b58c40954fec86a795ae279c7689
#: ../../topics/forms/modelforms.txt:693
msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

# e1804509c87c47908ca94bc219c37103
#: ../../topics/forms/modelforms.txt:710
msgid "Using a model formset in a view"
msgstr ""

# 0de1cfedd47c4240bff6853b48664198
#: ../../topics/forms/modelforms.txt:712
msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

# 26b5effb7b0c41fc8b726a770f40e731
#: ../../topics/forms/modelforms.txt:728
msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

# 3e12a3104b0a4112b3ccca413a4e3bef
#: ../../topics/forms/modelforms.txt:734
msgid "Overiding ``clean()`` on a ``model_formset``"
msgstr ""

# 05b9f722eaed4123bf2983875c4a2242
#: ../../topics/forms/modelforms.txt:736
msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``model_formset`` will validate that none of the items in the formset "
"violate the unique constraints on your model (either ``unique``, "
"``unique_together`` or ``unique_for_date|month|year``).  If you want to "
"override the ``clean()`` method on a ``model_formset`` and maintain this "
"validation, you must call the parent class's ``clean`` method::"
msgstr ""

# a47066d968054ae681975986f7cfa495
#: ../../topics/forms/modelforms.txt:751
msgid "Using a custom queryset"
msgstr ""

# e231662560ae4bc382d8426a5d1a7c85
#: ../../topics/forms/modelforms.txt:753
msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""

# cdfe8d6fc8af493b990f8c93da5545c6
#: ../../topics/forms/modelforms.txt:770
msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""

# fac919d9e10c4774848fc81520eb59e5
#: ../../topics/forms/modelforms.txt:774
msgid "Using the formset in the template"
msgstr ""

# 7007fd06ac5446b4b23d583ab86e147a
#: ../../topics/forms/modelforms.txt:778
msgid "There are three ways to render a formset in a Django template."
msgstr ""

# 4bc5b38e318b4b5c94c545c8aa8d1b12
#: ../../topics/forms/modelforms.txt:780
msgid "First, you can let the formset do most of the work::"
msgstr ""

# a8353328785d46a6ab14290120adea2f
#: ../../topics/forms/modelforms.txt:786
msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""

# 6d130525b0144e5dbcd754e8be726d87
#: ../../topics/forms/modelforms.txt:796
msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

# de3ba5c03fb644ad97a47f348bc5dbee
#: ../../topics/forms/modelforms.txt:800
msgid "Third, you can manually render each field::"
msgstr ""

# 7efed33e0b4f45c495101706eca8ffda
#: ../../topics/forms/modelforms.txt:811
msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

# 94f17752091349508eadfb7386c3994e
#: ../../topics/forms/modelforms.txt:826
msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

# 53537b1a424641379f743461c90a4195
#: ../../topics/forms/modelforms.txt:834
msgid "Inline formsets"
msgstr ""

# 71fbbb65d00a4d2ab3f7add69c944656
#: ../../topics/forms/modelforms.txt:836
msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""

# fa12fd6473b7454c9dba348958f716ef
#: ../../topics/forms/modelforms.txt:847
msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this::"
msgstr ""

# 7dd7efc75df74ba89c88c7bc24e198c2
#: ../../topics/forms/modelforms.txt:856
msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and marks "
"``can_delete=True``."
msgstr ""

# 3c9b4f55e2324aedb4194f4b761f8606
#: ../../topics/forms/modelforms.txt:861
msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""

# a30b0b42781f43338247534aea107e30
#: ../../topics/forms/modelforms.txt:864
msgid "More than one foreign key to the same model"
msgstr ""

# 2a02217032df49e796c0a9eff85ec0b2
#: ../../topics/forms/modelforms.txt:866
msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

# e02e5a691e4e4fc7808307253a82f067
#: ../../topics/forms/modelforms.txt:875
msgid "To resolve this, you can use ``fk_name`` to ``inlineformset_factory``::"
msgstr ""

# b8e5c7e27e524987abdaa98697698283
#: ../../topics/forms/modelforms.txt:880
msgid "Using an inline formset in a view"
msgstr ""

# 7317b75399e949ab8e4bdeba4b80ffc2
#: ../../topics/forms/modelforms.txt:882
msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

# 6269db0e1461477eb75c65d7a96ca627
#: ../../topics/forms/modelforms.txt:900
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

# e18f1cb7395a49ddbd2eb41e2934ce55
#: ../../topics/http/decorators.txt:3
msgid "View decorators"
msgstr ""

# 43466c43d1744ceb8f7dfb3bbe09375f
#: ../../topics/http/decorators.txt:7
msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

# 58d3330e18f548a198e8032d9c26ffcb
#: ../../topics/http/decorators.txt:11
msgid "Allowed HTTP methods"
msgstr ""

# 4ef8aab8f9234075bfd128f0359a536c
#: ../../topics/http/decorators.txt:13
msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

# a595179d7ebc4ce59356f207e810066b
#: ../../topics/http/decorators.txt:19
msgid ""
"Decorator to require that a view only accept particular request methods. "
"Usage::"
msgstr ""

# 34ec95f3dd064b12bf913455152ec405
#: ../../topics/http/decorators.txt:30
msgid "Note that request methods should be in uppercase."
msgstr ""

# 19e8226c83ce4ef9bc0447e8ab0dfeb4
#: ../../topics/http/decorators.txt:34
msgid "Decorator to require that a view only accept the GET method."
msgstr ""

# 692d33ff9c154367aa70469e8ad9bd0e
#: ../../topics/http/decorators.txt:38
msgid "Decorator to require that a view only accept the POST method."
msgstr ""

# 8cc6fe51eb704367b809d730f717767f
#: ../../topics/http/decorators.txt:44
msgid ""
"Decorator to require that a view only accept the GET and HEAD methods. These "
"methods are commonly considered \"safe\" because they should not have the "
"significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

# 2590c6e6ee0145fdb973b23861de4732
#: ../../topics/http/decorators.txt:50
msgid ""
"Django will automatically strip the content of responses to HEAD requests "
"while leaving the headers unchanged, so you may handle HEAD requests exactly "
"like GET requests in your views. Since some software, such as link checkers, "
"rely on HEAD requests, you might prefer using ``require_safe`` instead of "
"``require_GET``."
msgstr ""

# 49a44a71c4fd4c028808b6f286b834c7
#: ../../topics/http/decorators.txt:57
msgid "Conditional view processing"
msgstr ""

# fa4e24d0de5447c79a32bf72fc1a106e
#: ../../topics/http/decorators.txt:59
msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

# 2abfb947dac840e79526b465d2764e08
#: ../../topics/http/decorators.txt:68
msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

# 1c7f2661591a411bb44ff3a3511b51d0
#: ../../topics/http/decorators.txt:75
msgid "GZip compression"
msgstr ""

# 7ed9d0ca6c5643a09d8e38de4b8e060c
#: ../../topics/http/decorators.txt:77
msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

# 95c912cd06754c13b1b8c71a725da7d9
#: ../../topics/http/decorators.txt:82
msgid ""
"This decorator compresses content if the browser allows gzip compression. It "
"sets the ``Vary`` header accordingly, so that caches will base their storage "
"on the ``Accept-Encoding`` header."
msgstr ""

# 7bc35badbed64beb82902b3a62f47d2e
#: ../../topics/http/decorators.txt:89
msgid "Vary headers"
msgstr ""

# d357035330234c24aab7c111b7207ed9
#: ../../topics/http/decorators.txt:91
msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control "
"caching based on specific request headers."
msgstr ""

# 0caffaccb8dd4df9878f1f70aac4101e
#: ../../topics/http/decorators.txt:98
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""

# a0a8f62b9f124fc69fd3e364db585243
#: ../../topics/http/decorators.txt:101
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

# 9ee310cfa3ec48be85bd25f960cb7f0e
#: ../../topics/http/file-uploads.txt:3
msgid "File Uploads"
msgstr ""

# 130765b4ec5b4ad6bed7aa3e0cb743ad
#: ../../topics/http/file-uploads.txt:7
msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""

# e25be98707a549e383d60c8637487c34
#: ../../topics/http/file-uploads.txt:14
msgid "Basic file uploads"
msgstr ""

# 9d4faeb0c648428e805d7afb5c47bc40
#: ../../topics/http/file-uploads.txt:16
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

# 018e2d01538b4b99b9e80c18154c77b8
#: ../../topics/http/file-uploads.txt:24
msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

# 5f6e4532237a430f8791ca1a63af1c61
#: ../../topics/http/file-uploads.txt:31
msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr ""

# 9d615f677b824ca69b0ad65552eb7258
#: ../../topics/http/file-uploads.txt:36
msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the "
"form as described in :ref:`binding-uploaded-files`. This would look "
"something like::"
msgstr ""

# 8231f9dd49c74912814b8042a0705e7f
#: ../../topics/http/file-uploads.txt:56
msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""

# 3349a82ac87547aba8d063607837fbf4
#: ../../topics/http/file-uploads.txt:60
msgid "Handling uploaded files"
msgstr ""

# a1f874ccef1d4f4dbfea8133c9122921
#: ../../topics/http/file-uploads.txt:64
msgid ""
"The final piece of the puzzle is handling the actual file data from :attr:"
"`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this "
"dictionary is an ``UploadedFile`` object -- a simple wrapper around an "
"uploaded file. You'll usually use one of these methods to access the "
"uploaded content:"
msgstr ""

# 0dad1a1c0c054d6d99a5fd1a2af216e1
#: ../../topics/http/file-uploads.txt:71
msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if "
"the uploaded file is huge it can overwhelm your system if you try to read it "
"into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

# 07da702ce55740ccade97a09d961fc9b
#: ../../topics/http/file-uploads.txt:78
msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes, "
"but that's configurable; see below."
msgstr ""

# 8d5400baa27d4337b8e12ff619b3a893
#: ../../topics/http/file-uploads.txt:84
msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

# 3ed12655f10a45c1ba15f54c24e42548
#: ../../topics/http/file-uploads.txt:87
msgid ""
"In practice, it's often easiest simply to use ``chunks()`` all the time; see "
"the example below."
msgstr ""

# 5ded9480f37e45bfbb47541bda669bd9
#: ../../topics/http/file-uploads.txt:92
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

# a6a9dc6af70b4d6e91ce31e4784e026d
#: ../../topics/http/file-uploads.txt:96
msgid "The size, in bytes, of the uploaded file."
msgstr ""

# 7e82c618f6684e8586f863979a64e90d
#: ../../topics/http/file-uploads.txt:98
msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see `UploadedFile objects`_ for a complete reference."
msgstr ""

# 3a758d4f2a0743d1bcdb327e4b28c5b3
#: ../../topics/http/file-uploads.txt:101
msgid ""
"Putting it all together, here's a common way you might handle an uploaded "
"file::"
msgstr ""

# 1f154aaff59d4ab3a0e3d08ce790629f
#: ../../topics/http/file-uploads.txt:108
msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""

# 3f13feeb30404ad48fbf5e8c9d76548d
#: ../../topics/http/file-uploads.txt:112
msgid "Where uploaded data is stored"
msgstr ""

# 347f22383a2d44a180ca6f4dfbcef314
#: ../../topics/http/file-uploads.txt:114
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

# 4fbfd9fa623448418f772e98234de7b5
#: ../../topics/http/file-uploads.txt:116
msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

# c29624c57ab04b279522a6104afc8a2e
#: ../../topics/http/file-uploads.txt:120
msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""

# a6639a5be91a428795a21d0aea90052f
#: ../../topics/http/file-uploads.txt:126
msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\". Read on for details on how you can customize or completely "
"replace upload behavior."
msgstr ""

# d4679f54e0a04bba9ce5dfe03da39223
#: ../../topics/http/file-uploads.txt:131
msgid "Changing upload handler behavior"
msgstr ""

# 5b7c009a39664a00b397b03bbcd5642b
#: ../../topics/http/file-uploads.txt:133
msgid "Three settings control Django's file upload behavior:"
msgstr ""

# 24548db834d242a3bbe1908f39913d40
#: ../../topics/http/file-uploads.txt:136
msgid ""
"The maximum size, in bytes, for files that will be uploaded into memory. "
"Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed to "
"disk."
msgstr ""

# 050141c26cbc4f85af3548ee26c0d967
#: ../../topics/http/file-uploads.txt:140
msgid "Defaults to 2.5 megabytes."
msgstr ""

# 8f99122ad35741d09a73642c002c41de
#: ../../topics/http/file-uploads.txt:143
msgid ""
"The directory where uploaded files larger than :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
msgstr ""

# 7afe3cbdfe9f4c6a87972933ef130917
#: ../../topics/http/file-uploads.txt:146
msgid ""
"Defaults to your system's standard temporary directory (i.e. ``/tmp`` on "
"most Unix-like systems)."
msgstr ""

# a2263e169e3a4215852f4bc03107989d
#: ../../topics/http/file-uploads.txt:150
msgid ""
"The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more "
"information about what these modes mean, see the documentation for :func:`os."
"chmod`."
msgstr ""

# c76efb857ddd480faf80d29a37cd082a
#: ../../topics/http/file-uploads.txt:154
msgid ""
"If this isn't given or is ``None``, you'll get operating-system dependent "
"behavior. On most platforms, temporary files will have a mode of ``0600``, "
"and files saved from memory will be saved using the system's standard umask."
msgstr ""

# 75862a525876489d92480cf955335df3
#: ../../topics/http/file-uploads.txt:161
msgid ""
"If you're not familiar with file modes, please note that the leading ``0`` "
"is very important: it indicates an octal number, which is the way that modes "
"must be specified. If you try to use ``644``, you'll get totally incorrect "
"behavior."
msgstr ""

# 3671f3d8bcdb43c68e4eae6068bbfb68
#: ../../topics/http/file-uploads.txt:166
msgid "**Always prefix the mode with a 0.**"
msgstr ""

# 7b4bdf95300842bcbc5e698bb9b4ddbd
#: ../../topics/http/file-uploads.txt:169
msgid ""
"The actual handlers for uploaded files. Changing this setting allows "
"complete customization -- even replacement -- of Django's upload process. "
"See `upload handlers`_, below, for details."
msgstr ""

# 049eedb2dd34400a85293f860e25bb6f
#: ../../topics/http/file-uploads.txt:173
msgid "Defaults to::"
msgstr ""

# 66808dd05e404d7c90f800d13133a66b
#: ../../topics/http/file-uploads.txt:178
msgid ""
"Which means \"try to upload to memory first, then fall back to temporary "
"files.\""
msgstr ""

# 62dcf35fcb504c109382dcdf786ddb56
#: ../../topics/http/file-uploads.txt:182
msgid "Handling uploaded files with a model"
msgstr ""

# 88de429af8df48b98364455aae84b24f
#: ../../topics/http/file-uploads.txt:184
msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a :class:"
"`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` "
"makes this process much easier. The file object will be saved to the "
"location specified by the :attr:`~django.db.models.FileField.upload_to` "
"argument of the corresponding :class:`~django.db.models.FileField` when "
"calling ``form.save()``::"
msgstr ""

# fa3bd2661e2f4d58a7ededc6cc3d68f1
#: ../../topics/http/file-uploads.txt:206
msgid ""
"If you are constructing an object manually, you can simply assign the file "
"object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the "
"file field in the model::"
msgstr ""

# 348d6f1894da425799c5ffa4d17e784d
#: ../../topics/http/file-uploads.txt:228
msgid "``UploadedFile`` objects"
msgstr ""

# 36f8a35a37b34764b1980a7343e4d9e8
#: ../../topics/http/file-uploads.txt:230
msgid ""
"In addition to those inherited from :class:`File`, all ``UploadedFile`` "
"objects define the following methods/attributes:"
msgstr ""

# 209df50bb9b2406b8a58ff75e8f9d375
#: ../../topics/http/file-uploads.txt:235
msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""

# 7d54aaa01ba54d61926a982fd6347845
#: ../../topics/http/file-uploads.txt:243
msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

# daee435b794b4cfe9feb0ee01775d6e1
#: ../../topics/http/file-uploads.txt:248
msgid ""
"Only files uploaded onto disk will have this method; it returns the full "
"path to the temporary uploaded file."
msgstr ""

# 6536004707024394b77de5d71ad87c6a
#: ../../topics/http/file-uploads.txt:253
msgid ""
"Like regular Python files, you can read the file line-by-line simply by "
"iterating over the uploaded file:"
msgstr ""

# fd1354adb2bd4d3693580b38e88981e0
#: ../../topics/http/file-uploads.txt:261
msgid ""
"However, *unlike* standard Python files, :class:`UploadedFile` only "
"understands ``\\n`` (also known as \"Unix-style\") line endings. If you know "
"that you need to handle uploaded files with different line endings, you'll "
"need to do so in your view."
msgstr ""

# c9b4b7f706484e82b9ce5b15db49963c
#: ../../topics/http/file-uploads.txt:267
msgid "Upload Handlers"
msgstr ""

# 2e8d2aeea27c4f2cb3884d34cc576960
#: ../../topics/http/file-uploads.txt:269
msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

# 83922a64898a4f67bece44e7848657fe
#: ../../topics/http/file-uploads.txt:277
msgid ""
"Together the ``MemoryFileUploadHandler`` and ``TemporaryFileUploadHandler`` "
"provide Django's default file upload behavior of reading small files into "
"memory and large ones onto disk."
msgstr ""

# 5b3f6fbdc7cd46398a8626358dfda7a6
#: ../../topics/http/file-uploads.txt:281
msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally."
msgstr ""

# 82e2b58eadee4f68a805bce097cd1c31
#: ../../topics/http/file-uploads.txt:289
msgid "Modifying upload handlers on the fly"
msgstr ""

# a69916cafea14b1da7c8de0d51a80e53
#: ../../topics/http/file-uploads.txt:291
msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

# e68278c677e447289dfc30a91c0a08e0
#: ../../topics/http/file-uploads.txt:297
msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

# 6495d06caaa042488c18c2e59ea46322
#: ../../topics/http/file-uploads.txt:303
msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

# a078febafef048479ca68da968be28ec
#: ../../topics/http/file-uploads.txt:307
msgid ""
"If you want to replace the upload handlers completely, you can just assign a "
"new list::"
msgstr ""

# bb81b23daedb4a5d82826e000986800e
#: ../../topics/http/file-uploads.txt:314
msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""

# f6487c1a70e841c08bcd149f8e6c0bdc
#: ../../topics/http/file-uploads.txt:321
msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""

# 6a49c56504cd4675aa2b6d7a5d6b899b
#: ../../topics/http/file-uploads.txt:324
msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code:"
msgstr ""

# e5e5f32b49064ceb86c261710cadaa05
#: ../../topics/http/file-uploads.txt:349
msgid "Writing custom upload handlers"
msgstr ""

# 5cee16d572ed4136a0d231c4d6a39b8a
#: ../../topics/http/file-uploads.txt:351
msgid ""
"All file upload handlers should be subclasses of ``django.core.files."
"uploadhandler.FileUploadHandler``. You can define upload handlers wherever "
"you wish."
msgstr ""

# 3d911a5816c042788f225e41b9f2c950
#: ../../topics/http/file-uploads.txt:356
msgid "Required methods"
msgstr ""

# a32c0f92312f49ca9d0c7d4b20abc7b3
#: ../../topics/http/file-uploads.txt:358
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

# 351de41cd79a4c298f27bf5339160768
#: ../../topics/http/file-uploads.txt:361
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

# edda6576255149eeb98ee42494900901
#: ../../topics/http/file-uploads.txt:363
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

# a3a6dfc65a744dbaa0233f43d35753e9
#: ../../topics/http/file-uploads.txt:365
msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

# a0d9dceef99c4b87b2a51937a5bd342d
#: ../../topics/http/file-uploads.txt:368
msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" "
"for other handlers."
msgstr ""

# cfd2bf2cd4d2408cb30cfb567bdf2d09
#: ../../topics/http/file-uploads.txt:372
msgid ""
"Return ``None`` from ``receive_data_chunk`` to sort-circuit remaining upload "
"handlers from getting this chunk.. This is useful if you're storing the "
"uploaded data yourself and don't want future handlers to store a copy of the "
"data."
msgstr ""

# cdda92842dd342e686c3b7877f779961
#: ../../topics/http/file-uploads.txt:377
msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""

# c188c733852542ffa8bad4a5979428c8
#: ../../topics/http/file-uploads.txt:381
msgid "Called when a file has finished uploading."
msgstr ""

# 3359a1ea7a8049f38057155605b1d122
#: ../../topics/http/file-uploads.txt:383
msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

# 624625d8c6454fe3a9e3f85c8099e248
#: ../../topics/http/file-uploads.txt:388
msgid "Optional methods"
msgstr ""

# f6a95c32713e42b5b588c9389ae1a9e2
#: ../../topics/http/file-uploads.txt:390
msgid ""
"Custom upload handlers may also define any of the following optional methods "
"or attributes:"
msgstr ""

# 13b858977d5f4c408bbb8c40ca611962
#: ../../topics/http/file-uploads.txt:394
msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

# a973c1ed84ce4b37b3b045c179c2f847
#: ../../topics/http/file-uploads.txt:398
msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""

# 9bf3cbeacc0a4dc7b93a8f36880a21fe
#: ../../topics/http/file-uploads.txt:403
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

# a58f96ba719842f49604f969d2bba3c8
#: ../../topics/http/file-uploads.txt:406
msgid ""
"Callback signaling that a new file upload is starting. This is called before "
"any data has been fed to any upload handlers."
msgstr ""

# f99e007993ed4909bd8e827c306f087d
#: ../../topics/http/file-uploads.txt:409
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

# e1a1888c1ec64b60a616e267576f2a6e
#: ../../topics/http/file-uploads.txt:411
msgid "``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

# be2a41c11b354e3bb123f5bd2753c20d
#: ../../topics/http/file-uploads.txt:413
msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. ``'image/"
"jpeg'``."
msgstr ""

# fb6f47301c8f4e99ad7163d52b94b283
#: ../../topics/http/file-uploads.txt:416
msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""

# 07da430b31a54ef2a9fb2deefe029e1d
#: ../../topics/http/file-uploads.txt:419
msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""

# e3704ad31e50411fbdc3425b8d352f6d
#: ../../topics/http/file-uploads.txt:422
msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""

# a59c56050d474ce8be45b6f623cf68fe
#: ../../topics/http/file-uploads.txt:426
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

# d04dfa61b42f48c68753eff7fc350c27
#: ../../topics/http/file-uploads.txt:429
msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

# 6e8071499153472ab5a6378fc3e761de
#: ../../topics/http/file-uploads.txt:432
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

# 1a3b73a0171f41a18e4c6e1e88994856
#: ../../topics/http/file-uploads.txt:434
msgid "``META`` is the same object as ``request.META``."
msgstr ""

# a8fc3f18361c43e7ba4e0b0814fd9fed
#: ../../topics/http/file-uploads.txt:436
msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""

# 2d424c25c4474cdbb72ee6a6be823c6f
#: ../../topics/http/file-uploads.txt:439
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

# 49102ec21b634680a1cc6275b332390e
#: ../../topics/http/file-uploads.txt:441
msgid "``encoding`` is the encoding of the request."
msgstr ""

# fd6e5e0a6c6b42ddb68784c269d1e963
#: ../../topics/http/file-uploads.txt:443
msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of ``"
"(POST, FILES)`` if you want to return the new data structures suitable for "
"the request directly."
msgstr ""

# e05a150f442144d5a00c7aec76486cfc
#: ../../topics/http/generic-views.txt:3
msgid "Generic views"
msgstr ""

# 99a8366cbf9346229ef72dbd536a6669
#: ../../topics/http/generic-views.txt:5
msgid "See :doc:`/ref/class-based-views/index`."
msgstr ""

# 2d0f02f77c594e9397019158b8084500
#: ../../topics/http/index.txt:2
msgid "Handling HTTP requests"
msgstr ""

# 16729f75cbfc4d4a9634caf36d813977
#: ../../topics/http/index.txt:4
msgid "Information on handling HTTP requests in Django:"
msgstr ""

# 0d481bfed4ec4345a9f72a63c220b2bf
#: ../../topics/http/middleware.txt:3
msgid "Middleware"
msgstr ""

# 83f89c0a54f848d2a72b5f049364e077
#: ../../topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input and/or output."
msgstr ""

# bec82820b6d4443db0a53bc98d6ccafd
#: ../../topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, ``XViewMiddleware``, "
"that adds an ``\"X-View\"`` HTTP header to every response to a ``HEAD`` "
"request."
msgstr ""

# b59b4848dfb940e5bd56954f84b8898c
#: ../../topics/http/middleware.txt:13
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box; they're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""

# 992cd20b8a544bc3b3994854add647ff
#: ../../topics/http/middleware.txt:19
msgid "Activating middleware"
msgstr ""

# dbced6f1d1e948b9a0686291d7fe158c
#: ../../topics/http/middleware.txt:21
msgid ""
"To activate a middleware component, add it to the :setting:"
"`MIDDLEWARE_CLASSES` list in your Django settings. In :setting:"
"`MIDDLEWARE_CLASSES`, each middleware component is represented by a string: "
"the full Python path to the middleware's class name. For example, here's the "
"default :setting:`MIDDLEWARE_CLASSES` created by :djadmin:`django-admin.py "
"startproject <startproject>`::"
msgstr ""

# b63d136a263d4fb6b62271ac7ab66eb9
#: ../../topics/http/middleware.txt:35
msgid ""
"During the request phases (:meth:`process_request` and :meth:`process_view` "
"middleware), Django applies middleware in the order it's defined in :setting:"
"`MIDDLEWARE_CLASSES`, top-down. During the response phases (:meth:"
"`process_response` and :meth:`process_exception` middleware), the classes "
"are applied in reverse order, from the bottom up. You can think of it like "
"an onion: each middleware class is a \"layer\" that wraps the view:"
msgstr ""

# 3a8e37c49cd540d4a1217bf54c7464e3
#: ../../topics/http/middleware.txt:47
msgid ""
"A Django installation doesn't require any middleware -- e.g., :setting:"
"`MIDDLEWARE_CLASSES` can be empty, if you'd like -- but it's strongly "
"suggested that you at least use :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# 488c53f738a94ab198781eaab76bf813
#: ../../topics/http/middleware.txt:53
msgid "Writing your own middleware"
msgstr ""

# 6b006246b95340068faf6923d222e8e9
#: ../../topics/http/middleware.txt:55
msgid ""
"Writing your own middleware is easy. Each middleware component is a single "
"Python class that defines one or more of the following methods:"
msgstr ""

# c8062ddeff9b46efaa1c32975492a850
#: ../../topics/http/middleware.txt:61
msgid "``process_request``"
msgstr ""

# aeec9ddede3e4371b22502d4ef3fcf7c
#: ../../topics/http/middleware.txt:65
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. This method is "
"called on each request, before Django decides which view to execute."
msgstr ""

# f9172899c26b420ea10022f35d26d882
#: ../../topics/http/middleware.txt:68
msgid ""
"``process_request()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns ``None``, Django will continue "
"processing this request, executing any other middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling ANY other request, view or exception "
"middleware, or the appropriate view; it'll return that :class:`~django.http."
"HttpResponse`. Response middleware is always called on every response."
msgstr ""

# 83b3bb3ad6824f529a7f4f97a03c3f11
#: ../../topics/http/middleware.txt:79
msgid "``process_view``"
msgstr ""

# 417b7d9c10c6476fb4302037bb3fe96f
#: ../../topics/http/middleware.txt:83
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

# a8d20d12efd14eb78d9d3af2ee3070f8
#: ../../topics/http/middleware.txt:91
msgid ""
"``process_view()`` is called just before Django calls the view. It should "
"return either ``None`` or an :class:`~django.http.HttpResponse` object. If "
"it returns ``None``, Django will continue processing this request, executing "
"any other ``process_view()`` middleware and, then, the appropriate view. If "
"it returns an :class:`~django.http.HttpResponse` object, Django won't bother "
"calling ANY other request, view or exception middleware, or the appropriate "
"view; it'll return that :class:`~django.http.HttpResponse`. Response "
"middleware is always called on every response."
msgstr ""

# 2570f253623a47d982f279437309214f
#: ../../topics/http/middleware.txt:102
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:"
"`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from "
"``process_request`` or ``process_view`` will prevent any view running after "
"the middleware from being able to :ref:`modify the upload handlers for the "
"request <modifying_upload_handlers_on_the_fly>`, and should normally be "
"avoided."
msgstr ""

# 6c4bf63d9edb4460af9a09e1507f3486
#: ../../topics/http/middleware.txt:109
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

# 7df68133b91a44138f3963ad68597eac
#: ../../topics/http/middleware.txt:118
msgid "``process_template_response``"
msgstr ""

# 3f3196bf8d434b7097376ec48479651a
#: ../../topics/http/middleware.txt:122
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"a subclass of :class:`~django.template.response.SimpleTemplateResponse` (e."
"g. :class:`~django.template.response.TemplateResponse`) or any response "
"object that implements a ``render`` method."
msgstr ""

# ffbd10fd4c7141a38cf63748f1148f7b
#: ../../topics/http/middleware.txt:127
msgid ""
"``process_template_response()`` must return a response object that "
"implements a ``render`` method. It could alter the given ``response`` by "
"changing ``response.template_name`` and ``response.context_data``, or it "
"could create and return a brand-new :class:`~django.template.response."
"SimpleTemplateResponse` or equivalent."
msgstr ""

# b49913302b2d4c5c9c719039f10a6733
#: ../../topics/http/middleware.txt:133
msgid ""
"``process_template_response()`` will only be called if the response instance "
"has a ``render()`` method, indicating that it is a :class:`~django.template."
"response.TemplateResponse` or equivalent."
msgstr ""

# 7a6d031cad4249c08e3a0d4c21681b28
#: ../../topics/http/middleware.txt:137
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

# 30fa10665c0c4d80b56ce97578b8dc07
#: ../../topics/http/middleware.txt:141
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes process_template_response."
msgstr ""

# a6aa24b3ef6c4a96988f016250a898fa
#: ../../topics/http/middleware.txt:147
msgid "``process_response``"
msgstr ""

# aabddbbcd12b4c639bcb3326bfae57c6
#: ../../topics/http/middleware.txt:151
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.http.HttpResponse` object returned by a Django view."
msgstr ""

# 4173c9c3154e447f883ee214350b9559
#: ../../topics/http/middleware.txt:154
msgid ""
"``process_response()`` must return an :class:`~django.http.HttpResponse` "
"object. It could alter the given ``response``, or it could create and return "
"a brand-new :class:`~django.http.HttpResponse`."
msgstr ""

# ea81dbdf28da4f088d983d464b161e06
#: ../../topics/http/middleware.txt:158
msgid ""
"Unlike the ``process_request()`` and ``process_view()`` methods, the "
"``process_response()`` method is always called, even if the ``process_request"
"()`` and ``process_view()`` methods of the same middleware class were "
"skipped because an earlier middleware method returned an :class:`~django."
"http.HttpResponse` (this means that your ``process_response()`` method "
"cannot rely on setup done in ``process_request()``, for example). In "
"addition, during the response phase the classes are applied in reverse "
"order, from the bottom up. This means classes defined at the end of :setting:"
"`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

# 95c9235ef60b429baf576bd4e020fce7
#: ../../topics/http/middleware.txt:171
msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""

# 5618ecf1451e4688af554416c9684879
#: ../../topics/http/middleware.txt:182
msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Middleware may wrap it in a new generator, but must not consume it."
msgstr ""

# 14096040728943d792041637ed538aaf
#: ../../topics/http/middleware.txt:188
msgid "``process_exception``"
msgstr ""

# 075753c862a74020baa167ea1d433efb
#: ../../topics/http/middleware.txt:192
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""

# b42f7d7d27b0468cbc3ba4eed819f510
#: ../../topics/http/middleware.txt:195
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the response will be returned to the browser. "
"Otherwise, default exception handling kicks in."
msgstr ""

# 96926840bc9d4bb696b9efc77e97c2f9
#: ../../topics/http/middleware.txt:201
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the middleware classes above that middleware will not be called at "
"all."
msgstr ""

# 11a14c9a882446b08204920697a41a35
#: ../../topics/http/middleware.txt:206
msgid "``__init__``"
msgstr ""

# 570fbff44bcf44668b67623d3b3f31eb
#: ../../topics/http/middleware.txt:208
msgid ""
"Most middleware classes won't need an initializer since middleware classes "
"are essentially placeholders for the ``process_*`` methods. If you do need "
"some global state you may use ``__init__`` to set up. However, keep in mind "
"a couple of caveats:"
msgstr ""

# 34abaded43184b549a8ac295a4b9b78c
#: ../../topics/http/middleware.txt:213
msgid ""
"Django initializes your middleware without any arguments, so you can't "
"define ``__init__`` as requiring any arguments."
msgstr ""

# e55d55e386554e739955c8f0c30b42e7
#: ../../topics/http/middleware.txt:216
msgid ""
"Unlike the ``process_*`` methods which get called once per request, "
"``__init__`` gets called only *once*, when the Web server responds to the "
"first request."
msgstr ""

# 8afe5ddd5c4b4a4ead85d03f5589a3de
#: ../../topics/http/middleware.txt:221
msgid "Marking middleware as unused"
msgstr ""

# 4423e84dec514926b4acd17ad3d01b5c
#: ../../topics/http/middleware.txt:223
msgid ""
"It's sometimes useful to determine at run-time whether a piece of middleware "
"should be used. In these cases, your middleware's ``__init__`` method may "
"raise ``django.core.exceptions.MiddlewareNotUsed``. Django will then remove "
"that piece of middleware from the middleware process."
msgstr ""

# 8bc8c7793af5427ab1b405e7934eb9c9
#: ../../topics/http/middleware.txt:229
msgid "Guidelines"
msgstr ""

# 4eaa3e8c50ea484299cf5e23aa05d804
#: ../../topics/http/middleware.txt:231
msgid "Middleware classes don't have to subclass anything."
msgstr ""

# 42806202717145c78e2fe5c24676ba1a
#: ../../topics/http/middleware.txt:233
msgid ""
"The middleware class can live anywhere on your Python path. All Django cares "
"about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to "
"it."
msgstr ""

# e8e87664caf140cb9dbefeb10164ffef
#: ../../topics/http/middleware.txt:237
msgid ""
"Feel free to look at :doc:`Django's available middleware </ref/middleware>` "
"for examples."
msgstr ""

# 82974136ec684b94ab882aa6195ce895
#: ../../topics/http/middleware.txt:240
msgid ""
"If you write a middleware component that you think would be useful to other "
"people, contribute to the community! :doc:`Let us know </internals/"
"contributing/index>`, and we'll consider adding it to Django."
msgstr ""

# 7dcc39159ff64690a772ecccb18b7ae9
#: ../../topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr ""

# 23662d31aa544b8e8bf50747752b35e1
#: ../../topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

# db50822bbf9046c3815be5591762995c
#: ../../topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr ""

# e0eedffc3e2140169eb3b55b124b86f5
#: ../../topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

# ed01ee1bf89a44f7b1e674610fe11377
#: ../../topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr ""

# 5305b113e56a4615b6a1297a3b338cd2
#: ../../topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin.py startproject`` has "
"``SessionMiddleware`` activated."
msgstr ""

# 166e48e16128496ca3b56662a01be432
#: ../../topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django."
"contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a "
"small bit of overhead."
msgstr ""

# 0c66b0eed9e347acaad12fbbdc65ed29
#: ../../topics/http/sessions.txt:32
msgid "Configuring the session engine"
msgstr ""

# df76f0430c734b39918a24e4dbdcff5f
#: ../../topics/http/sessions.txt:34
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

# 4754f9a984204c0b9aaca299314934be
#: ../../topics/http/sessions.txt:40
msgid "Using database-backed sessions"
msgstr ""

# 355bac164b6a45e1bb83dd0e8f84939d
#: ../../topics/http/sessions.txt:42
msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

# 359333e5270d4c8497abff77bfc27e2c
#: ../../topics/http/sessions.txt:45
msgid ""
"Once you have configured your installation, run ``manage.py syncdb`` to "
"install the single database table that stores session data."
msgstr ""

# fa60fffceb6041ec9c48c35644c36b8d
#: ../../topics/http/sessions.txt:51
msgid "Using cached sessions"
msgstr ""

# 6ab9583da68f4df0adfd352b6780a590
#: ../../topics/http/sessions.txt:53
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

# e50ae8bf563240bc8a6a6670c247c577
#: ../../topics/http/sessions.txt:55
msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""

# 502b05044eb047228d2a06f7dfcb4819
#: ../../topics/http/sessions.txt:61
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache "
"backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends."
msgstr ""

# a3b48cfef38641c783478af859f89625
#: ../../topics/http/sessions.txt:67
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""

# 0d6589fb529e4edc9088b492de7b2d35
#: ../../topics/http/sessions.txt:74
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

# 180f3ef35108441bb2d5d64209e52090
#: ../../topics/http/sessions.txt:77
msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""

# 98d0e4796ae84ca99d1360f5bee4aa27
#: ../../topics/http/sessions.txt:83
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""

# ffc55126d5b94dc2b51807436dbcec3f
#: ../../topics/http/sessions.txt:89
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

# 964c7ec13ac3479f94dd1c9b2976e0d3
#: ../../topics/http/sessions.txt:94
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

# 5d08b7d3099b490c81654fee75d30e6d
#: ../../topics/http/sessions.txt:98
msgid "Using file-based sessions"
msgstr ""

# 8364be26ffbd4872b2ee863d9a1e5e58
#: ../../topics/http/sessions.txt:100
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""

# e6f6d94016264249b360b1ae376897fb
#: ../../topics/http/sessions.txt:103
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

# d4c215d528254c41b11477059dc61eeb
#: ../../topics/http/sessions.txt:111
msgid "Using cookie-based sessions"
msgstr ""

# 98ab10c7c168485baf523b8a78935f5b
#: ../../topics/http/sessions.txt:115
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

# f5db6a12488d4a29b5c216f5db4b1c1d
#: ../../topics/http/sessions.txt:122
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting "
"``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

# f6b56e4aff0e4be49fa85fb405bfddff
#: ../../topics/http/sessions.txt:127
msgid "**The session data is signed but not encrypted**"
msgstr ""

# 3e89f40979c84bbaa00a87ba3941e51d
#: ../../topics/http/sessions.txt:129
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

# f4fb8ba4183b4e468f13d4fa518628f1
#: ../../topics/http/sessions.txt:131
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

# e4c01a5faa1a46699d98a7480ba488f4
#: ../../topics/http/sessions.txt:138
msgid "**No freshness guarantee**"
msgstr ""

# 0a8e26c5b9534e9c9f1a86c044b64840
#: ../../topics/http/sessions.txt:140
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""

# fd53abecdd2f4a27931eeb5887973fea
#: ../../topics/http/sessions.txt:149
msgid "**Performance**"
msgstr ""

# 6e9ab0997691467ba838b828259e9c50
#: ../../topics/http/sessions.txt:151
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

# 79b377a739d04433a93dc94429d614e3
#: ../../topics/http/sessions.txt:158
msgid "Using sessions in views"
msgstr ""

# 86d8aa667218460e9447b80727c08edf
#: ../../topics/http/sessions.txt:160
msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

# 1a0d3a8368174954894a5bf5a55870e7
#: ../../topics/http/sessions.txt:164
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

# 017ca6ae605f4e579afd6ebefda9cb8b
#: ../../topics/http/sessions.txt:169
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

# 2da0a6c77415453ba4422c4e381966a8
#: ../../topics/http/sessions.txt:174
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

# fae0c37527ef4ac19e8f73ce3a862e36
#: ../../topics/http/sessions.txt:178
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

# 0487ec86fc7f48899e299748f1091b4a
#: ../../topics/http/sessions.txt:182
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

# b7e93624cf4c4643a56ed175a4bd1730
#: ../../topics/http/sessions.txt:187
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

# 0deb8f6a1c9844769e86c899a5d31974
#: ../../topics/http/sessions.txt:191
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

# af7970d7a5214b27be7d6e7a05f7da29
#: ../../topics/http/sessions.txt:195
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

# 35568c002e614f7582cb93dea3bc010e
#: ../../topics/http/sessions.txt:205
msgid "It also has these methods:"
msgstr ""

# c56cb17d7f8544059ee6f7bc4564acca
#: ../../topics/http/sessions.txt:209
msgid ""
"Delete the current session data from the session and regenerate the session "
"key value that is sent back to the user in the cookie. This is used if you "
"want to ensure that the previous session data can't be accessed again from "
"the user's browser (for example, the :func:`django.contrib.auth.logout()` "
"function calls it)."
msgstr ""

# 80018c35d4bf47a583a4de46670607f0
#: ../../topics/http/sessions.txt:217
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""

# 8afcbb1efd654a359d8e42a3629e0911
#: ../../topics/http/sessions.txt:224
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

# 701f91398c654e4ea020c496dd492626
#: ../../topics/http/sessions.txt:231
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

# 01b6678e6fc7416896a20cdcfc1ea3f3
#: ../../topics/http/sessions.txt:235
msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""

# b3e7db0865bc476987b9981cf6482dac
#: ../../topics/http/sessions.txt:238
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

# 1c5167c1094d404ead640f98729841d6
#: ../../topics/http/sessions.txt:243
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time."
msgstr ""

# 4640f3183356414490a0f9f04a2a9ac6
#: ../../topics/http/sessions.txt:246
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"Web browser is closed."
msgstr ""

# d5eed1b644ae4582a4f61daa8bced21e
#: ../../topics/http/sessions.txt:249
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

# f38245e4312a4558bfa25ca8f02c0a1b
#: ../../topics/http/sessions.txt:252
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""

# 9e7681000173480dbdfae5235eaf654c
#: ../../topics/http/sessions.txt:258
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# d8913d338415402f957380a9cbf9bb37
#: ../../topics/http/sessions.txt:262
msgid "This function accepts two optional keyword arguments:"
msgstr ""

# 60a99d3cf1a44018928095b717d7bb2e
#: ../../topics/http/sessions.txt:264
msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""

# 561d174ef8104b26ac141daa0999814a
#: ../../topics/http/sessions.txt:266
msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :class:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""

# b77c6b913830400e860ef710a858b119
#: ../../topics/http/sessions.txt:273
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

# afa6d9bea6c14e9fb2e6b8c400fff680
#: ../../topics/http/sessions.txt:277
msgid ""
"This function accepts the same keyword argumets as :meth:`get_expiry_age`."
msgstr ""

# 981026aafa2c444e8ee7ccbcef7b0695
#: ../../topics/http/sessions.txt:281
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

# 6dc9d88d67be4e80bb7a69e5a6b9b5f9
#: ../../topics/http/sessions.txt:288
msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""

# ddc22ef82b104407bb8587e1bf641626
#: ../../topics/http/sessions.txt:292
msgid "Session object guidelines"
msgstr ""

# 03ac680c68d643aa88696fab273045f8
#: ../../topics/http/sessions.txt:294
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

# 7d5c64a3b65a406ebfcbd46d68ff4e5f
#: ../../topics/http/sessions.txt:297
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

# ae5236eac66e40feacd65e946b4256e2
#: ../../topics/http/sessions.txt:300
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

# 0c7bfbd3b1e540788974899092a67535
#: ../../topics/http/sessions.txt:306
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

# b449ffd34b424e4e87e1d77372d4124a
#: ../../topics/http/sessions.txt:317
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

# 6c4117f97f314dbe9d108101f32f9f03
#: ../../topics/http/sessions.txt:327
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

# 80261cd08f244ea39c7080ed5c284e25
#: ../../topics/http/sessions.txt:336
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

# 11d4dfb497b64aabb69f6a5e426ce1f8
#: ../../topics/http/sessions.txt:343
msgid "Setting test cookies"
msgstr ""

# 82ec765dc60e4b9db2b0714d741eb289
#: ../../topics/http/sessions.txt:345
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the :meth:`~backends.base.SessionBase."
"set_test_cookie` method of ``request.session`` in a view, and call :meth:"
"`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not "
"in the same view call."
msgstr ""

# d76fcfebd456489bbb5547c3469b319c
#: ../../topics/http/sessions.txt:352
msgid ""
"This awkward split between ``set_test_cookie()`` and ``test_cookie_worked()"
"`` is necessary due to the way cookies work. When you set a cookie, you "
"can't actually tell whether a browser accepted it until the browser's next "
"request."
msgstr ""

# f722e00b159d40fdaf561d254d16f198
#: ../../topics/http/sessions.txt:356
msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

# db62c956bc944ce08266b150464d8c48
#: ../../topics/http/sessions.txt:360
msgid "Here's a typical usage example::"
msgstr ""

# 8a88c552788e40b0be356cd9d82b6070
#: ../../topics/http/sessions.txt:373
msgid "Using sessions out of views"
msgstr ""

# c907b87242524fc686422487367b04e6
#: ../../topics/http/sessions.txt:375
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

# 7e71f97a25de421a8bb60fd43a4ba2b5
#: ../../topics/http/sessions.txt:389
msgid ""
"In order to prevent session fixation attacks, sessions keys that don't exist "
"are regenerated::"
msgstr ""

# 6857cfcfee2544348ed5718eb5fe88b1
#: ../../topics/http/sessions.txt:398
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

# 69f9bd3236434c9cb0f822e623d33b16
#: ../../topics/http/sessions.txt:408
msgid ""
"Note that you'll need to call ``get_decoded()`` to get the session "
"dictionary. This is necessary because the dictionary is stored in an encoded "
"format::"
msgstr ""

# a5b99ba666e94781849ec5830d540d60
#: ../../topics/http/sessions.txt:417
msgid "When sessions are saved"
msgstr ""

# b75ede9d730d4e4680aceda999a68d66
#: ../../topics/http/sessions.txt:419
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

# 8c587838528745ec84332e7819443ff0
#: ../../topics/http/sessions.txt:436
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

# 639e78b314c241eb8b07baede0e4f2b8
#: ../../topics/http/sessions.txt:442
msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

# e34742fc31c749c487e4535b8068cb58
#: ../../topics/http/sessions.txt:446
msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

# 6f733db1f84b4d53963c63f8895fbe4e
#: ../../topics/http/sessions.txt:450
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

# 1cbd02e19dcc444893595bc205041987
#: ../../topics/http/sessions.txt:457
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

# 8a17179b97764a6cae3b41b03d34c3a4
#: ../../topics/http/sessions.txt:459
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

# 35a4e00492c647cfb801e713a46e6624
#: ../../topics/http/sessions.txt:463
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

# fe4b30476aeb47d8b0865dbe360dc4b3
#: ../../topics/http/sessions.txt:468
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes his or her browser. Use this if you want people to have to log in "
"every time they open a browser."
msgstr ""

# fdab16989e35441a9387bb7bb8571561
#: ../../topics/http/sessions.txt:473
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

# 58b8a77c266a4c0ba2ea0e009684e4de
#: ../../topics/http/sessions.txt:478
msgid "Clearing the session store"
msgstr ""

# f69341d6179e49ea970382c2be349013
#: ../../topics/http/sessions.txt:480
msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""

# c477fa9e751d4edd96939ca26e2eac5c
#: ../../topics/http/sessions.txt:485
msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""

# 65fdb4808d1543b09549df0cbac472bd
#: ../../topics/http/sessions.txt:491
msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

# 012e14b92ac44745aaa90acd3e26bf8b
#: ../../topics/http/sessions.txt:497
msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""

# 7877365d24c340f8a9afc3a46512ac22
#: ../../topics/http/sessions.txt:502
msgid "Settings"
msgstr ""

# 828165a1682f4843a054b3371a6850c5
#: ../../topics/http/sessions.txt:504
msgid ""
"A few :doc:`Django settings </ref/settings>` give you control over session "
"behavior:"
msgstr ""

# 6e7d84abf14b4e8b9386b6ad0bc6a2e7
#: ../../topics/http/sessions.txt:508
msgid "SESSION_ENGINE"
msgstr ""

# 5dc4dd1baf074045ba86ed7b738b5eb3
#: ../../topics/http/sessions.txt:510
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

# 2a8fd541bdc344dfa5ed288024da3e86
#: ../../topics/http/sessions.txt:512
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

# 694a131d05e24be881b613af2d5ebffb
#: ../../topics/http/sessions.txt:514
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

# 4981724147b04d268860a68e4cb9e4e4
#: ../../topics/http/sessions.txt:515
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

# 8d40449726594dd78fcc117e4bbc5a8c
#: ../../topics/http/sessions.txt:516
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

# 97f395fd597148ba80e3f45f38bd4478
#: ../../topics/http/sessions.txt:517
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

# e13c67fd8dc144fda67d1720744dba23
#: ../../topics/http/sessions.txt:518
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

# 3a4c1ff22ea142f6be172e3568e96ff6
#: ../../topics/http/sessions.txt:520
msgid "See `configuring the session engine`_ for more details."
msgstr ""

# 7ea9c909c98b4ace9fbd961813ac1d4a
#: ../../topics/http/sessions.txt:523
msgid "SESSION_FILE_PATH"
msgstr ""

# f13e1ebc0bec4583af0c53a0f78a6dc2
#: ../../topics/http/sessions.txt:525
msgid "Default: ``/tmp/``"
msgstr ""

# 730e1433ed204a189e4a07b7241f02ed
#: ../../topics/http/sessions.txt:527
msgid ""
"If you're using file-based session storage, this sets the directory in which "
"Django will store session data."
msgstr ""

# 06c8387dc2cc4affb8c8b68b26d310c1
#: ../../topics/http/sessions.txt:531
msgid "SESSION_COOKIE_AGE"
msgstr ""

# 3c587e8c25cf42f78316f1b5104f3715
#: ../../topics/http/sessions.txt:533
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

# 9ee82256ad52439c82a2546659a702d0
#: ../../topics/http/sessions.txt:535
msgid "The age of session cookies, in seconds."
msgstr ""

# e97e46cf2ff24cfa944cccd340d8c2c6
#: ../../topics/http/sessions.txt:538
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

# c2dbbe3db5cc4022acbcc2d4b882b259
#: ../../topics/http/sessions.txt:540
msgid "Default: ``None``"
msgstr ""

# f52a217cd14c4661b1df2915be635f11
#: ../../topics/http/sessions.txt:542
msgid ""
"The domain to use for session cookies. Set this to a string such as ``\"."
"example.com\"`` (note the leading dot!) for cross-domain cookies, or use "
"``None`` for a standard domain cookie."
msgstr ""

# a01a7afff5674b61808600adaf74e7d7
#: ../../topics/http/sessions.txt:547
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

# e5ef31567ea847babe9816b6f6662287
#: ../../topics/http/sessions.txt:549
msgid "Default: ``True``"
msgstr ""

# 495681d0e2bc485683c2b48df0acf640
#: ../../topics/http/sessions.txt:551
msgid ""
"Whether to use HTTPOnly flag on the session cookie. If this is set to "
"``True``, client-side JavaScript will not to be able to access the session "
"cookie."
msgstr ""

# 4a5c19a8e0ea49a798d879677e3957c5
#: ../../topics/http/sessions.txt:555
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not "
"part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of client side script accessing the "
"protected cookie data."
msgstr ""

# 44009cb659434cb1b01010c73728c4c1
#: ../../topics/http/sessions.txt:567
msgid "SESSION_COOKIE_NAME"
msgstr ""

# c433f9df788d4a3abde3ef3461e80600
#: ../../topics/http/sessions.txt:569
msgid "Default: ``'sessionid'``"
msgstr ""

# 375d5b73222a4eb49201aae239934d7a
#: ../../topics/http/sessions.txt:571
msgid ""
"The name of the cookie to use for sessions. This can be whatever you want."
msgstr ""

# a60e563aa74946809b4861a607b71a19
#: ../../topics/http/sessions.txt:574
msgid "SESSION_COOKIE_PATH"
msgstr ""

# 7853261bdf2b47478e5c377c55b5f79e
#: ../../topics/http/sessions.txt:576
msgid "Default: ``'/'``"
msgstr ""

# 89a3e0621b2f4d268128498b026d418d
#: ../../topics/http/sessions.txt:578
msgid ""
"The path set on the session cookie. This should either match the URL path of "
"your Django installation or be parent of that path."
msgstr ""

# 9f467901e5af448d973dc668ff6b1bb6
#: ../../topics/http/sessions.txt:581
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own session cookie."
msgstr ""

# 58f67f36fd714ce6b89b88b31695fc36
#: ../../topics/http/sessions.txt:586
msgid "SESSION_COOKIE_SECURE"
msgstr ""

# c02e5ab1994a4f0eb5caf448fd73c64c
#: ../../topics/http/sessions.txt:590
msgid ""
"Whether to use a secure cookie for the session cookie. If this is set to "
"``True``, the cookie will be marked as \"secure,\" which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

# bda2489672c44e37ba4bbc1cef54ea41
#: ../../topics/http/sessions.txt:595
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

# 0d3e5dba5c5b40a79b1069d8be12ffcb
#: ../../topics/http/sessions.txt:599
msgid ""
"Whether to expire the session when the user closes his or her browser. See "
"\"Browser-length sessions vs. persistent sessions\" above."
msgstr ""

# dae9eaee6760430ea0c4ca217ec9041b
#: ../../topics/http/sessions.txt:603
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

# 39ae62fd32f24a4385935c8df0193cbd
#: ../../topics/http/sessions.txt:607
msgid ""
"Whether to save the session data on every request. If this is ``False`` "
"(default), then the session data will only be saved if it has been modified "
"-- that is, if any of its dictionary values have been assigned or deleted."
msgstr ""

# abc3bc8b00ba42b59891bf2c4c8d383b
#: ../../topics/http/sessions.txt:614
msgid "Technical details"
msgstr ""

# ceb23e96d78346dbb1dd7b03b0faae63
#: ../../topics/http/sessions.txt:616
msgid ""
"The session dictionary should accept any pickleable Python object. See the :"
"mod:`pickle` module for more information."
msgstr ""

# 613cf7a408a64914a030dcf353b10f9c
#: ../../topics/http/sessions.txt:619
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

# a1078bd322df42e980d3b135216fb94d
#: ../../topics/http/sessions.txt:621
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

# c7aa94dc04de45548751fe99acbf4f82
#: ../../topics/http/sessions.txt:625
msgid "Session IDs in URLs"
msgstr ""

# c71514fd22f7444fb1dbadac41bdc6cd
#: ../../topics/http/sessions.txt:627
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""

# 4318e556d2f14051903e976e73d16d72
#: ../../topics/http/shortcuts.txt:3
msgid "Django shortcut functions"
msgstr ""

# 6cd9e6aba982489b9b1f548678053a70
#: ../../topics/http/shortcuts.txt:11
msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""

# aab9e9d6c534407abd5683af722db169
#: ../../topics/http/shortcuts.txt:16
msgid "``render``"
msgstr ""

# f446e28d899a4a05967daac9a13a45fb
#: ../../topics/http/shortcuts.txt:20
msgid ""
"Combines a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# d7f7d6eb82ba42b0b4f1ac692924c0ba
#: ../../topics/http/shortcuts.txt:23
msgid ""
":func:`render()` is the same as a call to :func:`render_to_response()` with "
"a `context_instance` argument that forces the use of a :class:`~django."
"template.RequestContext`."
msgstr ""

# cd2bbd0dea934ecab0f4ce38f7766f48
# cc5e0ac32ea747ab8254f943c11aacc5
# afde37fd7fb84c38a2454ca4f57fa952
# 00e6ee9cecb44c63aac2c2861e05e4d4
# 5e2479a9050e41c9a47c6edda401291b
#: ../../topics/http/shortcuts.txt:28 ../../topics/http/shortcuts.txt:96
#: ../../topics/http/shortcuts.txt:228 ../../topics/http/shortcuts.txt:274
#: ../../topics/pagination.txt:143
msgid "Required arguments"
msgstr ""

# cce8e483394e42388bcdc2f8b7c58c56
#: ../../topics/http/shortcuts.txt:31
msgid "The request object used to generate this response."
msgstr ""

# 988e2366b93a4b229085e62b6a5dc5db
#: ../../topics/http/shortcuts.txt:34
msgid "The full name of a template to use or sequence of template names."
msgstr ""

# 346b69b401074498bae42c5f80cc88f5
# 98b0b2ba37254c9f9752c9d974a5aa1c
# ca28f67d7b5d458a91f6ea2f8ac66c95
#: ../../topics/http/shortcuts.txt:37 ../../topics/http/shortcuts.txt:105
#: ../../topics/pagination.txt:154
msgid "Optional arguments"
msgstr ""

# e21029a2a5a34eb9858ed5d0f7c8c5fb
# 4853bcc903684c99923971652ec261ab
#: ../../topics/http/shortcuts.txt:40 ../../topics/http/shortcuts.txt:108
msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will "
"call it just before rendering the template."
msgstr ""

# d1e1b70b769e4313a027528bd2fb0e65
#: ../../topics/http/shortcuts.txt:45
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a ``RequestContext`` instance (filled with values from "
"``request`` and ``dictionary``)."
msgstr ""

# 06db4020a9f042768fed06cb6896bf98
# efa132789bc5420090dedbcbf48578fc
#: ../../topics/http/shortcuts.txt:50 ../../topics/http/shortcuts.txt:125
msgid ""
"The MIME type to use for the resulting document. Defaults to the value of "
"the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

# 995c7e30af8b482880691346669769cd
#: ../../topics/http/shortcuts.txt:54
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

# 23c3760a57c841ab9d202906e653e72a
#: ../../topics/http/shortcuts.txt:57
msgid ""
"A hint indicating which application contains the current view. See the :ref:"
"`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` "
"for more information."
msgstr ""

# 1c8e6c04b7bc4ee0aebb1519fa434cf3
# baf3fc4d72cf4e958e35c9bb9d4c010f
# 500cb59cf083426a9db74ddbe1dc777a
# 2d1052fe3ed74119acec0c8ac7403f2d
# 3cc7d8d1dd2740bfbb689fd786594615
# b315012f78df4643852e135d5fd197fe
# 3f939e96d7434f81b9c6a1e45c7d6347
# d1ae8b543cc944098d888d5724fa38fb
# d8a7570ff07548508eba12c073080592
#: ../../topics/http/shortcuts.txt:62 ../../topics/http/shortcuts.txt:129
#: ../../topics/http/shortcuts.txt:240 ../../topics/http/shortcuts.txt:286
#: ../../topics/http/urls.txt:66 ../../topics/http/urls.txt:746
#: ../../topics/pagination.txt:13 ../../topics/testing.txt:1105
#: ../../topics/testing.txt:1156
msgid "Example"
msgstr ""

# c6115de963974c969b19c98d9bd630dc
# d2b81623c34a44fca959fc733cbe9477
#: ../../topics/http/shortcuts.txt:64 ../../topics/http/shortcuts.txt:131
msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

# 41db5a0878894605845af1050250c2d4
# 8d24d1410ff4498cb386eb8e4469c0b0
# a1e25e8675a74c29af9347cb8aa3152a
# 689e288475dd479c9e21a556a37c758c
#: ../../topics/http/shortcuts.txt:74 ../../topics/http/shortcuts.txt:141
#: ../../topics/http/shortcuts.txt:250 ../../topics/http/shortcuts.txt:295
msgid "This example is equivalent to::"
msgstr ""

# 4d15ba91004741c3a2256cd29825a089
#: ../../topics/http/shortcuts.txt:88
msgid "``render_to_response``"
msgstr ""

# fcf0f9f7883b4a669f4ef779ae2cb8e2
#: ../../topics/http/shortcuts.txt:92
msgid ""
"Renders a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# fe61936f49fc4f1dae3a2b8c207fe4b5
#: ../../topics/http/shortcuts.txt:99
msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the :ref:"
"`template loader documentation <ref-templates-api-the-python-api>` for more "
"information on how templates are found."
msgstr ""

# e8d04db670e84d699657151d8514d61b
#: ../../topics/http/shortcuts.txt:113
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a :class:`~django.template.Context` instance (filled "
"with values from ``dictionary``). If you need to use :ref:`context "
"processors <subclassing-context-requestcontext>`, render the template with "
"a :class:`~django.template.RequestContext` instance instead. Your code might "
"look something like this::"
msgstr ""

# 6fcda3d9fb6c42a09f559eb00b788ea1
#: ../../topics/http/shortcuts.txt:154
msgid "``redirect``"
msgstr ""

# bc34813424764714aaa2a9a1418306a2
#: ../../topics/http/shortcuts.txt:158
msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL "
"for the arguments passed."
msgstr ""

# f25119408fa047cf91eaa136d81c3451
#: ../../topics/http/shortcuts.txt:161
msgid "The arguments could be:"
msgstr ""

# c3e746bfe6f143969dd9e441bb1b38a8
#: ../../topics/http/shortcuts.txt:163
msgid "A model: the model's `get_absolute_url()` function will be called."
msgstr ""

# 61c19bbc6f504ccabbbab74543a9b332
#: ../../topics/http/shortcuts.txt:165
msgid ""
"A view name, possibly with arguments: `urlresolvers.reverse()` will be used "
"to reverse-resolve the name."
msgstr ""

# b78862ff68844dfea861c7e563f999eb
#: ../../topics/http/shortcuts.txt:168
msgid "A URL, which will be used as-is for the redirect location."
msgstr ""

# b9ef6241095f4d1d9de679dd7df1b195
#: ../../topics/http/shortcuts.txt:170
msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect"
msgstr ""

# 4a14e81b00a74ff88d7f865310df4df9
#: ../../topics/http/shortcuts.txt:176
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

# b51f3d92baf44a45953127d950cf558f
#: ../../topics/http/shortcuts.txt:178
msgid ""
"By passing some object; that object's :meth:`~django.db.models.Model."
"get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

# b492086ca2e84ed08a726ae0bba62377
#: ../../topics/http/shortcuts.txt:189
msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the :func:`~django.core."
"urlresolvers.reverse` method::"
msgstr ""

# 9d9d4f9504ca4d5abcb98bfdf99b8475
#: ../../topics/http/shortcuts.txt:197
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

# cf82e56894b047e0b03010a65975247f
#: ../../topics/http/shortcuts.txt:203
msgid "This also works with full URLs::"
msgstr ""

# 4c005f02dba64c4491f30ff0e2042ef6
#: ../../topics/http/shortcuts.txt:209
msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

# d8360395c2ea433a8a372f2790bb53aa
#: ../../topics/http/shortcuts.txt:219
msgid "``get_object_or_404``"
msgstr ""

# 5824f2de967d4e21a2ced8225f9f3d1b
#: ../../topics/http/shortcuts.txt:223
msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's :"
"class:`~django.core.exceptions.DoesNotExist` exception."
msgstr ""

# d870813142694477a6c143681d8beefd
#: ../../topics/http/shortcuts.txt:231
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the "
"object."
msgstr ""

# 86d42bdcdec243de951be6dd15e67056
# 81c08b0663564e31af1d48995f23e992
#: ../../topics/http/shortcuts.txt:236 ../../topics/http/shortcuts.txt:282
msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""

# 7bd1679e71cf431798092a21d1bbe934
#: ../../topics/http/shortcuts.txt:242
msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

# d5b480f49160467ebda0229cda51a0b1
#: ../../topics/http/shortcuts.txt:260
msgid ""
"Note: As with ``get()``, a :class:`~django.core.exceptions."
"MultipleObjectsReturned` exception will be raised if more than one object is "
"found."
msgstr ""

# 18b6b314914347239a1a6f9eeab91688
#: ../../topics/http/shortcuts.txt:265
msgid "``get_list_or_404``"
msgstr ""

# 59779d27db304a4a9c4a58b4c25c8587
#: ../../topics/http/shortcuts.txt:269
msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a "
"given model manager, raising :class:`~django.http.Http404` if the resulting "
"list is empty."
msgstr ""

# 6334e9f9a0fc4c328481f95159a37906
#: ../../topics/http/shortcuts.txt:277
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

# 19e704c97c474aa18519f3341f5ec6eb
#: ../../topics/http/shortcuts.txt:288
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

# 39fbe54355f64a33956b354b5140cdd0
#: ../../topics/http/urls.txt:3
msgid "URL dispatcher"
msgstr ""

# ee365ab54a6440b8b4f52ad421f22d22
#: ../../topics/http/urls.txt:5
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django lets you design URLs however you want, with no framework "
"limitations."
msgstr ""

# fecdd91680a945e9af5c2292219b7456
#: ../../topics/http/urls.txt:9
msgid ""
"There's no ``.php`` or ``.cgi`` required, and certainly none of that "
"``0,2097,1-1-1928,00`` nonsense."
msgstr ""

# b62b256f6a8841e2b1d178a5699bda43
#: ../../topics/http/urls.txt:12
msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""

# ef4300706a234a4ea3329544e3e235f9
#: ../../topics/http/urls.txt:20
msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"simple mapping between URL patterns (simple regular expressions) to Python "
"functions (your views)."
msgstr ""

# a2b708b9fa264006b1d90e72b0520f34
#: ../../topics/http/urls.txt:25
msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""

# 7954b37f7c36443489708ed75f481b5b
#: ../../topics/http/urls.txt:37
msgid "How Django processes a request"
msgstr ""

# 460af399b37649899db4b931332e34bb
#: ../../topics/http/urls.txt:39
msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""

# 6768189614a849c7b9e8c06c9b602357
#: ../../topics/http/urls.txt:42
msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has an attribute called ``urlconf`` (set by "
"middleware :ref:`request processing <request-middleware>`), its value will "
"be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

# 792141a483a44c0eb2d24df5a5b5c0db
#: ../../topics/http/urls.txt:48
msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a Python list, in the format returned by the function :func:"
"`django.conf.urls.patterns`."
msgstr ""

# d8b4f27307a447a88ceb206afe422410
#: ../../topics/http/urls.txt:52
msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL."
msgstr ""

# afd324915d294c18a0d7677a95686a23
#: ../../topics/http/urls.txt:55
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function (or a :doc:`class based view </topics/"
"class-based-views/index>`). The view gets passed an :class:`~django.http."
"HttpRequest` as its first argument and any values captured in the regex as "
"remaining arguments."
msgstr ""

# 0a01973405424c67b1986f534aac5a13
#: ../../topics/http/urls.txt:61
msgid ""
"If no regex matches, or if an exception is raised during any point in this "
"process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

# d071d644ca8c4eab8fd5a8a483fa0d03
#: ../../topics/http/urls.txt:68
msgid "Here's a sample URLconf::"
msgstr ""

# 72d042f6e64f45ef8e59229f738b28ae
#: ../../topics/http/urls.txt:81
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

# 9b2ae390a27d4af1a7be166d099b52df
#: ../../topics/http/urls.txt:83
msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``^articles``, not ``^/articles``."
msgstr ""

# b0b7a293212645c89b4afe419d8dba49
#: ../../topics/http/urls.txt:86
msgid ""
"The ``'r'`` in front of each regular expression string is optional but "
"recommended. It tells Python that a string is \"raw\" -- that nothing in the "
"string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

# 1c2afa9240074e92b10ad425d762f5a0
#: ../../topics/http/urls.txt:90
msgid "Example requests:"
msgstr ""

# fb75b0bf1d9f48f6a98d062484d646b9
#: ../../topics/http/urls.txt:92
msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list. "
"Django would call the function ``news.views.month_archive(request, '2005', "
"'03')``."
msgstr ""

# bb941e700779480a971963b22e36c579
#: ../../topics/http/urls.txt:96
msgid ""
"``/articles/2005/3/`` would not match any URL patterns, because the third "
"entry in the list requires two digits for the month."
msgstr ""

# 913311e958a64f0e937b153f88e3ecb7
#: ../../topics/http/urls.txt:99
msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this."
msgstr ""

# 45301cdbf2374d1888125d21b0eb9a7a
#: ../../topics/http/urls.txt:104
msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""

# bb06849ffb3c4cdda52c61a172e911aa
#: ../../topics/http/urls.txt:107
msgid ""
"``/articles/2003/03/03/`` would match the final pattern. Django would call "
"the function ``news.views.article_detail(request, '2003', '03', '03')``."
msgstr ""

# 6fd7f3c8a70c474988877f617cb4f2cf
#: ../../topics/http/urls.txt:113
msgid "Named groups"
msgstr ""

# 962e210f016640c6ba8959782dd8b179
#: ../../topics/http/urls.txt:115
msgid ""
"The above example used simple, *non-named* regular-expression groups (via "
"parenthesis) to capture bits of the URL and pass them as *positional* "
"arguments to a view. In more advanced usage, it's possible to use *named* "
"regular-expression groups to capture URL bits and pass them as *keyword* "
"arguments to a view."
msgstr ""

# b2849704217746f1bb0a79fc29ac6905
#: ../../topics/http/urls.txt:121
msgid ""
"In Python regular expressions, the syntax for named regular-expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and "
"``pattern`` is some pattern to match."
msgstr ""

# 9bcf5d2c2ab8442d9af176a84210465c
#: ../../topics/http/urls.txt:125
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

# 2aa747cf7f784bbfaa450fb66f6a63b6
#: ../../topics/http/urls.txt:134
msgid ""
"This accomplishes exactly the same thing as the previous example, with one "
"subtle difference: The captured values are passed to view functions as "
"keyword arguments rather than positional arguments. For example:"
msgstr ""

# 23ba675939e8441aafb96e6eeae82673
#: ../../topics/http/urls.txt:138
msgid ""
"A request to ``/articles/2005/03/`` would call the function ``news.views."
"month_archive(request, year='2005', month='03')``, instead of ``news.views."
"month_archive(request, '2005', '03')``."
msgstr ""

# 60c737a23f3f491dab9efc041f80155f
#: ../../topics/http/urls.txt:142
msgid ""
"A request to ``/articles/2003/03/03/`` would call the function ``news.views."
"article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

# e20b88fa36e4496cac3741ff411e21e7
#: ../../topics/http/urls.txt:145
msgid ""
"In practice, this means your URLconfs are slightly more explicit and less "
"prone to argument-order bugs -- and you can reorder the arguments in your "
"views' function definitions. Of course, these benefits come at the cost of "
"brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

# 11d7ce9a11e24dad8e7ce18301c94c56
#: ../../topics/http/urls.txt:151
msgid "The matching/grouping algorithm"
msgstr ""

# 240c8eed2c6e4156b6392ef32b9847f2
#: ../../topics/http/urls.txt:153
msgid ""
"Here's the algorithm the URLconf parser follows, with respect to named "
"groups vs. non-named groups in a regular expression:"
msgstr ""

# 172739b2c49d44eab81b9390ef77b2c6
#: ../../topics/http/urls.txt:156
msgid ""
"If there are any named arguments, it will use those, ignoring non-named "
"arguments."
msgstr ""

# f83f4582c515463e95e860178121d00d
#: ../../topics/http/urls.txt:159
msgid ""
"Otherwise, it will pass all non-named arguments as positional arguments."
msgstr ""

# feb012a8324b4f7994891e980f426097
#: ../../topics/http/urls.txt:161
msgid ""
"In both cases, any extra keyword arguments that have been given as per "
"`Passing extra options to view functions`_ (below) will also be passed to "
"the view."
msgstr ""

# 8baef1bef44d4788a1a2d56fbd19000e
#: ../../topics/http/urls.txt:165
msgid "What the URLconf searches against"
msgstr ""

# 374a511bbbab4359933c6c26a0b29dbf
#: ../../topics/http/urls.txt:167
msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""

# e7c966e2917c4d05a727df2e10c29ae5
#: ../../topics/http/urls.txt:170
msgid ""
"For example, in a request to ``http://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""

# 18f14aa3237a43dcbb4afb667755a1bd
#: ../../topics/http/urls.txt:173
msgid ""
"In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""

# 38435a58a88543c9b128daa161a18910
#: ../../topics/http/urls.txt:176
msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""

# 973f4e2ccdce478b8a240d3288eceaaf
#: ../../topics/http/urls.txt:181
msgid "Notes on capturing text in URLs"
msgstr ""

# d2ece5e35e0a4c9097a2f39805c7a2fc
#: ../../topics/http/urls.txt:183
msgid ""
"Each captured argument is sent to the view as a plain Python string, "
"regardless of what sort of match the regular expression makes. For example, "
"in this URLconf line::"
msgstr ""

# 974aee9c412b423184d84295e1c9de49
#: ../../topics/http/urls.txt:189
msgid ""
"...the ``year`` argument to ``news.views.year_archive()`` will be a string, "
"not an integer, even though the ``\\d{4}`` will only match integer strings."
msgstr ""

# 1af420e7e03f45ac9725434fe238c9fc
#: ../../topics/http/urls.txt:192
msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""

# eb1dcc0ebad34725a70881173c0692c9
#: ../../topics/http/urls.txt:205
msgid ""
"In the above example, both URL patterns point to the same view -- ``blog."
"views.page`` -- but the first pattern doesn't capture anything from the URL. "
"If the first pattern matches, the ``page()`` function will use its default "
"argument for ``num``, ``\"1\"``. If the second pattern matches, ``page()`` "
"will use whatever ``num`` value was captured by the regex."
msgstr ""

# 8281b22f13a444c3ba6b25f1cb9ea26d
#: ../../topics/http/urls.txt:212
msgid "Performance"
msgstr ""

# 795bddea0ac14b87802b437eff8661a7
#: ../../topics/http/urls.txt:214
msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's "
"accessed. This makes the system blazingly fast."
msgstr ""

# 17e82d4a001c41beaea2e22ee6bc3938
#: ../../topics/http/urls.txt:218
msgid "Syntax of the urlpatterns variable"
msgstr ""

# 0ae4b0f8709548a29edb9ac8cfbe8d7a
#: ../../topics/http/urls.txt:220
msgid ""
"``urlpatterns`` should be a Python list, in the format returned by the "
"function :func:`django.conf.urls.patterns`. Always use ``patterns()`` to "
"create the ``urlpatterns`` variable."
msgstr ""

# b57da727fbac449b96ec7b38285d3a37
#: ../../topics/http/urls.txt:225
msgid "Error handling"
msgstr ""

# ecfb517dd0ab4b56a65aa53bd2eb03b8
#: ../../topics/http/urls.txt:227
msgid ""
"When Django can't find a regex matching the requested URL, or when an "
"exception is raised, Django will invoke an error-handling view."
msgstr ""

# d50887098e0643d4a529f0048a3aaf6a
#: ../../topics/http/urls.txt:230
msgid ""
"The views to use for these cases are specified by three variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by assigning values to them."
msgstr ""

# 8c612f07b5e24ee79194c49cb1098641
#: ../../topics/http/urls.txt:234
msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr ""

# 62772102361848cd870ad604ac8e6cf7
#: ../../topics/http/urls.txt:237
msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr ""

# f2e9c445b30445f18429b031a800fc74
#: ../../topics/http/urls.txt:240
msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at hand."
msgstr ""

# 4ceea153ba9d4a62b490795db727a93b
#: ../../topics/http/urls.txt:243
msgid "The variables are:"
msgstr ""

# c9a54636c52a45218ad778603c5e8a37
#: ../../topics/http/urls.txt:245
msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr ""

# 1bda6de290974e57848791b8c6585ab1
#: ../../topics/http/urls.txt:246
msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr ""

# b78fffa6bc054373bfc295468fe89d10
#: ../../topics/http/urls.txt:247
msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr ""

# 4ba2e560cbd44047b785cddbc56dc996
#: ../../topics/http/urls.txt:255
msgid "The view prefix"
msgstr ""

# 3e934c8d603b4c25b771145a3698f08b
#: ../../topics/http/urls.txt:257
msgid ""
"You can specify a common prefix in your ``patterns()`` call, to cut down on "
"code duplication."
msgstr ""

# 40b644891f5242a7baefbe2a52abfac5
#: ../../topics/http/urls.txt:260
msgid ""
"Here's the example URLconf from the :doc:`Django overview </intro/"
"overview>`::"
msgstr ""

# 915e916083ee4ae9b7f53ffb746c161a
#: ../../topics/http/urls.txt:270
msgid ""
"In this example, each view has a common prefix -- ``'news.views'``. Instead "
"of typing that out for each entry in ``urlpatterns``, you can use the first "
"argument to the ``patterns()`` function to specify a prefix to apply to each "
"view function."
msgstr ""

# d6fa57112500400ab7430c4d3b476552
#: ../../topics/http/urls.txt:275
msgid "With this in mind, the above example can be written more concisely as::"
msgstr ""

# 7f141b4596f442e98d92b5303a670d0a
#: ../../topics/http/urls.txt:285
msgid ""
"Note that you don't put a trailing dot (``\".\"``) in the prefix. Django "
"puts that in automatically."
msgstr ""

# 3f2901ac3e7e41a3b13876668241a071
#: ../../topics/http/urls.txt:289
msgid "Multiple view prefixes"
msgstr ""

# b565b40d7f16460c9ee2f1f42f23378a
#: ../../topics/http/urls.txt:291
msgid ""
"In practice, you'll probably end up mixing and matching views to the point "
"where the views in your ``urlpatterns`` won't have a common prefix. However, "
"you can still take advantage of the view prefix shortcut to remove "
"duplication. Just add multiple ``patterns()`` objects together, like this:"
msgstr ""

# 41976ab046654deb99f413c7592dd805
#: ../../topics/http/urls.txt:296
msgid "Old::"
msgstr ""

# 95bc01821f374d579ebcc7c99ab3ce5a
#: ../../topics/http/urls.txt:306
msgid "New::"
msgstr ""

# 990425d0e63b4d2cbcb20d207fc1c876
#: ../../topics/http/urls.txt:322
msgid "Including other URLconfs"
msgstr ""

# 96c85ba3d24b4867beca5941eb262a1a
#: ../../topics/http/urls.txt:324
msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""

# b50b114c0a13400080533e8cf96733bd
#: ../../topics/http/urls.txt:327
msgid ""
"For example, here's an excerpt of the URLconf for the `Django Web site`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""

# ed4d2126ce3f41eaa3c5efecd5927b0c
#: ../../topics/http/urls.txt:341
msgid ""
"Note that the regular expressions in this example don't have a ``$`` (end-of-"
"string match character) but do include a trailing slash. Whenever Django "
"encounters ``include()`` (:func:`django.conf.urls.include()`), it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""

# e24945bc89cb45e08fddf3794d14d32a
#: ../../topics/http/urls.txt:347
msgid ""
"Another possibility is to include additional URL patterns not by specifying "
"the URLconf Python module defining them as the ``include()`` argument but by "
"using directly the pattern list as returned by :func:`~django.conf.urls."
"patterns` instead. For example, consider this URLconf::"
msgstr ""

# 6f661938b165441b9e9007a9bb103f54
#: ../../topics/http/urls.txt:365
msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit.views.report()`` Django view."
msgstr ""

# 12ca9b0491084d6ebfb87f519afdff3a
#: ../../topics/http/urls.txt:371
msgid "Captured parameters"
msgstr ""

# cea4c3e478be4ef29136f4bb8bd52b0f
#: ../../topics/http/urls.txt:373
msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""

# 3b187e02671c44aaa7bee20931b31153
#: ../../topics/http/urls.txt:387
msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""

# b2f6542a6d3649b1938c56876ef30ab5
#: ../../topics/http/urls.txt:393
msgid "Passing extra options to view functions"
msgstr ""

# 0899a2600bf5462381f83976537e4fb0
#: ../../topics/http/urls.txt:395
msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

# f44fdc6262f241b7952b85be896e801d
#: ../../topics/http/urls.txt:398
msgid ""
"Any URLconf tuple can have an optional third element, which should be a "
"dictionary of extra keyword arguments to pass to the view function."
msgstr ""

# 3b840630679b446b958c6a997c8a05dc
#: ../../topics/http/urls.txt:407
msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call ``blog."
"views.year_archive(year='2005', foo='bar')``."
msgstr ""

# 18fe9ef6eeaf4976b8399125165062f7
#: ../../topics/http/urls.txt:410
msgid ""
"This technique is used in the :doc:`syndication framework </ref/contrib/"
"syndication>` to pass metadata and options to views."
msgstr ""

# 379c9140be464988bdfd2f05e9e4a61a
#: ../../topics/http/urls.txt:416
msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

# 689f9fbd5ff44593a6ca663ed464baa4
#: ../../topics/http/urls.txt:422
msgid "Passing extra options to ``include()``"
msgstr ""

# 119209c8cc7646ba9a17ed73d6fb9c4a
#: ../../topics/http/urls.txt:424
msgid ""
"Similarly, you can pass extra options to :func:`~django.conf.urls.include`. "
"When you pass extra options to ``include()``, *each* line in the included "
"URLconf will be passed the extra options."
msgstr ""

# e62c9e3222f3454680cb1b8be01a1949
#: ../../topics/http/urls.txt:428
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

# 0d6b1161fb46456a9ec912bece26af01
#: ../../topics/http/urls.txt:430
msgid "Set one::"
msgstr ""

# 93a7a278641b43ed8c244f518725fc1c
#: ../../topics/http/urls.txt:443
msgid "Set two::"
msgstr ""

# d44288447a5d4c97bfc6ec35a255e404
#: ../../topics/http/urls.txt:456
msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

# 058dee20912247b38667674482032fc7
#: ../../topics/http/urls.txt:462
msgid "Passing callable objects instead of strings"
msgstr ""

# 60d0c1e94e7a4b4ea60df94f5c535391
#: ../../topics/http/urls.txt:464
msgid ""
"Some developers find it more natural to pass the actual Python function "
"object rather than a string containing the path to its module. This "
"alternative is supported -- you can pass any callable object as the view."
msgstr ""

# 20031ecfb57c408d864679a460947f01
#: ../../topics/http/urls.txt:468
msgid "For example, given this URLconf in \"string\" notation::"
msgstr ""

# 559523c8dca348d09926f6795272ba5c
#: ../../topics/http/urls.txt:476
msgid ""
"You can accomplish the same thing by passing objects rather than strings. "
"Just be sure to import the objects::"
msgstr ""

# 427db70928a04f1880026b5d9d19df27
#: ../../topics/http/urls.txt:487
msgid ""
"The following example is functionally identical. It's just a bit more "
"compact because it imports the module that contains the views, rather than "
"importing each view individually::"
msgstr ""

# fe9c0ad67a7f4d9ca79be65042c778a6
#: ../../topics/http/urls.txt:499
msgid "The style you use is up to you."
msgstr ""

# 9e66758f220e4e0a94c2e86a45052614
#: ../../topics/http/urls.txt:501
msgid ""
"Note that if you use this technique -- passing objects rather than strings "
"-- the view prefix (as explained in \"The view prefix\" above) will have no "
"effect."
msgstr ""

# 8e08d89988db497f9626112fce09d523
#: ../../topics/http/urls.txt:504
msgid ""
"Note that :doc:`class based views</topics/class-based-views/index>` must be "
"imported::"
msgstr ""

# a95451ad37a3410f908631dd975bc3d4
#: ../../topics/http/urls.txt:514
msgid "Reverse resolution of URLs"
msgstr ""

# 16d39aa9b8ec498a89c7f79f1411127a
#: ../../topics/http/urls.txt:516
msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""

# de89f82ed0614ca68b1914e1177fe61a
#: ../../topics/http/urls.txt:521
msgid ""
"It is strongly desirable not having to hard-code these URLs (a laborious, "
"non-scalable and error-prone strategy) or having to devise ad-hoc mechanisms "
"for generating URLs that are parallel to the design described by the URLconf "
"and as such in danger of producing stale URLs at some point."
msgstr ""

# 305af01bae2b48558207bd620853a263
#: ../../topics/http/urls.txt:526
msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go all over the "
"project source code to search and replace outdated URLs."
msgstr ""

# 7e3ff7b3e5174e3ba7dcad6e95fafcb6
#: ../../topics/http/urls.txt:530
msgid ""
"The piece of information we have available as a starting point to get a URL "
"is an identification (e.g. the name) of the view in charge of handling it, "
"other pieces of information that necessarily must participate in the lookup "
"of the right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""

# 2afc1100474e4599a58eca0e68373c11
#: ../../topics/http/urls.txt:535
msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""

# 8b4a37790ee647bdbbabf32fd956669f
#: ../../topics/http/urls.txt:539
msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django "
"view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""

# af8bcbfc0faf44b7997cc4ab4dac27b9
#: ../../topics/http/urls.txt:543
msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

# 4215633701b34cac81e37ebd28394fba
#: ../../topics/http/urls.txt:546
msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

# ff1dad45862343128dbe34f260065305
#: ../../topics/http/urls.txt:550
msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""

# 2eb7045366d642e09c92c292df64e9b6
#: ../../topics/http/urls.txt:553
msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

# 8672e94163574c4fb46119acecb797e9
#: ../../topics/http/urls.txt:555
msgid ""
"In Python code: Using the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

# 0bd7da40a9764934a8c01bcb06826f70
#: ../../topics/http/urls.txt:558
msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

# 0f510500689349d4a3393b7109c81a3c
#: ../../topics/http/urls.txt:564
msgid "Consider again this URLconf entry::"
msgstr ""

# 02b1e871bd9340d99af04b94fefe1075
#: ../../topics/http/urls.txt:574
msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/nnnn/``."
msgstr ""

# cb1e18afe41f47da97a2621a44a81253
#: ../../topics/http/urls.txt:577
msgid "You can obtain these in template code by using:"
msgstr ""

# a18196f3cbc347679ae851514ee1f93f
#: ../../topics/http/urls.txt:589
msgid "Or in Python code::"
msgstr ""

# 7cfad6abad4143398fb6d8e1f494c09f
#: ../../topics/http/urls.txt:600
msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need "
"to change the entry in the URLconf."
msgstr ""

# 14571f5a2efc4160b8d69b28b649ccee
#: ../../topics/http/urls.txt:604
msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identificator for it when it comes the time of "
"reversing URLs. Read the next section to know about the solution Django "
"provides for this."
msgstr ""

# b1bce73e59b74e6bb1131c9abb982d35
#: ../../topics/http/urls.txt:612
msgid "Naming URL patterns"
msgstr ""

# 58a6a57a5c5d4d4cac5758c450bc7e5f
#: ../../topics/http/urls.txt:614
msgid ""
"It's fairly common to use the same view function in multiple URL patterns in "
"your URLconf. For example, these two URL patterns both point to the "
"``archive`` view::"
msgstr ""

# fa618f0f29e94d7fa455a52a2087509e
#: ../../topics/http/urls.txt:623
msgid ""
"This is completely valid, but it leads to problems when you try to do "
"reverse URL matching (through the :func:`~django.core.urlresolvers.reverse` "
"function or the :ttag:`url` template tag). Continuing this example, if you "
"wanted to retrieve the URL for the ``archive`` view, Django's reverse URL "
"matcher would get confused, because *two* URL patterns point at that view."
msgstr ""

# 3fc799e83b044a40970a51ac60a1542c
#: ../../topics/http/urls.txt:629
msgid ""
"To solve this problem, Django supports **named URL patterns**. That is, you "
"can give a name to a URL pattern in order to distinguish it from other "
"patterns using the same view and parameters. Then, you can use this name in "
"reverse URL matching."
msgstr ""

# 8133780023184ff9b59641a2a896787d
#: ../../topics/http/urls.txt:634
msgid "Here's the above example, rewritten to use named URL patterns::"
msgstr ""

# 0bc4f0ca226849af98aa2e124e4fd66e
#: ../../topics/http/urls.txt:641
msgid ""
"With these names in place (``full-archive`` and ``arch-summary``), you can "
"target each pattern individually by using its name:"
msgstr ""

# e19af53f6ae542cfb1ab763d662aa18a
#: ../../topics/http/urls.txt:649
msgid ""
"Even though both URL patterns refer to the ``archive`` view here, using the "
"``name`` parameter to ``url()`` allows you to tell them apart in templates."
msgstr ""

# 6b4589c76173457d94b9e977b1215026
#: ../../topics/http/urls.txt:652
msgid ""
"The string used for the URL name can contain any characters you like. You "
"are not restricted to valid Python names."
msgstr ""

# d45d4bd4edf545bf9ccfc5c43de05748
#: ../../topics/http/urls.txt:657
msgid ""
"When you name your URL patterns, make sure you use names that are unlikely "
"to clash with any other application's choice of names. If you call your URL "
"pattern ``comment``, and another application does the same thing, there's no "
"guarantee which URL will be inserted into your template when you use this "
"name."
msgstr ""

# 908549c66d44462bac8ed7bb99cb1e39
#: ../../topics/http/urls.txt:663
msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name, will decrease the chances of collision. We recommend something like "
"``myapp-comment`` instead of ``comment``."
msgstr ""

# a7d9919536ea49ca9b1e4334f7791953
#: ../../topics/http/urls.txt:670
msgid "URL namespaces"
msgstr ""

# e1890f930898488a8d38073f60b72dbc
#: ../../topics/http/urls.txt:673
msgid "Introduction"
msgstr "도입"

# e1b7cb7a0cbc4a04acc98fdec35b72fc
#: ../../topics/http/urls.txt:675
msgid ""
"When you need to deploy multiple instances of a single application, it can "
"be helpful to be able to differentiate between instances. This is especially "
"important when using :ref:`named URL patterns <naming-url-patterns>`, since "
"multiple instances of a single application will share named URLs. Namespaces "
"provide a way to tell these named URLs apart."
msgstr ""

# f27736b17c1e40d0bcffbfa103519129
#: ../../topics/http/urls.txt:681
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

# e209db8b03794dd884044f8b9cdd0e05
#: ../../topics/http/urls.txt:686
msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""

# 02ee8c3349054ef6b50411da37c88d86
#: ../../topics/http/urls.txt:692
msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django Admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""

# b75e0be3ab694e76bafdbc9ef1e3569d
#: ../../topics/http/urls.txt:698
msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using ``'admin:"
"index'``. This indicates a namespace of ``'admin'``, and a named URL of "
"``'index'``."
msgstr ""

# 5106dacf53d04c9c81ee722a6d1e90ab
#: ../../topics/http/urls.txt:702
msgid ""
"Namespaces can also be nested. The named URL ``'foo:bar:whiz'`` would look "
"for a pattern named ``'whiz'`` in the namespace ``'bar'`` that is itself "
"defined within the top-level namespace ``'foo'``."
msgstr ""

# a6e468340a8d47a180208e4296210f4b
#: ../../topics/http/urls.txt:709
msgid "Reversing namespaced URLs"
msgstr ""

# c6e28d09873b4e98aed43101ebec07b7
#: ../../topics/http/urls.txt:711
msgid ""
"When given a namespaced URL (e.g. ``'myapp:index'``) to resolve, Django "
"splits the fully qualified name into parts, and then tries the following "
"lookup:"
msgstr ""

# ad0f4aa492c74f0dbad9f2c0c4bb78ee
#: ../../topics/http/urls.txt:714
msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'myapp'``). This will yield a list of instances of that "
"application."
msgstr ""

# 2e863f66b0e640beaa5ece6c51ee147e
#: ../../topics/http/urls.txt:718
msgid ""
"If there is a *current* application defined, Django finds and returns the "
"URL resolver for that instance. The *current* application can be specified "
"as an attribute on the template context - applications that expect to have "
"multiple deployments should set the ``current_app`` attribute on any "
"``Context`` or ``RequestContext`` that is used to render a template."
msgstr ""

# 150a7fe893934223ba909a94e0165e8c
#: ../../topics/http/urls.txt:725
msgid ""
"The current application can also be specified manually as an argument to "
"the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

# 72f8250c2466441c88a28535a6ae1312
#: ../../topics/http/urls.txt:728
msgid ""
"If there is no current application. Django looks for a default application "
"instance. The default application instance is the instance that has an :term:"
"`instance namespace` matching the :term:`application namespace` (in this "
"example, an instance of the ``myapp`` called ``'myapp'``)."
msgstr ""

# 4a835effc9d94f5d83df58a03ad264ca
#: ../../topics/http/urls.txt:734
msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

# 8d25deb1092a4eca94e3c597b08db2ba
#: ../../topics/http/urls.txt:737
msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an :term:"
"`instance namespace`."
msgstr ""

# 1cc744fb3c924dc5b2c01af748a395da
#: ../../topics/http/urls.txt:741
msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

# 74e40c50912349d7a9fa8dc32b0280ef
#: ../../topics/http/urls.txt:748
msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of ``myapp``: one called ``'foo'``, and one called ``'bar'``. "
"``myapp`` has a main index page with a URL named ``'index'``. Using this "
"setup, the following lookups are possible:"
msgstr ""

# a72d6f13922241aba01cdf79a3486f52
# 13a5b613e7994c729d21122caa6bde93
#: ../../topics/http/urls.txt:753 ../../topics/http/urls.txt:770
msgid ""
"If one of the instances is current - say, if we were rendering a utility "
"page in the instance ``'bar'`` - ``'myapp:index'`` will resolve to the index "
"page of the instance ``'bar'``."
msgstr ""

# c2b1a386b3b042c5b5d317f77bf4128c
#: ../../topics/http/urls.txt:757
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'myapp:index'`` will resolve to the last registered "
"instance of ``myapp``. Since there is no default instance, the last instance "
"of ``myapp`` that is registered will be used. This could be ``'foo'`` or "
"``'bar'``, depending on the order they are introduced into the urlpatterns "
"of the project."
msgstr ""

# 8380796aa1ba4c53a7528128cfa4d4ba
#: ../../topics/http/urls.txt:764
msgid ""
"``'foo:index'`` will always resolve to the index page of the instance "
"``'foo'``."
msgstr ""

# 782e58d49ab44a20a8098323f6753b1b
#: ../../topics/http/urls.txt:767
msgid ""
"If there was also a default instance - i.e., an instance named ``'myapp'`` - "
"the following would happen:"
msgstr ""

# e7d266cd174149949674c2c3a45ea287
#: ../../topics/http/urls.txt:774
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'myapp:index'`` will resolve to the index page of the "
"default instance."
msgstr ""

# c8da2b7b9cd74f31aaf56e0d928ba253
#: ../../topics/http/urls.txt:778
msgid ""
"``'foo:index'`` will again resolve to the index page of the instance "
"``'foo'``."
msgstr ""

# 71b1360acb064add8c8094403320af1f
#: ../../topics/http/urls.txt:784
msgid "URL namespaces and included URLconfs"
msgstr ""

# 7e8ada35b03047f6853cbd53b6156647
#: ../../topics/http/urls.txt:786
msgid "URL namespaces of included URLconfs can be specified in two ways."
msgstr ""

# 3a85dc2c78ce437a899cf1d320c51da2
#: ../../topics/http/urls.txt:788
msgid ""
"Firstly, you can provide the :term:`application <application namespace>` "
"and :term:`instance <instance namespace>` namespaces as arguments to :func:"
"`django.conf.urls.include()` when you construct your URL patterns. For "
"example,::"
msgstr ""

# 0b0f8dd60e3c4e33a40d21eeb5a168d8
#: ../../topics/http/urls.txt:795
msgid ""
"This will include the URLs defined in ``apps.help.urls`` into the :term:"
"`application namespace` ``'bar'``, with the :term:`instance namespace` "
"``'foo'``."
msgstr ""

# 70394c9b59fa4194aadaded5cb1f1f9b
#: ../../topics/http/urls.txt:799
msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` an object as returned by :func:`~django.conf.urls."
"patterns`, the URLs contained in that object will be added to the global "
"namespace. However, you can also ``include()`` a 3-tuple containing::"
msgstr ""

# 30178c8ccfa64b949c6848cda2f72442
#: ../../topics/http/urls.txt:815
msgid ""
"This will include the nominated URL patterns into the given application and "
"instance namespace."
msgstr ""

# 31edda52ec004de68970b2e72f535e1a
#: ../../topics/http/urls.txt:818
msgid ""
"For example, the Django Admin is deployed as instances of :class:`~django."
"contrib.admin.AdminSite`.  ``AdminSite`` objects have a ``urls`` attribute: "
"A 3-tuple that contains all the patterns in the corresponding admin site, "
"plus the application namespace ``'admin'``, and the name of the admin "
"instance. It is this ``urls`` attribute that you ``include()`` into your "
"projects ``urlpatterns`` when you deploy an Admin instance."
msgstr ""

# ea8070c096ee4810bfc0150273a061f1
#: ../../topics/http/views.txt:3
msgid "Writing views"
msgstr ""

# da67db60d6b8471da991d36736c32e5e
#: ../../topics/http/views.txt:5
msgid ""
"A view function, or *view* for short, is simply a Python function that takes "
"a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""

# dda29187674c43f8969a797a518cfb98
#: ../../topics/http/views.txt:16
msgid "A simple view"
msgstr ""

# 16bd3d27fdb44355972a12ae523bc360
#: ../../topics/http/views.txt:18
msgid ""
"Here's a view that returns the current date and time, as an HTML document:"
msgstr ""

# 50d727577a624f2ea68d0da3f78cbbc2
#: ../../topics/http/views.txt:30
msgid "Let's step through this code one line at a time:"
msgstr ""

# 2bdd20ab437442598bacaf5c50190e1b
#: ../../topics/http/views.txt:32
msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""

# eb7ba2c9dac64a83a4373dc444ba0008
#: ../../topics/http/views.txt:35
msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

# 3da866e137e34421bd2b1b5d16750bc2
#: ../../topics/http/views.txt:39
msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

# d2ee810d5950490e821455675bcdb69f
#: ../../topics/http/views.txt:44
msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""

# 4aa9f1dd31d74e408551f9b267875b30
#: ../../topics/http/views.txt:51
msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""

# ce25e83e6f324e7ea7945ad532dc980c
#: ../../topics/http/views.txt:56
msgid "Mapping URLs to views"
msgstr ""

# 98f30da5a4014f6080d36c5e9e94865c
#: ../../topics/http/views.txt:58
msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

# aa42321677fc445e811f479756161cb6
#: ../../topics/http/views.txt:63
msgid "Returning errors"
msgstr ""

# 9ed362524bf440b780be8a3ec19cb6d0
#: ../../topics/http/views.txt:65
msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of :class:"
"`~django.http.HttpResponse` for a number of common HTTP status codes other "
"than 200 (which means *\"OK\"*). You can find the full list of available "
"subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` "
"documentation.  Just return an instance of one of those subclasses instead "
"of a normal :class:`~django.http.HttpResponse` in order to signify an error. "
"For example::"
msgstr ""
"Returning HTTP error codes in Django is easy. There are subclasses of :class:"
"`~django.http.HttpResponse` for a number of common HTTP status codes other "
"than 200 (which means *\"OK\"*). You can find the full list of available "
"subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` "
"documentation.  Just return an instance of one of those subclasses instead "
"of a normal :class:`~django.http.HttpResponse` in order to signify an error. "
"예를 들어 ::"

# eca27b0c43214c38856d92a3a48d6bd6
#: ../../topics/http/views.txt:80
msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. 예를 들어 ::"

# c3a6ecaf4c5447479d7ce3543297749b
#: ../../topics/http/views.txt:92
msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""

# 196785c72484475a80e69578aa16ca53
#: ../../topics/http/views.txt:96
msgid "The Http404 exception"
msgstr ""

# 1e6fd7390d7542b3bd30da4a0a5f1367
#: ../../topics/http/views.txt:100
msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""

# 1775bf1010724baa9b40411b227fe4ba
#: ../../topics/http/views.txt:105
msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""

# b798ca86d76741588869d212468d89af
#: ../../topics/http/views.txt:110
msgid "Example usage::"
msgstr ""

# 3b9244b255264dbf9e6d17a15c7c04c4
#: ../../topics/http/views.txt:121
msgid ""
"In order to use the ``Http404`` exception to its fullest, you should create "
"a template that is displayed when a 404 error is raised. This template "
"should be called ``404.html`` and located in the top level of your template "
"tree."
msgstr ""

# b8e39947b53c487d87391b83785d97c4
#: ../../topics/http/views.txt:128
msgid "Customizing error views"
msgstr ""

# d02b3bc6d3a24e4890437a1e3ee66dcd
#: ../../topics/http/views.txt:133
msgid "The 404 (page not found) view"
msgstr ""

# 2d7de3d6f9df472ebca6daed4a278a26
#: ../../topics/http/views.txt:135
msgid ""
"When you raise an ``Http404`` exception, Django loads a special view devoted "
"to handling 404 errors. By default, it's the view ``django.views.defaults."
"page_not_found``, which either produces a very simple \"Not Found\" message "
"or loads and renders the template ``404.html`` if you created it in your "
"root template directory."
msgstr ""

# 2093ba86d3db4de08a063ea60f4c25e9
#: ../../topics/http/views.txt:141
msgid ""
"The default 404 view will pass one variable to the template: "
"``request_path``, which is the URL that resulted in the error."
msgstr ""

# 211758d6560d4b86a5b03cb065dec605
#: ../../topics/http/views.txt:144
msgid ""
"The ``page_not_found`` view should suffice for 99% of Web applications, but "
"if you want to override it, you can specify ``handler404`` in your URLconf, "
"like so::"
msgstr ""

# d667b9f16b4b42eb86b5ab28c78a40fb
#: ../../topics/http/views.txt:150
msgid ""
"Behind the scenes, Django determines the 404 view by looking for "
"``handler404`` in your root URLconf, and falling back to ``django.views."
"defaults.page_not_found`` if you did not define one."
msgstr ""

# f37423a4a38a4dbea8b23c03d4c3fb24
#: ../../topics/http/views.txt:154
msgid "Three things to note about 404 views:"
msgstr ""

# 6534bc9649704d2b98dcd40e796a0af6
#: ../../topics/http/views.txt:156
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# 5fc04b940f5546a4bd324708abf9793b
#: ../../topics/http/views.txt:159
msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
msgstr ""

# 0dc43337a450457f88fcf35c2e16da60
#: ../../topics/http/views.txt:163
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""

# 0a3a0a9c783d43d89c10ae4894442030
#: ../../topics/http/views.txt:170
msgid "The 500 (server error) view"
msgstr ""

# 38f99f190e284758993d523583c763a2
#: ../../topics/http/views.txt:172
msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which either "
"produces a very simple \"Server Error\" message or loads and renders the "
"template ``500.html`` if you created it in your root template directory."
msgstr ""

# be0801bc0b954c43b6610c30784adcbf
#: ../../topics/http/views.txt:178
msgid ""
"The default 500 view passes no variables to the ``500.html`` template and is "
"rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""

# 71b93c23c0e74938b1a5677b44cfc035
#: ../../topics/http/views.txt:181
msgid ""
"This ``server_error`` view should suffice for 99% of Web applications, but "
"if you want to override the view, you can specify ``handler500`` in your "
"URLconf, like so::"
msgstr ""

# 4b28c0eabdc840b3bb507003f2a5f54d
#: ../../topics/http/views.txt:187
msgid ""
"Behind the scenes, Django determines the 500 view by looking for "
"``handler500`` in your root URLconf, and falling back to ``django.views."
"defaults.server_error`` if you did not define one."
msgstr ""

# 12851973daed43e2b48232b36bf16b1b
#: ../../topics/http/views.txt:191
msgid "One thing to note about 500 views:"
msgstr ""

# 26179b9ee2d6499087fa1b5fabd2d756
#: ../../topics/http/views.txt:193
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""

# a1efa1585abd445e9651e8e8e63d9598
#: ../../topics/http/views.txt:200
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

# 435df66a5e6140f39b66e2a700bab3c3
#: ../../topics/http/views.txt:204
msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

# f5715b84244442d0b578e059bb571e6f
#: ../../topics/http/views.txt:208
msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

# 66bd9f82eee0423c9e94ff0f45a6686a
#: ../../topics/http/views.txt:212
msgid ""
"``django.views.defaults.permission_denied`` is triggered by a :exc:`~django."
"core.exceptions.PermissionDenied` exception. To deny access in a view you "
"can use code like this::"
msgstr ""

# 60bf235bee2343b49327f1c1b0abe804
#: ../../topics/http/views.txt:223
msgid ""
"It is possible to override ``django.views.defaults.permission_denied`` in "
"the same way you can for the 404 and 500 views by specifying a "
"``handler403`` in your URLconf::"
msgstr ""

# da266226e2ee43ce99bc5cae9d3a1902
#: ../../topics/i18n/formatting.txt:5
msgid "Format localization"
msgstr ""

# 39dca71a3fca466f8feef871e9bf1fdd
#: ../../topics/i18n/formatting.txt:10
msgid ""
"Django's formatting system is capable to display dates, times and numbers in "
"templates using the format specified for the current :term:`locale <locale "
"name>`. It also handles localized input in forms."
msgstr ""

# d97cbe8d2d0847bc9f73047b70109c40
#: ../../topics/i18n/formatting.txt:13
msgid ""
"When it's enabled, two users accessing the same content may see dates, times "
"and numbers formatted in different ways, depending on the formats for their "
"current locale."
msgstr ""

# 488b5d3a5b74423a86e377cd6e086db0
#: ../../topics/i18n/formatting.txt:17
msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

# fdcec581647b4fcfa1823646f2a78e98
#: ../../topics/i18n/formatting.txt:22
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` "
"for convenience.  Note, however, that to enable number formatting with "
"thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR "
"= True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you "
"could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

# ddc0cfc7110e411f813292531d158dc1
#: ../../topics/i18n/formatting.txt:31
msgid ""
"There is also an independent but related :setting:`USE_I18N` setting that "
"controls if Django should activate translation. See :doc:`/topics/i18n/"
"translation` for more details."
msgstr ""

# 861f1bc93dce42e6ad877fcf7ee1519c
#: ../../topics/i18n/formatting.txt:36
msgid "Locale aware input in forms"
msgstr ""

# 295621c0b77c47adbc7f757e9e80beef
#: ../../topics/i18n/formatting.txt:38
msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for "
"different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""

# fc3fb0b3aa9547868b01c4f648a0957e
#: ../../topics/i18n/formatting.txt:43
msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the ``"
"%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

# 082003f0a2244186bec76e6d76e6010c
#: ../../topics/i18n/formatting.txt:49
msgid ""
"To enable a form field to localize input and output data simply use its "
"``localize`` argument::"
msgstr ""

# a8ab77b0afe34f87b9fecfa5d5aadc67
#: ../../topics/i18n/formatting.txt:59
msgid "Controlling localization in templates"
msgstr ""

# 6b2bd48596be436586de6a23303bceb1
#: ../../topics/i18n/formatting.txt:61
msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""

# a0bbe8e3b71e43ccb793d9435b4be836
#: ../../topics/i18n/formatting.txt:65
msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting Javascript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want "
"to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""

# d7d161a62bcf408d957698e632bd7f62
#: ../../topics/i18n/formatting.txt:71
msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""

# 15fcb8f1b7bc4aa3a8f7b83ff1c9bd7c
# 5ae3b3a80eb3478798353c6c9790635e
#: ../../topics/i18n/formatting.txt:76 ../../topics/i18n/timezones.txt:259
msgid "Template tags"
msgstr ""

# 1c575bc35c4d4bd3bb214413868e3e7f
# 12592018bce04f90aa109f265084e499
#: ../../topics/i18n/formatting.txt:81 ../../topics/i18n/formatting.txt:115
msgid "localize"
msgstr ""

# 5251e17e9ad249fdb5ad5275e45efc82
#: ../../topics/i18n/formatting.txt:83
msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""

# b0cb0cb9122446d69dfbd298dff80031
#: ../../topics/i18n/formatting.txt:86
msgid ""
"This tag allows a more fine grained control of localization than :setting:"
"`USE_L10N`."
msgstr ""

# 638b1a68aafb4f38a521781305ef1084
#: ../../topics/i18n/formatting.txt:89
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

# e8338d5ad68d4b19baecf76df25af9c2
#: ../../topics/i18n/formatting.txt:103
msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}"
"`` block."
msgstr ""

# 74bda1e3af864526a9769e614744e901
#: ../../topics/i18n/formatting.txt:106
msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""

# eeeeed225e7340d7a47267bdab1e07ba
# 42f4033b45f1498caba5f029d0938b3b
#: ../../topics/i18n/formatting.txt:110 ../../topics/i18n/timezones.txt:326
msgid "Template filters"
msgstr ""

# 5a7540b1f0f14f72a902fea7738bbbbc
#: ../../topics/i18n/formatting.txt:117
msgid "Forces localization of a single value."
msgstr ""

# 312b04a4dc394be0bc93457f644b2336
#: ../../topics/i18n/formatting.txt:125
msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the :ttag:"
"`localize` template tag."
msgstr ""

# 31eddccd99884909ad699aef488f05d5
#: ../../topics/i18n/formatting.txt:133
msgid "unlocalize"
msgstr ""

# 76eb11a32d50425b9b75a38fae9e4e5d
#: ../../topics/i18n/formatting.txt:135
msgid "Forces a single value to be printed without localization."
msgstr ""

# ab8adbf9fe4747499e2fcec3728e967e
#: ../../topics/i18n/formatting.txt:143
msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control "
"localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""

# 8479c9a141a549ca9c9177ecde296571
#: ../../topics/i18n/formatting.txt:150
msgid "Creating custom format files"
msgstr ""

# 239ed4d68e3742dba6952871eba41048
#: ../../topics/i18n/formatting.txt:152
msgid ""
"Django provides format definitions for many locales, but sometimes you might "
"want to create your own, because a format files doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

# 9d27909bdd334265855fe3a8c4f97bc1
#: ../../topics/i18n/formatting.txt:156
msgid ""
"To use custom formats, specify the path where you'll place format files "
"first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to "
"the package where format files will exist, for instance::"
msgstr ""

# 01b6d02b79324cd98a8127c1d884bd34
#: ../../topics/i18n/formatting.txt:162
msgid ""
"Files are not placed directly in this directory, but in a directory named as "
"the locale, and must be named ``formats.py``."
msgstr ""

# c44ec829b77b48d194b6c56b933dd296
#: ../../topics/i18n/formatting.txt:165
msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""

# 4771cbdc3d604057855add2e2470bfe9
#: ../../topics/i18n/formatting.txt:174
msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""
"where :file:`formats.py` contains custom format definitions. 예를 들어 ::"

# 69fa7da2cc66461b8b7972711153f861
#: ../../topics/i18n/formatting.txt:178
msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

# a8e79401f44f4788a52466ea3ba0841a
#: ../../topics/i18n/formatting.txt:182
msgid "Limitations of the provided locale formats"
msgstr ""

# 83cd01e5ea2149e3941482225ed84687
#: ../../topics/i18n/formatting.txt:184
msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

# a4c44fd07e074f5d87e8abe8a1c8cb10
#: ../../topics/i18n/formatting.txt:188
msgid "Switzerland (German)"
msgstr ""

# f04e1ab732d54087afee39d076fc770b
#: ../../topics/i18n/formatting.txt:190
msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

# e1cc9155e0b34757bf97f6ac098624ae
#: ../../topics/i18n/index.txt:3
msgid "Internationalization and localization"
msgstr ""

# c1428af3702a40caa23973837f1decdb
#: ../../topics/i18n/index.txt:16
msgid ""
"The goal of internationalization and localization is to allow a single Web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

# 78187693d384401c99bc9e2ae1766d21
#: ../../topics/i18n/index.txt:20
msgid ""
"Django has full support for :doc:`translation of text </topics/i18n/"
"translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/"
"formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

# 9e89565aa15246e4865f991e516c5581
#: ../../topics/i18n/index.txt:24
msgid "Essentially, Django does two things:"
msgstr ""

# ab4c14a15a4a48938d7274712051390a
#: ../../topics/i18n/index.txt:26
msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

# dd18f23b63e84bd393b1e73ab250762a
#: ../../topics/i18n/index.txt:28
msgid ""
"It uses these hooks to localize Web apps for particular users according to "
"their preferences."
msgstr ""

# 164368aef0404103bb76441afd99b4a0
#: ../../topics/i18n/index.txt:31
msgid ""
"Obviously, translation depends on the target language, and formatting "
"usually depends on the target country. These informations are provided by "
"browsers in the ``Accept-Language`` header. However, the time zone isn't "
"readily available."
msgstr ""

# 5c02d6c5d85f4392ac095724f517c383
#: ../../topics/i18n/index.txt:36
msgid "Definitions"
msgstr ""

# f32ddc72521840d79db5abcb4179359a
#: ../../topics/i18n/index.txt:38
msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

# 203fb33d556a4da2af12be9a7690303e
#: ../../topics/i18n/index.txt:44
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

# 945968b0ce074a9fa1124fb38d780e45
#: ../../topics/i18n/index.txt:47
msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

# 2fb9569fcf7440d08175648b1200e0fa
#: ../../topics/i18n/index.txt:49
msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

# 1512395f5dc14a3da140f893f1460cda
#: ../../topics/i18n/index.txt:57
msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and :"
"setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

# bf2bbd78eb4a4ff7a369c0c7ea4175e7
#: ../../topics/i18n/index.txt:62
msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""

# b1d79b57ae7343dcb6972a336642babd
#: ../../topics/i18n/index.txt:67
msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples: "
"``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always is lower "
"case and the country part in upper case. The separator is an underscore."
msgstr ""

# cebe2cf0cb004884b76c7b1bbf09252a
#: ../../topics/i18n/index.txt:74
msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Both the language and the "
"country parts are in lower case. The separator is a dash."
msgstr ""

# a89bd17b7eb24d68b7adfec4b0322f88
#: ../../topics/i18n/index.txt:80
msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

# e8ced0d5520e4aa5b63aae70a50c7c1d
#: ../../topics/i18n/index.txt:86
msgid "A literal that can be translated."
msgstr ""

# 33d0d1f4709b43559c9caa612fb7eae0
#: ../../topics/i18n/index.txt:89
msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

# cf913c9c499e49438553a0f11411637f
#: ../../topics/i18n/timezones.txt:5
msgid "Time zones"
msgstr ""

# f53f3076ede44b69b20a42d1c355d919
#: ../../topics/i18n/timezones.txt:14
msgid ""
"When support for time zones is enabled, Django stores date and time "
"information in UTC in the database, uses time-zone-aware datetime objects "
"internally, and translates them to the end user's time zone in templates and "
"forms."
msgstr ""

# b0364fe01ce349548a2cd36c6fdc20eb
#: ../../topics/i18n/timezones.txt:19
msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display date and time information according to each user's wall clock."
msgstr ""

# 7ab14d007c864cd4922a8fb6726f9293
#: ../../topics/i18n/timezones.txt:22
msgid ""
"Even if your Web site is available in only one time zone, it's still good "
"practice to store data in UTC in your database. One main reason is Daylight "
"Saving Time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. (The pytz_ documentation discusses `these issues`_ in greater "
"detail.) This probably doesn't matter for your blog, but it's a problem if "
"you over-bill or under-bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""

# 977e636d628741a38a21fda88ce6f799
#: ../../topics/i18n/timezones.txt:33
msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ "
"= True <USE_TZ>` in your settings file. Installing pytz_ is highly "
"recommended, but not mandatory. It's as simple as:"
msgstr ""

# 04a711271a3e408988b80e462d5b2adb
#: ../../topics/i18n/timezones.txt:43
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

# 57108de196fe4a828ba1c3fa1054b60f
#: ../../topics/i18n/timezones.txt:49
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls whether Django should activate format localization. See :doc:`/"
"topics/i18n/formatting` for more details."
msgstr ""

# d9a8d60a191648588fc1905d32996459
#: ../../topics/i18n/timezones.txt:53
msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""

# 1f1243d88edd49688aec97f3d9417593
#: ../../topics/i18n/timezones.txt:57
msgid "Concepts"
msgstr ""

# 3da06bf0fadb485f8f507847941eebdb
#: ../../topics/i18n/timezones.txt:60
msgid "Naive and aware datetime objects"
msgstr ""

# 2e87b8445eaf46eb8223ccf2ea31a9a7
#: ../../topics/i18n/timezones.txt:62
msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""

# 898bad7703674830a70f85b982da65b7
#: ../../topics/i18n/timezones.txt:67
msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

# cd94f97adea14b5195c4721541a0ec8e
#: ../../topics/i18n/timezones.txt:71
msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""

# d2f9d9cf28d141cdaeaf7193761f66e8
#: ../../topics/i18n/timezones.txt:79
msgid ""
"When time zone support is enabled, Django uses time-zone-aware datetime "
"objects. If your code creates datetime objects, they should be aware too. In "
"this mode, the example above becomes::"
msgstr ""

# 63c605188d434b689a41c8471b18b773
#: ../../topics/i18n/timezones.txt:90
msgid ""
":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` "
"function that returns a naive or aware datetime object according to the "
"value of :setting:`USE_TZ`."
msgstr ""

# 26bee88e8cd44e4baa9fffec8b56912a
#: ../../topics/i18n/timezones.txt:96
msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""

# fc7182ce4f6c4c3fac8cd67847e4f314
#: ../../topics/i18n/timezones.txt:104
msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

# da89f424a3214253af25b17a865940d5
#: ../../topics/i18n/timezones.txt:109
msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object."
msgstr ""

# 74d8284e224740808f45df88d0629bd8
#: ../../topics/i18n/timezones.txt:115
msgid "Interpretation of naive datetime objects"
msgstr ""

# 9dda690b44f1452da7f070adb54f352a
#: ../../topics/i18n/timezones.txt:117
msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

# 0c0398527bc04585837ff971ea90fdd2
#: ../../topics/i18n/timezones.txt:122
msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. Other :class:"
"`~datetime.tzinfo` implementations, such as the local time zone used as a "
"fallback when pytz_ isn't installed, may raise an exception or return "
"inaccurate results. That's why you should always create aware datetime "
"objects when time zone support is enabled."
msgstr ""

# 89abdac25ec54ea99eafbf9a9acca245
#: ../../topics/i18n/timezones.txt:129
msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

# 91b491ce7b0f44fd88bab575bcc42374
#: ../../topics/i18n/timezones.txt:139
msgid "Default time zone and current time zone"
msgstr ""

# 54cc22ad967d41f3b7bb0eb3f5b9ff43
#: ../../topics/i18n/timezones.txt:141
msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""

# f8b5ab7c9b6f458caa2997426aab6c41
#: ../../topics/i18n/timezones.txt:144
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

# 33bb4e0d057241fdaabe75b0810a5ecd
#: ../../topics/i18n/timezones.txt:146
msgid ""
"You should set the current time zone to the end user's actual time zone "
"with :func:`~django.utils.timezone.activate`. Otherwise, the default time "
"zone is used."
msgstr ""

# d2c20e29c7f6413c9f13df63b224f12e
#: ../../topics/i18n/timezones.txt:152
msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""

# 3aee2a7afe3a40228144970afb41ddcb
#: ../../topics/i18n/timezones.txt:157
msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:"
"`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :"
"data:`~django.utils.timezone.utc`."
msgstr ""

# ccf4993bdd434f01a4994912bdfc705b
#: ../../topics/i18n/timezones.txt:167
msgid "Selecting the current time zone"
msgstr ""

# 493d8c09e62648ac90d11ae876abfadd
#: ../../topics/i18n/timezones.txt:169
msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

# 97841e55433b4002b0dd57702a055d09
#: ../../topics/i18n/timezones.txt:176
msgid ""
"Most Web sites that care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""

# f2e34f41bfcd467887d3df92b1b5357b
#: ../../topics/i18n/timezones.txt:182
msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""

# da6d4299d22f44c7817f0a75da5aede1
#: ../../topics/i18n/timezones.txt:185
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

# fa68da6cdbe647ab8ac490eedd63ff76
#: ../../topics/i18n/timezones.txt:195
msgid "Create a view that can set the current timezone::"
msgstr ""

# 934ef5fb32674cb09d56b6c7144e7942
#: ../../topics/i18n/timezones.txt:207
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

# 5df19b052aa94f4ebb5594e56e033f94
#: ../../topics/i18n/timezones.txt:226
msgid "Time zone aware input in forms"
msgstr ""

# dcb53f40c1a34bc4bd113ac80b60ac41
#: ../../topics/i18n/timezones.txt:228
msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

# 9418ff783c2f44f0970624f5d2e78a34
#: ../../topics/i18n/timezones.txt:232
msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""

# b8e7177887d746228361c2fdd68b2995
#: ../../topics/i18n/timezones.txt:239
msgid "Time zone aware output in templates"
msgstr ""

# ac6f1b6185214830839c7ba3232e15fe
#: ../../topics/i18n/timezones.txt:241
msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""

# ec495cb53cbf48c3bb507b487efb13c0
#: ../../topics/i18n/timezones.txt:248
msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

# 6dda6e22557843c693df9d1593227617
#: ../../topics/i18n/timezones.txt:253
msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

# 0660e369ab344ce186bc588180e5bcf3
# 887fe0a5fda54722ade3304ab13e8b57
#: ../../topics/i18n/timezones.txt:264 ../../topics/i18n/timezones.txt:335
msgid "localtime"
msgstr ""

# d76c7e48d9a248c5bd2c687c9afc9ff7
#: ../../topics/i18n/timezones.txt:266
msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""

# 241d229b321d48c1847b5db298806522
#: ../../topics/i18n/timezones.txt:269
msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

# ad446d925e9241c7aa79feb042df3292
#: ../../topics/i18n/timezones.txt:273
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

# 58016c9eb6d84a2f864f14c2715e5e2d
#: ../../topics/i18n/timezones.txt:287
msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}"
"`` block."
msgstr ""

# f2f9dbfad9bd4aed95494dbc0a0d408a
# 09100b495b2748abb5cda4a13561d57d
#: ../../topics/i18n/timezones.txt:293 ../../topics/i18n/timezones.txt:361
msgid "timezone"
msgstr ""

# 78d66276521345e39f76d2f139bb6d1d
#: ../../topics/i18n/timezones.txt:295
msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

# b4a5d7201f274b4a9711783a039a4203
#: ../../topics/i18n/timezones.txt:313
msgid "get_current_timezone"
msgstr ""

# 7ea04b76467f4c3aae6b1fc92c92aee7
#: ../../topics/i18n/timezones.txt:315
msgid ""
"When the :func:`django.core.context_processors.tz` context processor is "
"enabled -- by default, it is -- each :class:`~django.template."
"RequestContext` contains a ``TIME_ZONE`` variable that provides the name of "
"the current time zone."
msgstr ""

# b1e46289c7bc4a7aac01c9d00d88db0b
#: ../../topics/i18n/timezones.txt:320
msgid ""
"If you don't use a :class:`~django.template.RequestContext`, you can obtain "
"this value with the ``get_current_timezone`` tag::"
msgstr ""

# 92305e0df221432caf374c31629fabee
#: ../../topics/i18n/timezones.txt:328
msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

# d59bb6b0d63d4143b4a2359451ad8865
#: ../../topics/i18n/timezones.txt:337
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

# 6f681235b89048e88848d32dcc3c3d13
#: ../../topics/i18n/timezones.txt:348
msgid "utc"
msgstr ""

# 12a6d3d28fa14676b8152b5df9d439a5
#: ../../topics/i18n/timezones.txt:350
msgid "Forces conversion of a single value to UTC."
msgstr ""

# d81493e568124990958d2a49146abfab
#: ../../topics/i18n/timezones.txt:363
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

# df0a4f8e41e44aa5ab722417a7c139ae
#: ../../topics/i18n/timezones.txt:365
msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

# 3dd49f936ba149d89f5a8a8ffd29cbee
#: ../../topics/i18n/timezones.txt:377
msgid "Migration guide"
msgstr ""

# 63795b65e0764ab1ba72e1a117259beb
#: ../../topics/i18n/timezones.txt:379
msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

# 1735effc29d54fa6a3e7afdf97ea5829
#: ../../topics/i18n/timezones.txt:383
msgid "Database"
msgstr ""

# 86e18d7e035347d2be2f22fdd6bf8e89
#: ../../topics/i18n/timezones.txt:386
msgid "PostgreSQL"
msgstr ""

# 4149a21f51fc43129cce972303b31f0e
#: ../../topics/i18n/timezones.txt:388
msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

# e2d8b1ed93964c4193aa9049a6a2abe4
#: ../../topics/i18n/timezones.txt:392
msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

# b3d81d0a2dc5464493e965007b1f6027
#: ../../topics/i18n/timezones.txt:399
msgid "Other databases"
msgstr ""

# e6937c0f843c47eea742a598ec47bf67
#: ../../topics/i18n/timezones.txt:401
msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

# 9f13f801bab346d5b18bf6844d6439bb
#: ../../topics/i18n/timezones.txt:406
msgid "Code"
msgstr ""

# 38b74a5db36a4b91a8a1deb7246a8393
#: ../../topics/i18n/timezones.txt:408
msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file and install pytz_ (if possible). At this point, things should mostly "
"work. If you create naive datetime objects in your code, Django makes them "
"aware when necessary."
msgstr ""

# 25c986d599f646f4826824e546255089
#: ../../topics/i18n/timezones.txt:413
msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""

# 10e51908f7694c9ebd33ba326c727c43
#: ../../topics/i18n/timezones.txt:420
msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

# 4c1d887e64164d20a0e7ff2ed73b5b72
#: ../../topics/i18n/timezones.txt:429
msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

# fb50b7a11f944789a4aebab140c04b5d
#: ../../topics/i18n/timezones.txt:434
msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""

# 2cf428691dc74854a7302d6f4a21ff89
#: ../../topics/i18n/timezones.txt:443
msgid "Fixtures"
msgstr ""

# ce4f1986ef684e9aab90bd3dfc09ca69
#: ../../topics/i18n/timezones.txt:445
msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

# e1d83f2ff9704e188057c3d0807ffac8
#: ../../topics/i18n/timezones.txt:449
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

# c659f90cf60740fe99aa7f7d08559bd2
#: ../../topics/i18n/timezones.txt:453
msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

# 0e07752705ed4258aba6973b072be230
#: ../../topics/i18n/timezones.txt:457
msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

# 732547de2f3641a49654dd2c528d6786
#: ../../topics/i18n/timezones.txt:462
msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can simply edit them to add the "
"UTC offset that matches your :setting:`TIME_ZONE` to each serialized "
"datetime."
msgstr ""

# 652b0f7847fc4bbeaf458a1fe3992f9e
#: ../../topics/i18n/timezones.txt:469
msgid "FAQ"
msgstr ""

# 646bc63b136a472aa27d0b74499bd50e
#: ../../topics/i18n/timezones.txt:472
msgid "Setup"
msgstr ""

# ac97cbd55b1744f3a0b9fd346c10fb17
#: ../../topics/i18n/timezones.txt:474
msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

# 8b9bd407d9c7488f8613a60ce878e10f
#: ../../topics/i18n/timezones.txt:476
msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"Daylight Saving Time (DST) transitions."
msgstr ""

# bd7d97ebf15d4575a10e500a38e1236d
#: ../../topics/i18n/timezones.txt:480
msgid ""
"In this regard, time zones are comparable to ``unicode`` in Python. At first "
"it's hard. You get encoding and decoding errors. Then you learn the rules. "
"And some problems disappear -- you never get mangled output again when your "
"application receives non-ASCII input."
msgstr ""

# 849c9411ef8a478f97f7d5ec0dc230ed
#: ../../topics/i18n/timezones.txt:485
msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

# 2b12f16d6cd944df84b8581efcb93c4b
#: ../../topics/i18n/timezones.txt:490
msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

# ff6f8ec617fd4edab399f0268cfb93c8
#: ../../topics/i18n/timezones.txt:495
msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

# b4ced9970cc74ff0bfc62aea6d54724f
#: ../../topics/i18n/timezones.txt:498
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

# 7db44e3ebc7a41ed83ac12a4179dcb38
#: ../../topics/i18n/timezones.txt:500
msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

# ccb3a59156c34270a1e19cbbfdd1f85d
#: ../../topics/i18n/timezones.txt:504
msgid ""
"If your application connects to other systems -- for instance, if it queries "
"a Web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

# dba3251c65804024a7c5d3131289bbb9
#: ../../topics/i18n/timezones.txt:509
msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

# 6750411d2154430387519947fbbb4c56
#: ../../topics/i18n/timezones.txt:521
msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

# 36a7e7ad97df4698ab4a66d799ff04ca
#: ../../topics/i18n/timezones.txt:525
msgid "**Should I install pytz?**"
msgstr ""

# 09ec6bf341144b70acf596c12ebf3794
#: ../../topics/i18n/timezones.txt:527
msgid ""
"Yes. Django has a policy of not requiring external dependencies, and for "
"this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

# 4bf56b131e864fa1b05a9bc0412e36b5
#: ../../topics/i18n/timezones.txt:530
msgid ""
"As soon as you activate time zone support, Django needs a definition of the "
"default time zone. When pytz is available, Django loads this definition from "
"the `tz database`_. This is the most accurate solution. Otherwise, it relies "
"on the difference between local time and UTC, as reported by the operating "
"system, to compute conversions. This is less reliable, especially around DST "
"transitions."
msgstr ""

# b78a429ea6fe4f138020bf0a556d1311
#: ../../topics/i18n/timezones.txt:537
msgid ""
"Furthermore, if you want to support users in more than one time zone, pytz "
"is the reference for time zone definitions."
msgstr ""

# 1ba14e09eedd47719684713762800c8f
#: ../../topics/i18n/timezones.txt:541
msgid "Troubleshooting"
msgstr ""

# 44a7fcd1a2124c6eacea706383b5ec0f
#: ../../topics/i18n/timezones.txt:543
msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

# ed9e4cb6fa2d42c4a1bde87e4ff520f1
#: ../../topics/i18n/timezones.txt:546
msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

# 8d132e2d6d344b9b9e66e45733439cf0
#: ../../topics/i18n/timezones.txt:557
msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

# d4892e825cbe4e50a17ffa0b571315ca
#: ../../topics/i18n/timezones.txt:560
msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a "
"model field. Since you enabled time zone support, it's aware."
msgstr ""

# 4401fc0937d84af9ab06ae6e567f29ee
#: ../../topics/i18n/timezones.txt:562
msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

# 468583c3fe7f48f58734431641d16ced
#: ../../topics/i18n/timezones.txt:565
msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

# 2b7f1d17a0bc4cb9900bbddfa8cfa36d
#: ../../topics/i18n/timezones.txt:568
msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as "
"needed."
msgstr ""

# c721bed6f35b446aaccb7bfded18ca1d
#: ../../topics/i18n/timezones.txt:575
msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

# f48b83602ae44a4dbfdd9a0cfff28d14
#: ../../topics/i18n/timezones.txt:579
msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""

# 47c61becc38c4fab99324e0aa0262256
#: ../../topics/i18n/timezones.txt:585
msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

# 7255e0f5b5e147a3ba268b93a18926e4
#: ../../topics/i18n/timezones.txt:588
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

# e0952ecf572c46ad9f203f77c1f4490e
#: ../../topics/i18n/timezones.txt:590
msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

# ba347d73b99741fba50ac1d02a00a6cb
#: ../../topics/i18n/timezones.txt:595
msgid "None of this is true in a time zone aware environment::"
msgstr ""

# f4563126ab8c4ebd87a83b98ccad66fe
#: ../../topics/i18n/timezones.txt:613
msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

# d3d6f2d5eb7d42fb954cec65b9909ef4
#: ../../topics/i18n/timezones.txt:617
msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

# 6390ddac6b6848799e6df0b697e46b00
#: ../../topics/i18n/timezones.txt:623
msgid "What does this mean in practice?"
msgstr ""

# 0da7752f6f974e43a539dab23fe40470
#: ../../topics/i18n/timezones.txt:625
msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

# dd0d917863554486a03441f8d2878ec4
#: ../../topics/i18n/timezones.txt:631
msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone::"
msgstr ""

# 9ce0a30b31554a12a2c729aa4a8d9851
#: ../../topics/i18n/timezones.txt:648
msgid "Usage"
msgstr ""

# a30f832a3e1b4a378f554793762dbed4
#: ../../topics/i18n/timezones.txt:650
msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``"
"\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?"
"**"
msgstr ""

# fc66be29200c4c03a0636663f2ed775a
#: ../../topics/i18n/timezones.txt:654
msgid "This is exactly what pytz_ is for."
msgstr ""

# 8ccc5805e8854683bd33dafeff3265ac
#: ../../topics/i18n/timezones.txt:662
msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch :exc:`~pytz.InvalidTimeError`. The "
"documentation of pytz contains `more examples`_. You should review it before "
"attempting to manipulate aware datetimes."
msgstr ""

# 7a32f8b2cbf0431daccae2c2f6e4c36b
#: ../../topics/i18n/timezones.txt:667
msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

# 2d752afbec984f3190c546765d1b26c4
#: ../../topics/i18n/timezones.txt:669
msgid "Well, the first question is, do you really need to?"
msgstr ""

# c0b7a2994daa4ccd8c64f4a391f5b054
#: ../../topics/i18n/timezones.txt:671
msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""

# f26f9730934c4bb8933caa28741bb77e
#: ../../topics/i18n/timezones.txt:675
msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

# 3ac6afb1af9645a8b2358290e5df9268
#: ../../topics/i18n/timezones.txt:681
msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it::"
msgstr ""

# c473f54bfd00468dbe429dfac3d04124
#: ../../topics/i18n/timezones.txt:688
msgid ""
"In this example, pytz_ is installed and the current time zone is ``\"Europe/"
"Paris\"``."
msgstr ""

# a3ce89ed952645309a3a02ff06907fbf
#: ../../topics/i18n/timezones.txt:691
msgid "**How can I see all available time zones?**"
msgstr ""

# e6dfa045cb3c4ad28cfb964ac0075e27
#: ../../topics/i18n/timezones.txt:693
msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical interest."
msgstr ""

# 8b32b4396e604602bf402425793b3709
#: ../../topics/i18n/translation.txt:3
msgid "Translation"
msgstr ""

# df3a617be2f04a15be68a5fb8eb40759
#: ../../topics/i18n/translation.txt:10
msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"amount of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""

# c048a522943a4706952724ceee8d0a1e
#: ../../topics/i18n/translation.txt:17
msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

# 6dbd28f0b15f4b06b6945fb190fb060a
#: ../../topics/i18n/translation.txt:23
msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

# 350b90aae5b047928962d1f3a86d49fa
#: ../../topics/i18n/translation.txt:26
msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery. You'll probably also want to remove "
"``'django.core.context_processors.i18n'`` from your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

# 1af1100fe431408b9dd4fd2348be7424
#: ../../topics/i18n/translation.txt:36
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See :doc:`/topics/"
"i18n/formatting` for more details."
msgstr ""

# 7ed95d83430e4155a16614441c7456fd
#: ../../topics/i18n/translation.txt:42
msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE_CLASSES` includes :mod:`django.middleware."
"locale.LocaleMiddleware`). If you haven't yet, see :ref:`how-django-"
"discovers-language-preference`."
msgstr ""

# 1c8839792a9c48308d3331e00feeee7e
#: ../../topics/i18n/translation.txt:48
msgid "Internationalization: in Python code"
msgstr ""

# b4defeb5e43042108250eecb31d05765
#: ../../topics/i18n/translation.txt:51
msgid "Standard translation"
msgstr ""

# 783a22982bd74973a1a8e9d18e8b1ad8
#: ../../topics/i18n/translation.txt:53
msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.ugettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""

# 8f5c03bd87ee45e8baaab97da2c63025
#: ../../topics/i18n/translation.txt:58
msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

# 6bd8c1150ff44b6aa009502e91910367
#: ../../topics/i18n/translation.txt:62
msgid ""
"For international character set (Unicode) support, :func:`~django.utils."
"translation.ugettext` is more useful than ``gettext()``. Sometimes, you "
"should be using :func:`~django.utils.translation.ugettext_lazy` as the "
"default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""

# 55c89e953ae14706a27c997b3cecfbcd
#: ../../topics/i18n/translation.txt:70
msgid ""
"The underscore character (``_``) is used to represent \"the previous result"
"\" in Python's interactive shell and doctest tests. Installing a global ``_()"
"`` function causes interference. Explicitly importing ``ugettext()`` as ``_()"
"`` avoids this problem."
msgstr ""

# ead8c338478f4844bd7d379e3c61dfb3
#: ../../topics/i18n/translation.txt:77
msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""

# 4a1a09485d5d436db89b764ac1461d8c
#: ../../topics/i18n/translation.txt:86
msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""

# e6aef66bf2c14fdda22ed8d4a2927fc3
#: ../../topics/i18n/translation.txt:95
msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""

# 676bb1564e5642bd9b8ae73644e504a3
#: ../../topics/i18n/translation.txt:103
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

# 17e59d7392b64a6e93f3ad7ee0cfcbe0
#: ../../topics/i18n/translation.txt:110
msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin.py makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

# 867cbf3a4fc54b9084ee790c9ac9a8de
#: ../../topics/i18n/translation.txt:115
msgid ""
"The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

# a6954f40a3ae496e95c934bb06552aa6
#: ../../topics/i18n/translation.txt:122
msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- "
"with the the month and the day placeholders swapped."
msgstr ""

# 0f61c78d6edc45f9b8441fa525eaa2d5
#: ../../topics/i18n/translation.txt:127
msgid ""
"For this reason, you should use named-string interpolation (e.g., ``%(day)"
"s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) whenever "
"you have more than a single parameter. If you used positional interpolation, "
"translations wouldn't be able to reorder placeholder text."
msgstr ""

# 362830a1a3fe4d28bd549a2eca4cecb8
#: ../../topics/i18n/translation.txt:135
msgid "Comments for translators"
msgstr ""

# 2e55ed5038134edd9ed9ec5bdfa38917
#: ../../topics/i18n/translation.txt:137
msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

# 87c86f3085224f48b7e0fbb244257f1e
#: ../../topics/i18n/translation.txt:145
msgid "This also works in templates with the :ttag:`comment` tag:"
msgstr ""

# 0e74c498ede44c97a933e85ebf3bd98f
#: ../../topics/i18n/translation.txt:151
msgid ""
"The comment will then appear in the resulting ``.po`` file and should also "
"be displayed by most translation tools."
msgstr ""

# 5a1a5896ac1943fba82b00ff6f313e8e
#: ../../topics/i18n/translation.txt:155
msgid "Marking strings as no-op"
msgstr ""

# 7045bd5becae41ee84d49b1983353be5
#: ../../topics/i18n/translation.txt:157
msgid ""
"Use the function :func:`django.utils.translation.ugettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

# ae4d30c6a402478895cf3cabde51b286
#: ../../topics/i18n/translation.txt:161
msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

# 3bc9470d5fc84d1a98d418382cae0fe8
#: ../../topics/i18n/translation.txt:167
msgid "Pluralization"
msgstr ""

# d548f910bf7f4e31a0724437908bf5f8
#: ../../topics/i18n/translation.txt:169
msgid ""
"Use the function :func:`django.utils.translation.ungettext()` to specify "
"pluralized messages."
msgstr ""

# 2c3ad8807a9949b28b8ea927b3bd5ce1
#: ../../topics/i18n/translation.txt:172
msgid ""
"``ungettext`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

# 7e7b70f8088a409b89469daa9f6590b2
#: ../../topics/i18n/translation.txt:175
msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

# ad9d53cfec274012870257495c38b365
#: ../../topics/i18n/translation.txt:195
msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""

# 386a30e22fd746028ad50d0b01cb150e
#: ../../topics/i18n/translation.txt:198
msgid "Lets see a slightly more complex usage example::"
msgstr ""

# f40844ebef24487cbf43f52c27185c1a
#: ../../topics/i18n/translation.txt:217
msgid ""
"Here we reuse localizable, hopefully already translated literals (contained "
"in the ``verbose_name`` and ``verbose_name_plural`` model ``Meta`` options) "
"for other parts of the sentence so all of it is consistently based on the "
"cardinality of the elements at play."
msgstr ""

# b5f5aba58da24552842f2e0b1346dfed
#: ../../topics/i18n/translation.txt:226
msgid ""
"When using this technique, make sure you use a single name for every "
"extrapolated variable included in the literal. In the example above note how "
"we used the ``name`` Python variable in both translation strings. This "
"example would fail::"
msgstr ""

# dd1b4813a4f1492ca806c351e330656e
#: ../../topics/i18n/translation.txt:246
msgid ""
"You would get an error when running :djadmin:`django-admin.py "
"compilemessages <compilemessages>`::"
msgstr ""

# 7c5c42005f73490b91b636373b144131
#: ../../topics/i18n/translation.txt:254
msgid "Contextual markers"
msgstr ""

# c6881bb47a5b4deaac0cc68e43b1be3e
#: ../../topics/i18n/translation.txt:256
msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""

# 595ff46191084fa4a20d2dfc936e11bf
#: ../../topics/i18n/translation.txt:263
msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""

# a0682034d2da4cd4aa76bc434ac13668
#: ../../topics/i18n/translation.txt:274
msgid "or::"
msgstr ""

# 7f0dc682440d4d0b9ee572fcc5ac4c67
#: ../../topics/i18n/translation.txt:282
msgid "will appear in the ``.po`` file as:"
msgstr ""

# 314ba1a825fb4f03a024fc596fc4ce93
#: ../../topics/i18n/translation.txt:292
msgid ""
"Contextual markers are also supported by the :ttag:`trans` and :ttag:"
"`blocktrans` template tags."
msgstr ""

# 41fbf7df51b84d968f720ca1617be3d2
#: ../../topics/i18n/translation.txt:298
msgid "Lazy translation"
msgstr ""

# a87746525a6441f7beb76134af6cb01f
#: ../../topics/i18n/translation.txt:300
msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""

# 180a2015f95a4b9791c82a469cab0f07
#: ../../topics/i18n/translation.txt:305
msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

# fa90c6df52234f6bbb001d38182afc02
#: ../../topics/i18n/translation.txt:309
msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

# e4925a32ba4e4b03b965c1a22d0312ef
#: ../../topics/i18n/translation.txt:312
msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

# 346fffc8d2cf4b8e8ba50f633fd83997
#: ../../topics/i18n/translation.txt:318
msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""

# ed7bf295e67d407b8146063f99343032
#: ../../topics/i18n/translation.txt:320
msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""

# cece6373244244b3a6d951f49756927d
#: ../../topics/i18n/translation.txt:328
msgid ""
"You can mark names of ``ForeignKey``, ``ManyTomanyField`` or "
"``OneToOneField`` relationship as translatable by using their "
"``verbose_name`` options::"
msgstr ""

# 887e6ff1d966452b8b5f648253376ccd
#: ../../topics/i18n/translation.txt:337
msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""

# f8f08223b5344e959b061680f741d4e1
#: ../../topics/i18n/translation.txt:342
msgid "Model verbose names values"
msgstr ""

# da0e81a756c14c4f8105d0293d298d35
#: ../../topics/i18n/translation.txt:344
msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs bu "
"looking at the model's class name::"
msgstr ""

# fb78c4a1e8cb4ce8882d033a91f4aea6
#: ../../topics/i18n/translation.txt:360
msgid "Model methods ``short_description`` attribute values"
msgstr ""

# be68708ca25743c390e0667a5b940cc8
#: ../../topics/i18n/translation.txt:362
msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``short_description`` attribute::"
msgstr ""

# 72e558e487784b309f55f7d8292ecace
#: ../../topics/i18n/translation.txt:376
msgid "Working with lazy translation objects"
msgstr ""

# f6f4bb344b6a44ebb0da9d95d65b1aeb
#: ../../topics/i18n/translation.txt:378
msgid ""
"The result of a ``ugettext_lazy()`` call can be used wherever you would use "
"a unicode string (an object with type ``unicode``) in Python. If you try to "
"use it where a bytestring (a ``str`` object) is expected, things will not "
"work as expected, since a ``ugettext_lazy()`` object doesn't know how to "
"convert itself to a bytestring. You can't use a unicode string inside a "
"bytestring, either, so this is consistent with normal Python behavior. For "
"example::"
msgstr ""
"The result of a ``ugettext_lazy()`` call can be used wherever you would use "
"a unicode string (an object with type ``unicode``) in Python. If you try to "
"use it where a bytestring (a ``str`` object) is expected, things will not "
"work as expected, since a ``ugettext_lazy()`` object doesn't know how to "
"convert itself to a bytestring. You can't use a unicode string inside a "
"bytestring, either, so this is consistent with normal Python behavior. 예를 "
"들어 ::"

# a6b2ca8427bc4c8497927713069d87a4
#: ../../topics/i18n/translation.txt:392
msgid ""
"If you ever see output that looks like ``\"hello <django.utils.functional...>"
"\"``, you have tried to insert the result of ``ugettext_lazy()`` into a "
"bytestring. That's a bug in your code."
msgstr ""

# e053019fcb3648c0a7c48ff9f58d6b3a
#: ../../topics/i18n/translation.txt:396
msgid ""
"If you don't like the long ``ugettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""

# e2457c32183841a5a58b64635515e0cd
#: ../../topics/i18n/translation.txt:404
msgid ""
"Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

# 4ca3a48702e14108955b9de26812c13b
#: ../../topics/i18n/translation.txt:412
msgid "Joining strings: string_concat()"
msgstr ""

# 218b7899c38a48d68d4bb79974e812b0
#: ../../topics/i18n/translation.txt:414
msgid ""
"Standard Python string joins (``''.join([...])``) will not work on lists "
"containing lazy translation objects. Instead, you can use :func:`django."
"utils.translation.string_concat()`, which creates a lazy object that "
"concatenates its contents *and* converts them to strings only when the "
"result is included in a string. For example::"
msgstr ""
"Standard Python string joins (``''.join([...])``) will not work on lists "
"containing lazy translation objects. Instead, you can use :func:`django."
"utils.translation.string_concat()`, which creates a lazy object that "
"concatenates its contents *and* converts them to strings only when the "
"result is included in a string. 예를 들어 ::"

# e7cf0b26866141c6816fdf660a5b974f
#: ../../topics/i18n/translation.txt:426
msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

# 6fc8d46317ce445fafba87f432be0941
#: ../../topics/i18n/translation.txt:431
msgid "Other uses of lazy in delayed translations"
msgstr ""

# 1aef43b4b05a4f6991d623f8407a4e71
#: ../../topics/i18n/translation.txt:433
msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. 예를 들어 ::"

# 6fba0ba1f4e44a5bab28afeb562104ce
#: ../../topics/i18n/translation.txt:444
msgid "And then later::"
msgstr ""

# 01bb9f721a6b4dcfb9a3ce5159dacdea
#: ../../topics/i18n/translation.txt:449
msgid "Localized names of languages"
msgstr ""

# 62a9031431714f7fbe37ae55eebfdd7a
#: ../../topics/i18n/translation.txt:453
msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""

# 1857f922c45d4b09a0ad9dc10363e12a
#: ../../topics/i18n/translation.txt:461
msgid ""
"The ``name`` and ``name_local`` attributes of the dictionary contain the "
"name of the language in English and in the language itself, respectively.  "
"The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

# 6a16196d44544b5b83781cfb3248f1c5
#: ../../topics/i18n/translation.txt:465
msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""

# e4e475f6b9814a1cad5b42ea95381d16
#: ../../topics/i18n/translation.txt:471
msgid "Internationalization: in template code"
msgstr ""

# e29fb53ae2a645baa6a86ee7dcd99ec1
#: ../../topics/i18n/translation.txt:475
msgid ""
"Translations in :doc:`Django templates </topics/templates>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""

# 65c355792b28417fb7e4685d4cc11670
#: ../../topics/i18n/translation.txt:485
msgid "``trans`` template tag"
msgstr ""

# 877f1d3827634b0bb5bbcb0b12dc4a1a
#: ../../topics/i18n/translation.txt:487
msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

# 1c8c55e026ac46afb859da73d1a0b6a3
#: ../../topics/i18n/translation.txt:493
msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

# 6049b11e92454aea95fab0bad4ffc5ff
#: ../../topics/i18n/translation.txt:499
msgid ""
"Internally, inline translations use an :func:`~django.utils.translation."
"ugettext` call."
msgstr ""

# 81cca25334144656a59dd9f8f4a79564
#: ../../topics/i18n/translation.txt:502
msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

# 89d3017d6899411ba6eea1d9785b0b93
#: ../../topics/i18n/translation.txt:506
msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use ``{% blocktrans %}`` instead."
msgstr ""

# 7639e3223fc64954a0b22a044b1e982c
#: ../../topics/i18n/translation.txt:512
msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax::"
msgstr ""

# 2ca44cf6d1d6437cb6c747bcda14e550
#: ../../topics/i18n/translation.txt:520
msgid ""
"In practice you'll use this to get strings that are used in multiple places "
"or should be used as arguments for other template tags or filters::"
msgstr ""

# d7b679fb51fd478fa0fa27a71cc35689
#: ../../topics/i18n/translation.txt:538
msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""

# 869ad584ff244cf28ce8f2edaf364c64
#: ../../topics/i18n/translation.txt:548
msgid "``blocktrans`` template tag"
msgstr ""

# 294bd2be796d4f12b9b3d9d57d95d8c6
#: ../../topics/i18n/translation.txt:550
msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""

# c5b91e9ec1c34338a88db5b857bd34a9
#: ../../topics/i18n/translation.txt:556
msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

# 6b3b4dacb20c42eb9b9c7066cd217723
#: ../../topics/i18n/translation.txt:568
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

# 15a8ab31c7194a88986e0b133cd9e37f
#: ../../topics/i18n/translation.txt:574
msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""

# e227d3751cf5438984723e6226b58d2a
#: ../../topics/i18n/translation.txt:579
msgid ""
"If resolving one of the block arguments fails, blocktrans will fall back to "
"the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

# 23dea2ae87b140b2b52787ce01502f54
#: ../../topics/i18n/translation.txt:584
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

# ab6c9cdbb29f40bb8f22efe784c0b347
#: ../../topics/i18n/translation.txt:586
msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

# 88ffc28bb73d4dae9597f2056b2ec0f4
#: ../../topics/i18n/translation.txt:589
msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""

# 5bd9d9f1e87a4ec1957e5225e02f2c43
#: ../../topics/i18n/translation.txt:601
msgid "A more complex example::"
msgstr ""

# 1f9de4e9e729417eb98e1c3e5698ac1e
#: ../../topics/i18n/translation.txt:609
msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ungettext`` call. "
"This means the same :ref:`notes regarding ungettext variables <pluralization-"
"var-notes>` apply."
msgstr ""

# 1d7673ff51a7455487fae9aaa37ff39b
#: ../../topics/i18n/translation.txt:615
msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

# 69ecf269bcf74e34ba7f3fd784eaf1f7
#: ../../topics/i18n/translation.txt:625
msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

# 80c07c77d02e46e69eea81a79511dc33
#: ../../topics/i18n/translation.txt:635
msgid "Other tags"
msgstr ""

# c7225760122742fc94f002330f0a4a3b
#: ../../topics/i18n/translation.txt:637
msgid ""
"Each ``RequestContext`` has access to three translation-specific variables:"
msgstr ""

# 85617240347c49f2af331d76f142903a
#: ../../topics/i18n/translation.txt:639
msgid ""
"``LANGUAGES`` is a list of tuples in which the first element is the :term:"
"`language code` and the second is the language name (translated into the "
"currently active locale)."
msgstr ""

# 94169640383b42b1ad1a990d4adb0b48
#: ../../topics/i18n/translation.txt:643
msgid ""
"``LANGUAGE_CODE`` is the current user's preferred language, as a string. "
"Example: ``en-us``. (See :ref:`how-django-discovers-language-preference`.)"
msgstr ""

# 17b78e582f614cb08907baf994f64713
#: ../../topics/i18n/translation.txt:646
msgid ""
"``LANGUAGE_BIDI`` is the current locale's direction. If True, it's a right-"
"to-left language, e.g.: Hebrew, Arabic. If False it's a left-to-right "
"language, e.g.: English, French, German etc."
msgstr ""

# 98aa47097e884ceeacd0605a51bc69a2
#: ../../topics/i18n/translation.txt:650
msgid ""
"If you don't use the ``RequestContext`` extension, you can get those values "
"with three tags::"
msgstr ""

# d32de97afc5c4fcf9099b5afd6d1ea40
#: ../../topics/i18n/translation.txt:657
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

# 3b8ea04a804e4b96a42e087649fb5bcc
#: ../../topics/i18n/translation.txt:659
msgid ""
"Translation hooks are also available within any template block tag that "
"accepts constant strings. In those cases, just use ``_()`` syntax to specify "
"a translation string::"
msgstr ""

# ea811c2e25cf42ada66135feb626e1ea
#: ../../topics/i18n/translation.txt:665
msgid ""
"In this case, both the tag and the filter will see the already-translated "
"string, so they don't need to be aware of translations."
msgstr ""

# 2b257d56eba741fcb704701be32d4bfe
#: ../../topics/i18n/translation.txt:669
msgid ""
"In this example, the translation infrastructure will be passed the string ``"
"\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

# 2ce5eea39f364cb28481ac73f8176090
#: ../../topics/i18n/translation.txt:676
msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

# efb37423257a4c58b0772d269e20d8be
#: ../../topics/i18n/translation.txt:683
msgid "You can then access the information::"
msgstr ""

# 178ade9ed1f5419e967aceae5ca6a0de
#: ../../topics/i18n/translation.txt:690
msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

# a7d4a7b277104b25aa8d9b603a11512c
#: ../../topics/i18n/translation.txt:696
msgid ""
"In addition to :setting:`LANGUAGES` style nested tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""

# 9d924b9fad2b48ffb05abc8e52ac448f
#: ../../topics/i18n/translation.txt:706
msgid "you can iterate over those languages in the template::"
msgstr ""

# d8705768d7a54a06adb875385aa10541
#: ../../topics/i18n/translation.txt:711
msgid "There are also simple filters available for convenience:"
msgstr ""

# a675dd7eca6042249eda407d32d46fe4
#: ../../topics/i18n/translation.txt:713
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

# fd9015b52c3d41d5accde0248b70d6e0
#: ../../topics/i18n/translation.txt:714
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

# 90d79b40c51f4c79a50264249dd7a71e
#: ../../topics/i18n/translation.txt:715
msgid "``{{ LANGUAGE_CODE|bidi }}`` (False)"
msgstr ""

# 75bfcbf74a164d4d941473150cf9a94d
#: ../../topics/i18n/translation.txt:720
msgid "Internationalization: in JavaScript code"
msgstr ""

# 7c9034e4f1a843ac8d4f9d760e032d8d
#: ../../topics/i18n/translation.txt:724
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

# 116536981953466f9c38283d4def4979
#: ../../topics/i18n/translation.txt:726
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

# 490f05f5036345aabcbd6ed0c68264b9
#: ../../topics/i18n/translation.txt:728
msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""

# afd77ea36ff64a47a3ec6c1e5022e64e
#: ../../topics/i18n/translation.txt:731
msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

# c35ecbd5fd7449aabe2d1058198cd846
#: ../../topics/i18n/translation.txt:734
msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""

# 9c7ce4aa03854ddc94a70e1d23796575
#: ../../topics/i18n/translation.txt:741
msgid "The ``javascript_catalog`` view"
msgstr ""

# d1162f23b7c848009dad133f5ca29aca
#: ../../topics/i18n/translation.txt:747
msgid ""
"The main solution to these problems is the :meth:`django.views.i18n."
"javascript_catalog` view, which sends out a JavaScript code library with "
"functions that mimic the ``gettext`` interface, plus an array of translation "
"strings. Those translation strings are taken from applications or Django "
"core, according to what you specify in either the ``info_dict`` or the URL. "
"Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""

# b3d64b03364b485e8f4d95ae10dc6ec8
#: ../../topics/i18n/translation.txt:754
msgid "You hook it up like this::"
msgstr ""

# 2b9f6378c6d443ae87595962e1a15ecd
#: ../../topics/i18n/translation.txt:764
msgid ""
"Each string in ``packages`` should be in Python dotted-package syntax (the "
"same format as the strings in :setting:`INSTALLED_APPS`) and should refer to "
"a package that contains a ``locale`` directory. If you specify multiple "
"packages, all those catalogs are merged into one catalog. This is useful if "
"you have JavaScript that uses strings from different applications."
msgstr ""

# e461799129574516a71d161fd1d262c8
#: ../../topics/i18n/translation.txt:770
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning, this is important in the case of clashing translations for "
"the same literal."
msgstr ""

# 4c0a67dbc7834646928e45d8234115a3
#: ../../topics/i18n/translation.txt:775
msgid ""
"By default, the view uses the ``djangojs`` gettext domain. This can be "
"changed by altering the ``domain`` argument."
msgstr ""

# 47693635e7fd458eb8895c9cbba4e103
#: ../../topics/i18n/translation.txt:778
msgid ""
"You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

# 96b4a4343dbd4a79b5b5919c107c7410
#: ../../topics/i18n/translation.txt:784
msgid ""
"With this, you specify the packages as a list of package names delimited by "
"'+' signs in the URL. This is especially useful if your pages use code from "
"different apps and this changes often and you don't want to pull in one big "
"catalog file. As a security measure, these values can only be either "
"``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

# 9464d1b7128b4eca9fb02a4eea11ad7d
#: ../../topics/i18n/translation.txt:790
msgid ""
"The JavaScript translations found in the paths listed in the :setting:"
"`LOCALE_PATHS` setting are also always included. To keep consistency with "
"the translations lookup order algorithm used for Python and templates, the "
"directories listed in :setting:`LOCALE_PATHS` have the highest precedence "
"with the ones appearing first having higher precedence than the ones "
"appearing later."
msgstr ""

# 017be99a4350434d80ae1f574afc4175
#: ../../topics/i18n/translation.txt:798
msgid "Using the JavaScript translation catalog"
msgstr ""

# 3c6b95383e224fb4b5f40dbb14cecc0a
#: ../../topics/i18n/translation.txt:802
msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

# 983671ecee4f4e79a015edd2e7818d0e
#: ../../topics/i18n/translation.txt:808
msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the standard "
"``gettext`` interface to access it::"
msgstr ""

# 8081c708f4554c8b873caf26beb5382e
#: ../../topics/i18n/translation.txt:814
msgid "There is also an ``ngettext`` interface::"
msgstr ""

# a949acd3b44b44608d18e936b0c6a1d3
#: ../../topics/i18n/translation.txt:820
msgid "and even a string interpolation function::"
msgstr ""

# 70eaca0ea6b64883af78fd5b88155585
#: ../../topics/i18n/translation.txt:824
msgid ""
"The interpolation syntax is borrowed from Python, so the ``interpolate`` "
"function supports both positional and named interpolation:"
msgstr ""

# 09f52508b6404e69aaa3dd7835e51cac
#: ../../topics/i18n/translation.txt:827
msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. 예를 들어 ::"

# e02435d130f347ba891927bce5e742e6
#: ../../topics/i18n/translation.txt:837
msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as true. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as true. ``obj`` contains a JavaScript object or "
"associative array. 예를 들어 ::"

# dd680cbe4b1d4219806b80d877678756
#: ../../topics/i18n/translation.txt:850
msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""

# 6a4823710b0b46959cd54e022cd69e31
#: ../../topics/i18n/translation.txt:859
msgid "Internationalization: in URL patterns"
msgstr ""

# 65cc1b73f52348668ec2aa07247c6be2
#: ../../topics/i18n/translation.txt:865
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

# 65850f0fccd8479a9b12e3e99d843fa7
#: ../../topics/i18n/translation.txt:867
msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""

# f8fb6a08c59b4c3f93dd352a27134394
#: ../../topics/i18n/translation.txt:871
msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.ugettext_lazy()` function."
msgstr ""

# 31322b8a32634a808467e3da9ed60836
#: ../../topics/i18n/translation.txt:876
msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

# b5e5c448d28c48fabe5b56f42149518d
#: ../../topics/i18n/translation.txt:882
msgid "Language prefix in URL patterns"
msgstr ""

# 47cc20249c6d481a86b40cdd9a4d413d
#: ../../topics/i18n/translation.txt:886
msgid ""
"This function can be used in your root URLconf as a replacement for the "
"normal :func:`django.conf.urls.patterns` function. Django will automatically "
"prepend the current active language code to all url patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

# c8e754a53c2c42cd8176d2cabe2959a3
#: ../../topics/i18n/translation.txt:910
msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example::"
msgstr ""

# 6f795e35ccf04de6b67b5617677ba373
#: ../../topics/i18n/translation.txt:929
msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root "
"URLconf. Using it within an included URLconf will throw an :exc:"
"`ImproperlyConfigured` exception."
msgstr ""

# dffb56903b5448449704b425f8b1e840
#: ../../topics/i18n/translation.txt:935
msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""

# e4fbb23d7e484d5e9a23340a037f24dc
#: ../../topics/i18n/translation.txt:940
msgid "Translating URL patterns"
msgstr ""

# 50b48cf4a05c40aab745ef4827b962db
#: ../../topics/i18n/translation.txt:942
msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.ugettext_lazy` function. Example::"
msgstr ""

# ab53280d6238418db9a9e7806b5f6805
#: ../../topics/i18n/translation.txt:965
msgid ""
"After you've created the translations, the :func:`~django.core.urlresolvers."
"reverse` function will return the URL in the active language. Example::"
msgstr ""

# d8316dd484d945a5b35b83bb78a235fd
#: ../../topics/i18n/translation.txt:982
msgid ""
"In most cases, it's best to use translated URLs only within a language-code-"
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""

# b70077b01b03461391aa18ea0519e46d
#: ../../topics/i18n/translation.txt:993
msgid "Reversing in templates"
msgstr ""

# 3bede2dca8b34d9592420e0889063387
#: ../../topics/i18n/translation.txt:995
msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the ``language`` template "
"tag. It enables the given language in the enclosed template section:"
msgstr ""

# 4e4e64de5e4f4cc594a7a36241ce6751
#: ../../topics/i18n/translation.txt:1012
msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

# 1dd92ccc7b484423ac2261ba9872e9a5
#: ../../topics/i18n/translation.txt:1017
msgid "Localization: how to create language files"
msgstr ""

# 06a01d62a3524425aa2cd4825fdff852
#: ../../topics/i18n/translation.txt:1019
msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""

# 33fd87dac8614372b9d88e040b9be25e
#: ../../topics/i18n/translation.txt:1027
msgid ""
"Django does not support localizing your application into a locale for which "
"Django itself has not been translated. In this case, it will ignore your "
"translation files. If you were to try this and Django supported it, you "
"would inevitably see a mixture of translated strings (from your application) "
"and English strings (from Django itself). If you want to support a locale "
"for your application that is not already part of Django, you'll need to make "
"at least a minimal translation of the Django core."
msgstr ""

# a995143853d047afa6866604a618fe2c
#: ../../topics/i18n/translation.txt:1035
msgid ""
"A good starting point is to copy the Django English ``.po`` file and to "
"translate at least some :term:`translation strings <translation string>`."
msgstr ""

# e1e2444fb78a4e129949dade10e01eca
#: ../../topics/i18n/translation.txt:1039
msgid "Message files"
msgstr ""

# be9a3a190bc747a19ef293df8f78b652
#: ../../topics/i18n/translation.txt:1041
msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""

# 34b507a776b942bbbc9b7bd3acae533b
#: ../../topics/i18n/translation.txt:1046
msgid ""
"Django comes with a tool, :djadmin:`django-admin.py makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

# 0f989274d1294366b0514b5a5cd77887
#: ../../topics/i18n/translation.txt:1051
msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""

# e9874a6d3e004fd88f45b2c4893728f6
#: ../../topics/i18n/translation.txt:1055
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

# 995aeb574c064b96b43a65b744c92784
#: ../../topics/i18n/translation.txt:1057
msgid "To create or update a message file, run this command::"
msgstr ""

# 2b34d405e4a14d9a9f820647a640d7aa
#: ../../topics/i18n/translation.txt:1061
msgid ""
"...where ``de`` is the language code for the message file you want to "
"create. The language code, in this case, is in :term:`locale format<locale "
"name>`. For example, it's ``pt_BR`` for Brazilian Portuguese and ``de_AT`` "
"for Austrian German."
msgstr ""

# 82d4621cc34c4f46a81f7e853238a5c5
#: ../../topics/i18n/translation.txt:1066
msgid "The script should be run from one of two places:"
msgstr ""

# 2c11e7ba9c3446949802a865335785cc
#: ../../topics/i18n/translation.txt:1068
msgid "The root directory of your Django project."
msgstr ""

# c065a4f8c1124372b478b97795c86ba2
#: ../../topics/i18n/translation.txt:1069
msgid "The root directory of your Django app."
msgstr ""

# d73a806c6dd94093a210679ce21660b4
#: ../../topics/i18n/translation.txt:1071
msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation. It creates (or "
"updates) a message file in the directory ``locale/LANG/LC_MESSAGES``. In the "
"``de`` example, the file will be ``locale/de/LC_MESSAGES/django.po``."
msgstr ""

# 46fb213eadd54c6996dadfbfa6095043
#: ../../topics/i18n/translation.txt:1076
msgid ""
"By default :djadmin:`django-admin.py makemessages <makemessages>` examines "
"every file that has the ``.html`` or ``.txt`` file extension. In case you "
"want to override that default, use the ``--extension`` or ``-e`` option to "
"specify the file extensions to examine::"
msgstr ""

# d15ca9f68344453090ca4122e34ca1d7
#: ../../topics/i18n/translation.txt:1083
msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times::"
msgstr ""

# 02af8b4055b24f8b887b1320dcf26646
#: ../../topics/i18n/translation.txt:1090
msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special 'djangojs' domain, "
"**not** ``-e js``."
msgstr ""

# 7d2abda813b840208393bdb4a0d52788
#: ../../topics/i18n/translation.txt:1096
msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or just copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point; it's "
"just an empty translation file."
msgstr ""

# 299892924dcc4319b9f1d3d5e4ff56d6
#: ../../topics/i18n/translation.txt:1104
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""

# af2096b07e0141cf9f6fbebfbc3222f3
#: ../../topics/i18n/translation.txt:1108
msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a "
"small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""

# e409d0c20f804c39915d8bbf50713cc3
#: ../../topics/i18n/translation.txt:1114
msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""

# 136f5b6a116340559fbfcfa5327baf20
#: ../../topics/i18n/translation.txt:1119
msgid ""
"...then :djadmin:`django-admin.py makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message::"
msgstr ""

# 43121569ae964afa9a396cf8d09fe56f
#: ../../topics/i18n/translation.txt:1126
msgid "A quick explanation:"
msgstr ""

# 273aefc42ffa4158843a711fe0adc5fd
#: ../../topics/i18n/translation.txt:1128
msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""

# 87ad63fe32eb45aeb9417ccd177b0b2c
#: ../../topics/i18n/translation.txt:1130
msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""

# 7cdcebdf270142ba8b86ce32d4c1e5f3
#: ../../topics/i18n/translation.txt:1133
msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""

# d6451b82df9c430882dc6b3e90b7a36b
#: ../../topics/i18n/translation.txt:1137
msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""

# d313643c5d0b46b9905eccce86c27bd1
#: ../../topics/i18n/translation.txt:1145
msgid ""
"When creating a PO file with your favorite text editor, first edit the "
"charset line (search for ``\"CHARSET\"``) and set it to the charset you'll "
"be using to edit the content. Due to the way the ``gettext`` tools work "
"internally and because we want to allow non-ASCII source strings in Django's "
"core and your applications, you **must** use UTF-8 as the encoding for your "
"PO file. This means that everybody will be using the same encoding, which is "
"important when Django processes the PO files."
msgstr ""

# 5d98623b6363477ca939ebce197c7c52
#: ../../topics/i18n/translation.txt:1153
msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""

# 6d8059e659ec475fa986d5a766a212ab
#: ../../topics/i18n/translation.txt:1159
msgid "Compiling message files"
msgstr ""

# c7230e5f66f04797ae44be6d0702e979
#: ../../topics/i18n/translation.txt:1161
msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin.py compilemessages "
"<compilemessages>` utility."
msgstr ""

# 480cb969de3243688d2647b0672aff49
#: ../../topics/i18n/translation.txt:1166
msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin.py makemessages "
"<makemessages>`, run :djadmin:`django-admin.py compilemessages "
"<compilemessages>` like this::"
msgstr ""

# 09e4f51ff44b48b8a527d9e214e28aa6
#: ../../topics/i18n/translation.txt:1172
msgid "That's it. Your translations are ready for use."
msgstr ""

# bae0a8a5e7a64391a7625eccfd364d82
#: ../../topics/i18n/translation.txt:1176
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin.py compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""

# 25591bbc9da848539e003f56c430da54
#: ../../topics/i18n/translation.txt:1182
msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""

# bf99662069eb4fb2ab6679433a57a31c
#: ../../topics/i18n/translation.txt:1189
msgid "Creating message files from JavaScript source code"
msgstr ""

# e4ec7e13f50344f6a52b5012a221bdfe
#: ../../topics/i18n/translation.txt:1191
msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin.py makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

# ed83317e152849dd9a24797c8798899d
#: ../../topics/i18n/translation.txt:1199
msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin.py "
"compilemessages <compilemessages>` the same way as you do with normal Django "
"message files."
msgstr ""

# c86f629b10c549b5ba2db73f773d9b5b
#: ../../topics/i18n/translation.txt:1206
msgid "``gettext`` on Windows"
msgstr ""

# c1885bffde244d7a8475c4421c811a58
#: ../../topics/i18n/translation.txt:1208
msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, you will "
"need the ``gettext`` utilities:"
msgstr ""

# bf40277cd035410c94bb6599bb73d474
#: ../../topics/i18n/translation.txt:1213
msgid ""
"Download the following zip files from the GNOME servers http://ftp.gnome.org/"
"pub/gnome/binaries/win32/dependencies/ or from one of its mirrors_"
msgstr ""

# 2995330c827c4a1e99d182f14418629a
#: ../../topics/i18n/translation.txt:1217
msgid "``gettext-runtime-X.zip``"
msgstr ""

# 75028d155f5d4e20a91063284826bf2e
#: ../../topics/i18n/translation.txt:1218
msgid "``gettext-tools-X.zip``"
msgstr ""

# 029dc8e74135438a9ef2694be8e47e4c
#: ../../topics/i18n/translation.txt:1220
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

# 6daf13f438d945bbbce259c547d60a15
#: ../../topics/i18n/translation.txt:1222
msgid ""
"Extract the contents of the ``bin\\`` directories in both files to the same "
"folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

# 7a95604f5f124816b423da4c64a2012c
#: ../../topics/i18n/translation.txt:1225
msgid "Update the system PATH:"
msgstr ""

# 074cd2acad7e4c90844e8fb18fc15478
#: ../../topics/i18n/translation.txt:1227
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

# fa98837132df4990bc7f5313b02f223d
#: ../../topics/i18n/translation.txt:1228
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

# 1839215a475541669fa21a1cef85c1e1
#: ../../topics/i18n/translation.txt:1229
msgid ""
"Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable "
"value`` field."
msgstr ""

# 0e6cfd1edd354afeb3b90207ae3e93f6
#: ../../topics/i18n/translation.txt:1234
msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

# ed7c25db5bc34c448793373fe8b51e58
#: ../../topics/i18n/translation.txt:1242
msgid "Miscellaneous"
msgstr ""

# 9512f9cef8ad47349aac139889d821e4
#: ../../topics/i18n/translation.txt:1247
msgid "The ``set_language`` redirect view"
msgstr ""

# a39d9e590f2f442898ac899108fab56c
#: ../../topics/i18n/translation.txt:1253
msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""

# 08a867483b1e45f5bcf8dbcbda1b7e82
#: ../../topics/i18n/translation.txt:1257
msgid ""
"Make sure that the following item is in your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` list in your settings file::"
msgstr ""

# d91009ee499844b3b82f00a52388f39c
#: ../../topics/i18n/translation.txt:1262
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

# 9fa128d1dcd149be8653eae57a472beb
#: ../../topics/i18n/translation.txt:1266
msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

# d1d702e44d164b48815edd73647f3790
#: ../../topics/i18n/translation.txt:1270
msgid ""
"Make sure that you don't include the above URL within :func:`~django.conf."
"urls.i18n.i18n_patterns` - it needs to be language-independent itself to "
"work correctly."
msgstr ""

# e1dc8979292b4c2e9b3c9edffa4d095f
#: ../../topics/i18n/translation.txt:1274
msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. Otherwise, it saves the language "
"choice in a cookie that is by default named ``django_language``. (The name "
"can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

# 2537ca52fc2f4c3eae0d491185897eff
#: ../../topics/i18n/translation.txt:1280
msgid ""
"After setting the language choice, Django redirects the user, following this "
"algorithm:"
msgstr ""

# 835861bc686d44bca72660b9add43bf2
#: ../../topics/i18n/translation.txt:1283
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

# a0357e9472b8497d91fb1b48611b34cb
#: ../../topics/i18n/translation.txt:1284
msgid ""
"If that doesn't exist, or is empty, Django tries the URL in the ``Referrer`` "
"header."
msgstr ""

# bc58eae645b84bd9b43d0cd5bb946b5b
#: ../../topics/i18n/translation.txt:1286
msgid ""
"If that's empty -- say, if a user's browser suppresses that header -- then "
"the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

# 44db68cae99844af87df69e3fa0c2176
#: ../../topics/i18n/translation.txt:1289
msgid "Here's example HTML template code:"
msgstr ""

# 1f20d31601df4e43a67261ace40c483c
#: ../../topics/i18n/translation.txt:1305
msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""

# 16a39e8b3f204360941fe9bf8e9afe1e
#: ../../topics/i18n/translation.txt:1309
msgid "Using translations outside views and templates"
msgstr ""

# 59e1e4075a984d628f44ea7261c18d69
#: ../../topics/i18n/translation.txt:1311
msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

# 2562f2311d664740b8a6dc5ae89040f5
#: ../../topics/i18n/translation.txt:1332
msgid ""
"Calling this function with the value 'de' will give you ``\"Willkommen\"``, "
"regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

# f439eef372bc42a5867a5339d0e7c2b5
#: ../../topics/i18n/translation.txt:1335
msgid ""
"Functions of particular interest are ``django.utils.translation.get_language"
"()`` which returns the language used in the current thread, ``django.utils."
"translation.activate()`` which activates a translation catalog for the "
"current thread, and ``django.utils.translation.check_for_language()`` which "
"checks if the given language is supported by Django."
msgstr ""

# 36ee3cc7533c4f3389a0b38ba0064971
#: ../../topics/i18n/translation.txt:1342
msgid "Implementation notes"
msgstr ""

# 31983d30f31f4b23a4bb990744507701
#: ../../topics/i18n/translation.txt:1347
msgid "Specialties of Django translation"
msgstr ""

# d455cba54f754c0a8274a198bbbf365e
#: ../../topics/i18n/translation.txt:1349
msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""

# 0977d2d3f1184b7d9508445789d01d13
#: ../../topics/i18n/translation.txt:1353
msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

# 551254dfd3eb4b1eb6ddb6344713c9a8
#: ../../topics/i18n/translation.txt:1360
msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

# 2f63dfd858dd44ff96a880cf051c6976
#: ../../topics/i18n/translation.txt:1366
msgid "How Django discovers language preference"
msgstr ""

# 4e6803f7a3994528b6ded9d4ce0c1e09
#: ../../topics/i18n/translation.txt:1368
msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""

# ca47eb5ca56d407aa2b272d21259e8ad
#: ../../topics/i18n/translation.txt:1372
msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""

# 101590031d3940da8f9984a5924d1071
#: ../../topics/i18n/translation.txt:1375
msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no other translator finds a translation."
msgstr ""

# 2c65d70626404c38870f03524f33d0a3
#: ../../topics/i18n/translation.txt:1379
msgid ""
"If all you want to do is run Django with your native language, and a "
"language file is available for it, all you need to do is set :setting:"
"`LANGUAGE_CODE`."
msgstr ""

# 684e7d811a8d497491bb15e5593d1ba0
#: ../../topics/i18n/translation.txt:1382
msgid ""
"If you want to let each individual user specify which language he or she "
"prefers, use ``LocaleMiddleware``. ``LocaleMiddleware`` enables language "
"selection based on data from the request. It customizes content for each "
"user."
msgstr ""

# eb487fd018084ee3aaf64a2541433555
#: ../../topics/i18n/translation.txt:1386
msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting. Because "
"middleware order matters, you should follow these guidelines:"
msgstr ""

# cb797aa49c2c45359c19eaf451e80cf2
#: ../../topics/i18n/translation.txt:1390
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

# 46d85ba0ac924c59a46668b7ac0ad8fd
#: ../../topics/i18n/translation.txt:1391
msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""

# f6f63ad8e3bd49f09b88fb542a455bcf
#: ../../topics/i18n/translation.txt:1395
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

# c8d6768e812a44999c1fb364ac5cc1f5
#: ../../topics/i18n/translation.txt:1397
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

# 2c6c263bc8614c589c72573d8878c174
#: ../../topics/i18n/translation.txt:1405
msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""

# 4faf13afc8574969942019c5fc98db66
#: ../../topics/i18n/translation.txt:1408
msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""

# 58a0d734e43b429a9c817e810713eb9f
#: ../../topics/i18n/translation.txt:1413
msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

# 8c96f87d0bf34e44a1442f9e2655c3fe
#: ../../topics/i18n/translation.txt:1418
msgid ""
"Failing that, it looks for a ``django_language`` key in the current user's "
"session."
msgstr ""

# 38f5d0b6af2244b5ae5a3cf495ce9820
#: ../../topics/i18n/translation.txt:1421
msgid "Failing that, it looks for a cookie."
msgstr ""

# 02f7461c09b7406e860bc87a6b73a6e3
#: ../../topics/i18n/translation.txt:1423
msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""

# dabd4837c92e4bf5b9255be475428079
#: ../../topics/i18n/translation.txt:1426
msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

# 64bf614ab54d4020a1bc233cb4f1925a
#: ../../topics/i18n/translation.txt:1431
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

# d8311f4e4cad43868d129bf4dd130fb7
#: ../../topics/i18n/translation.txt:1437
msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

# 57b46ce74c044f67bfa9b0952f575418
#: ../../topics/i18n/translation.txt:1441
msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

# d7976230d0944f62b7e074bec824bfa7
#: ../../topics/i18n/translation.txt:1446
msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. 예를 들어 ::"

# 3cace16914924d22a420bd674bea60bf
#: ../../topics/i18n/translation.txt:1456
msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

# 93f0ccd7955b42b9ae9ee24ab2411ac9
#: ../../topics/i18n/translation.txt:1460
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, it's OK to mark the languages as translation strings -- but "
"use a \"dummy\" ``ugettext()`` function, not the one in ``django.utils."
"translation``. You should *never* import ``django.utils.translation`` from "
"within your settings file, because that module in itself depends on the "
"settings, and that would cause a circular import."
msgstr ""

# 98b366adc34b4521b6572d438e9c4457
#: ../../topics/i18n/translation.txt:1468
msgid ""
"The solution is to use a \"dummy\" ``ugettext()`` function. Here's a sample "
"settings file::"
msgstr ""

# 1a99373abb3c440182a41c583764d171
#: ../../topics/i18n/translation.txt:1478
msgid ""
"With this arrangement, :djadmin:`django-admin.py makemessages "
"<makemessages>` will still find and mark these strings for translation, but "
"the translation won't happen at runtime -- so you'll have to remember to "
"wrap the languages in the *real* ``ugettext()`` in any code that uses :"
"setting:`LANGUAGES` at runtime."
msgstr ""

# 0a253d44a7ab45118d8ffc262196cfdd
#: ../../topics/i18n/translation.txt:1484
msgid ""
"The ``LocaleMiddleware`` can only select languages for which there is a "
"Django-provided base translation. If you want to provide translations for "
"your application that aren't already in the set of translations in Django's "
"source tree, you'll want to provide at least a basic one as described in "
"the :ref:`Locale restrictions<locale-restrictions>` note."
msgstr ""

# 88c5847c782d4eb0a2175ba1044e6743
#: ../../topics/i18n/translation.txt:1491
msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's a "
"simple example::"
msgstr ""

# 1bcc6af5279046d5be40fca1c68389d1
#: ../../topics/i18n/translation.txt:1502
msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""

# 0ea2b9bc27e945c6855fe5c1ca1078f5
#: ../../topics/i18n/translation.txt:1514
msgid "How Django discovers translations"
msgstr ""

# f9390c4c6bf44013b0bec27634d1ba09
#: ../../topics/i18n/translation.txt:1516
msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

# d85bcca13dfc4f63a3dd662231899228
#: ../../topics/i18n/translation.txt:1522
msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

# e33699c128794dcd9553780671cc3853
#: ../../topics/i18n/translation.txt:1525
msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

# a7ebbda36827474e891434e663920b04
#: ../../topics/i18n/translation.txt:1528
msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""

# 5720dd04653642eab99aa05d4865fd07
#: ../../topics/i18n/translation.txt:1533
msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See the :ref:"
"`javascript_catalog view documentation <javascript_catalog-view>` for more "
"details."
msgstr ""

# d1e429c6922f43cea665b55f3ea47d64
#: ../../topics/i18n/translation.txt:1538
msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc."
msgstr ""

# 153e456f77f14315b72ce4ceb558b4a8
#: ../../topics/i18n/translation.txt:1542
msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can just "
"build a big project out of several apps and put all translations into one "
"big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""

# 0e20722740c94c74ad3dcd689d123c74
#: ../../topics/i18n/translation.txt:1547
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

# e0eed934193246a59537602779f0f49d
#: ../../topics/i18n/translation.txt:1549
msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 3f1d7e84457447f39be56c8f0bee0cc0
#: ../../topics/i18n/translation.txt:1551
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 3562d30d39f84cc19ea56c7f752d745f
#: ../../topics/i18n/translation.txt:1552
msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 100d33620edd4a39bb7117c142acc8de
#: ../../topics/i18n/translation.txt:1554
msgid ""
"To create message files, you use the :djadmin:`django-admin.py makemessages "
"<makemessages>` tool. You only need to be in the same directory where the "
"``locale/`` directory is located. And you use :djadmin:`django-admin.py "
"compilemessages <compilemessages>` to produce the binary ``.mo`` files that "
"are used by ``gettext``."
msgstr ""

# 9dfaaacbc82443eea9e497267ff84739
#: ../../topics/i18n/translation.txt:1559
msgid ""
"You can also run :djadmin:`django-admin.py compilemessages --settings=path."
"to.settings <compilemessages>` to make the compiler process all the "
"directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

# e7bc3032c6c54a33bdd79a15fc6c8fd2
#: ../../topics/i18n/translation.txt:1563
msgid ""
"Finally, you should give some thought to the structure of your translation "
"files. If your applications need to be delivered to other users and will be "
"used in other projects, you might want to use app-specific translations. But "
"using app-specific translations and project-specific translations could "
"produce weird problems with :djadmin:`makemessages`: it will traverse all "
"directories below the current path and so might put message IDs into a "
"unified, common message file for the current project that are already in "
"application message files."
msgstr ""

# 5ba99aa3ab1a4e0586778bf9ebb679fa
#: ../../topics/i18n/translation.txt:1571
msgid ""
"The easiest way out is to store applications that are not part of the "
"project (and so carry their own translations) outside the project tree. That "
"way, :djadmin:`django-admin.py makemessages <makemessages>`, when ran on a "
"project level will only extract strings that are connected to your explicit "
"project and not strings that are distributed independently."
msgstr ""

# 14e5671961ab4ee5905777afa3a50170
#: ../../topics/index.txt:2
msgid "Using Django"
msgstr ""

# 12803b35e49e455cb4623f15d2d6731d
#: ../../topics/index.txt:4
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

# 3e026cfa4e0546d49c4cd53e503f0cc2
#: ../../topics/install.txt:3
msgid "How to install Django"
msgstr ""

# 709f91898d374a23a9e1cb17fabd31d0
#: ../../topics/install.txt:5
msgid "This document will get you up and running with Django."
msgstr ""

# 1d23af4391c248a79370f20cb45d6b5d
#: ../../topics/install.txt:8
msgid "Install Python"
msgstr "파이썬 설치"

# 2d8de5a18ea8490ab1f28b996327f51c
#: ../../topics/install.txt:10
msgid "Being a Python Web framework, Django requires Python."
msgstr ""

# 13aab10180274f88a95b0602e910e0a3
#: ../../topics/install.txt:12
msgid ""
"It works with any Python version from 2.6.5 to 2.7. It also features "
"experimental support for versions from 3.2.3 to 3.3."
msgstr ""

# 4f016a8824d445e085e3484d3b456102
#: ../../topics/install.txt:15
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# 7f64ca6ebc3a4c988f64380ad176e350
#: ../../topics/install.txt:20
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# a3d1d7d13aea47f1a2f82e11be8bf704
#: ../../topics/install.txt:27
msgid ""
"On Windows, you might need to adjust your ``PATH`` environment variable to "
"include paths to Python executable and additional scripts. For example, if "
"your Python is installed in ``C:\\Python27\\``, the following paths need to "
"be added to ``PATH``::"
msgstr ""

# 52f7bb4c466c4f8b8d4ea8c6495b1d3d
#: ../../topics/install.txt:35
msgid "Install Apache and mod_wsgi"
msgstr ""

# 54dda1b91d0e41a38d0da36b764a7865
#: ../../topics/install.txt:37
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""

# fda94c9a5345451f876cdfe0559dd860
#: ../../topics/install.txt:42
msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and "
"a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it "
"embeds Python within Apache and loads Python code into memory when the "
"server starts. Code stays in memory throughout the life of an Apache "
"process, which leads to significant performance gains over other server "
"arrangements. In daemon mode, mod_wsgi spawns an independent daemon process "
"that handles requests. The daemon process can run as a different user than "
"the Web server, possibly leading to improved security, and the daemon "
"process can be restarted without restarting the entire Apache Web server, "
"possibly making refreshing your codebase more seamless. Consult the mod_wsgi "
"documentation to determine which mode is right for your setup. Make sure you "
"have Apache installed, with the mod_wsgi module activated. Django will work "
"with any version of Apache that supports mod_wsgi."
msgstr ""

# 02565db194724e139f784019b92d3f89
#: ../../topics/install.txt:58
msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""

# 953444cf6b944cbeaa8eefa2dca26ec5
#: ../../topics/install.txt:62
msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/"
"uwsgi>`; it works very well with `nginx`_. Another is :doc:`FastCGI </howto/"
"deployment/fastcgi>`, perfect for using Django with servers other than "
"Apache. Additionally, Django follows the WSGI spec (:pep:`3333`), which "
"allows it to run on a variety of server platforms. See the `server-"
"arrangements wiki page`_ for specific installation instructions for each "
"platform."
msgstr ""

# 3a8a7b968cc741c5bf324388cbc622a8
#: ../../topics/install.txt:78
msgid "Get your database running"
msgstr ""

# bb4d61fa723c43648463cf5cfc9392cc
#: ../../topics/install.txt:80
msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and "
"SQLite_."
msgstr ""

# 59b258101559475c9d142afb0202d625
#: ../../topics/install.txt:85
msgid ""
"If you are developing a simple project or something you don't plan to deploy "
"in a production environment, SQLite is generally the simplest option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database as you plan "
"on using in production."
msgstr ""

# 8ff363f56eab405c86ee786a35801ccd
#: ../../topics/install.txt:92
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

# c614bd9cf94d4cec9ca7328336435322
#: ../../topics/install.txt:95
msgid "`Sybase SQL Anywhere`_"
msgstr ""

# 23cb5aa29d7e4c728abe9b3cb65a573f
#: ../../topics/install.txt:96
msgid "`IBM DB2`_"
msgstr ""

# e66a20cd51664384b90612495b8238e5
#: ../../topics/install.txt:97
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

# 2d77ecb5b4134f9db1fed756e2674889
#: ../../topics/install.txt:98
msgid "Firebird_"
msgstr ""

# b043f97252604546b3024ec37aa8377a
#: ../../topics/install.txt:99
msgid "ODBC_"
msgstr ""

# 35ab2ab00aeb46628f587e9a3f693dbd
#: ../../topics/install.txt:101
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""

# faf5345c567f4f85a59f4e3c8c8de6a6
#: ../../topics/install.txt:106
msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr ""

# bb18679f4c0f49e5b2e1aca473b69de7
#: ../../topics/install.txt:109
msgid ""
"If you're using PostgreSQL, you'll need the ``postgresql_psycopg2`` package. "
"You might want to refer to our :ref:`PostgreSQL notes <postgresql-notes>` "
"for further technical details specific to this database."
msgstr ""

# 17231515e4614e5f8a7291c85928a4af
#: ../../topics/install.txt:113
msgid ""
"If you're on Windows, check out the unofficial `compiled Windows version`_."
msgstr ""

# 2943aa68b166470cb2a2f64b96f435c2
#: ../../topics/install.txt:115
msgid ""
"If you're using MySQL, you'll need the ``MySQL-python`` package, version "
"1.2.1p2 or higher. You will also want to read the database-specific :ref:"
"`notes for the MySQL backend <mysql-notes>`."
msgstr ""

# be6c9e679e48482eb133fe07b104bd24
#: ../../topics/install.txt:119
msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the database-specific :ref:`notes for the Oracle backend <oracle-notes>` for "
"important information regarding supported versions of both Oracle and "
"``cx_Oracle``."
msgstr ""

# 0ba73ea091724abe9139997135e8cb5f
#: ../../topics/install.txt:124
msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr ""

# 90448ad1bacc4569b6aa7eb76592c1a0
#: ../../topics/install.txt:127
msgid ""
"If you plan to use Django's ``manage.py syncdb`` command to automatically "
"create database tables for your models, you'll need to ensure that Django "
"has permission to create and alter tables in the database you're using; if "
"you plan to manually create the tables, you can simply grant Django "
"``SELECT``, ``INSERT``, ``UPDATE`` and ``DELETE`` permissions. On some "
"databases, Django will need ``ALTER TABLE`` privileges during ``syncdb`` but "
"won't issue ``ALTER TABLE`` statements on a table once ``syncdb`` has "
"created it."
msgstr ""

# 9814e251f80b44068371511379d6fd78
#: ../../topics/install.txt:136
msgid ""
"If you're using Django's :doc:`testing framework</topics/testing>` to test "
"database queries, Django will need permission to create a test database."
msgstr ""

# 60d6280998aa4a318c5a4d2051c624cd
#: ../../topics/install.txt:155
msgid "Remove any old versions of Django"
msgstr ""

# 8db2ec90521b4fb4acb63ab6ae99ad34
#: ../../topics/install.txt:157
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to uninstall the old Django version before installing the new "
"version."
msgstr ""

# dc5a3a947e394778ab06c0069c8a5232
#: ../../topics/install.txt:161
msgid ""
"If you installed Django using pip_ or ``easy_install`` previously, "
"installing with pip_ or ``easy_install`` again will automatically take care "
"of the old version, so you don't need to do it yourself."
msgstr ""

# 9d1b0ff4b5f0455f8f29dbe1521dacdf
#: ../../topics/install.txt:165
msgid ""
"If you previously installed Django using ``python setup.py install``, "
"uninstalling is as simple as deleting the ``django`` directory from your "
"Python ``site-packages``. To find the directory you need to remove, you can "
"run the following at your shell prompt (not the interactive Python prompt):"
msgstr ""

# 64f2dbcabd584ba283886bf8a1ac66f3
#: ../../topics/install.txt:178
msgid "Install the Django code"
msgstr ""

# 8f5012e578fc41e0adde59a0b7e64fb7
#: ../../topics/install.txt:180
msgid ""
"Installation instructions are slightly different depending on whether you're "
"installing a distribution-specific package, downloading the latest official "
"release, or fetching the latest development version."
msgstr ""

# e287fd4e7a8b4347bef7de29c2599365
#: ../../topics/install.txt:184
msgid "It's easy, no matter which way you choose."
msgstr ""

# 517a3f3de5e64af786f97ac1cd6cf26a
#: ../../topics/install.txt:187
msgid "Installing a distribution-specific package"
msgstr ""

# 224c0ea5dda84f88b132852afb46e6d3
#: ../../topics/install.txt:189
msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if "
"your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and easy upgrade paths."
msgstr ""

# 6862244a97fc487baca628f9c53e5fea
#: ../../topics/install.txt:197
msgid "Installing an official release with ``pip``"
msgstr ""

# b5179a23c47c43fb90f91ef6a842fb49
#: ../../topics/install.txt:199
msgid "This is the recommended way to install Django."
msgstr ""

# 6c18bc97b5c84fcea36b6dc035312440
#: ../../topics/install.txt:201
msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your "
"distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. (If it's outdated, you'll know because installation won't "
"work.)"
msgstr ""

# 9e930c68e7cd46e8b3d44147bd29573d
#: ../../topics/install.txt:206
msgid ""
"(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools "
"provide isolated Python environments, which are more practical than "
"installing packages systemwide. They also allow installing packages without "
"administrator privileges. It's up to you to decide if you want to learn and "
"use them."
msgstr ""

# 84cb70f9fe854da4bb35b5d345652124
#: ../../topics/install.txt:212
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo pip install Django`` at the shell prompt. If you're using "
"Windows, start a command shell with administrator privileges and run the "
"command ``pip install Django``. This will install Django in your Python "
"installation's ``site-packages`` directory."
msgstr ""

# 7a37eaa50e134069a180bff5c0e4c524
#: ../../topics/install.txt:218
msgid ""
"If you're using a virtualenv, you don't need ``sudo`` or administrator "
"privileges, and this will install Django in the virtualenv's ``site-"
"packages`` directory."
msgstr ""

# 70f59346a8084e489360a8727413fcf2
#: ../../topics/install.txt:228
msgid "Installing an official release manually"
msgstr ""

# 3c595fbd1f1242d38bda69bdf507817c
#: ../../topics/install.txt:230
msgid "Download the latest release from our `download page`_."
msgstr ""

# a1d986f889e84fe48126e2f79d13ae0a
#: ../../topics/install.txt:232
msgid ""
"Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where ``X."
"Y`` is the version number of the latest release). If you're using Windows, "
"you can download the command-line tool bsdtar_ to do this, or you can use a "
"GUI-based tool such as 7-zip_."
msgstr ""

# f2b9da73a4554254bba3629be524c96e
#: ../../topics/install.txt:237
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

# a170a6ec576e47488ee0aadd07722103
#: ../../topics/install.txt:239
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo python setup.py install`` at the shell prompt. If you're "
"using Windows, start a command shell with administrator privileges and run "
"the command ``python setup.py install``. This will install Django in your "
"Python installation's ``site-packages`` directory."
msgstr ""

# 7bbf7ad6cc22494caaefda08144a938e
#: ../../topics/install.txt:247
msgid ""
"If you use this installation technique, it is particularly important that "
"you :ref:`remove any existing installations<removing-old-versions-of-"
"django>` of Django first. Otherwise, you can end up with a broken "
"installation that includes files from previous versions that have since been "
"removed from Django."
msgstr ""

# eccabc33613f4fb18efb9237b4f911e6
#: ../../topics/install.txt:261
msgid "Installing the development version"
msgstr ""

# 359e1a38c0d74f77a8a41e27c1e4507b
#: ../../topics/install.txt:265
msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""

# 221bc5a8e6ba4e2390bf0c6da60827a1
#: ../../topics/install.txt:276
msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

# 9bdced99fecf4ddbb1f0f4ce5065cad4
#: ../../topics/install.txt:279
msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

# 3192a1953ec94de9943991b787dce931
#: ../../topics/install.txt:282
msgid ""
"Check out Django's main development branch (the 'trunk' or 'master') like so:"
msgstr ""

# ab17d2dd71dc4f11995d015565be57c5
#: ../../topics/install.txt:289
msgid ""
"This will create a directory ``django-trunk`` in your current directory."
msgstr ""

# 5ad81caafb4746649c864d9d536b570a
#: ../../topics/install.txt:291
msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is via pip_. Run the following command:"
msgstr ""

# b2031556dd304b7ea956392c9a85e9b0
#: ../../topics/install.txt:298
msgid "(If using a virtualenv_ you can omit ``sudo``.)"
msgstr ""

# e5360fe1e3894e59b18f207481c6cff6
#: ../../topics/install.txt:300
msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin.py`` utility command available. In other words, you're all set!"
msgstr ""

# 3629de60cf9d40bbb0a653812a60e03c
#: ../../topics/install.txt:304
msgid ""
"If you don't have pip_ available, see the alternative instructions for "
"`installing the development version without pip`_."
msgstr ""

# a1fdce150f9c4a2aa4e0f608cdc5618e
#: ../../topics/install.txt:309
msgid ""
"Don't run ``sudo python setup.py install``, because you've already carried "
"out the equivalent actions in step 3."
msgstr ""

# 0088405e97b44787947465fd8fe4b15f
#: ../../topics/install.txt:312
msgid ""
"When you want to update your copy of the Django source code, just run the "
"command ``git pull`` from within the ``django-trunk`` directory. When you do "
"this, Git will automatically download any changes."
msgstr ""

# 87924de1fe6c435b9df1628a6b9117a0
#: ../../topics/install.txt:321
msgid "Installing the development version without pip"
msgstr ""

# f78b77b5937c4f8abfdc3c98e2c75436
#: ../../topics/install.txt:323
msgid ""
"If you don't have pip_, you can instead manually `modify Python's search "
"path`_."
msgstr ""

# 8e33e7281f604f67b28d12af6bd6d277
#: ../../topics/install.txt:326
msgid ""
"First follow steps 1 and 2 above, so that you have a ``django-trunk`` "
"directory with a checkout of Django's latest code in it. Then add a ``.pth`` "
"file containing the full path to the ``django-trunk`` directory to your "
"system's ``site-packages`` directory. For example, on a Unix-like system:"
msgstr ""

# a655676ecfeb48e9af70530b0918a694
#: ../../topics/install.txt:335
msgid ""
"In the above line, change ``WORKING-DIR/django-trunk`` to match the full "
"path to your new ``django-trunk`` directory, and change ``SITE-PACKAGES-"
"DIR`` to match the location of your system's ``site-packages`` directory."
msgstr ""

# 2dce0c0a128143b781de6f3180df7326
#: ../../topics/install.txt:339
msgid ""
"The location of the ``site-packages`` directory depends on the operating "
"system, and the location in which Python was installed. To find your "
"system's ``site-packages`` location, execute the following:"
msgstr ""

# 8c1d01de5d7646a69f4f80243e5bb8f5
#: ../../topics/install.txt:347
msgid ""
"(Note that this should be run from a shell prompt, not a Python interactive "
"prompt.)"
msgstr ""

# 68e2df5851b3468495369315b68f5cc0
#: ../../topics/install.txt:350
msgid ""
"Some Debian-based Linux distributions have separate ``site-packages`` "
"directories for user-installed packages, such as when installing Django from "
"a downloaded tarball. The command listed above will give you the system's "
"``site-packages``, the user's directory can be found in ``/usr/local/lib/`` "
"instead of ``/usr/lib/``."
msgstr ""

# 4580ab2e26cf459f97fe4281f20ec38e
#: ../../topics/install.txt:356
msgid ""
"Next you need to make the ``django-admin.py`` utility available in your "
"shell PATH."
msgstr ""

# ed0d2e58326b466d8b69bcd2dad51920
#: ../../topics/install.txt:359
msgid ""
"On Unix-like systems, create a symbolic link to the file ``django-trunk/"
"django/bin/django-admin.py`` in a directory on your system path, such as ``/"
"usr/local/bin``. For example:"
msgstr ""

# 0662d4a6a2384aee8cf22c1256a8f0c7
#: ../../topics/install.txt:367
msgid ""
"(In the above line, change WORKING-DIR to match the full path to your new "
"``django-trunk`` directory.)"
msgstr ""

# 5a7785994fa54878a41407e3a018806d
#: ../../topics/install.txt:370
msgid ""
"This simply lets you type ``django-admin.py`` from within any directory, "
"rather than having to qualify the command with the full path to the file."
msgstr ""

# fcf777b6595b49489fd7a7c2ea2d0923
#: ../../topics/install.txt:373
msgid ""
"On Windows systems, the same result can be achieved by copying the file "
"``django-trunk/django/bin/django-admin.py`` to somewhere on your system "
"path, for example ``C:\\Python27\\Scripts``."
msgstr ""

# 492db5e3c1bf457eb88e7cf782788f16
#: ../../topics/logging.txt:3
msgid "Logging"
msgstr ""

# e48be15eb29e4d19a69b5933641e0a6c
#: ../../topics/logging.txt:9
msgid "A quick logging primer"
msgstr ""

# 78f1b1ff64e94f94a36846a79ee2d51b
#: ../../topics/logging.txt:11
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""

# a3efba0609164297956f5ab66c45b987
#: ../../topics/logging.txt:17
msgid "The cast of players"
msgstr ""

# 49564a897c364408a3f72b095af08768
#: ../../topics/logging.txt:19
msgid "A Python logging configuration consists of four parts:"
msgstr ""

# 0ce10a95f1fc45619ecbbfa89d331963
#: ../../topics/logging.txt:21
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

# 6085ed0bd89f4781b3992a7ff79363ad
#: ../../topics/logging.txt:22
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

# fc060909c31d4ae08636b9e969c9d754
#: ../../topics/logging.txt:23
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

# 06b6eccebb224470aa73ca62a508d7b1
#: ../../topics/logging.txt:24
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

# fef28eda9d7d419d8a7647c5aa2112e8
# a9927b458f0a440eacf97d34ab009bcb
#: ../../topics/logging.txt:29 ../../topics/logging.txt:395
msgid "Loggers"
msgstr ""

# 448d6d52f6154b22a13fde361d0363b3
#: ../../topics/logging.txt:31
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""

# d47b5ead90114727a5a1dcaf5ea5236b
#: ../../topics/logging.txt:34
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""

# f448d09af1b743bd94326239383cc29f
#: ../../topics/logging.txt:38
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

# c982c8b5ef454bf2847110bcf239ffd6
#: ../../topics/logging.txt:40
msgid "``INFO``: General system information"
msgstr ""

# eb738735d8c7424e990825966aa1dd2d
#: ../../topics/logging.txt:42
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

# 501fbf56ff574037ad1ffd6f50e4226b
#: ../../topics/logging.txt:45
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

# 37e659abb9464612b16bcdc93c6b1061
#: ../../topics/logging.txt:48
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

# d775c1637acf4739a31b9c85c9401dec
#: ../../topics/logging.txt:51
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""

# be5db267426c4956b51a5090136b340c
#: ../../topics/logging.txt:57
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

# 357ad920770b4d0fb94416d3e8855ea4
#: ../../topics/logging.txt:63
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""

# 6d31b2cbc7f84dc09622e72b8ade5216
# 2b2a08ff48ad415883df3103bf4268a0
#: ../../topics/logging.txt:69 ../../topics/logging.txt:438
msgid "Handlers"
msgstr ""

# 53d7ee92fac647e0b7ca8191f996e3a8
#: ../../topics/logging.txt:71
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""

# e5e2b68734024a76a8322d4eeed44936
#: ../../topics/logging.txt:75
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""

# 6049516d29d747cfb98e4704f880fc79
#: ../../topics/logging.txt:79
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

# 062dab9248b949a9ab0d8a1543666a0d
# 66b618cd03ca4dd588626ea80c7db8ac
# 4dbd2fd8743743d0912ecef1075fe1d6
#: ../../topics/logging.txt:90 ../../topics/logging.txt:483
#: ../../topics/templates.txt:124
msgid "Filters"
msgstr ""

# b5d379ce9e0f4fe58462e580e84b28c3
#: ../../topics/logging.txt:92
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""

# f7b03a9ca2ae4797bfa5803648832157
#: ../../topics/logging.txt:95
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

# 6a5db6bb29d94be78567445f4ecd7831
#: ../../topics/logging.txt:101
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

# 019cd4018b144103aa92cb678e931fec
#: ../../topics/logging.txt:106
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""

# d8eca62c07a142edbfde2aa579f0aee9
#: ../../topics/logging.txt:112
msgid "Formatters"
msgstr ""

# 740e17fc5e714fa4b02ab554b0a13942
#: ../../topics/logging.txt:114
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string; however, you can also write custom formatters to "
"implement specific formatting behavior."
msgstr ""

# 52949b7c669a457899b3a760ff334bef
#: ../../topics/logging.txt:120
msgid "Using logging"
msgstr ""

# bc7c13908b7d43f59f84b653d4d2959b
#: ../../topics/logging.txt:122
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you "
"need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""

# 9e03a4e25c294a93ae82d5698f93d701
#: ../../topics/logging.txt:138
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr ""

# ec257c0904b14296b6e9b3e3f97c5022
#: ../../topics/logging.txt:142
msgid "Naming loggers"
msgstr ""

# 039eb188b44241a280e489c575e7bc89
#: ../../topics/logging.txt:144
msgid ""
"The call to :meth:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name "
"is used to identify the logger for configuration purposes."
msgstr ""

# 05efcfe5a43646f894b5bc26b3a9bec8
#: ../../topics/logging.txt:149
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"python module that contains the logger. This allows you to filter and handle "
"logging calls on a per-module basis. However, if you have some other way of "
"organizing your logging messages, you can provide any dot-separated name to "
"identify your logger::"
msgstr ""

# 2b04590d87144541a0a2352140b199a2
#: ../../topics/logging.txt:158
msgid ""
"The dotted paths of logger names define a hierarchy. The ``project."
"interesting`` logger is considered to be a parent of the ``project."
"interesting.stuff`` logger; the ``project`` logger is a parent of the "
"``project.interesting`` logger."
msgstr ""

# 098c7c4bb66141599daadae288ebfdbf
#: ../../topics/logging.txt:163
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

# 6b2516ebfb814a439bf5a021c207ec22
#: ../../topics/logging.txt:171
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to it's parents, you can turn off this "
"behavior."
msgstr ""

# 61bac9f328984683a1adee9462be2b27
#: ../../topics/logging.txt:176
msgid "Making logging calls"
msgstr ""

# 6ee26f364c934089a0d80b069dc15066
#: ../../topics/logging.txt:178
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr ""

# e7d24a84755947639bf0b12aa80670dc
#: ../../topics/logging.txt:181
msgid "``logger.critical()``"
msgstr ""

# a03b46b35b714461b00c59adc7fb2d3e
#: ../../topics/logging.txt:182
msgid "``logger.error()``"
msgstr ""

# a87371fe029b4d399bd8b0ace859e437
#: ../../topics/logging.txt:183
msgid "``logger.warning()``"
msgstr ""

# c66705693f0b47b791e22c3b342b967f
#: ../../topics/logging.txt:184
msgid "``logger.info()``"
msgstr ""

# fa183b7b56a944cbb13d230be1f8482c
#: ../../topics/logging.txt:185
msgid "``logger.debug()``"
msgstr ""

# 9e7596cc711d418781fc7735a8b1ebbd
#: ../../topics/logging.txt:187
msgid "There are two other logging calls available:"
msgstr ""

# 03f2ae5f865b481f8154bb3c8d0eaf22
#: ../../topics/logging.txt:189
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

# 0303bfcac1404d92a91bdb862fd77159
#: ../../topics/logging.txt:192
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""

# be96c0d124ff4fce82a2078a9f2d4402
#: ../../topics/logging.txt:198
msgid "Configuring logging"
msgstr ""

# 915cbc29758440b08a7ac4c933cb2a63
#: ../../topics/logging.txt:200
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""

# 47cf4288c13f40349b14ff6dc730340b
#: ../../topics/logging.txt:204
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the `dictConfig format`_."
msgstr ""

# ba1b39ca5b23462e8c9f6eb35bc7151e
#: ../../topics/logging.txt:209
msgid ""
"``logging.dictConfig`` is a builtin library in Python 2.7. In order to make "
"this library available for users of earlier Python versions, Django includes "
"a copy as part of ``django.utils.log``. If you have Python 2.7 or later, the "
"system native library will be used; if you have Python 2.6, Django's copy "
"will be used."
msgstr ""

# 513821a95c224c699b94e866f1a2f7c7
#: ../../topics/logging.txt:215
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""

# 23ad5c64051d4f3793f993229a1a8f2c
#: ../../topics/logging.txt:221
msgid ""
"Prior to Django 1.5, the :setting:`LOGGING` setting overwrote the :ref:"
"`default Django logging configuration <default-logging-configuration>`. From "
"Django 1.5 forward, the project's logging configuration is merged with "
"Django's defaults, hence you can decide if you want to add to, or replace "
"the existing configuration. To completely override the default "
"configuration, set the ``disable_existing_loggers`` key to True in the :"
"setting:`LOGGING` dictConfig. Alternatively you can redefine some or all of "
"the loggers."
msgstr ""

# 17666b5033834295a6ae52f2f969b1fc
#: ../../topics/logging.txt:229
msgid ""
"Logging is configured as soon as settings have been loaded (either manually "
"using :func:`~django.conf.settings.configure` or when at least one setting "
"is accessed). Since the loading of settings is one of the first things that "
"Django does, you can be certain that loggers are always ready for use in "
"your project code."
msgstr ""

# aebca3ab7ddd4652a62fa4688c705b5d
#: ../../topics/logging.txt:242
msgid ""
"The full documentation for `dictConfig format`_ is the best source of "
"information about logging configuration dictionaries. However, to give you a "
"taste of what is possible, here is an example of a fairly complex logging "
"setup, configured using :meth:`logging.dictConfig`::"
msgstr ""

# 4f283c0952554fcf84cb0326ff2e6332
#: ../../topics/logging.txt:299
msgid "This logging configuration does the following things:"
msgstr ""

# d5d214a1786440f7a9276888a884c10a
#: ../../topics/logging.txt:301
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

# ecf73f7a87834b138e7b49ac9daa25c1
#: ../../topics/logging.txt:304
msgid "Disables all existing logging configurations."
msgstr ""

# 50bfc2ffa2b949cfb53731c471c61724
#: ../../topics/logging.txt:306
msgid "Defines two formatters:"
msgstr ""

# 89c799618c3b4264825f3ffb324ec13b
#: ../../topics/logging.txt:308
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

# 590c5e009b3b4c90aa15d5e1fa7a494a
#: ../../topics/logging.txt:311
msgid ""
"The `format` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in the `formatter documentation`_."
msgstr ""

# 7af5cdbe8429485b94ed2f09d247e920
#: ../../topics/logging.txt:316
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

# da2363a3bf284778846979e7e8b0091e
#: ../../topics/logging.txt:320
msgid ""
"Defines one filter -- :class:`project.logging.SpecialFilter`, using the "
"alias ``special``. If this filter required additional arguments at time of "
"construction, they can be provided as additional keys in the filter "
"configuration dictionary. In this case, the argument ``foo`` will be given a "
"value of ``bar`` when instantiating the :class:`SpecialFilter`."
msgstr ""

# 47936f8315b74c9289b05bba00494af2
#: ../../topics/logging.txt:327
msgid "Defines three handlers:"
msgstr ""

# 7ffecaf8be6f4787bfefe3b4abdb6d28
#: ../../topics/logging.txt:329
msgid ""
"``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message "
"to ``/dev/null``."
msgstr ""

# 74243e677fa644ebabf8d586d8534f75
#: ../../topics/logging.txt:332
msgid ""
"``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) "
"message to stderr. This handler uses the `simple` output format."
msgstr ""

# f1875cb870c34ce08d1057ffb7b422b7
#: ../../topics/logging.txt:336
msgid ""
"``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or "
"higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

# 4e4a3e6550894d219e39476751a85100
#: ../../topics/logging.txt:340
msgid "Configures three loggers:"
msgstr ""

# 7495fa8b448948b7ad624819ad315dbc
#: ../../topics/logging.txt:342
msgid ""
"``django``, which passes all messages at ``INFO`` or higher to the ``null`` "
"handler."
msgstr ""

# b67391a32cdc4c719366a235ab0a4a8c
#: ../../topics/logging.txt:345
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""

# 4311471f26c14612ba4a2ec0204eaadd
#: ../../topics/logging.txt:351
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

# 8c1c54eed8f546d8847f31a549951cb2
#: ../../topics/logging.txt:361
msgid "Custom logging configuration"
msgstr ""

# cfa7bcfef7e744ed840c2c61012e7fc7
#: ../../topics/logging.txt:363
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

# 64aee2f1ac374cd389257a12991ac263
#: ../../topics/logging.txt:366
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :meth:"
"`logging.dictConfig()` method. However, if you want to use a different "
"configuration process, you can use any other callable that takes a single "
"argument. The contents of :setting:`LOGGING` will be provided as the value "
"of that argument when logging is configured."
msgstr ""

# c1e1e94de7934d24aa80647eb6bc9e1e
#: ../../topics/logging.txt:374
msgid "Disabling logging configuration"
msgstr ""

# 052797cb77744fe98a6427fbd673692a
#: ../../topics/logging.txt:376
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

# 87fc9dcc23fa48a2a86b9edf943ae6a7
#: ../../topics/logging.txt:382
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""

# 12f3405907a04b709f88a85bba63b04d
#: ../../topics/logging.txt:389
msgid "Django's logging extensions"
msgstr ""

# e84526a80056435bb84ac6b78d50bf70
#: ../../topics/logging.txt:391
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

# 3300705f595a4f73a014f1dd2e507d69
#: ../../topics/logging.txt:397
msgid "Django provides three built-in loggers."
msgstr ""

# 0a5f491385944a9081df78afd77fd968
#: ../../topics/logging.txt:400
msgid "``django``"
msgstr ""

# 4fa400ad3cbb4f48babccffb6a345518
#: ../../topics/logging.txt:402
msgid ""
"``django`` is the catch-all logger. No messages are posted directly to this "
"logger."
msgstr ""

# 65d35c8b3c714512acce3ed375acc7c8
#: ../../topics/logging.txt:406
msgid "``django.request``"
msgstr ""

# f8da0cbecc78403aa25e1d57c5e7d135
#: ../../topics/logging.txt:408
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

# f1e1975d2cb041b99d1acd347fadf0d4
# 4b0525d847874fcba274110380beabba
#: ../../topics/logging.txt:412 ../../topics/logging.txt:427
msgid "Messages to this logger have the following extra context:"
msgstr ""

# 6ff1869580244987bee87808d2b27897
#: ../../topics/logging.txt:414
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

# fb4d847ffaf445fb8f5c7607b9ceb3a4
#: ../../topics/logging.txt:417
msgid "``request``: The request object that generated the logging message."
msgstr ""

# 336a31fa7c8b4637ae6504c40766a0f7
#: ../../topics/logging.txt:421
msgid "``django.db.backends``"
msgstr ""

# a36b60c4f18e43c88dcf9f6c2d750c52
#: ../../topics/logging.txt:423
msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every SQL statement executed by a request is logged at the ``DEBUG`` level "
"to this logger."
msgstr ""

# c4bcdc8e37554902bcc4b591e414bb3e
#: ../../topics/logging.txt:429
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

# c87b46cb55654bab8a7cd5c158ac1152
#: ../../topics/logging.txt:430
msgid "``sql``: The SQL statement that was executed."
msgstr ""

# 241cabb200444e6e881b893147e7bb31
#: ../../topics/logging.txt:431
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

# 516397618e164f2a9a779a79ca2ea39e
#: ../../topics/logging.txt:433
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

# f8c0da18eb0e4c379e3b0c3bf3555995
#: ../../topics/logging.txt:440
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

# 49ee66384fb7422e8d06d477dff8bfdd
#: ../../topics/logging.txt:445
msgid ""
"This handler sends an email to the site admins for each log message it "
"receives."
msgstr ""

# c7305b3aeb1643af9b9f5de27163ba26
#: ../../topics/logging.txt:448
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email."
msgstr ""

# 3b329b27f2704ced817ad80282515a47
#: ../../topics/logging.txt:451
msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""

# f08d37c29d434c4aa983dad5f78dca73
#: ../../topics/logging.txt:454
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""

# eabeee9941d64477a2203d40db4f372c
#: ../../topics/logging.txt:469
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `Sentry`_ to get the best of both worlds -- the rich "
"information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on :ref:"
"`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 31de6e4f8efb49ba974e3f5f6afe27fe
#: ../../topics/logging.txt:485
msgid ""
"Django provides two log filters in addition to those provided by the Python "
"logging module."
msgstr ""

# de1db42bd02941d391b1723f93cb3463
#: ../../topics/logging.txt:492
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""

# 8c9eff707d4449848bc4dabcd9264681
#: ../../topics/logging.txt:497
msgid ""
"For instance, to filter out :class:`~django.http.UnreadablePostError` "
"(raised when a user cancels an upload) from the admin emails, you would "
"create a filter function::"
msgstr ""

# 160a8cb2d5b74fdf8ad3b0f37ccd2ca9
#: ../../topics/logging.txt:510
msgid "and then add it to your logging config::"
msgstr ""

# 2844981c22f04989910077f4cd54d645
#: ../../topics/logging.txt:530
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

# 37dbfc2678ad401cbfb245526bc5e07b
#: ../../topics/logging.txt:532
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is `False`::"
msgstr ""

# d1306aa77be240058e73dc75178387e2
#: ../../topics/logging.txt:553
msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is `True`."
msgstr ""

# 1632110ac5af45ec8dcdd838d6b575b6
#: ../../topics/logging.txt:559
msgid "Django's default logging configuration"
msgstr ""

# e95a08f845af4481ba223bce9f27e629
#: ../../topics/logging.txt:561
msgid ""
"By default, Django configures the ``django.request`` logger so that all "
"messages with ``ERROR`` or ``CRITICAL`` level are sent to :class:"
"`AdminEmailHandler`, as long as the :setting:`DEBUG` setting is set to "
"``False``."
msgstr ""

# d7e1f2e880e24c0fb07b47f397ea2428
#: ../../topics/logging.txt:565
msgid ""
"All messages reaching the ``django`` catch-all logger when :setting:`DEBUG` "
"is `True` are sent ot the console. They are simply discarded (sent to "
"``NullHandler``) when :setting:`DEBUG` is `False`."
msgstr ""

# 58b3bcb5301b403c93960e58dbde90e7
#: ../../topics/logging.txt:574
msgid ""
"See also :ref:`Configuring logging <configuring-logging>` to learn how you "
"can complement or replace this default logging configuration."
msgstr ""

# 700bd9f11ddc4af7abd8e570926d8e3c
#: ../../topics/pagination.txt:3
msgid "Pagination"
msgstr ""

# 83e23d1224044107b277fee7d6b0465b
#: ../../topics/pagination.txt:8
msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :file:`django/core/paginator.py`."
msgstr ""

# 7847bf34201b4184ad51a62f45e47814
#: ../../topics/pagination.txt:15
msgid ""
"Give :class:`Paginator` a list of objects, plus the number of items you'd "
"like to have on each page, and it gives you methods for accessing the items "
"for each page::"
msgstr ""

# ee117576c8db4a019471b86f754263c1
#: ../../topics/pagination.txt:67
msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or "
"any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

# 9e9673df327646109ad6c8a78cf7f04c
#: ../../topics/pagination.txt:77
msgid "Using ``Paginator`` in a view"
msgstr ""

# be27ed04c5924084b486a0b83a8c24b8
#: ../../topics/pagination.txt:79
msgid ""
"Here's a slightly more complex example using :class:`Paginator` in a view to "
"paginate a queryset. We give both the view and the accompanying template to "
"show how you can display the results. This example assumes you have a "
"``Contacts`` model that has already been imported."
msgstr ""

# 6f66e6db6c9c4ce3bba1c04d4e893768
#: ../../topics/pagination.txt:84
msgid "The view function looks like this::"
msgstr ""

# 3a85b489eaef4dfa8fcfe5d780efae92
#: ../../topics/pagination.txt:104
msgid ""
"In the template :file:`list.html`, you'll want to include navigation between "
"pages along with any interesting information from the objects themselves::"
msgstr ""

# 0c69e22eddfb46a7b364c657d1723f7d
#: ../../topics/pagination.txt:136
msgid "``Paginator`` objects"
msgstr ""

# f2954fe50dc945d9974e5da1bdba79d7
#: ../../topics/pagination.txt:138
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

# ccb82954b55844729e252fe96e3dfa7d
#: ../../topics/pagination.txt:146
msgid ""
"A list, tuple, Django ``QuerySet``, or other sliceable object with a ``count"
"()`` or ``__len__()`` method."
msgstr ""

# 053f330825c04fc58e15edf722ae2372
#: ../../topics/pagination.txt:150
msgid ""
"The maximum number of items to include on a page, not including orphans (see "
"the ``orphans`` optional argument below)."
msgstr ""

# 7ea4c029b811489ea81a146ae267bd3d
#: ../../topics/pagination.txt:157
msgid ""
"The minimum number of items allowed on the last page, defaults to zero. Use "
"this when you don't want to have a last page with very few items. If the "
"last page would normally have a number of items less than or equal to "
"``orphans``, then those items will be added to the previous page (which "
"becomes the last page) instead of leaving the items on a page by themselves. "
"For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will "
"be two pages; the first page with 10 items and the  second (and last) page "
"with 13 items."
msgstr ""

# f03a479b53284daa8130e5231293078d
#: ../../topics/pagination.txt:167
msgid ""
"Whether or not the first page is allowed to be empty.  If ``False`` and "
"``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

# cda4e94ccfe549f0ae0403b14b99fcb0
#: ../../topics/pagination.txt:175
msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`InvalidPage` if the given page number doesn't exist."
msgstr ""

# 74470de7c5584bcca21280d27c1dd948
# 5abce5a660aa46f1b29016710a32e3e0
# 9cb809822be94aee90dbab044dd44434
#: ../../topics/pagination.txt:179 ../../topics/pagination.txt:287
#: ../../topics/testing.txt:2189
msgid "Attributes"
msgstr ""

# 7a96123325e44d83a25c195cb0300f72
#: ../../topics/pagination.txt:183
msgid "The total number of objects, across all pages."
msgstr ""

# 50f4386c65fe4a1691d29e9d521fd1cf
#: ../../topics/pagination.txt:187
msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fallback "
"to using ``len(object_list)``. This allows objects, such as Django's "
"``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

# e8c22a42099545a58fc452a153a107ec
#: ../../topics/pagination.txt:196
msgid "The total number of pages."
msgstr ""

# 9201dc43bae54610ad11d3062fbaef44
#: ../../topics/pagination.txt:200
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

# b978b856ed91465ba17f159bfd3c6487
#: ../../topics/pagination.txt:204
msgid "``InvalidPage`` exceptions"
msgstr ""

# 782690c8eba948c49aa08b482d1a59ff
#: ../../topics/pagination.txt:208
msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr ""

# eed2eb3734d24c4f9dd260436eca56d0
#: ../../topics/pagination.txt:211
msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e., not an integer) or contains no objects. Generally, it's "
"enough to trap the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can trap either of the following exceptions:"
msgstr ""

# acfaba4c0b3d49df88a25ca4c23c402f
#: ../../topics/pagination.txt:218
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

# b5861044d66b4411b6e00e1ae98b813c
#: ../../topics/pagination.txt:222
msgid ""
"Raised when ``page()`` is given a valid value but no objects exist on that "
"page."
msgstr ""

# ca54cefe059a416e8386fa1bb51fdfc9
#: ../../topics/pagination.txt:225
msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with a simple ``except InvalidPage``."
msgstr ""

# fce11574c1294dcfa45ac57ee78ba849
#: ../../topics/pagination.txt:230
msgid "``Page`` objects"
msgstr ""

# 2a17c8275eed493cafba1bbc3f5b9d5f
#: ../../topics/pagination.txt:232
msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr ""

# cf5705f2aef34c479f0c07309f4a333d
#: ../../topics/pagination.txt:246
msgid "Returns ``True`` if there's a next page."
msgstr ""

# 946a0600764749dda624ca54e70e44d2
#: ../../topics/pagination.txt:250
msgid "Returns ``True`` if there's a previous page."
msgstr ""

# 562eb0574bd04eb682c8baa033b17cc7
#: ../../topics/pagination.txt:254
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

# ec6404f3934f436694afa2bca2198e38
#: ../../topics/pagination.txt:258
msgid "Returns the next page number."
msgstr ""

# 2e03d61099bc4181934b3b339be88910
#: ../../topics/pagination.txt:262
msgid "Raises :exc:`InvalidPage` if next page doesn't exist."
msgstr ""

# 1147c1a124f94082bf02dabe9cd71e82
#: ../../topics/pagination.txt:266
msgid "Returns the previous page number."
msgstr ""

# d04773887afc416aafe0b3c7841718a3
#: ../../topics/pagination.txt:270
msgid "Raises :exc:`InvalidPage` if previous page doesn't exist."
msgstr ""

# 8ed802dde26d44d1b188e3d26b32dd86
#: ../../topics/pagination.txt:274
msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""

# ce0ad21b59024fe3841cdf505d45cd21
#: ../../topics/pagination.txt:281
msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""

# ad62cddf6f2042b9939e098d5c565faa
#: ../../topics/pagination.txt:291
msgid "The list of objects on this page."
msgstr ""

# 618c4c6834f34a3eab2a4ceb64dc8147
#: ../../topics/pagination.txt:295
msgid "The 1-based page number for this page."
msgstr ""

# d1f5f6d439eb4bdca606a1ad905a57fa
#: ../../topics/pagination.txt:299
msgid "The associated :class:`Paginator` object."
msgstr ""

# 78bc704b376346f685f97d1a073de968
#: ../../topics/python3.txt:3
msgid "Porting to Python 3"
msgstr ""

# 664bf53ad72f48f09e7f200095844bfe
#: ../../topics/python3.txt:5
msgid ""
"Django 1.5 is the first version of Django to support Python 3. The same code "
"runs both on Python 2 (≥ 2.6.5) and Python 3 (≥ 3.2), thanks to the six_ "
"compatibility layer."
msgstr ""

# 6e70a205be7b43b18917c75016ce282e
#: ../../topics/python3.txt:11
msgid ""
"This document is primarily targeted at authors of pluggable application who "
"want to support both Python 2 and 3. It also describes guidelines that apply "
"to Django's code."
msgstr ""

# 228c807951d545d8a2b94265a939b037
#: ../../topics/python3.txt:16
msgid "Philosophy"
msgstr ""

# bf963cfbca8c4d6aa69c17547025652c
#: ../../topics/python3.txt:18
msgid ""
"This document assumes that you are familiar with the changes between Python "
"2 and Python 3. If you aren't, read `Python's official porting guide`_ "
"first. Refreshing your knowledge of unicode handling on Python 2 and 3 will "
"help; the `Pragmatic Unicode`_ presentation is a good resource."
msgstr ""

# fd055dc944cd4be7a0506c7910067147
#: ../../topics/python3.txt:23
msgid ""
"Django uses the *Python 2/3 Compatible Source* strategy. Of course, you're "
"free to chose another strategy for your own code, especially if you don't "
"need to stay compatible with Python 2. But authors of pluggable applications "
"are encouraged to use the same porting strategy as Django itself."
msgstr ""

# 65998f0e88714d6790bd75e296f07bcf
#: ../../topics/python3.txt:28
msgid ""
"Writing compatible code is much easier if you target Python ≥ 2.6. Django "
"1.5 introduces compatibility tools such as :mod:`django.utils.six`. For "
"convenience, forwards-compatible aliases were introduced in Django 1.4.2. If "
"your application takes advantage of these tools, it will require Django ≥ "
"1.4.2."
msgstr ""

# 6464042a107d49f2b7c77bdd00a84489
#: ../../topics/python3.txt:34
msgid ""
"Obviously, writing compatible source code adds some overhead, and that can "
"cause frustration. Django's developers have found that attempting to write "
"Python 3 code that's compatible with Python 2 is much more rewarding than "
"the opposite. Not only does that make your code more future-proof, but "
"Python 3's advantages (like the saner string handling) start shining "
"quickly. Dealing with Python 2 becomes a backwards compatibility "
"requirement, and we as developers are used to dealing with such constraints."
msgstr ""

# a9650151f1204da69a2a98fcffa89d8f
#: ../../topics/python3.txt:42
msgid ""
"Porting tools provided by Django are inspired by this philosophy, and it's "
"reflected throughout this guide."
msgstr ""

# b35afd6aa1824127a9552d4210365307
#: ../../topics/python3.txt:49
msgid "Porting tips"
msgstr ""

# c651353ea5f8416cbd1f24fd2a839ad7
#: ../../topics/python3.txt:52
msgid "Unicode literals"
msgstr ""

# 321dc82fd17e4cb4a16cadb42c9122dd
#: ../../topics/python3.txt:54
msgid "This step consists in:"
msgstr ""

# c0822cf12d694825a2d4f5b5dcb96b94
#: ../../topics/python3.txt:56
msgid ""
"Adding ``from __future__ import unicode_literals`` at the top of your Python "
"modules -- it's best to put it in each and every module, otherwise you'll "
"keep checking the top of your files to see which mode is in effect;"
msgstr ""

# 4fbbce343f6a413e9f9e0351a119db05
#: ../../topics/python3.txt:59
msgid "Removing the ``u`` prefix before unicode strings;"
msgstr ""

# 2c29e748bfbf47b9b282b9b28cc3411f
#: ../../topics/python3.txt:60
msgid "Adding a ``b`` prefix before bytestrings."
msgstr ""

# 9a138d20db814a5185644e243b7c4562
#: ../../topics/python3.txt:62
msgid ""
"Performing these changes systematically guarantees backwards compatibility."
msgstr ""

# 340a4951322a4838b788b3a35bac90d2
#: ../../topics/python3.txt:64
msgid ""
"However, Django applications generally don't need bytestrings, since Django "
"only exposes unicode interfaces to the programmer. Python 3 discourages "
"using bytestrings, except for binary data or byte-oriented interfaces. "
"Python 2 makes bytestrings and unicode strings effectively interchangeable, "
"as long as they only contain ASCII data. Take advantage of this to use "
"unicode strings wherever possible and avoid the ``b`` prefixes."
msgstr ""

# ff89b1e62479417da913bf25e04a5775
#: ../../topics/python3.txt:73
msgid ""
"Python 2's ``u`` prefix is a syntax error in Python 3.2 but it will be "
"allowed again in Python 3.3 thanks to :pep:`414`. Thus, this transformation "
"is optional if you target Python ≥ 3.3. It's still recommended, per the "
"\"write Python 3 code\" philosophy."
msgstr ""

# ab8798b0bfa44201b7f329924e0bd222
# 2d08dd9734064fdfa223499db4a39d8b
#: ../../topics/python3.txt:79 ../../topics/python3.txt:336
msgid "String handling"
msgstr ""

# 567a85482840457c8c669f5018568bcb
#: ../../topics/python3.txt:81
msgid ""
"Python 2's :class:`unicode` type was renamed :class:`str` in Python 3, :"
"class:`str` was renamed :class:`bytes`, and :class:`basestring` disappeared. "
"six_ provides :ref:`tools <string-handling-with-six>` to deal with these "
"changes."
msgstr ""

# 96cd400ceff744ec85732364f0a705ab
#: ../../topics/python3.txt:86
msgid ""
"Django also contains several string related classes and functions in the :"
"mod:`django.utils.encoding` and :mod:`django.utils.safestring` modules. "
"Their names used the words ``str``, which doesn't mean the same thing in "
"Python 2 and Python 3, and ``unicode``, which doesn't exist in Python 3. In "
"order to avoid ambiguity and confusion these concepts were renamed ``bytes`` "
"and ``text``."
msgstr ""

# b57fcbe4beff4339933e79fe8e0f37a7
#: ../../topics/python3.txt:93
msgid "Here are the name changes in :mod:`django.utils.encoding`:"
msgstr ""

# 828f25ac56384d34ac54a012f0c259d7
# cca0be43a9a14149b3a4c604a35ba3b3
#: ../../topics/python3.txt:96 ../../topics/python3.txt:120
msgid "Old name"
msgstr ""

# 73145910af394eb28135a2198ef7d1e3
# aead0b40bfae4eba8f3c3fa8b99b5349
#: ../../topics/python3.txt:96 ../../topics/python3.txt:120
msgid "New name"
msgstr ""

# 22bb72d25b8b476f9b6c4761756f802e
#: ../../topics/python3.txt:98
msgid "``smart_str``"
msgstr ""

# b137f907b6e24d7c8fc82d10820440b7
#: ../../topics/python3.txt:98
msgid "``smart_bytes``"
msgstr ""

# 11ce26aeb820480396b0fae72ad14800
#: ../../topics/python3.txt:99
msgid "``smart_unicode``"
msgstr ""

# 8d1e5730823b44d78d79c561da4d9ebc
#: ../../topics/python3.txt:99
msgid "``smart_text``"
msgstr ""

# 8455e2ce72d04de1ac00fe25d9203183
#: ../../topics/python3.txt:100
msgid "``force_unicode``"
msgstr ""

# fc1c6315bf09444c947e3c2853e00357
#: ../../topics/python3.txt:100
msgid "``force_text``"
msgstr ""

# accddba30eb04cd0a08ea995da358fd7
#: ../../topics/python3.txt:103
msgid ""
"For backwards compatibility, the old names still work on Python 2. Under "
"Python 3, ``smart_str`` is an alias for ``smart_text``."
msgstr ""

# b879453476544b8c95edb6299557d523
# 816e1ef308c3454dbbed4f162b405d7b
#: ../../topics/python3.txt:106 ../../topics/python3.txt:132
msgid "For forwards compatibility, the new names work as of Django 1.4.2."
msgstr ""

# 2070eee3d6804ff1b7b752ac16da6025
#: ../../topics/python3.txt:110
msgid ""
":mod:`django.utils.encoding` was deeply refactored in Django 1.5 to provide "
"a more consistent API. Check its documentation for more information."
msgstr ""

# 6a47ec2f17224141918d285a39b16d5d
#: ../../topics/python3.txt:114
msgid ""
":mod:`django.utils.safestring` is mostly used via the :func:`~django.utils."
"safestring.mark_safe` and :func:`~django.utils.safestring.mark_for_escaping` "
"functions, which didn't change. In case you're using the internals, here are "
"the name changes:"
msgstr ""

# 009ed1c9bbd8442ea5d7c3841155ec10
#: ../../topics/python3.txt:122
msgid "``EscapeString``"
msgstr ""

# 89760cea385b44969a1404519845c38b
#: ../../topics/python3.txt:122
msgid "``EscapeBytes``"
msgstr ""

# 89ab3c251a2a4522a0d37c134840296b
#: ../../topics/python3.txt:123
msgid "``EscapeUnicode``"
msgstr ""

# 8dfbfb9d8730407eba8e8691e1c9301b
#: ../../topics/python3.txt:123
msgid "``EscapeText``"
msgstr ""

# ebf6ff62d388449dba5d507162d58c72
#: ../../topics/python3.txt:124
msgid "``SafeString``"
msgstr ""

# 260fae234d114218ac3af43a86411398
#: ../../topics/python3.txt:124
msgid "``SafeBytes``"
msgstr ""

# e373be89c2c44d1fb680e5a06b9c26a0
#: ../../topics/python3.txt:125
msgid "``SafeUnicode``"
msgstr ""

# fda9b1f3613246568f8c30082b58e2fb
#: ../../topics/python3.txt:125
msgid "``SafeText``"
msgstr ""

# f199db3da84c44fe80775dee7fe8f6ab
#: ../../topics/python3.txt:128
msgid ""
"For backwards compatibility, the old names still work on Python 2. Under "
"Python 3, ``EscapeString`` and ``SafeString`` are aliases for ``EscapeText`` "
"and ``SafeText`` respectively."
msgstr ""

# 0cc0f2f3ed794b22b140c3efa77ee904
#: ../../topics/python3.txt:135
msgid ":meth:`__str__` and :meth:`__unicode__` methods"
msgstr ""

# d4839cb30fdd435796fe093fa2c246ab
#: ../../topics/python3.txt:137
msgid ""
"In Python 2, the object model specifies :meth:`__str__` and :meth:"
"`__unicode__` methods. If these methods exist, they must return :class:`str` "
"(bytes) and :class:`unicode` (text) respectively."
msgstr ""

# 7f56b6f66cff4255b1459c9dd693420b
#: ../../topics/python3.txt:141
msgid ""
"The ``print`` statement and the :func:`str` built-in call :meth:`__str__` to "
"determine the human-readable representation of an object. The :func:"
"`unicode` built-in calls :meth:`__unicode__` if it exists, and otherwise "
"falls back to :meth:`__str__` and decodes the result with the system "
"encoding. Conversely, the :class:`~django.db.models.Model` base class "
"automatically derives :meth:`__str__` from :meth:`__unicode__` by encoding "
"to UTF-8."
msgstr ""

# 8f2e0bc5908248b683916ec994b3267c
#: ../../topics/python3.txt:148
msgid ""
"In Python 3, there's simply :meth:`__str__`, which must return :class:`str` "
"(text)."
msgstr ""

# 74b29104cc0a48cb801150726f848bb0
#: ../../topics/python3.txt:151
msgid ""
"(It is also possible to define :meth:`__bytes__`, but Django application "
"have little use for that method, because they hardly ever deal with :class:"
"`bytes`.)"
msgstr ""

# 1934e9d2c88742cb93f79419f7a52070
#: ../../topics/python3.txt:155
msgid ""
"Django provides a simple way to define :meth:`__str__` and :meth:"
"`__unicode__` methods that work on Python 2 and 3: you must define a :meth:"
"`__str__` method returning text and to apply the :func:`~django.utils."
"encoding.python_2_unicode_compatible` decorator."
msgstr ""

# f4f4e52209cc4ddbb9cb029c4fb2c360
#: ../../topics/python3.txt:160
msgid ""
"On Python 3, the decorator is a no-op. On Python 2, it defines appropriate :"
"meth:`__unicode__` and :meth:`__str__` methods (replacing the original :meth:"
"`__str__` method in the process). Here's an example::"
msgstr ""

# bfc85daf77cc4ea9a086a65cba99bddd
#: ../../topics/python3.txt:172
msgid "This technique is the best match for Django's porting philosophy."
msgstr ""

# 9b58d7d330be4dff89076d61f291420e
#: ../../topics/python3.txt:174
msgid ""
"For forwards compatibility, this decorator is available as of Django 1.4.2."
msgstr ""

# fb47de8c320f4977845afcdd525da561
#: ../../topics/python3.txt:176
msgid ""
"Finally, note that :meth:`__repr__` must return a :class:`str` on all "
"versions of Python."
msgstr ""

# 426d26c5d2ed46f49974d5b54f9a1a47
#: ../../topics/python3.txt:180
msgid ":class:`dict` and :class:`dict`-like classes"
msgstr ""

# 89af7539b8e14114914feea1e46016f6
#: ../../topics/python3.txt:182
msgid ""
":meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return lists "
"in Python 2 and iterators in Python 3. :class:`~django.http.QueryDict` and "
"the :class:`dict`-like classes defined in :mod:`django.utils.datastructures` "
"behave likewise in Python 3."
msgstr ""

# 37686b80e8be45b2a87871c68bef1d15
#: ../../topics/python3.txt:187
msgid ""
"six_ provides compatibility functions to work around this change: :func:"
"`~six.iterkeys`, :func:`~six.iteritems`, and :func:`~six.itervalues`. "
"Django's bundled version adds :func:`~django.utils.six.iterlists` for :class:"
"`~django.utils.datastructures.MultiValueDict` and its subclasses."
msgstr ""

# 3f47ef5db62e479e8974d0bc046819f7
#: ../../topics/python3.txt:193
msgid ""
":class:`~django.http.HttpRequest` and :class:`~django.http.HttpResponse` "
"objects"
msgstr ""

# 96244770e6144c1f8792fe8991df1623
#: ../../topics/python3.txt:195
msgid "According to :pep:`3333`:"
msgstr ""

# 7b2a01b10a184b8aa674ec621a85e050
#: ../../topics/python3.txt:197
msgid "headers are always :class:`str` objects,"
msgstr ""

# 93115b4b89f740cca32790f59bba7eed
#: ../../topics/python3.txt:198
msgid "input and output streams are always :class:`bytes` objects."
msgstr ""

# 04b53bd6abd14f3fa67f81bb21b00e6d
#: ../../topics/python3.txt:200
msgid ""
"Specifically, :attr:`HttpResponse.content <django.http.HttpResponse."
"content>` contains :class:`bytes`, which may become an issue if you compare "
"it with a :class:`str` in your tests. The preferred solution is to rely on :"
"meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase."
"assertNotContains`. These methods accept a response and a unicode string as "
"arguments."
msgstr ""

# 7d93eeae84b34b1398725c8fbd3fb03e
#: ../../topics/python3.txt:208
msgid "Coding guidelines"
msgstr ""

# 8805e77fcbee4d2eaa4b73018080984a
#: ../../topics/python3.txt:210
msgid ""
"The following guidelines are enforced in Django's source code. They're also "
"recommended for third-party application who follow the same porting strategy."
msgstr ""

# 3b099bf235ae4f829721eee83beea4c2
#: ../../topics/python3.txt:214
msgid "Syntax requirements"
msgstr ""

# 0f0f0b5283b644daa1de37c97a4c5180
#: ../../topics/python3.txt:217
msgid "Unicode"
msgstr ""

# d6127731cf2b45cdac3e9cdc31824df7
#: ../../topics/python3.txt:219
msgid ""
"In Python 3, all strings are considered Unicode by default. The ``unicode`` "
"type from Python 2 is called ``str`` in Python 3, and ``str`` becomes "
"``bytes``."
msgstr ""

# 219c3535fd7046668a5f5e534e722332
#: ../../topics/python3.txt:223
msgid ""
"You mustn't use the ``u`` prefix before a unicode string literal because "
"it's a syntax error in Python 3.2. You must prefix byte strings with ``b``."
msgstr ""

# 98729f8da2f14d739a9b0271f1b00968
#: ../../topics/python3.txt:226
msgid ""
"In order to enable the same behavior in Python 2, every module must import "
"``unicode_literals`` from ``__future__``::"
msgstr ""

# 53be52d32e75429b81d551ad275ba3ef
#: ../../topics/python3.txt:234
msgid ""
"If you need a byte string literal under Python 2 and a unicode string "
"literal under Python 3, use the :func:`str` builtin::"
msgstr ""

# 8cc3b2e4a13a4096a1e8f3489221f2b9
#: ../../topics/python3.txt:239
msgid ""
"In Python 3, there aren't any automatic conversions between :class:`str` "
"and :class:`bytes`, and the :mod:`codecs` module became more strict. :meth:"
"`str.decode` always returns :class:`bytes`, and :meth:`bytes.decode` always "
"returns :class:`str`. As a consequence, the following pattern is sometimes "
"necessary::"
msgstr ""

# 5016cb099a19490190aef273cda15b93
#: ../../topics/python3.txt:247
msgid "Be cautious if you have to `index bytestrings`_."
msgstr ""

# 8aea4afe18174120b964f544d2a0518c
# f0853dde21764e4fbec9d1a192e7cb57
#: ../../topics/python3.txt:252 ../../topics/testing.txt:1059
msgid "Exceptions"
msgstr ""

# d4796bc5ac2849208c245f08ab6d8f92
#: ../../topics/python3.txt:254
msgid "When you capture exceptions, use the ``as`` keyword::"
msgstr ""

# 88d1c507f56649fea4f83ecdd3069415
#: ../../topics/python3.txt:261
msgid "This older syntax was removed in Python 3::"
msgstr ""

# ad5bebfba5eb44e0b606f9ecc6adfe60
#: ../../topics/python3.txt:268
msgid ""
"The syntax to reraise an exception with a different traceback also changed. "
"Use :func:`six.reraise`."
msgstr ""

# edb76b107da94d278d33945739582235
#: ../../topics/python3.txt:272
msgid "Magic methods"
msgstr ""

# ab35eee3f5f24ef6a1e11286164e0292
#: ../../topics/python3.txt:274
msgid "Use the patterns below to handle magic methods renamed in Python 3."
msgstr ""

# b4a07c67fc814a51b60adeccad60688a
#: ../../topics/python3.txt:277
msgid "Iterators"
msgstr ""

# f263c4c921984fb49ea4c449241a319d
#: ../../topics/python3.txt:289
msgid "Boolean evaluation"
msgstr ""

# 1e509d48bd834795b55de98c34519122
#: ../../topics/python3.txt:302
msgid "Division"
msgstr ""

# c112fb84853443618cded37a3dde9d66
#: ../../topics/python3.txt:323
msgid "Writing compatible code with six"
msgstr ""

# 4e516480a8d44424ab8886364d2ee59f
#: ../../topics/python3.txt:325
msgid ""
"six_ is the canonical compatibility library for supporting Python 2 and 3 in "
"a single codebase. Read its documentation!"
msgstr ""

# bf6e8025ec3e48548170d6759be73786
#: ../../topics/python3.txt:328
msgid ""
":mod:`six` is bundled with Django as of version 1.4.2. You can import it as :"
"mod:`django.utils.six`."
msgstr ""

# b41385805c6b469996bbf8cf1e97aec8
#: ../../topics/python3.txt:331
msgid "Here are the most common changes required to write compatible code."
msgstr ""

# 11c8c571f23748c7a1c49f6dd6dd3895
#: ../../topics/python3.txt:338
msgid ""
"The ``basestring`` and ``unicode`` types were removed in Python 3, and the "
"meaning of ``str`` changed. To test these types, use the following idioms::"
msgstr ""

# 637fff3bc92b487da2ecf21725c5750d
#: ../../topics/python3.txt:345
msgid ""
"Python ≥ 2.6 provides ``bytes`` as an alias for ``str``, so you don't need :"
"attr:`six.binary_type`."
msgstr ""

# 80a2b33dd2ba47ce9c318fcdbc84ba68
#: ../../topics/python3.txt:349
msgid "``long``"
msgstr ""

# f782fd10825941b285828fa6ccb0a9fa
#: ../../topics/python3.txt:351
msgid ""
"The ``long`` type no longer exists in Python 3. ``1L`` is a syntax error. "
"Use :data:`six.integer_types` check if a value is an integer or a long::"
msgstr ""

# f9fd98dba15e4421abab0634178fd557
#: ../../topics/python3.txt:357
msgid "``xrange``"
msgstr ""

# b628b9b80a61434294dce6171f5aafe9
#: ../../topics/python3.txt:359
msgid "Import :func:`six.moves.xrange` wherever you use ``xrange``."
msgstr ""

# 7428073718ea46b2a56c490c5b74acd2
#: ../../topics/python3.txt:362
msgid "Moved modules"
msgstr ""

# 5dbbfb3184594569b1febfc2e6f605f2
#: ../../topics/python3.txt:364
msgid ""
"Some modules were renamed in Python 3. The :mod:`django.utils.six.moves <six."
"moves>` module provides a compatible location to import them."
msgstr ""

# 850ff756ef104764826224dd820f1b72
#: ../../topics/python3.txt:367
msgid ""
"The ``urllib``, ``urllib2`` and ``urlparse`` modules were reworked in depth "
"and :mod:`django.utils.six.moves <six.moves>` doesn't handle them. Django "
"explicitly tries both locations, as follows::"
msgstr ""

# fde6c463cf6246129cca620a6dd31099
#: ../../topics/python3.txt:377
msgid "PY3"
msgstr ""

# e821b7ea26294945a89e737ab27f1fbd
#: ../../topics/python3.txt:379
msgid ""
"If you need different code in Python 2 and Python 3, check :data:`six.PY3`::"
msgstr ""

# 1c0a2eae357a43358daa809d66af9eea
#: ../../topics/python3.txt:386
msgid ""
"This is a last resort solution when :mod:`six` doesn't provide an "
"appropriate function."
msgstr ""

# fca77669f94349deb1cb7e317bfed9cf
#: ../../topics/python3.txt:392
msgid "Customizations of six"
msgstr ""

# 595a02c74758403c9c85a29772bc4c03
#: ../../topics/python3.txt:394
msgid "The version of six bundled with Django includes one extra function:"
msgstr ""

# 6384c16e7a5946c792ebd727f8c315fe
#: ../../topics/python3.txt:398
msgid ""
"Returns an iterator over the lists of values of a :class:`~django.utils."
"datastructures.MultiValueDict`. This replaces :meth:`~django.utils."
"datastructures.MultiValueDict.iterlists()` on Python 2 and :meth:`~django."
"utils.datastructures.MultiValueDict.lists()` on Python 3."
msgstr ""

# affcdd23ead146429549608b53778e56
#: ../../topics/python3.txt:406
msgid ""
"This replaces ``testcase.assertRaisesRegexp`` on Python 2, and ``testcase."
"assertRaisesRegex`` on Python 3. ``assertRaisesRegexp`` still exists in "
"current Python3 versions, but issues a warning."
msgstr ""

# 7c3ca7cfe6dc467b98e4e0739d8f335e
#: ../../topics/python3.txt:411
msgid ""
"In addition to six' defaults moves, Django's version provides ``thread`` as "
"``_thread`` and ``dummy_thread`` as ``_dummy_thread``."
msgstr ""

# e64eaa3949dc40f580a22531ecbb8af6
#: ../../topics/security.txt:3
msgid "Security in Django"
msgstr ""

# 8c11397dbabe48848dd6d7ea1f1d8d0e
#: ../../topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

# 409967e476684f7aa5c38396c36cb4f4
#: ../../topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr ""

# ec469c8030cc40dbb92c041e04be9d25
#: ../../topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

# 5ff8014a1e314c15bd6e865a9b30ea75
#: ../../topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

# 71035adda51f4e608d16a37c3466add6
#: ../../topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""

# 8f3b8106dc804bbba642826b86bec721
#: ../../topics/security.txt:36
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML."
msgstr ""

# ae9750b86c98467091a95c13fe53b6bc
#: ../../topics/security.txt:40
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :ttag:`safe` template tag, :mod:`mark_safe <django."
"utils.safestring>`, and when autoescape is turned off."
msgstr ""

# 3ddd2ee6d3c849fb9d907b4f54568684
#: ../../topics/security.txt:44
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""

# 2477edbef1c64d33931dc33becfe9d1e
#: ../../topics/security.txt:48
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""

# 018ca2b3be174fc8b6418686b6d255fd
#: ../../topics/security.txt:52
msgid "Markup library"
msgstr ""

# a5b60d51541d461292aa1dd553bf2eda
#: ../../topics/security.txt:54
msgid ""
"If you use :mod:`django.contrib.markup`, you need to ensure that the filters "
"are only used on trusted input, or that you have correctly configured them "
"to ensure they do not allow raw HTML output. See the documentation of that "
"module for more information."
msgstr ""

# f22f57f086394a7d8d61014163bc1a4a
#: ../../topics/security.txt:60
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

# a12d9b8b9e23400a8093a88eb53f07c8
#: ../../topics/security.txt:62
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""

# 8a92a51f19a3487e8ab650984e2a65c6
#: ../../topics/security.txt:65
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""

# ee77aa8f35214660833bfc19cb9b6c34
#: ../../topics/security.txt:73
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in "
"each POST request. This ensures that a malicious user cannot simply \"replay"
"\" a form POST to your Web site and have another logged in user unwittingly "
"submit that form. The malicious user would have to know the nonce, which is "
"user specific (using a cookie)."
msgstr ""

# 44b6731a4ce540e5a624d1d5f33acfcf
#: ../../topics/security.txt:79
msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""

# 1ce49b322a4543caab649367c4d9f10a
#: ../../topics/security.txt:86
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""

# e23a063833724349a51c2a848f6026b4
#: ../../topics/security.txt:91
msgid "SQL injection protection"
msgstr ""

# 03a8903942f94102916d5eb7c7251157
#: ../../topics/security.txt:93
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

# 08ae479bc7794a2582bc88b6c00ecc28
#: ../../topics/security.txt:97
msgid ""
"By using Django's querysets, the resulting SQL will be properly escaped by "
"the underlying database driver. However, Django also gives developers power "
"to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom "
"sql <executing-custom-sql>`. These capabilities should be used sparingly and "
"you should always be careful to properly escape any parameters that the user "
"can control. In addition, you should exercise caution when using :meth:`extra"
"() <django.db.models.query.QuerySet.extra>`."
msgstr ""

# 3d9b69ff4fad4a0e91977d3fc8499bbc
#: ../../topics/security.txt:106
msgid "Clickjacking protection"
msgstr ""

# 400cf157e9094cfd85830113e983bee6
#: ../../topics/security.txt:108
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

# 036a205f94b04f7a89339f1f819aee6a
#: ../../topics/security.txt:112
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""

# 5af235e2e0de4b63a484a66af6e0a6fb
#: ../../topics/security.txt:119
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

# 8a2ada2bfb034957a46094fb3aaf689c
#: ../../topics/security.txt:126
msgid "SSL/HTTPS"
msgstr ""

# 7db0b9f18f584020bc7d0e79b7ad8afa
#: ../../topics/security.txt:128
msgid ""
"It is always better for security, though not always practical in all cases, "
"to deploy your site behind HTTPS. Without this, it is possible for malicious "
"network users to sniff authentication credentials or any other information "
"transferred between client and server, and in some cases -- **active** "
"network attackers -- to alter data that is sent in either direction."
msgstr ""

# 2ec7fb70f5394a58b93694752d8550eb
#: ../../topics/security.txt:134
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""

# 031b6bff0c104815ad4030a7a432e287
#: ../../topics/security.txt:137
msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have "
"understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

# a573ad1408eb43abbe5aed4c5f908280
#: ../../topics/security.txt:142
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

# f7cc9719997b47d2bca301ed621f2807
#: ../../topics/security.txt:144
msgid ""
"This could be done using a custom middleware. Please note the caveats under :"
"setting:`SECURE_PROXY_SSL_HEADER`. For the case of a reverse proxy, it may "
"be easier or more secure to configure the main Web server to do the redirect "
"to HTTPS."
msgstr ""

# c04672c4c2974f8382fb10eba794a548
#: ../../topics/security.txt:149
msgid "Use 'secure' cookies."
msgstr ""

# c23facf72fb0426b9e8ae0e048b29ac8
#: ../../topics/security.txt:151
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""

# e7114073b72c48868bb635f0338a7a23
#: ../../topics/security.txt:160
msgid "Use HTTP Strict Transport Security (HSTS)"
msgstr ""

# 7a78d823feb84bed9923a9c063b1b6f0
#: ../../topics/security.txt:162
msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to "
"a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS is usually configured on the web server."
msgstr ""

# 40b7d5aec45f452e921d5d590ab00b52
#: ../../topics/security.txt:171
msgid "Host headers and virtual hosting"
msgstr ""

# a26e9b18bc2b4cc484c624284c326205
#: ../../topics/security.txt:173
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, they can be used for Cross-Site Request Forgery and cache "
"poisoning attacks in some circumstances. We recommend you ensure your Web "
"server is configured such that:"
msgstr ""

# 32fb43797e1d4eadab7eadf7ab06970b
#: ../../topics/security.txt:179
msgid ""
"It always validates incoming HTTP ``Host`` headers against the expected host "
"name."
msgstr ""

# 65cef0c25a754de8ad99fd2ddc76039d
#: ../../topics/security.txt:181
msgid "Disallows requests with no ``Host`` header."
msgstr ""

# d40caaf4e61a44c4931aacf31528c0d8
#: ../../topics/security.txt:182
msgid ""
"Is *not* configured with a catch-all virtual host that forwards requests to "
"a Django application."
msgstr ""

# 20b5d784b4424793a7627e1d839f87f1
#: ../../topics/security.txt:185
msgid ""
"Additionally, as of 1.3.1, Django requires you to explicitly enable support "
"for the ``X-Forwarded-Host`` header if your configuration requires it."
msgstr ""

# c72ce4ed61964174888ad45f8b266e7f
#: ../../topics/security.txt:191
msgid "Additional security topics"
msgstr ""

# fb6052b04539434cb1a4a3f248752ac8
#: ../../topics/security.txt:193
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other components."
msgstr ""

# 028c77c330584c669a00569ba4ed2725
#: ../../topics/security.txt:197
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

# 1ee62f24c7854b68aaf467cf74e70d03
#: ../../topics/security.txt:200
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

# 9cb2b869484c48e1bb734cf53374f1df
#: ../../topics/security.txt:201
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

# 7a5f15652f93478e828e8e595877e607
#: ../../topics/security.txt:204
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

# 08430c8bacc14cd6a42c1a01142867b3
#: ../../topics/security.txt:208
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

# 0149ae28a3ae402ea345154cdbb0d1a0
#: ../../topics/security.txt:209
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""

# e5fb17396efb499ea172f1fd5447734a
#: ../../topics/serialization.txt:3
msgid "Serializing Django objects"
msgstr ""

# 46518c914774411f8160f4040e44184e
#: ../../topics/serialization.txt:5
msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

# e498321e97ca4aa89a74199812dd6a00
#: ../../topics/serialization.txt:12
msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

# e0f7f454dc2c4b758c2e2532e7c593fd
#: ../../topics/serialization.txt:16
msgid "Serializing data"
msgstr ""

# fc8a2d604b4c4f2a93b3b8bd84e0ab45
#: ../../topics/serialization.txt:18
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

# 5b3bf51d8eb5448bb4d0807f67bfb452
#: ../../topics/serialization.txt:23
msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

# e1c1c20a34c74a69b74f489210757406
#: ../../topics/serialization.txt:29
msgid "You can also use a serializer object directly::"
msgstr ""

# dc9e2bbc8a4f4c3b8813fcffba48cad9
#: ../../topics/serialization.txt:36
msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

# 4e357e70be2a418bbc6ba04d13a6dacf
#: ../../topics/serialization.txt:44
msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a :class:`~django.core."
"serializers.SerializerDoesNotExist` exception."
msgstr ""

# 451b75010de247c5994dd840a74efdb9
#: ../../topics/serialization.txt:49
msgid "Subset of fields"
msgstr ""

# d7342ccac6974f2aa26a77563c9bd303
#: ../../topics/serialization.txt:51
msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

# 26a285a01c024534aef7b19e796e6284
#: ../../topics/serialization.txt:57
msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized."
msgstr ""

# 0792c1a535ef4517b54f008286f85dd5
#: ../../topics/serialization.txt:62
msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

# 267956c7164e4e58940f3445b26a434c
#: ../../topics/serialization.txt:68
msgid "Inherited Models"
msgstr ""

# ec4506aa58d741e68b6312854b2d7c44
#: ../../topics/serialization.txt:70
msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

# 860db75f4fe64ccd9d933f4bf34831fd
#: ../../topics/serialization.txt:76
msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

# 1a2a132fa8a54075b65023cd3179008c
#: ../../topics/serialization.txt:87
msgid "If you only serialize the Restaurant model::"
msgstr ""

# af82da42352647dba51445af21351922
#: ../../topics/serialization.txt:91
msgid ""
"the fields on the serialized output will only contain the `serves_hot_dogs` "
"attribute. The `name` attribute of the base class will be ignored."
msgstr ""

# 9a8179d9ffe6471fb0b48ca349f4e877
#: ../../topics/serialization.txt:94
msgid ""
"In order to fully serialize your Restaurant instances, you will need to "
"serialize the Place models as well::"
msgstr ""

# 457a8ed964544c0c8156254da25053ad
#: ../../topics/serialization.txt:101
msgid "Deserializing data"
msgstr ""

# 0dd26d91f8944f26ba3f823db0fd33bb
#: ../../topics/serialization.txt:103
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

# 6c813a35503744e1a658cd7e1b0b63f0
#: ../../topics/serialization.txt:108
msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

# 3276dc7b15954c95a4208635f1a40360
#: ../../topics/serialization.txt:111
msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

# e567f7fda5c4400985284f8080aee542
#: ../../topics/serialization.txt:116
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

# c4f41e4a29dc41dab4e95a47e59470fc
#: ../../topics/serialization.txt:118
msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""

# b3ac513b4b33430587e5e2ddc24cfa87
#: ../../topics/serialization.txt:127
msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

# c58c9200995e4d4c8dff8325227a9502
#: ../../topics/serialization.txt:131
msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``."
msgstr ""

# 3ba6afbcd63b44f1ba96c793dd064d22
#: ../../topics/serialization.txt:135
msgid ""
"If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as True::"
msgstr ""

# 5c1e0811652a41c4b3678c2034dbda3e
#: ../../topics/serialization.txt:144
msgid "Serialization formats"
msgstr ""

# ce7d7cebb9364dd7b52f3b14b7ad63f2
#: ../../topics/serialization.txt:146
msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""

# 16cc2c367a424d858a01f4f99c8c1129
#: ../../topics/serialization.txt:150
msgid "Identifier"
msgstr ""

# 90607b0f41194f9587e3c35d7a64aa3b
#: ../../topics/serialization.txt:150
msgid "Information"
msgstr ""

# 05fb705bd2854333ab03c55d3b1c300a
#: ../../topics/serialization.txt:152
msgid "``xml``"
msgstr ""

# 50f4e6fa5bf4441dbb059a4b2195be66
#: ../../topics/serialization.txt:152
msgid "Serializes to and from a simple XML dialect."
msgstr ""

# 1cd815666c3b4582b287249c965dfe57
#: ../../topics/serialization.txt:154
msgid "``json``"
msgstr ""

# 0777dc102f654cae87c704934fab64ad
#: ../../topics/serialization.txt:154
msgid "Serializes to and from JSON_."
msgstr ""

# 0a5401698b3743a2acbd607de9bca2f7
#: ../../topics/serialization.txt:156
msgid "``yaml``"
msgstr ""

# 4be4bf3a838d4da088f604f22fcfb051
#: ../../topics/serialization.txt:156
msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

# 435519a30b3d41a7b716a47651d4d327
#: ../../topics/serialization.txt:164
msgid "Notes for specific serialization formats"
msgstr ""

# c20cb4559bfd43849456451b23f6ac7f
#: ../../topics/serialization.txt:167
msgid "json"
msgstr ""

# db39a4bda45a4e72a3f9869a15bff2bf
#: ../../topics/serialization.txt:169
msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`. "
"In particular, :ref:`lazy translation objects <lazy-translations>` need a "
"`special encoder`_ written for them. Something like this will work::"
msgstr ""

# 975ccc62378142eba67070ca6d3c989b
#: ../../topics/serialization.txt:188
msgid "Natural keys"
msgstr ""

# 5493c3ae27074140b72114712432e331
#: ../../topics/serialization.txt:190
msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

# c2c3160fba3141bb826220dce53f2817
#: ../../topics/serialization.txt:195
msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.conttenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`syncdb` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

# c17d5e876eaf4a06a3aed11820742268
#: ../../topics/serialization.txt:209
msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

# eee25e7a163447be84925e6824409743
#: ../../topics/serialization.txt:215
msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

# ba862ea2a9284265afc578c5194a2bfd
#: ../../topics/serialization.txt:219
msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

# 7f13899894324c19ad3aa549bcfee399
#: ../../topics/serialization.txt:224
msgid "Deserialization of natural keys"
msgstr ""

# 44d23c81723b4a379f6c3253950bd936
#: ../../topics/serialization.txt:226
msgid "Consider the following two models::"
msgstr ""

# 425c3475fac54149b685ccc7e99f8073
#: ../../topics/serialization.txt:243
msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

# d8e2735ae2b644309eeb18e65ff475ac
#: ../../topics/serialization.txt:257
msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

# c65bf22e9b744c9eb1a1214fcc21969c
#: ../../topics/serialization.txt:261
msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

# 49495fb1a2ba42e590e91c250e7de25e
#: ../../topics/serialization.txt:284
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

# 8af7ac49257f4146a69b14f1a54c91cb
#: ../../topics/serialization.txt:297
msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""

# eef0d0b5f0134b5bb94f911f6bd0af4b
#: ../../topics/serialization.txt:303
msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

# 73dab262aada4903a36faef1e707d260
#: ../../topics/serialization.txt:313
msgid "Serialization of natural keys"
msgstr ""

# a1bf015b416a4c328741a7f7e62d7639
#: ../../topics/serialization.txt:315
msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

# a9092a9b05f447e2a489e8b679768c70
#: ../../topics/serialization.txt:332
msgid ""
"That method should always return a natural key tuple -- in this example, ``"
"(first name, last name)``. Then, when you call ``serializers.serialize()``, "
"you provide a ``use_natural_keys=True`` argument::"
msgstr ""

# 77535db56d5c48c2a8a44f642bf45c8c
#: ../../topics/serialization.txt:339
msgid ""
"When ``use_natural_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any reference to objects of the type "
"that defines the method."
msgstr ""

# a6e66ab1b466433db28cbe1239248053
#: ../../topics/serialization.txt:343
msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, you use "
"the `--natural` command line flag to generate natural keys."
msgstr ""

# 3a54815ea919482e851b51f8f2a189fc
#: ../../topics/serialization.txt:348
msgid ""
"You don't need to define both ``natural_key()`` and ``get_by_natural_key()"
"``. If you don't want Django to output natural keys during serialization, "
"but you want to retain the ability to load natural keys, then you can opt to "
"not implement the ``natural_key()`` method."
msgstr ""

# 9d62c70277bb46d3ade837252db1344a
#: ../../topics/serialization.txt:354
msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

# d1d6120904b14ff8aedcb8d91f3c6f70
#: ../../topics/serialization.txt:359
msgid "Dependencies during serialization"
msgstr ""

# 7df8ea454af745819ab09e42de89c183
#: ../../topics/serialization.txt:361
msgid ""
"Since natural keys rely on database lookups to resolve references, it is "
"important that the data exists before it is referenced. You can't make a "
"`forward reference` with natural keys -- the data you're referencing must "
"exist before you include a natural key reference to that data."
msgstr ""

# 0fb40efef6e8465595eee407db58baa0
#: ../../topics/serialization.txt:366
msgid ""
"To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :"
"djadminopt:`--natural` option will serialize any model with a ``natural_key()"
"`` method before serializing standard primary key objects."
msgstr ""

# 993a211d11964b43a279528a1c71ef62
#: ../../topics/serialization.txt:370
msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

# d48bd165d2c142f09be215d8ab00d921
#: ../../topics/serialization.txt:376
msgid ""
"To control this ordering, you can define dependencies on your ``natural_key()"
"`` methods. You do this by setting a ``dependencies`` attribute on the "
"``natural_key()`` method itself."
msgstr ""

# 6287f4992c9c4fffb154175eee570fc8
#: ../../topics/serialization.txt:380
msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

# cee2d8a4473f4271a7db55d0656ca43b
#: ../../topics/serialization.txt:390
msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

# 0356d2469e6f4ebdbe0e75bfd7edc2f5
#: ../../topics/serialization.txt:398
msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

# 458f0430c1014388a21c6e18cb8bac67
#: ../../topics/settings.txt:3
msgid "Django settings"
msgstr ""

# d7fbc535a0534779bee083e7555f9eb0
#: ../../topics/settings.txt:5
msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""

# c3e9f671071049a1b715534883661912
#: ../../topics/settings.txt:10
msgid "The basics"
msgstr ""

# c8e85dd2ebbb4220900ba5bb1a557375
#: ../../topics/settings.txt:12
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

# 1901963a05984dfe9c49f7f4cb1c2d25
#: ../../topics/settings.txt:14
msgid "Here are a couple of example settings::"
msgstr ""

# 05174d7f64da42ce90fc22bb485c2fc6
#: ../../topics/settings.txt:20
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

# 8e3747a38810486594d14098b154a802
#: ../../topics/settings.txt:22
msgid "It doesn't allow for Python syntax errors."
msgstr ""

# 0ea15525ed7b4f8896c18adcfd143ea5
#: ../../topics/settings.txt:23
msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""
"It can assign settings dynamically using normal Python syntax. 예를 들어 ::"

# 155ba1d897214784bbce7c35698a7658
#: ../../topics/settings.txt:28
msgid "It can import values from other settings files."
msgstr ""

# 097419b814af4a0aa316cbcf9c59a668
#: ../../topics/settings.txt:33
msgid "Designating the settings"
msgstr ""

# e0ec1b2ec0a445d1ae4cb58a941a0433
#: ../../topics/settings.txt:35
msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# 18f3720bc3cc48c39c5754aa1e0dfea5
#: ../../topics/settings.txt:38
msgid ""
"The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e."
"g. ``mysite.settings``. Note that the settings module should be on the "
"Python `import search path`_."
msgstr ""

# e679729907c24d3c9773493a4ea4cb5d
#: ../../topics/settings.txt:45
msgid "The django-admin.py utility"
msgstr ""

# e8f696bcd0ea45bbbe062934cf985f2f
#: ../../topics/settings.txt:47
msgid ""
"When using :doc:`django-admin.py </ref/django-admin>`, you can either set "
"the environment variable once, or explicitly pass in the settings module "
"each time you run the utility."
msgstr ""

# 52ca4bf3acad462ebee3c13b81babdcd
#: ../../topics/settings.txt:51
msgid "Example (Unix Bash shell)::"
msgstr ""

# 04da8fb219cf47ef8e6ce061f3fbe37f
#: ../../topics/settings.txt:56
msgid "Example (Windows shell)::"
msgstr ""

# a8f21890f88440e3a6b98aa2ac58b178
#: ../../topics/settings.txt:61
msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr ""

# 23789aaa6c194cb288fb7d6e2ef980e0
#: ../../topics/settings.txt:68
msgid "On the server (mod_wsgi)"
msgstr ""

# 94adf1dc934349fda84c35d7fd22a9cc
#: ../../topics/settings.txt:70
msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""

# 91f4da434f6c458c8554d24c82e8c6a6
#: ../../topics/settings.txt:77
msgid ""
"Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/"
"modwsgi>` for more information and other common elements to a Django WSGI "
"application."
msgstr ""

# 66bf82e338c3434da9588005f0aa32ca
#: ../../topics/settings.txt:82
msgid "Default settings"
msgstr ""

# 5db9205d480e4a1abcfb01769c0e24d9
#: ../../topics/settings.txt:84
msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr ""

# 88f2fa8af0dc47d0b551deb94a36f7ca
#: ../../topics/settings.txt:88
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

# 524e247e82904b3bb4aa95db98acdb87
#: ../../topics/settings.txt:90
msgid "Load settings from ``global_settings.py``."
msgstr ""

# a5d86882e51d4535924c515d711211af
#: ../../topics/settings.txt:91
msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr ""

# 0e041851af0a416290c5afbad402a58d
#: ../../topics/settings.txt:94
msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""

# 94174a43a8ec4df5ae29ae1e280fc7a5
#: ../../topics/settings.txt:98
msgid "Seeing which settings you've changed"
msgstr ""

# e082d5b1f06d41d59ff610f294d52c86
#: ../../topics/settings.txt:100
msgid ""
"There's an easy way to view which of your settings deviate from the default "
"settings. The command ``python manage.py diffsettings`` displays differences "
"between the current settings file and Django's default settings."
msgstr ""

# b31025559c04463998d7b77fdf9e9dc6
#: ../../topics/settings.txt:104
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

# 48b7393bfe3c4f2ebe435527d3613048
#: ../../topics/settings.txt:107
msgid "Using settings in Python code"
msgstr ""

# 821045d1a0404c97926e6ab6bbb44040
#: ../../topics/settings.txt:109
msgid ""
"In your Django apps, use settings by importing the object ``django.conf."
"settings``. Example::"
msgstr ""

# b753fa3e8e104ed09187b6a1755b9f73
#: ../../topics/settings.txt:117
msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""

# d5e8280c12c04affb9a8abe890c28447
#: ../../topics/settings.txt:122
msgid ""
"Also note that your code should *not* import from either ``global_settings`` "
"or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""

# 96cf502fd95b4f5d9fdbf6738c87e529
#: ../../topics/settings.txt:129
msgid "Altering settings at runtime"
msgstr ""

# 40909be35bf447d29034723942f85201
#: ../../topics/settings.txt:131
msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr ""

# c0057c8c4b4241b796a933c12e64cc0f
#: ../../topics/settings.txt:138
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

# a2138e6f302b42b78a49c792e5741ff2
#: ../../topics/settings.txt:141
msgid "Security"
msgstr ""

# 8606e51d601f48a6800c3d3db75d7677
#: ../../topics/settings.txt:143
msgid ""
"Because a settings file contains sensitive information, such as the database "
"password, you should make every attempt to limit access to it. For example, "
"change its file permissions so that only you and your Web server's user can "
"read it. This is especially important in a shared-hosting environment."
msgstr ""

# 2ee68ec8d8634e1cb6b7d0258e670c7e
#: ../../topics/settings.txt:149
msgid "Available settings"
msgstr ""

# 07fe287d5d2b45609ff6429dad2a47c1
#: ../../topics/settings.txt:151
msgid ""
"For a full list of available settings, see the :doc:`settings reference </"
"ref/settings>`."
msgstr ""

# 7b8b456137be4276bdf41f4e8f992ee2
#: ../../topics/settings.txt:154
msgid "Creating your own settings"
msgstr ""

# 940011515ab345cf8c711e958b56cd4a
#: ../../topics/settings.txt:156
msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps. Just follow these conventions:"
msgstr ""

# 4fa6b21bbccb47fc908139408c820662
#: ../../topics/settings.txt:159
msgid "Setting names are in all uppercase."
msgstr ""

# 4b2a0368f1e94daebe5a8d60021e6a2f
#: ../../topics/settings.txt:160
msgid "Don't reinvent an already-existing setting."
msgstr ""

# 1a1d405bf428461d90a2baaffc70e581
#: ../../topics/settings.txt:162
msgid ""
"For settings that are sequences, Django itself uses tuples, rather than "
"lists, but this is only a convention."
msgstr ""

# 08419f2710c24b13a631034ed4dbde91
#: ../../topics/settings.txt:168
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

# 6afc3f449b4b4d7aa4641ddbccd67057
#: ../../topics/settings.txt:170
msgid ""
"In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""

# 6b3359e13d034cb2aa437c7179bd67dc
#: ../../topics/settings.txt:175
msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr ""

# 19701f27a6cc4ddd8195d2789547231d
#: ../../topics/settings.txt:187
msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above. "
"If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""

# 71b60dcf1ddb4135b439f1f7d91331c1
#: ../../topics/settings.txt:193
msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""

# 722d8b1b8cf147d3a9a33093da174f29
#: ../../topics/settings.txt:197
msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""

# 505871e822d849aa9d16375c9d977c34
#: ../../topics/settings.txt:204
msgid "Custom default settings"
msgstr ""

# 3da11f69187248189231868d5da8f729
#: ../../topics/settings.txt:206
msgid ""
"If you'd like default values to come from somewhere other than ``django.conf."
"global_settings``, you can pass in a module or class that provides the "
"default settings as the ``default_settings`` argument (or as the first "
"positional argument) in the call to ``configure()``."
msgstr ""

# 81db6316d22b4e18b8fb55de1d45871a
#: ../../topics/settings.txt:211
msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and "
"the :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""

# 4bb7dde0c3f748ec9fc83f164f26326c
#: ../../topics/settings.txt:220
msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""

# 70f0282317034660b9280703451cae39
#: ../../topics/settings.txt:225
msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware "
"that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that "
"might be used in that code you are importing. Check in ``django.conf."
"settings.global_settings`` for the full list."
msgstr ""

# 915cd91a781b4a16acb6788dc9659733
#: ../../topics/settings.txt:233
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

# aa6d31d63ed147deb95471e1103270ba
#: ../../topics/settings.txt:235
msgid ""
"If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"you *must* call ``configure()`` at some point before using any code that "
"reads settings."
msgstr ""

# 5172acc8f66d404486756b9508307839
#: ../../topics/settings.txt:239
msgid ""
"If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, "
"Django will raise an ``ImportError`` exception the first time a setting is "
"accessed."
msgstr ""

# 0e207b5babc24638a7279f5f14689b95
#: ../../topics/settings.txt:243
msgid ""
"If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating "
"that settings have already been configured. There is a property just for "
"this purpose:"
msgstr ""

# 8cad70fe93ed476db371e12665a64d27
#: ../../topics/settings.txt:256
msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""

# a02b3624cd25477abd0ac35dbc93fb8b
#: ../../topics/settings.txt:259
msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or "
"``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

# a837092a239843bab8def1f7cb6491c4
#: ../../topics/signals.txt:3
msgid "Signals"
msgstr ""

# 733058a00447479ab8d5d5acf400aa3e
#: ../../topics/signals.txt:8
msgid ""
"Django includes a \"signal dispatcher\" which helps allow decoupled "
"applications get notified when actions occur elsewhere in the framework. In "
"a nutshell, signals allow certain *senders* to notify a set of *receivers* "
"that some action has taken place. They're especially useful when many pieces "
"of code may be interested in the same events."
msgstr ""

# dc6993b6ed084cbab2447eeeb46a5f11
#: ../../topics/signals.txt:14
msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

# 8f7325950fea42ef84748ae6b7271cc3
#: ../../topics/signals.txt:18
msgid ""
":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals."
"post_save`"
msgstr ""

# e6f47a1b61e24cf1a4ee0546db57729d
#: ../../topics/signals.txt:21
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""

# a451694f1eeb474e83b76506131b7b50
#: ../../topics/signals.txt:24
msgid ""
":data:`django.db.models.signals.pre_delete` & :data:`django.db.models."
"signals.post_delete`"
msgstr ""

# 20f9f5f20508467db33f6f0bc495d379
#: ../../topics/signals.txt:27
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method "
"or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

# a74cbfcf86ff45fda7f1eadb7898ad8d
#: ../../topics/signals.txt:31
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

# e5f31c5db7ba49f59aa7c06c00c39399
#: ../../topics/signals.txt:33
msgid "Sent when a :class:`ManyToManyField` on a model is changed."
msgstr ""

# c9a893b84ac9403ba151e91e8118cbc8
#: ../../topics/signals.txt:35
msgid ""
":data:`django.core.signals.request_started` & :data:`django.core.signals."
"request_finished`"
msgstr ""

# 4102f64a708c4c53aa7a3c0e1efbf529
#: ../../topics/signals.txt:38
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

# 9c8ad06180844299994d1fd51e958479
#: ../../topics/signals.txt:40
msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

# 25f15064ea8e43688c758ffc2b63aa92
#: ../../topics/signals.txt:43
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

# 8a014b8b58664bfd878d3b9d7946c1f5
#: ../../topics/signals.txt:48
msgid "Listening to signals"
msgstr ""

# 0137f682b67d4203bba0fc534d3aa7a7
#: ../../topics/signals.txt:50
msgid ""
"To receive a signal, you need to register a *receiver* function that gets "
"called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr ""

# cf52b1b94afd4322a01ad9bd73f85b7d
#: ../../topics/signals.txt:71
msgid ""
"Let's see how this works by registering a signal that gets called after each "
"HTTP request is finished. We'll be connecting to the :data:`~django.core."
"signals.request_finished` signal."
msgstr ""

# f3e311228140417fb9e0cf61d08341e6
#: ../../topics/signals.txt:78
msgid "Receiver functions"
msgstr ""

# 3cc0fa8a865b4fb8a9c60422f5b3f294
#: ../../topics/signals.txt:80
msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method:"
msgstr ""

# 4a62568c77044b29ac08b32988adc017
#: ../../topics/signals.txt:88
msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

# 01de71a72c09479a96896ddaa6e08c8c
#: ../../topics/signals.txt:91
msgid ""
"We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` "
"argument. All signals send keyword arguments, and may change those keyword "
"arguments at any time. In the case of :data:`~django.core.signals."
"request_finished`, it's documented as sending no arguments, which means we "
"might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

# 21194aff1cd24c00a1dc72291627858b
#: ../../topics/signals.txt:100
msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your "
"receiver must be able to handle those new arguments."
msgstr ""

# bab1fe71542e4ae993c927c21db437db
#: ../../topics/signals.txt:107
msgid "Connecting receiver functions"
msgstr ""

# 2d1646153b6a4807ade7100a0cf31244
#: ../../topics/signals.txt:109
msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route:"
msgstr ""

# bb1f9d7de72e4ca3a2e5663be0a97fe1
#: ../../topics/signals.txt:118
msgid ""
"Alternatively, you can use a ``receiver`` decorator when you define your "
"receiver:"
msgstr ""

# 9c553c3824c943139dd61f7f340de69d
#: ../../topics/signals.txt:130
msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

# 9f6daf56898347fcbb7a9bd389c2035f
#: ../../topics/signals.txt:132
msgid ""
"Note that ``receiver`` can also take a list of signals to connect a function "
"to."
msgstr ""

# 3a3a049e4d824c69b242ef27e4240be5
#: ../../topics/signals.txt:137
msgid "The ability to pass a list of signals was added."
msgstr ""

# 71cc62f1279343a3b27eac25915acb0e
#: ../../topics/signals.txt:141
msgid ""
"You can put signal handling and registration code anywhere you like. "
"However, you'll need to make sure that the module it's in gets imported "
"early on so that the signal handling gets registered before any signals need "
"to be sent. This makes your app's ``models.py`` a good place to put "
"registration of signal handlers."
msgstr ""

# 0a79ff6ac0a5413d97e3673dac1823d9
#: ../../topics/signals.txt:150
msgid "Connecting to signals sent by specific senders"
msgstr ""

# 92c8b8ef0791450e96035ae2a2cc9750
#: ../../topics/signals.txt:152
msgid ""
"Some signals get sent many times, but you'll only be interested in receiving "
"a certain subset of those signals. For example, consider the :data:`django."
"db.models.signals.pre_save` signal sent before a model gets saved. Most of "
"the time, you don't need to know when *any* model gets saved -- just when "
"one *specific* model is saved."
msgstr ""

# 5f83c8b625ff42a9b5a3306b40ef73cf
#: ../../topics/signals.txt:158
msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model:"
msgstr ""

# 86ceef3b6e6f40c9baad97271a88d25e
#: ../../topics/signals.txt:173
msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

# a24b67ca489a4badacd60e23adb9d425
#: ../../topics/signals.txt:176
msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

# 390ce8c7b29f4bbe9138b1edec03f6c1
#: ../../topics/signals.txt:183
msgid "Preventing duplicate signals"
msgstr ""

# 71dfa88eee9f4ec487de6ebcd45f3b5f
#: ../../topics/signals.txt:185
msgid ""
"In some circumstances, the module in which you are connecting signals may be "
"imported multiple times. This can cause your receiver function to be "
"registered more than once, and thus called multiples times for a single "
"signal event."
msgstr ""

# 372534928f2a439687194e5854390d54
#: ../../topics/signals.txt:190
msgid ""
"If this behavior is problematic (such as when using signals to send an email "
"whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` "
"argument to identify your receiver function. This identifier will usually be "
"a string, although any hashable object will suffice. The end result is that "
"your receiver function will only be bound to the signal once for each unique "
"``dispatch_uid`` value."
msgstr ""

# e5372ad65a10418c8d7eb36547dd0ccc
#: ../../topics/signals.txt:204
msgid "Defining and sending signals"
msgstr ""

# d5caea9393fd4bb6b8cd68f372f2e9a5
#: ../../topics/signals.txt:206
msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""

# b85b9750a4fc432bbbff6aa555a73b79
#: ../../topics/signals.txt:210
msgid "Defining signals"
msgstr ""

# c8afcf63d827426f96424b771de147f0
#: ../../topics/signals.txt:214
msgid ""
"All signals are :class:`django.dispatch.Signal` instances. The "
"``providing_args`` is a list of the names of arguments the signal will "
"provide to listeners."
msgstr ""

# 4c4ac9562d4c49a6837df692275f4ed7
#: ../../topics/signals.txt:218
msgid "For example:"
msgstr ""

# 94688ad41f7442db8ae6fa45a4d96b7a
#: ../../topics/signals.txt:226
msgid ""
"This declares a ``pizza_done`` signal that will provide receivers with "
"``toppings`` and ``size`` arguments."
msgstr ""

# 7f9177312d394a6c84467fc75bf39aaf
#: ../../topics/signals.txt:229
msgid ""
"Remember that you're allowed to change this list of arguments at any time, "
"so getting the API right on the first try isn't necessary."
msgstr ""

# 85eb83b059f24106b81deeb2345c1454
#: ../../topics/signals.txt:232
msgid "Sending signals"
msgstr ""

# 15d49a4b30c34a9a95a69a5145b2ec36
#: ../../topics/signals.txt:234
msgid "There are two ways to send signals in Django."
msgstr ""

# ab18bd30c55b4fd4a5c96dcbc8609aec
#: ../../topics/signals.txt:239
msgid ""
"To send a signal, call either :meth:`Signal.send` or :meth:`Signal."
"send_robust`. You must provide the ``sender`` argument, and may provide as "
"many other keyword arguments as you like."
msgstr ""

# 804206c39f3a4bf3b6fc8e5e389f425a
#: ../../topics/signals.txt:243
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr ""

# 6a58c52cc7d54da796c34e3e5ca2385d
#: ../../topics/signals.txt:254
msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs ``"
"[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

# 2d85c6afd91646379598d7c51a475894
#: ../../topics/signals.txt:258
msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

# b9f9cee8c5a642e79e939939db07d7f0
#: ../../topics/signals.txt:263
msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

# 88cf383850c743c2b7c5067660881430
#: ../../topics/signals.txt:268
msgid "Disconnecting signals"
msgstr ""

# 4011ff1de44a42fe9102e3e0e31aed6a
#: ../../topics/signals.txt:272
msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`."
msgstr ""

# a095b20254db445ba8c0f7f81978d823
#: ../../topics/signals.txt:275
msgid ""
"The *receiver* argument indicates the registered receiver to disconnect. It "
"may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

# 6389a5aab3854e5988887daa41e0af32
#: ../../topics/signing.txt:3
msgid "Cryptographic signing"
msgstr ""

# 4e15d634537f4c34ba52a005354c1542
#: ../../topics/signing.txt:10
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

# 9319023df9c745a4a497de9997d14d03
#: ../../topics/signing.txt:15
msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 1d35af092fc84174bebcd0a8a5b7f3eb
#: ../../topics/signing.txt:19
msgid "You may also find signing useful for the following:"
msgstr ""

# 325a8f5ca1184d009406f8ede0fa70b0
#: ../../topics/signing.txt:21
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

# e6470e8504ad4f908a20cc3f084f1f0c
#: ../../topics/signing.txt:24
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

# 339df827241a4cab98f53d11648cb893
#: ../../topics/signing.txt:26
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""

# 40fc53d68d094cd4b0b717fa1886d73a
#: ../../topics/signing.txt:31
msgid "Protecting the SECRET_KEY"
msgstr ""

# ae240f7b2a7744b78b956ea41c070699
#: ../../topics/signing.txt:33
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""

# 01d77fa9c01642b48a334d5dd24e396a
#: ../../topics/signing.txt:40
msgid "Using the low-level API"
msgstr ""

# f3fc41e6ad814911b0f11ba73bcbc6f9
#: ../../topics/signing.txt:44
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""

# ea17ce4b11e64085810296f3fee0f171
#: ../../topics/signing.txt:53
msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""

# c1c0ed7afea844a3a996b2741f60d56f
#: ../../topics/signing.txt:60
msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""

# 2164184b249e417383b6eed61cb8806d
#: ../../topics/signing.txt:69
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

# b53f3bb9c5ed40828a0476b9dd554a5f
#: ../../topics/signing.txt:79
msgid "Using the salt argument"
msgstr ""

# 5ccd09e676114afdab1495ec6d3febee
#: ../../topics/signing.txt:81
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""

# 21873f9195d3484aa7b23d51fae2b570
#: ../../topics/signing.txt:95
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""

# 61b2358c5d8640049aa3309924a017c8
#: ../../topics/signing.txt:103
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

# 2b70613405784be9bb0bf80bd5e179c3
#: ../../topics/signing.txt:107
msgid "Verifying timestamped values"
msgstr ""

# a353439872654493889b2125713d08cf
#: ../../topics/signing.txt:111
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

# f4ade9b114aa442cb5519593415165a3
#: ../../topics/signing.txt:129
msgid "Protecting complex data structures"
msgstr ""

# e3aaec34a52e467eabc95ebeec4ddc18
#: ../../topics/signing.txt:131
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to "
"execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

# 178d26033fae4149a1490e680c81e303
#: ../../topics/signing.txt:146
msgid "Returns URL-safe, sha1 signed base64 compressed JSON string."
msgstr ""

# 362211f7fc944376bd3ea9b98849dbfa
#: ../../topics/signing.txt:150
msgid "Reverse of dumps(), raises ``BadSignature`` if signature fails."
msgstr ""

# edb126f1ec0443b392361d7647f394cc
#: ../../topics/templates.txt:3
msgid "The Django template language"
msgstr ""

# 983f1600f09d48a6a5c73cc1990f88c0
#: ../../topics/templates.txt:7
msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""

# 586052118a844689897c784f88c83dd7
#: ../../topics/templates.txt:11
msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or CheetahTemplate_, you should feel right at home with Django's "
"templates."
msgstr ""

# 357616b408b84af4b478683441fbb474
#: ../../topics/templates.txt:18
msgid ""
"If you have a background in programming, or if you're used to languages like "
"PHP which mix programming code directly into HTML, you'll want to bear in "
"mind that the Django template system is not simply Python embedded into "
"HTML. This is by design: the template system is meant to express "
"presentation, not program logic."
msgstr ""

# d3135876e07b4b9c903b1ddc956d076a
#: ../../topics/templates.txt:24
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""

# 26c2d5e2c3154f84bfdb59bbe746b364
#: ../../topics/templates.txt:37
msgid "Templates"
msgstr ""

# e1a206ebde054a67a04b1efe992bc65c
#: ../../topics/templates.txt:41
msgid ""
"A template is simply a text file. It can generate any text-based format "
"(HTML, XML, CSV, etc.)."
msgstr ""

# 63f14a723a35485f84178664190d9635
#: ../../topics/templates.txt:44
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

# 7d87b8d739db4435b1afa9c31b45dbe9
#: ../../topics/templates.txt:47
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document.::"
msgstr ""

# f3fe09aaa475488ba2c9369d89ac735e
#: ../../topics/templates.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. At World Online, we use it for emails, JavaScript and CSV. "
"You can use the template language for any text-based format."
msgstr ""

# bc29937f10d04ec188f4dd706a633e28
#: ../../topics/templates.txt:75
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

# 6a210312a95d47eab928eec8630eecd4
#: ../../topics/templates.txt:78
msgid "Variables"
msgstr ""

# 97cd069807874493a051b07da7b140ad
#: ../../topics/templates.txt:80
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable "
"sections, although that has a special meaning, as indicated below. "
"Importantly, *you cannot have spaces or punctuation characters in variable "
"names.*"
msgstr ""

# 2e2e09059924409eb4167a66831f5dc9
#: ../../topics/templates.txt:88
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

# dce99e3d3b304bfa8958a2469654957a
#: ../../topics/templates.txt:92
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""

# 382ebda6142b41fe898aa164c653bd3a
#: ../../topics/templates.txt:95
msgid "Dictionary lookup"
msgstr ""

# e54fdab214994eceb20174314e2894ea
#: ../../topics/templates.txt:96
msgid "Attribute lookup"
msgstr ""

# b10c6bd62faa4a7aa43a80402cb60496
#: ../../topics/templates.txt:97
msgid "Method call"
msgstr ""

# 2e500042ef9042de95aa64f51e2c55eb
#: ../../topics/templates.txt:98
msgid "List-index lookup"
msgstr ""

# 801b3572461245c69a1e477b5ca3f598
#: ../../topics/templates.txt:100
msgid ""
"This can cause some unexpected behavior with objects that override "
"dictionary lookup. For example, consider the following code snippet that "
"attempts to loop over a ``collections.defaultdict``::"
msgstr ""

# 9e02da9bb1c640aca71667af9d1bacec
#: ../../topics/templates.txt:108
msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides "
"a default value instead of using the intended ``.iteritems()`` method. In "
"this case, consider converting to a dictionary first."
msgstr ""

# bbb5f457c7f24558bd8783171d071bd3
#: ../../topics/templates.txt:112
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""

# ddc523fa8ea34f7f95f968a7311f5567
#: ../../topics/templates.txt:115
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set "
"to ``''`` (the empty string) by default."
msgstr ""

# 3b52c9cfac91460c90f25f7c881bc8e9
#: ../../topics/templates.txt:119
msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable \"bar"
"\", if one exists in the template context."
msgstr ""

# bef8a100783544998772923ae7a349da
#: ../../topics/templates.txt:126
msgid "You can modify variables for display by using **filters**."
msgstr ""

# 905c3f82850d49fc847a48d3ad7cc2a7
#: ../../topics/templates.txt:128
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""

# 0570c75c28744a249322661323b2fb4d
#: ../../topics/templates.txt:132
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""

# 5317af1985064693882623dcd618f397
#: ../../topics/templates.txt:136
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""

# 2ec41e28f9424c6a9bece94858d2c83c
#: ../../topics/templates.txt:140
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

# 58c6a748bfe04360b61dc79e9d9a5754
#: ../../topics/templates.txt:143
msgid ""
"Django provides about thirty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""

# 53a68a913c8f4270893426122012938a
#: ../../topics/templates.txt:149
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable"
msgstr ""

# 216119bf4dfc4f3682dcd9fec28f0c5d
#: ../../topics/templates.txt:156
msgid ""
"If ``value`` isn't provided or is empty, the above will display \"``nothing``"
"\"."
msgstr ""

# 4b75bc376d6f419faea1140366cb3d2a
#: ../../topics/templates.txt:160
msgid ""
"Returns the length of the value. This works for both strings and lists; for "
"example::"
msgstr ""

# c77f1938371b48e98b67c954b916c2e6
#: ../../topics/templates.txt:165
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

# 02a2ed03e6874e16bddf17b1bcbd6e37
#: ../../topics/templates.txt:168
msgid "Strips all [X]HTML tags. For example::"
msgstr "Strips all [X]HTML tags. 예를 들어 ::"

# f613ed8b99ea456f93c8a76de5abed6a
#: ../../topics/templates.txt:172
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, "
"the output will be ``\"Joel is a slug\"``."
msgstr ""

# beae9a5d16b04b57814b339e055ce146
#: ../../topics/templates.txt:175
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

# b3ea0e15130a463e932b36269bf3c455
#: ../../topics/templates.txt:178
msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""

# a5bbd2beecd24b53a4495c3db487e376
# 52401d08959e42abba6411af0a3363f5
#: ../../topics/templates.txt:183 ../../topics/templates.txt:249
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""

# 0039a73cceee4306b544ca84f5434b1f
#: ../../topics/templates.txt:188
msgid "Tags"
msgstr ""

# c80456c7cca749789d7a4d7d60d7caf7
#: ../../topics/templates.txt:190
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""

# 210df69b029c48e283b6d5c0603c50bf
#: ../../topics/templates.txt:194
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""

# 8136d3a5aab041c59353419651d5ab73
#: ../../topics/templates.txt:197
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""

# 2466f463f3af4402be89a54bffe2aed1
#: ../../topics/templates.txt:203
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``::"
msgstr ""

# 7fcc4adc1acb49c398c87de0f5deddc9
#: ../../topics/templates.txt:213
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""

# cfa05b139d2c4cef8b57d2fce7f5e432
#: ../../topics/templates.txt:222
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

# 9fa54a612aec4469a1aace5223be4634
#: ../../topics/templates.txt:225
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

# 01574e7924ec439da189a1caa70a8ec5
#: ../../topics/templates.txt:233
msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""

# 915156cc99e84698b4ba5ae2904a8a30
#: ../../topics/templates.txt:238
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""

# ecb57799651941d885ca1dc339b54e18
#: ../../topics/templates.txt:241
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

# 2d13c4a1220a4134b57675b6170c257b
#: ../../topics/templates.txt:244
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""

# ef5e35b5bbe44eccb1dc298446501b22
#: ../../topics/templates.txt:254
msgid "Comments"
msgstr ""

# 79d4de1c29814b4dba68ffbe95b94484
#: ../../topics/templates.txt:256
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""

# e58e05ceb05047de8d8f5e6bd1b850bc
#: ../../topics/templates.txt:258
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

# e2ac7ce2f4424991b8a9692762d29805
#: ../../topics/templates.txt:262
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr "A comment can contain any template code, invalid or not. 예를 들어 ::"

# 52f88ac83b8b494f8a76ab81aec7ceb4
#: ../../topics/templates.txt:266
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

# 9ce3e40c36094f8abe9ff93ce3b39133
#: ../../topics/templates.txt:273
msgid "Template inheritance"
msgstr ""

# 19b365478c8a41388f66aae11937443f
#: ../../topics/templates.txt:275
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""

# 0bdbd9ca2138428a9f87df840aee5e05
#: ../../topics/templates.txt:280
msgid ""
"It's easiest to understand template inheritance by starting with an example::"
msgstr ""

# 137fb00712bd4bcc93fe10186296e9de
#: ../../topics/templates.txt:305
msgid ""
"This template, which we'll call ``base.html``, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the "
"job of \"child\" templates to fill the empty blocks with content."
msgstr ""

# efb1207e94c64d34bac86ca3ef8e7155
#: ../../topics/templates.txt:309
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""

# cd5c157711d043b581dab9ad30d706f1
#: ../../topics/templates.txt:313
msgid "A child template might look like this::"
msgstr ""

# 05ce3332920846968a122f91fcafb85e
#: ../../topics/templates.txt:326
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""

# 38089edfc08b4c91a664ed19208e8bb8
#: ../../topics/templates.txt:330
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""

# 9829d62257d64abd891f140dafe353c6
#: ../../topics/templates.txt:360
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""

# 5e936022658e44048b758c19d98904ce
#: ../../topics/templates.txt:364
msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""

# 83bf8a5d3f3f41d69129283d9a999532
#: ../../topics/templates.txt:367
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""

# 0b15924617c04ccaa914244681e9c975
#: ../../topics/templates.txt:369
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""

# b80f55ae2a9143f4a05eb3668e81b313
#: ../../topics/templates.txt:373
msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""

# 82021048a3f04e2a9998e06fbff911c9
#: ../../topics/templates.txt:377
msgid ""
"This approach maximizes code reuse and makes it easy to add items to shared "
"content areas, such as section-wide navigation."
msgstr ""

# e6d63facecce4e3199ec7f308a5b5f97
#: ../../topics/templates.txt:380
msgid "Here are some tips for working with inheritance:"
msgstr ""

# 8e12e7420944464097063ad582c4eff6
#: ../../topics/templates.txt:382
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""

# a027f4236979427196e7351392976e9b
#: ../../topics/templates.txt:385
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""

# 3942cc522b9743f887de778ae1f3c017
#: ../../topics/templates.txt:390
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""

# 3e386342fb664f3db9154cfc9c1863b2
#: ../../topics/templates.txt:394
msgid ""
"If you need to get the content of the block from the parent template, the ``"
"{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""

# e4d547be246b43258504ff93e340305b
#: ../../topics/templates.txt:401
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. 예를 들어 ::"

# 6e830bd6a944463d98e528e4b66f93c1
#: ../../topics/templates.txt:408
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""

# a595d1ff85854cc8afb43416dd8c5ac7
#: ../../topics/templates.txt:411
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""

# 1cb0c2cd65e7494d9f9ca56ad4d63964
#: ../../topics/templates.txt:422
msgid "Automatic HTML escaping"
msgstr ""

# 8f81fae1fb944462b172f1bd263ab79f
#: ../../topics/templates.txt:424
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""

# 44c0bcba85004db7b7d4bc08ee591047
#: ../../topics/templates.txt:430
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered his name as this::"
msgstr ""

# 8fa5f583964c46e6898604a02da59134
#: ../../topics/templates.txt:435
msgid "With this name value, the template would be rendered as::"
msgstr ""

# cca50a5071f0447eb51d3136e29755ff
#: ../../topics/templates.txt:439
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

# 516fae6ee8e84bfaa044e698f349893b
#: ../../topics/templates.txt:441
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

# b410c57f57014facbacecdbb89f4f9bf
#: ../../topics/templates.txt:447
msgid "That would result in a rendered template like this::"
msgstr ""

# a7f0a9ddb5844b609373c93f77d3b8d4
#: ../../topics/templates.txt:451
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""

# d7831c459ab64251aaccd4aef7c39944
#: ../../topics/templates.txt:453
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

# 4b2767b46b5c4e42bc6898df52580aa5
#: ../../topics/templates.txt:458
msgid "To avoid this problem, you have two options:"
msgstr ""

# fd68f53158d845b485cdcfe46efd8142
#: ../../topics/templates.txt:460
msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""

# 645ec1cf0fc3474785d55829906bc47e
#: ../../topics/templates.txt:467
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""

# c93e75fc34d1479a8a41988f399d2a86
#: ../../topics/templates.txt:470
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""

# 4e042dfdabfa468a824306c42d31c6b9
#: ../../topics/templates.txt:474
msgid "``<`` is converted to ``&lt;``"
msgstr ""

# d122b16035004148a22698cbc631d902
#: ../../topics/templates.txt:475
msgid "``>`` is converted to ``&gt;``"
msgstr ""

# 04256b4fbf5e443492da01f4cc0b56e0
#: ../../topics/templates.txt:476
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

# cbeeb00ade3a40de91c2f7f1536137e9
#: ../../topics/templates.txt:477
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

# 17c83ddf570b42409a59ba652ba87e39
#: ../../topics/templates.txt:478
msgid "``&`` is converted to ``&amp;``"
msgstr ""

# 3f2bdc2fcf74472ebb168ab85eca3edb
#: ../../topics/templates.txt:480
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""

# 45d82693294d4f77ae8008844dc1d09c
#: ../../topics/templates.txt:486
msgid "How to turn it off"
msgstr ""

# 15a49d78a63a4c0487045b0c8b18ee88
#: ../../topics/templates.txt:488
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""

# 5e21e138973348769cbaf7440327114e
#: ../../topics/templates.txt:491
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""

# 58262df4f21443eeaa87e8e64dfa0e15
#: ../../topics/templates.txt:499
msgid "For individual variables"
msgstr ""

# c36400378b93463ebe0ebdadecf01b26
#: ../../topics/templates.txt:501
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter::"
msgstr ""

# 18062944468a4b628ac67a3800f14ce8
#: ../../topics/templates.txt:507
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""

# 41126391964441cface022e4d13d5cea
#: ../../topics/templates.txt:515
msgid "For template blocks"
msgstr ""

# 9351a7b440774d659a80b53e8ad65895
#: ../../topics/templates.txt:517
msgid ""
"To control auto-escaping for a template, wrap the template (or just a "
"particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

# 6d7c04ee983c40998d4699aaf6089f2b
#: ../../topics/templates.txt:524
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""

# 6a00b0ec54024c4e9276c4460c5e61cb
#: ../../topics/templates.txt:539
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example::"
msgstr ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. 예를 들어 ::"

# b9e891e1da5f48948b20eec5a4d2e934
#: ../../topics/templates.txt:558
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

# 6ca67476947f404c94a945fa056e1f8e
#: ../../topics/templates.txt:566
msgid "Notes"
msgstr ""

# d33b79c962bc4df3b8823bcdaf667aee
#: ../../topics/templates.txt:568
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""

# ddd5d30d9c30409fba1f5fe168109e01
#: ../../topics/templates.txt:573
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

# 69ff95dbd42444b28b4f6835489edc7d
#: ../../topics/templates.txt:582
msgid "String literals and automatic escaping"
msgstr ""

# ce9187d9a14d4a9ba9dd416665fb9f2c
#: ../../topics/templates.txt:584
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

# b1cdc715d17242399f4ed758d6fd534a
#: ../../topics/templates.txt:588
msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""

# ead036ec2cd441e9b23700abffc13aae
#: ../../topics/templates.txt:594
msgid "This means you would write ::"
msgstr ""

# 3ad457cee93b45ff94c885d6b835ee13
#: ../../topics/templates.txt:598
msgid "...rather than ::"
msgstr ""

# 4392d5fa70d041cbab4239ce7f1073ee
#: ../../topics/templates.txt:602
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""

# ca0494fb961f4ccd90f594d1e5213d2d
#: ../../topics/templates.txt:609
msgid "Accessing method calls"
msgstr ""

# 96eea756566843e3ba54b21918857f1b
#: ../../topics/templates.txt:611
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""

# f163d104d7824890b05c917794a84f42
#: ../../topics/templates.txt:623
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""

# 71367ae152204b4494db0f2b9ef9f3cf
#: ../../topics/templates.txt:629
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models::"
msgstr ""

# 22c5062bc1c24501a96e1160121ace32
#: ../../topics/templates.txt:640
msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""

# 549b3baf34254b2293e417fe3901bbb2
#: ../../topics/templates.txt:648
msgid "Custom tag and filter libraries"
msgstr ""

# b4f2c6d2971e4c05b0cbb7270f1c0a5d
#: ../../topics/templates.txt:650
msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, use the :ttag:`load` tag::"
msgstr ""

# 8ac4906dead2438695ce4c22d84c2173
#: ../../topics/templates.txt:657
msgid ""
"In the above, the :ttag:`load` tag loads the ``comments`` tag library, which "
"then makes the ``comment_form`` tag available for use. Consult the "
"documentation area in your admin to find the list of custom libraries in "
"your installation."
msgstr ""

# 3b76cf5d6e7d4c7d911bd25d24a0050e
#: ../../topics/templates.txt:661
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""

# c86b4391c8d14e4ca343f78209b08618
#: ../../topics/templates.txt:666
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""

# 69f0bc05947b4117a59432fccf474b38
#: ../../topics/templates.txt:670
msgid "Custom libraries and template inheritance"
msgstr ""

# f99bec2c310a4cfd962c4cafacb8aa77
#: ../../topics/templates.txt:672
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""

# 9bf500f672fa4272b62c5a3004acd81d
#: ../../topics/templates.txt:676
msgid ""
"For example, if a template ``foo.html`` has ``{% load comments %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the comments template tags and filters. The child template is "
"responsible for its own ``{% load comments %}``."
msgstr ""

# 9fd6834fecb2432d98e1ce9e6c0a7248
#: ../../topics/templates.txt:681
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

# d4dcfd362de2484f98d89728fa157a56
#: ../../topics/testing.txt:3
msgid "Testing Django applications"
msgstr ""

# 38b93735497e412983cd307cb7602b43
#: ../../topics/testing.txt:8
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

# 094650880d424bc39428ee50304d5aaa
#: ../../topics/testing.txt:12
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""

# 8a28508c32434519b7f03f6f76b0e963
#: ../../topics/testing.txt:15
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

# e6d8a70378ff4b26a0d7d6a10216280f
#: ../../topics/testing.txt:19
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

# 2d2899812e2d4d3ca56bd7c0b9185477
#: ../../topics/testing.txt:26
msgid "The best part is, it's really easy."
msgstr ""

# 3ad74d090dd744e09c0234b1cebcc114
#: ../../topics/testing.txt:28
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""

# 5ba28170e168483e884f5bb118d45303
#: ../../topics/testing.txt:32
msgid "Writing tests"
msgstr ""

# a8a12ac0af364601b7ccedff3c421308
#: ../../topics/testing.txt:34
msgid ""
"There are two primary ways to write tests with Django, corresponding to the "
"two test frameworks that ship in the Python standard library. The two "
"frameworks are:"
msgstr ""

# 6983b6c921824d92b526eced691bf72d
#: ../../topics/testing.txt:38
msgid ""
"**Unit tests** -- tests that are expressed as methods on a Python class that "
"subclasses :class:`unittest.TestCase` or Django's customized :class:"
"`TestCase`. For example::"
msgstr ""
"**Unit tests** -- tests that are expressed as methods on a Python class that "
"subclasses :class:`unittest.TestCase` or Django's customized :class:"
"`TestCase`. 예를 들어 ::"

# f6e494519ec640a182d943bc9d63cf8f
#: ../../topics/testing.txt:50
msgid ""
"**Doctests** -- tests that are embedded in your functions' docstrings and "
"are written in a way that emulates a session of the Python interactive "
"interpreter. For example::"
msgstr ""
"**Doctests** -- tests that are embedded in your functions' docstrings and "
"are written in a way that emulates a session of the Python interactive "
"interpreter. 예를 들어 ::"

# 5d7e12292908447991a1e463dc8f3738
#: ../../topics/testing.txt:64
msgid ""
"We'll discuss choosing the appropriate test framework later, however, most "
"experienced developers prefer unit tests. You can also use any *other* "
"Python test framework, as we'll explain in a bit."
msgstr ""

# 5d521134bdff4c9a96af8b96a8428b42
#: ../../topics/testing.txt:69
msgid "Writing unit tests"
msgstr ""

# 99935f3c2550417688315e6a4c3a6207
#: ../../topics/testing.txt:71
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests in class-based approach."
msgstr ""

# f557ae37f9974fa3b383d7fc19a849dc
#: ../../topics/testing.txt:76
msgid ""
"Python 2.7 introduced some major changes to the unittest library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.5 "
"compatibility."
msgstr ""

# e76bc0e7183b4d77ac651f3acf9781c7
#: ../../topics/testing.txt:82
msgid ""
"To access this library, Django provides the :mod:`django.utils.unittest` "
"module alias. If you are using Python 2.7, or you have installed unittest2 "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

# 86e88ac46da24585ba3274f4184e7ee8
#: ../../topics/testing.txt:88
msgid "To use this alias, simply use::"
msgstr ""

# aa8a7dd00f6f44279b58a48a62ff3ab3
#: ../../topics/testing.txt:92
msgid "wherever you would have historically used::"
msgstr ""

# 7d940f88b74d49cd974dc37e5200baa4
#: ../../topics/testing.txt:96
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

# d755792c55fe44f7a503335fe6b78fd8
#: ../../topics/testing.txt:101
msgid ""
"For a given Django application, the test runner looks for unit tests in two "
"places:"
msgstr ""

# 8cd2e862f3454fbfab0392d771ec9742
#: ../../topics/testing.txt:104
msgid ""
"The ``models.py`` file. The test runner looks for any subclass of :class:"
"`unittest.TestCase` in this module."
msgstr ""

# 4b1ad42347ca48a28bbf60ff0ff590fc
#: ../../topics/testing.txt:107
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. Again, the test runner looks for any "
"subclass of :class:`unittest.TestCase` in this module."
msgstr ""

# cf6f2a83028b472788fbdd2cd477d167
#: ../../topics/testing.txt:111
msgid "Here is an example :class:`unittest.TestCase` subclass::"
msgstr ""

# 0dac757a81e54f508736c39db50356ba
#: ../../topics/testing.txt:126
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build "
"a test suite out of those test cases, and run that suite."
msgstr ""

# ff0aa49686304a5381672d6a17e90a38
#: ../../topics/testing.txt:131
msgid ""
"There is a second way to define the test suite for a module: if you define a "
"function called ``suite()`` in either ``models.py`` or ``tests.py``, the "
"Django test runner will use that function to construct the test suite for "
"that module. This follows the `suggested organization`_ for unit tests. See "
"the Python documentation for more details on how to construct a complex test "
"suite."
msgstr ""

# 9f9d01b95c834c84a5c3ec8d698359ec
#: ../../topics/testing.txt:138
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

# 0733586fe11d4c8ab2e969cb1e071a38
#: ../../topics/testing.txt:143
msgid "Writing doctests"
msgstr ""

# 19ae20cc57b34da1945d8c35d4c88416
#: ../../topics/testing.txt:145
msgid ""
"Doctests use Python's standard :mod:`doctest` module, which searches your "
"docstrings for statements that resemble a session of the Python interactive "
"interpreter. A full explanation of how :mod:`doctest` works is out of the "
"scope of this document; read Python's official documentation for the details."
msgstr ""

# 0a45ffb4de6a407791dfa513d2c15b57
#: ../../topics/testing.txt:152
msgid ""
"A good explanation of docstrings (and some guidelines for using them "
"effectively) can be found in :pep:`257`:"
msgstr ""

# 8a3edbc4655b42bfae442316a4f3db51
#: ../../topics/testing.txt:155
msgid ""
"A docstring is a string literal that occurs as the first statement in a "
"module, function, class, or method definition.  Such a docstring becomes the "
"``__doc__`` special attribute of that object."
msgstr ""

# 9b10a3a47be943ca8065faa5540a8d1e
#: ../../topics/testing.txt:159
msgid ""
"For example, this function has a docstring that describes what it does::"
msgstr ""

# 225ef944b4f340c79e7479aa2ea79e2f
#: ../../topics/testing.txt:165
msgid ""
"Because tests often make great documentation, putting tests directly in your "
"docstrings is an effective way to document *and* test your code."
msgstr ""

# 481a1cfd8fb542d28656bdb266832667
#: ../../topics/testing.txt:168
msgid ""
"As with unit tests, for a given Django application, the test runner looks "
"for doctests in two places:"
msgstr ""

# f4e71204c7f84eabb77f9e237fb9f82f
#: ../../topics/testing.txt:171
msgid ""
"The ``models.py`` file. You can define module-level doctests and/or a "
"doctest for individual models. It's common practice to put application-level "
"doctests in the module docstring and model-level doctests in the model "
"docstrings."
msgstr ""

# 282f1d4a2980477da2e6ef014bf2b090
#: ../../topics/testing.txt:176
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. This file is a hook for any and all "
"doctests you want to write that aren't necessarily related to models."
msgstr ""

# f8ed7219a45d4a98811eea057a4e2fee
#: ../../topics/testing.txt:180
msgid ""
"This example doctest is equivalent to the example given in the unittest "
"section above::"
msgstr ""

# ef70b1fd236a4118b7aaac657432350e
#: ../../topics/testing.txt:207
msgid ""
"When you :ref:`run your tests <running-tests>`, the test runner will find "
"this docstring, notice that portions of it look like an interactive Python "
"session, and execute those lines while checking that the results match."
msgstr ""

# ee629f3b31344dcdbdd3523bdebefba7
#: ../../topics/testing.txt:211
msgid ""
"In the case of model tests, note that the test runner takes care of creating "
"its own test database. That is, any test that accesses a database -- by "
"creating and saving model instances, for example -- will not affect your "
"production database. However, the database is not refreshed between "
"doctests, so if your doctest requires a certain state you should consider "
"flushing the database or loading a fixture. (See the section on fixtures, "
"below, for more on this.) Note that to use this feature, the database user "
"Django is connecting as must have ``CREATE DATABASE`` rights."
msgstr ""

# d62f536238d2477ea006eb2f74f986b8
#: ../../topics/testing.txt:220
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""

# 3171ffdf8dc34f7789a95aa37937df60
#: ../../topics/testing.txt:223
msgid "Which should I use?"
msgstr ""

# 43d4c39ec7364a82bd2bcf2ad9541eff
#: ../../topics/testing.txt:225
msgid ""
"Because Django supports both of the standard Python test frameworks, it's up "
"to you and your tastes to decide which one to use. You can even decide to "
"use *both*."
msgstr ""

# bb725a47ec2d4b4198525f6482bb9260
#: ../../topics/testing.txt:229
msgid ""
"For developers new to testing, however, this choice can seem confusing. "
"Here, then, are a few key differences to help you decide which approach is "
"right for you:"
msgstr ""

# ced1d9869f5246308c3442b432631a97
#: ../../topics/testing.txt:233
msgid ""
"If you've been using Python for a while, :mod:`doctest` will probably feel "
"more \"pythonic\". It's designed to make writing tests as easy as possible, "
"so it requires no overhead of writing classes or methods. You simply put "
"tests in docstrings. This has the added advantage of serving as "
"documentation (and correct documentation, at that!). However, while doctests "
"are good for some simple example code, they are not very good if you want to "
"produce either high quality, comprehensive tests or high quality "
"documentation. Test failures are often difficult to debug as it can be "
"unclear exactly why the test failed. Thus, doctests should generally be "
"avoided and used primarily for documentation examples only."
msgstr ""

# f8ca52464f984de58e37e60e46b57c06
#: ../../topics/testing.txt:244
msgid ""
"The :mod:`unittest` framework will probably feel very familiar to developers "
"coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll "
"feel at home with this method if you've used JUnit or any test framework "
"inspired by JUnit."
msgstr ""

# ccc1700d2a26441a9c75d22948748f94
#: ../../topics/testing.txt:249
msgid ""
"If you need to write a bunch of tests that share similar code, then you'll "
"appreciate the :mod:`unittest` framework's organization around classes and "
"methods. This makes it easy to abstract common tasks into common methods. "
"The framework also supports explicit setup and/or cleanup routines, which "
"give you a high level of control over the environment in which your test "
"cases are run."
msgstr ""

# bfbe8cfc6ece4b4ca80787a6cae8c297
#: ../../topics/testing.txt:256
msgid ""
"If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""

# 830c2a1d9961423ab4132b2e7b9a086c
#: ../../topics/testing.txt:261
msgid "Running tests"
msgstr ""

# 0d1f0bf236f4419fab75e2975053caa3
#: ../../topics/testing.txt:263
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

# d5f20b88a06c47ae8628facf2c224da0
#: ../../topics/testing.txt:268
msgid ""
"By default, this will run every test in every application in :setting:"
"`INSTALLED_APPS`. If you only want to run tests for a particular "
"application, add the application name to the command line. For example, if "
"your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and "
"``'myproject.animals'``, you can run the ``myproject.animals`` unit tests "
"alone with this command::"
msgstr ""

# dd8e1129e1564cd7859b69257992030c
#: ../../topics/testing.txt:277
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""

# 53ab2826a46944bf90e34d9849894fb9
#: ../../topics/testing.txt:279
msgid ""
"You can be even *more* specific by naming an individual test case. To run a "
"single test case in an application (for example, the ``AnimalTestCase`` "
"described in the \"Writing unit tests\" section), add the name of the test "
"case to the label on the command line::"
msgstr ""

# 6d0ad607867e4f998f4c6d6f90ee3508
#: ../../topics/testing.txt:286
msgid ""
"And it gets even more granular than that! To run a *single* test method "
"inside a test case, add the name of the test method to the label::"
msgstr ""

# bd5e1e88061f46678b2d87789e1514e8
#: ../../topics/testing.txt:292
msgid ""
"You can use the same rules if you're using doctests. Django will use the "
"test label as a path to the test method or class that you want to run. If "
"your ``models.py`` or ``tests.py`` has a function with a doctest, or class "
"with a class-level doctest, you can invoke that test by appending the name "
"of the test method or class to the label::"
msgstr ""

# 3a1c98a6aa0745d3a1997cbe40f0b404
#: ../../topics/testing.txt:300
msgid ""
"If you want to run the doctest for a specific method in a class, add the "
"name of the method to the label::"
msgstr ""

# c0c551c7e9334f5aad8b830d7ad0e89a
#: ../../topics/testing.txt:305
msgid ""
"If you're using a ``__test__`` dictionary to specify doctests for a module, "
"Django will use the label as a key in the ``__test__`` dictionary for "
"defined in ``models.py`` and ``tests.py``."
msgstr ""

# 80cf781dd22147ea8e79d4aae66aea1e
#: ../../topics/testing.txt:309
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--"
"failfast` option, notice that some tests are unexpectedly failing, and want "
"to get details on the failures without waiting for the full test run to "
"complete."
msgstr ""

# d447534709574b6f89792c3409c4cbb3
#: ../../topics/testing.txt:318
msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

# bdd4583196e04079b4206d02ca292e30
#: ../../topics/testing.txt:325
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wall manage.py test``. The ``-Wall`` flag tells Python to display "
"deprecation warnings. Django, like many other Python libraries, uses these "
"warnings to flag when features are going away. It also might flag areas in "
"your code that aren't strictly wrong but could benefit from a better "
"implementation."
msgstr ""

# c4937973d99e4a7480064717e68e70d1
#: ../../topics/testing.txt:333
msgid "Running tests outside the test runner"
msgstr ""

# 5ee27565c8ca468586f28568f6dffd32
#: ../../topics/testing.txt:335
msgid ""
"If you want to run tests outside of ``./manage.py test`` -- for example, "
"from a shell prompt -- you will need to set up the test environment first. "
"Django provides a convenience method to do this::"
msgstr ""

# fa6cb1d829e5490b91bfe5aac41fc61d
#: ../../topics/testing.txt:342
msgid ""
"This convenience method sets up the test database, and puts other Django "
"features into modes that allow for repeatable testing."
msgstr ""

# 61832f71c3304d0a9bd689b2e8cd2962
#: ../../topics/testing.txt:345
msgid ""
"The call to :meth:`~django.test.utils.setup_test_environment` is made "
"automatically as part of the setup of `./manage.py test`. You only need to "
"manually invoke this method if you're not using running your tests via "
"Django's test runner."
msgstr ""

# ff6889c2beac4916ad02f4d161013f2d
#: ../../topics/testing.txt:351
msgid "The test database"
msgstr ""

# 4529baad8edb4f548a4400436f43928b
#: ../../topics/testing.txt:353
msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""

# 6f9cb2c506144538bcc95502011fcb6f
#: ../../topics/testing.txt:356
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

# 6871d4122b8b4a7fa9da2ac838c6ac03
#: ../../topics/testing.txt:359
msgid ""
"By default the test databases get their names by prepending ``test_`` to the "
"value of the :setting:`NAME` settings for the databases defined in :setting:"
"`DATABASES`. When using the SQLite database engine the tests will by default "
"use an in-memory database (i.e., the database will be created in memory, "
"bypassing the filesystem entirely!). If you want to use a different database "
"name, specify :setting:`TEST_NAME` in the dictionary for any given database "
"in :setting:`DATABASES`."
msgstr ""

# a5d8ac594092405cbe0f68d54e345129
#: ../../topics/testing.txt:368
msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE`, :setting:`USER`, :setting:`HOST`, etc. The test database is "
"created by the user specified by :setting:`USER`, so you'll need to make "
"sure that the given user account has sufficient privileges to create a new "
"database on the system."
msgstr ""

# cdee2329cb2e4c77a348edefe158beb8
#: ../../topics/testing.txt:375
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also "
"use the :setting:`TEST_COLLATION` option to control the particular collation "
"used by the test database. See the :doc:`settings documentation </ref/"
"settings>` for details of these advanced settings."
msgstr ""

# 6814a23550954a6daf34a095b6c20c1f
#: ../../topics/testing.txt:384
msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

# f48662a65bea413f8dd7b760caae5625
#: ../../topics/testing.txt:394
msgid "Testing master/slave configurations"
msgstr ""

# 4f89a2ac35fc47eb9bbaabb0f2bb2dc9
#: ../../topics/testing.txt:396
msgid ""
"If you're testing a multiple database configuration with master/slave "
"replication, this strategy of creating test databases poses a problem. When "
"the test databases are created, there won't be any replication, and as a "
"result, data created on the master won't be seen on the slave."
msgstr ""

# 2413f75fdca6498c966d8c7063f1a78e
#: ../../topics/testing.txt:402
msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

# 1916839ffc9c4b3bb58d659d2e846bb4
#: ../../topics/testing.txt:422
msgid ""
"In this setup, we have two database servers: ``dbmaster``, described by the "
"database alias ``default``, and ``dbslave`` described by the alias "
"``slave``. As you might expect, ``dbslave`` has been configured by the "
"database administrator as a read slave of ``dbmaster``, so in normal "
"activity, any write to ``default`` will appear on ``slave``."
msgstr ""

# 7c9291278b694c1eaad186b08d96b1ad
#: ../../topics/testing.txt:428
msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``slave`` database has been "
"configured as a test mirror (using the :setting:`TEST_MIRROR` setting), "
"indicating that under testing, ``slave`` should be treated as a mirror of "
"``default``."
msgstr ""

# 9ac230f230504d84bae6879ad4d4d68a
#: ../../topics/testing.txt:434
msgid ""
"When the test environment is configured, a test version of ``slave`` will "
"*not* be created. Instead the connection to ``slave`` will be redirected to "
"point at ``default``. As a result, writes to ``default`` will appear on "
"``slave`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

# 9e2835066b5a41e2bf591264f22432d3
#: ../../topics/testing.txt:444
msgid "Controlling creation order for test databases"
msgstr ""

# f31b6c77d8c4437a9cbd6ae49e6888f8
#: ../../topics/testing.txt:446
msgid ""
"By default, Django will always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""

# 5404618e14d8471bb0fae9acdc6e5a6d
#: ../../topics/testing.txt:450
msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` "
"setting. Consider the following (simplified) example database configuration::"
msgstr ""

# 82a13d5de90343ee8983618712691e0d
#: ../../topics/testing.txt:477
msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

# 604498e38d314e3691d5689383fdd611
#: ../../topics/testing.txt:482
msgid ""
"If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` "
"definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

# ca69e02845884ddc8bc1f5f384cd1282
#: ../../topics/testing.txt:487
msgid "Order in which tests are executed"
msgstr ""

# 35343259a6b94411951d61a5f277a44e
#: ../../topics/testing.txt:489
msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

# 0faf354d9886473dab4069f885b7556a
#: ../../topics/testing.txt:492
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""

# 40439ecc78124243b183a4ba25587de1
#: ../../topics/testing.txt:497
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

# a0f2f38622e9409cb7b29bc81b0309e6
#: ../../topics/testing.txt:507
msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

# 47bd5c960a8349eeba362ba4f961d0d2
#: ../../topics/testing.txt:513
msgid "Other test conditions"
msgstr ""

# 4907b6b475eb4a35a12f3fea8b9da3bc
#: ../../topics/testing.txt:515
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""

# e8f3af7fc8c3417ba6cb9a4e4b8a9274
#: ../../topics/testing.txt:520
msgid ""
"Caches are not cleared after each test, and running \"manage.py test fooapp"
"\" can insert data from the tests into the cache of a live system if you run "
"your tests in production because, unlike databases, a separate \"test cache"
"\" is not used. This behavior `may change`_ in the future."
msgstr ""

# 4d09fd9519f048108c801c59194371fd
#: ../../topics/testing.txt:528
msgid "Understanding the test output"
msgstr ""

# ff035dcb68754d36b88887b6c18c7185
#: ../../topics/testing.txt:530
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

# 727cd1e4ec3a4d89afdb06550853ea30
#: ../../topics/testing.txt:540
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

# 25a5db78dd0e4abb91f0f50f94c85f8d
#: ../../topics/testing.txt:543
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

# c86ae7c35bc54e2fbc1a0e4bf0f8e750
#: ../../topics/testing.txt:551
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

# f6418369d2d1422597c3bc17026cb73d
#: ../../topics/testing.txt:577
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

# 4f75a29ead8a474a85ec6eccd2435cb3
#: ../../topics/testing.txt:581
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

# 02ffebebbbbe409b918c7510fb7f1df9
#: ../../topics/testing.txt:587
msgid "Speeding up the tests"
msgstr ""

# 3b7873d40a9241909d1134b607911df8
#: ../../topics/testing.txt:589
msgid ""
"In recent versions of Django, the default password hasher is rather slow by "
"design. If during your tests you are authenticating many users, you may want "
"to use a custom settings file and set the :setting:`PASSWORD_HASHERS` "
"setting to a faster hashing algorithm::"
msgstr ""

# 902fe2bbd1ea4560849937567071f92d
#: ../../topics/testing.txt:598
msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""

# 1b9ce75d472e4835921c39069da2cb11
#: ../../topics/testing.txt:604
msgid "Integration with coverage.py"
msgstr ""

# c20f8c2a91de42749c2fc37fe310eedc
#: ../../topics/testing.txt:606
msgid ""
"Code coverage describes how much source code has been tested. It shows which "
"parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""

# 0a6fbff08eaf496aab7aa0fc4ab419b0
#: ../../topics/testing.txt:611
msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, `install coverage.py`_. Next, run "
"the following from your project folder containing ``manage.py``::"
msgstr ""

# 0dbb5be671104c21812dfb83cc240d89
#: ../../topics/testing.txt:617
msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following command::"
msgstr ""

# d80c6a2e4c8c496eb6725d244a566666
#: ../../topics/testing.txt:622
msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""

# fe31eede00974e8b823e69c0600e7419
#: ../../topics/testing.txt:625
msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""

# 287ff9c0547c41a9b587359c5bff895f
#: ../../topics/testing.txt:632
msgid "Testing tools"
msgstr ""

# fa89b1d093714e4a9936e2908c637834
#: ../../topics/testing.txt:634
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""

# bde31a7a071b46d98168508e3fef4b4d
#: ../../topics/testing.txt:639
msgid "The test client"
msgstr ""

# 85ec99cc7ad2427cae2e082a1fb9f7f9
#: ../../topics/testing.txt:644
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

# 41bae2877b3e47e0a59065026568ddf0
#: ../../topics/testing.txt:648
msgid "Some of the things you can do with the test client are:"
msgstr ""

# c6d7bc41729540b3afcf083d4c06e06e
#: ../../topics/testing.txt:650
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

# df6476ce45254882b90cb67a990c1715
#: ../../topics/testing.txt:654
msgid "Test that the correct view is executed for a given URL."
msgstr ""

# b5a80347913143f48c68607038368278
#: ../../topics/testing.txt:656
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

# fa967248502a46e0bee1ce545e74eca1
#: ../../topics/testing.txt:659
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

# 73dff1565c7041d499467d59857f9b82
#: ../../topics/testing.txt:663
msgid ""
"Use Django's test client to establish that the correct view is being called "
"and that the view is collecting the correct context data."
msgstr ""

# 5ce792781cf548b4acc716c2b3327afa
#: ../../topics/testing.txt:666
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""

# 656f0bc4a8654a8a908c0b16c2c7cae7
#: ../../topics/testing.txt:671
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

# a9d64ba1e79f4ab991151d1121c25a2d
#: ../../topics/testing.txt:674
msgid "Overview and a quick example"
msgstr ""

# df89d50fbb5e44428fd2c9766827630d
#: ../../topics/testing.txt:676
msgid ""
"To use the test client, instantiate ``django.test.client.Client`` and "
"retrieve Web pages::"
msgstr ""

# 656ef9f178664b2090a6e15cd1efc229
#: ../../topics/testing.txt:688
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

# 224944f357fa4dc8a6ae514752317480
#: ../../topics/testing.txt:691
msgid "Note a few important things about how the test client works:"
msgstr ""

# 93bd5183e666457888e161f3a6ee764d
#: ../../topics/testing.txt:693
msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

# 297794660e164c6ba50bdc9fb4dfc7ed
#: ../../topics/testing.txt:698
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

# d67e30df4b194adaaa68100ce7172f1c
#: ../../topics/testing.txt:703
msgid "This is incorrect::"
msgstr ""

# d2ecf91bc179410db89f1b724358b0e5
#: ../../topics/testing.txt:707
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

# a0ac4451f39f4aebbd39a7295176f6ec
#: ../../topics/testing.txt:712
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

# 48c9e3bb2642477ab72038d1d4dcc665
#: ../../topics/testing.txt:715
msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

# 223f7f8cbdee44709a700735781c8781
#: ../../topics/testing.txt:720
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

# dd00142fd8524d8399e73629aca652c1
#: ../../topics/testing.txt:725
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

# a1c49a5b206543dd9d4411328921c696
#: ../../topics/testing.txt:728
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

# 5f6ee308923040ffa9980b956d2ed3a8
#: ../../topics/testing.txt:738
msgid "Making requests"
msgstr ""

# 65ac1c818171405b916d704aa1b8e43a
#: ../../topics/testing.txt:740
msgid "Use the ``django.test.client.Client`` class to make requests."
msgstr ""

# 52ce21cfb13e41e68f0d6ccd2e94c37f
#: ../../topics/testing.txt:744
msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

# 572078dea2ef43f59743fc4b2e792261
#: ../../topics/testing.txt:750
msgid ""
"The values from the ``extra`` keywords arguments passed to :meth:`~django."
"test.client.Client.get()`, :meth:`~django.test.client.Client.post()`, etc. "
"have precedence over the defaults passed to the class constructor."
msgstr ""

# ba67ae7c9ed04e169a01badd16f4477f
#: ../../topics/testing.txt:755
msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

# 4f29e15bb6094852908dd569c10b1ab0
#: ../../topics/testing.txt:758
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

# d95cac66004b487aa1e08c4b603b9ab7
#: ../../topics/testing.txt:764
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# a6a497c3371641ae9c28f37213046891
#: ../../topics/testing.txt:767
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. 예를 들어 ::"

# 35ab2c5161a347f588b7b6eb4f9630a6
#: ../../topics/testing.txt:773
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

# 3b5cc942d21141abb3a6251a4e96cd89
#: ../../topics/testing.txt:777
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. 예를 들어 ::"

# e59a6757f77d40fd95ef577833524b30
#: ../../topics/testing.txt:784
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""

# 5a9d39bd70504303af13e1b718cdb5b9
#: ../../topics/testing.txt:790
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

# e75e819cb1184620aa87c3923f2383ae
#: ../../topics/testing.txt:797
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

# 30cf64aca22d436788f4ae9e2b863b3d
#: ../../topics/testing.txt:804
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

# ab88c31fe312479f86ea567717378763
# 1efe4123b3784e639f695f5dfe189638
#: ../../topics/testing.txt:807 ../../topics/testing.txt:888
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

# 66f1aaf783bd44a39d96942fca4c62ef
#: ../../topics/testing.txt:811
msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

# f5c95e5279a24eab8ee4a8214c546638
#: ../../topics/testing.txt:820
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 4dff76a648d84c2b9205386e4bbdeb1e
#: ../../topics/testing.txt:823
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"예를 들어 ::"

# 4fe35749701f4e5b8ee7a5f19e1bd427
#: ../../topics/testing.txt:829
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

# 3f635e89337e485596781dee591805bf
#: ../../topics/testing.txt:833
msgid "...with this POST data::"
msgstr ""

# f13cadda8c7d4941824b663e7ca7a053
#: ../../topics/testing.txt:837
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

# ec6826e912b84fd68cff95cf2fc9b0fa
#: ../../topics/testing.txt:841
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

# 38a947e9aa954f3890225f3d2e1e68e7
#: ../../topics/testing.txt:847
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

# 103dea79325646e29b7866a76b02acf3
#: ../../topics/testing.txt:854
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. 예를 들어 ::"

# aaa9362409e84847820380ffed737429
#: ../../topics/testing.txt:862
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

# d2ea622fc8864bec8a9c026d399b1d04
#: ../../topics/testing.txt:865
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

# 9f96a1dad8e54153886137df81c19535
#: ../../topics/testing.txt:871
msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

# fcc47fd8fe134a669684c5093b8d932c
#: ../../topics/testing.txt:876
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

# 8ce5c3c29a5146d0aee93a19078d9b98
#: ../../topics/testing.txt:878
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

# e2c4ecadcfb74995b8805c7ec7f6eae3
#: ../../topics/testing.txt:884
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

# d69cf3a58d1145a889077a7dc14e0fb5
#: ../../topics/testing.txt:894
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow`` and ``extra`` arguments, except it does not return a message body."
msgstr ""

# cf12ae9ad5d949b68c1d9cc1727adf71
#: ../../topics/testing.txt:901
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 1459e2bcfd05494dbaff6fc52c1bb2a3
# 9ad9488f1e244993969c00026b651318
# 3b69bbbdb9e64e4ca1760fc53bdcc703
#: ../../topics/testing.txt:904 ../../topics/testing.txt:919
#: ../../topics/testing.txt:934
msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

# 681576c68a6945aab8c1c7ea3e4bc1c0
# 428864a886ef45e9a3540c921a9ec8a4
# 6295bc861f23431090c763ca0728932b
#: ../../topics/testing.txt:911 ../../topics/testing.txt:926
#: ../../topics/testing.txt:941
msgid ""
"The ``follow`` and ``extra`` arguments act the same as for :meth:`Client."
"get`."
msgstr ""

# 8c269f5aa9214794b2493ba6b8c9be28
#: ../../topics/testing.txt:916
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# bce6d0aa432c4bc587464b4a309d5e11
#: ../../topics/testing.txt:931
msgid ""
"Makes an DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 172d3d3423bd486a81b8a8621d727f38
#: ../../topics/testing.txt:947
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth>` and "
"you deal with logging in users, you can use the test client's ``login()`` "
"method to simulate the effect of a user logging into the site."
msgstr ""

# 1b41b67bbbd342ad8836c00fa218e568
#: ../../topics/testing.txt:952
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

# f345064078e24fbcb9d9160297ab1d9e
#: ../../topics/testing.txt:956
msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

# 7d9d347173c8448c8cd082f2c02e7a4e
#: ../../topics/testing.txt:968
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

# ee5a66f23cf4435b806db1918f1a8b82
#: ../../topics/testing.txt:972
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

# 1960fef9be444a56adc31c1f7a2a6823
#: ../../topics/testing.txt:975
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""

# df68b0041f13434ca605ac8e7481a845
#: ../../topics/testing.txt:991
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth>`, the "
"``logout()`` method can be used to simulate the effect of a user logging out "
"of your site."
msgstr ""

# 229c0391bc1345718002e208819bcf5b
#: ../../topics/testing.txt:995
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an AnonymousUser."
msgstr ""

# 10a0495075dc4d44ac6cadd4aa49b533
#: ../../topics/testing.txt:1000
msgid "Testing responses"
msgstr ""

# bae0413822d8411ea64e25b6f0c9119d
#: ../../topics/testing.txt:1002
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

# 8f4993a9c4384a54baa792252354b79c
#: ../../topics/testing.txt:1007
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

# 2a7a733a73934e2ea39261b1007631f7
#: ../../topics/testing.txt:1013
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

# c050d17a024e4b8bb85be6632591b75e
#: ../../topics/testing.txt:1018
msgid ""
"The body of the response, as a string. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

# f1bbdf513d7946e8be927928aa50629c
#: ../../topics/testing.txt:1023
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

# 454197fc1ca24af6970de57a238c2c3c
#: ../../topics/testing.txt:1026
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

# 851326a0642845b7a8aa4793361cadc2
#: ../../topics/testing.txt:1029
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

# 32065f3aff784a1cae567ae652bba5bb
#: ../../topics/testing.txt:1039
msgid "The request data that stimulated the response."
msgstr ""

# fcccf30acff04532a340b6f6a0a0475e
#: ../../topics/testing.txt:1043
msgid ""
"The HTTP status of the response, as an integer. See :rfc:`2616#section-10` "
"for a full list of HTTP status codes."
msgstr ""

# 2aeb29566a774b4a9fbc9099cb059c49
#: ../../topics/testing.txt:1048
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

# 90c20bf29a3d420a8cb2a1ca8213fa57
#: ../../topics/testing.txt:1054
msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

# b4022c4e49944d7aa17e0f6a7f725008
#: ../../topics/testing.txt:1061
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

# 29fa81176fae4067801581bac80f0cc3
#: ../../topics/testing.txt:1065
msgid ""
"The only exceptions that are not visible to the test client are ``Http404``, "
"``PermissionDenied`` and ``SystemExit``. Django catches these exceptions "
"internally and converts them into the appropriate HTTP response codes. In "
"these cases, you can check ``response.status_code`` in your test."
msgstr ""

# 5231ed5149a0473ebb78abb8382753b2
#: ../../topics/testing.txt:1071
msgid "Persistent state"
msgstr ""

# c852b8c931e04066a39c042a1ee168e8
#: ../../topics/testing.txt:1073
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent ``get()"
"`` and ``post()`` requests."
msgstr ""

# 7405bb3bcbdd4b6aaf83d16aeb2f07fa
#: ../../topics/testing.txt:1077
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

# ab1b7feda4084177a237389c2d0aec69
#: ../../topics/testing.txt:1081
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

# 8e324e1aab794436944b5ce35193c629
#: ../../topics/testing.txt:1086
msgid ""
"A Python :class:`~Cookie.SimpleCookie` object, containing the current values "
"of all the client cookies. See the documentation of the :mod:`Cookie` module "
"for more."
msgstr ""

# f4af45e01f574b81bfac09d4616ef97d
#: ../../topics/testing.txt:1092
msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

# 882e75bf855b43499e44498fa6ece8a2
#: ../../topics/testing.txt:1095
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

# 448340eee73e4711ae1236bd25de1691
#: ../../topics/testing.txt:1107
msgid "The following is a simple unit test using the test client::"
msgstr ""

# bc8d1b98663844b3b86a772ee71d6b52
#: ../../topics/testing.txt:1128
msgid "The request factory"
msgstr ""

# f5fa68dd725e4f97b0ed5ff40dbddcbb
#: ../../topics/testing.txt:1132
msgid ""
"The :class:`~django.test.client.RequestFactory` shares the same API as the "
"test client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

# fe06db7084ee46288170d992007a0ccf
#: ../../topics/testing.txt:1139
msgid ""
"The API for the :class:`~django.test.client.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

# b05ffce85ba74ae889aaa4c7fed0cd08
#: ../../topics/testing.txt:1142
msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client.head"
"()` and :meth:`~Client.options()`."
msgstr ""

# b0cb673624fd487da9cb5051c25999c8
#: ../../topics/testing.txt:1147
msgid ""
"These methods accept all the same arguments *except* for ``follows``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

# bd70f0f90631482b87ca42fba53eef3f
#: ../../topics/testing.txt:1151
msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""

# fa148fde2d804fcdaffa598c3446d426
#: ../../topics/testing.txt:1158
msgid "The following is a simple unit test using the request factory::"
msgstr ""

# d64c98f85bba47b2910b1c79522e2a70
#: ../../topics/testing.txt:1177
msgid "Test cases"
msgstr ""

# b9d74306f1034c43bbf4328ba0c684cb
#: ../../topics/testing.txt:1180
msgid "Provided test case classes"
msgstr ""

# 0e266b0263b64797bb3a01a1be1cb456
#: ../../topics/testing.txt:1184
msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

# 7c204b09e60f4d53afe08ed4f63686b4
#: ../../topics/testing.txt:1195
msgid "TestCase"
msgstr ""

# b46330a93cee4355b42c8ee07ffe94b3
#: ../../topics/testing.txt:1199
msgid ""
"This class provides some additional capabilities that can be useful for "
"testing Web sites."
msgstr ""

# 4678552c7eef4aaeabc73d72c51bcc11
#: ../../topics/testing.txt:1202
msgid ""
"Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` "
"is easy: Just change the base class of your test from `'unittest.TestCase'` "
"to `'django.test.TestCase'`. All of the standard Python unit test "
"functionality will continue to be available, but it will be augmented with "
"some useful additions, including:"
msgstr ""

# 9f7b64238de84d7995edc176b869defa
#: ../../topics/testing.txt:1208
msgid "Automatic loading of fixtures."
msgstr ""

# 3f277d7f92c945b2a482004b98e860bb
#: ../../topics/testing.txt:1210
msgid "Wraps each test in a transaction."
msgstr ""

# ca6af2f1277d4d90b379719b41cc6667
#: ../../topics/testing.txt:1212
msgid "Creates a TestClient instance."
msgstr ""

# 4e3b2c9b04e7440da8de25a9c24cadfc
#: ../../topics/testing.txt:1214
msgid ""
"Django-specific assertions for testing for things like redirection and form "
"errors."
msgstr ""

# 28b054fb7bbd4e5396cbf8971df0ce8c
#: ../../topics/testing.txt:1221
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

# de46f41d4fb2465d8052399f4ef967a8
#: ../../topics/testing.txt:1224
msgid "TransactionTestCase"
msgstr ""

# 199b6daa948448bdb44bf3f084432abf
#: ../../topics/testing.txt:1228
msgid ""
"Django ``TestCase`` classes make use of database transaction facilities, if "
"available, to speed up the process of resetting the database to a known "
"state at the beginning of each test. A consequence of this, however, is that "
"the effects of transaction commit and rollback cannot be tested by a Django "
"``TestCase`` class. If your test requires testing of such transactional "
"behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

# 3a610cc0b71d4dd1929f7f3a25ce8487
#: ../../topics/testing.txt:1235
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

# 78c471463001402bad0d929a1e3b9535
#: ../../topics/testing.txt:1239
msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

# 8a46bd63eb1442578c0a7c1a7103af6f
#: ../../topics/testing.txt:1243
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test.  It also prevents the code under test from "
"issuing any commit or rollback operations on the database, to ensure that "
"the rollback at the end of the test restores the database to its initial "
"state."
msgstr ""

# 0349e47be16e4f0aa35c383f9a478419
#: ../../topics/testing.txt:1249
msgid ""
"When running on a database that does not support rollback (e.g. MySQL with "
"the MyISAM storage engine), ``TestCase`` falls back to initializing the "
"database by truncating tables and reloading initial data."
msgstr ""

# a362821d18ca428f8dc960638ead714f
#: ../../topics/testing.txt:1257
msgid ""
"Prior to 1.5, ``TransactionTestCase`` flushed the database tables *before* "
"each test. In Django 1.5, this is instead done *after* the test has been run."
msgstr ""

# 1a8099d7cd0942ef93ada511758a5a0e
#: ../../topics/testing.txt:1260
msgid ""
"When the flush took place before the test, it was guaranteed that primary "
"key values started at one in :class:`~django.test.TransactionTestCase` tests."
msgstr ""

# 0eb16d93bc3546c3b042e213ba261c3e
#: ../../topics/testing.txt:1264
msgid ""
"Tests should not depend on this behaviour, but for legacy tests that do, "
"the :attr:`~TransactionTestCase.reset_sequences` attribute can be used until "
"the test has been properly updated."
msgstr ""

# 6db0fd7bec9f487381228b6a1981c636
#: ../../topics/testing.txt:1272
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

# 92af7eb7a7894a17bb7c9aaa1ba0b484
#: ../../topics/testing.txt:1278
msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""

# 1752bcac94bf40dea4b5958bc64fb31b
#: ../../topics/testing.txt:1289
msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""

# ddb1f9e0165f4213b93bedc68d8d1c92
#: ../../topics/testing.txt:1292
msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is an relatively expensive database operation."
msgstr ""

# 54542126fee44d4cb57969fc8b5a0900
#: ../../topics/testing.txt:1296
msgid "SimpleTestCase"
msgstr ""

# b7a6b1bd694c4507b1a665b70aa00577
#: ../../topics/testing.txt:1302
msgid ""
"A very thin subclass of :class:`unittest.TestCase`, it extends it with some "
"basic functionality like:"
msgstr ""

# 872239f1c0b34ca6b498fd748fe769b7
#: ../../topics/testing.txt:1305
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

# c5821c14eb8f4db98fe543c47c65ef81
#: ../../topics/testing.txt:1306
msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""

# d5560933e35e472086030568f07a17d2
#: ../../topics/testing.txt:1307
msgid ""
":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

# 01774b294a9148deb4dfa7e5b71704d8
#: ../../topics/testing.txt:1308
msgid ""
"Testing server :ref:`HTML responses for the presence/lack of a given "
"fragment <assertions>`."
msgstr ""

# 55b3f01f248a44a0bcff67e7f79e8995
#: ../../topics/testing.txt:1309
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

# 4c328da743104ba2aefe3ef3d161104d
#: ../../topics/testing.txt:1311
msgid ""
"If you need any of the other more complex and heavyweight Django-specific "
"features like:"
msgstr ""

# af8466a3b5a9493c92b02777476799c8
#: ../../topics/testing.txt:1314
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

# 88812fd261bf4a9d990728d609cc55f8
#: ../../topics/testing.txt:1315
msgid "Testing or using the ORM."
msgstr ""

# e9826befa7b04123b2fa2523c30b3024
#: ../../topics/testing.txt:1316
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

# 99a7838563ca49f68f4041355963305f
#: ../../topics/testing.txt:1317
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

# a8f452d4499040649c277611329dba98
#: ../../topics/testing.txt:1318
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

# ce9ad18f171b431eb845cd1dfd01ae0a
#: ../../topics/testing.txt:1319
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

# 59c0f7f936474e63ab9c948e488e04e9
#: ../../topics/testing.txt:1321
msgid ""
"then you should use :class:`~django.test.TransactionTestCase` or :class:"
"`~django.test.TestCase` instead."
msgstr ""

# a22883c7155e40dead8f4c925bcf14a0
#: ../../topics/testing.txt:1324
msgid ""
"``SimpleTestCase`` inherits from :class:`django.utils.unittest.TestCase`."
msgstr ""

# 66ebe14de18c41d185d653f1c54d4c99
#: ../../topics/testing.txt:1327
msgid "Default test client"
msgstr ""

# 98f4549b5dda45d3ba7447fa305658f2
#: ../../topics/testing.txt:1331
msgid ""
"Every test case in a ``django.test.TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

# 8efa921995dc42c6855097f7b7b120ee
#: ../../topics/testing.txt:1336
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

# 3b864e24429d47138960e54adbf4500c
#: ../../topics/testing.txt:1352
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

# fe310d5c93814a4386ecd5d767080c78
#: ../../topics/testing.txt:1366
msgid "Customizing the test client"
msgstr ""

# 808e8685d5014c5aa3e6530904ff5b05
#: ../../topics/testing.txt:1370
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~TestCase.client_class` class "
"attribute::"
msgstr ""

# 62c08b131bc0461f9d58ac6232715ffd
#: ../../topics/testing.txt:1389
msgid "Fixture loading"
msgstr ""

# f423cb87ef3b4bc9acd57010acd2ad3b
#: ../../topics/testing.txt:1393
msgid ""
"A test case for a database-backed Web site isn't much use if there isn't any "
"data in the database. To make it easy to put test data into the database, "
"Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

# 9d582253e4c84303ad0e1737d8fd426a
#: ../../topics/testing.txt:1397
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

# 09ec7f567e3b4bf69470416366d3042b
#: ../../topics/testing.txt:1401
msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

# 5b97eed745524f2a8676cc44f69379f5
#: ../../topics/testing.txt:1408
msgid ""
"If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used "
"a fixture without even knowing it! When you call :djadmin:`syncdb` in the "
"database for the first time, Django installs a fixture called "
"``initial_data``. This gives you a way of populating a new database with any "
"initial data, such as a default set of categories."
msgstr ""

# 4ea13f35f3ac484ea02f8e66d2cca62e
#: ../../topics/testing.txt:1415
msgid ""
"Fixtures with other names can always be installed manually using the :"
"djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

# 854ba4aba4b64af78804254a7326dada
#: ../../topics/testing.txt:1420
msgid ""
"Django provides a second way to insert initial data into models -- the :ref:"
"`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to "
"provide initial data for testing purposes. Django's test framework flushes "
"the contents of the test database after each test; as a result, any data "
"added using the custom SQL hook will be lost."
msgstr ""

# bb7a573f44bc461db95f9906759f0527
#: ../../topics/testing.txt:1427
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

# 79ed871175a8450591f71e3c65fb4c28
#: ../../topics/testing.txt:1446
msgid "Here's specifically what will happen:"
msgstr ""

# 23681b76a54d41abad9d1ce04657d2b0
#: ../../topics/testing.txt:1448
msgid ""
"At the start of each test case, before ``setUp()`` is run, Django will flush "
"the database, returning the database to the state it was in directly after :"
"djadmin:`syncdb` was called."
msgstr ""

# b97bfe527ea74a9f8e7531d91395bb00
#: ../../topics/testing.txt:1452
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

# 9f6c0dcb50a749689b7d57a8270f2ffb
#: ../../topics/testing.txt:1457
msgid ""
"This flush/load procedure is repeated for each test in the test case, so you "
"can be certain that the outcome of a test will not be affected by another "
"test, or by the order of test execution."
msgstr ""

# 8dae2ccd261544a9979deb0fd7e92eaa
#: ../../topics/testing.txt:1462
msgid "URLconf configuration"
msgstr ""

# b983380805db4b9b9d5eb3a40c3aafb9
#: ../../topics/testing.txt:1466
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL."
msgstr ""

# e55ac7c9c2c543c2b866f43dd0061293
#: ../../topics/testing.txt:1472
msgid ""
"In order to provide a reliable URL space for your test, ``django.test."
"TestCase`` provides the ability to customize the URLconf configuration for "
"the duration of the execution of a test suite. If your ``TestCase`` instance "
"defines an ``urls`` attribute, the ``TestCase`` will use the value of that "
"attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

# 7206399ecc304bc8a48ec24a914904ce
#: ../../topics/testing.txt:1490
msgid ""
"This test case will use the contents of ``myapp.test_urls`` as the URLconf "
"for the duration of the test case."
msgstr ""

# 72a3b821f6be46fa9350607e917d8a68
#: ../../topics/testing.txt:1496
msgid "Multi-database support"
msgstr ""

# 4aa2e153d20449728048892ef4b66618
#: ../../topics/testing.txt:1500
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""

# 626e8a817e42472ea37b1c7bd9784baf
#: ../../topics/testing.txt:1509
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

# 6cdb3edb47f34e62911c05012afac2b8
#: ../../topics/testing.txt:1523
msgid ""
"This test case will flush *all* the test databases before running "
"``testIndexPageView``."
msgstr ""

# f2fc7da796ab478a87e4f58bc8458020
#: ../../topics/testing.txt:1529
msgid "Overriding settings"
msgstr ""

# 6567d29c2ec64c9295d7b50839ac74f6
#: ../../topics/testing.txt:1535
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) :"
"meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

# 7a13478cd27c45a9b89407bb64ec3b21
#: ../../topics/testing.txt:1555
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

# cd022fb1dc9b42a38ec2dc2b4f92ce5b
#: ../../topics/testing.txt:1562
msgid ""
"In case you want to override a setting for just one test method or even the "
"whole :class:`TestCase` class, Django provides the :func:`~django.test.utils."
"override_settings` decorator (see :pep:`318`). It's used like this::"
msgstr ""

# 22076dddc9164319838827c449d79b9e
#: ../../topics/testing.txt:1577
msgid "The decorator can also be applied to test case classes::"
msgstr ""

# 7ace5a6cfbde4b1b82904e0633c3abc7
#: ../../topics/testing.txt:1591
msgid ""
"When given a class, the decorator modifies the class directly and returns "
"it; it doesn't create and return a modified copy of it.  So if you try to "
"tweak the above example to assign the return value to a different name than "
"``LoginTestCase``, you may be surprised to find that the original "
"``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

# a0622277544e4077a508781133412c69
#: ../../topics/testing.txt:1598
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

# f3af534f862d4546b1705e164a24bc29
#: ../../topics/testing.txt:1604
msgid "Django itself uses this signal to reset various data:"
msgstr ""

# 0ff4455a390449c8ab7eb11accb79e2f
#: ../../topics/testing.txt:1607
msgid "Overriden settings"
msgstr ""

# be09fa984f1244d29b96777bb0700d72
#: ../../topics/testing.txt:1607
msgid "Data reset"
msgstr ""

# 5ffee1b661fd464b9e28c1665c687571
#: ../../topics/testing.txt:1609
msgid "USE_TZ, TIME_ZONE"
msgstr ""

# cfd809b34527462e9ee709c30bcc9ee0
#: ../../topics/testing.txt:1609
msgid "Databases timezone"
msgstr ""

# 0c61d7cd99b94984a21ebcb63aa3fa22
#: ../../topics/testing.txt:1610
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

# 398a921366b04bff90d2267a64432e19
#: ../../topics/testing.txt:1610
msgid "Context processors cache"
msgstr ""

# 86091b29917447089e1b919cb3db425c
#: ../../topics/testing.txt:1611
msgid "TEMPLATE_LOADERS"
msgstr ""

# 6d3edb40396a484189520ea51be976d9
#: ../../topics/testing.txt:1611
msgid "Template loaders cache"
msgstr ""

# e1ec6f51feae4149a22be87255f49c85
#: ../../topics/testing.txt:1612
msgid "SERIALIZATION_MODULES"
msgstr ""

# 9df0d4c716db4216b18664c39e635b76
#: ../../topics/testing.txt:1612
msgid "Serializers cache"
msgstr ""

# 1da784e1e59348fbbb332a2988c59871
#: ../../topics/testing.txt:1613
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

# c64846e2dcc6465091c54721c76ec8e6
#: ../../topics/testing.txt:1613
msgid "Default translation and loaded translations"
msgstr ""

# 2f99898f0c6e4c0fa36314e42bb3be3e
#: ../../topics/testing.txt:1614
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

# 61d873af65974d7185d7830977d68099
#: ../../topics/testing.txt:1614
msgid "Default file storage"
msgstr ""

# 28afc5e4ac254272962dfa8ef19da76d
#: ../../topics/testing.txt:1618
msgid "Emptying the test outbox"
msgstr ""

# 9110cccce5844a81943bd4b601338c81
#: ../../topics/testing.txt:1620
msgid ""
"If you use Django's custom ``TestCase`` class, the test runner will clear "
"the contents of the test email outbox at the start of each test case."
msgstr ""

# 2bd74bcda4a644819ae371fd4de74ad7
#: ../../topics/testing.txt:1623
msgid "For more detail on email services during tests, see `Email services`_."
msgstr ""

# 53b6754007714dbaafffb31edd984838
#: ../../topics/testing.txt:1628
msgid "Assertions"
msgstr ""

# e7b32009b72c461e9ee4cf7805d0817a
#: ../../topics/testing.txt:1632
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""

# 4baf157a355b4e9980988e107d75e41f
#: ../../topics/testing.txt:1638
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of "
"an failure in your test suite."
msgstr ""

# 81730c1958414ecaaecb9a00415f3179
#: ../../topics/testing.txt:1648
msgid ""
"Asserts that execution of callable ``callable_obj`` raised the "
"``expected_exception`` exception and that such exception has an "
"``expected_message`` representation. Any other outcome is reported as a "
"failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` "
"with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

# bf9458b9459d41b28eeb2ee21e931ac3
#: ../../topics/testing.txt:1658
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

# d77a6136883a413d84e498a1277caf8c
#: ../../topics/testing.txt:1669
msgid ""
"For example, the following code tests that an ``EmailField`` accepts \"a@a."
"com\" as a valid email address, but rejects \"aaa\" with a reasonable error "
"message::"
msgstr ""

# 1279889b2d4f4410ae9a0f7e86a3d4fc
#: ../../topics/testing.txt:1678
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

# d07bcdf0e2bb40679d7cbc0edb15163a
# a9e81fc7d07b4e97b63aa115c30ede5e
#: ../../topics/testing.txt:1684 ../../topics/testing.txt:1697
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

# f981146c2d82496d826be04f1137c293
#: ../../topics/testing.txt:1692
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does not appears in the content of the response."
msgstr ""

# 207723c0732c4cf9ae4e70fccfe6a9b5
#: ../../topics/testing.txt:1705
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

# 6e8834100dc04a57a60456371bf476ba
#: ../../topics/testing.txt:1708
msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

# 427b909411274f4c89fc67642290181e
#: ../../topics/testing.txt:1711
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via ``form."
"non_field_errors()``) will be checked."
msgstr ""

# dde2a76dfa0c43ce81a8f432c60f8ea1
#: ../../topics/testing.txt:1715
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

# 0a78fe3915dc44afa7bb52fc541ec077
#: ../../topics/testing.txt:1720
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

# 91795c5d7dde42c586539c428ce7ccd4
#: ../../topics/testing.txt:1723
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

# f23208d707a141beb098243b4bdcb59d
#: ../../topics/testing.txt:1727
msgid "You can use this as a context manager, like this::"
msgstr ""

# 98315f6a31f14dada411aea708d5cfaa
#: ../../topics/testing.txt:1736
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

# e55d4f01dc524ab596d013fcf6da3c1f
#: ../../topics/testing.txt:1741
msgid ""
"You can use this as a context manager in the same way as :meth:`~TestCase."
"assertTemplateUsed`."
msgstr ""

# 66ee4138d4b0437b872e0812a74b3c7d
#: ../../topics/testing.txt:1746
msgid ""
"Asserts that the response return a ``status_code`` redirect status, it "
"redirected to ``expected_url`` (including any GET data), and the final page "
"was received with ``target_status_code``."
msgstr ""

# d80a0219910c4e49af03da5aba1edd40
#: ../../topics/testing.txt:1750
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

# fe7b309e48484ddf8fa77fe06235f1d8
#: ../../topics/testing.txt:1756
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

# e6a08e5deb1849c6bd529f4d0b2082ca
#: ../../topics/testing.txt:1758
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""

# 911cbb1f6ee1423dac2cd9b530f2a488
#: ../../topics/testing.txt:1763
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a Python set comparison."
msgstr ""

# 870e89acbec64bb49ea94ece9b0ca1d2
#: ../../topics/testing.txt:1776
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

# d3723116a28e4c8cbf0f5814a5da3d1d
#: ../../topics/testing.txt:1779
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

# 2a0092ea3f26474f908d7143a5a3951a
#: ../../topics/testing.txt:1786
msgid "You can also use this as a context manager::"
msgstr ""

# c875587b828a47a1b0ec2549518dd3c8
#: ../../topics/testing.txt:1796
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

# 5ecfa5b0a0ae45babc05ff5218f1c571
#: ../../topics/testing.txt:1800
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

# d102a535bbab466ab89be381e2570946
#: ../../topics/testing.txt:1801
msgid "All types of whitespace are considered equivalent."
msgstr ""

# 2eb213ad479a47cc987370fb6e29e6be
#: ../../topics/testing.txt:1802
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

# a6127e8dcbda4478893fd8997c9b5c8a
#: ../../topics/testing.txt:1804
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

# f056f23eb66940c683f8780b7eccf21f
#: ../../topics/testing.txt:1805
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

# 7d9462d6e7c042188ceff0170666526f
#: ../../topics/testing.txt:1806
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

# a491c92ef44c4ceb8e15743ef22a5763
#: ../../topics/testing.txt:1809
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

# 64748c3339604b0a9215b12cfbdc9ed0
# 9c87f536c8f04574bd46e0bc30073669
#: ../../topics/testing.txt:1820 ../../topics/testing.txt:1831
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

# b773f80136114a6e985600f6e4236db7
#: ../../topics/testing.txt:1827
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""

# eca3a2cc50da4338b2ae45ab4765ca44
#: ../../topics/testing.txt:1838
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarily to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When unvalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both string are identical."
msgstr ""

# 7beb8af60265481b988ff97b741a97fa
#: ../../topics/testing.txt:1849
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""

# b5bbfdc9c90f447381bac3b35be320d1
#: ../../topics/testing.txt:1856
msgid "Email services"
msgstr ""

# d14a142198044f8e9ad60e153dd7e7c6
#: ../../topics/testing.txt:1858
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

# 492ad6d10b9546efae4520685bb997ba
#: ../../topics/testing.txt:1865
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

# a12aa58a81ef44a4b6d9030a74dec06b
#: ../../topics/testing.txt:1874
msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""

# 975c62736f664780ad42c8327c4efc2b
#: ../../topics/testing.txt:1882
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

# cf621c7f995241a0b588e9e12effce9f
#: ../../topics/testing.txt:1901
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

# 6c44bb3c617e4ef18db530e77adc9d4c
#: ../../topics/testing.txt:1913
msgid "Skipping tests"
msgstr ""

# 14e73afb271d494da1d9ebfebb1fa6ad
#: ../../topics/testing.txt:1917
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

# 5c419bdbc85b4b58bfe182983cb9a1e6
#: ../../topics/testing.txt:1922
msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

# e9c1d047a51645e9874b5a3251ed4b91
#: ../../topics/testing.txt:1927
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

# 9626d38c2a324e33b593ce97f0d44c3d
#: ../../topics/testing.txt:1932
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See :class:`~django.db.backends.BaseDatabaseFeatures` class for a full list "
"of database features that can be used as a basis for skipping tests."
msgstr ""

# 9b440247771a45f5bb16516df9bdd9ed
#: ../../topics/testing.txt:1940
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

# 5a63052f2cc845078f3a5297d27fe4ca
#: ../../topics/testing.txt:1942
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

# 550448f9417a4a949c30f450969fde92
#: ../../topics/testing.txt:1953
msgid ""
"Skip the decorated test if the named database feature is *not* supported."
msgstr ""

# ddabf77ba1d04e55bb39a4cb986edcf3
#: ../../topics/testing.txt:1956
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""

# 694c23096366422fb7e4dea3098acb12
#: ../../topics/testing.txt:1966
msgid "Live test server"
msgstr ""

# 752b9f4bd6a74b46a6fb13dea1ff22c3
#: ../../topics/testing.txt:1974
msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

# edaa4be607f04a369d21059d96358285
#: ../../topics/testing.txt:1982
msgid ""
"By default the live server's address is `'localhost:8081'` and the full URL "
"can be accessed during the tests with ``self.live_server_url``. If you'd "
"like to change the default address (in the case, for example, where the 8081 "
"port is already taken) then you may pass a different one to the :djadmin:"
"`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

# bde9d004fe5c4a71869ee8a89d0ec75e
#: ../../topics/testing.txt:1992
msgid ""
"Another way of changing the default server address is by setting the "
"`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
"code (for example, in a :ref:`custom test runner<topics-testing-"
"test_runner>`):"
msgstr ""

# a0cc52ed31274dd3907d2270a11312c1
#: ../../topics/testing.txt:2001
msgid ""
"In the case where the tests are run by multiple processes in parallel (for "
"example, in the context of several simultaneous `continuous integration`_ "
"builds), the processes will compete for the same address, and therefore your "
"tests might randomly fail with an \"Address already in use\" error. To avoid "
"this problem, you can pass a comma-separated list of ports or ranges of "
"ports (at least as many as the number of potential parallel processes). For "
"example:"
msgstr ""

# b88c678dc6f74aa7b4a60992caba5eb5
#: ../../topics/testing.txt:2012
msgid ""
"Then, during test execution, each new live test server will try every "
"specified port until it finds one that is free and takes it."
msgstr ""

# 1d6e886e3ee64381bef52ea4a261a11a
#: ../../topics/testing.txt:2017
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

# 7cc3bacb9f224ce0a77aa7bfb19bfa25
#: ../../topics/testing.txt:2025
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). The code for this test may look as "
"follows:"
msgstr ""

# 050627a6618c4b77a740c5d5d110c472
#: ../../topics/testing.txt:2054
msgid "Finally, you may run the test as follows:"
msgstr ""

# 7580123d4d0249abac675b8f410b727b
#: ../../topics/testing.txt:2060
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

# 12f335e5b58544f8a42ad5ef8d94c14b
#: ../../topics/testing.txt:2073
msgid ""
"``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </"
"howto/static-files>` so you'll need to have your project configured "
"accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

# 107e840e507949c8b26b5447cc4d6377
#: ../../topics/testing.txt:2079
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the `<body>` HTML tag is found in the response "
"(requires Selenium > 2.13):"
msgstr ""

# 4482e1ae3f7a44209967d134984049d1
#: ../../topics/testing.txt:2102
msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of `<body>` in the response might not necessarily be appropriate for all use "
"cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for "
"more information."
msgstr ""

# e074a9647a76435d8cbc5384b68d58e9
#: ../../topics/testing.txt:2113
msgid "Using different testing frameworks"
msgstr ""

# 5660b9feb2b14327b76745257afa6ff3
#: ../../topics/testing.txt:2115
msgid ""
"Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing "
"frameworks. While Django doesn't provide explicit support for alternative "
"frameworks, it does provide a way to invoke tests constructed for an "
"alternative framework as if they were normal Django tests."
msgstr ""

# 0f2d1f93b02847228cde2ee65bdbc4b1
#: ../../topics/testing.txt:2120
msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This "
"class defines the default Django testing behavior. This behavior involves:"
msgstr ""

# d2b0ae85ac884a54b50e7ecd61ec9fcd
#: ../../topics/testing.txt:2125
msgid "Performing global pre-test setup."
msgstr ""

# 12b37bfdf286431793c05e7ced033305
#: ../../topics/testing.txt:2127
msgid ""
"Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` "
"files in each installed application."
msgstr ""

# f30b73be12ba4fb7b88875dca29be945
#: ../../topics/testing.txt:2130
msgid "Creating the test databases."
msgstr ""

# 94b626b907064dd2a0da7edac5e6abdc
#: ../../topics/testing.txt:2132
msgid ""
"Running ``syncdb`` to install models and initial data into the test "
"databases."
msgstr ""

# 2cda16cf84274f68bb6836b6bee5a016
#: ../../topics/testing.txt:2135
msgid "Running the unit tests and doctests that are found."
msgstr ""

# 6e0cc59667b6453bb090c06b857ce6c8
#: ../../topics/testing.txt:2137
msgid "Destroying the test databases."
msgstr ""

# a0e32528e0c1403290bed921349b68b3
#: ../../topics/testing.txt:2139
msgid "Performing global post-test teardown."
msgstr ""

# cae8651f4ce147b9ae28425bde17c089
#: ../../topics/testing.txt:2141
msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""

# 6e08ca79f6c949a5800c02d9b8065ce0
#: ../../topics/testing.txt:2150
msgid "Defining a test runner"
msgstr ""

# 3c9060b929e34ff4a9b6efcac20f10f5
#: ../../topics/testing.txt:2154
msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DjangoTestSuiteRunner`` class that defines the default Django "
"testing behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

# 4cfd5263f62a4cc5aeee4115c249608a
#: ../../topics/testing.txt:2162
msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

# d484938270ef41309ab72cb7c288e57e
#: ../../topics/testing.txt:2166
msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""

# 4e4eaedb43a9413492e77ad0a37f15af
#: ../../topics/testing.txt:2172
msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

# 2985da5401984cbd98dfeeb5ed875156
#: ../../topics/testing.txt:2175
msgid ""
"Django will, from time to time, extend the capabilities of the test runner "
"by adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test "
"runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

# 9d37854c6ea6416abf6156d6fdb6f4d8
#: ../../topics/testing.txt:2183
msgid ""
"Your test runner may also define additional command-line options. If you add "
"an ``option_list`` attribute to a subclassed test runner, those options will "
"be added to the list of command-line options that the :djadmin:`test` "
"command can use."
msgstr ""

# 31bcff213b0645f8bc452e6e18f6d3aa
#: ../../topics/testing.txt:2195
msgid ""
"This is the tuple of ``optparse`` options which will be fed into the "
"management command's ``OptionParser`` for parsing arguments. See the "
"documentation for Python's ``optparse`` module for more details."
msgstr ""

# 7a105cea1463406a93f404e6bdf4e95b
#: ../../topics/testing.txt:2204
msgid "Run the test suite."
msgstr ""

# cb2e38700b644916a6b23473e15a1e00
# 23348087fbd64322b2005971377879f8
#: ../../topics/testing.txt:2206 ../../topics/testing.txt:2231
msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of three forms:"
msgstr ""

# d1450948dec94b938ef7f7a741cf9d2d
# 4e5b97409fdb4e898dc65721631c4e86
#: ../../topics/testing.txt:2209 ../../topics/testing.txt:2234
msgid ""
"``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

# dd30a404a4554f5ba1476d4d1e0e7ff0
# ef1526d234c24505a07bbfc85c5f0f15
#: ../../topics/testing.txt:2211 ../../topics/testing.txt:2236
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

# ed488e9404404c8f879e7f440ea1e4d4
# da6e551a2d114d3dba13ea32eaf7bd74
#: ../../topics/testing.txt:2212 ../../topics/testing.txt:2237
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

# c63d42528cab43e8a931b8e3d91e62f9
# 89b4ca8256e94897a5f7dda726db40a1
#: ../../topics/testing.txt:2214 ../../topics/testing.txt:2239
msgid ""
"If ``test_labels`` has a value of ``None``, the test runner should run "
"search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

# 00da8b303f0f46c0bf5dee73a0d478e2
# b7749394db244c95ba8477dee461f3ed
#: ../../topics/testing.txt:2217 ../../topics/testing.txt:2242
msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

# ab8dddf2d78a41c98c21bd0fbebecdb0
#: ../../topics/testing.txt:2221
msgid "This method should return the number of tests that failed."
msgstr ""

# 1962d14392c54507921c7d6a99e417e7
#: ../../topics/testing.txt:2225
msgid "Sets up the test environment ready for testing."
msgstr ""

# 74dfec6fee4b4095b21b8e88e13f4c9f
#: ../../topics/testing.txt:2229
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

# 6ba77bded54c432b95548ab9d8fd96f1
#: ../../topics/testing.txt:2246
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

# 079d607932cd4df885817d9b4647994f
#: ../../topics/testing.txt:2250
msgid "Creates the test databases."
msgstr ""

# a0895b31be174620b86b7f4d5bf7d218
#: ../../topics/testing.txt:2252
msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the ``teardown_databases()"
"`` function at the conclusion of testing."
msgstr ""

# 299b4f72a9bb43a582d6c52047f1a7a8
#: ../../topics/testing.txt:2258
msgid "Runs the test suite."
msgstr ""

# 945bae889f604f27840b2697832ac98b
#: ../../topics/testing.txt:2260
msgid "Returns the result produced by the running the test suite."
msgstr ""

# e4dcade593c34032ba3a4a5c94f9548c
#: ../../topics/testing.txt:2264
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

# acd5199f6b5f42c9bd87aea9f4a37e01
#: ../../topics/testing.txt:2266
msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It is the return value of the "
"``setup_databases()`` method."
msgstr ""

# 997493f2073143caacd7203b7505b1a1
#: ../../topics/testing.txt:2272
msgid "Restores the pre-test environment."
msgstr ""

# 43b92acad60849198ecd6bc5ddd4b257
#: ../../topics/testing.txt:2276
msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

# cdd03e44b4ff4d32bd38fc2ea82af7af
#: ../../topics/testing.txt:2281
msgid "Testing utilities"
msgstr ""

# 7e20741f1fff44da97d1e1bc0ccf45d0
#: ../../topics/testing.txt:2286
msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

# e1af37c2a8c545309a2144f2739b7554
#: ../../topics/testing.txt:2291
msgid ""
"Performs any global pre-test setup, such as the installing the "
"instrumentation of the template rendering system and setting up the dummy "
"email outbox."
msgstr ""

# a968438cbde049d9bbeec55ab8ccb1bb
#: ../../topics/testing.txt:2297
msgid ""
"Performs any global post-test teardown, such as removing the black magic "
"hooks into the template system and restoring normal email services."
msgstr ""

# ce5817336210430886078e9f92524cb9
#: ../../topics/testing.txt:2303
msgid ""
"The creation module of the database backend (``connection.creation``) also "
"provides some utilities that can be useful during testing."
msgstr ""

# 5521da41de13449593cae6f498a92bcd
#: ../../topics/testing.txt:2308
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

# b4469cf3a6bc4f26af3cb398fc0333aa
#: ../../topics/testing.txt:2310
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

# 4c8aae945b5848659a8f95b8724c325d
#: ../../topics/testing.txt:2312
msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

# 610e45dffa354d3ea5cbc8136dbddddf
#: ../../topics/testing.txt:2315
msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

# 6f63bbe3fdb0455680aa15963edf4e1f
#: ../../topics/testing.txt:2319
msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

# 3e78054992aa4ceba15ba89fec6af0c6
#: ../../topics/testing.txt:2322
msgid "Returns the name of the test database that it created."
msgstr ""

# d4df679fe02645d1b0feabcfbbfe7c1c
#: ../../topics/testing.txt:2324
msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

# 27e6a75d24ae4676a0bc1daf4d6ce1f9
#: ../../topics/testing.txt:2330
msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

# 145dd908dbf14ca48b927dabdeca15ce
#: ../../topics/testing.txt:2334
msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"simple.DjangoTestSuiteRunner`."
msgstr ""
