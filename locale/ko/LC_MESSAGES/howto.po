# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../howto/apache-auth.txt:3
#: ../../howto/deployment/wsgi/apache-auth.txt:3
#: ../../howto/deployment/wsgi/modwsgi.txt:202
# afdfee4f07ec4ad8834ecf6c77486a62
# cb3b3aeaa8bb40d88841a8c747d23da5
# 9153fe090e04423688764666e06fdcbf
msgid "Authenticating against Django's user database from Apache"
msgstr ""

#: ../../howto/apache-auth.txt:7
# 684a9575ce3f4964b243c4a6a382df4a
msgid "Support for mod_python has been deprecated within Django. At that time, this method of authentication will no longer be provided by Django. The community is welcome to offer its own alternate solutions using WSGI middleware or other approaches."
msgstr ""

#: ../../howto/apache-auth.txt:12
# 84c9966c97a24ff2bfeed972ed9a98dd
msgid "Since keeping multiple authentication databases in sync is a common problem when dealing with Apache, you can configuring Apache to authenticate against Django's :doc:`authentication system </topics/auth>` directly. For example, you could:"
msgstr ""

#: ../../howto/apache-auth.txt:17
#: ../../howto/deployment/wsgi/apache-auth.txt:10
# 772c8508830c49f9b6e5b38867a453ea
# 816da873b90345ac8fff7448dd1feca1
msgid "Serve static/media files directly from Apache only to authenticated users."
msgstr ""

#: ../../howto/apache-auth.txt:19
#: ../../howto/deployment/wsgi/apache-auth.txt:12
# 701ab8b26b1d4f31911728e059aeaef1
# f9a9baecef92468b8f04f6b18745348d
msgid "Authenticate access to a Subversion_ repository against Django users with a certain permission."
msgstr ""

#: ../../howto/apache-auth.txt:22
#: ../../howto/deployment/wsgi/apache-auth.txt:15
# f1d897523ba445e09f58a82a0871931c
# 8145621d358847de9110982697d01489
msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

#: ../../howto/apache-auth.txt:28
# 1fb86bb60faa44a997db56e29aff69e3
msgid "Configuring Apache"
msgstr ""

#: ../../howto/apache-auth.txt:30
# e976e0c226a348048e4f0ef7709cc889
msgid "To check against Django's authorization database from a Apache configuration file, you'll need to use mod_python's ``PythonAuthenHandler`` directive along with the standard ``Auth*`` and ``Require`` directives:"
msgstr ""

#: ../../howto/apache-auth.txt:47
# 0f1779aa43994a359f303030c7e6127a
msgid "If you're using Apache 2.2, you'll need to take a couple extra steps."
msgstr ""

#: ../../howto/apache-auth.txt:49
# 05b754418de1423d9609830351979e9e
msgid "You'll need to ensure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded. These might be compiled statically into Apache, or you might need to use ``LoadModule`` to load them dynamically (as shown in the example at the bottom of this note)."
msgstr ""

#: ../../howto/apache-auth.txt:54
# 783f836b7ff7496ba5fc3bca0089f519
msgid "You'll also need to insert configuration directives that prevent Apache from trying to use other authentication modules, as well as specifying the ``AuthUserFile`` directive and pointing it to ``/dev/null``. Depending on which other authentication modules you have loaded, you might need one or more of the following directives:"
msgstr ""

#: ../../howto/apache-auth.txt:71
# ff775e14465c45e7b54d217a8b070d80
msgid "A complete configuration, with differences between Apache 2.0 and Apache 2.2 marked in bold, would look something like:"
msgstr ""

#: ../../howto/apache-auth.txt:92
# 4b2fe04a26d644188e72f7a5ed865d8e
msgid "By default, the authentication handler will limit access to the ``/example/`` location to users marked as staff members.  You can use a set of ``PythonOption`` directives to modify this behavior:"
msgstr ""

#: ../../howto/apache-auth.txt:97
# 6dc0135d66464617a3af7da2e8c0040b
msgid "``PythonOption``"
msgstr ""

#: ../../howto/apache-auth.txt:97
# 389687c84b5e4cd88e6f49cf6215beab
msgid "Explanation"
msgstr ""

#: ../../howto/apache-auth.txt:99
# 6292e586902a4baa81a055875e35d334
msgid "``DjangoRequireStaffStatus``"
msgstr ""

#: ../../howto/apache-auth.txt:99
# 344f3999837b46289a653c3cd9cf83a4
msgid "If set to ``on`` only \"staff\" users (i.e. those with the ``is_staff`` flag set) will be allowed."
msgstr ""

#: ../../howto/apache-auth.txt:103
# 879dbe74bc5e4398b67b51b98846a3e5
msgid "Defaults to ``on``."
msgstr ""

#: ../../howto/apache-auth.txt:105
# f016201783664b02884b96204b786b21
msgid "``DjangoRequireSuperuserStatus``"
msgstr ""

#: ../../howto/apache-auth.txt:105
# db1282deeee3443aba28cb19efc6ef34
msgid "If set to ``on`` only superusers (i.e. those with the ``is_superuser`` flag set) will be allowed."
msgstr ""

#: ../../howto/apache-auth.txt:109
# 74c174b982b34a2b9b3dab2a6f5020dd
msgid "Defaults to ``off``."
msgstr ""

#: ../../howto/apache-auth.txt:111
# 4298dbaeeea046b996f2e52f59add1d3
msgid "``DjangoPermissionName``"
msgstr ""

#: ../../howto/apache-auth.txt:111
# 96915871e4f94d67bcbe882a6b6acbe4
msgid "The name of a permission to require for access. See :ref:`custom permissions <custom-permissions>` for more information."
msgstr ""

#: ../../howto/apache-auth.txt:116
# 22715ca5e0cf4d718199b03803a2b0ce
msgid "By default no specific permission will be required."
msgstr ""

#: ../../howto/apache-auth.txt:120
# 9fb62aab6b9f4b9d997531cc51a1afa2
msgid "Note that sometimes ``SetEnv`` doesn't play well in this mod_python configuration, for reasons unknown. If you're having problems getting mod_python to recognize your ``DJANGO_SETTINGS_MODULE``, you can set it using ``PythonOption`` instead of ``SetEnv``. Therefore, these two Apache directives are equivalent::"
msgstr ""

#: ../../howto/auth-remote-user.txt:3
# 201a44605e774e5f927340308ecf27fb
msgid "Authentication using ``REMOTE_USER``"
msgstr ""

#: ../../howto/auth-remote-user.txt:7
# d0e8ef5487124c8e8e6575c289ac2be5
msgid "This document describes how to make use of external authentication sources (where the Web server sets the ``REMOTE_USER`` environment variable) in your Django applications.  This type of authentication solution is typically seen on intranet sites, with single sign-on solutions such as IIS and Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

#: ../../howto/auth-remote-user.txt:20
# 84379dfc6c3048eeb30909964c718c74
msgid "When the Web server takes care of authentication it typically sets the ``REMOTE_USER`` environment variable for use in the underlying application.  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META <django.http.HttpRequest.META>` attribute.  Django can be configured to make use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and ``RemoteUserBackend`` classes found in :mod:`django.contrib.auth`."
msgstr ""

#: ../../howto/auth-remote-user.txt:28
# df9f06f9fa8f422d97b3d1f3be7c3e46
msgid "Configuration"
msgstr ""

#: ../../howto/auth-remote-user.txt:30
# 6b7e9239a3f3411092f0541f4048cd39
msgid "First, you must add the :class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the :setting:`MIDDLEWARE_CLASSES` setting **after** the :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

#: ../../howto/auth-remote-user.txt:42
# b040695e8597412ab6c9947b897014ee
msgid "Next, you must replace the :class:`~django.contrib.auth.backends.ModelBackend` with ``RemoteUserBackend`` in the :setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

#: ../../howto/auth-remote-user.txt:49
# c824584f154a4f5ca11d75484d4b74b3
msgid "With this setup, ``RemoteUserMiddleware`` will detect the username in ``request.META['REMOTE_USER']`` and will authenticate and auto-login that user using the ``RemoteUserBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:54
# ce4c5da743ac48d7a543d1f259882a24
msgid "Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will still have all of the same permissions checking that is implemented in ``ModelBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:58
# a073d846726b4f01881c7360e2facfe7
msgid "If your authentication mechanism uses a custom HTTP header and not ``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the ``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

#: ../../howto/auth-remote-user.txt:69
# 04a853e988524fdd8bf5e5bb44083b75
msgid "``RemoteUserBackend``"
msgstr ""

#: ../../howto/auth-remote-user.txt:73
# 451d0ab719af42ff88c3eda625b156d6
msgid "If you need more control, you can create your own authentication backend that inherits from ``RemoteUserBackend`` and overrides certain parts:"
msgstr ""

#: ../../howto/auth-remote-user.txt:77
#: ../../howto/custom-management-commands.txt:178
# 63059a9f17c8417daa5c30293cf77879
# af344a28ba83437a97f9cb3912523dc7
msgid "Attributes"
msgstr ""

#: ../../howto/auth-remote-user.txt:81
# 0b4646057e304dbd8259ba3e9c689df2
msgid "``True`` or ``False``.  Determines whether or not a :class:`~django.contrib.auth.models.User` object is created if not already in the database.  Defaults to ``True``."
msgstr ""

#: ../../howto/auth-remote-user.txt:86
#: ../../howto/custom-management-commands.txt:224
# 08abb044cf244f1fa97b85598c1b18cc
# 183e51d94f4c4c8e9b61c21977348fb0
msgid "Methods"
msgstr ""

#: ../../howto/auth-remote-user.txt:90
# bf1a28b6ffc949fba12b1643afc63353
msgid "Performs any cleaning on the ``username`` (e.g. stripping LDAP DN information) prior to using it to get or create a :class:`~django.contrib.auth.models.User` object.  Returns the cleaned username."
msgstr ""

#: ../../howto/auth-remote-user.txt:97
# 7dbce3e4bc584a6583d2ee505aa4bdbd
msgid "Configures a newly created user.  This method is called immediately after a new user is created, and can be used to perform custom setup actions, such as setting the user's groups based on attributes in an LDAP directory. Returns the user object."
msgstr ""

#: ../../howto/custom-file-storage.txt:2
# 98ff2a8f60134c28a37d6259fec510c6
msgid "Writing a custom storage system"
msgstr ""

#: ../../howto/custom-file-storage.txt:6
# 181062e04f1142ca9e9d9ea84f80b0d2
msgid "If you need to provide custom file storage -- a common example is storing files on some remote system -- you can do so by defining a custom storage class. You'll need to follow these steps:"
msgstr ""

#: ../../howto/custom-file-storage.txt:10
# 0dcf03a24f124582ae46be368c3c810f
msgid "Your custom storage system must be a subclass of ``django.core.files.storage.Storage``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:18
# 561c423b5ad3497cb32365c2945e61e8
msgid "Django must be able to instantiate your storage system without any arguments. This means that any settings should be taken from ``django.conf.settings``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:30
# ba9ebd85d9cf4c9f86655fdf8ff2a688
msgid "Your storage class must implement the :meth:`_open()` and :meth:`_save()` methods, along with any other methods appropriate to your storage class. See below for more on these methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:34
# a17bcc80b5d1497a8c6ebc2472890144
msgid "In addition, if your class provides local file storage, it must override the ``path()`` method."
msgstr ""

#: ../../howto/custom-file-storage.txt:37
# ba77b72dfb7c425abe55a498c3592f44
msgid "Your custom storage system may override any of the storage methods explained in :doc:`/ref/files/storage`, but you **must** implement the following methods:"
msgstr ""

#: ../../howto/custom-file-storage.txt:40
# 18cdbae6846245e4a8c996608dd6e2df
msgid ":meth:`Storage.delete`"
msgstr ""

#: ../../howto/custom-file-storage.txt:41
# 12c0551b122547e88c3424a1cd6e5871
msgid ":meth:`Storage.exists`"
msgstr ""

#: ../../howto/custom-file-storage.txt:42
# 3f227082475c452db51f5b889eba4549
msgid ":meth:`Storage.listdir`"
msgstr ""

#: ../../howto/custom-file-storage.txt:43
# d616bd339a044789b0f0cebe78b8c449
msgid ":meth:`Storage.size`"
msgstr ""

#: ../../howto/custom-file-storage.txt:44
# 85f652eefcef4aa68ba8ae004dfb91ff
msgid ":meth:`Storage.url`"
msgstr ""

#: ../../howto/custom-file-storage.txt:46
# d436c996220e4b689e901ac7ab50dafd
msgid "You'll also usually want to use hooks specifically designed for custom storage objects. These are:"
msgstr ""

#: ../../howto/custom-file-storage.txt:51
# 52a363dd4540454b809ee17281ae3924
msgid "**Required**."
msgstr ""

#: ../../howto/custom-file-storage.txt:53
# 6cf4860b2bb04f579cd49c688870a0a6
msgid "Called by ``Storage.open()``, this is the actual mechanism the storage class uses to open the file. This must return a ``File`` object, though in most cases, you'll want to return some subclass here that implements logic specific to the backend storage system."
msgstr ""

#: ../../howto/custom-file-storage.txt:60
# 28267654823d49d2803a2af75051f227
msgid "Called by ``Storage.save()``. The ``name`` will already have gone through ``get_valid_name()`` and ``get_available_name()``, and the ``content`` will be a ``File`` object itself."
msgstr ""

#: ../../howto/custom-file-storage.txt:64
# a4f714d1fa524aa69e002a87833b675b
msgid "Should return the actual name of name of the file saved (usually the ``name`` passed in, but if the storage needs to change the file name return the new name instead)."
msgstr ""

#: ../../howto/custom-file-storage.txt:71
# 6934b675c0334cc8b0f1c12ae857ca42
msgid "Returns a filename suitable for use with the underlying storage system. The ``name`` argument passed to this method is the original filename sent to the server, after having any path information removed. Override this to customize how non-standard characters are converted to safe filenames."
msgstr ""

#: ../../howto/custom-file-storage.txt:76
# 3601c6e3a3c74d19b2c8f1703f997861
msgid "The code provided on ``Storage`` retains only alpha-numeric characters, periods and underscores from the original filename, removing everything else."
msgstr ""

#: ../../howto/custom-file-storage.txt:81
# 6a2597699841461ca251e3d8b6ac053a
msgid "Returns a filename that is available in the storage mechanism, possibly taking the provided filename into account. The ``name`` argument passed to this method will have already cleaned to a filename valid for the storage system, according to the ``get_valid_name()`` method described above."
msgstr ""

#: ../../howto/custom-file-storage.txt:86
# a0ee37afdc1a4589bae1633799e7863a
msgid "The code provided on ``Storage`` simply appends ``\"_1\"``, ``\"_2\"``, etc. to the filename until it finds one that's available in the destination directory."
msgstr ""

#: ../../howto/custom-management-commands.txt:3
# 06ed828b8a554180bf9617fd49cef53b
msgid "Writing custom django-admin commands"
msgstr ""

#: ../../howto/custom-management-commands.txt:5
# d48e11262f3d43e0bcc6bad70364db9d
msgid "Applications can register their own actions with ``manage.py``. For example, you might want to add a ``manage.py`` action for a Django app that you're distributing. In this document, we will be building a custom ``closepoll`` command for the ``polls`` application from the :doc:`tutorial</intro/tutorial01>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:11
# 49ce389e8848402caea3dab55815ecec
msgid "To do this, just add a ``management/commands`` directory to the application. Django will register a ``manage.py`` command for each Python module in that directory whose name doesn't begin with an underscore. For example::"
msgstr ""

#: ../../howto/custom-management-commands.txt:27
# f5ed357cef3e463b90c7499be5d4da61
msgid "In this example, the ``closepoll`` command will be made available to any project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/custom-management-commands.txt:30
# f65cb03e81854d4ca1ba79850b16982e
msgid "The ``_private.py`` module will not be available as a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:32
# a37c60ccadc649cd92b07ca25162d118
msgid "The ``closepoll.py`` module has only one requirement -- it must define a class ``Command`` that extends :class:`BaseCommand` or one of its :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:38
# fff80c89270f4e7a870a4aeb1313908b
msgid "Custom management commands are especially useful for running standalone scripts or for scripts that are periodically executed from the UNIX crontab or from Windows scheduled tasks control panel."
msgstr ""

#: ../../howto/custom-management-commands.txt:42
# 683361c0eb4d4f83a284a61b39c3db85
msgid "To implement the command, edit ``polls/management/commands/closepoll.py`` to look like this:"
msgstr ""

#: ../../howto/custom-management-commands.txt:67
# f94f77c6878f46ee9a7991b97eaceb2d
msgid "When you are using management commands and wish to provide console output, you should write to ``self.stdout`` and ``self.stderr``, instead of printing to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes much easier to test your custom command."
msgstr ""

#: ../../howto/custom-management-commands.txt:73
# f65607b0c231420c860eabe368c7c353
msgid "The new custom command can be called using ``python manage.py closepoll <poll_id>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:76
# fd05ba1bc2c24236bd362f6510575db4
msgid "The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll.opened`` to ``False`` for each one. If the user referenced any nonexistent polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls.models.Poll`` for this example."
msgstr ""

#: ../../howto/custom-management-commands.txt:82
# 3210a44ca9254a1eb6792ca9d4e7933f
msgid "The same ``closepoll`` could be easily modified to delete a given poll instead of closing it by accepting additional command line options. These custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

#: ../../howto/custom-management-commands.txt:105
# 4ed3e678cf1f44be89aa32000170f1b1
msgid "The option (``delete`` in our example) is available in the options dict parameter of the handle method. See the :py:mod:`optparse` Python documentation for more about ``make_option`` usage."
msgstr ""

#: ../../howto/custom-management-commands.txt:109
# 3bb843c5715a42f49c18b96e1e1e4d37
msgid "In addition to being able to add custom command line options, all :doc:`management commands</ref/django-admin>` can accept some default options such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

#: ../../howto/custom-management-commands.txt:115
# 4641fb891eae4469a6a26812736209ca
msgid "The :meth:`BaseCommand.execute` method sets the hardcoded ``en-us`` locale because the commands shipped with Django perform several tasks (for example, user-facing content rendering and database population) that require a system-neutral string language (for which we use ``en-us``)."
msgstr ""

#: ../../howto/custom-management-commands.txt:120
# f8607c7321a44016b5d4baddea56ffc2
msgid "If your custom management command uses another locale, you should manually activate and deactivate it in your :meth:`~BaseCommand.handle` or :meth:`~NoArgsCommand.handle_noargs` method using the functions provided by the I18N support code:"
msgstr ""

#: ../../howto/custom-management-commands.txt:150
# c350511259564d1ebfeba90aa5243150
msgid "Take into account though, that system management commands typically have to be very careful about running in non-uniform locales, so:"
msgstr ""

#: ../../howto/custom-management-commands.txt:153
# 910d3aa79903453ba17a04ea496e8084
msgid "Make sure the :setting:`USE_I18N` setting is always ``True`` when running the command (this is one good example of the potential problems stemming from a dynamic runtime environment that Django commands avoid offhand by always using a fixed locale)."
msgstr ""

#: ../../howto/custom-management-commands.txt:158
# 5b27842acb1e4223998d042e7cf817b1
msgid "Review the code of your command and the code it calls for behavioral differences when locales are changed and evaluate its impact on predictable behavior of your command."
msgstr ""

#: ../../howto/custom-management-commands.txt:163
# 554ba0e5ccd148f8aea09fa12e7de4d5
msgid "Command objects"
msgstr ""

#: ../../howto/custom-management-commands.txt:167
# 113aefd2184843c58ee671962d302f5c
msgid "The base class from which all management commands ultimately derive."
msgstr ""

#: ../../howto/custom-management-commands.txt:169
# fa7d0f7d1f6f4072893c7e44f9ea8f7e
msgid "Use this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don't need to change any of that behavior, consider using one of its :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:174
# 07f7b4bb7abb426b9f4ca0ba5add3f6a
msgid "Subclassing the :class:`BaseCommand` class requires that you implement the :meth:`~BaseCommand.handle` method."
msgstr ""

#: ../../howto/custom-management-commands.txt:180
# 63c33023b1794dc79ef204c1784b6ad9
msgid "All attributes can be set in your derived class and can be used in :class:`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:185
# a03ad713b5424450901b2b1387fa92ef
msgid "A string listing the arguments accepted by the command, suitable for use in help messages; e.g., a command which takes a list of application names might set this to '<appname appname ...>'."
msgstr ""

#: ../../howto/custom-management-commands.txt:192
# 00172c66537f43eb8130f97b22e80384
msgid "A boolean indicating whether the command needs to be able to import Django settings; if ``True``, ``execute()`` will verify that this is possible before proceeding. Default value is ``True``."
msgstr ""

#: ../../howto/custom-management-commands.txt:199
# cd0caa6f4f5e46d9bde0f7ecd87089ba
msgid "A short description of the command, which will be printed in the help message when the user runs the command ``python manage.py help <command>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:205
# b6470e4c8cb74fd9a5ff4d59a650f20f
msgid "This is the list of ``optparse`` options which will be fed into the command's ``OptionParser`` for parsing arguments."
msgstr ""

#: ../../howto/custom-management-commands.txt:210
# 10bc2423d38a4d8198e48709bd6e825f
msgid "A boolean indicating whether the command outputs SQL statements; if ``True``, the output will automatically be wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:217
# f55a2517a17f4448a16a429211e41e7f
msgid "A boolean; if ``True``, validation of installed models will be performed prior to executing the command. Default value is ``True``. To validate an individual application's models rather than all applications' models, call :meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

#: ../../howto/custom-management-commands.txt:226
# 1d7ca224d3804539a883e0d2972995e8
msgid ":class:`BaseCommand` has a few methods that can be overridden but only the :meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

#: ../../howto/custom-management-commands.txt:231
# 5269f8ac5ccc4a6a8dde768a7a263ece
msgid "If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

#: ../../howto/custom-management-commands.txt:243
# f0d370b8ccdb4889922452209a1e4c7a
msgid "Return the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version."
msgstr ""

#: ../../howto/custom-management-commands.txt:249
# d08007a579ff463cba2a54868b7aedb9
msgid "Try to execute this command, performing model validation if needed (as controlled by the attribute :attr:`requires_model_validation`). If the command raises a :class:`CommandError`, intercept it and print it sensibly to stderr."
msgstr ""

#: ../../howto/custom-management-commands.txt:257
# 71342253afdf440c80c248c483e418a2
msgid "``execute()`` should not be called directly from your code to execute a command. Use :ref:`call_command <call-command>` instead."
msgstr ""

#: ../../howto/custom-management-commands.txt:262
# 9ae64226de744a0f8276553f528058a7
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""

#: ../../howto/custom-management-commands.txt:267
# 5ffaeed09d624f9ab37a92a253b4bc48
msgid "BaseCommand subclasses"
msgstr ""

#: ../../howto/custom-management-commands.txt:271
# 3697d3336f0f4b84a8db736b67fbd266
msgid "A management command which takes one or more installed application names as arguments, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:274
# c71b864cb6934eb2bcf4478716339ed6
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~AppCommand.handle_app`, which will be called once for each application."
msgstr ""

#: ../../howto/custom-management-commands.txt:279
# 915d9ca240e047bbb13a004f2c23c9d0
msgid "Perform the command's actions for ``app``, which will be the Python module corresponding to an application name given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:285
# 61a55534374644beaa4fc876dbff61b5
msgid "A management command which takes one or more arbitrary arguments (labels) on the command line, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:289
# fd2d308701f844b1bd36a74f77bb228f
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~LabelCommand.handle_label`, which will be called once for each label."
msgstr ""

#: ../../howto/custom-management-commands.txt:294
# 76cc4fb07cd2451bb83439f1f50339a0
msgid "Perform the command's actions for ``label``, which will be the string as given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:299
# a3690bc0a69745a5988fea7af483a80b
msgid "A command which takes no arguments on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:301
# 530d7ef1587e4d31b9d5ee9103ce1a0f
msgid "Rather than implementing :meth:`~BaseCommand.handle`, subclasses must implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` itself is overridden to ensure no arguments are passed to the command."
msgstr ""

#: ../../howto/custom-management-commands.txt:307
# 8197773c99754fc280791bf772d9355e
msgid "Perform this command's actions"
msgstr ""

#: ../../howto/custom-management-commands.txt:312
# 864b7d7bc3314fb1beb1083947788361
msgid "Command exceptions"
msgstr ""

#: ../../howto/custom-management-commands.txt:316
# 8251a9654ad04cd099860664c2dadcb6
msgid "Exception class indicating a problem while executing a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:319
# 9b2f0c27b974476792e68837e5ea1b77
msgid "If this exception is raised during the execution of a management command from a command line console, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception (with a sensible description of the error) is the preferred way to indicate that something has gone wrong in the execution of a command."
msgstr ""

#: ../../howto/custom-management-commands.txt:326
# 84d91f7839e2427684cbe9d3466d9e2c
msgid "If a management command is called from code through :ref:`call_command <call-command>`, it's up to you to catch the exception when needed."
msgstr ""

#: ../../howto/custom-model-fields.txt:3
# 1d8e9508836a417e9bfe3d4b98be373a
msgid "Writing custom model fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:8
# b28fb2cb987e4d9980b3e756271f1c08
msgid "Introduction"
msgstr ""

#: ../../howto/custom-model-fields.txt:10
# aa35a823daf74403bfdd3f724847c999
msgid "The :doc:`model reference </topics/db/models>` documentation explains how to use Django's standard field classes -- :class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, those classes are all you'll need. Sometimes, though, the Django version won't meet your precise requirements, or you'll want to use a field that is entirely different from those shipped with Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:17
# 8b2407b59c0e40e08f4cef1f9999f4c9
msgid "Django's built-in field types don't cover every possible database column type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more obscure column types, such as geographic polygons or even user-created types such as `PostgreSQL custom types`_, you can define your own Django ``Field`` subclasses."
msgstr ""

#: ../../howto/custom-model-fields.txt:24
# 54868b6320d94d2582a735ba1e7d7bb1
msgid "Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a ``Field`` subclass will help you use your object with your models."
msgstr ""

#: ../../howto/custom-model-fields.txt:29
# 81179d9889154753a2dbc9597764a521
msgid "Our example object"
msgstr ""

#: ../../howto/custom-model-fields.txt:31
# deabc301f3d444ffa3479378c74d523f
msgid "Creating custom fields requires a bit of attention to detail. To make things easier to follow, we'll use a consistent example throughout this document: wrapping a Python object representing the deal of cards in a hand of Bridge_. Don't worry, you don't have know how to play Bridge to follow this example. You only need to know that 52 cards are dealt out equally to four players, who are traditionally called *north*, *east*, *south* and *west*.  Our class looks something like this::"
msgstr ""

#: ../../howto/custom-model-fields.txt:53
# 92c173b2588645fb9255fa2ddc7cd99a
msgid "This is just an ordinary Python class, with nothing Django-specific about it. We'd like to be able to do things like this in our models (we assume the ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

#: ../../howto/custom-model-fields.txt:64
# 92173439075f473db808c3a553d5f554
msgid "We assign to and retrieve from the ``hand`` attribute in our model just like any other Python class. The trick is to tell Django how to handle saving and loading such an object."
msgstr ""

#: ../../howto/custom-model-fields.txt:68
# bc3f5592500642ab91a0ce77da283fd5
msgid "In order to use the ``Hand`` class in our models, we **do not** have to change this class at all. This is ideal, because it means you can easily write model support for existing classes where you cannot change the source code."
msgstr ""

#: ../../howto/custom-model-fields.txt:73
# e6184bdf47084aaf9fb8dce4510310ab
msgid "You might only be wanting to take advantage of custom database column types and deal with the data as standard Python types in your models; strings, or floats, for example. This case is similar to our ``Hand`` example and we'll note any differences as we go along."
msgstr ""

#: ../../howto/custom-model-fields.txt:79
# 56ce4895234a461c827aab5b892f6bce
msgid "Background theory"
msgstr ""

#: ../../howto/custom-model-fields.txt:82
# 885bc758bcaf4052abfec10955bbcc31
msgid "Database storage"
msgstr ""

#: ../../howto/custom-model-fields.txt:84
# 46f47c6f9ebf4797919aa0a9595f5078
msgid "The simplest way to think of a model field is that it provides a way to take a normal Python object -- string, boolean, ``datetime``, or something more complex like ``Hand`` -- and convert it to and from a format that is useful when dealing with the database (and serialization, but, as we'll see later, that falls out fairly naturally once you have the database side under control)."
msgstr ""

#: ../../howto/custom-model-fields.txt:90
# 0b7d7ac5db54469faaaea6c5b97f48b8
msgid "Fields in a model must somehow be converted to fit into an existing database column type. Different databases provide different sets of valid column types, but the rule is still the same: those are the only types you have to work with. Anything you want to store in the database must fit into one of those types."
msgstr ""

#: ../../howto/custom-model-fields.txt:96
# e21f2181c826418c8fe6e013981931de
msgid "Normally, you're either writing a Django field to match a particular database column type, or there's a fairly straightforward way to convert your data to, say, a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:100
# cbe183b97c4b4cb3a56eb6a04f195092
msgid "For our ``Hand`` example, we could convert the card data to a string of 104 characters by concatenating all the cards together in a pre-determined order -- say, all the *north* cards first, then the *east*, *south* and *west* cards. So ``Hand`` objects can be saved to text or character columns in the database."
msgstr ""

#: ../../howto/custom-model-fields.txt:106
# 8d7ec29ff29a47128e3bc1f97a55a1ce
msgid "What does a field class do?"
msgstr ""

#: ../../howto/custom-model-fields.txt:110
# f47ba7004d544b82b1ce7b0cf1615b65
msgid "All of Django's fields (and when we say *fields* in this document, we always mean model fields and not :doc:`form fields </ref/forms/fields>`) are subclasses of :class:`django.db.models.Field`. Most of the information that Django records about a field is common to all fields -- name, help text, uniqueness and so forth. Storing all that information is handled by ``Field``. We'll get into the precise details of what ``Field`` can do later on; for now, suffice it to say that everything descends from ``Field`` and then customizes key pieces of the class behavior."
msgstr ""

#: ../../howto/custom-model-fields.txt:119
# 635639dc50c345488ddf65fdf3bf3ea6
msgid "It's important to realize that a Django field class is not what is stored in your model attributes. The model attributes contain normal Python objects. The field classes you define in a model are actually stored in the ``Meta`` class when the model class is created (the precise details of how this is done are unimportant here). This is because the field classes aren't necessary when you're just creating and modifying attributes. Instead, they provide the machinery for converting between the attribute value and what is stored in the database or sent to the :doc:`serializer </topics/serialization>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:128
# 2a3a7ca9996b406eb1ecd33fce44dcdc
msgid "Keep this in mind when creating your own custom fields. The Django ``Field`` subclass you write provides the machinery for converting between your Python instances and the database/serializer values in various ways (there are differences between storing a value and using a value for lookups, for example). If this sounds a bit tricky, don't worry -- it will become clearer in the examples below. Just remember that you will often end up creating two classes when you want a custom field:"
msgstr ""

#: ../../howto/custom-model-fields.txt:136
# f7f86b476f20472cb4a911539510a046
msgid "The first class is the Python object that your users will manipulate. They will assign it to the model attribute, they will read from it for displaying purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

#: ../../howto/custom-model-fields.txt:141
# 86b70b9b1f624fdb9673da779203ab71
msgid "The second class is the ``Field`` subclass. This is the class that knows how to convert your first class back and forth between its permanent storage form and the Python form."
msgstr ""

#: ../../howto/custom-model-fields.txt:146
# 90adbaece4664f19b17455d2d32cfaa9
msgid "Writing a field subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:148
# a5da8208e1fb4ca68127b57ea34a53ef
msgid "When planning your :class:`~django.db.models.Field` subclass, first give some thought to which existing :class:`~django.db.models.Field` class your new field is most similar to. Can you subclass an existing Django field and save yourself some work? If not, you should subclass the :class:`~django.db.models.Field` class, from which everything is descended."
msgstr ""

#: ../../howto/custom-model-fields.txt:154
# 414d4dcfe6f148dea3f1299fa6470d8f
msgid "Initializing your new field is a matter of separating out any arguments that are specific to your case from the common arguments and passing the latter to the :meth:`~django.db.models.Field.__init__` method of :class:`~django.db.models.Field` (or your parent class)."
msgstr ""

#: ../../howto/custom-model-fields.txt:159
# 23e1f542783847dbbb5206e69a9a929b
msgid "In our example, we'll call our field ``HandField``. (It's a good idea to call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It doesn't behave like any existing field, so we'll subclass directly from :class:`~django.db.models.Field`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:175
# cb71f03c67b34ae695a4f4ebb3a602b2
msgid "Our ``HandField`` accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total."
msgstr ""

#: ../../howto/custom-model-fields.txt:181
# e35845ccedb2474297ac78172092ea94
msgid "Many of Django's model fields accept options that they don't do anything with. For example, you can pass both :attr:`~django.db.models.Field.editable` and :attr:`~django.db.models.DateField.auto_now` to a :class:`django.db.models.DateField` and it will simply ignore the :attr:`~django.db.models.Field.editable` parameter (:attr:`~django.db.models.DateField.auto_now` being set implies ``editable=False``). No error is raised in this case."
msgstr ""

#: ../../howto/custom-model-fields.txt:190
# 5524a1057ee94920bda49eebd3149862
msgid "This behavior simplifies the field classes, because they don't need to check for options that aren't necessary. They just pass all the options to the parent class and then don't use them later on. It's up to you whether you want your fields to be more strict about the options they select, or to use the simpler, more permissive behavior of the current fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:198
# 289289f5aa554591912dc0c07857ab27
msgid "The :meth:`~django.db.models.Field.__init__` method takes the following parameters:"
msgstr ""

#: ../../howto/custom-model-fields.txt:201
# 4f03a597f3894a87a140f4bc0f934f5f
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

#: ../../howto/custom-model-fields.txt:202
# 6dddeba3af6345d5aba218fe2a7d1581
msgid ":attr:`~django.db.models.Field.name`"
msgstr ""

#: ../../howto/custom-model-fields.txt:203
# f5aa0cd6a0a748eeab5fda2b2a802185
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

#: ../../howto/custom-model-fields.txt:204
# 8d83b1f98de24a288092b6abcab0b772
msgid ":attr:`~django.db.models.Field.max_length`"
msgstr ""

#: ../../howto/custom-model-fields.txt:205
# 13edb2d9ca16412e9aa3a1a217dcf66a
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

#: ../../howto/custom-model-fields.txt:206
# 1509f288b22b4b08a6fc2c5e63dbbbf1
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

#: ../../howto/custom-model-fields.txt:207
# 86df44aff1524b6bb26b10d42b309611
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

#: ../../howto/custom-model-fields.txt:208
# 19ce809d5ca54f4f831ad27f3bcf247a
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

#: ../../howto/custom-model-fields.txt:209
# 0778bf6daf5642ab9f651994d26c2891
msgid ":attr:`~django.db.models.Field.rel`: Used for related fields (like :class:`ForeignKey`). For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:211
# 6cc99e1f6f664bdfa91dcc3e22810e23
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

#: ../../howto/custom-model-fields.txt:212
# e7d84326817c4962b7061a8d9d07e51f
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

#: ../../howto/custom-model-fields.txt:213
# 199116d5a0714f02abbfca42a7a002b0
msgid ":attr:`~django.db.models.Field.serialize`: If ``False``, the field will not be serialized when the model is passed to Django's :doc:`serializers </topics/serialization>`. Defaults to ``True``."
msgstr ""

#: ../../howto/custom-model-fields.txt:216
# 719147a57560454fb77b1c1894447011
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

#: ../../howto/custom-model-fields.txt:217
# 03e9e433a4904e0192627515d4fb8265
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

#: ../../howto/custom-model-fields.txt:218
# edc9cc1335d5445d9de4ac8f318a1870
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

#: ../../howto/custom-model-fields.txt:219
# 9d85c351bf864c58931003755d2e7f92
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

#: ../../howto/custom-model-fields.txt:220
# 73b2ace12fa74c238fff749894761c54
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

#: ../../howto/custom-model-fields.txt:221
# d6c2ff8f26314c8ba836ad7db36650b6
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

#: ../../howto/custom-model-fields.txt:222
# 20073ba4b21448c3be7c15895780d02e
msgid ":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can usually ignore this option."
msgstr ""

#: ../../howto/custom-model-fields.txt:225
# 8d3082fbb506492d80c4ba39b333cf55
msgid ":attr:`~django.db.models.Field.auto_created`: True if the field was automatically created, as for the `OneToOneField` used by model inheritance. For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:229
# bb53e6916ffa4dd88d0dda579dbcca91
msgid "All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the :doc:`field documentation </ref/models/fields>` for examples and details."
msgstr ""

#: ../../howto/custom-model-fields.txt:234
# 205aecd153a046a58b38a13593e063cd
msgid "The ``SubfieldBase`` metaclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:238
# 8379996ea0ab4f91ac09e175e62fabca
msgid "As we indicated in the introduction_, field subclasses are often needed for two reasons: either to take advantage of a custom database column type, or to handle complex Python types. Obviously, a combination of the two is also possible. If you're only working with custom database column types and your model fields appear in Python as standard Python types direct from the database backend, you don't need to worry about this section."
msgstr ""

#: ../../howto/custom-model-fields.txt:245
# 2a83e67b9d6b47398bcf84dc46dd8abb
msgid "If you're handling custom Python types, such as our ``Hand`` class, we need to make sure that when Django initializes an instance of our model and assigns a database value to our custom field attribute, we convert that value into the appropriate Python object. The details of how this happens internally are a little complex, but the code you need to write in your ``Field`` class is simple: make sure your field subclass uses a special metaclass:"
msgstr ""

#: ../../howto/custom-model-fields.txt:252
#: ../../howto/custom-model-fields.txt:342
#: ../../howto/custom-model-fields.txt:474
#: ../../howto/custom-model-fields.txt:645
# 04801c96a85d4f8eadc22d180c298762
# 82d298a42dae425487f3720a00942ed5
# 88bb12822cec4e16826ce131b9682c45
# 9c89f5bb1b5849469cdf0d5aa7643b66
msgid "For example::"
msgstr ""

#: ../../howto/custom-model-fields.txt:263
# 854f212db2bd4739b30b7d31e99ef5ed
msgid "This ensures that the :meth:`.to_python` method, documented below, will always be called when the attribute is initialized."
msgstr ""

#: ../../howto/custom-model-fields.txt:267
# 453cbe93114d4f28a8d7a3f361826a43
msgid "ModelForms and custom fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:269
# 56e9d0a6e50b45b69c7e6ac1fb4ada06
msgid "If you use :class:`~django.db.models.SubfieldBase`, :meth:`.to_python` will be called every time an instance of the field is assigned a value. This means that whenever a value may be assigned to the field, you need to ensure that it will be of the correct datatype, or that you handle any exceptions."
msgstr ""

#: ../../howto/custom-model-fields.txt:275
# 23ad6a7131654d2f85dee3aee14a07f3
msgid "This is especially important if you use :doc:`ModelForms </topics/forms/modelforms>`. When saving a ModelForm, Django will use form values to instantiate model instances. However, if the cleaned form data can't be used as valid input to the field, the normal form validation process will break."
msgstr ""

#: ../../howto/custom-model-fields.txt:281
# b3c2d099a5434a149060c4e9b36d8c8a
msgid "Therefore, you must ensure that the form field used to represent your custom field performs whatever input validation and data cleaning is necessary to convert user-provided form input into a `to_python()`-compatible model field value. This may require writing a custom form field, and/or implementing the :meth:`.formfield` method on your field to return a form field class whose `to_python()` returns the correct datatype."
msgstr ""

#: ../../howto/custom-model-fields.txt:290
# be4915b701294b2c9cc95f4d51df5a2b
msgid "Documenting your custom field"
msgstr ""

#: ../../howto/custom-model-fields.txt:294
# 410791b616bf4431ad3234f18c15453b
msgid "As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the :doc:`django.contrib.admindocs </ref/contrib/admin/admindocs>` application. To do this simply provide descriptive text in a ``description`` class attribute of your custom field. In the above example, the description displayed by the ``admindocs`` application for a ``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

#: ../../howto/custom-model-fields.txt:304
# 9ed80e497b0947f98d5ba598e72db97a
msgid "Useful methods"
msgstr ""

#: ../../howto/custom-model-fields.txt:306
# c9f4e19e4fce485ca714af699b2a3c6b
msgid "Once you've created your :class:`~django.db.models.Field` subclass and set up the ``__metaclass__``, you might consider overriding a few standard methods, depending on your field's behavior. The list of methods below is in approximately decreasing order of importance, so start from the top."
msgstr ""

#: ../../howto/custom-model-fields.txt:312
# 2fc72832198e40d7b3260dcdb8048d53
msgid "Custom database types"
msgstr ""

#: ../../howto/custom-model-fields.txt:316
# dc466dfa9a234a24ac297bfb7fecb7e0
msgid "Returns the database column data type for the :class:`~django.db.models.Field`, taking into account the connection object, and the settings associated with it."
msgstr ""

#: ../../howto/custom-model-fields.txt:319
# 46cada5efc6d4a4d8b741e6a44825bed
msgid "Say you've created a PostgreSQL custom type called ``mytype``. You can use this field with Django by subclassing ``Field`` and implementing the :meth:`.db_type` method, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:329
# 545aab3e9ef04b958ba08881af0cb2b3
msgid "Once you have ``MytypeField``, you can use it in any model, just like any other ``Field`` type::"
msgstr ""

#: ../../howto/custom-model-fields.txt:336
# 1309934502804b5291f896b5acf221f2
msgid "If you aim to build a database-agnostic application, you should account for differences in database column types. For example, the date/time column type in PostgreSQL is called ``timestamp``, while the same column in MySQL is called ``datetime``. The simplest way to handle this in a :meth:`.db_type` method is to check the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

#: ../../howto/custom-model-fields.txt:351
# a8f9098c0ca048de8c88a06fb9f93f56
msgid "The :meth:`.db_type` method is only called by Django when the framework constructs the ``CREATE TABLE`` statements for your application -- that is, when you first create your tables. It's not called at any other time, so it can afford to execute slightly complex code, such as the ``connection.settings_dict`` check in the above example."
msgstr ""

#: ../../howto/custom-model-fields.txt:357
# 15cb76d747734b5f9d1b46eac2bded22
msgid "Some database column types accept parameters, such as ``CHAR(25)``, where the parameter ``25`` represents the maximum column length. In cases like these, it's more flexible if the parameter is specified in the model rather than being hard-coded in the ``db_type()`` method. For example, it wouldn't make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

#: ../../howto/custom-model-fields.txt:373
# 0f94cca381ea40c1bd26c0bf9d8426e7
msgid "The better way of doing this would be to make the parameter specifiable at run time -- i.e., when the class is instantiated. To do that, just implement :meth:`django.db.models.Field.__init__`, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:391
# 94a9476d3bdf4360b9cf216453f0e8eb
msgid "Finally, if your column requires truly complex SQL setup, return ``None`` from :meth:`.db_type`. This will cause Django's SQL creation code to skip over this field. You are then responsible for creating the column in the right table in some other way, of course, but this gives you a way to tell Django to get out of the way."
msgstr ""

#: ../../howto/custom-model-fields.txt:398
# 2a9d9ca762434a93ae25a0aa4d10b0c5
msgid "Converting database values to Python objects"
msgstr ""

#: ../../howto/custom-model-fields.txt:402
# 3f9d773d2bcc45aea5088ad6245bf504
msgid "Converts a value as returned by your database (or a serializer) to a Python object."
msgstr ""

#: ../../howto/custom-model-fields.txt:405
# a9f47cd98c414a72827c96350ab0f074
msgid "The default implementation simply returns ``value``, for the common case in which the database backend already returns data in the correct format (as a Python string, for example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:409
# 749974ea0bc04412915787972f80a80c
msgid "If your custom :class:`~django.db.models.Field` class deals with data structures that are more complex than strings, dates, integers or floats, then you'll need to override this method. As a general rule, the method should deal gracefully with any of the following arguments:"
msgstr ""

#: ../../howto/custom-model-fields.txt:414
# c8ee5696e16d4fdf9ca71b7744de682e
msgid "An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:416
# f55f3420420543e29a74ae6c0cec0110
msgid "A string (e.g., from a deserializer)."
msgstr ""

#: ../../howto/custom-model-fields.txt:418
# 1134e435366946f098bcb9b2b94d8f05
msgid "Whatever the database returns for the column type you're using."
msgstr ""

#: ../../howto/custom-model-fields.txt:420
# b193282d26544af7ab14669864d27e43
msgid "In our ``HandField`` class, we're storing the data as a VARCHAR field in the database, so we need to be able to process strings and ``Hand`` instances in :meth:`.to_python`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:441
# 2198f127e33a434baf45a0e0d5856780
msgid "Notice that we always return a ``Hand`` instance from this method. That's the Python object type we want to store in the model's attribute. If anything is going wrong during value conversion, you should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

#: ../../howto/custom-model-fields.txt:446
# e15c229f93f049e7820a8c5f01549d7e
msgid "**Remember:** If your custom field needs the :meth:`to_python` method to be called when it is created, you should be using `The SubfieldBase metaclass`_ mentioned earlier. Otherwise :meth:`.to_python` won't be called automatically."
msgstr ""

#: ../../howto/custom-model-fields.txt:453
# ae799c5bfd234a918f48ffc1c1febf19
msgid "If your custom field allows ``null=True``, any field method that takes ``value`` as an argument, like :meth:`~Field.to_python` and :meth:`~Field.get_prep_value`, should handle the case when ``value`` is ``None``."
msgstr ""

#: ../../howto/custom-model-fields.txt:459
# e79ceb11ba284a1b9ff08794268bb167
msgid "Converting Python objects to query values"
msgstr ""

#: ../../howto/custom-model-fields.txt:463
# 4b5ce2c1deaa427b975abb142573f688
msgid "This is the reverse of :meth:`.to_python` when working with the database backends (as opposed to serialization). The ``value`` parameter is the current value of the model's attribute (a field has no reference to its containing model, so it cannot retrieve the value itself), and the method should return data in a format that has been prepared for use as a parameter in a query."
msgstr ""

#: ../../howto/custom-model-fields.txt:470
# be870e82635845e886b69a27c4a691f6
msgid "This conversion should *not* include any database-specific conversions. If database-specific conversions are required, they should be made in the call to :meth:`.get_db_prep_value`."
msgstr ""

#: ../../howto/custom-model-fields.txt:484
# 1a3a964982384d08947afd83eee7613f
msgid "Converting query values to database values"
msgstr ""

#: ../../howto/custom-model-fields.txt:488
# 222839547a864fd39208f711eeda126e
msgid "Some data types (for example, dates) need to be in a specific format before they can be used by a database backend. :meth:`.get_db_prep_value` is the method where those conversions should be made. The specific connection that will be used for the query is passed as the ``connection`` parameter. This allows you to use backend-specific conversion logic if it is required."
msgstr ""

#: ../../howto/custom-model-fields.txt:495
# 148c3ff1b7be44779de3be30179efc69
msgid "The ``prepared`` argument describes whether or not the value has already been passed through :meth:`.get_prep_value` conversions. When ``prepared`` is False, the default implementation of :meth:`.get_db_prep_value` will call :meth:`.get_prep_value` to do initial data conversions before performing any database-specific processing."
msgstr ""

#: ../../howto/custom-model-fields.txt:504
# 0a05ff202acc4569af0de601714cf0e6
msgid "Same as the above, but called when the Field value must be *saved* to the database. As the default implementation just calls :meth:`.get_db_prep_value`, you shouldn't need to implement this method unless your custom field needs a special conversion when being saved that is not the same as the conversion used for normal query parameters (which is implemented by :meth:`.get_db_prep_value`)."
msgstr ""

#: ../../howto/custom-model-fields.txt:512
# af720d896f404d74acae44e8c08e7731
msgid "Preprocessing values before saving"
msgstr ""

#: ../../howto/custom-model-fields.txt:516
# 2da95e80e34146619005fca3f71040eb
msgid "This method is called just prior to :meth:`.get_db_prep_save` and should return the value of the appropriate attribute from ``model_instance`` for this field. The attribute name is in ``self.attname`` (this is set up by :class:`~django.db.models.Field`). If the model is being saved to the database for the first time, the ``add`` parameter will be ``True``, otherwise it will be ``False``."
msgstr ""

#: ../../howto/custom-model-fields.txt:523
# 90be033200ca452182b96d221d0309a4
msgid "You only need to override this method if you want to preprocess the value somehow, just before saving. For example, Django's :class:`~django.db.models.DateTimeField` uses this method to set the attribute correctly in the case of :attr:`~django.db.models.DateField.auto_now` or :attr:`~django.db.models.DateField.auto_now_add`."
msgstr ""

#: ../../howto/custom-model-fields.txt:529
# e5c39615ea6342529b58a45cfdbe2bec
msgid "If you do override this method, you must return the value of the attribute at the end. You should also update the model's attribute if you make any changes to the value so that code holding references to the model will always see the correct value."
msgstr ""

#: ../../howto/custom-model-fields.txt:535
# 3ccd769787d249db97db4133243970dc
msgid "Preparing values for use in database lookups"
msgstr ""

#: ../../howto/custom-model-fields.txt:537
# 80829401286c4f44a9d1e957b793bef9
msgid "As with value conversions, preparing a value for database lookups is a two phase process."
msgstr ""

#: ../../howto/custom-model-fields.txt:542
# 1cbddc0aa542452dbd041c0dbb4f7e0a
msgid ":meth:`.get_prep_lookup` performs the first phase of lookup preparation, performing generic data validity checks"
msgstr ""

#: ../../howto/custom-model-fields.txt:545
# 168636d19f2f46f7ab2dee590785ddce
msgid "Prepares the ``value`` for passing to the database when used in a lookup (a ``WHERE`` constraint in SQL). The ``lookup_type`` will be one of the valid Django filter lookups: ``exact``, ``iexact``, ``contains``, ``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, ``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

#: ../../howto/custom-model-fields.txt:552
# e7ea57ba30d54912ad28156ead564229
msgid "Your method must be prepared to handle all of these ``lookup_type`` values and should raise either a ``ValueError`` if the ``value`` is of the wrong sort (a list when you were expecting an object, for example) or a ``TypeError`` if your field does not support that type of lookup. For many fields, you can get by with handling the lookup types that need special handling for your field and pass the rest to the :meth:`.get_db_prep_lookup` method of the parent class."
msgstr ""

#: ../../howto/custom-model-fields.txt:559
# de024862471b4ccea675f90c9b135f13
msgid "If you needed to implement ``get_db_prep_save()``, you will usually need to implement ``get_prep_lookup()``. If you don't, ``get_prep_value`` will be called by the default implementation, to manage ``exact``, ``gt``, ``gte``, ``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

#: ../../howto/custom-model-fields.txt:564
# 6d99a31092804c1d8084c82471997ff4
msgid "You may also want to implement this method to limit the lookup types that could be used with your custom field type."
msgstr ""

#: ../../howto/custom-model-fields.txt:567
# d20961eec8954f739c5c55e8f3779c94
msgid "Note that, for ``range`` and ``in`` lookups, ``get_prep_lookup`` will receive a list of objects (presumably of the right type) and will need to convert them to a list of things of the right type for passing to the database. Most of the time, you can reuse ``get_prep_value()``, or at least factor out some common pieces."
msgstr ""

#: ../../howto/custom-model-fields.txt:573
# d0dab2c925dc41af925bd1883c354a06
msgid "For example, the following code implements ``get_prep_lookup`` to limit the accepted lookup types to ``exact`` and ``in``::"
msgstr ""

#: ../../howto/custom-model-fields.txt:590
# 4a634c712b034df8be734c7dd3f1ed6c
msgid "Performs any database-specific data conversions required by a lookup. As with :meth:`.get_db_prep_value`, the specific connection that will be used for the query is passed as the ``connection`` parameter. The ``prepared`` argument describes whether the value has already been prepared with :meth:`.get_prep_lookup`."
msgstr ""

#: ../../howto/custom-model-fields.txt:597
# 5523dd4ea58c45fa968deec8e920fe26
msgid "Specifying the form field for a model field"
msgstr ""

#: ../../howto/custom-model-fields.txt:601
# ae72cd4eb9d44f7c93e1b0573eafd572
msgid "Returns the default form field to use when this field is displayed in a model. This method is called by the :class:`~django.forms.ModelForm` helper."
msgstr ""

#: ../../howto/custom-model-fields.txt:604
# e6e71fa7ceb143fd9e76a84bdb26e1df
msgid "All of the ``kwargs`` dictionary is passed directly to the form field's :meth:`~django.forms.Field__init__` method. Normally, all you need to do is set up a good default for the ``form_class`` argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the :doc:`forms documentation </topics/forms/index>` for information about this, and take a look at the code in :mod:`django.contrib.localflavor` for some examples of custom widgets."
msgstr ""

#: ../../howto/custom-model-fields.txt:612
# 8688453cff4b4057be26cc59ab87db84
msgid "Continuing our ongoing example, we can write the :meth:`.formfield` method as::"
msgstr ""

#: ../../howto/custom-model-fields.txt:624
# ea6716363c9c4e288f1b7c1382ed900f
msgid "This assumes we've imported a ``MyFormField`` field class (which has its own default widget). This document doesn't cover the details of writing custom form fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:632
# 741b91fe85d74d05add67d9da723a97b
msgid "Emulating built-in field types"
msgstr ""

#: ../../howto/custom-model-fields.txt:636
# b7d5612aaaa64770bf7953bdc6b55a66
msgid "Returns a string giving the name of the :class:`~django.db.models.Field` subclass we are emulating at the database level. This is used to determine the type of database column for simple cases."
msgstr ""

#: ../../howto/custom-model-fields.txt:640
# 101e129c96a94bdc8644c3fb067391d2
msgid "If you have created a :meth:`.db_type` method, you don't need to worry about :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, your database storage is similar in type to some other field, so you can use that other field's logic to create the right column."
msgstr ""

#: ../../howto/custom-model-fields.txt:653
# d266288f0b7d49f48d785f101bc051e6
msgid "No matter which database backend we are using, this will mean that ``syncdb`` and other SQL commands create the right column type for storing a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:656
# ba1191654ecd4335aa2d852e18d5c80e
msgid "If :meth:`.get_internal_type` returns a string that is not known to Django for the database backend you are using -- that is, it doesn't appear in ``django.db.backends.<db_name>.creation.DATA_TYPES`` -- the string will still be used by the serializer, but the default :meth:`.db_type` method will return ``None``. See the documentation of :meth:`.db_type` for reasons why this might be useful. Putting a descriptive string in as the type of the field for the serializer is a useful idea if you're ever going to be using the serializer output in some other place, outside of Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:666
# cf6c3c031fba4e73a10d398c4778896e
msgid "Converting field data for serialization"
msgstr ""

#: ../../howto/custom-model-fields.txt:670
# 86cd66a4edbe47819aac3eb260a4a772
msgid "This method is used by the serializers to convert the field into a string for output. Calling :meth:`Field._get_val_from_obj(obj)` is the best way to get the value to serialize. For example, since our ``HandField`` uses strings for its data storage anyway, we can reuse some existing conversion code::"
msgstr ""

#: ../../howto/custom-model-fields.txt:683
# bd1677607dc24771873407a7938740f1
msgid "Some general advice"
msgstr ""

#: ../../howto/custom-model-fields.txt:685
# 3217648374ee45ae9bb666f704d71393
msgid "Writing a custom field can be a tricky process, particularly if you're doing complex conversions between your Python types and your database and serialization formats. Here are a couple of tips to make things go more smoothly:"
msgstr ""

#: ../../howto/custom-model-fields.txt:690
# 21e2248be75c48aeba648244397ea666
msgid "Look at the existing Django fields (in :file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a field that's similar to what you want and extend it a little bit, instead of creating an entirely new field from scratch."
msgstr ""

#: ../../howto/custom-model-fields.txt:695
# 1eb85344823a4ad28e0aac0d96a5d574
msgid "Put a :meth:`__str__` or :meth:`__unicode__` method on the class you're wrapping up as a field. There are a lot of places where the default behavior of the field code is to call :func:`~django.utils.encoding.force_text` on the value. (In our examples in this document, ``value`` would be a ``Hand`` instance, not a ``HandField``). So if your :meth:`__unicode__` method automatically converts to the string form of your Python object, you can save yourself a lot of work."
msgstr ""

#: ../../howto/custom-model-fields.txt:706
# a1c79995e07c456c9ef694bc8c4e6975
msgid "Writing a ``FileField`` subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:708
# d3f098e177364b06a12f4b52439f1b5a
msgid "In addition to the above methods, fields that deal with files have a few other special requirements which must be taken into account. The majority of the mechanics provided by ``FileField``, such as controlling database storage and retrieval, can remain unchanged, leaving subclasses to deal with the challenge of supporting a particular type of file."
msgstr ""

#: ../../howto/custom-model-fields.txt:714
# 751499a1dc8d46a8823478b7792775ad
msgid "Django provides a ``File`` class, which is used as a proxy to the file's contents and operations. This can be subclassed to customize how the file is accessed, and what methods are available. It lives at ``django.db.models.fields.files``, and its default behavior is explained in the :doc:`file documentation </ref/files/file>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:720
# 5b224c92aaec4d879aa5886c6a7e3402
msgid "Once a subclass of ``File`` is created, the new ``FileField`` subclass must be told to use it. To do so, simply assign the new ``File`` subclass to the special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

#: ../../howto/custom-model-fields.txt:725
# ada456f18fb34ad7aa65ce25937ae81a
msgid "A few suggestions"
msgstr ""

#: ../../howto/custom-model-fields.txt:727
# e48712d302184b158ee4eabdea393c70
msgid "In addition to the above details, there are a few guidelines which can greatly improve the efficiency and readability of the field's code."
msgstr ""

#: ../../howto/custom-model-fields.txt:730
# 268d807d63a04f058137a36b42e97c53
msgid "The source for Django's own ``ImageField`` (in ``django/db/models/fields/files.py``) is a great example of how to subclass ``FileField`` to support a particular type of file, as it incorporates all of the techniques described above."
msgstr ""

#: ../../howto/custom-model-fields.txt:735
# e927bea7ae36419386ed81b105e48617
msgid "Cache file attributes wherever possible. Since files may be stored in remote storage systems, retrieving them may cost extra time, or even money, that isn't always necessary. Once a file is retrieved to obtain some data about its content, cache as much of that data as possible to reduce the number of times the file must be retrieved on subsequent calls for that information."
msgstr ""

#: ../../howto/custom-template-tags.txt:3
# f374002cd3854427b14c91646c7a9133
msgid "Custom template tags and filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:5
# 92df0fac3baa498cab22bf31b2c01a4d
msgid "Django's template system comes with a wide variety of :doc:`built-in tags and filters </ref/templates/builtins>` designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:14
# 3e41ead1a32b478ba289496c32d1f21d
msgid "Code layout"
msgstr ""

#: ../../howto/custom-template-tags.txt:16
# 1019fae7a545474bb2740cc3d067b94e
msgid "Custom template tags and filters must live inside a Django app. If they relate to an existing app it makes sense to bundle them there; otherwise, you should create a new app to hold them."
msgstr ""

#: ../../howto/custom-template-tags.txt:20
# 4fb37d3223cc41cc9d919f06c134c27b
msgid "The app should contain a ``templatetags`` directory, at the same level as ``models.py``, ``views.py``, etc. If this doesn't already exist, create it - don't forget the ``__init__.py`` file to ensure the directory is treated as a Python package."
msgstr ""

#: ../../howto/custom-template-tags.txt:25
# c53f92315bcd46f482bc80f0ae972815
msgid "Your custom tags and filters will live in a module inside the ``templatetags`` directory. The name of the module file is the name you'll use to load the tags later, so be careful to pick a name that won't clash with custom tags and filters in another app."
msgstr ""

#: ../../howto/custom-template-tags.txt:30
# 8df5b1101f544757b8824112c0568238
msgid "For example, if your custom tags/filters are in a file called ``poll_extras.py``, your app layout might look like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:40
# f0c79d5e5ef44943ae19d2bb1afe8f89
msgid "And in your template you would use the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:46
# 948984f349e147baa95d2bb515abcd3a
msgid "The app that contains the custom tags must be in :setting:`INSTALLED_APPS` in order for the :ttag:`{% load %}<load>` tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation."
msgstr ""

#: ../../howto/custom-template-tags.txt:51
# d2ec4f3644d94759bc8736a3bfd8c84c
msgid "There's no limit on how many modules you put in the ``templatetags`` package. Just keep in mind that a :ttag:`{% load %}<load>` statement will load tags/filters for the given Python module name, not the name of the app."
msgstr ""

#: ../../howto/custom-template-tags.txt:55
# 932830d0587e4fc2ba9847eeec3cb99a
msgid "To be a valid tag library, the module must contain a module-level variable named ``register`` that is a ``template.Library`` instance, in which all the tags and filters are registered. So, near the top of your module, put the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:69
# a6506e76055f48f9bbf1a8cd0af567bc
msgid "For a ton of examples, read the source code for Django's default filters and tags. They're in ``django/template/defaultfilters.py`` and ``django/template/defaulttags.py``, respectively."
msgstr ""

#: ../../howto/custom-template-tags.txt:73
# 0d7d87770c2d4c63a8d3af9f8b403fea
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

#: ../../howto/custom-template-tags.txt:76
# ebeecf02c4bf4790a32db55c40863f16
msgid "Writing custom template filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:78
# dae529f869fd41379e492970a2836977
msgid "Custom filters are just Python functions that take one or two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:80
# 09425a6cbab442409e14db3d321ae621
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:81
# 070b3d0c1abd4f47a75191320a5e0193
msgid "The value of the argument -- this can have a default value, or be left out altogether."
msgstr ""

#: ../../howto/custom-template-tags.txt:84
# 8cd30f211eb34e8d9c76906256efaa95
msgid "For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

#: ../../howto/custom-template-tags.txt:87
# 13216a0449f44ab8b13b462d207e5f09
msgid "Filter functions should always return something. They shouldn't raise exceptions. They should fail silently. In case of error, they should return either the original input or an empty string -- whichever makes more sense."
msgstr ""

#: ../../howto/custom-template-tags.txt:91
# c7a31a810f6941e980b7392bd34d8d83
msgid "Here's an example filter definition:"
msgstr ""

#: ../../howto/custom-template-tags.txt:99
# 85291d2d17124b888a55eaec0f4c15f7
msgid "And here's an example of how that filter would be used:"
msgstr ""

#: ../../howto/custom-template-tags.txt:105
# fb9e8d8abbc84ce8b7b7de3aa5a98d17
msgid "Most filters don't take arguments. In this case, just leave the argument out of your function. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:115
# 1bb893b7c7c0412ebcba28cae1f73c81
msgid "Registering custom filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:117
# dc6f26c612874a4395025c31e1f97fbc
msgid "Once you've written your filter definition, you need to register it with your ``Library`` instance, to make it available to Django's template language:"
msgstr ""

#: ../../howto/custom-template-tags.txt:125
# d060461d6cbf480a855eaba189f50813
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:127
# 4dfb93c3acbf47f48b7b17e0c7288988
msgid "The name of the filter -- a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:128
#: ../../howto/custom-template-tags.txt:636
# d5082139a6c046f398a3f6c1c3a6f010
# 4f6c7d711bab4c62aa3249005ef480ca
msgid "The compilation function -- a Python function (not the name of the function as a string)."
msgstr ""

#: ../../howto/custom-template-tags.txt:131
# 6893503023b544cdaf9dbaf3b415f3c1
msgid "You can use ``register.filter()`` as a decorator instead:"
msgstr ""

#: ../../howto/custom-template-tags.txt:143
# af3b54ff062444a896cc8f4c4f195167
msgid "If you leave off the ``name`` argument, as in the second example above, Django will use the function's name as the filter name."
msgstr ""

#: ../../howto/custom-template-tags.txt:146
# 9f2e51c533e84d71a391a7daeedb3462
msgid "Finally, ``register.filter()`` also accepts three keyword arguments, ``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These arguments are described in :ref:`filters and auto-escaping <filters-auto-escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

#: ../../howto/custom-template-tags.txt:152
# 8317d67a30574c4facb345fdc491ea68
msgid "Template filters that expect strings"
msgstr ""

#: ../../howto/custom-template-tags.txt:154
# 8d4d74240a674c3fa8262818d2bccace
msgid "If you're writing a template filter that only expects a string as the first argument, you should use the decorator ``stringfilter``. This will convert an object to its string value before being passed to your function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:170
# 637a34480fe94f309a50b2a5b661a466
msgid "This way, you'll be able to pass, say, an integer to this filter, and it won't cause an ``AttributeError`` (because integers don't have ``lower()`` methods)."
msgstr ""

#: ../../howto/custom-template-tags.txt:177
# 129fc2eb3a5f4bae852a0bb91da828e4
msgid "Filters and auto-escaping"
msgstr ""

#: ../../howto/custom-template-tags.txt:179
# 2249d0c4ae27482d96950cf3e912face
msgid "When writing a custom filter, give some thought to how the filter will interact with Django's auto-escaping behavior. Note that three types of strings can be passed around inside the template code:"
msgstr ""

#: ../../howto/custom-template-tags.txt:183
# 13e4e20c497a4e9d90ca65b9aed26dbe
msgid "**Raw strings** are the native Python ``str`` or ``unicode`` types. On output, they're escaped if auto-escaping is in effect and presented unchanged, otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:187
# c391221aea814846b6f6ff6d9aaba1ba
msgid "**Safe strings** are strings that have been marked safe from further escaping at output time. Any necessary escaping has already been done. They're commonly used for output that contains raw HTML that is intended to be interpreted as-is on the client side."
msgstr ""

#: ../../howto/custom-template-tags.txt:192
# a30ee85994ae49e696b426d8c53de23d
msgid "Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They share a common base class of ``SafeData``, so you can test for them using code like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:202
# 183de0e22a56432caa116cf998dd01ea
msgid "**Strings marked as \"needing escaping\"** are *always* escaped on output, regardless of whether they are in an :ttag:`autoescape` block or not. These strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

#: ../../howto/custom-template-tags.txt:207
# c64b2fddeb4c4a0a99520aa8a311c69e
msgid "Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. Generally you don't have to worry about these; they exist for the implementation of the :tfilter:`escape` filter."
msgstr ""

#: ../../howto/custom-template-tags.txt:211
# 4c0298e8f5ab45689522d2515603e227
msgid "Template filter code falls into one of two situations:"
msgstr ""

#: ../../howto/custom-template-tags.txt:213
# 786168d336a54bf68852efd9d8dbfcb9
msgid "Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, ``'``, ``\"`` or ``&``) into the result that were not already present. In this case, you can let Django take care of all the auto-escaping handling for you. All you need to do is set the ``is_safe`` flag to ``True`` when you register your filter function, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:225
# 2fa5100f9c244eb9917ae655f09ac418
msgid "This flag tells Django that if a \"safe\" string is passed into your filter, the result will still be \"safe\" and if a non-safe string is passed in, Django will automatically escape it, if necessary."
msgstr ""

#: ../../howto/custom-template-tags.txt:229
# f6e6c3aac5154258a8c9aae10cfcf26c
msgid "You can think of this as meaning \"this filter is safe -- it doesn't introduce any possibility of unsafe HTML.\""
msgstr ""

#: ../../howto/custom-template-tags.txt:232
# 9e16a6cb017b44d28de1dcaba440ce0d
msgid "The reason ``is_safe`` is necessary is because there are plenty of normal string operations that will turn a ``SafeData`` object back into a normal ``str`` or ``unicode`` object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed."
msgstr ""

#: ../../howto/custom-template-tags.txt:238
# 81f9e22e147d4e83ad15a9dadc7ce689
msgid "For example, suppose you have a filter that adds the string ``xx`` to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with ``is_safe``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:249
# 41d3fd759d43492994e6e960ddb8f048
msgid "When this filter is used in a template where auto-escaping is enabled, Django will escape the output whenever the input is not already marked as \"safe\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:253
# 39e739f1ae6a4d5da4d2fda2180f47bb
msgid "By default, ``is_safe`` is ``False``, and you can omit it from any filters where it isn't required."
msgstr ""

#: ../../howto/custom-template-tags.txt:256
# 1346e860b2d94249a5769bb4b88c3378
msgid "Be careful when deciding if your filter really does leave safe strings as safe. If you're *removing* characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a ``>`` from the input might turn ``<a>`` into ``<a``, which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity and thus needs further escaping. Most cases won't be nearly this tricky, but keep an eye out for any problems like that when reviewing your code."
msgstr ""

#: ../../howto/custom-template-tags.txt:266
# 731e0881c22a4a2e9593d1fe9e8294a9
msgid "Marking a filter ``is_safe`` will coerce the filter's return value to a string.  If your filter should return a boolean or other non-string value, marking it ``is_safe`` will probably have unintended consequences (such as converting a boolean False to the string 'False')."
msgstr ""

#: ../../howto/custom-template-tags.txt:272
# f206705165ee4ec68a633ddbe17ac280
msgid "Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you're introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn't escaped further, so you'll need to handle the input yourself."
msgstr ""

#: ../../howto/custom-template-tags.txt:278
# bca4b8854eeb4d79a68c6a249320be84
msgid "To mark the output as a safe string, use :func:`django.utils.safestring.mark_safe`."
msgstr ""

#: ../../howto/custom-template-tags.txt:281
# cb65e37d68484143b4d3241a2cf1ff2c
msgid "Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really *is* safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters than can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors."
msgstr ""

#: ../../howto/custom-template-tags.txt:287
# 474b69f5ea214b31ba8954fae0dae0bd
msgid "In order for your filter to know the current auto-escaping state, set the ``needs_autoescape`` flag to ``True`` when you register your filter function. (If you don't specify this flag, it defaults to ``False``). This flag tells Django that your filter function wants to be passed an extra keyword argument, called ``autoescape``, that is ``True`` if auto-escaping is in effect and ``False`` otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:294
# bf433abfb400430089e198bd05f580d8
msgid "For example, let's write a filter that emphasizes the first character of a string:"
msgstr ""

#: ../../howto/custom-template-tags.txt:312
# b477dffb795843edaebfd936ed48676a
msgid "The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use ``autoescape`` to decide whether the input data needs to be passed through ``django.utils.html.conditional_escape`` or not. (In the latter case, we just use the identity function as the \"escape\" function.) The ``conditional_escape()`` function is like ``escape()`` except it only escapes input that is **not** a ``SafeData`` instance. If a ``SafeData`` instance is passed to ``conditional_escape()``, the data is returned unchanged."
msgstr ""

#: ../../howto/custom-template-tags.txt:322
# 922a80fa714e457ca27f609c702ec8b9
msgid "Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping."
msgstr ""

#: ../../howto/custom-template-tags.txt:326
# 033b8bdb53584391bf76aadde43883f2
msgid "There's no need to worry about the ``is_safe`` flag in this case (although including it wouldn't hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the ``is_safe`` flag won't change anything either way."
msgstr ""

#: ../../howto/custom-template-tags.txt:333
# a154242dfa854f66946ab7e6c272d31e
msgid "``is_safe`` and ``needs_autoescape`` used to be attributes of the filter function; this syntax is deprecated."
msgstr ""

#: ../../howto/custom-template-tags.txt:354
# b5d99fd83a4344aa8be79b8ebf81a690
msgid "Filters and time zones"
msgstr ""

#: ../../howto/custom-template-tags.txt:358
# 3b993685a72d4945967b5e6d4106fad3
msgid "If you write a custom filter that operates on :class:`~datetime.datetime` objects, you'll usually register it with the ``expects_localtime`` flag set to ``True``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:371
# f028e50cfde444b6a6f363d0746b5b18
msgid "When this flag is set, if the first argument to your filter is a time zone aware datetime, Django will convert it to the current time zone before passing it to your filter when appropriate, according to :ref:`rules for time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:377
# 1b9ffff4bc4646eba6396f7cc0b99740
msgid "Writing custom template tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:379
# 5e9e3b29c25d4e67bda5ca4e024f98ad
msgid "Tags are more complex than filters, because tags can do anything."
msgstr ""

#: ../../howto/custom-template-tags.txt:382
# 29ebc19ca7494cc6bb43cae8971fcdeb
msgid "A quick overview"
msgstr ""

#: ../../howto/custom-template-tags.txt:384
# 5482f476c81848c099c77a74fd282d48
msgid "Above, this document explained that the template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works."
msgstr ""

#: ../../howto/custom-template-tags.txt:388
# f20b495e6be14c989afacbc675e0bad0
msgid "When Django compiles a template, it splits the raw template text into ''nodes''. Each node is an instance of ``django.template.Node`` and has a ``render()`` method. A compiled template is, simply, a list of ``Node`` objects. When you call ``render()`` on a compiled template object, the template calls ``render()`` on each ``Node`` in its node list, with the given context. The results are all concatenated together to form the output of the template."
msgstr ""

#: ../../howto/custom-template-tags.txt:395
# 70d001fb95a8454e96a92b70723a2bff
msgid "Thus, to define a custom template tag, you specify how the raw template tag is converted into a ``Node`` (the compilation function), and what the node's ``render()`` method does."
msgstr ""

#: ../../howto/custom-template-tags.txt:400
# 94fa125877e342189de6d3e78201600b
msgid "Writing the compilation function"
msgstr ""

#: ../../howto/custom-template-tags.txt:402
# 7c52347686be4661a25d6a822d1bbab0
msgid "For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a ``Node`` instance based on the contents of the tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:406
# d2ecdbf0f31540fa9b3d918c948e7411
msgid "For example, let's write a template tag, ``{% current_time %}``, that displays the current date/time, formatted according to a parameter given in the tag, in :func:`~time.strftime` syntax. It's a good idea to decide the tag syntax before anything else. In our case, let's say the tag should be used like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:415
# 166815c405104e9aa4a987a1670a8858
msgid "The parser for this function should grab the parameter and create a ``Node`` object:"
msgstr ""

#: ../../howto/custom-template-tags.txt:431
#: ../../howto/custom-template-tags.txt:483
# d022ce2406c34b0cada0bb01421b6b24
# 93e305257cb944afabdd7e6a31b10571
msgid "Notes:"
msgstr ""

#: ../../howto/custom-template-tags.txt:433
# 4b40748fc60d4e3d8f817c62d411552c
msgid "``parser`` is the template parser object. We don't need it in this example."
msgstr ""

#: ../../howto/custom-template-tags.txt:436
# 3f4f093b6ca442f1a8b42e141809cf62
msgid "``token.contents`` is a string of the raw contents of the tag. In our example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

#: ../../howto/custom-template-tags.txt:439
# d3324bc569884fc580d51f0ecc2a704b
msgid "The ``token.split_contents()`` method separates the arguments on spaces while keeping quoted strings together. The more straightforward ``token.contents.split()`` wouldn't be as robust, as it would naively split on *all* spaces, including those within quoted strings. It's a good idea to always use ``token.split_contents()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:445
# c1ebe3c90c3846739dd4f868a03d13c0
msgid "This function is responsible for raising ``django.template.TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

#: ../../howto/custom-template-tags.txt:449
# 084f44593e884ae9a15e052f969421e5
msgid "The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't hard-code the tag's name in your error messages, because that couples the tag's name to your function. ``token.contents.split()[0]`` will ''always'' be the name of your tag -- even when the tag has no arguments."
msgstr ""

#: ../../howto/custom-template-tags.txt:455
# 76167db6619b4533afd3e6b6ddd82b68
msgid "The function returns a ``CurrentTimeNode`` with everything the node needs to know about this tag. In this case, it just passes the argument -- ``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template tag are removed in ``format_string[1:-1]``."
msgstr ""

#: ../../howto/custom-template-tags.txt:460
# fbf030c30cb44efb885bd8998120f8ec
msgid "The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It's low-level because that's fastest."
msgstr ""

#: ../../howto/custom-template-tags.txt:466
# ca91c3f6e8ef48b899a43dfa498ef6d9
msgid "Writing the renderer"
msgstr ""

#: ../../howto/custom-template-tags.txt:468
# 73ef1bb2fca94d7bb337ada23e917b79
msgid "The second step in writing custom tags is to define a ``Node`` subclass that has a ``render()`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:471
# 486948b29ae447f1b38ea7e582485851
msgid "Continuing the above example, we need to define ``CurrentTimeNode``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:485
# 2440ac94dc9f4246994dde5e9872877a
msgid "``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:489
# e168f39b3abe4dfb863f96c245646af8
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

#: ../../howto/custom-template-tags.txt:491
# e87bf26e70c44d44938fd552af46dbac
msgid "``render()`` should never raise ``TemplateSyntaxError`` or any other exception. It should fail silently, just as template filters should."
msgstr ""

#: ../../howto/custom-template-tags.txt:494
# f38f0befcf674585842b4b8433fdd775
msgid "Ultimately, this decoupling of compilation and rendering results in an efficient template system, because a template can render multiple contexts without having to be parsed multiple times."
msgstr ""

#: ../../howto/custom-template-tags.txt:499
# 70d9e94f0dd04e8b9aa965cdb7db8637
msgid "Auto-escaping considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:501
# 339e7733a70a4653970afb0912ce4f01
msgid "The output from template tags is **not** automatically run through the auto-escaping filters. However, there are still a couple of things you should keep in mind when writing a template tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:505
# 8fd6c06b9c5845c2872bb7d2970e6994
msgid "If the ``render()`` function of your template stores the result in a context variable (rather than returning the result in a string), it should take care to call ``mark_safe()`` if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such."
msgstr ""

#: ../../howto/custom-template-tags.txt:512
# 176a946e5fe2409489e05fcdcbb81b17
msgid "Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context's value. The ``__init__`` method for the ``Context`` class takes a parameter called ``autoescape`` that you can use for this purpose. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:524
# a9901d63626e49609195b23de7ee819d
msgid "This is not a very common situation, but it's useful if you're rendering a template yourself. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:533
# 6a5d697d8daf41419a243ef46f175bcf
msgid "If we had neglected to pass in the current ``context.autoescape`` value to our new ``Context`` in this example, the results would have *always* been automatically escaped, which may not be the desired behavior if the template tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

#: ../../howto/custom-template-tags.txt:541
# b5753d64f2e543a989e2710420285559
msgid "Thread-safety considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:543
# acbbea88bf2243f6833de1774adab4a8
msgid "Once a node is parsed, its ``render`` method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it's important to make sure your template tags are thread safe."
msgstr ""

#: ../../howto/custom-template-tags.txt:549
# 060e08b992934b5c851eb0bec25476df
msgid "To make sure your template tags are thread safe, you should never store state information on the node itself. For example, Django provides a builtin :ttag:`cycle` template tag that cycles among a list of given strings each time it's rendered:"
msgstr ""

#: ../../howto/custom-template-tags.txt:562
# 4d246337373e475eb99e03157a1e9e4e
msgid "A naive implementation of ``CycleNode`` might look something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:572
# 80074f5ade3948209215beb3f3472806
msgid "But, suppose we have two templates rendering the template snippet from above at the same time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:575
# 10a9c13ccac1476281dbd7627c4896e0
msgid "Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns 'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:577
# 9be21450e3e6474497df8a086f070122
msgid "Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns 'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:579
# 98779954c63a4c42b344c11ed1b96679
msgid "Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns 'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:581
# 9a932fed91164061862ac660d84e8d21
msgid "Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns 'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:584
# d46a00ad1bb44518b7ce95e435d5577c
msgid "The CycleNode is iterating, but it's iterating globally. As far as Thread 1 and Thread 2 are concerned, it's always returning the same value. This is obviously not what we want!"
msgstr ""

#: ../../howto/custom-template-tags.txt:588
# 8ca1453752fe4d77a45cfd454768c3eb
msgid "To address this problem, Django provides a ``render_context`` that's associated with the ``context`` of the template that is currently being rendered. The ``render_context`` behaves like a Python dictionary, and should be used to store ``Node`` state between invocations of the ``render`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:593
# df8ab9e84ed44873b1f8fb88c3c6be3d
msgid "Let's refactor our ``CycleNode`` implementation to use the ``render_context``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:606
# 9b348def9ef34890be9223f353b2ec09
msgid "Note that it's perfectly safe to store global information that will not change throughout the life of the ``Node`` as an attribute. In the case of ``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` is instantiated, so we don't need to put it in the ``render_context``. But state information that is specific to the template that is currently being rendered, like the current iteration of the ``CycleNode``, should be stored in the ``render_context``."
msgstr ""

#: ../../howto/custom-template-tags.txt:615
# 0a29b21cd0e74a59b6b8aa34b4661d91
msgid "Notice how we used ``self`` to scope the ``CycleNode`` specific information within the ``render_context``. There may be multiple ``CycleNodes`` in a given template, so we need to be careful not to clobber another node's state information. The easiest way to do this is to always use ``self`` as the key into ``render_context``. If you're keeping track of several state variables, make ``render_context[self]`` a dictionary."
msgstr ""

#: ../../howto/custom-template-tags.txt:623
# 19ae2ea30335419ca0fb076769edb894
msgid "Registering the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:625
# b229e33fc8e84a5798dc78108f862001
msgid "Finally, register the tag with your module's ``Library`` instance, as explained in \"Writing custom template filters\" above. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:632
# 81fc16d6a90e4675903a2d6f941519b4
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:634
# 5e543491b33f4317872ae8b967e7f01f
msgid "The name of the template tag -- a string. If this is left out, the name of the compilation function will be used."
msgstr ""

#: ../../howto/custom-template-tags.txt:639
# ac6a43231574435cb47772cb5306653f
msgid "As with filter registration, it is also possible to use this as a decorator:"
msgstr ""

#: ../../howto/custom-template-tags.txt:651
# 52e7c07968094ae998c204f13f05d63a
msgid "If you leave off the ``name`` argument, as in the second example above, Django will use the function's name as the tag name."
msgstr ""

#: ../../howto/custom-template-tags.txt:655
# 172b418221be4dfda59129cc785ead4a
msgid "Passing template variables to the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:657
# be44bfcd9266421091297d7863648abb
msgid "Although you can pass any number of arguments to a template tag using ``token.split_contents()``, the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument."
msgstr ""

#: ../../howto/custom-template-tags.txt:662
# 4ee4d37d3fd049f5ad0779b63ab40ae5
msgid "While the previous examples have formatted the current time into a string and returned the string, suppose you wanted to pass in a :class:`~django.db.models.DateTimeField` from an object and have the template tag format that date-time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:671
# 4644c9b628984a68b2548b1ece63e1de
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

#: ../../howto/custom-template-tags.txt:673
# c1ba859ce11b4b21a39f6bf6fbc4aa75
msgid "The tag name ``format_time``."
msgstr ""

#: ../../howto/custom-template-tags.txt:674
# 19bd4c9b2bc84255ae012031b4fd0c45
msgid "The string ``\"blog_entry.date_updated\"`` (without the surrounding quotes)."
msgstr ""

#: ../../howto/custom-template-tags.txt:676
# 56d5bb061ec241569619a30ffc16a7b9
msgid "The formatting string ``\"%Y-%m-%d %I:%M %p\"``. The return value from ``split_contents()`` will include the leading and trailing quotes for string literals like this."
msgstr ""

#: ../../howto/custom-template-tags.txt:680
# d68e35f0956344328c63f2c8b7bbb0e6
msgid "Now your tag should begin to look like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:695
# 644169090c4249b0b35246dc98659641
msgid "You also have to change the renderer to retrieve the actual contents of the ``date_updated`` property of the ``blog_entry`` object.  This can be accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

#: ../../howto/custom-template-tags.txt:699
# 1a7026de6b9d4a88922ba6b2c191ae39
msgid "To use the ``Variable`` class, simply instantiate it with the name of the variable to be resolved, and then call ``variable.resolve(context)``. So, for example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:717
# 6c9c3d686bd548be9ae1f322ab624b5e
msgid "Variable resolution will throw a ``VariableDoesNotExist`` exception if it cannot resolve the string passed to it in the current context of the page."
msgstr ""

#: ../../howto/custom-template-tags.txt:723
# 38604c5506e844ef9a97ce7f219c0efa
msgid "Simple tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:725
# ae0fe7a35fdc4272bfaa5cb091abdac1
msgid "Many template tags take a number of arguments -- strings or template variables -- and return a string after doing some processing based solely on the input arguments and some external information. For example, the ``current_time`` tag we wrote above is of this variety: we give it a format string, it returns the time as a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:731
# f0d2dac4a9b2488a99957f292b3b71d4
msgid "To ease the creation of these types of tags, Django provides a helper function, ``simple_tag``. This function, which is a method of ``django.template.Library``, takes a function that accepts any number of arguments, wraps it in a ``render`` function and the other necessary bits mentioned above and registers it with the template system."
msgstr ""

#: ../../howto/custom-template-tags.txt:737
#: ../../howto/custom-template-tags.txt:1077
# ef4202348e694e5497e4251fd3dac6f2
# 56dee62a2670415d87f13433cd3e2e90
msgid "Our earlier ``current_time`` function could thus be written like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:746
#: ../../howto/custom-template-tags.txt:1086
# c5980856fd704dab995b3ca536560d92
# 4210c01a044a497d99182c813f710c00
msgid "The decorator syntax also works:"
msgstr ""

#: ../../howto/custom-template-tags.txt:754
# 028f50d835e34c9ba7786f9ab74201d6
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:756
# 1db8acc63a984bef84f1f72d0d11cb80
msgid "Checking for the required number of arguments, etc., has already been done by the time our function is called, so we don't need to do that."
msgstr ""

#: ../../howto/custom-template-tags.txt:758
# 10126d8418674cb88f2f71276db78817
msgid "The quotes around the argument (if any) have already been stripped away, so we just receive a plain string."
msgstr ""

#: ../../howto/custom-template-tags.txt:760
# 84faa69a9bc047099946c6afa4d182c9
msgid "If the argument was a template variable, our function is passed the current value of the variable, not the variable itself."
msgstr ""

#: ../../howto/custom-template-tags.txt:763
#: ../../howto/custom-template-tags.txt:1102
# 9ec9f94196914971baeb5b0cc66f8bdb
# 16b06dbcebff4be0b3317366aae1c633
msgid "If your template tag needs to access the current context, you can use the ``takes_context`` argument when registering your tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:775
#: ../../howto/custom-template-tags.txt:1114
# 0d468552f36b43fdb3173d400051cac9
# aedc218db892462dbcd6bb1c149baf9c
msgid "Or, using decorator syntax:"
msgstr ""

#: ../../howto/custom-template-tags.txt:784
#: ../../howto/custom-template-tags.txt:1123
# 7a80e44773694cef9741f17d2d40ec6a
# bb9c1270e1c44babbd9eb2ff82829d3a
msgid "For more information on how the ``takes_context`` option works, see the section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:789
# 2d1a355776234620bf8a0a3167aa25d1
msgid "If you need to rename your tag, you can provide a custom name for it:"
msgstr ""

#: ../../howto/custom-template-tags.txt:801
# c6c6833c8810415db9f404b4f0be58e1
msgid "``simple_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:813
#: ../../howto/custom-template-tags.txt:969
#: ../../howto/custom-template-tags.txt:1138
# 2c59657747b64b7abdb6b72042792189
# fe329cf8fe694ee7839f560fd6e4c749
# 1eed904f6ee643c1a83cf2909fc1173b
msgid "Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (\"``=``\") and must be provided after the positional arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:825
# 609be950833f4d7d87dc22c28d93e4d4
msgid "Inclusion tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:827
# b16c59002c8f4acbb5381fc520d74b4d
msgid "Another common type of template tag is the type that displays some data by rendering *another* template. For example, Django's admin interface uses custom template tags to display the buttons along the bottom of the \"add/change\" form pages. Those buttons always look the same, but the link targets change depending on the object being edited -- so they're a perfect case for using a small template that is filled with details from the current object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:835
# 970aeb97db1d4cc1808133c7712b2238
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:837
# 2b905ff1d1934c4795e67b1812f18370
msgid "Writing inclusion tags is probably best demonstrated by example. Let's write a tag that outputs a list of choices for a given ``Poll`` object, such as was created in the :ref:`tutorials <creating-models>`. We'll use the tag like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:845
# a4b5a8b402e44187b4b53efd1249a4f3
msgid "...and the output will be something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:855
# cf7bc9713e284dc59df6a1dddf71801c
msgid "First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:866
# 67514fcd95ad4dde868e05c5dc22238c
msgid "Next, create the template used to render the tag's output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very simple:"
msgstr ""

#: ../../howto/custom-template-tags.txt:878
# 845ca61b28cd4fdfb7bd7b8cb45553f1
msgid "Now, create and register the inclusion tag by calling the ``inclusion_tag()`` method on a ``Library`` object. Following our example, if the above template is in a file called ``results.html`` in a directory that's searched by the template loader, we'd register the tag like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:899
# 9e7d4224f30c46dca94b6ae9828c7897
msgid "As always, decorator syntax works as well, so we could have written:"
msgstr ""

#: ../../howto/custom-template-tags.txt:907
# 0ed507f005cd43b1a784f33a0401af06
msgid "...when first creating the function."
msgstr ""

#: ../../howto/custom-template-tags.txt:909
# 107665a2a37243349af92e62339c77bf
msgid "Sometimes, your inclusion tags might require a large number of arguments, making it a pain for template authors to pass in all the arguments and remember their order. To solve this, Django provides a ``takes_context`` option for inclusion tags. If you specify ``takes_context`` in creating a template tag, the tag will have no required arguments, and the underlying Python function will have one argument -- the template context as of when the tag was called."
msgstr ""

#: ../../howto/custom-template-tags.txt:916
# 83e4623ce08c45319131568607be628d
msgid "For example, say you're writing an inclusion tag that will always be used in a context that contains ``home_link`` and ``home_title`` variables that point back to the main page. Here's what the Python function would look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:931
# ff3849c2a2f64b55bd3b69d3539d644b
msgid "(Note that the first parameter to the function *must* be called ``context``.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:933
# 2db9e76f8819441b86b641d1cfdc5ad5
msgid "In that ``register.inclusion_tag()`` line, we specified ``takes_context=True`` and the name of the template. Here's what the template ``link.html`` might look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:941
# e6633d291a5c4936924a8d42044adccb
msgid "Then, any time you want to use that custom tag, load its library and call it without any arguments, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:948
# 1c4c4cfa0f7e4124a2d59f1ccf243be4
msgid "Note that when you're using ``takes_context=True``, there's no need to pass arguments to the template tag. It automatically gets access to the context."
msgstr ""

#: ../../howto/custom-template-tags.txt:951
# 7841805b41a245d2bd6bdc731d6864f4
msgid "The ``takes_context`` parameter defaults to ``False``. When it's set to ``True``, the tag is passed the context object, as in this example. That's the only difference between this case and the previous ``inclusion_tag`` example."
msgstr ""

#: ../../howto/custom-template-tags.txt:957
# df763f6b5f51461a9c7037969715e2fd
msgid "``inclusion_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:979
# d234d072e5dc4220b1053e761fd09daa
msgid "Setting a variable in the context"
msgstr ""

#: ../../howto/custom-template-tags.txt:981
# cc36ada46e7a4312bcc19f57e9bd1061
msgid "The above examples simply output a value. Generally, it's more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create."
msgstr ""

#: ../../howto/custom-template-tags.txt:985
# cd766af050894ab79491b4dff095350f
msgid "To set a variable in the context, just use dictionary assignment on the context object in the ``render()`` method. Here's an updated version of ``CurrentTimeNode`` that sets a template variable ``current_time`` instead of outputting it:"
msgstr ""

#: ../../howto/custom-template-tags.txt:999
# 668deb60487a4ec08426b60e6f1129f7
msgid "Note that ``render()`` returns the empty string. ``render()`` should always return string output. If all the template tag does is set a variable, ``render()`` should return the empty string."
msgstr ""

#: ../../howto/custom-template-tags.txt:1003
# 37d83846ff984e628fc3085ec6be8c74
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1011
# 2dde848778084220836ff95e4bb8248b
msgid "Any variable set in the context will only be available in the same ``block`` of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don't conflict with context in other blocks."
msgstr ""

#: ../../howto/custom-template-tags.txt:1016
# 2e017f68500944518feae78197b859d6
msgid "But, there's a problem with ``CurrentTimeNode2``: The variable name ``current_time`` is hard-coded. This means you'll need to make sure your template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% current_time %}`` will blindly overwrite that variable's value. A cleaner solution is to make the template tag specify the name of the output variable, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1028
# e808eb60025b455b8d3b5c3732e7bffb
msgid "To do that, you'll need to refactor both the compilation function and ``Node`` class, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1057
# ac37607b50ed46d1909015dbeee701a2
msgid "The difference here is that ``do_current_time()`` grabs the format string and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1060
# 34a60e1ce60f4d7590e1a00bc88ff16f
msgid "Finally, if you only need to have a simple syntax for your custom context-updating template tag, you might want to consider using an :ref:`assignment tag <howto-custom-template-tags-assignment-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:1067
# 45394e4546aa444f958fbb5148d9fb7c
msgid "Assignment tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:1071
# ef926f77988541b6a5089bb205dcf8b7
msgid "To ease the creation of tags setting a variable in the context, Django provides a helper function, ``assignment_tag``. This function works the same way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except that it stores the tag's result in a specified context variable instead of directly outputting it."
msgstr ""

#: ../../howto/custom-template-tags.txt:1094
# b19db7097cb4400faedcaa3d7b35858c
msgid "You may then store the result in a template variable using the ``as`` argument followed by the variable name, and output it yourself where you see fit:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1126
# 593bd8af946f4521a11ca5ebf1808f41
msgid "``assignment_tag`` functions may accept any number of positional or keyword arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1148
# 1a8233029c814996b87510359e57f398
msgid "Parsing until another block tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:1150
# 8ac50119033a4342b50aef8aae7df8b9
msgid "Template tags can work in tandem. For instance, the standard :ttag:`{% comment %}<comment>` tag hides everything until ``{% endcomment %}``. To create a template tag such as this, use ``parser.parse()`` in your compilation function."
msgstr ""

#: ../../howto/custom-template-tags.txt:1155
# 40930ff84c4c44b3a8255ca42d2dc915
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1169
# 9ce4e0bdb9404dfe87f3bfbf6be1b1ba
msgid "The actual implementation of :ttag:`{% comment %}<comment>` is slightly different in that it allows broken template tags to appear between ``{% comment %}`` and ``{% endcomment %}``. It does so by calling ``parser.skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` followed by ``parser.delete_first_token()``, thus avoiding the generation of a node list."
msgstr ""

#: ../../howto/custom-template-tags.txt:1176
# fc349dcc0d6c49e5a2b04d16e8469e29
msgid "``parser.parse()`` takes a tuple of names of block tags ''to parse until''. It returns an instance of ``django.template.NodeList``, which is a list of all ``Node`` objects that the parser encountered ''before'' it encountered any of the tags named in the tuple."
msgstr ""

#: ../../howto/custom-template-tags.txt:1181
# 08e5849298b24238830f03b4c655a167
msgid "In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, ``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` themselves."
msgstr ""

#: ../../howto/custom-template-tags.txt:1186
# c379ea3fc7b64d00947fb9f33fdd8353
msgid "After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the ``{% endcomment %}`` tag, so the code needs to explicitly call ``parser.delete_first_token()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1190
# 4adc1714516f44a0914de8eddcef1e5d
msgid "``CommentNode.render()`` simply returns an empty string. Anything between ``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

#: ../../howto/custom-template-tags.txt:1194
# c18da3a31ab74d10bf1229954cf7b86c
msgid "Parsing until another block tag, and saving contents"
msgstr ""

#: ../../howto/custom-template-tags.txt:1196
# 87b8620371544152a067443d025a3a55
msgid "In the previous example, ``do_comment()`` discarded everything between ``{% comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible to do something with the code between block tags."
msgstr ""

#: ../../howto/custom-template-tags.txt:1200
# 997d38627dae44f4a396c84043767f7b
msgid "For example, here's a custom template tag, ``{% upper %}``, that capitalizes everything between itself and ``{% endupper %}``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1203
# ee475377074048968e87a19d6c6012af
msgid "Usage:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1209
# 58de64862e324816b6962667db283d1e
msgid "As in the previous example, we'll use ``parser.parse()``. But this time, we pass the resulting ``nodelist`` to the ``Node``:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1226
# 15175ebd967e41f29400c346387d5351
msgid "The only new concept here is the ``self.nodelist.render(context)`` in ``UpperNode.render()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1229
# 2e3321ea7de241a5af7ccb469f986d12
msgid "For more examples of complex rendering, see the source code for :ttag:`{% if %}<if>`, :ttag:`{% for %}<for>`, :ttag:`{% ifequal %}<ifequal>` or :ttag:`{% ifchanged %}<ifchanged>`. They live in ``django/template/defaulttags.py``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:3
# 24ba80b87f1243919c3251849d01f3af
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:7
# 2779d29f8df44f3ba5744b21aca8fc4f
msgid "Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred deployment platform for Django, many people use shared hosting, on which protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:13
# 3e88bd7fdb554a97928a86542d54846c
msgid "This document primarily focuses on FastCGI. Other protocols, such as SCGI and AJP, are also supported, through the ``flup`` Python package. See the Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:17
# ea9cc28bbf7f4b80a98f7a882089ea6d
msgid "Essentially, FastCGI is an efficient way of letting an external application serve pages to a Web server. The Web server delegates the incoming Web requests (via a socket) to FastCGI, which executes the code and passes the response back to the Web server, which, in turn, passes it back to the client's Web browser."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:22
# d782f785a0004785a1271a3ffa908ded
msgid "Like WSGI, FastCGI allows code to stay in memory, allowing requests to be served with no startup time. While e.g. :doc:`mod_wsgi</howto/deployment/wsgi/modwsgi>` can either be configured embedded in the Apache Web server process or as a separate daemon process, a FastCGI process never runs inside the Web server process, always in a separate, persistent process."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:33
# 298e9775dd3341baaa33bda08de3c7e6
msgid "The traditional ``mod_*`` arrangements in Apache embed various scripting languages (most notably PHP, Python and Perl) inside the process space of your Web server. Although this lowers startup time -- because code doesn't have to be read off disk for every request -- it comes at the cost of memory use."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:39
# e52ae82531634b40947b500bd32aaec9
msgid "Due to the nature of FastCGI, it's even possible to have processes that run under a different user account than the Web server process. That's a nice security benefit on shared systems, because it means you can secure your code from other users."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:45
# a02a4069002849fe99f7dc0eabd5463d
msgid "Prerequisite: flup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:47
# 7e4a8f0a12794cd1b53ea6b434200894
msgid "Before you can start using FastCGI with Django, you'll need to install flup_, a Python library for dealing with FastCGI. Version 0.5 or newer should work fine."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:53
# 26bc8bc5f3de45489377e399f51eebf7
msgid "Starting your FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:55
# 0045012c031647a88dc6df664cebda71
msgid "FastCGI operates on a client-server model, and in most cases you'll be starting the FastCGI process on your own. Your Web server (be it Apache, lighttpd, or otherwise) only contacts your Django-FastCGI process when the server needs a dynamic page to be loaded. Because the daemon is already running with the code in memory, it's able to serve the response very quickly."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:63
# d29a8edcbe574a0cab688ff369a8fa50
msgid "If you're on a shared hosting system, you'll probably be forced to use Web server-managed FastCGI processes. See the section below on running Django with Web server-managed processes for more information."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:67
# 1237766a160945e0bd495cb10449c497
msgid "A Web server can connect to a FastCGI server in one of two ways: It can use either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can use a TCP socket. What you choose is a manner of preference; a TCP socket is usually easier due to permissions issues."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:72
# 7a2c93ce69634a239972458e94de3e19
msgid "To start your server, first change into the directory of your project (wherever your :doc:`manage.py </ref/django-admin>` is), and then run the :djadmin:`runfcgi` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:78
# 720b6ce416a4454bb340752d3c7ff363
msgid "If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll display a list of all the available options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:81
# 8098e5a57728401ea885aa5e67a4b3f7
msgid "You'll need to specify either a :djadminopt:`socket`, a :djadminopt:`protocol` or both :djadminopt:`host` and :djadminopt:`port`. Then, when you set up your Web server, you'll just need to point it at the host/port or socket you specified when starting the FastCGI server. See the examples_, below."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:87
# 6fb240bd9092464c89e29e999eaf8f0b
msgid "Protocols"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:89
# c114374fafe948d5a036dd60bb900184
msgid "Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> <protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>`` may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:103
# f5e3bce3b7bb4c23b4448fb120a56727
msgid "Examples"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:105
# ce4c3d25c9854b7493bf24ad1ceb2e1f
msgid "Running a threaded server on a TCP port::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:109
# acfec1bba5194f2bb218f76f23831f45
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:115
# ca6269e4071846a0a533e9bb7bcb8760
msgid "Django's default umask requires that the webserver and the Django fastcgi process be run with the same group **and** user. For increased security, you can run them under the same group but as different users. If you do this, you will need to set the umask to 0002 using the ``umask`` argument to ``runfcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:121
# 4d07d5c30bd3478093045cb64ddcbaf0
msgid "Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:126
# 2bfc1bd96e4540cc8a326121625da4ca
msgid "Stopping the FastCGI daemon"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:128
# 563d1b47c5e14626b3b688075dca62b7
msgid "If you have the process running in the foreground, it's easy enough to stop it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. However, when you're dealing with background processes, you'll need to resort to the Unix ``kill`` command."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:133
# e2a5c2a00b0d49128beb2583856b2266
msgid "If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you can kill the running FastCGI daemon like this::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:138
# ae25cbb740e14a90b23fad9ac31113d2
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:140
# 24219c86d09c48a2b2491e721a4bd9e1
msgid "To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:160
# f8727fe4f88e4cba887985bdca359594
msgid "Apache setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:162
# 6169640ff54941dbbd67cab06b45516a
msgid "To use Django with Apache and FastCGI, you'll need Apache installed and configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache documentation for instructions."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:166
# bcc627a52cbb4350ac18dc2a8fc5e62d
msgid "Once you've got that set up, point Apache at your Django FastCGI instance by editing the ``httpd.conf`` (Apache configuration) file. You'll need to do two things:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:170
# e7880e459f0a4fb6a92daaec8f6b53df
msgid "Use the ``FastCGIExternalServer`` directive to specify the location of your FastCGI server."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:172
# bffdbedc360541a1a4cfb4501fcbaf31
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:177
# 9e261f8ebe0f49fc947f3b0bc8f9f9fa
msgid "Specifying the location of the FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:179
# 540129ad674942f79c2848d4306e18ce
msgid "The ``FastCGIExternalServer`` directive tells Apache how to find your FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:191
# 484110bcba244292a347ee8007b34365
msgid "In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't actually have to exist. It's just a URL used by the Web server internally -- a hook for signifying which requests at a URL should be handled by FastCGI. (More on this in the next section.)"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:199
# b644bc3058e84558b5f3a15495db1628
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:201
# ae1bb1ba8ad142a997c0b9e14cf7b233
msgid "The second step is telling Apache to use FastCGI for URLs that match a certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs to ``mysite.fcgi`` (or whatever you specified in the ``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:206
# 24546b27e87448308136c56ecaae91b0
msgid "In this example, we tell Apache to use FastCGI to handle any request that doesn't represent a file on the filesystem and doesn't start with ``/media/``. This is probably the most common case, if you're using Django's admin site:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:224
# 50205dc8d32944fe93d8000272d04f32
msgid "Django will automatically use the pre-rewrite version of the URL when constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar methods)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:229
# a109b5f76c8a4db7852a34db224705e9
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:231
# ce53ab708f424e37ad877b8d28726c98
msgid "Another way to serve applications through FastCGI is by using Apache's `mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI applications differently in that it manages the spawning of worker processes by itself and doesn't offer something like ``FastCGIExternalServer``. This means that the configuration looks slightly different."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:237
# cbba8ca33ff74a819a017511b67b104a
msgid "In effect, you have to go the way of adding a script handler similar to what is described later on regarding running Django in a :ref:`shared-hosting environment <apache_shared_hosting>`. For further details please refer to the `mod_fcgid reference`_"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:246
# abad0d8d215a4c1595df497e99e3806d
msgid "lighttpd setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:248
# 64bfac061c9e47eb844f0c2bcb253540
msgid "lighttpd_ is a lightweight Web server commonly used for serving static files. It supports FastCGI natively and, thus, is a good choice for serving both static and dynamic pages, if your site doesn't have any Apache-specific needs."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:254
# e1690795ffd5402cb6c1e166be961089
msgid "Make sure ``mod_fastcgi`` is in your modules list, somewhere after ``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:258
# 6e28bfaad36146038744997a081f28f5
msgid "Add the following to your lighttpd config file:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:285
# 7ebbedefe22e4fe8b29158f235d4be28
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:287
# b22f8d2214204a0d8f5327cb607c6c60
msgid "lighttpd lets you use \"conditional configuration\" to allow configuration to be customized per host. To specify multiple FastCGI sites, just add a conditional block around your FastCGI config for each site::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:309
# 98ae264b5c484071937c7ef61bb2367e
msgid "You can also run multiple Django installations on the same site simply by specifying multiple entries in the ``fastcgi.server`` directive. Add one FastCGI host for each."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:314
# d6f774b702264067bf6b2fdea2426288
msgid "Cherokee setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:316
# 9e8110c7f31f4385b4feca82e8579717
msgid "Cherokee is a very fast, flexible and easy to configure Web Server. It supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI, TLS and SSL encrypted connections, Virtual hosts, Authentication, on the fly encoding, Load Balancing, Apache compatible log files, Data Base Balancer, Reverse HTTP Proxy and much more."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:322
# ddd6ce8b9e6144288d6c6963e4cd081c
msgid "The Cherokee project provides a documentation to `setting up Django`_ with Cherokee."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:329
# a9689250994c4c30bc253047ad66436c
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:331
# 96b72ea4263a4612a6bb2045999f0907
msgid "Many shared-hosting providers don't allow you to run your own server daemons or edit the ``httpd.conf`` file. In these cases, it's still possible to run Django using Web server-spawned processes."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:337
# e8bc23a2906e491e84347b76ed2140a3
msgid "If you're using Web server-spawned processes, as explained in this section, there's no need for you to start the FastCGI server on your own. Apache will spawn a number of processes, scaling as it needs to."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:341
# 3fa1ffe6a8d74e5894e05893da7e3b5e
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:350
# 9f56b1d308b248cf80280c80719ff136
msgid "Then, create a small script that tells Apache how to spawn your FastCGI program. Create a file ``mysite.fcgi`` and place it in your Web directory, and be sure to make it executable:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:371
# 969a9ad110f6425686549b88c552d80d
msgid "This works if your server uses mod_fastcgi. If, on the other hand, you are using mod_fcgid the setup is mostly the same except for a slight change in the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have to add a fcgid-handler:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:384
# e569a7d0252b4b4b83488d439220e54d
msgid "Restarting the spawned server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:386
# 209f598cac0645aebcb05f1d09a590bd
msgid "If you change any Python code on your site, you'll need to tell FastCGI the code has changed. But there's no need to restart Apache in this case. Rather, just reupload ``mysite.fcgi``, or edit the file, so that the timestamp on the file will change. When Apache sees the file has been updated, it will restart your Django application for you."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:392
# 007240882e304635937dd0db4cd314cd
msgid "If you have access to a command shell on a Unix system, you can accomplish this easily by using the ``touch`` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:398
# dd103ded7c404716aab19470a5c4b1f6
msgid "Serving admin media files"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:400
# c981bd6ef8e8452aa71a38b4450373b1
msgid "Regardless of the server and configuration you eventually decide to use, you will also need to give some thought to how to serve the admin media files. The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` documentation is also applicable in the setups detailed above."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:406
# fde51bfad3504187a97f2492f24e2123
msgid "Forcing the URL prefix to a particular value"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:408
# ef421c5a09424bba9f18879fa34c6827
msgid "Because many of these fastcgi-based solutions require rewriting the URL at some point inside the Web server, the path information that Django sees may not resemble the original URL that was passed in. This is a problem if the Django application is being served from under a particular prefix and you want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, rather than the rewritten version, which might contain, for example, ``mysite.fcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:415
# e78e94a1bd3243589b1f40908f9007e2
msgid "Django makes a good attempt to work out what the real script name prefix should be. In particular, if the Web server sets the ``SCRIPT_URL`` (specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few servers, including Apache + mod_rewrite in some situations), Django will work out the original prefix automatically."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:421
# 59608f2bfe504e82bcc9e4c48bc9d1ac
msgid "In the cases where Django cannot work out the prefix correctly and where you want the original value to be used in URLs, you can set the :setting:`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This sets the script name uniformly for every URL served via that settings file. Thus you'll need to use different settings files if you want different sets of URLs to have different script names in this case, but that is a rare situation."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:428
# 34ae8d551fc248a5ac436c14f11ff566
msgid "As an example of how to use it, if your Django configuration is serving all of the URLs under ``'/'`` and you wanted to use this setting, you would set ``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

#: ../../howto/deployment/index.txt:2
# 8458854740a645bb8f23a4ac624ebfb5
msgid "Deploying Django"
msgstr ""

#: ../../howto/deployment/index.txt:4
# 97213661fe3f4b74b72ff70651f2c13b
msgid "Django's chock-full of shortcuts to make Web developer's lives easier, but all those tools are of no use if you can't easily deploy your sites. Since Django's inception, ease of deployment has been a major goal. There's a number of good ways to easily deploy Django:"
msgstr ""

#: ../../howto/deployment/index.txt:15
# 7b8fc0ce55d14b949135e7b23ccee3a7
msgid "If you're new to deploying Django and/or Python, we'd recommend you try :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll be the easiest, fastest, and most stable deployment choice."
msgstr ""

#: ../../howto/deployment/index.txt:21
# 738d4199d2c64ac9bae1a674607b3b1e
msgid "`Chapter 12 of the Django Book (second edition)`_ discusses deployment and especially scaling in more detail. However, note that this edition was written against Django version 1.1 and has not been updated since `mod_python` was first deprecated, then completely removed in Django 1.5."
msgstr ""

#: ../../howto/deployment/modpython.txt:3
# 05325832591b468499bbb22a4f18c549
msgid "How to use Django with Apache and mod_python"
msgstr ""

#: ../../howto/deployment/modpython.txt:7
# 2403664b9d774fa89386a465e309f39d
msgid "Support for mod_python has been deprecated, and will be removed in Django 1.5. If you are configuring a new deployment, you are strongly encouraged to consider using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` or any of the other :doc:`supported servers </howto/deployment/index>`."
msgstr ""

#: ../../howto/deployment/modpython.txt:15
# b379d3357e6646fe941b7910b7cf638d
msgid "The `mod_python`_ module for Apache_ can be used to deploy Django to a production server, although it has been mostly superseded by the simpler :doc:`mod_wsgi deployment option </howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../howto/deployment/modpython.txt:19
# 69353bff81bb40108b1777121b598361
msgid "mod_python is similar to (and inspired by) `mod_perl`_ : It embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements."
msgstr ""

#: ../../howto/deployment/modpython.txt:24
# f23278e628864f45bac81e0390125d5d
msgid "Django requires Apache 2.x and mod_python 3.x, and you should use Apache's `prefork MPM`_, as opposed to the `worker MPM`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:29
# ab221a9abcfa4dc1bd746d8dbaffb701
msgid "Apache is a big, complex animal, and this document only scratches the surface of what Apache can do. If you need more advanced information about Apache, there's no better source than `Apache's own official documentation`_"
msgstr ""

#: ../../howto/deployment/modpython.txt:34
# 29fa8eeb9051445eb1191537bbab92c1
msgid "You may also be interested in :doc:`How to use Django with FastCGI, SCGI, or AJP </howto/deployment/fastcgi>`."
msgstr ""

#: ../../howto/deployment/modpython.txt:45
#: ../../howto/deployment/wsgi/modwsgi.txt:25
# 8c16ff8cbbcf470596d81dddd3a110d8
# c5f098ed5a5a40b5aae4af3f5ad43c31
msgid "Basic configuration"
msgstr ""

#: ../../howto/deployment/modpython.txt:47
# 7a40e75610b64a7ab19d88be62e07001
msgid "To configure Django with mod_python, first make sure you have Apache installed, with the mod_python module activated."
msgstr ""

#: ../../howto/deployment/modpython.txt:50
# 0ee9eb2fa1a44a28bd57cf5decfa8b58
msgid "Then edit your ``httpd.conf`` file and add the following::"
msgstr ""

#: ../../howto/deployment/modpython.txt:60
# 910f137d83f944c2b3a3a63e65be63f6
msgid "...and replace ``mysite.settings`` with the Python import path to your Django project's settings file."
msgstr ""

#: ../../howto/deployment/modpython.txt:63
# 9eb7ccb84a274487a37c4829beee3a74
msgid "This tells Apache: \"Use mod_python for any URL at or under '/mysite/', using the Django mod_python handler.\" It passes the value of :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` so mod_python knows which settings to use."
msgstr ""

#: ../../howto/deployment/modpython.txt:67
# 7a99cb6a31b94510ab3d0c28a73c9443
msgid "Because mod_python does not know we are serving this site from underneath the ``/mysite/`` prefix, this value needs to be passed through to the mod_python handler in Django, via the ``PythonOption django.root ...`` line. The value set on that line (the last item) should match the string given in the ``<Location ...>`` directive. The effect of this is that Django will automatically strip the ``/mysite`` string from the front of any URLs before matching them against your URLconf patterns. If you later move your site to live under ``/mysite2``, you will not have to change anything except the ``django.root`` option in the config file."
msgstr ""

#: ../../howto/deployment/modpython.txt:77
# 7f31e4fd18d74dddb9c0055ae4a820d0
msgid "When using ``django.root`` you should make sure that what's left, after the prefix has been removed, begins with a slash. Your URLconf patterns that are expecting an initial slash will then work correctly. In the above example, since we want to send things like ``/mysite/admin/`` to ``/admin/``, we need to remove the string ``/mysite`` from the beginning, so that is the ``django.root`` value. It would be an error to use ``/mysite/`` (with a trailing slash) in this case."
msgstr ""

#: ../../howto/deployment/modpython.txt:85
# d891b0ea1eb34004bdd3aea3f6f2a561
msgid "Note that we're using the ``<Location>`` directive, not the ``<Directory>`` directive. The latter is used for pointing at places on your filesystem, whereas ``<Location>`` points at places in the URL structure of a Web site. ``<Directory>`` would be meaningless here."
msgstr ""

#: ../../howto/deployment/modpython.txt:90
# 3ae96723e20c40b381fdb8ff80bbb9b6
msgid "Also, if your Django project is not on the default ``PYTHONPATH`` for your computer, you'll have to tell mod_python where your project can be found:"
msgstr ""

#: ../../howto/deployment/modpython.txt:104
# 07dd889dae6f4d0fb3c9bcfb1de2092a
msgid "The value you use for ``PythonPath`` should include the parent directories of all the modules you are going to import in your application. It should also include the parent directory of the :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` location. This is exactly the same situation as setting the Python path for interactive usage. Whenever you try to import something, Python will run through all the directories in ``sys.path`` in turn, from first to last, and try to import from each directory until one succeeds."
msgstr ""

#: ../../howto/deployment/modpython.txt:112
# e5c64149a4f348d3861d3e6da573cf3e
msgid "Make sure that your Python source files' permissions are set such that the Apache user (usually named ``apache`` or ``httpd`` on most systems) will have read access to the files."
msgstr ""

#: ../../howto/deployment/modpython.txt:116
# a7dfeb9717754a689fd763952434253d
msgid "An example might make this clearer. Suppose you have some applications under ``/usr/local/django-apps/`` (for example, ``/usr/local/django-apps/weblog/`` and so forth), your settings file is at ``/var/www/mysite/settings.py`` and you have specified :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` as in the above example. In this case, you would need to write your ``PythonPath`` directive as::"
msgstr ""

#: ../../howto/deployment/modpython.txt:125
# b01f0a6bb41c4099b71d77741b48d55a
msgid "With this path, ``import weblog`` and ``import mysite.settings`` will both work. If you had ``import blogroll`` in your code somewhere and ``blogroll`` lived under the ``weblog/`` directory, you would *also* need to add ``/usr/local/django-apps/weblog/`` to your ``PythonPath``. Remember: the **parent directories** of anything you import directly must be on the Python path."
msgstr ""

#: ../../howto/deployment/modpython.txt:134
# 2f66f3ee9af640078ba67f3072f868ef
msgid "If you're using Windows, we still recommended that you use forward slashes in the pathnames, even though Windows normally uses the backslash character as its native separator. Apache knows how to convert from the forward slash format to the native format, so this approach is portable and easier to read. (It avoids tricky problems with having to double-escape backslashes.)"
msgstr ""

#: ../../howto/deployment/modpython.txt:141
# 8d7b5e726b804eae81db51e35fc5d5c4
msgid "This is valid even on a Windows system::"
msgstr ""

#: ../../howto/deployment/modpython.txt:145
# 89edc12d336748a1bfc2526ffbfe763d
msgid "You can also add directives such as ``PythonAutoReload Off`` for performance. See the `mod_python documentation`_ for a full list of options."
msgstr ""

#: ../../howto/deployment/modpython.txt:148
# a8a569621d9d4db58606dd469533006c
msgid "Note that you should set ``PythonDebug Off`` on a production server. If you leave ``PythonDebug On``, your users would see ugly (and revealing) Python tracebacks if something goes wrong within mod_python."
msgstr ""

#: ../../howto/deployment/modpython.txt:152
# f619a79156d74fd6ab0b1fd55b21a899
msgid "Restart Apache, and any request to ``/mysite/`` or below will be served by Django. Note that Django's URLconfs won't trim the \"/mysite/\" -- they get passed the full URL."
msgstr ""

#: ../../howto/deployment/modpython.txt:156
# 22508cc95f0548a6a2075ab50f1ab7de
msgid "When deploying Django sites on mod_python, you'll need to restart Apache each time you make changes to your Python code."
msgstr ""

#: ../../howto/deployment/modpython.txt:162
# df0810a18aa4406a801eba77ed7e3531
msgid "Multiple Django installations on the same Apache"
msgstr ""

#: ../../howto/deployment/modpython.txt:164
# 029a62ce0c1e4bc996e87485a776d63d
msgid "It's entirely possible to run multiple Django installations on the same Apache instance. Just use ``VirtualHost`` for that, like so::"
msgstr ""

#: ../../howto/deployment/modpython.txt:181
# a4437b1eb7ee45caa1eaedaff3032f9e
msgid "If you need to put two Django installations within the same ``VirtualHost`` (or in different ``VirtualHost`` blocks that share the same server name), you'll need to take a special precaution to ensure mod_python's cache doesn't mess things up. Use the ``PythonInterpreter`` directive to give different ``<Location>`` directives separate interpreters::"
msgstr ""

#: ../../howto/deployment/modpython.txt:201
# 2be8b1a01f96482c9633d4e6d3c2c9f7
msgid "The values of ``PythonInterpreter`` don't really matter, as long as they're different between the two ``Location`` blocks."
msgstr ""

#: ../../howto/deployment/modpython.txt:205
# c4810cbb745c4c85a62493f1c5e15941
msgid "Running a development server with mod_python"
msgstr ""

#: ../../howto/deployment/modpython.txt:207
# ecc271d7d3764e4a9c12680081b803d9
msgid "If you use mod_python for your development server, you can avoid the hassle of having to restart the server each time you make code changes. Just set ``MaxRequestsPerChild 1`` in your ``httpd.conf`` file to force Apache to reload everything for each request. But don't do that on a production server, or we'll revoke your Django privileges."
msgstr ""

#: ../../howto/deployment/modpython.txt:213
# cf23bc9bed93445a8ba8c6d8cf39fd57
msgid "If you're the type of programmer who debugs using scattered ``print`` statements, note that output to ``stdout`` will not appear in the Apache log and can even `cause response errors`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:219
# efcdd2051c9549e79e9257875776f9bb
msgid "If you have the need to print debugging information in a mod_python setup, you have a few options. You can print to ``stderr`` explicitly, like so::"
msgstr ""

#: ../../howto/deployment/modpython.txt:225
# b5d48cd01cc74218bfd05ea1e68605e9
msgid "(note that ``stderr`` is buffered, so calling ``flush`` is necessary if you wish debugging information to be displayed promptly.)"
msgstr ""

#: ../../howto/deployment/modpython.txt:228
# 2660267c854a4c6f9db99b1490736532
msgid "A more compact approach is to use an assertion::"
msgstr ""

#: ../../howto/deployment/modpython.txt:232
# e66ab6f7e77442dab367800f35a8eeec
msgid "Another alternative is to add debugging information to the template of your page."
msgstr ""

#: ../../howto/deployment/modpython.txt:235
# a1eb23efe1ef4a7d892418c532bdb9f9
msgid "Serving media files"
msgstr ""

#: ../../howto/deployment/modpython.txt:237
# e2c6ad1f84cc43d585b97d9afd1116cc
msgid "Django doesn't serve media files itself; it leaves that job to whichever Web server you choose."
msgstr ""

#: ../../howto/deployment/modpython.txt:240
#: ../../howto/deployment/wsgi/modwsgi.txt:114
# c982af20d3f747b4b1ce3dc8c67630a2
# 7d29d8de3e9045c68ec79e7804b721d0
msgid "We recommend using a separate Web server -- i.e., one that's not also running Django -- for serving media. Here are some good choices:"
msgstr ""

#: ../../howto/deployment/modpython.txt:243
#: ../../howto/deployment/wsgi/modwsgi.txt:117
#: ../../howto/static-files.txt:387
# 55326791e58d454bb8f821e0cd385c5b
# 2f6ac03595c045a38b9bfa3ebda6925f
# 8606e72940574bafb29e4add97d32a36
msgid "lighttpd_"
msgstr ""

#: ../../howto/deployment/modpython.txt:244
#: ../../howto/deployment/wsgi/modwsgi.txt:118
#: ../../howto/static-files.txt:388
# fc60b5a00f734e358c990200ad91d3cc
# 0faaf6cad9914b5cabb077d10689d08a
# 94653f3658564bd1bcd776e26c395aa0
msgid "Nginx_"
msgstr ""

#: ../../howto/deployment/modpython.txt:245
#: ../../howto/deployment/wsgi/modwsgi.txt:119
#: ../../howto/static-files.txt:389
# 8869188f24e74c87964f003e8f7ebe60
# 7710390efaa64083825b951065e981a4
# 7c2ec6297da64fe3a02cad018b208b68
msgid "TUX_"
msgstr ""

#: ../../howto/deployment/modpython.txt:246
#: ../../howto/deployment/wsgi/modwsgi.txt:120
#: ../../howto/static-files.txt:391
# 6bc0335ed37c483785dc27309fe59200
# f60b9d6c2af94e6dada05b585f58c69d
# e6bc58480d5543d48f64d88ebbc7b933
msgid "A stripped-down version of Apache_"
msgstr ""

#: ../../howto/deployment/modpython.txt:247
#: ../../howto/deployment/wsgi/modwsgi.txt:121
#: ../../howto/static-files.txt:390
# 7abeb47471e84a77bb4c376dcc127bbc
# d4a667150d294908a70df891b81c8569
# c508eaa3a67b44798ade02cad408435b
msgid "Cherokee_"
msgstr ""

#: ../../howto/deployment/modpython.txt:249
# 790bbf5b1ab449e38d37fa99ba85396f
msgid "If, however, you have no option but to serve media or static files on the same Apache ``VirtualHost`` as Django, here's how you can turn off mod_python for a particular part of the site::"
msgstr ""

#: ../../howto/deployment/modpython.txt:257
# d11792ef8e134448a34366bcc85bb13c
msgid "Just change ``Location`` to the root URL of your media files. You can also use ``<LocationMatch>`` to match a regular expression."
msgstr ""

#: ../../howto/deployment/modpython.txt:260
# 49fd0d8d349d4f6eb6ff4665f06433b9
msgid "This example sets up Django at the site root but explicitly disables Django for the ``media`` and ``static`` subdirectories and any URL that ends with ``.jpg``, ``.gif`` or ``.png``::"
msgstr ""

#: ../../howto/deployment/modpython.txt:289
#: ../../howto/deployment/wsgi/modwsgi.txt:173
# 1fbf7193f68d45bca160fef64085ddee
# 208727e7dc614d1fba2529d6a8266d47
msgid "Serving the admin files"
msgstr ""

#: ../../howto/deployment/modpython.txt:291
# 04ff46867a794676babcb544b36fa9fc
msgid "Note that the Django development server automagically serves the static files of the admin app, but this is not the case when you use any other server arrangement. You're responsible for setting up Apache, or whichever media server you're using, to serve the admin files."
msgstr ""

#: ../../howto/deployment/modpython.txt:296
#: ../../howto/deployment/wsgi/modwsgi.txt:180
# 26faef58f6fa4ca9a3dd76fc0f41f946
# 1998c06bd1854f019dfc9c3cc602e740
msgid "The admin files live in (:file:`django/contrib/admin/static/admin`) of the Django distribution."
msgstr ""

#: ../../howto/deployment/modpython.txt:299
# c524006537974e838c0d1ea38765181e
msgid "We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle the admin files (this means using the :djadmin:`collectstatic` management command to collect the static files in :setting:`STATIC_ROOT`, and then configuring your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), but here are two other approaches:"
msgstr ""

#: ../../howto/deployment/modpython.txt:305
# 71eb812db1874ede92c182c2522f9f51
msgid "Create a symbolic link to the admin static files from within your document root."
msgstr ""

#: ../../howto/deployment/modpython.txt:308
# 9de18aa97ed6490abecfda06bd361843
msgid "Or, copy the admin static files so that they live within your Apache document root."
msgstr ""

#: ../../howto/deployment/modpython.txt:312
# aca29bfb2b794132bbc25ac1bb36f7c5
msgid "Using \"eggs\" with mod_python"
msgstr ""

#: ../../howto/deployment/modpython.txt:314
# 35826524f20944e3afbe86df22897c37
msgid "If you installed Django from a Python egg_ or are using eggs in your Django project, some extra configuration is required. Create an extra file in your project (or somewhere else) that contains something like the following:"
msgstr ""

#: ../../howto/deployment/modpython.txt:323
# 92c8ba990dfe45fd8c1a5244d5ddbf61
msgid "Here, ``/some/directory`` is a directory that the Apache Web server process can write to. It will be used as the location for any unpacking of code the eggs need to do."
msgstr ""

#: ../../howto/deployment/modpython.txt:327
# c13dc2eb1aad40d4ae001e5715eed0b7
msgid "Then you have to tell mod_python to import this file before doing anything else. This is done using the PythonImport_ directive to mod_python. You need to ensure that you have specified the ``PythonInterpreter`` directive to mod_python as described above__ (you need to do this even if you aren't serving multiple installations in this case). Then add the ``PythonImport`` line in the main server configuration (i.e., outside the ``Location`` or ``VirtualHost`` sections). For example::"
msgstr ""

#: ../../howto/deployment/modpython.txt:338
# a9a606824e1d4679ba1429746feb91c9
msgid "Note that you can use an absolute path here (or a normal dotted import path), as described in the `mod_python manual`_. We use an absolute path in the above example because if any Python path modifications are required to access your project, they will not have been done at the time the ``PythonImport`` line is processed."
msgstr ""

#: ../../howto/deployment/modpython.txt:350
# 0878077b14e2495e9386a3ef0459bcea
msgid "Error handling"
msgstr ""

#: ../../howto/deployment/modpython.txt:352
# def0c5aa0b044b8d8f031e3618e9dd3c
msgid "When you use Apache/mod_python, errors will be caught by Django -- in other words, they won't propagate to the Apache level and won't appear in the Apache ``error_log``."
msgstr ""

#: ../../howto/deployment/modpython.txt:356
# 0598235448f64ad1b8f598e0963bc9b5
msgid "The exception for this is if something is really wonky in your Django setup. In that case, you'll see an \"Internal Server Error\" page in your browser and the full Python traceback in your Apache ``error_log`` file. The ``error_log`` traceback is spread over multiple lines. (Yes, this is ugly and rather hard to read, but it's how mod_python does things.)"
msgstr ""

#: ../../howto/deployment/modpython.txt:363
# 09f965ebebc449679838c2526102aa12
msgid "If you get a segmentation fault"
msgstr ""

#: ../../howto/deployment/modpython.txt:365
# 13028f1bf5f147a5908feda446c49f49
msgid "If Apache causes a segmentation fault, there are two probable causes, neither of which has to do with Django itself."
msgstr ""

#: ../../howto/deployment/modpython.txt:368
# 634b870c1f5a4155a057b0c04f8aa712
msgid "It may be because your Python code is importing the \"pyexpat\" module, which may conflict with the version embedded in Apache. For full information, see `Expat Causing Apache Crash`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:372
# 1a04282633e14456917d9f0516a7c259
msgid "It may be because you're running mod_python and mod_php in the same Apache instance, with MySQL as your database backend. In some cases, this causes a known mod_python issue due to version conflicts in PHP and the Python MySQL backend. There's full information in the `mod_python FAQ entry`_."
msgstr ""

#: ../../howto/deployment/modpython.txt:378
# 52f56649bd0d41d287e222788ce9fc0b
msgid "If you continue to have problems setting up mod_python, a good thing to do is get a barebones mod_python site working, without the Django framework. This is an easy way to isolate mod_python-specific problems. `Getting mod_python Working`_ details this procedure."
msgstr ""

#: ../../howto/deployment/modpython.txt:383
# 26d7906354d1440791e75e12c585c064
msgid "The next step should be to edit your test code and add an import of any Django-specific code you're using -- your views, your models, your URLconf, your RSS configuration, etc. Put these imports in your test handler function and access your test URL in a browser. If this causes a crash, you've confirmed it's the importing of Django code that causes the problem. Gradually reduce the set of imports until it stops crashing, so as to find the specific module that causes the problem. Drop down further into modules and look into their imports, as necessary."
msgstr ""

#: ../../howto/deployment/modpython.txt:397
#: ../../howto/deployment/wsgi/modwsgi.txt:209
# 411e958db62c440297cba2706f83d1e1
# f6428234b9234ee2a01304d18f3668a3
msgid "If you get a UnicodeEncodeError"
msgstr ""

#: ../../howto/deployment/modpython.txt:399
#: ../../howto/deployment/wsgi/modwsgi.txt:211
# 29fc007e5e6e442393f4596807e182f0
# f4d6c53343d64fcfb8c93c0521c81706
msgid "If you're taking advantage of the internationalization features of Django (see :doc:`/topics/i18n/index`) and you intend to allow users to upload files, you must ensure that the environment used to start Apache is configured to accept non-ASCII file names. If your environment is not correctly configured, you will trigger ``UnicodeEncodeError`` exceptions when calling functions like ``os.path()`` on filenames that contain non-ASCII characters."
msgstr ""

#: ../../howto/deployment/modpython.txt:406
#: ../../howto/deployment/wsgi/modwsgi.txt:218
# 4d9e54798e6a4a71886ac86b4c5cc757
# ee189d99f00441de8540ed3612601b59
msgid "To avoid these problems, the environment used to start Apache should contain settings analogous to the following::"
msgstr ""

#: ../../howto/deployment/modpython.txt:412
#: ../../howto/deployment/wsgi/modwsgi.txt:224
# c2ec9d484991472d84110b03a7544669
# c7fab93078b34315ba10bed277de8b03
msgid "Consult the documentation for your operating system for the appropriate syntax and location to put these configuration items; ``/etc/apache2/envvars`` is a common location on Unix platforms. Once you have added these statements to your environment, restart Apache."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:5
# 467474a2804f44bf86225abe418fab30
msgid "Since keeping multiple authentication databases in sync is a common problem when dealing with Apache, you can configure Apache to authenticate against Django's :doc:`authentication system </topics/auth>` directly. This requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:18
# 672cfcb20e074ef1a93ee5ad9c65f6dd
msgid "If you have installed a :ref:`custom User model <auth-custom-user>` and want to use this default auth handler, it must support an `is_active` attribute. If you want to use group based authorization, your custom user must have a relation named 'groups', referring to a related object that has a 'name' field. You can also specify your own custom mod_wsgi auth handler if your custom cannot conform to these requirements."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:29
# 5eaa67d233fa424795d778af10be8242
msgid "Authentication with mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:31
# f61262b31cd54b109c1c3db04c6ffb23
msgid "Make sure that mod_wsgi is installed and activated and that you have followed the steps to setup :doc:`Apache with mod_wsgi </howto/deployment/wsgi/modwsgi>`"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:35
# cbf2fbb99bc041c0a74e7470eb64c2a5
msgid "Next, edit your Apache configuration to add a location that you want only authenticated users to be able to view:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:53
# 49677863e6c140daba4683e361257fc8
msgid "The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the ``check_password`` function in specified wsgi script, passing the user name and password that it receives from the prompt. In this example, the ``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines your application :doc:`that is created by django-admin.py startproject </howto/deployment/wsgi/index>`."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:62
# afa465e83cf5457ca1212efe06f86b6a
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:64
# c1ef8f8b3c4e41308df9f694703ff0b3
msgid "These might be compiled statically into Apache, or you might need to use LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:72
# 8f8dc68929e34ff3b6eb0a2180d44ff4
msgid "Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's authentication to your site's authentication mechanisms by importing the check_user function:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:89
# 3984cfe1b6bd4ca7b2a996b3d4afe5bb
msgid "Requests beginning with ``/secret/`` will now require a user to authenticate."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:91
# e2ff0dd2815e47439a48ee6537106290
msgid "The mod_wsgi `access control mechanisms documentation`_ provides additional details and information about alternative methods of authentication."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:97
# eab6fe0e7140437aa11bd0ceceb59c3e
msgid "Authorization with mod_wsgi and Django groups"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:99
# 2f1c662837ec4800a4539245e94d9eac
msgid "mod_wsgi also provides functionality to restrict a particular location to members of a group."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:102
# 3dc29f3b797c47a38882f8ffbdfc6fb7
msgid "In this case, the Apache configuration should look like this:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:121
# 05606a0f66194ceb94feedfbac596d64
msgid "To support the ``WSGIAuthGroupScript`` directive, the same WSGI script ``mysite.wsgi`` must also import the ``groups_for_user`` function which returns a list groups the given user belongs to."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:129
# dd5e5aea38334adb96fcf0246e6c2576
msgid "Requests for ``/secret/`` will now also require user to be a member of the \"secret-agents\" group."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:3
# cf377c856d9a4b61bf1f5d5961b343a2
msgid "How to use Django with Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:7
# 1c39034c066c42059e91c405172b31c0
msgid "Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no dependencies and is easy to install and use."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:12
# 7c3cb3adc0d1448e8c6e0aded6445380
msgid "There are two ways to use Gunicorn with Django. One is to have Gunicorn treat Django as just another WSGI application. The second is to use Gunicorn's special `integration with Django`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:19
# 8e0d62cdbcd54d1bacc3610501458e4c
msgid "Installing Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:21
# c4c2bb60cfb140feaeb378d22970ef80
msgid "Installing gunicorn is as easy as ``sudo pip install gunicorn``. For more details, see the `gunicorn documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:27
# 7fd18a7c7f754954a55a8e5cc56bb6ba
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:29
# 1e96c77bab31495d8bfe79da2bd28a8a
msgid "When Gunicorn is installed, a ``gunicorn`` command is available which starts the Gunicorn server process. At its simplest, gunicorn just needs to be called with a the location of a WSGI application object.::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:35
# 58b91375dc004c4c881da9d9341c9908
msgid "Where ``APP_MODULE`` is of the pattern ``MODULE_NAME:VARIABLE_NAME``. The module name should be a full dotted path. The variable name refers to a WSGI callable that should be found in the specified module."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:39
# 751a011ef2114578b5c6b3db4f9e762b
msgid "So for a typical Django project, invoking gunicorn would look like::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:43
# 60749e04c7054d4c9b54d5682f738b37
msgid "(This requires that your project be on the Python path; the simplest way to ensure that is to run this command from the same directory as your ``manage.py`` file.)"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:49
# 9cf7c816c3724e7bbb88891a3e5dccea
msgid "Using Gunicorn's Django integration"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:51
# c5e7268798ef4c628e5f1610bb831d19
msgid "To use Gunicorn's built-in Django integration, first add ``\"gunicorn\"`` to :setting:`INSTALLED_APPS`. Then run ``python manage.py run_gunicorn``."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:54
# 83788a116dab4bb59e8298218f603036
msgid "This provides a few Django-specific niceties:"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:56
# 8e7cbf6b76e14347a2cfa86289189607
msgid "sets the gunicorn process name to be that of the project"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:58
# ceba25f7625240a0affc9d03c9253932
msgid "validates installed models"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:60
# 16f3d8a74c03400db5715b65548a9154
msgid "allows an ``--adminmedia`` option for passing in the location of the admin media files."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:63
# eb3f84cb6aed453981c2c87fac03eb84
msgid "See Gunicorn's `deployment documentation`_ for additional tips on starting and maintaining the Gunicorn server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:3
# bb32771a5bdd451785bd0872cb1f7cba
msgid "How to deploy with WSGI"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:5
# dcf4b2b9f211413a9070d66f345aa51b
msgid "Django's primary deployment platform is WSGI_, the Python standard for web servers and applications."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:10
# fbbcfd004c3b4ebe932801a4ff42bde5
msgid "Django's :djadmin:`startproject` management command sets up a simple default WSGI configuration for you, which you can tweak as needed for your project, and direct any WSGI-compliant webserver to use. Django includes getting-started documentation for the following WSGI servers:"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:24
# 0ad071e5bfcd4764a1dc5d21b3567cf1
msgid "The ``application`` object"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:26
# 4f3dc81b2f6e4aaeacc8717d3363bfa1
msgid "One key concept of deploying with WSGI is to specify a central ``application`` callable object which the webserver uses to communicate with your code. This is commonly specified as an object named ``application`` in a Python module accessible to the server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:33
# 55f3622017c84fd3ba62b222e5d20f08
msgid "The :djadmin:`startproject` command creates a :file:`projectname/wsgi.py` that contains such an application callable."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:38
# 4552fc952d954404bb127b7df0346f4f
msgid "Upgrading from a previous release of Django and don't have a :file:`wsgi.py` file in your project? You can simply add one to your project's top-level Python package (probably next to :file:`settings.py` and :file:`urls.py`) with the contents below. If you want :djadmin:`runserver` to also make use of this WSGI file, you can also add ``WSGI_APPLICATION = \"mysite.wsgi.application\"`` in your settings (replacing ``mysite`` with the name of your project)."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:46
# 9a1b811562c34a0ca888f02b3912fe9d
msgid "Initially this file contains::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:57
# 93cce32d56704d40a722875d8830b27a
msgid "The ``os.environ.setdefault`` line just sets the default settings module to use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. You'll need to edit this line to replace ``mysite`` with the name of your project package, so the path to your settings module is correct."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:63
# e441ef84565f470eb8f65ecd03c88b11
msgid "To apply `WSGI middleware`_ you can simply wrap the application object in the same file::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:69
# 44b78305a78644ee8279ce7c2531a8c1
msgid "You could also replace the Django WSGI application with a custom WSGI application that later delegates to the Django WSGI application, if you want to combine a Django application with a WSGI application of another framework."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:3
# 3a66b1c325e94191ae4c4efcd5579eba
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:5
# aae6670fd9704a98bef97f6cd78eedb5
msgid "Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to get Django into production."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:11
# 1453c022627448c1895b07b18273c005
msgid "mod_wsgi is an Apache module which can host any Python WSGI_ application, including Django. Django will work with any version of Apache which supports mod_wsgi."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:17
# 973a6a37e3a44286bfe422fba5f67489
msgid "The `official mod_wsgi documentation`_ is fantastic; it's your source for all the details about how to use mod_wsgi. You'll probably want to start with the `installation and configuration documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:27
# c486744f76614b9fb5c30587770ad754
msgid "Once you've got mod_wsgi installed and activated, edit your Apache server's ``httpd.conf`` file and add"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:42
# 36b59283250d48e8bb6d042ab3e53d01
msgid "The first bit in the ``WSGIScriptAlias`` line is the base URL path you want to serve your application at (``/`` indicates the root url), and the second is the location of a \"WSGI file\" -- see below -- on your system, usually inside of your project package (``mysite`` in this example). This tells Apache to serve any request below the given URL using the WSGI application defined in that file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:49
# d5b6c011f1c748eaad4b4bfc23b0d4d2
msgid "The ``WSGIPythonPath`` line ensures that your project package is available for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:52
# 90e09820502241718824fa18d272baa5
msgid "The ``<Directory>`` piece just ensures that Apache can access your :file:`wsgi.py` file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:55
# 4ed0e6a83e3d4b8ba866dee7146fdf3b
msgid "Next we'll need to ensure this :file:`wsgi.py` with a WSGI application object exists. As of Django version 1.4, :djadmin:`startproject` will have created one for you; otherwise, you'll need to create it. See the :doc:`WSGI overview documentation</howto/deployment/wsgi/index>` for the default contents you should put in this file, and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:63
# 955e6f36982b4b2ea5a84fb3ed4dcd76
msgid "If multiple Django sites are run in a single mod_wsgi process, all of them will use the settings of whichever one happens to run first. This can be solved with a minor edit to ``wsgi.py`` (see comment in the file for details), or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each site runs in its own daemon process."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:71
# 6fe331f78e14459eb2bcbcd5d64c05df
msgid "Using a virtualenv"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:73
# e9ce48bd6b964c97bb48371be3937821
msgid "If you install your project's Python dependencies inside a `virtualenv`_, you'll need to add the path to this virtualenv's ``site-packages`` directory to your Python path as well. To do this, add an additional path to your `WSGIPythonPath` directive, with multiple paths separated by a colon::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:80
# c9f640d7350247e4a9c65a204da3fca3
msgid "Make sure you give the correct path to your virtualenv, and replace ``python2.X`` with the correct Python version (e.g. ``python2.7``)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:88
# d9735cf12f714a388c5a1c5b42b977b8
msgid "Using mod_wsgi daemon mode"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:90
# ca75fcc3c1ab4bbb941933c57feed6c6
msgid "\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows platforms). To create the required daemon process group and delegate the Django instance to run in it, you will need to add appropriate ``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change required to the above configuration if you use daemon mode is that you can't use ``WSGIPythonPath``; instead you should use the ``python-path`` option to ``WSGIDaemonProcess``, for example::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:101
# 3a80a72a28b847c48d798c7e50e76fc8
msgid "See the official mod_wsgi documentation for `details on setting up daemon mode`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:109
# cad6e3c851c64a69afabb7ba1661e73c
msgid "Serving files"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:111
# 8553197f79614e1f81b6fdc599ecc53c
msgid "Django doesn't serve files itself; it leaves that job to whichever Web server you choose."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:123
# 4fe96d34ffe24884942c8d7e2477b463
msgid "If, however, you have no option but to serve media files on the same Apache ``VirtualHost`` as Django, you can set up Apache to serve some URLs as static media, and others using the mod_wsgi interface to Django."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:127
# 8a4b1239635448ac9d31378b02d38397
msgid "This example sets up Django at the site root, but explicitly serves ``robots.txt``, ``favicon.ico``, any CSS file, and anything in the ``/static/`` and ``/media/`` URL space as a static file. All other URLs will be served using mod_wsgi::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:175
# 0e3bca8b73b645368b5a59cb3ea4de3f
msgid "Note that the Django development server automatically serves the static files of the admin app (and any other installed apps), but this is not the case when you use any other server arrangement. You're responsible for setting up Apache, or whichever media server you're using, to serve the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:183
# 0599a9e35c844d98a3e8159b726636a1
msgid "We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle the admin files (along with a Web server as outlined in the previous section; this means using the :djadmin:`collectstatic` management command to collect the static files in :setting:`STATIC_ROOT`, and then configuring your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), but here are three other approaches:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:190
# abe626d536f6408ba0e94270f5120be0
msgid "Create a symbolic link to the admin static files from within your document root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:194
# 7d1cf4b7ae6a4484b69161ffd331c78c
msgid "Use an ``Alias`` directive, as demonstrated above, to alias the appropriate URL (probably :setting:`STATIC_URL` + `admin/`) to the actual location of the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:198
# 9d88693169ff4fdd9564ffe234246c3b
msgid "Copy the admin static files so that they live within your Apache document root."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:204
# a2f71d22693e486987bd78687e3e1b53
msgid "Django provides a handler to allow Apache to authenticate users directly against Django's authentication backends. See the :doc:`mod_wsgi authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:3
# d8222af842b74cb8806b2bd1603362bc
msgid "How to use Django with uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:7
# 0269edf4b1584c22ae1db3bdaa70a741
msgid "uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application container server coded in pure C."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:13
# 3e020b4b0d37465ab9765c6e7bf85ee1
msgid "Prerequisite: uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:15
# 4ce61282e58245748876e0ad738e55ac
msgid "The uWSGI wiki describes several `installation procedures`_. Using pip, the Python package manager, you can install any uWSGI version with a single command. For example:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:30
# 394c9d596f894040a4bfa68869186917
msgid "uWSGI model"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:32
# 5102e42d04c942b399a5bff6c5ad298f
msgid "uWSGI operates on a client-server model. Your Web server (e.g., nginx, Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:39
# 9183def68b98435cabb974dbb1638af2
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:41
# 764dfdf551d046d18c56ab5f28920753
msgid "uWSGI supports multiple ways to configure the process. See uWSGI's `configuration documentation`_ and `examples`_"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:47
# d3310b0f7e084cddb7b68d83d48a9620
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:63
# 481d86bb59af49119b035ccd7e08dd03
msgid "This assumes you have a top-level project package named ``mysite``, and within it a module :file:`mysite/wsgi.py` that contains a WSGI ``application`` object. This is the layout you'll have if you ran ``django-admin.py startproject mysite`` (using your own project name in place of ``mysite``) with a recent version of Django. If this file doesn't exist, you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` documentation for the default contents you should put in this file and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:71
# fdedc0a08c444deb9611cbb3a5ac3cd0
msgid "The Django-specific options here are:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:73
# b547e17bcc114441a8fff049a6762db2
msgid "``chdir``: The path to the directory that needs to be on Python's import path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:75
# a537bdebf962444ab5e09f41300d88d4
msgid "``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module that :djadmin:`startproject` creates."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:77
# bf966be1737247bc855d16aa98d9abee
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:78
# e1eab06ad0cb42a99f4991309e1d99df
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:80
# b8ae3fc61cec41dc8a3fd66cb52e2a4d
msgid "Example ini configuration file::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:91
# 472b5a484f1a4fada2acda2c60d7f5cc
msgid "Example ini configuration file usage::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:95
# c2d4379445e34326a5f6bdcb7136b91c
msgid "See the uWSGI docs on `managing the uWSGI process`_ for information on starting, stoping and reloading the uWSGI workers."
msgstr ""

#: ../../howto/error-reporting.txt:2
# ce4d55ed09484ba18d9400f15dff72a6
msgid "Error reporting"
msgstr ""

#: ../../howto/error-reporting.txt:4
# 14980681ffc94da8a78189bcfaf60739
msgid "When you're running a public site you should always turn off the :setting:`DEBUG` setting. That will make your server run much faster, and will also prevent malicious users from seeing details of your application that can be revealed by the error pages."
msgstr ""

#: ../../howto/error-reporting.txt:9
# df14fdc719654545893ae01848f4a201
msgid "However, running with :setting:`DEBUG` set to ``False`` means you'll never see errors generated by your site -- everyone will just see your public error pages. You need to keep track of errors that occur in deployed sites, so Django can be configured to create reports with details about those errors."
msgstr ""

#: ../../howto/error-reporting.txt:15
# a68fd1fe1394469dbcf918ffd118bccb
msgid "Email reports"
msgstr ""

#: ../../howto/error-reporting.txt:18
# 6e62897676554988b3da3fbd0d8751c3
msgid "Server errors"
msgstr ""

#: ../../howto/error-reporting.txt:20
# ad77b5720ca04c9c9e6730facd9dd1af
msgid "When :setting:`DEBUG` is ``False``, Django will email the users listed in the :setting:`ADMINS` setting whenever your code raises an unhandled exception and results in an internal server error (HTTP status code 500). This gives the administrators immediate notification of any errors. The :setting:`ADMINS` will get a description of the error, a complete Python traceback, and details about the HTTP request that caused the error."
msgstr ""

#: ../../howto/error-reporting.txt:29
# 15a7df4e61a34c7cbf72ed6b615d755e
msgid "In order to send email, Django requires a few settings telling it how to connect to your mail server. At the very least, you'll need to specify :setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required depending on your mail server's configuration. Consult :doc:`the Django settings documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

#: ../../howto/error-reporting.txt:38
# a5608c59d3804e84bb88338785b9ea01
msgid "By default, Django will send email from root@localhost. However, some mail providers reject all email from this address. To use a different sender address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../howto/error-reporting.txt:42
# eeeab78059094fe9ae1e329dd4657d42
msgid "To disable this behavior, just remove all entries from the :setting:`ADMINS` setting."
msgstr ""

#: ../../howto/error-reporting.txt:47
# d9139a2867e34a33beed7ac67511eb2d
msgid "Server error emails are sent using the logging framework, so you can customize this behavior by :doc:`customizing your logging configuration </topics/logging>`."
msgstr ""

#: ../../howto/error-reporting.txt:52
# 282f8ae7f9ef48e58a4d234a5cb7d2d4
msgid "404 errors"
msgstr ""

#: ../../howto/error-reporting.txt:54
# 5db2f92897dd46d2bbf250444acc1dcb
msgid "Django can also be configured to email errors about broken links (404 \"page not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

#: ../../howto/error-reporting.txt:57
# 521d38da63494efe8a73f2f1182431e2
msgid ":setting:`DEBUG` is ``False``"
msgstr ""

#: ../../howto/error-reporting.txt:59
# 32c91e14799341bbaf1f45b287e0fa72
msgid ":setting:`SEND_BROKEN_LINK_EMAILS` is ``True``"
msgstr ""

#: ../../howto/error-reporting.txt:61
# fd08c61bd503481eb3d707df848fd198
msgid "Your :setting:`MIDDLEWARE_CLASSES` setting includes ``CommonMiddleware`` (which it does by default)."
msgstr ""

#: ../../howto/error-reporting.txt:64
# c4d1bb84d68c4d45911d9ddb28cf2050
msgid "If those conditions are met, Django will email the users listed in the :setting:`MANAGERS` setting whenever your code raises a 404 and the request has a referer. (It doesn't bother to email for 404s that don't have a referer -- those are usually just people typing in broken URLs or broken Web 'bots)."
msgstr ""

#: ../../howto/error-reporting.txt:69
# ef4247c66417480e8a6d6571b749d7ff
msgid "You can tell Django to stop reporting particular 404s by tweaking the :setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled regular expression objects. For example::"
msgstr ""

#: ../../howto/error-reporting.txt:79
# 3e845ed8765844c1aa521ad87371d6f5
msgid "In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will *not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

#: ../../howto/error-reporting.txt:82
# d0c441ec37e14c14921e2f2dd9ddb9a4
msgid "The following example shows how to exclude some conventional URLs that browsers and crawlers often request::"
msgstr ""

#: ../../howto/error-reporting.txt:92
# 610496ed8e1141e58a51e9471ea8448a
msgid "(Note that these are regular expressions, so we put a backslash in front of periods to escape them.)"
msgstr ""

#: ../../howto/error-reporting.txt:95
# b095764fd561485aa49f130d48f99a4d
msgid "The best way to disable this behavior is to set :setting:`SEND_BROKEN_LINK_EMAILS` to ``False``."
msgstr ""

#: ../../howto/error-reporting.txt:100
# b2ace868a0994539afba2b65b1f7f5f0
msgid "404 errors are logged using the logging framework. By default, these log records are ignored, but you can use them for error reporting by writing a handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

#: ../../howto/error-reporting.txt:108
# 7680c73793354fac8a662ec73b156eee
msgid "Previously, two settings were used to control which URLs not to report: :setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS`. They were replaced by :setting:`IGNORABLE_404_URLS`."
msgstr ""

#: ../../howto/error-reporting.txt:115
# d4ae1e4145e24edf81d4422020478091
msgid "Filtering error reports"
msgstr ""

#: ../../howto/error-reporting.txt:120
# 08c00e0a35e14fd5a3db303a7c5af273
msgid "Filtering sensitive information"
msgstr ""

#: ../../howto/error-reporting.txt:122
# 0cbdd69abd324439a82aa9a852e3ec23
msgid "Error reports are really helpful for debugging errors, so it is generally useful to record as much relevant information about those errors as possible. For example, by default Django records the `full traceback`_ for the exception raised, each `traceback frame`_'s local variables, and the :class:`HttpRequest`'s :ref:`attributes<httprequest-attributes>`."
msgstr ""

#: ../../howto/error-reporting.txt:128
# e957469948a2432ba9341829d0572b13
msgid "However, sometimes certain types of information may be too sensitive and thus may not be appropriate to be kept track of, for example a user's password or credit card number. So Django offers a set of function decorators to help you control which information should be filtered out of error reports in a production environment (that is, where :setting:`DEBUG` is set to ``False``): :func:`sensitive_variables` and :func:`sensitive_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:140
# a1472cde64b242378c466f3913e6fb2c
msgid "If a function (either a view or any regular callback) in your code uses local variables susceptible to contain sensitive information, you may prevent the values of those variables from being included in error reports using the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:154
# 0f4803fedde848dda9fb522a07e7f0c8
msgid "In the above example, the values for the ``user``, ``pw`` and ``cc`` variables will be hidden and replaced with stars (`**********`) in the error reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:159
# d7b2ea46852244dc95f87d24d6cec869
msgid "To systematically hide all local variables of a function from error logs, do not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:168
# 55f246085ccf4bbfad944022a9471263
msgid "If one of your views receives an :class:`HttpRequest` object with :attr:`POST parameters<HttpRequest.POST>` susceptible to contain sensitive information, you may prevent the values of those parameters from being included in the error reports using the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:184
# f1186c5754604fa6b5c832b86a937dda
msgid "In the above example, the values for the ``pass_word`` and ``credit_card_number`` POST parameters will be hidden and replaced with stars (`**********`) in the request's representation inside the error reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:189
# d466027ef207492e871ec9315ee4d410
msgid "To systematically hide all POST parameters of a request in error reports, do not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:200
# e9fd9f13a8d64b04af144d225ca8de59
msgid "Since version 1.4, all POST parameters are systematically filtered out of error reports for certain :mod:`contrib.views.auth` views (``login``, ``password_reset_confirm``, ``password_change``, and ``add_view`` and ``user_change_password`` in the ``auth`` admin) to prevent the leaking of sensitive information such as user passwords."
msgstr ""

#: ../../howto/error-reporting.txt:209
# 24b9691a1ac640e3b9a97a1f44aacbd8
msgid "Custom error reports"
msgstr ""

#: ../../howto/error-reporting.txt:211
# 3b91cd829e8d4824a50ecc04967bef0c
msgid "All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, respectively, annotate the decorated function with the names of sensitive variables and annotate the ``HttpRequest`` object with the names of sensitive POST parameters, so that this sensitive information can later be filtered out of reports when an error occurs. The actual filtering is done by Django's default error reporter filter: :class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses the decorators' annotations to replace the corresponding values with stars (`**********`) when the error reports are produced. If you wish to override or customize this default behavior for your entire site, you need to define your own filter class and tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

#: ../../howto/error-reporting.txt:226
# cb5cd7034ce64bdc92c95792dc22c0f7
msgid "You may also control in a more granular way which filter to use within any given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` attribute::"
msgstr ""

#: ../../howto/error-reporting.txt:235
# 3ff2f7683a0b48369a658cd71aeb6bfa
msgid "Your custom filter class needs to inherit from :class:`django.views.debug.SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

#: ../../howto/error-reporting.txt:243
# 712caa987c374816b75ec7cd10842b22
msgid "Returns ``True`` to activate the filtering operated in the other methods. By default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/error-reporting.txt:248
# 29b852b96f2741cf8074e7f23e9a33ab
msgid "Returns the representation string of the request object, that is, the value that would be returned by ``repr(request)``, except it uses the filtered dictionary of POST parameters as determined by :meth:`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:255
# 026475924c884ddeb62cc602f9fcae29
msgid "Returns the filtered dictionary of POST parameters. By default it replaces the values of sensitive parameters with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:260
# d7c51f4fef7a4c288acc7898dc22ca05
msgid "Returns the filtered dictionary of local variables for the given traceback frame. By default it replaces the values of sensitive variables with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:266
# 53e3c930ee8b413abd821f621c94b5b5
msgid "You can also set up custom error reporting by writing a custom piece of :ref:`exception middleware <exception-middleware>`. If you do write custom error handling, it's a good idea to emulate Django's built-in error handling and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/index.txt:2
# 8ca33ed7d7434e06b8e27c814cc948a9
msgid "\"How-to\" guides"
msgstr ""

#: ../../howto/index.txt:4
# aad91053f06243de99cbb437021a77a8
msgid "Here you'll find short answers to \"How do I....?\" types of questions. These how-to guides don't cover topics in depth -- you'll find that material in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides will help you quickly accomplish common tasks."
msgstr ""

#: ../../howto/index.txt:28
# 2b3b3cf18e874fc393b1fb94dc222d58
msgid "The `Django community aggregator`_, where we aggregate content from the global Django community. Many writers in the aggregator write this sort of how-to material."
msgstr ""

#: ../../howto/initial-data.txt:3
# da8772f62e7a4387990886bc3fe3127a
msgid "Providing initial data for models"
msgstr ""

#: ../../howto/initial-data.txt:5
# 8275908b11444354ae9e5547121a5dcb
msgid "It's sometimes useful to pre-populate your database with hard-coded data when you're first setting up an app. There's a couple of ways you can have Django automatically create this data: you can provide `initial data via fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

#: ../../howto/initial-data.txt:10
# 10e95540c7b3436b85530f006abea020
msgid "In general, using a fixture is a cleaner method since it's database-agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

#: ../../howto/initial-data.txt:19
# de26051577144b94a332b01b4146242b
msgid "Providing initial data with fixtures"
msgstr ""

#: ../../howto/initial-data.txt:21
# ad68d27759b140bdb64568abf5f5efc8
msgid "A fixture is a collection of data that Django knows how to import into a database. The most straightforward way of creating a fixture if you've already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` command. Or, you can write fixtures by hand; fixtures can be written as XML, YAML, or JSON documents. The :doc:`serialization documentation </topics/serialization>` has more details about each of these supported :ref:`serialization formats <serialization-formats>`."
msgstr ""

#: ../../howto/initial-data.txt:29
# 07712739a857420a83482f86f4296b9c
msgid "As an example, though, here's what a fixture for a simple ``Person`` model might look like in JSON:"
msgstr ""

#: ../../howto/initial-data.txt:53
# ea2ab1896d754816bc8c76c15de7e22b
msgid "And here's that same fixture as YAML:"
msgstr ""

#: ../../howto/initial-data.txt:68
# 3c7a5fd4a73846018c40125f19638ee2
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

#: ../../howto/initial-data.txt:70
# dc0afe1e1cbd4c13bbf828103513b49a
msgid "Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` ``<fixturename>``, where ``<fixturename>`` is the name of the fixture file you've created. Each time you run :djadmin:`loaddata`, the data will be read from the fixture and re-loaded into the database. Note this means that if you change one of the rows created by a fixture and then run :djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

#: ../../howto/initial-data.txt:78
# e9911ccc8cee48dd8ce83b27ddf828a2
msgid "Automatically loading initial data fixtures"
msgstr ""

#: ../../howto/initial-data.txt:80
# 79edfdef672042e48352110a9daa7617
msgid "If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture will be loaded every time you run :djadmin:`syncdb`. This is extremely convenient, but be careful: remember that the data will be refreshed *every time* you run :djadmin:`syncdb`. So don't use ``initial_data`` for data you'll want to edit."
msgstr ""

#: ../../howto/initial-data.txt:86
# 46eb280fa2f744d2a6077086576251df
msgid "Where Django finds fixture files"
msgstr ""

#: ../../howto/initial-data.txt:88
# 47b7c71c9c2f459ea54a39e443d3e403
msgid "By default, Django looks in the ``fixtures`` directory inside each app for fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of additional directories where Django should look."
msgstr ""

#: ../../howto/initial-data.txt:92
# 3495f0a936c24d068f32811dc0ba6a95
msgid "When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify an absolute path to a fixture file, which overrides searching the usual directories."
msgstr ""

#: ../../howto/initial-data.txt:98
# 5b10947c054b4a7a81fb56e7905c38cf
msgid "Fixtures are also used by the :ref:`testing framework <topics-testing-fixtures>` to help set up a consistent test environment."
msgstr ""

#: ../../howto/initial-data.txt:104
# 5cb9bba3b0044ab99d6c1024ce266006
msgid "Providing initial SQL data"
msgstr ""

#: ../../howto/initial-data.txt:106
# d4e0be3e2b9345bdbcc029e2df3663ad
msgid "Django provides a hook for passing the database arbitrary SQL that's executed just after the CREATE TABLE statements when you run :djadmin:`syncdb`. You can use this hook to populate default records, or you could also create SQL functions, views, triggers, etc."
msgstr ""

#: ../../howto/initial-data.txt:111
# 17fd3b4643b3429da1d54154d06b3fd3
msgid "The hook is simple: Django just looks for a file called ``sql/<modelname>.sql``, in your app directory, where ``<modelname>`` is the model's name in lowercase."
msgstr ""

#: ../../howto/initial-data.txt:114
# 2e62eb9d10604c3f81c2f1338a10cb05
msgid "So, if you had a ``Person`` model in an app called ``myapp``, you could add arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` directory. Here's an example of what the file might contain:"
msgstr ""

#: ../../howto/initial-data.txt:123
# 144530641e2c4bcc8152666b2b2acfd6
msgid "Each SQL file, if given, is expected to contain valid SQL statements which will insert the desired data (e.g., properly-formatted ``INSERT`` statements separated by semicolons)."
msgstr ""

#: ../../howto/initial-data.txt:127
# 820f2997592840eba1e47ce96e18b161
msgid "The SQL files are read by the :djadmin:`sqlcustom` and :djadmin:`sqlall` commands in :doc:`manage.py </ref/django-admin>`. Refer to the :doc:`manage.py documentation </ref/django-admin>` for more information."
msgstr ""

#: ../../howto/initial-data.txt:131
# c1b5c8c745504a1bbf815ed5abaf3689
msgid "Note that if you have multiple SQL data files, there's no guarantee of the order in which they're executed. The only thing you can assume is that, by the time your custom data files are executed, all the database tables already will have been created."
msgstr ""

#: ../../howto/initial-data.txt:138
# 97c7acff94514fc3b9e10e84eb82e9d4
msgid "This technique *cannot* be used to provide initial data for testing purposes. Django's test framework flushes the contents of the test database after each test; as a result, any data added using the custom SQL hook will be lost."
msgstr ""

#: ../../howto/initial-data.txt:143
# 839dcdb214594fd4ae905d971a8cbbbb
msgid "If you require data for a test case, you should add it using either a :ref:`test fixture <topics-testing-fixtures>`, or programatically add it during the ``setUp()`` of your test case."
msgstr ""

#: ../../howto/initial-data.txt:148
# 84da81e61e034f3eb0397ab0204469d0
msgid "Database-backend-specific SQL data"
msgstr ""

#: ../../howto/initial-data.txt:150
# aabb1136a27f450eb695e12265dfeb94
msgid "There's also a hook for backend-specific SQL data. For example, you can have separate initial-data files for PostgreSQL and SQLite. For each app, Django looks for a file called ``<appname>/sql/<modelname>.<backend>.sql``, where ``<appname>`` is your app directory, ``<modelname>`` is the model's name in lowercase and ``<backend>`` is the last part of the module name provided for the :setting:`ENGINE` in your settings file (e.g., if you have defined a database with an :setting:`ENGINE` value of ``django.db.backends.sqlite3``, Django will look for ``<appname>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

#: ../../howto/initial-data.txt:161
# 48e4eee06af14ed48c9db2a9399bc740
msgid "Backend-specific SQL data is executed before non-backend-specific SQL data. For example, if your app contains the files ``sql/person.sql`` and ``sql/person.sqlite3.sql`` and you're installing the app on SQLite, Django will execute the contents of ``sql/person.sqlite3.sql`` first, then ``sql/person.sql``."
msgstr ""

#: ../../howto/jython.txt:3
# a4b527fd66c94a54b660d5ddae94a742
msgid "Running Django on Jython"
msgstr ""

#: ../../howto/jython.txt:9
# 0e0504524f3e4f528fc660c845b18174
msgid "Django 1.5 has dropped support for Python 2.5. Therefore, you have to use a Jython 2.7 alpha release if you want to use Django 1.5 with Jython. Please use Django 1.4 if you want to keep using Django on a stable Jython version."
msgstr ""

#: ../../howto/jython.txt:14
# 76a4cd6d137f445d9be873c29125b317
msgid "Jython_ is an implementation of Python that runs on the Java platform (JVM). Django runs cleanly on Jython version 2.5 or later, which means you can deploy Django on any Java platform."
msgstr ""

#: ../../howto/jython.txt:18
# d4e3f74bd7ae45ea8f947df48c941a86
msgid "This document will get you up and running with Django on top of Jython."
msgstr ""

#: ../../howto/jython.txt:23
# 467536ea3b84498da4cc45a030a3034f
msgid "Installing Jython"
msgstr ""

#: ../../howto/jython.txt:25
# 1b73890afc6f4d8a91bba88408aae90a
msgid "Django works with Jython versions 2.5b3 and higher. Download Jython at http://www.jython.org/."
msgstr ""

#: ../../howto/jython.txt:29
# 46ff9d7d38ab4a47b3f6f6d1b0cc9c82
msgid "Creating a servlet container"
msgstr ""

#: ../../howto/jython.txt:31
# 1a712b0764df4cc19cbb8d171d8447ff
msgid "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight Web server you can use for testing, so you won't need to set up anything else until you're ready to deploy Django in production."
msgstr ""

#: ../../howto/jython.txt:35
# 5bf1ff7b45b84551bb6dcedc121ca62e
msgid "If you want to use Django on a production site, use a Java servlet container, such as `Apache Tomcat`_. Full JavaEE applications servers such as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they include."
msgstr ""

#: ../../howto/jython.txt:44
# b295b70502004fa1bf9e30335c0121ec
msgid "Installing Django"
msgstr ""

#: ../../howto/jython.txt:46
# 00aecc869f274f8d8686edece970f7c4
msgid "The next step is to install Django itself. This is exactly the same as installing Django on standard Python, so see :ref:`removing-old-versions-of-django` and :ref:`install-django-code` for instructions."
msgstr ""

#: ../../howto/jython.txt:52
# aac6502070664684a54f8c0acc054929
msgid "Installing Jython platform support libraries"
msgstr ""

#: ../../howto/jython.txt:54
# 4c636e9f05c64cf694fd209546d5a33f
msgid "The `django-jython`_ project contains database backends and management commands for Django/Jython development. Note that the builtin Django backends won't work on top of Jython."
msgstr ""

#: ../../howto/jython.txt:60
# a9c5e2311bc8499aaf055fa8649fb0a0
msgid "To install it, follow the `installation instructions`_ detailed on the project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

#: ../../howto/jython.txt:67
# 4c40b5b3b1fb42f5ac396ac525d5471a
msgid "Differences with Django on Jython"
msgstr ""

#: ../../howto/jython.txt:71
# fb7e5ebe37f04414a148ba8318cf5cf1
msgid "At this point, Django on Jython should behave nearly identically to Django running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

#: ../../howto/jython.txt:74
# be2738dcca05464a86860543b75aea22
msgid "Remember to use the ``jython`` command instead of ``python``. The documentation uses ``python`` for consistency, but if you're using Jython you'll want to mentally replace ``python`` with ``jython`` every time it occurs."
msgstr ""

#: ../../howto/jython.txt:79
# 63ce25df17c44f1886d330e7d9dc69ed
msgid "Similarly, you'll need to use the ``JYTHONPATH`` environment variable instead of ``PYTHONPATH``."
msgstr ""

#: ../../howto/legacy-databases.txt:3
# 3c5b13f167724857b5ecd895fdf9478e
msgid "Integrating Django with a legacy database"
msgstr ""

#: ../../howto/legacy-databases.txt:5
# 822c5bc7cd4d437ebb1740464d3bd226
msgid "While Django is best suited for developing new applications, it's quite possible to integrate it into legacy databases. Django includes a couple of utilities to automate as much of this process as possible."
msgstr ""

#: ../../howto/legacy-databases.txt:9
# d2f238d10bec41dfbf55a4f35efda25f
msgid "This document assumes you know the Django basics, as covered in the :doc:`tutorial </intro/tutorial01>`."
msgstr ""

#: ../../howto/legacy-databases.txt:12
# e9d1952c10644e0eaeb0a454ae50a0de
msgid "Once you've got Django set up, you'll follow this general process to integrate with an existing database."
msgstr ""

#: ../../howto/legacy-databases.txt:16
# a9d68c6bcc3f4cc4b35d8a89cfdc9399
msgid "Give Django your database parameters"
msgstr ""

#: ../../howto/legacy-databases.txt:18
# fe9f86ae94a34a69ac56e558b956d251
msgid "You'll need to tell Django what your database connection parameters are, and what the name of the database is. Do that by editing the :setting:`DATABASES` setting and assigning values to the following keys for the ``'default'`` connection:"
msgstr ""

#: ../../howto/legacy-databases.txt:23
# d14e4bf5e6c545e297f604c172de03ef
msgid ":setting:`NAME`"
msgstr ""

#: ../../howto/legacy-databases.txt:24
# 53c7b0163f524988947b1b01c094357c
msgid ":setting:`ENGINE`"
msgstr ""

#: ../../howto/legacy-databases.txt:25
# 3b3091ecade5460f9dd96e2800cec2e1
msgid ":setting:`USER`"
msgstr ""

#: ../../howto/legacy-databases.txt:26
# e1784fe81ad5406999fe39fb6ea08ada
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../howto/legacy-databases.txt:27
# 1abe170f47224979b09e0822985e4ad6
msgid ":setting:`HOST`"
msgstr ""

#: ../../howto/legacy-databases.txt:28
# bcf962e2d5e64af0a8337ce2b6aac9fc
msgid ":setting:`PORT`"
msgstr ""

#: ../../howto/legacy-databases.txt:31
# 18ad5eb634b444758f0cf8fda3a4550c
msgid "Auto-generate the models"
msgstr ""

#: ../../howto/legacy-databases.txt:35
# 411bc3c892e74399903065c18915c03b
msgid "Django comes with a utility called :djadmin:`inspectdb` that can create models by introspecting an existing database. You can view the output by running this command::"
msgstr ""

#: ../../howto/legacy-databases.txt:41
# 4d9f428d334440f3850862bee206552c
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

#: ../../howto/legacy-databases.txt:45
# ed7225e3965e423ba70bebe4dff5d35c
msgid "This feature is meant as a shortcut, not as definitive model generation. See the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

#: ../../howto/legacy-databases.txt:48
# 23533f22b5d34e9f90354fe7104605cf
msgid "Once you've cleaned up your models, name the file ``models.py`` and put it in the Python package that holds your app. Then add the app to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../howto/legacy-databases.txt:53
# 0639e3e6b9f242d3873c79c08776670c
msgid "Install the core Django tables"
msgstr ""

#: ../../howto/legacy-databases.txt:55
# 3d96307d47c849a7bda5d39a38878b85
msgid "Next, run the :djadmin:`syncdb` command to install any extra needed database records such as admin permissions and content types::"
msgstr ""

#: ../../howto/legacy-databases.txt:61
# c9da0eb3994c4be5ac49468b9c1b533f
msgid "Test and tweak"
msgstr ""

#: ../../howto/legacy-databases.txt:63
# 3d6f4cb5560d4057b74d2aa48f196adb
msgid "Those are the basic steps -- from here you'll want to tweak the models Django generated until they work the way you'd like. Try accessing your data via the Django database API, and try editing objects via Django's admin site, and edit the models file accordingly."
msgstr ""

#: ../../howto/outputting-csv.txt:3
# 9342bcb3c27b42e9a7b1969bcfc3956a
msgid "Outputting CSV with Django"
msgstr ""

#: ../../howto/outputting-csv.txt:5
# fdc4582db6ec4174af63930c3ab686d9
msgid "This document explains how to output CSV (Comma Separated Values) dynamically using Django views. To do this, you can either use the Python CSV library or the Django template system."
msgstr ""

#: ../../howto/outputting-csv.txt:10
# 836e52bd49884e96b3a8d07a4dbef669
msgid "Using the Python CSV library"
msgstr ""

#: ../../howto/outputting-csv.txt:12
# e751477a8c124700893e943e91f6651d
msgid "Python comes with a CSV library, :mod:`csv`. The key to using it with Django is that the :mod:`csv` module's CSV-creation capability acts on file-like objects, and Django's :class:`~django.http.HttpResponse` objects are file-like objects."
msgstr ""

#: ../../howto/outputting-csv.txt:16
# 31a3d8fd770343519399ecf8b0a24cd4
msgid "Here's an example::"
msgstr ""

#: ../../howto/outputting-csv.txt:32
#: ../../howto/outputting-pdf.txt:69
# 527a0f08773c43bea210b6a6c08c9fa8
# 03b22323c8a4495a987524c4c268a452
msgid "The code and comments should be self-explanatory, but a few things deserve a mention:"
msgstr ""

#: ../../howto/outputting-csv.txt:35
# 84e05ecb060c471692bd9e4b748b1a85
msgid "The response gets a special MIME type, :mimetype:`text/csv`. This tells browsers that the document is a CSV file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which will result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-csv.txt:40
# 9dc627db3927482886e4b4295403cec9
msgid "The response gets an additional ``Content-Disposition`` header, which contains the name of the CSV file. This filename is arbitrary; call it whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, etc."
msgstr ""

#: ../../howto/outputting-csv.txt:45
# 7742105962f44d918121cafa67a74077
msgid "Hooking into the CSV-generation API is easy: Just pass ``response`` as the first argument to ``csv.writer``. The ``csv.writer`` function expects a file-like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-csv.txt:50
# 93c11578488f4c07ac368b2aee57007d
msgid "For each row in your CSV file, call ``writer.writerow``, passing it an iterable object such as a list or tuple."
msgstr ""

#: ../../howto/outputting-csv.txt:53
# 45d087d548804cbca4970a1f8cd6aa26
msgid "The CSV module takes care of quoting for you, so you don't have to worry about escaping strings with quotes or commas in them. Just pass ``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

#: ../../howto/outputting-csv.txt:58
# 57476eac347c45a2a03741ad306a4a80
msgid "Handling Unicode"
msgstr ""

#: ../../howto/outputting-csv.txt:60
# f9c870604a3e491aaf381f8f9543d5b3
msgid "Python's :mod:`csv` module does not support Unicode input. Since Django uses Unicode internally this means strings read from sources such as :class:`~django.http.HttpRequest` are potentially problematic. There are a few options for handling this:"
msgstr ""

#: ../../howto/outputting-csv.txt:65
# 89350d2d95ff4bb4b7e6c0ce30f57cf7
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

#: ../../howto/outputting-csv.txt:67
# a96c39f38d804013a5c2cde28a51deb8
msgid "Use the ``UnicodeWriter`` class provided in the `csv module's examples section`_."
msgstr ""

#: ../../howto/outputting-csv.txt:70
# 87585a56f70b4f6ba28835353e65c87d
msgid "Use the `python-unicodecsv module`_, which aims to be a drop-in replacement for :mod:`csv` that gracefully handles Unicode."
msgstr ""

#: ../../howto/outputting-csv.txt:73
# 8d9f841fa1784e1dbc836eec52176bee
msgid "For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

#: ../../howto/outputting-csv.txt:79
# 1b8ed373f79343e28fa0b82569e27f62
msgid "Using the template system"
msgstr ""

#: ../../howto/outputting-csv.txt:81
# 5a273f9741bc45a3bb23f711300fcea6
msgid "Alternatively, you can use the :doc:`Django template system </topics/templates>` to generate CSV. This is lower-level than using the convenient Python :mod:`csv` module, but the solution is presented here for completeness."
msgstr ""

#: ../../howto/outputting-csv.txt:85
# b4b278f77f8e4129b08d14b53e288c04
msgid "The idea here is to pass a list of items to your template, and have the template output the commas in a :ttag:`for` loop."
msgstr ""

#: ../../howto/outputting-csv.txt:88
# e0911681b30c4ce5a975ce6d5cd8884c
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

#: ../../howto/outputting-csv.txt:112
# 16aef8e6b7d2447d95ffa7726ae335e8
msgid "The only difference between this example and the previous example is that this one uses template loading instead of the CSV module. The rest of the code -- such as the ``mimetype='text/csv'`` -- is the same."
msgstr ""

#: ../../howto/outputting-csv.txt:116
# 3366bcebd89c45cba55237db27b3465c
msgid "Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

#: ../../howto/outputting-csv.txt:123
# c1b4a09989ec49ce9121246f308e4dd0
msgid "This template is quite basic. It just iterates over the given data and displays a line of CSV for each row. It uses the :tfilter:`addslashes` template filter to ensure there aren't any problems with quotes."
msgstr ""

#: ../../howto/outputting-csv.txt:128
# 11c045c05c8544019ece682f352025c0
msgid "Other text-based formats"
msgstr ""

#: ../../howto/outputting-csv.txt:130
# 4102b1d6e7e74b8da6e21e5266c31346
msgid "Notice that there isn't very much specific to CSV here -- just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an example."
msgstr ""

#: ../../howto/outputting-pdf.txt:3
# 4fb4d2f9f40f40d99cc8a6a91d9436a1
msgid "Outputting PDFs with Django"
msgstr ""

#: ../../howto/outputting-pdf.txt:5
# 5a2fce45e22d4310a2039b4543644993
msgid "This document explains how to output PDF files dynamically using Django views. This is made possible by the excellent, open-source ReportLab_ Python PDF library."
msgstr ""

#: ../../howto/outputting-pdf.txt:9
# d75805303288490b8e09d66d3f7771a1
msgid "The advantage of generating PDF files dynamically is that you can create customized PDFs for different purposes -- say, for different users or different pieces of content."
msgstr ""

#: ../../howto/outputting-pdf.txt:13
# c1825d3fe38b4283ab37d5fecd16ec42
msgid "For example, Django was used at kusports.com_ to generate customized, printer-friendly NCAA tournament brackets, as PDF files, for people participating in a March Madness contest."
msgstr ""

#: ../../howto/outputting-pdf.txt:21
# 97da7e04e6cd495f9d1524bd71c2db9b
msgid "Install ReportLab"
msgstr ""

#: ../../howto/outputting-pdf.txt:23
# 225c3cd47a0c49648852fa789d567d5c
msgid "Download and install the ReportLab library from http://www.reportlab.com/software/opensource/rl-toolkit/download/. The `user guide`_ (not coincidentally, a PDF file) explains how to install it. Alternatively, you can also install it with ``pip``:"
msgstr ""

#: ../../howto/outputting-pdf.txt:32
# b651531a145947bbadf7e84942d392b6
msgid "Test your installation by importing it in the Python interactive interpreter::"
msgstr ""

#: ../../howto/outputting-pdf.txt:36
# a5ec2fbe6ca4436f871434bd833ddd2a
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

#: ../../howto/outputting-pdf.txt:41
# af0abafe4f2243e891636a1bb7e5c91a
msgid "Write your view"
msgstr ""

#: ../../howto/outputting-pdf.txt:43
# ed4f8005df404a929f76fc2220dda19d
msgid "The key to generating PDFs dynamically with Django is that the ReportLab API acts on file-like objects, and Django's :class:`~django.http.HttpResponse` objects are file-like objects."
msgstr ""

#: ../../howto/outputting-pdf.txt:47
# cca47a6e9da946f7921be5943bf810f4
msgid "Here's a \"Hello World\" example::"
msgstr ""

#: ../../howto/outputting-pdf.txt:72
# 644a4d8590ac4918a343bb626a78353b
msgid "The response gets a special MIME type, :mimetype:`application/pdf`. This tells browsers that the document is a PDF file, rather than an HTML file. If you leave this off, browsers will probably interpret the output as HTML, which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-pdf.txt:78
# 5abdc6f8499e44d6aab4451125b6c2d3
msgid "The response gets an additional ``Content-Disposition`` header, which contains the name of the PDF file. This filename is arbitrary: Call it whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, etc."
msgstr ""

#: ../../howto/outputting-pdf.txt:83
# 7276ca21085146a0aa8eb09c1a832fbe
msgid "The ``Content-Disposition`` header starts with ``'attachment; '`` in this example. This forces Web browsers to pop-up a dialog box prompting/confirming how to handle the document even if a default is set on the machine. If you leave off ``'attachment;'``, browsers will handle the PDF using whatever program/plugin they've been configured to use for PDFs. Here's what that code would look like::"
msgstr ""

#: ../../howto/outputting-pdf.txt:92
# e6874b015319451c80658ee0a4dd587d
msgid "Hooking into the ReportLab API is easy: Just pass ``response`` as the first argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-pdf.txt:97
# 29b962301e2646c68bbace1c44197adc
msgid "Note that all subsequent PDF-generation methods are called on the PDF object (in this case, ``p``) -- not on ``response``."
msgstr ""

#: ../../howto/outputting-pdf.txt:100
# 9aa494e8640a412398057c3194228bec
msgid "Finally, it's important to call ``showPage()`` and ``save()`` on the PDF file."
msgstr ""

#: ../../howto/outputting-pdf.txt:105
# 2023195d811d44c3bab3e9f9cb426b98
msgid "ReportLab is not thread-safe. Some of our users have reported odd issues with building PDF-generating Django views that are accessed by many people at the same time."
msgstr ""

#: ../../howto/outputting-pdf.txt:110
# 5818cfdc2fc540c88ba21ad196383cc1
msgid "Complex PDFs"
msgstr ""

#: ../../howto/outputting-pdf.txt:112
# 45484405870346219d8e4419b25b1305
msgid "If you're creating a complex PDF document with ReportLab, consider using the :mod:`io` library as a temporary holding place for your PDF file. This library provides a file-like object interface that is particularly efficient. Here's the above \"Hello World\" example rewritten to use :mod:`io`::"
msgstr ""

#: ../../howto/outputting-pdf.txt:146
# 587c899db5d44b1a9f5658c6fe85b575
msgid "Further resources"
msgstr ""

#: ../../howto/outputting-pdf.txt:148
# 5e1bca8bcc404d48ae2a98b8dc8fe17c
msgid "PDFlib_ is another PDF-generation library that has Python bindings. To use it with Django, just use the same concepts explained in this article."
msgstr ""

#: ../../howto/outputting-pdf.txt:150
# 4f05a7f242994d878985a86b91a48b9c
msgid "`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an example of how to integrate Pisa with Django."
msgstr ""

#: ../../howto/outputting-pdf.txt:152
# 0a8c65ff1265465792eb469b3b966786
msgid "HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't have a Python interface, but you can escape out to the shell using ``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

#: ../../howto/outputting-pdf.txt:161
# ce3b1446a42d4da68977cfc3824e883d
msgid "Other formats"
msgstr ""

#: ../../howto/outputting-pdf.txt:163
# ab5a5c9eeafb48479fb1f7876fccfd63
msgid "Notice that there isn't a lot in these examples that's PDF-specific -- just the bits using ``reportlab``. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see :doc:`/howto/outputting-csv` for another example and some techniques you can use when generated text-based formats."
msgstr ""

#: ../../howto/static-files.txt:3
# 0c0c2eaf11cc4be9a88e03fd970d9399
msgid "Managing static files"
msgstr ""

#: ../../howto/static-files.txt:5
# a2b34b7dd8144a4c870ac015770a6a7e
msgid "Django developers mostly concern themselves with the dynamic parts of web applications -- the views and templates that render anew for each request. But web applications have other parts: the static files (images, CSS, Javascript, etc.) that are needed to render a complete web page."
msgstr ""

#: ../../howto/static-files.txt:10
# 6e1ff16295794413aff703cfc85e9c5d
msgid "For small projects, this isn't a big deal, because you can just keep the static files somewhere your web server can find it. However, in bigger projects -- especially those comprised of multiple apps -- dealing with the multiple sets of static files provided by each application starts to get tricky."
msgstr ""

#: ../../howto/static-files.txt:16
# 41955db1af3c4704a95aabbc5a00d802
msgid "That's what ``django.contrib.staticfiles`` is for: it collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production."
msgstr ""

#: ../../howto/static-files.txt:22
# 0f968621678b41399424559caf93ed2f
msgid "If you've used the `django-staticfiles`_ third-party app before, then ``django.contrib.staticfiles`` will look very familiar. That's because they're essentially the same code: ``django.contrib.staticfiles`` started its life as `django-staticfiles`_ and was merged into Django 1.3."
msgstr ""

#: ../../howto/static-files.txt:27
# ad9d727014814bfcb7dccff49db24b5a
msgid "If you're upgrading from ``django-staticfiles``, please see `Upgrading from django-staticfiles`_, below, for a few minor changes you'll need to make."
msgstr ""

#: ../../howto/static-files.txt:33
# 38fcab6b3f604090aea3f1edfb675864
msgid "Using ``django.contrib.staticfiles``"
msgstr ""

#: ../../howto/static-files.txt:36
# b33a5f7392a84e9a9395ddd6904d227c
msgid "Basic usage"
msgstr ""

#: ../../howto/static-files.txt:38
# 83c42ddc859e4034acde27e962f9d3e8
msgid "Put your static files somewhere that ``staticfiles`` will find them."
msgstr ""

#: ../../howto/static-files.txt:40
# 3a3a89234c55454e978e86d055a0f736
msgid "By default, this means within ``static/`` subdirectories of apps in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/static-files.txt:43
# c316524e812e4462ab7900f921f73e1e
msgid "Your project will probably also have static assets that aren't tied to a particular app. The :setting:`STATICFILES_DIRS` setting is a tuple of filesystem directories to check when loading static files. It's a search path that is by default empty. See the :setting:`STATICFILES_DIRS` docs how to extend this list of additional paths."
msgstr ""

#: ../../howto/static-files.txt:49
# 852ee7214ec6422fbd091c0bd476ef45
msgid "Additionally, see the documentation for the :setting:`STATICFILES_FINDERS` setting for details on how ``staticfiles`` finds your files."
msgstr ""

#: ../../howto/static-files.txt:52
# b4a18c73d48a42669ab730ac806fcc44
msgid "Make sure that ``django.contrib.staticfiles`` is included in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/static-files.txt:55
# 9355fe9db02b46c58ad07639d24fca2c
msgid "For :ref:`local development<staticfiles-development>`, if you are using :ref:`runserver<staticfiles-runserver>` or adding :ref:`staticfiles_urlpatterns<staticfiles-development>` to your URLconf, you're done with the setup -- your static files will automatically be served at the default (for :djadmin:`newly created<startproject>` projects) :setting:`STATIC_URL` of ``/static/``."
msgstr ""

#: ../../howto/static-files.txt:63
# 4164084f48f441a8984f723f8ec14963
msgid "You'll probably need to refer to these files in your templates. The easiest method is to use the included context processor which allows template code like:"
msgstr ""

#: ../../howto/static-files.txt:71
# b1aaca4ca7854924b0e8e2040bea77b3
msgid "See :ref:`staticfiles-in-templates` for more details, **including** an alternate method using a template tag."
msgstr ""

#: ../../howto/static-files.txt:75
# 0e99ab659425416998802a8938b7ca4d
msgid "Deploying static files in a nutshell"
msgstr ""

#: ../../howto/static-files.txt:77
# 713609989fa842969179b9f45b1c6ae4
msgid "When you're ready to move out of local development and deploy your project:"
msgstr ""

#: ../../howto/static-files.txt:79
# 04f6458573814ae4965244bb96ff6fdc
msgid "Set the :setting:`STATIC_URL` setting to the public URL for your static files (in most cases, the default value of ``/static/`` is just fine)."
msgstr ""

#: ../../howto/static-files.txt:82
# a30228368fce457285506d3e5be1ce6c
msgid "Set the :setting:`STATIC_ROOT` setting to point to the filesystem path you'd like your static files collected to when you use the :djadmin:`collectstatic` management command. For example::"
msgstr ""

#: ../../howto/static-files.txt:88
# b199b8d13e5a424d9c5eaa3c3232de02
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

#: ../../howto/static-files.txt:92
# da8036e24c9c45ef86af3e126aa8a365
msgid "This'll churn through your static file storage and copy them into the directory given by :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files.txt:95
# ab04d99eb41f48108c147781b90828b2
msgid "Deploy those files by configuring your webserver of choice to serve the files in :setting:`STATIC_ROOT` at :setting:`STATIC_URL`."
msgstr ""

#: ../../howto/static-files.txt:98
# a3b7f7e6c2e046c7a9a9eef079ae7c72
msgid ":ref:`staticfiles-production` covers some common deployment strategies for static files."
msgstr ""

#: ../../howto/static-files.txt:101
# 65ac2d4dea314383bf11810c8eac2511
msgid "Those are the **basics**. For more details on common configuration options, read on; for a detailed reference of the settings, commands, and other bits included with the framework see :doc:`the staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

#: ../../howto/static-files.txt:108
# 99fa6b87e1874746a9416829f1bc69fc
msgid "In previous versions of Django, it was common to place static assets in :setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` app is to make it easier to keep static files separate from user-uploaded files."
msgstr ""

#: ../../howto/static-files.txt:114
# 3c10a987c726433eb0c223a1e97db95f
msgid "For this reason, you need to make your :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` different from your :setting:`STATIC_ROOT` and :setting:`STATIC_URL`. You will need to arrange for serving of files in :setting:`MEDIA_ROOT` yourself; ``staticfiles`` does not deal with user-uploaded files at all. You can, however, use :func:`django.views.static.serve` view for serving :setting:`MEDIA_ROOT` in development; see :ref:`staticfiles-other-directories`."
msgstr ""

#: ../../howto/static-files.txt:125
# 162df2eaa377422e93ea0391688d20ae
msgid "Referring to static files in templates"
msgstr ""

#: ../../howto/static-files.txt:127
# 2d642af64b724cfe8da2dd325a1aac05
msgid "At some point, you'll probably need to link to static files in your templates. You could, of course, simply hardcode the path to you assets in the templates:"
msgstr ""

#: ../../howto/static-files.txt:134
# d8be4360e8c94c41a5214e0c6d6b8950
msgid "Of course, there are some serious problems with this: it doesn't work well in development, and it makes it *very* hard to change where you've deployed your static files. If, for example, you wanted to switch to using a content delivery network (CDN), then you'd need to change more or less every single template."
msgstr ""

#: ../../howto/static-files.txt:140
# 8aeae7f1d9034b90821bbcbe70cedf5e
msgid "A far better way is to use the value of the :setting:`STATIC_URL` setting directly in your templates. This means that a switch of static files servers only requires changing that single value. Much better!"
msgstr ""

#: ../../howto/static-files.txt:144
# f38fb20dcdf74b1887ecf92cca5263d0
msgid "Django includes multiple built-in ways of using this setting in your templates: a context processor and a template tag."
msgstr ""

#: ../../howto/static-files.txt:148
# 542b18773d70461688c8e67930a65a60
msgid "With a context processor"
msgstr ""

#: ../../howto/static-files.txt:150
# f14f09316f354adcb87c70d51deed7ec
msgid "The included context processor is the easy way. Simply make sure ``'django.core.context_processors.static'`` is in your :setting:`TEMPLATE_CONTEXT_PROCESSORS`. It's there by default, and if you're editing that setting by hand it should look something like::"
msgstr ""

#: ../../howto/static-files.txt:164
# 624dfcf74dc345f9bd3bb8a88641972e
msgid "Once that's done, you can refer to :setting:`STATIC_URL` in your templates:"
msgstr ""

#: ../../howto/static-files.txt:170
# dbef2f27bb9e41988b8379a778d495d6
msgid "If ``{{ STATIC_URL }}`` isn't working in your template, you're probably not using :class:`~django.template.RequestContext` when rendering the template."
msgstr ""

#: ../../howto/static-files.txt:173
# 03d2dfda21ba40a4b8f4f93eb6dc57c3
msgid "As a brief refresher, context processors add variables into the contexts of every template. However, context processors require that you use :class:`~django.template.RequestContext` when rendering templates. This happens automatically if you're using a :doc:`generic view </ref/class-based-views/index>`, but in views written by hand you'll need to explicitly use ``RequestContext`` To see how that works, and to read more details, check out :ref:`subclassing-context-requestcontext`."
msgstr ""

#: ../../howto/static-files.txt:181
# b9afb6b416a74fc68bb27df15e7e45f6
msgid "Another option is the :ttag:`get_static_prefix` template tag that is part of Django's core."
msgstr ""

#: ../../howto/static-files.txt:185
# 43178ba944fc4211ae80ea76078e2f19
msgid "With a template tag"
msgstr ""

#: ../../howto/static-files.txt:187
# 3a230d78b719411ab10a5533367fb15b
msgid "The more powerful tool is the :ttag:`static<staticfiles-static>` template tag. It builds the URL for the given relative path by using the configured :setting:`STATICFILES_STORAGE` storage."
msgstr ""

#: ../../howto/static-files.txt:196
# 062d872522704422b253aa84cf7fb4f6
msgid "It is also able to consume standard context variables, e.g. assuming a ``user_stylesheet`` variable is passed to the template:"
msgstr ""

#: ../../howto/static-files.txt:206
# 1fb23ea98db7443f8a0070c8a089df45
msgid "There is also a template tag named :ttag:`static` in Django's core set of :ref:`built in template tags<ref-templates-builtins-tags>` which has the same argument signature but only uses `urlparse.urljoin()`_ with the :setting:`STATIC_URL` setting and the given path. This has the disadvantage of not being able to easily switch the storage backend without changing the templates, so in doubt use the ``staticfiles`` :ttag:`static<staticfiles-static>` template tag."
msgstr ""

#: ../../howto/static-files.txt:220
# b52a82482c64410cba67e814ada2462c
msgid "Serving static files in development"
msgstr ""

#: ../../howto/static-files.txt:222
# 1896eac3cf444bafa314057dfac06163
msgid "The static files tools are mostly designed to help with getting static files successfully deployed into production. This usually means a separate, dedicated static file server, which is a lot of overhead to mess with when developing locally. Thus, the ``staticfiles`` app ships with a **quick and dirty helper view** that you can use to serve files locally in development."
msgstr ""

#: ../../howto/static-files.txt:229
# 204fc78518ba4fbb9af816582d405b3e
msgid "This view is automatically enabled and will serve your static files at :setting:`STATIC_URL` when you use the built-in :ref:`runserver<staticfiles-runserver>` management command."
msgstr ""

#: ../../howto/static-files.txt:233
# 87625ce28bcb4b75a943ebf9190fd594
msgid "To enable this view if you are using some other server for local development, you'll add a couple of lines to your URLconf. The first line goes at the top of the file, and the last line at the bottom::"
msgstr ""

#: ../../howto/static-files.txt:243
# 42104791fcd346b9a3ab41da64332a90
msgid "This will inspect your :setting:`STATIC_URL` setting and wire up the view to serve static files accordingly. Don't forget to set the :setting:`STATICFILES_DIRS` setting appropriately to let ``django.contrib.staticfiles`` know where to look for files additionally to files in app directories."
msgstr ""

#: ../../howto/static-files.txt:251
# dbc10b76fac645c691ae36034d79a94c
msgid "This will only work if :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../howto/static-files.txt:253
# 424e84017ec04edf874c39019b7b5a0a
msgid "That's because this view is **grossly inefficient** and probably **insecure**. This is only intended for local development, and should **never be used in production**."
msgstr ""

#: ../../howto/static-files.txt:257
# 0bb58823935a4edcb89f46edff4f3a39
msgid "Additionally, when using ``staticfiles_urlpatterns`` your :setting:`STATIC_URL` setting can't be empty or a full URL, such as ``http://static.example.com/``."
msgstr ""

#: ../../howto/static-files.txt:261
# 7e673b1622df479f89ccd6546c4bcf26
msgid "For a few more details on how the ``staticfiles`` can be used during development, see :ref:`staticfiles-development-view`."
msgstr ""

#: ../../howto/static-files.txt:267
# 981a08e5745e484cb4c95e575439abfe
msgid "Serving other directories"
msgstr ""

#: ../../howto/static-files.txt:272
# cba9207c44e94de7a909f8bd16f33787
msgid "There may be files other than your project's static assets that, for convenience, you'd like to have Django serve for you in local development. The :func:`~django.views.static.serve` view can be used to serve any directory you give it. (Again, this view is **not** hardened for production use, and should be used only as a development aid; you should serve these files in production using a real front-end webserver)."
msgstr ""

#: ../../howto/static-files.txt:279
# 7e4994d93cff4443ae2c85e654fc2d3f
msgid "The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. ``staticfiles`` is intended for static assets and has no built-in handling for user-uploaded files, but you can have Django serve your :setting:`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""

#: ../../howto/static-files.txt:295
# 5fba2c92627341dea0c8453e289d7703
msgid "Note, the snippet assumes your :setting:`MEDIA_URL` has a value of ``'/media/'``. This will call the :func:`~django.views.static.serve` view, passing in the path from the URLconf and the (required) ``document_root`` parameter."
msgstr ""

#: ../../howto/static-files.txt:303
# 097fc959d085432788f5c4157c0613a6
msgid "Since it can become a bit cumbersome to define this URL pattern, Django ships with a small URL helper function :func:`~django.conf.urls.static.static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and a dotted path to a view, such as ``'django.views.static.serve'``. Any other function parameter will be transparently passed to the view."
msgstr ""

#: ../../howto/static-files.txt:310
# 7dac926a76d346038b6629a22c153e62
msgid "An example for serving :setting:`MEDIA_URL` (``'/media/'``) during development::"
msgstr ""

#: ../../howto/static-files.txt:322
# 6932e0ca468b4d06bbfea28e3eb1ecee
msgid "This helper function will only be operational in debug mode and if the given prefix is local (e.g. ``/static/``) and not a URL (e.g. ``http://static.example.com/``)."
msgstr ""

#: ../../howto/static-files.txt:329
# c202affefb5b4c19be680ed220ba2912
msgid "Serving static files in production"
msgstr ""

#: ../../howto/static-files.txt:331
# 4d511fc521dc44fda2207444ec1c1ba0
msgid "The basic outline of putting static files into production is simple: run the :djadmin:`collectstatic` command when static files change, then arrange for the collected static files directory (:setting:`STATIC_ROOT`) to be moved to the static file server and served."
msgstr ""

#: ../../howto/static-files.txt:336
# cec23750b77f42dbb9c5a18fd298dc28
msgid "Of course, as with all deployment tasks, the devil's in the details. Every production setup will be a bit different, so you'll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

#: ../../howto/static-files.txt:341
# bbf45b6e23bd496693ad1f10ad186243
msgid "Serving the app and your static files from the same server"
msgstr ""

#: ../../howto/static-files.txt:343
# 5e6690f51f554f63a6e7f00003b9a56c
msgid "If you want to serve your static files from the same server that's already serving your site, the basic outline gets modified to look something like:"
msgstr ""

#: ../../howto/static-files.txt:346
# a02f072d2fa345afbac57ebce19fa584
msgid "Push your code up to the deployment server."
msgstr ""

#: ../../howto/static-files.txt:347
# f424e8a012864cc08ee8c276165df217
msgid "On the server, run :djadmin:`collectstatic` to copy all the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files.txt:349
# c9b34eb974ff48dea6e80696f990a3a9
msgid "Point your web server at :setting:`STATIC_ROOT`. For example, here's :ref:`how to do this under Apache and mod_wsgi <serving-files>`."
msgstr ""

#: ../../howto/static-files.txt:352
# 45f14bfc8719444baae5bdb70b2bce65
msgid "You'll probably want to automate this process, especially if you've got multiple web servers. There's any number of ways to do this automation, but one option that many Django developers enjoy is `Fabric`__."
msgstr ""

#: ../../howto/static-files.txt:358
# ac04a9bd99574664afcc45f8a436827e
msgid "Below, and in the following sections, we'll show off a few example fabfiles (i.e. Fabric scripts) that automate these file deployment options. The syntax of a fabfile is fairly straightforward but won't be covered here; consult `Fabric's documentation`__, for a complete explanation of the syntax.."
msgstr ""

#: ../../howto/static-files.txt:365
# e874802826ca4afe9deedca1f4750ca6
msgid "So, a fabfile to deploy static files to a couple of web servers might look something like::"
msgstr ""

#: ../../howto/static-files.txt:381
# 914b0dc33da44aefb372d44959f2f2dd
msgid "Serving static files from a dedicated server"
msgstr ""

#: ../../howto/static-files.txt:383
# 3a354a8b80d144eeb28baa4f84b4d918
msgid "Most larger Django apps use a separate Web server -- i.e., one that's not also running Django -- for serving static files. This server often runs a different type of web server -- faster but less full-featured. Some good choices are:"
msgstr ""

#: ../../howto/static-files.txt:399
# ec7b1c3db10941b0952a80895754ce86
msgid "Configuring these servers is out of scope of this document; check each server's respective documentation for instructions."
msgstr ""

#: ../../howto/static-files.txt:402
# b78058140ad040a78c4190d26b8b5045
msgid "Since your static file server won't be running Django, you'll need to modify the deployment strategy to look something like:"
msgstr ""

#: ../../howto/static-files.txt:405
# 2b9b0b762b2b44638dde9f26d1d899e7
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

#: ../../howto/static-files.txt:406
# 540d16571e2f4fe7b14aad7b3da762a0
msgid "Push your local :setting:`STATIC_ROOT` up to the static file server into the directory that's being served. ``rsync`` is a good choice for this step since it only needs to transfer the bits of static files that have changed."
msgstr ""

#: ../../howto/static-files.txt:411
# 75c68823358c4667ae675018250b99a5
msgid "Here's how this might look in a fabfile::"
msgstr ""

#: ../../howto/static-files.txt:434
# 3355fabbf28844a790d114ccece067d9
msgid "Serving static files from a cloud service or CDN"
msgstr ""

#: ../../howto/static-files.txt:436
# a1766a1ba1ba452fb9ac6945ac2dbc6f
msgid "Another common tactic is to serve static files from a cloud storage provider like Amazon's S3__ and/or a CDN (content delivery network). This lets you ignore the problems of serving static files, and can often make for faster-loading webpages (especially when using a CDN)."
msgstr ""

#: ../../howto/static-files.txt:441
# 51bca33e779248cf8a39420f74c879a9
msgid "When using these services, the basic workflow would look a bit like the above, except that instead of using ``rsync`` to transfer your static files to the server you'd need to transfer the static files to the storage provider or CDN."
msgstr ""

#: ../../howto/static-files.txt:445
# 6a7ea70b14d241238f09c3049356e779
msgid "There's any number of ways you might do this, but if the provider has an API a :doc:`custom file storage backend </howto/custom-file-storage>` will make the process incredibly simple. If you've written or are using a 3rd party custom storage backend, you can tell :djadmin:`collectstatic` to use it by setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

#: ../../howto/static-files.txt:451
# 9dbc7cba5ad9445e967443c9abba63f2
msgid "For example, if you've written an S3 storage backend in ``myproject.storage.S3Storage`` you could use it with::"
msgstr ""

#: ../../howto/static-files.txt:456
# 3ef53ac6f9214ec8b41f1ce303728029
msgid "Once that's done, all you have to do is run :djadmin:`collectstatic` and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, it could be as simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

#: ../../howto/static-files.txt:461
# 3d8e8b9b97be4b449455b1fa3767ccb8
msgid "For details on how you'd write one of these backends, :doc:`/howto/custom-file-storage`."
msgstr ""

#: ../../howto/static-files.txt:466
# 11bb1b8f4274411c8fcddbe4c9b27939
msgid "The `django-storages`__ project is a 3rd party app that provides many storage backends for many common file storage APIs (including `S3`__)."
msgstr ""

#: ../../howto/static-files.txt:474
# b080c688522140ed842416ea89c4bca0
msgid "Upgrading from ``django-staticfiles``"
msgstr ""

#: ../../howto/static-files.txt:476
# b0d847b6a1454a54b08bb8c67ab4e530
msgid "``django.contrib.staticfiles`` began its life as `django-staticfiles`_. If you're upgrading from `django-staticfiles`_ older than 1.0 (e.g. 0.3.4) to ``django.contrib.staticfiles``, you'll need to make a few changes:"
msgstr ""

#: ../../howto/static-files.txt:480
# aa56c54488034a00a0953a3737c25570
msgid "Application files should now live in a ``static`` directory in each app (`django-staticfiles`_ used the name ``media``, which was slightly confusing)."
msgstr ""

#: ../../howto/static-files.txt:484
# 70bd92fc0d814ebea1c36e7d943231a4
msgid "The management commands ``build_static`` and ``resolve_static`` are now called :djadmin:`collectstatic` and :djadmin:`findstatic`."
msgstr ""

#: ../../howto/static-files.txt:487
# 1c08bcf117e945f2b0a0b04f1db19871
msgid "The settings ``STATICFILES_PREPEND_LABEL_APPS``, ``STATICFILES_MEDIA_DIRNAMES`` and ``STATICFILES_EXCLUDED_APPS`` were removed."
msgstr ""

#: ../../howto/static-files.txt:491
# aec6c821296245dda034927bfc0e687e
msgid "The setting ``STATICFILES_RESOLVERS`` was removed, and replaced by the new :setting:`STATICFILES_FINDERS`."
msgstr ""

#: ../../howto/static-files.txt:494
# c332c45b0aae4e58812002605f1d8e93
msgid "The default for :setting:`STATICFILES_STORAGE` was renamed from ``staticfiles.storage.StaticFileStorage`` to ``staticfiles.storage.StaticFilesStorage``"
msgstr ""

#: ../../howto/static-files.txt:498
# 8da40d6b5885458081437f6c25d4fb79
msgid "If using :ref:`runserver<staticfiles-runserver>` for local development (and the :setting:`DEBUG` setting is ``True``), you no longer need to add anything to your URLconf for serving static files in development."
msgstr ""

#: ../../howto/static-files.txt:503
# 405fb186ae6d433d9e4a64d9e572a196
msgid "Learn more"
msgstr ""

#: ../../howto/static-files.txt:505
# 3ba8fe5a8f6448439472b2a361ecda71
msgid "This document has covered the basics and some common usage patterns. For complete details on all the settings, commands, template tags, and other pieces include in ``django.contrib.staticfiles``, see :doc:`the staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

