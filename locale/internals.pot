# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../internals/committers.txt:3
# 641f5204b527483f959d4a431cf49080
msgid "Django committers"
msgstr ""

#: ../../internals/committers.txt:6
# fb3c79073e6b47ef915e34d68b36875e
msgid "The original team"
msgstr ""

#: ../../internals/committers.txt:8
# 383c4dc466c74c35827e2c7b1c1fb023
msgid "Django originally started at World Online, the Web department of the `Lawrence Journal-World`_ of Lawrence, Kansas, USA."
msgstr ""

#: ../../internals/committers.txt:12
# a40d052367eb41448ce82201f9f8789c
msgid "Adrian is a Web developer with a background in journalism. He's known in journalism circles as one of the pioneers of \"journalism via computer programming\", and in technical circles as \"the guy who invented Django.\""
msgstr ""

#: ../../internals/committers.txt:16
# f32bb1f16e6a4a649611f6d24fea2f5a
msgid "He was lead developer at World Online for 2.5 years, during which time Django was developed and implemented on World Online's sites. He's now the leader and founder of EveryBlock_, a \"news feed for your block\"."
msgstr ""

#: ../../internals/committers.txt:20
# 875f2d4d03f242efbbab1420f9b1fc97
msgid "Adrian lives in Chicago, USA."
msgstr ""

#: ../../internals/committers.txt:23
# 9c986bcc32ea47d4846c3bd22930d136
msgid "Simon is a well-respected Web developer from England. He had a one-year internship at World Online, during which time he and Adrian developed Django from scratch. The most enthusiastic Brit you'll ever meet, he's passionate about best practices in Web development and maintains a well-read `web-development blog`_."
msgstr ""

#: ../../internals/committers.txt:29
# b569c5b546c04d32afccdf1781e79044
msgid "Simon lives in Brighton, England."
msgstr ""

#: ../../internals/committers.txt:32
# 30a38b5a7f5d43cc9ac00762b5f91fc6
msgid "Jacob is a partner at `Revolution Systems`_ which provides support services around Django and related open source technologies. A good deal of Jacob's work time is devoted to working on Django. Jacob previously worked at World Online, where Django was invented, where he was the lead developer of Ellington, a commercial Web publishing platform for media companies."
msgstr ""

#: ../../internals/committers.txt:38
# ef6227316343470396b4db63f8ca0bcf
msgid "Jacob lives in Lawrence, Kansas, USA."
msgstr ""

#: ../../internals/committers.txt:41
# 60ca9acdac90469b9d51fe1ac323e296
msgid "Wilson's design-fu is what makes Django look so nice. He designed the Web site you're looking at right now, as well as Django's acclaimed admin interface. Wilson is the designer for EveryBlock_."
msgstr ""

#: ../../internals/committers.txt:45
# 9782d1198e3840c99759d76bf1899a1c
msgid "Wilson lives in San Francisco, USA."
msgstr ""

#: ../../internals/committers.txt:57
# 6d215a8a955645349c7f39989b9f60a8
msgid "Current developers"
msgstr ""

#: ../../internals/committers.txt:59
# 996e9e04edaf47e8abac7f5ddb1671dd
msgid "Currently, Django is led by a team of volunteers from around the globe."
msgstr ""

#: ../../internals/committers.txt:64
# 426d32be86a54e01ba555efd06147020
msgid "BDFLs"
msgstr ""

#: ../../internals/committers.txt:66
# 13c7815aa4ea4b54b60486ef672ed433
msgid "Adrian and Jacob are the Co-`Benevolent Dictators for Life`_ of Django. When \"rough consensus and working code\" fails, they're the ones who make the tough decisions."
msgstr ""

#: ../../internals/committers.txt:73
# c27fea73956a47d78c741093e188f037
msgid "Core developers"
msgstr ""

#: ../../internals/committers.txt:75
# 4019840179364622891036d683468d65
msgid "These are the folks who have a long history of contributions, a solid track record of being helpful on the mailing lists, and a proven desire to dedicate serious time to Django. In return, they've been granted the coveted commit bit, and have free rein to hack on all parts of Django."
msgstr ""

#: ../../internals/committers.txt:81
# 3cbfa570333340dd8d14ae6d1c09971c
msgid "Malcolm originally wanted to be a mathematician, somehow ended up a software developer. He's contributed to many Open Source projects, has served on the board of the GNOME foundation, and will kick your ass at chess."
msgstr ""

#: ../../internals/committers.txt:85
# 3eb0c546e507470681640119421b1fcb
msgid "When he's not busy being an International Man of Mystery, Malcolm lives in Sydney, Australia."
msgstr ""

#: ../../internals/committers.txt:89
# f37a3acc0a8d45aa85bb8202a6110d00
msgid "Russell studied physics as an undergraduate, and studied neural networks for his PhD. His first job was with a startup in the defense industry developing simulation frameworks. Over time, mostly through work with Django, he's become more involved in Web development."
msgstr ""

#: ../../internals/committers.txt:94
# 4a63aa8202b94e5ea004208eac882ce8
msgid "Russell has helped with several major aspects of Django, including a couple major internal refactorings, creation of the test system, and more."
msgstr ""

#: ../../internals/committers.txt:97
# 6984fef828094b52a2bbb57a9e0ed335
msgid "Russell lives in the most isolated capital city in the world â€” Perth, Australia."
msgstr ""

#: ../../internals/committers.txt:103
# 67934d7fe86b44c8a6d9bcccd6ea9fd7
msgid "Joseph is currently a developer at EveryBlock_, and previously worked for the Lawrence Journal-World where he built most of the backend for their Marketplace site. He often disappears for several days into the woods, attempts to teach himself computational linguistics, and annoys his neighbors with his Charango_ playing."
msgstr ""

#: ../../internals/committers.txt:109
# 35beaefc25c64905b54f48ef5046ab66
msgid "Joseph's first contribution to Django was a series of improvements to the authorization system leading up to support for pluggable authorization. Since then, he's worked on the new forms system, its use in the admin, and many other smaller improvements."
msgstr ""

#: ../../internals/committers.txt:114
# 073abff87c4d465ebff3a7ca624936f2
msgid "Joseph lives in Chicago, USA."
msgstr ""

#: ../../internals/committers.txt:119
# 71b6e035ca024499af30a81d1fbc697d
msgid "At University Luke studied physics and Materials Science and also met `Michael Meeks`_ who introduced him to Linux and Open Source, re-igniting an interest in programming.  Since then he has contributed to a number of Open Source projects and worked professionally as a developer."
msgstr ""

#: ../../internals/committers.txt:125
# 01bc0126248244a882714db0950a43fc
msgid "Luke has contributed many excellent improvements to Django, including database-level improvements, the CSRF middleware and many unit tests."
msgstr ""

#: ../../internals/committers.txt:129
# 58d6b56609de41b6b9f7fa3011ebf50e
msgid "Luke currently works for a church in Bradford, UK, and part-time as a freelance developer."
msgstr ""

#: ../../internals/committers.txt:136
# 682031b24a19444483c0786e8b6e0d00
msgid "Brian is currently the tech lead at Eldarion_ managing and developing Django / Pinax_ based Web sites. He enjoys learning more about programming languages and system architectures and contributing to open source projects. Brian is the host of the `Django Dose`_ podcasts."
msgstr ""

#: ../../internals/committers.txt:141
# 60069a821f5c452cb400a5cde9b1ee2d
msgid "Brian helped immensely in getting Django's \"newforms-admin\" branch finished in time for Django 1.0; he's now a full committer, continuing to improve on the admin and forms system."
msgstr ""

#: ../../internals/committers.txt:145
# 546d4591fd4246d3aee13a029a6318e2
msgid "Brian lives in Denver, Colorado, USA."
msgstr ""

#: ../../internals/committers.txt:153
# 4395130e72e4400fa0206a2d88885b7b
msgid "Gary starting contributing patches to Django in 2006 while developing Web applications for `The University of Texas`_ (UT).  Since, he has made contributions to the email and forms systems, as well as many other improvements and code cleanups throughout the code base."
msgstr ""

#: ../../internals/committers.txt:158
# 4a59a3f4bf83475f920d09066da90f58
msgid "Gary is currently a developer and software engineering graduate student at UT, where his dedication to spreading the ways of Python and Django never ceases."
msgstr ""

#: ../../internals/committers.txt:162
# af801db2fab4482ba591ba54329d2036
msgid "Gary lives in Austin, Texas, USA."
msgstr ""

#: ../../internals/committers.txt:168
# af1dd2e4a9ce4cfe967ba570728f7e13
msgid "Justin Bronn is a computer scientist and attorney specializing in legal topics related to intellectual property and spatial law."
msgstr ""

#: ../../internals/committers.txt:171
# 62ce4287a25e46daa3c793795743f26a
msgid "In 2007, Justin began developing ``django.contrib.gis`` in a branch, a.k.a. GeoDjango_, which was merged in time for Django 1.0.  While implementing GeoDjango, Justin obtained a deep knowledge of Django's internals including the ORM, the admin, and Oracle support."
msgstr ""

#: ../../internals/committers.txt:176
# 8876454e463f43c29bb0e5a89f6b5d49
msgid "Justin lives in San Francisco, CA."
msgstr ""

#: ../../internals/committers.txt:181
# 04b070c0ea1b48aeaa1ea3c8b05864a2
msgid "Karen has a background in distributed operating systems (graduate school), communications software (industry) and crossword puzzle construction (freelance).  The last of these brought her to Django, in late 2006, when she set out to put a Web front-end on her crossword puzzle database. That done, she stuck around in the community answering questions, debugging problems, etc. -- because coding puzzles are as much fun as word puzzles."
msgstr ""

#: ../../internals/committers.txt:188
# c26598f2955643e4801690179bfab70c
msgid "Karen lives in Apex, NC, USA."
msgstr ""

#: ../../internals/committers.txt:191
# cff9e97334c34ca4a25fe6640ca73492
msgid "Jannis graduated in media design from `Bauhaus-University Weimar`_, is the author of a number of pluggable Django apps and likes to contribute to Open Source projects like virtualenv_ and pip_."
msgstr ""

#: ../../internals/committers.txt:195
# 1cb9a35d8ff445768622656b4f8b1ed5
msgid "He has worked on Django's auth, admin and staticfiles apps as well as the form, core, internationalization and test systems. He currently works as the lead engineer at Gidsy_."
msgstr ""

#: ../../internals/committers.txt:199
# aeb89b158f9f4f4c969d8c4d17da7ef9
msgid "Jannis lives in Berlin, Germany."
msgstr ""

#: ../../internals/committers.txt:208
# a164015457e3449994d66bbbb6a610b0
msgid "James is the lead developer of Pinax_ and the CEO and founder of Eldarion_. He has been doing open source software since 1993, Python since 1998 and Django since 2006. He serves on the board of the Python Software Foundation and is currently on a leave of absence from a PhD in linguistics."
msgstr ""

#: ../../internals/committers.txt:214
# 8321dcbd2d7942229f7d2a500e3c8e9d
msgid "James currently lives in Boston, MA, USA but originally hails from Perth, Western Australia where he attended the same high school as Russell Keith-Magee."
msgstr ""

#: ../../internals/committers.txt:221
# 026732cbf2ce48eaa8dd680f15abf431
msgid "Alex is a software engineer working at Rdio_. He found Django in 2007 and has been addicted ever since he found out you don't need to write out your forms by hand. He has a small obsession with compilers.  He's contributed to the ORM, forms, admin, and other components of Django."
msgstr ""

#: ../../internals/committers.txt:226
# de096e8da15441da95dd5aa40a2feb38
msgid "Alex lives in San Francisco, CA, USA."
msgstr ""

#: ../../internals/committers.txt:232
# 4ab1d2739c654a02bf35a9ac7e8927f5
msgid "Andrew is a freelance Python developer and tinkerer, and has been developing against Django since 2007. He graduated from Oxford University with a degree in Computer Science, and has become most well known in the Django community for his work on South, the schema migrations library."
msgstr ""

#: ../../internals/committers.txt:238
# cb98a1c3e7374efca604ca6894c1f2be
msgid "Andrew lives in London, UK."
msgstr ""

#: ../../internals/committers.txt:243
# b231c36e92d740aea81ad5ac4296be5f
msgid "Carl has been working with Django since 2007 (long enough to remember queryset-refactor, but not magic-removal), and works as a freelance developer with OddBird_.  He became a Django contributor by accident, because fixing bugs is more interesting than working around them."
msgstr ""

#: ../../internals/committers.txt:248
# 9c0392ec586b4ec3a87bccce9545d5f4
msgid "Carl lives in Rapid City, SD, USA."
msgstr ""

#: ../../internals/committers.txt:254
# a31a5bd7115e4b18b602ef7e17fd5b3f
msgid "Ramiro has been reading Django source code and submitting patches since mid-2006 after researching for a Python Web tool with matching awesomeness and being pointed to it by an old ninja."
msgstr ""

#: ../../internals/committers.txt:258
# 78c5afbf328e413cb906dd6f79b394a4
msgid "A software developer in the electronic transactions industry, he is a living proof of the fact that anyone with enough enthusiasm can contribute to Django, learning a lot and having fun in the process."
msgstr ""

#: ../../internals/committers.txt:262
# 1da30ed7d04a47c586dceb926dd5f9cc
msgid "Ramiro lives in CÃ³rdoba, Argentina."
msgstr ""

#: ../../internals/committers.txt:265
# 3067ddeca35f43709098555fb0510289
msgid "Chris has been submitting patches and suggesting crazy ideas for Django since early 2006. An advocate for community involvement and a long-term triager, he is still often found answering questions in the #django IRC channel."
msgstr ""

#: ../../internals/committers.txt:270
# 0edcb8dc0d31491ca1bf5cd9e645eace
msgid "Chris lives in Napier, New Zealand (adding to the pool of Oceanic core developers). He works remotely as a developer for `Lincoln Loop`_."
msgstr ""

#: ../../internals/committers.txt:277
# 794c2b17887240a2828ad631d8aa4b1d
msgid "Honza first discovered Django in 2006 and started using it right away, first for school and personal projects and later in his full time job. He contributed various patches and fixes mostly to the newforms library, newforms admin and, through participation in the Google Summer of Code project, assisted in creating the :ref:`model validation <validating-objects>` functionality."
msgstr ""

#: ../../internals/committers.txt:284
# 6809d2bb08f14bbd803b8c05443f5996
msgid "He is currently working for `Whiskey Media`_ in San Francisco developing awesome sites running on pure Django."
msgstr ""

#: ../../internals/committers.txt:290
# 1c1e6f48a47640d0acbd48d9ec6e11b0
msgid "As a self-professed design geek, Idan was initially attracted to Django sometime between magic-removal and queryset-refactor. Formally trained as a software engineer, Idan straddles the worlds of design and code, jack of two trades and master of none. He is passionate about usability and finding novel ways to extract meaning from data, and is a longtime photographer_."
msgstr ""

#: ../../internals/committers.txt:297
# 65b9a138a4ae44e189ca43c7ce64bb1c
msgid "Idan previously accepted freelance work under the Pixane_ imprint, but now splits his days between his startup, Skills_, and beautifying all things Django and Python."
msgstr ""

#: ../../internals/committers.txt:307
# 1993e905dfd242bf9c51442ae5cefb7c
msgid "Paul found Django in 2008 while looking for a more structured approach to web programming. He stuck around after figuring out that the developers of Django had already invented many of the wheels he needed. His passion for breaking (and then fixing) things led to his current role working to maintain and improve the security of Django."
msgstr ""

#: ../../internals/committers.txt:314
# 2423fd891fe44c2194be130b42ab4e86
msgid "Paul works in Berkeley, California as a `web developer`_ and `security consultant`_."
msgstr ""

#: ../../internals/committers.txt:322
# a06c414dc98843148d8a4ecaf854f90a
msgid "Julien has a background in software engineering and human-computer interaction. As a Web developer, he enjoys tinkering with the backend as much as designing and coding user interfaces. Julien discovered Django in 2007 while doing his PhD in Computing Sciences. Since then he has contributed patches to various components of the framework, in particular the admin. Julien was a co-founder of the `Interaction Consortium`_. He now works at Odopod_, a digital agency based in San Francisco, CA, USA."
msgstr ""

#: ../../internals/committers.txt:335
# 9302c59d1c9640ef86599cdaea36cc56
msgid "Aymeric is an engineer with a background in mathematics and computer science. He chose Django because he believes that software should be simple, explicit and tested. His perfectionist tendencies quickly led him to triage tickets and contribute patches."
msgstr ""

#: ../../internals/committers.txt:340
# b5ffb9607ebd40c0aa30ec5aab64e959
msgid "Aymeric has a pragmatic approach to software engineering, can't live without a continuous integration server, and likes proving that Django is a good choice for enterprise software."
msgstr ""

#: ../../internals/committers.txt:344
# 886ae427e62f4fbd8c455fc66ea1fa06
msgid "He works in a `management consulting company`_ in Paris, France."
msgstr ""

#: ../../internals/committers.txt:350
# 41f99cfe73f7442b90b34d89bc8a0756
msgid "Claude is a former teacher who fell in love with free software at the beginning of the 21st century. He's now working as freelancer in Web development in his native Switzerland. He has found in Django a perfect match for his needs of a stable, clean, documented and well-maintained Web framework."
msgstr ""

#: ../../internals/committers.txt:356
# b96f7ceea8f94c35ba292c319f3994b9
msgid "He's also helping the GNOME Translation Project as maintainer of the Django-based `l10n.gnome.org`_."
msgstr ""

#: ../../internals/committers.txt:363
# b54f1c031abb469e80e52e9b3ff0483a
msgid "Anssi works as a developer at Finnish National Institute for Health and Welfare. He is also a computer science student at Aalto University. In his work he uses Django for developing internal business applications and sees Django as a great match for that use case."
msgstr ""

#: ../../internals/committers.txt:368
# 10811f119bc941c7bfdd3ec6fd35371f
msgid "Anssi is interested in developing the object relational mapper (ORM) and all related features. He's also a fan of benckmarking and he tries keep Django as fast as possible."
msgstr ""

#: ../../internals/committers.txt:373
# f3a341a650cf4c6b8ef9df30c5de058e
msgid "Florian is currently studying Physics at the `Graz University of Technology`_. Soon after he started using Django he joined the `Ubuntuusers webteam`_ to work on *Inyoka*, the software powering the whole Ubuntusers site."
msgstr ""

#: ../../internals/committers.txt:377
# 5e92b285d55248bd83e2ff31d007257c
msgid "For the time beeing he lives in Graz, Austria (not Australia ;))."
msgstr ""

#: ../../internals/committers.txt:383
# 0b052566da214231a5e90fc7d22754ff
msgid "Jeremy was rescued from corporate IT drudgery by Free Software and, in part, Django.  Many of Jeremy's interests center around access to information."
msgstr ""

#: ../../internals/committers.txt:386
# ac998cc82e614e5dba3950c146eb2d78
msgid "Jeremy was the lead developer of Pegasus News, one of the first uses of Django outside World Online, and has since joined Votizen, a startup intent on reducing the influence of money in politics."
msgstr ""

#: ../../internals/committers.txt:390
# 9b31dbe8a95f4242b51bd4019b1c39a5
msgid "He serves as DSF Secretary, organizes and helps organize sprints, cares about the health and equity of the Django community.  He has gone an embarrassingly long time without a working blog."
msgstr ""

#: ../../internals/committers.txt:394
# dfd01c3e29a74c8ea2cc085756ee2976
msgid "Jeremy lives in Mountain View, CA, USA."
msgstr ""

#: ../../internals/committers.txt:397
# 0009e6dba8d2437faefb512569dd3a72
msgid "Bryan found Django 0.96 through a fellow designer who was evangelizing its use. It was his first foray outside of the land that was PHP-based templating. Although he has only ever used Django for personal projects, it is the very reason he considers himself a designer/developer hybrid and is working to further design within the Django community."
msgstr ""

#: ../../internals/committers.txt:403
# adb16fb0898a49c1bc13a1f49c0c577d
msgid "Bryan works as a designer at GitHub by day, and masquerades as a `vlogger`_ and `shoutcaster`_ in the after-hours. Bryan lives in Los Angeles, CA, USA."
msgstr ""

#: ../../internals/committers.txt:411
# 0384114f283841d4b6b8c73fae991c58
msgid "Preston is a recovering neuroscientist who originally discovered Django as part of a sweeping move to Python from a grab bag of half a dozen languages. He was drawn to Django's balance of practical batteries included philosophy, care and thought in code design, and strong open source community. In addition to his current job in private progressive education, Preston contributes some developer time to local non-profits."
msgstr ""

#: ../../internals/committers.txt:418
# 3b23e9c4eea04160835dc0daa2d258bf
msgid "Preston lives with his family and animal menagerie in Santa Barbara, CA, USA."
msgstr ""

#: ../../internals/committers.txt:423
# 8c0275048e044fba9655021d89a824d8
msgid "Specialists"
msgstr ""

#: ../../internals/committers.txt:426
# 8628abf6e589463a9de2163ae2cbbc2c
msgid "James is Django's release manager, and also contributes to the documentation and provide the occasional bugfix."
msgstr ""

#: ../../internals/committers.txt:429
# 85ffe4d198b84963a924b14c64929beb
msgid "James came to Web development from philosophy when he discovered that programmers get to argue just as much while collecting much better pay. He lives in Lawrence, Kansas and previously worked at World Online; currently, he's part of the Web development team at Mozilla."
msgstr ""

#: ../../internals/committers.txt:435
# 79f4317b57544376b621cf51652dcb11
msgid "He `keeps a blog`_, and enjoys fine port and talking to his car."
msgstr ""

#: ../../internals/committers.txt:441
# e017c94abbca4c9b98b4c772127ead08
msgid "Ian is responsible for Django's support for Oracle."
msgstr ""

#: ../../internals/committers.txt:444
# c1ec0c30de65411da60facb37dd04f29
msgid "Matt is also responsible for Django's Oracle support."
msgstr ""

#: ../../internals/committers.txt:447
# 04faffd05ab449c88596e1d827eb96f0
msgid "Simon discovered Django 0.96 during his Computer Science PhD research and has been developing with it full-time ever since. His core code contributions are mostly in Django's admin application. He is also helping to improve Django's documentation."
msgstr ""

#: ../../internals/committers.txt:452
# 59763e03d7fd455b8cb69d4bae483f1f
msgid "Simon works as a freelance developer based in Wollongong, Australia."
msgstr ""

#: ../../internals/committers.txt:457
# 0418e74724114b26be5c3e09e614bcbc
msgid "Gabriel has been working with Django since 2008, shortly after the 1.0 release. Convinced by his business partner that Python and Django were the right direction for the company, he couldn't have been more happy with the decision. His contributions range across many areas in Django, but years of copy-editing and an eye for detail lead him to be particularly at home while working on Django's documentation."
msgstr ""

#: ../../internals/committers.txt:464
# 3ae023afde6c4d03b68940f71720c53c
msgid "Gabriel works as a web developer in Berkeley, CA, USA."
msgstr ""

#: ../../internals/committers.txt:469
# 74345b095853498c87ffcf3540b5b786
msgid "When exploring Web frameworks for an independent study project in the fall of 2008, Tim discovered Django and was lured to it by the documentation. He enjoys contributing to the docs because they're awesome."
msgstr ""

#: ../../internals/committers.txt:473
# cbd0fd98def74a47a39c4881095e8bc7
msgid "Tim works as a software engineer and lives in Philadelphia, PA, USA."
msgstr ""

#: ../../internals/committers.txt:476
# a8bc64253aea47428be97032a1c2aabf
msgid "Developers Emeritus"
msgstr ""

#: ../../internals/committers.txt:479
# a544e20af58d4904bd18898c5ab4ba8f
msgid "Georg created Django's internationalization system, managed i18n contributions and made a ton of excellent tweaks, feature additions and bug fixes."
msgstr ""

#: ../../internals/committers.txt:484
# cf20e9e64cbe4fc7849f9e98913b4215
msgid "Robert was responsible for the *first* refactoring of Django's admin application to allow for easier reuse and has made a ton of excellent tweaks, feature additions and bug fixes."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:3
# b56bd46574c04bf9ba562a77a0043912
msgid "Reporting bugs and requesting features"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:7
# 31a70f5221f144389841c2d1cb059e7b
msgid "Please report security issues **only** to security@djangoproject.com.  This is a private list only open to long-time, highly trusted Django developers, and its archives are not public. For further details, please see :doc:`our security policies </internals/security>`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:14
# debc4b23f80041b8bf90f595198fbbd9
msgid "Otherwise, before reporting a bug or requesting a new feature, please consider these general points:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:17
# 28bfe8102bca4151bc88aee361e7fc5b
msgid "Check that someone hasn't already filed the bug or feature request by `searching`_ or running `custom queries`_ in the ticket tracker."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:20
# 5c0cce9dc7334e44b5e6d1bf9f0c2850
msgid "Don't use the ticket system to ask support questions. Use the `django-users`_ list or the `#django`_ IRC channel for that."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:23
# 43cab50df90a4d25a1399b422ccedb14
msgid "Don't reopen issues that have been marked \"wontfix\" by a core developer. This mark means that the decision has been made that we can't or won't fix this particular issue. If you're not sure why, please ask on `django-developers`_."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:28
# d8a1713ea50e493b9328f4efe5c4bb3b
msgid "Don't use the ticket tracker for lengthy discussions, because they're likely to get lost. If a particular ticket is controversial, please move the discussion to `django-developers`_."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:35
# ee752ea40b8142159801eabd95552456
msgid "Reporting bugs"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:37
# 0f2b4bfc8dff413ca3a3a7345cc68db9
msgid "Well-written bug reports are *incredibly* helpful. However, there's a certain amount of overhead involved in working with any bug tracking system so your help in keeping our ticket tracker as useful as possible is appreciated. In particular:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:42
# f0e585b4fc3342f785a1dfa728ae8462
msgid "**Do** read the :doc:`FAQ </faq/index>` to see if your issue might be a well-known question."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:45
# 73a873cc655b4f4ba1562a037c7d4cd7
msgid "**Do** ask on `django-users`_ or `#django`_ *first* if you're not sure if what you're seeing is a bug."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:48
# 40902a119f504ce1a281b359ee968000
msgid "**Do** write complete, reproducible, specific bug reports. You must include a clear, concise description of the problem, and a set of instructions for replicating it. Add as much debug information as you can: code snippets, test cases, exception backtraces, screenshots, etc. A nice small test case is the best way to report a bug, as it gives us an easy way to confirm the bug quickly."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:55
# e2d5f2f7d8cb485a932ff2e84a87dba6
msgid "**Don't** post to `django-developers`_ just to announce that you have filed a bug report. All the tickets are mailed to another list, `django-updates`_, which is tracked by developers and interested community members; we see them as they are filed."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:60
# c881a927f66048b489778ca68b9b2383
msgid "To understand the lifecycle of your ticket once you have created it, refer to :doc:`triaging-tickets`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:66
# cfe080a82c154ca7ada21d866eaa4991
msgid "Reporting user interface bugs and features"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:68
# dfc5e4849e9746cc802d3d137b2e6434
msgid "If your bug or feature request touches on anything visual in nature, there are a few additional guidelines to follow:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:71
# 7e862bd025f14e098f2075f38c9bf465
msgid "Include screenshots in your ticket which are the visual equivalent of a minimal testcase. Show off the issue, not the crazy customizations you've made to your browser."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:75
# 300106e0b14b4372addd41160c7e5316
msgid "If the issue is difficult to show off using a still image, consider capturing a *brief* screencast. If your software permits it, capture only the relevant area of the screen."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:79
# 434ac273c8ac44d28b7b3163189828a1
msgid "If you're offering a patch which changes the look or behavior of Django's UI, you **must** attach before *and* after screenshots/screencasts. Tickets lacking these are difficult for triagers and core developers to assess quickly."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:84
# f0b2bb4d2bdd4db4b3bc0c19e5e14fa7
msgid "Screenshots don't absolve you of other good reporting practices. Make sure to include URLs, code snippets, and step-by-step instructions on how to reproduce the behavior visible in the screenshots."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:88
# 142660dd6aee494d9ff2b5d5764df149
msgid "Make sure to set the UI/UX flag on the ticket so interested parties can find your ticket."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:92
# 1a544175d3f9419e91c0c8b1f56d97bc
msgid "Requesting features"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:94
# bc8113778786429bac8f8e63090f6303
msgid "We're always trying to make Django better, and your feature requests are a key part of that. Here are some tips on how to make a request most effectively:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:97
# 273abf4865ac4f59afaebc49882142fc
msgid "Make sure the feature actually requires changes in Django's core. If your idea can be developed as an independent application or module â€” for instance, you want to support another database engine â€” we'll probably suggest that you to develop it independently. Then, if your project gathers sufficient community support, we may consider it for inclusion in Django."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:104
# 153050a44ebb47e1adda2aea46f59724
msgid "First request the feature on the `django-developers`_ list, not in the ticket tracker. It'll get read more closely if it's on the mailing list. This is even more important for large-scale feature requests. We like to discuss any big changes to Django's core on the mailing list before actually working on them."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:110
# fa4baf9bebba413c92e2b159a42ecf36
msgid "Describe clearly and concisely what the missing feature is and how you'd like to see it implemented. Include example code (non-functional is OK) if possible."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:114
# ca81d41eb29747feab46586e7fbd0e54
msgid "Explain *why* you'd like the feature. In some cases this is obvious, but since Django is designed to help real developers get real work done, you'll need to explain it, if it isn't obvious why the feature would be useful."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:119
# 236ddf880616497485fb89ba726a3b70
msgid "If core developers agree on the feature, then it's appropriate to create a ticket. Include a link the discussion on `django-developers`_ in the ticket description."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:123
# f45a8edea2e5463a9beaa5bee2772b1f
msgid "As with most open-source projects, code talks. If you are willing to write the code for the feature yourself or, even better, if you've already written it, it's much more likely to be accepted. Just fork Django on GitHub, create a feature branch, and show us your work!"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:128
# ace172b189dd4e90895c5faba188b896
msgid "See also: :ref:`documenting-new-features`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:133
# 1c854ee957ee4b14ba1628d4b72dcf16
msgid "How we make decisions"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:135
# 21def79920234335b655276762b11b67
msgid "Whenever possible, we strive for a rough consensus. To that end, we'll often have informal votes on `django-developers`_ about a feature. In these votes we follow the voting style invented by Apache and used on Python itself, where votes are given as +1, +0, -0, or -1. Roughly translated, these votes mean:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:140
# a35626ba7138472a86073d517340b44b
msgid "+1: \"I love the idea and I'm strongly committed to it.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:142
# 45f95c7e8bb24f9b8c5a8a0b5538b7f0
msgid "+0: \"Sounds OK to me.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:144
# 2dd556a325ea4ae5b89637a8e64183f6
msgid "-0: \"I'm not thrilled, but I won't stand in the way.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:146
# ef9152ee340144d28b0ddc5dd402c4aa
msgid "-1: \"I strongly disagree and would be very unhappy to see the idea turn into reality.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:149
# e62a5ad4ae8c44f2bc99b7c9495f798c
msgid "Although these votes on `django-developers`_ are informal, they'll be taken very seriously. After a suitable voting period, if an obvious consensus arises we'll follow the votes."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:153
# 71a78c7334684b54bbb13c6e1ef5f803
msgid "However, consensus is not always possible. If consensus cannot be reached, or if the discussion towards a consensus fizzles out without a concrete decision, we use a more formal process."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:157
# 6277bf5eb707456e8069311b05efe86f
msgid "Any :doc:`core committer</internals/committers>` may call for a formal vote using the same voting mechanism above. A proposition will be considered carried by the core team if:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:161
# b60d92c1a08c45398761f0bf0f979699
msgid "There are three \"+1\" votes from members of the core team."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:163
# 70caf4811cb447059a273184099afaf6
msgid "There is no \"-1\" vote from any member of the core team."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:165
# a6175ad38dd949809d2c257c99c79328
msgid "The :ref:`BDFLs<django-bdfls>` haven't stepped in and executed their positive or negative veto."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:168
# 44fc5b23211c475a95cf4e54df0dbcf9
msgid "When calling for a vote, the caller should specify a deadline by which votes must be received. One week is generally suggested as the minimum amount of time."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:172
# 0a16344aaa3f436f80b9d99553b38406
msgid "Since this process allows any core committer to veto a proposal, any \"-1\" votes (or BDFL vetos) should be accompanied by an explanation that explains what it would take to convert that \"-1\" into at least a \"+0\"."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:176
# db3cb778ca51432da7f1d6d2bbdfe678
msgid "Whenever possible, these formal votes should be announced and held in public on the `django-developers`_ mailing list. However, overly sensitive or contentious issues -- including, most notably, votes on new core committers -- may be held in private."
msgstr ""

#: ../../internals/contributing/committing-code.txt:3
# 16214ab53f2f442f8f23bf0d0be93bf5
msgid "Committing code"
msgstr ""

#: ../../internals/contributing/committing-code.txt:5
# e31934955b5f457986918ed321a9b3f6
msgid "This section is addressed to the :doc:`/internals/committers` and to anyone interested in knowing how code gets committed into Django core. If you're a community member who wants to contribute code to Django, have a look at :doc:`writing-code/working-with-git` instead."
msgstr ""

#: ../../internals/contributing/committing-code.txt:11
# ab9922698a4e49c081ddb7ae694bb8e7
msgid "Commit access"
msgstr ""

#: ../../internals/contributing/committing-code.txt:13
# 5aabb9c8622149368661de73d439561f
msgid "Django has two types of committers:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:16
# 09109cea00754656980a37ddf8cd8b7c
msgid "These are people who have a long history of contributions to Django's codebase, a solid track record of being polite and helpful on the mailing lists, and a proven desire to dedicate serious time to Django's development. The bar is high for full commit access."
msgstr ""

#: ../../internals/contributing/committing-code.txt:22
# 9668726adcda410fa766af5446053ebc
msgid "These are people who are \"domain experts.\" They have direct check-in access to the subsystems that fall under their jurisdiction, and they're given a formal vote in questions that involve their subsystems. This type of access is likely to be given to someone who contributes a large sub-framework to Django and wants to continue to maintain it."
msgstr ""

#: ../../internals/contributing/committing-code.txt:28
# 9aced1021caa484fabad7919cc5035ba
msgid "Partial commit access is granted by the same process as full committers. However, the bar is set lower; proven expertise in the area in question is likely to be sufficient."
msgstr ""

#: ../../internals/contributing/committing-code.txt:32
# 68b24866ef904ca9ab5dea775f512b82
msgid "Decisions on new committers will follow the process explained in :ref:`how-we-make-decisions`. To request commit access, please contact an existing committer privately. Public requests for commit access are potential flame-war starters, and will simply be ignored."
msgstr ""

#: ../../internals/contributing/committing-code.txt:38
# ade35d5253314e28a1c0a7ae1d99dad7
msgid "Handling pull requests"
msgstr ""

#: ../../internals/contributing/committing-code.txt:40
# 9807100b7ebe438792837c2ef7c82f47
msgid "Since Django is now hosted at GitHub, many patches are provided in the form of pull requests."
msgstr ""

#: ../../internals/contributing/committing-code.txt:43
# 0c7314a9010d4cec80df16ce78f5b5f0
msgid "When committing a pull request, make sure each individual commit matches the commit guidelines described below. Contributors are expected to provide the best pull requests possible. In practice however, committers - who will likely be more familiar with the commit guidelines - may decide to bring a commit up to standard themselves."
msgstr ""

#: ../../internals/contributing/committing-code.txt:49
# 213cf88c55a840599e658b6baeaaa66a
msgid "Here is one way to commit a pull request::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:58
# f9ffb97f193c4d569d2fb5945cd3d662
msgid "At this point, you can work on the code. Use ``git rebase -i`` and ``git commit --amend`` to make sure the commits have the expected level of quality. Once you're ready::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:75
# df72aa87ce6e4a46ac0d83e62ad96e8e
msgid "An alternative is to add the contributor's repository as a new remote, checkout the branch and work from there::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:81
# abde07cc053d4cd68e683dbfe3f70d96
msgid "Yet another alternative is to fetch the branch without adding the contributor's repository as a remote::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:87
# 61353858178f40cf87e19e3470efc659
msgid "At this point, you can work on the code and continue as above."
msgstr ""

#: ../../internals/contributing/committing-code.txt:89
# f7e9670511d44f8da417837cf4878179
msgid "GitHub provides a one-click merge functionality for pull requests. This should only be used if the pull request is 100% ready, and you have checked it for errors (or trust the request maker enough to skip checks). Currently, it isn't possible to check that the tests pass and that the docs build without downloading the changes to your development environment."
msgstr ""

#: ../../internals/contributing/committing-code.txt:95
# 3a61ac116c0747bb8ba54bdb60e2bdc9
msgid "When rewriting the commit history of a pull request, the goal is to make Django's commit history as usable as possible:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:98
# ec7a17d1a9284a54acc19387aee6a160
msgid "If a patch contains back-and-forth commits, then rewrite those into one. Typically, a commit can add some code, and a second commit can fix stylistic issues introduced in the first commit."
msgstr ""

#: ../../internals/contributing/committing-code.txt:102
# d8c84a5e23384a468f78e5c29f5077dd
msgid "Separate changes to different commits by logical grouping: if you do a stylistic cleanup at the same time as you do other changes to a file, separating the changes into two different commits will make reviewing history easier."
msgstr ""

#: ../../internals/contributing/committing-code.txt:107
# 403bd374acfd4511a088ef43cb755761
msgid "Beware of merges of upstream branches in the pull requests."
msgstr ""

#: ../../internals/contributing/committing-code.txt:109
# 1ac005264735478c843d049b372dabd5
msgid "Tests should pass and docs should build after each commit. Neither the tests nor the docs should emit warnings."
msgstr ""

#: ../../internals/contributing/committing-code.txt:112
# de6d27fe63564d08a0c49e8441e2f465
msgid "Trivial and small patches usually are best done in one commit. Medium to large work should be split into multiple commits if possible."
msgstr ""

#: ../../internals/contributing/committing-code.txt:115
# ce7a53a9ad2f440a98b789d148d3f534
msgid "Practicality beats purity, so it is up to each committer to decide how much history mangling to do for a pull request. The main points are engaging the community, getting work done, and having a usable commit history."
msgstr ""

#: ../../internals/contributing/committing-code.txt:122
# 31ede55cccd343899ccfee92c11bd480
msgid "Committing guidelines"
msgstr ""

#: ../../internals/contributing/committing-code.txt:124
# 998aabb2ff2a4b3ba985f119225ffb89
msgid "In addition, please follow the following guidelines when committing code to Django's Git repository:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:127
# 497c5f25ee3d46549905f98d8445bb8b
msgid "Never change the published history of django/django branches! **Never force- push your changes to django/django.** If you absolutely must (for security reasons for example) first discuss the situation with the core team."
msgstr ""

#: ../../internals/contributing/committing-code.txt:131
# 202a1314997e4163b1b7464f4a3c22f5
msgid "For any medium-to-big changes, where \"medium-to-big\" is according to your judgment, please bring things up on the `django-developers`_ mailing list before making the change."
msgstr ""

#: ../../internals/contributing/committing-code.txt:135
# c1222c0694274d9f9e15e3ba36759719
msgid "If you bring something up on `django-developers`_ and nobody responds, please don't take that to mean your idea is great and should be implemented immediately because nobody contested it. Django's lead developers don't have a lot of time to read mailing-list discussions immediately, so you may have to wait a couple of days before getting a response."
msgstr ""

#: ../../internals/contributing/committing-code.txt:142
# 155de24914704067a77c857645586ab9
msgid "Write detailed commit messages in the past tense, not present tense."
msgstr ""

#: ../../internals/contributing/committing-code.txt:144
# 907fb6e9e9d14fafb4cb9079a648f055
msgid "Good: \"Fixed Unicode bug in RSS API.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:145
# 7e3929ae06de473e827e682089f2917b
msgid "Bad: \"Fixes Unicode bug in RSS API.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:146
# cda06c67cfce4f34969cae9a10238a26
msgid "Bad: \"Fixing Unicode bug in RSS API.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:148
# 158624f16b5047bab0b530e8c9b98018
msgid "The commit message should be in lines of 72 chars maximum. There should be a subject line, separated by a blank line and then paragraphs of 72 char lines. The limits are soft. For the subject line, shorter is better. In the body of the commit message more detail is better than less::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:159
# 9a8d7c1396d649caadc3a80e304c08a7
msgid "If the patch wasn't a pull request, you should credit the contributors in the commit message: \"Thanks A for report, B for the patch and C for the review.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:163
# d9b5756838524a1fab9dc96e31eee413
msgid "For commits to a branch, prefix the commit message with the branch name. For example: \"[1.4.x] Fixed #xxxxx -- Added support for mind reading.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:166
# 4bf986e4187d447397ce2ea80b4c14d3
msgid "Limit commits to the most granular change that makes sense. This means, use frequent small commits rather than infrequent large commits. For example, if implementing feature X requires a small change to library Y, first commit the change to library Y, then commit feature X in a separate commit. This goes a *long way* in helping all core Django developers follow your changes."
msgstr ""

#: ../../internals/contributing/committing-code.txt:173
# d33b42e9c02f4b35a38fb8a0414c9829
msgid "Separate bug fixes from feature changes. Bugfixes may need to be backported to the stable branch, according to the :ref:`backwards-compatibility policy <backwards-compatibility-policy>`."
msgstr ""

#: ../../internals/contributing/committing-code.txt:177
# 6f98c88376334f758c2a634d08abc9aa
msgid "If your commit closes a ticket in the Django `ticket tracker`_, begin your commit message with the text \"Fixed #xxxxx\", where \"xxxxx\" is the number of the ticket your commit fixes. Example: \"Fixed #123 -- Added whizbang feature.\". We've rigged Trac so that any commit message in that format will automatically close the referenced ticket and post a comment to it with the full commit message."
msgstr ""

#: ../../internals/contributing/committing-code.txt:184
# 53855fc6afce4dd69c4f3a37af648041
msgid "If your commit closes a ticket and is in a branch, use the branch name first, then the \"Fixed #xxxxx.\" For example: \"[1.4.x] Fixed #123 -- Added whizbang feature.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:188
# 1bcbd70b91a746988421dcca4007c252
msgid "For the curious, we're using a `Trac plugin`_ for this."
msgstr ""

#: ../../internals/contributing/committing-code.txt:192
# 120716980a784765910386c178232039
msgid "Note that the Trac integration doesn't know anything about pull requests. So if you try to close a pull request with the phrase \"closes #400\" in your commit message, GitHub will close the pull request, but the Trac plugin will also close the same numbered ticket in Trac."
msgstr ""

#: ../../internals/contributing/committing-code.txt:200
# 04c4ba95465c44fd93e97b8fb3552d00
msgid "If your commit references a ticket in the Django `ticket tracker`_ but does *not* close the ticket, include the phrase \"Refs #xxxxx\", where \"xxxxx\" is the number of the ticket your commit references. This will automatically post a comment to the appropriate ticket."
msgstr ""

#: ../../internals/contributing/committing-code.txt:205
# 5aff967064264bd386111b6a8aeef904
msgid "Write commit messages for backports using this pattern::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:211
# 862b5c044573439db45cca20048ca31d
msgid "For example::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:218
# 3cd0ab93f1c34abd889231dbfe1f6a32
msgid "Reverting commits"
msgstr ""

#: ../../internals/contributing/committing-code.txt:220
# 61437b077a854293b5fafe490205d71d
msgid "Nobody's perfect; mistakes will be committed."
msgstr ""

#: ../../internals/contributing/committing-code.txt:222
# 6e0e84a79826435588e0144ac58e454a
msgid "But try very hard to ensure that mistakes don't happen. Just because we have a reversion policy doesn't relax your responsibility to aim for the highest quality possible. Really: double-check your work, or have it checked by another committer, **before** you commit it in the first place!"
msgstr ""

#: ../../internals/contributing/committing-code.txt:227
# 292e9eed0501452ab900a0024868d024
msgid "When a mistaken commit is discovered, please follow these guidelines:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:229
# 0d33e68d4a344d838eefb38d5bf8aa44
msgid "If possible, have the original author revert his/her own commit."
msgstr ""

#: ../../internals/contributing/committing-code.txt:231
# a24e166d8119489b938b9bf2404c47e7
msgid "Don't revert another author's changes without permission from the original author."
msgstr ""

#: ../../internals/contributing/committing-code.txt:234
# 4c0fbcef9ccc4020860c758ac1b40fc9
msgid "Use git revert -- this will make a reverse commit, but the original commit will still be part of the commit history."
msgstr ""

#: ../../internals/contributing/committing-code.txt:237
# 2699455e8a2c4dc996acd7b88ac8359d
msgid "If the original author can't be reached (within a reasonable amount of time -- a day or so) and the problem is severe -- crashing bug, major test failures, etc -- then ask for objections on the `django-developers`_ mailing list then revert if there are none."
msgstr ""

#: ../../internals/contributing/committing-code.txt:242
# b1ecf2207b1048e5b1007c5e327eed1b
msgid "If the problem is small (a feature commit after feature freeze, say), wait it out."
msgstr ""

#: ../../internals/contributing/committing-code.txt:245
# 473cb21ca8054189b054625935e11adc
msgid "If there's a disagreement between the committer and the reverter-to-be then try to work it out on the `django-developers`_ mailing list. If an agreement can't be reached then it should be put to a vote."
msgstr ""

#: ../../internals/contributing/committing-code.txt:250
# 80dc5795337d4a3bb1d1d20c2a8f9d24
msgid "If the commit introduced a confirmed, disclosed security vulnerability then the commit may be reverted immediately without permission from anyone."
msgstr ""

#: ../../internals/contributing/committing-code.txt:254
# d7e45eb455cc496b9113851b60a123dd
msgid "The release branch maintainer may back out commits to the release branch without permission if the commit breaks the release branch."
msgstr ""

#: ../../internals/contributing/committing-code.txt:257
# a65f5fa49167491b8a197b6dea9e9071
msgid "If you mistakenly push a topic branch to django/django, just delete it. For instance, if you did: ``git push upstream feature_antigravity``, just do a reverse push: ``git push upstream :feature_antigravity``."
msgstr ""

#: ../../internals/contributing/index.txt:3
# 5968539abdac42589712ce3a85fce449
msgid "Contributing to Django"
msgstr ""

#: ../../internals/contributing/index.txt:5
# e5fef9f385be4252a398ef48ac37e497
msgid "Django is a community that lives on its volunteers. As it keeps growing, we always need more people to help others. As soon as you learn Django, you can contribute in many ways:"
msgstr ""

#: ../../internals/contributing/index.txt:9
# 457af47538454d75a1d4a4706089a485
msgid "Join the `django-users`_ mailing list and answer questions. This mailing list has a huge audience, and we really want to maintain a friendly and helpful atmosphere. If you're new to the Django community, you should read the `posting guidelines`_."
msgstr ""

#: ../../internals/contributing/index.txt:14
# f11b3d3332b14eccbd56fc958a95b438
msgid "Join the `#django IRC channel`_ on Freenode and answer questions. By explaining Django to other users, you're going to learn a lot about the framework yourself."
msgstr ""

#: ../../internals/contributing/index.txt:18
# 5ce10f37a36848d3b7e65c76b60fb442
msgid "Blog about Django. We syndicate all the Django blogs we know about on the `community page`_; if you'd like to see your blog on that page you can `register it here`_."
msgstr ""

#: ../../internals/contributing/index.txt:22
# 8b79cc3792354e4fa892529424c3c4fb
msgid "Contribute to open-source Django projects, write some documentation, or release your own code as an open-source pluggable application. The ecosystem of pluggable applications is a big strength of Django, help us build it!"
msgstr ""

#: ../../internals/contributing/index.txt:27
# 33f3cbcce24842f2ba7f91d3eff368eb
msgid "If you think working *with* Django is fun, wait until you start working *on* it. We're passionate about helping Django users make the jump to contributing members of the community, so there are several ways you can help Django's development:"
msgstr ""

#: ../../internals/contributing/index.txt:32
# 2ed266c684dc4533993dd3997d755155
msgid ":doc:`Report bugs <bugs-and-features>` in our `ticket tracker`_."
msgstr ""

#: ../../internals/contributing/index.txt:34
# bb3e0a5db16240289cad594f79dbdb2d
msgid "Join the `django-developers`_ mailing list and share your ideas for how to improve Django. We're always open to suggestions."
msgstr ""

#: ../../internals/contributing/index.txt:37
# bb168a7a389e4998b84fc0814295e8d2
msgid ":doc:`Submit patches <writing-code/submitting-patches>` for new and/or fixed behavior. If you're looking for an easy way to start contributing to Django have a look at the `easy pickings`_ tickets."
msgstr ""

#: ../../internals/contributing/index.txt:41
# f1a65e32895844ef884c6d398aec0315
msgid ":doc:`Improve the documentation <writing-documentation>` or :doc:`write unit tests <writing-code/unit-tests>`."
msgstr ""

#: ../../internals/contributing/index.txt:44
# 42186fd3abaf485e818745a9c46a0781
msgid ":doc:`Triage tickets and review patches <triaging-tickets>` created by other users."
msgstr ""

#: ../../internals/contributing/index.txt:47
# 9261b3f7d9e44035b57c19266716e0b5
msgid "Really, **ANYONE** can do something to help make Django better and greater!"
msgstr ""

#: ../../internals/contributing/index.txt:49
# b46291f905994844a02ec5f62265b34f
msgid "Browse the following sections to find out how:"
msgstr ""

#: ../../internals/contributing/localizing.txt:3
# ee0bee553b7d42e2b4f9eff3584fbb3c
msgid "Localizing Django"
msgstr ""

#: ../../internals/contributing/localizing.txt:5
# 626232a97da642589ce6925c02f63692
msgid "Various parts of Django, such as the admin site and validation error messages, are internationalized. This means they display differently depending on each user's language or country. For this, Django uses the same internationalization and localization infrastructure available to Django applications, described in the :doc:`i18n documentation </topics/i18n/index>`."
msgstr ""

#: ../../internals/contributing/localizing.txt:12
# ed4b23604cd44b289208f017eb9d5d0a
msgid "Translations"
msgstr ""

#: ../../internals/contributing/localizing.txt:14
# cffd3fbec2fc46e18f8a7d3421fbc017
msgid "Translations are contributed by Django users worldwide. The translation work is coordinated at `Transifex`_."
msgstr ""

#: ../../internals/contributing/localizing.txt:17
# c126ec7f487549af8a571b0da137c328
msgid "If you find an incorrect translation or want to discuss specific translations, go to the `Django project page`_. If you would like to help out with translating or add a language that isn't yet translated, here's what to do:"
msgstr ""

#: ../../internals/contributing/localizing.txt:21
# 26594f5ffed143e88d345ab3d0c18b08
msgid "Join the `Django i18n mailing list`_ and introduce yourself."
msgstr ""

#: ../../internals/contributing/localizing.txt:23
# 51d06cd420574816a0b4d869244c1c94
msgid "Make sure you read the notes about :ref:`specialties-of-django-i18n`."
msgstr ""

#: ../../internals/contributing/localizing.txt:25
# 708b6d43d723429ca5890d74d7a013cb
msgid "Signup at `Transifex`_ and visit the `Django project page`_."
msgstr ""

#: ../../internals/contributing/localizing.txt:27
# 9cd061c17eca4f268d25b9982435f765
msgid "On the `Django project page`_, choose the language you want to work on, **or** -- in case the language doesn't exist yet -- request a new language team by clicking on the \"Request language\" link and selecting the appropriate language."
msgstr ""

#: ../../internals/contributing/localizing.txt:32
# 804d98d8f9d140a5b9cd14178f8911c2
msgid "Then, click the \"Join this Team\" button to become a member of this team. Every team has at least one coordinator who is responsible to review your membership request. You can of course also contact the team coordinator to clarify procedural problems and handle the actual translation process."
msgstr ""

#: ../../internals/contributing/localizing.txt:38
# f33ab03686fd4db99f78baecce3c2db9
msgid "Once you are a member of a team choose the translation resource you want to update on the team page. For example the \"core\" resource refers to the translation catalogue that contains all non-contrib translations. Each of the contrib apps also have a resource (prefixed with \"contrib\")."
msgstr ""

#: ../../internals/contributing/localizing.txt:44
# 174ebb13c2ee4de2969823cd89891df7
msgid "For more information about how to use Transifex, read the `Transifex User Guide`_."
msgstr ""

#: ../../internals/contributing/localizing.txt:48
# eee5c74ef1fd4734ae9ce7cd1362719c
msgid "Formats"
msgstr ""

#: ../../internals/contributing/localizing.txt:50
# 9abbe5d2cad14212b7032373e9576cea
msgid "You can also review ``conf/locale/<locale>/formats.py``. This file describes the date, time and numbers formatting particularities of your locale. See :ref:`format-localization` for details."
msgstr ""

#: ../../internals/contributing/localizing.txt:54
# ea00860625034181afa2dc42b1de3b45
msgid "The format files aren't managed by the use of Transifex. To change them, you must :doc:`create a patch<writing-code/submitting-patches>` against the Django source tree, as for any code change:"
msgstr ""

#: ../../internals/contributing/localizing.txt:58
# 45276b00e7c9494ca36a56ce2db83247
msgid "Create a diff against the current Git master branch."
msgstr ""

#: ../../internals/contributing/localizing.txt:60
# 6a57eb6c9bbe46d68e2743b4306118d8
msgid "Open a ticket in Django's ticket system, set its ``Component`` field to ``Translations``, and attach the patch to it."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:3
# c51acebb9c3f44b7a42b7b65c851e123
msgid "Advice for new contributors"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:5
# 9cc4e978ae6d461cb184c85dd0df4c1b
msgid "New contributor and not sure what to do? Want to help but just don't know how to get started? This is the section for you."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:9
# fb58603e17cf4fcfb5a8b34357e84524
msgid "First steps"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:11
# e17d399118c04b43a0566e2cd2f814c4
msgid "Start with these easy tasks to discover Django's development process."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:13
# 3e694b4b752444b8ac5d95f4bdd3318b
msgid "**Triage tickets**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:15
# 2ef95df722da4e28a93b9d1c3c41e2d2
msgid "If an `unreviewed ticket`_ reports a bug, try and reproduce it. If you can reproduce it and it seems valid, make a note that you confirmed the bug and accept the ticket. Make sure the ticket is filed under the correct component area. Consider writing a patch that adds a test for the bug's behavior, even if you don't fix the bug itself. See more at :ref:`how-can-i-help-with-triaging`"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:22
# 6467f74c8c644715a4184cb0102a961f
msgid "**Look for tickets that are accepted and review patches to build familiarity with the codebase and the process**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:25
# a7f05277c0d24d33ad056970179e6008
msgid "Mark the appropriate flags if a patch needs docs or tests. Look through the changes a patch makes, and keep an eye out for syntax that is incompatible with older but still supported versions of Python. Run the tests and make sure they pass on your system.  Where possible and relevant, try them out on a database other than SQLite. Leave comments and feedback!"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:31
# de11037850b0495ebd85f8470006a9f1
msgid "**Keep old patches up to date**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:33
# 5ca5ce0d0b3b4434bc2c6a6570e69e39
msgid "Oftentimes the codebase will change between a patch being submitted and the time it gets reviewed. Make sure it still applies cleanly and functions as expected. Simply updating a patch is both useful and important! See more on :doc:`writing-code/submitting-patches`."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:38
# 33c7a24c61274b7bb23ceda2a372c14d
msgid "**Write some documentation**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:40
# 82de27bb2a1148b0badea4b73af84094
msgid "Django's documentation is great but it can always be improved. Did you find a typo? Do you think that something should be clarified? Go ahead and suggest a documentation patch! See also the guide on :doc:`writing-documentation`, in particular the tips for :ref:`improving-the-documentation`."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:48
# 6e7ed894a4704be78cb9ff0edce83c9c
msgid "The `reports page`_ contains links to many useful Trac queries, including several that are useful for triaging tickets and reviewing patches as suggested above."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:58
# 535b2eeac94f421bbee4181f9a180e7e
msgid "Guidelines"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:60
# 9e1996f902704748a20af77d8295e142
msgid "As a newcomer on a large project, it's easy to experience frustration. Here's some advice to make your work on Django more useful and rewarding."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:63
# e2e100fe3d13403983e16ba3edd96843
msgid "**Pick a subject area that you care about, that you are familiar with, or that you want to learn about**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:66
# 046960d2eda24a90b9cf104436f4c217
msgid "You don't already have to be an expert on the area you want to work on; you become an expert through your ongoing contributions to the code."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:69
# 466a6cc68f9a4b1896861af573fec031
msgid "**Analyze tickets' context and history**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:71
# 5fc2a59823d14233b0c60127f900bb67
msgid "Trac isn't an absolute; the context is just as important as the words. When reading Trac, you need to take into account who says things, and when they were said. Support for an idea two years ago doesn't necessarily mean that the idea will still have support. You also need to pay attention to who *hasn't* spoken -- for example, if a core team member hasn't been recently involved in a discussion, then a ticket may not have the support required to get into trunk."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:79
# 05fc35d1185444a38ba74350662725d0
msgid "**Start small**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:81
# 2a677eb6762c48258c0a50fc5c790739
msgid "It's easier to get feedback on a little issue than on a big one. See the `easy pickings`_."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:84
# d9f223722506402d9aac7e9eaca0dfb6
msgid "**If you're going to engage in a big task, make sure that your idea has support first**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:87
# 5e82933f48b342a3b7d1c7454e4d4096
msgid "This means getting someone else to confirm that a bug is real before you fix the issue, and ensuring that the core team supports a proposed feature before you go implementing it."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:91
# 1fbe105813b64f4e8c06cae8e4397017
msgid "**Be bold! Leave feedback!**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:93
# 98b5df1bb8c44e83bf142cc2a83eebf0
msgid "Sometimes it can be scary to put your opinion out to the world and say \"this ticket is correct\" or \"this patch needs work\", but it's the only way the project moves forward. The contributions of the broad Django community ultimately have a much greater impact than that of the core developers. We can't do it without YOU!"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:99
# b0a0564e8fd246de89c919bbfd1572dd
msgid "**Err on the side of caution when marking things Ready For Check-in**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:101
# 7e027648bba74f7fb01b8f8b72a52097
msgid "If you're really not certain if a ticket is ready, don't mark it as such. Leave a comment instead, letting others know your thoughts.  If you're mostly certain, but not completely certain, you might also try asking on IRC to see if someone else can confirm your suspicions."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:106
# d336c42a66484c3baceb575a5634e848
msgid "**Wait for feedback, and respond to feedback that you receive**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:108
# a3b710f7b927492cb6732a20cd4e264a
msgid "Focus on one or two tickets, see them through from start to finish, and repeat. The shotgun approach of taking on lots of tickets and letting some fall by the wayside ends up doing more harm than good."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:112
# aa765eed44ea4af1aca3948377778190
msgid "**Be rigorous**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:114
# 546173babfd64b2d9a3e143675e26e8d
msgid "When we say \":pep:`8`, and must have docs and tests\", we mean it. If a patch doesn't have docs and tests, there had better be a good reason. Arguments like \"I couldn't find any existing tests of this feature\" don't carry much weight--while it may be true, that means you have the extra-important job of writing the very first tests for that feature, not that you get a pass from writing tests altogether."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:126
# e655b47b1bf04a1bbd9d722bd640c63f
msgid "FAQ"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:128
# 01bb25fb98334e35ab5e03db76e843b4
msgid "**This ticket I care about has been ignored for days/weeks/months! What can I do to get it committed?**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:131
# 53cd2008153441609e9dda5d597dccc2
msgid "First off, it's not personal. Django is entirely developed by volunteers (even the core developers), and sometimes folks just don't have time. The best thing to do is to send a gentle reminder to the django-developers mailing list asking for review on the ticket, or to bring it up in the #django-dev IRC channel."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:137
# f2dea39924684765981aaaa6dd4c2a47
msgid "**I'm sure my ticket is absolutely 100% perfect, can I mark it as RFC myself?**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:140
# 3b4d33c1e76b4a17bb22bc4f4940d8e3
msgid "Short answer: No. It's always better to get another set of eyes on a ticket. If you're having trouble getting that second set of eyes, see question 1, above."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:144
# e0a81ecca4864099bd4ceb18de634217
msgid "**My ticket has been in DDN forever! What should I do?**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:146
# 5e453b51bb46442c9e52a316148a575c
msgid "Design Decision Needed requires consensus about the right solution.  At the very least it needs consensus among the core developers, and ideally it has consensus from the community as well. The best way to accomplish this is to start a thread on the django-developers mailing list, and for very complex issues to start a wiki page summarizing the problem and the possible solutions."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:3
# 57db146ceb5242ac807259f01c54aa77
msgid "Triaging tickets"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:5
# 41270236f00846939b0712f224e55708
msgid "Django uses Trac_ for managing the work on the code base. Trac is a community-tended garden of the bugs people have found and the features people would like to see added. As in any garden, sometimes there are weeds to be pulled and sometimes there are flowers and vegetables that need picking. We need your help to sort out one from the other, and in the end we all benefit together."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:12
# 56e9d39eeac847cc9760cd62ec7e6287
msgid "Like all gardens, we can aspire to perfection but in reality there's no such thing. Even in the most pristine garden there are still snails and insects. In a community garden there are also helpful people who -- with the best of intentions -- fertilize the weeds and poison the roses. It's the job of the community as a whole to self-manage, keep the problems to a minimum, and educate those coming into the community so that they can become valuable contributing members."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:20
# 18934be297c94d858b1e5622d23a5e18
msgid "Similarly, while we aim for Trac to be a perfect representation of the state of Django's progress, we acknowledge that this simply will not happen. By distributing the load of Trac maintenance to the community, we accept that there will be mistakes. Trac is \"mostly accurate\", and we give allowances for the fact that sometimes it will be wrong. That's okay. We're perfectionists with deadlines."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:27
# c1d9ccf6074f4008a3e6e38c2d243c8b
msgid "We rely on the community to keep participating, keep tickets as accurate as possible, and raise issues for discussion on our mailing lists when there is confusion or disagreement."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:31
# 1fd02a38f01b4efaad86b663a41123ce
msgid "Django is a community project, and every contribution helps. We can't do this without YOU!"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:35
# e60de4b7989f4606a7d3e1a6e8b3fc76
msgid "Triage workflow"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:37
# 0c65fffcf3d443e59c71f5ed778c46ff
msgid "Unfortunately, not all bug reports and feature requests in the ticket tracker provide all the :doc:`required details<bugs-and-features>`. A number of tickets have patches, but those patches don't meet all the requirements of a :ref:`good patch<patch-style>`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:42
# ae8462324c2b490c804d59a4eda4deb9
msgid "One way to help out is to *triage* tickets that have been created by other users. The core team and several community members work on this regularly, but more help is always appreciated."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:46
# bf64803e758c4bf6910f5117a78b9f53
msgid "Most of the workflow is based around the concept of a ticket's :ref:`triage stages <triage-stages>`. Each stage describes where in its lifetime a given ticket is at any time. Along with a handful of flags, this attribute easily tells us what and who each ticket is waiting on."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:51
# e3c661eeb7c045b8bae95b6620a05be3
msgid "Since a picture is worth a thousand words, let's start there:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:58
# bfb2e3013190486b92812bf73b481fa7
msgid "We've got two roles in this diagram:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:60
# 89b80061996e4e2297d11e2fc8ca286c
msgid ":doc:`Committers</internals/committers>` (also called core developers): people with commit access who are responsible for making the big decisions, writing large portions of the code and integrating the contributions of the community."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:65
# c1083792b8c640e79974fe9a4b70f435
msgid "Ticket triagers: anyone in the Django community who chooses to become involved in Django's development process. Our Trac installation is intentionally left open to the public, and anyone can triage tickets. Django is a community project, and we encourage :ref:`triage by the community<how-can-i-help-with-triaging>`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:71
# 92c68ad51d7b427c9f1ce51d62840158
msgid "By way of example, here we see the lifecycle of an average ticket:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:73
# 7547d014044548108702d6ba1b86beba
msgid "Alice creates a ticket, and uploads an incomplete patch (no tests, incorrect implementation)."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:76
# 4dfbd2f4015241e3b0f10386e23f78b0
msgid "Bob reviews the patch, marks it \"Accepted\", \"needs tests\", and \"patch needs improvement\", and leaves a comment telling Alice how the patch could be improved."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:80
# efbcd2c1997c4b82b6b103dc3464fd0f
msgid "Alice updates the patch, adding tests (but not changing the implementation). She removes the two flags."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:83
# 454d9d0fdf2541d79930b904b1d6e659
msgid "Charlie reviews the patch and resets the \"patch needs improvement\" flag with another comment about improving the implementation."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:86
# d9478e3bbb334118a4a658515eb55677
msgid "Alice updates the patch, fixing the implementation. She removes the \"patch needs improvement\" flag."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:89
# f6c8f1778df947199feea74a499c1834
msgid "Daisy reviews the patch, and marks it RFC."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:91
# 8bc78804868f4df395d4bd27454234be
msgid "Jacob, a core developer, reviews the RFC patch, applies it to his checkout, and commits it."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:94
# 01528ccce95e46a29d24b34d7411d683
msgid "Some tickets require much less feedback than this, but then again some tickets require much much more."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:100
# eb623a4016fb44649b0f42d99de9e733
msgid "Triage stages"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:102
# 0ce60273e0aa49d9ae333bf7ccd6b301
msgid "Below we describe in more detail the various stages that a ticket may flow through during its lifetime."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:106
# e3e4226c713449baae727bbd23548824
msgid "Unreviewed"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:108
# ecdfe9f8cc4e49f6acfeddb06f237ddc
msgid "The ticket has not been reviewed by anyone who felt qualified to make a judgment about whether the ticket contained a valid issue, a viable feature, or ought to be closed for any of the various reasons."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:113
# c8c3a67ed92a4074ab5b9e5be37d35e6
msgid "Accepted"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:115
# 03585f13fe9d4519bfb30f92af15c90b
msgid "The big grey area! The absolute meaning of \"accepted\" is that the issue described in the ticket is valid and is in some stage of being worked on. Beyond that there are several considerations:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:119
# e460629e36874ded983c8fe67c7c98b4
msgid "**Accepted + No Flags**"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:121
# 125fcbd446894b7a93e2efe1d01c48c7
msgid "The ticket is valid, but no one has submitted a patch for it yet. Often this means you could safely start writing a patch for it."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:124
# af6ad02b8e59401299815db7155f202e
msgid "**Accepted + Has Patch**"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:126
# ca51dc081db944c3828c6b85583982d0
msgid "The ticket is waiting for people to review the supplied patch. This means downloading the patch and trying it out, verifying that it contains tests and docs, running the test suite with the included patch, and leaving feedback on the ticket."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:131
# 967a1a761add45dbbb38e2de30e22dad
msgid "**Accepted + Has Patch + (any other flag)**"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:133
# 85e3b3a6bb8348b1a9bfa3fea993602b
msgid "This means the ticket has been reviewed, and has been found to need further work. \"Needs tests\" and \"Needs documentation\" are self-explanatory. \"Patch needs improvement\" will generally be accompanied by a comment on the ticket explaining what is needed to improve the code."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:139
# adbcbbad5e8844ff8c031f95667ee89e
msgid "Design Decision Needed"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:141
# 7535f641caad455bb1bf6a187ad35dc8
msgid "This stage is for issues which may be contentious, may be backwards incompatible, or otherwise involve high-level design decisions. These issues should be discussed either in the ticket comments or on `django-developers`_."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:145
# 129ae6e0e6dd48bab4aec96b91f7e15a
msgid "If a ticket has been marked as \"DDN\", decisions are generally eventually made by the core committers, however that is not a requirement. See the :ref:`New contributors' FAQ<new-contributors-faq>` for \"My ticket has been in DDN forever! What should I do?\""
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:150
# 1e47c7ddb62f4a9389f35303dce44489
msgid "This stage will often be used for feature requests. It can also be used for issues that *might* be bugs, depending on opinion or interpretation. Obvious bugs (such as crashes, incorrect query results, or non-compliance with a standard) skip this stage and move straight to \"Accepted\"."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:156
# a3bb11c60b344f6c87074426c2e50667
msgid "Ready For Checkin"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:158
# 41ea6282d2964778b9020c7e7ba12a5b
msgid "The ticket was reviewed by any member of the community other than the person who supplied the patch and found to meet all the requirements for a commit-ready patch. A core committer now needs to give the patch a final review prior to being committed. See the :ref:`New contributors' FAQ<new-contributors-faq>` for \"My ticket has been in RFC forever! What should I do?\""
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:166
# 03d07e69927d43dda54a998bb814fccd
msgid "Someday/Maybe"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:168
# 434c2b2fca424517a00a8eed30c1ad3d
msgid "Generally only used for vague/high-level features or design ideas. These tickets are uncommon and overall less useful since they don't describe concrete actionable issues. They are enhancement requests that we might consider adding someday to the framework if an excellent patch is submitted. These tickets are not a high priority."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:175
# d24a1d96b6954622a64ec8632c07e293
msgid "Other triage attributes"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:177
# 83c1df9160a94ac8a361a1ceed07c9ba
msgid "A number of flags, appearing as checkboxes in Trac, can be set on a ticket:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:180
# 21796d92f0384e96bd2998518ed7f338
msgid "This means the ticket has an associated :doc:`patch<writing-code/submitting-patches>`. These will be reviewed to see if the patch is \"good\"."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:185
# da259d5440ed486fb77b360ffd6a1064
msgid "This flag is used for tickets with patches that need associated documentation. Complete documentation of features is a prerequisite before we can check them into the codebase."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:190
# d5ee1a803bf24b359e93c890b71782eb
msgid "This flags the patch as needing associated unit tests. Again, this is a required part of a valid patch."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:194
# 334bb1964f0c43b88d4cc6a46d5e8735
msgid "This flag means that although the ticket *has* a patch, it's not quite ready for checkin. This could mean the patch no longer applies cleanly, there is a flaw in the implementation, or that the code doesn't meet our standards."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:200
# 0353ac3d7a4942d89aec39c953ebb86d
msgid "Tickets that would require small, easy, patches."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:202
# c003687c7ba74e5092a741ff7f648b40
msgid "Tickets should be categorized by *type* between:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:205
# 534813c634724b1aac2c29c2ebb209b5
msgid "For adding something new."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:208
# 9278699e7b0a416b9d82434f3c74094d
msgid "For when an existing thing is broken or not behaving as expected."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:211
# de28a63691d54da7ab41208f544aa317
msgid "For when nothing is broken but something could be made cleaner, better, faster, stronger."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:214
# 32efed40cf164361b48c34a734070260
msgid "Tickets should also be classified into *components* indicating which area of the Django codebase they belong to. This makes tickets better organized and easier to find."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:218
# df61eebbcd804103bb7ac7cc52c9515f
msgid "The *severity* attribute is used to identify blockers, that is, issues which should get fixed before releasing the next version of Django. Typically those issues are bugs causing regressions from earlier versions or potentially causing severe data losses. This attribute is quite rarely used and the vast majority of tickets have a severity of \"Normal\"."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:224
# da1e10d61d444330be8284d95fc2fbfe
msgid "Finally, it is possible to use the *version* attribute to indicate in which version the reported bug was identified."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:230
# df352decf4424e5c9c295befd530f0ca
msgid "Closing Tickets"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:232
# 44326673dc3048e191185b3fd7989685
msgid "When a ticket has completed its useful lifecycle, it's time for it to be closed. Closing a ticket is a big responsibility, though. You have to be sure that the issue is really resolved, and you need to keep in mind that the reporter of the ticket may not be happy to have their ticket closed (unless it's fixed, of course). If you're not certain about closing a ticket, just leave a comment with your thoughts instead."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:239
# 523348e62ef74a7587a31651eadd59cb
msgid "If you do close a ticket, you should always make sure of the following:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:241
# aae7afa15eee4f43ab32eaf65ee6a764
msgid "Be certain that the issue is resolved."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:243
# bb5ac620b1164647964950a51e5d6c67
msgid "Leave a comment explaining the decision to close the ticket."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:245
# b572bda71d004be7ae7f4af79a612ec9
msgid "If there is a way they can improve the ticket to reopen it, let them know."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:247
# 896a2826a654448396a8b4d21d17d182
msgid "If the ticket is a duplicate, reference the original ticket. Also cross-reference the closed ticket by leaving a comment in the original one -- this allows to access more related information about the reported bug or requested feature."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:252
# bc620d31910f4cfe9e6f1340f041f771
msgid "**Be polite.** No one likes having their ticket closed. It can be frustrating or even discouraging. The best way to avoid turning people off from contributing to Django is to be polite and friendly and to offer suggestions for how they could improve this ticket and other tickets in the future."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:258
# 8a33e89ed9e8407fa0dc6cdc26d5ae1b
msgid "A ticket can be resolved in a number of ways:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:261
# daa9500ae78742e99a7b062f749b035e
msgid "Used by the core developers once a patch has been rolled into Django and the issue is fixed."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:265
# 87d3a00f62e74df6bdaafdd7d5476bb9
msgid "Used if the ticket is found to be incorrect. This means that the issue in the ticket is actually the result of a user error, or describes a problem with something other than Django, or isn't a bug report or feature request at all (for example, some new users submit support queries as tickets)."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:272
# ed21e0d411d34e3da8396050fe92d60c
msgid "Used when a core developer decides that this request is not appropriate for consideration in Django. This is usually chosen after discussion in the `django-developers`_ mailing list. Feel free to start or join in discussions of \"wontfix\" tickets on the django-developers_ mailing list, but please do not reopen tickets closed as \"wontfix\" by a :doc:`core developer</internals/committers>`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:280
# 3a82024901f84b738d15a5ffddc86033
msgid "Used when another ticket covers the same issue. By closing duplicate tickets, we keep all the discussion in one place, which helps everyone."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:285
# 5c866655dc334eb4a1d73c451961f830
msgid "Used when the ticket doesn't contain enough detail to replicate the original bug."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:289
# c7b1c3f7575e4032916fbf9aaaaceec7
msgid "Used when the ticket does not contain enough information to replicate the reported issue but is potentially still valid. The ticket should be reopened when more information is supplied."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:293
# e65a63422f014cb1a992e1ff6a677a09
msgid "If you believe that the ticket was closed in error -- because you're still having the issue, or it's popped up somewhere else, or the triagers have made a mistake -- please reopen the ticket and provide further information. Again, please do not reopen tickets that have been marked as \"wontfix\" by core developers and bring the issue to django-developers_ instead."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:302
# eb3956d8e15940c2b2056fa966977a2f
msgid "How can I help with triaging?"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:304
# 59a97c55b727446b87951a0bc093fcfe
msgid "Although the core developers make the big decisions in the ticket triage process, there's a lot that general community members can do to help the triage process. Really, **ANYONE** can help."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:308
# 0dcf3f0628934d0dbe69335321e0c04c
msgid "Start by `creating an account on Trac`_. If you have an account but have forgotten your password, you can reset it using the `password reset page`_."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:311
# b54ccb841002420a8f3ddb931072d0e2
msgid "Then, you can help out by:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:313
# 31ca305bdf2f4b25911f59974708d011
msgid "Closing \"Unreviewed\" tickets as \"invalid\", \"worksforme\" or \"duplicate.\""
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:315
# 843898cfbef74992b869e3319c27f7b1
msgid "Promoting \"Unreviewed\" tickets to \"Design decision needed\" if a design decision needs to be made, or \"Accepted\" in case of obvious bugs or sensible, clearly defined, feature requests."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:319
# 48db0dab302e488a8139ad6086eb4d64
msgid "Correcting the \"Needs tests\", \"Needs documentation\", or \"Has patch\" flags for tickets where they are incorrectly set."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:322
# b855b160be8441b2acbc4e9e01b2ac88
msgid "Setting the \"`Easy pickings`_\" flag for tickets that are small and relatively straightforward."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:325
# 38e817da050046a4abe698c644a1f43e
msgid "Checking that old tickets are still valid. If a ticket hasn't seen any activity in a long time, it's possible that the problem has been fixed but the ticket hasn't yet been closed."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:329
# 93a6fbdb18d44562a0fd36b2bace46db
msgid "Contacting the owners of tickets that have been claimed but have not seen any recent activity. If the owner doesn't respond after a week or so, remove the owner's claim on the ticket."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:333
# 2939bb0d82f44a5bab41711eb6ea6035
msgid "Identifying trends and themes in the tickets. If there a lot of bug reports about a particular part of Django, it may indicate we should consider refactoring that part of the code. If a trend is emerging, you should raise it for discussion (referencing the relevant tickets) on `django-developers`_."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:339
# a257123c57fb4fb69249781e47c964e4
msgid "Set the *type* of tickets that are still uncategorized."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:341
# 7c5e96308d454a15ada7eeb1bfe2a676
msgid "Verify if patches submitted by other users are correct. If they do and also contain appropriate documentation and tests then move them to the \"Ready for Checkin\" stage. If they don't then leave a comment to explain why and set the corresponding flags (\"Patch needs improvement\", \"Needs tests\" etc.)."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:349
# d63e55a3440e4d698bbeb1a3532b9bf5
msgid "The `Reports page`_ contains links to many useful Trac queries, including several that are useful for triaging tickets and reviewing patches as suggested above."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:353
# e0ff85f0492c469987d63a14452fa152
msgid "You can also find more :doc:`new-contributors`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:357
# ec96ec4fc4d84b40ba5451555d16ba2c
msgid "However, we do ask the following of all general community members working in the ticket database:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:360
# ebe693335a0548188ef7fb796a92ea35
msgid "Please **don't** close tickets as \"wontfix.\" The core developers will make the final determination of the fate of a ticket, usually after consultation with the community."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:364
# 2e0e3aadc01d4cd8a2d55f622bc6fe43
msgid "Please **don't** promote your own tickets to \"Ready for checkin\". You may mark other people's tickets which you've reviewed as \"Ready for checkin\", but you should get at minimum one other community member to review a patch that you submit."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:369
# 9556ca7935644449b469bec84c53bcbf
msgid "Please **don't** reverse a decision that has been made by a :doc:`core developer</internals/committers>`. If you disagree with a decision that has been made, please post a message to `django-developers`_."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:373
# 1fcff7eae53f44f8abd73be7e0430fdd
msgid "If you're unsure if you should be making a change, don't make the change but instead leave a comment with your concerns on the ticket, or post a message to `django-developers`_. It's okay to be unsure, but your input is still valuable."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:3
# be910dd7ef5542e4b60831823755fd27
msgid "Branch policy"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:5
# dfdcbfe7a1b64c1d836d92ec028cdfea
msgid "In general, the trunk must be kept stable. People should be able to run production sites against the trunk at any time. Additionally, commits to trunk ought to be as atomic as possible -- smaller changes are better. Thus, large feature changes -- that is, changes too large to be encapsulated in a single patch, or changes that need multiple eyes on them -- must happen on dedicated branches."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:12
# 2a5de5bdf94f43daac9daa59ab0a65c0
msgid "This means that if you want to work on a large feature -- anything that would take more than a single patch, or requires large-scale refactoring -- you need to do it on a feature branch. Our development process recognizes two options for feature branches:"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:17
# 2d519cab09f640659aa43bbf32c3ec52
msgid "Feature branches using a distributed revision control system like Git_, Mercurial_, Bazaar_, etc."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:20
# 78088ccc32f24e10a0f202397e577ccd
msgid "If you're familiar with one of these tools, this is probably your best option since it doesn't require any support or buy-in from the Django core developers."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:24
# ffa394cc5a2f4061b8fba3a4a220b232
msgid "However, do keep in mind that Django will continue to use Subversion for the foreseeable future, and this will naturally limit the recognition of your branch. Further, if your branch becomes eligible for merging to trunk you'll need to find a core developer familiar with your DVCS of choice who'll actually perform the merge."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:30
# 843e04b1b39444e4b0f6c4abee5fd701
msgid "If you do decided to start a distributed branch of Django and choose to make it public, please add the branch to the `Django branches`_ wiki page."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:34
# 0836a3731da54d978ae07df909946808
msgid "Feature branches using SVN have a higher bar. If you want a branch in SVN itself, you'll need a \"mentor\" among the :doc:`core committers </internals/committers>`. This person is responsible for actually creating the branch, monitoring your process (see below), and ultimately merging the branch into trunk."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:40
# cc0f378d2e2b46e9926249214547e743
msgid "If you want a feature branch in SVN, you'll need to ask in `django-developers`_ for a mentor."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:49
# 1283b48907d448678c0f7f456f0f69c7
msgid "Branch rules"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:51
# 61b3aabb0e474b10892fa34baffba77a
msgid "We've got a few rules for branches born out of experience with what makes a successful Django branch."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:54
# 84331b98f3ee453d807b86cfb111de30
msgid "DVCS branches are obviously not under central control, so we have no way of enforcing these rules. However, if you're using a DVCS, following these rules will give you the best chance of having a successful branch (read: merged back to trunk)."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:59
# b9038edc132748a3baca1c39070c0e4a
msgid "Developers with branches in SVN, however, **must** follow these rules. The branch mentor will keep on eye on the branch and **will delete it** if these rules are broken."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:63
# 54a721114b214868b87c354187bcaf0d
msgid "Only branch entire copies of the Django tree, even if work is only happening on part of that tree. This makes it painless to switch to a branch."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:67
# 2207c33ac4774f65b75cde0f62b73293
msgid "Merge changes from trunk no less than once a week, and preferably every couple-three days."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:70
# b3d6170374bb488c97af671a395aa770
msgid "In our experience, doing regular trunk merges is often the difference between a successful branch and one that fizzles and dies."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:73
# 8c4bdfbeb4fc4c278d5bb1b8f7da943a
msgid "If you're working on an SVN branch, you should be using `svnmerge.py`_ to track merges from trunk."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:76
# 32c7c6f04cd0410f8d76e14dea56548b
msgid "Keep tests passing and documentation up-to-date. As with patches, we'll only merge a branch that comes with tests and documentation."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:81
# 12d7c53f5ec148bdb08e009555033414
msgid "Once the branch is stable and ready to be merged into the trunk, alert `django-developers`_."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:84
# bf9aec0783ea4d60a583ae7c50d0cdbc
msgid "After a branch has been merged, it should be considered \"dead\"; write access to it will be disabled, and old branches will be periodically \"trimmed.\" To keep our SVN wrangling to a minimum, we won't be merging from a given branch into the trunk more than once."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:90
# 4209731491a74b5691525eef09e7c96b
msgid "Using branches"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:92
# 926fb6448e9a49f1b8b34dc7c1e449b8
msgid "To use a branch, you'll need to do two things:"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:94
# bbd29a7ea1524af59fdcdbb0332fe956
msgid "Get the branch's code through Subversion."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:96
# ca18225a18a342df9457a0dabb805c22
msgid "Point your Python ``site-packages`` directory at the branch's version of the ``django`` package rather than the version you already have installed."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:101
# 13f48ac7d13a40f4917bcf3ca2e49bfc
msgid "Getting the code from Subversion"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:103
# e24f8cad8716417c8ca0cfb366f82402
msgid "To get the latest version of a branch's code, check it out using Subversion:"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:109
# a88d293faf1240da9a29fa660be6183b
msgid "...where ``<branch>`` is the branch's name. See the `list of branch names`_."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:111
# 9875dd28aa834fce9dacd000c7e93599
msgid "Alternatively, you can automatically convert an existing directory of the Django source code as long as you've checked it out via Subversion. To do the conversion, execute this command from within your ``django`` directory:"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:119
# 295ce26a30b84da3947501bd6248c862
msgid "The advantage of using ``svn switch`` instead of ``svn co`` is that the ``switch`` command retains any changes you might have made to your local copy of the code. It attempts to merge those changes into the \"switched\" code. The disadvantage is that it may cause conflicts with your local changes if the \"switched\" code has altered the same lines of code."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:125
# 74369ed1478a488a999db917c79d6d4f
msgid "(Note that if you use ``svn switch``, you don't need to point Python at the new version, as explained in the next section.)"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:133
# 7c5b1db1e468475b9fc10252d68c2c8d
msgid "Pointing Python at the new Django version"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:135
# 09d0053fd0e9436eb80f8758fa18943a
msgid "Once you've retrieved the branch's code, you'll need to change your Python ``site-packages`` directory so that it points to the branch version of the ``django`` directory. (The ``site-packages`` directory is somewhere such as ``/usr/lib/python2.7/site-packages`` or ``/usr/local/lib/python2.7/site-packages`` or ``C:\\Python\\site-packages``.)"
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:141
# 157eb169f3574265a7a1456cbeca5938
msgid "The simplest way to do this is by renaming the old ``django`` directory to ``django.OLD`` and moving the trunk version of the code into the directory and calling it ``django``."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:145
# 1298de68b98a416582ad4e9fed05c301
msgid "Alternatively, you can use a symlink called ``django`` that points to the location of the branch's ``django`` package. If you want to switch back, just change the symlink to point to the old code."
msgstr ""

#: ../../internals/contributing/writing-code/branch-policy.txt:149
# f919a9bd61b849eb9710f32e344d9440
msgid "A third option is to use a path file (``<something>.pth``). This is a feature of the :mod:`site` module. First, make sure there are no files, directories or symlinks named ``django`` in your ``site-packages`` directory. Then create a text file named ``django.pth`` and save it to your ``site-packages`` directory. That file should contain a path to your copy of Django on a single line and optional comments. Here is an example that points to multiple branches. Just uncomment the line for the branch you want to use ('trunk' in this example) and make sure all other lines are commented::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:3
# d1a1add441524c3398a6c675fb12d7a1
msgid "Coding style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:5
# 058f94fc25b442048a5306dcfd25d725
msgid "Please follow these coding standards when writing code for inclusion in Django."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:8
# ab941a569b0e4c7caf44182bcc68de17
msgid "Python style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:10
# ebdf7feae33e4eb4b464f5571d36d608
msgid "Unless otherwise specified, follow :pep:`8`."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:12
# e58214f590404ee9912c6532af325ee9
msgid "You could use a tool like `pep8`_ to check for some problems in this area, but remember that :pep:`8` is only a guide, so respect the style of the surrounding code as a primary goal."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:16
# 2ca812e0c06a4534b195c4dc2bfea6ad
msgid "One big exception to :pep:`8` is our preference of longer line lengths. We're well into the 21st Century, and we have high-resolution computer screens that can fit way more than 79 characters on a screen. Don't limit lines of code to 79 characters if it means the code looks significantly uglier or is harder to read."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:22
# 858bf5ed8672447c81733ef861660996
msgid "Use four spaces for indentation."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:24
# 581538bb39ce4fdc985ee2b95f684643
msgid "Use underscores, not camelCase, for variable, function and method names (i.e. ``poll.get_unique_voters()``, not ``poll.getUniqueVoters``)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:27
# 53052d7412784752a03e55972f8193e0
msgid "Use ``InitialCaps`` for class names (or for factory functions that return classes)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:30
# 25358df957cc440fb715b7a0e2c642cb
msgid "In docstrings, use \"action words\" such as::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:38
# d27df80ede164549bf8f54f1eba29977
msgid "Here's an example of what not to do::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:47
# 8695d1332c244642a82fbfb341e11f3c
msgid "Template style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:49
# cf9fa0f6027f49ee9ee09182e86fed4a
msgid "In Django template code, put one (and only one) space between the curly brackets and the tag contents."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:52
# f4c145db4f62497ea6f80462df3f2ac4
msgid "Do this:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:58
# d3e5e5c6d68f4c9fb2592811dc9dee87
msgid "Don't do this:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:65
# f3c3acba1a254122ae71dfb079fd49ce
msgid "View style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:67
# 55e433e0bc6c4b1680b62be88dfddab7
msgid "In Django views, the first parameter in a view function should be called ``request``."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:70
#: ../../internals/contributing/writing-code/coding-style.txt:86
#: ../../internals/contributing/writing-code/coding-style.txt:101
# b67f2c3f855b456eb6a5165461ae73dd
# 6ac72ba7631a46dc9380d81392359694
# 653f2d6ff1704a2ab7b35d988b804761
msgid "Do this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:75
#: ../../internals/contributing/writing-code/coding-style.txt:92
#: ../../internals/contributing/writing-code/coding-style.txt:110
# 23ac4fca7f40482d89febbe8e09e0ddf
# 7b4335ababfd486898897d6b6abc3384
# 54ae3fc226664baf9eb3790052479ac1
msgid "Don't do this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:81
# b0a7ec42d64d49ecbda9da4f64793abe
msgid "Model style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:83
# e5b0529ba37a42b49bed16b25e4fd476
msgid "Field names should be all lowercase, using underscores instead of camelCase."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:98
# d71d9fd5cafa4b239172b8a5d0cb9e6d
msgid "The ``class Meta`` should appear *after* the fields are defined, with a single blank line separating the fields and the class definition."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:118
# bcc644bdcc904cbbb73b691f80e99770
msgid "Don't do this, either::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:127
# 3e08a23e76bf4f4f82360ae0a728b3c6
msgid "The order of model inner classes and standard methods should be as follows (noting that these are not all required):"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:130
# c9b1b9676bd14dc2936ecc3dd24b7042
msgid "All database fields"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:131
# 0054abd67b724e33aa0b54c18f2b3d38
msgid "Custom manager attributes"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:132
# 44d9502290dd44eebf86b3a20920b1ea
msgid "``class Meta``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:133
# 5da37fa8c8964dbbb210644238acc8a1
msgid "``def __unicode__()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:134
# b91f31b6df064d409a15250bca724e81
msgid "``def __str__()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:135
# f173771463e64520bf71bb63a288704e
msgid "``def save()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:136
# d8ac07fb21bf4dda969d6cdc2e295bc8
msgid "``def get_absolute_url()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:137
# 4b8425e966d547b0a7fdae80c96842d5
msgid "Any custom methods"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:139
# d29418c771d54dc898ff14924f212e2a
msgid "If ``choices`` is defined for a given model field, define the choices as a tuple of tuples, with an all-uppercase name, either near the top of the model module or just above the model class. Example::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:149
# 7a77d9f80abb4411adbfbc026a51af10
msgid "Use of ``django.conf.settings``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:151
# 2244e8f5c12e4e869a1b7d6bd8fcd4aa
msgid "Modules should not in general use settings stored in ``django.conf.settings`` at the top level (i.e. evaluated when the module is imported). The explanation for this is as follows:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:155
# c03eeb24ad78426e8ad152ff62aa9180
msgid "Manual configuration of settings (i.e. not relying on the ``DJANGO_SETTINGS_MODULE`` environment variable) is allowed and possible as follows::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:163
# 6f683baf02154dc4a17dba9b5a1ff267
msgid "However, if any setting is accessed before the ``settings.configure`` line, this will not work. (Internally, ``settings`` is a ``LazyObject`` which configures itself automatically when the settings are accessed if it has not already been configured)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:168
# d0bb9e5c26194ff596be79121df28ef3
msgid "So, if there is a module containing some code as follows::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:175
# 4d7f1e5138724336ac79f2d0426b0ae0
msgid "...then importing this module will cause the settings object to be configured. That means that the ability for third parties to import the module at the top level is incompatible with the ability to configure the settings object manually, or makes it very difficult in some circumstances."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:180
# 3de8dc40b8674e9f8dd55a02576f0b82
msgid "Instead of the above code, a level of laziness or indirection must be used, such as :class:`django.utils.functional.LazyObject`, :func:`django.utils.functional.lazy` or ``lambda``."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:185
# b14348669e424e2e9a01312608f4437f
msgid "Miscellaneous"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:187
# be3646fcb6494da4a2953990a8692170
msgid "Mark all strings for internationalization; see the :doc:`i18n documentation </topics/i18n/index>` for details."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:190
# cf47ac8ccb564923ae1bd9c72e68a2bc
msgid "Remove ``import`` statements that are no longer used when you change code. The most common tools for this task are `pyflakes`_ and `pylint`_."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:193
# b053032274d741fbb9004a557106280f
msgid "Systematically remove all trailing whitespaces from your code as those add unnecessary bytes, add visual clutter to the patches and can also occasionally cause unnecessary merge conflicts. Some IDE's can be configured to automatically remove them and most VCS tools can be set to highlight them in diff outputs. Note, however, that patches which only remove whitespace (or only make changes for nominal :pep:`8` conformance) are likely to be rejected, since they only introduce noise rather than code improvement. Tidy up when you're next changing code in the area."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:202
# b95af3ad604a4f1995937cfbd81de608
msgid "Please don't put your name in the code you contribute. Our policy is to keep contributors' names in the ``AUTHORS`` file distributed with Django -- not scattered throughout the codebase itself. Feel free to include a change to the ``AUTHORS`` file in your patch if you make more than a single trivial change."
msgstr ""

#: ../../internals/contributing/writing-code/index.txt:3
# 4088da58a75d424dbc228c08ea59951f
msgid "Writing code"
msgstr ""

#: ../../internals/contributing/writing-code/index.txt:5
# 3bae190d06c9497499c3d85ec55e4852
msgid "So you'd like to write some code to improve Django. Awesome! Browse the following sections to find out how to give your code patches the best chances to be included in Django core:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:3
# 2ac43c5261694d29b60a1ba648f61f34
msgid "Submitting patches"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:5
# 4c53a7cb70854e4d8cdb9774aa55b00f
msgid "We're always grateful for patches to Django's code. Indeed, bug reports with associated patches will get fixed *far* more quickly than those without patches."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:10
# ba9d484cda1245f9817bb25b5e74e85e
msgid "Typo fixes and trivial documentation changes"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:12
# dbedef7c59ff4ac2a2d3c912af3b4ec9
msgid "If you are fixing a really trivial issue, for example changing a word in the documentation, the preferred way to provide the patch is using GitHub pull requests without a Trac ticket. Trac tickets are still acceptable."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:16
# d2edcac8e0b442e39ce062569c3eafe4
msgid "See the :doc:`working-with-git` for more details on how to use pull requests."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:19
# 130e1edd7b544f85acd0016a4c1ff69c
msgid "\"Claiming\" tickets"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:21
# e5c79e0982184c74a75786697ac9258c
msgid "In an open-source project with hundreds of contributors around the world, it's important to manage communication efficiently so that work doesn't get duplicated and contributors can be as effective as possible."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:25
# bef15b06c402485291b3a0d4fad47574
msgid "Hence, our policy is for contributors to \"claim\" tickets in order to let other developers know that a particular bug or feature is being worked on."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:28
# 23f8362584f845f7ac5312d6c891bffa
msgid "If you have identified a contribution you want to make and you're capable of fixing it (as measured by your coding ability, knowledge of Django internals and time availability), claim it by following these steps:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:32
# d0fd2df804614f649605bfe9049da0e0
msgid "`Create an account`_ to use in our ticket system. If you have an account but have forgotten your password, you can reset it using the `password reset page`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:36
# 444e680777ed454eb7f23bdd706897ff
msgid "If a ticket for this issue doesn't exist yet, create one in our `ticket tracker`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:39
# 80028d81ebc3490f841acc373b853f9e
msgid "If a ticket for this issue already exists, make sure nobody else has claimed it. To do this, look at the \"Assigned to\" section of the ticket. If it's assigned to \"nobody,\" then it's available to be claimed. Otherwise, somebody else is working on this ticket, and you either find another bug/feature to work on, or contact the developer working on the ticket to offer your help."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:46
# 1bd55df9aa61480b8dc86e1eeef914b8
msgid "Log into your account, if you haven't already, by clicking \"Login\" in the upper right of the ticket page."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:49
# d0b77a08d7a44f9085fed9bcbd14d291
msgid "Claim the ticket:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:51
# 4e60e8cc32b142698153ced31856b2c3
msgid "click the \"accept\" radio button under \"Action\" near the bottom of the page,"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:53
# 20d5ad2466fb4714b0940b930ffa173e
msgid "then click \"Submit changes.\""
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:56
# 52ee7c9824264c74a0ffc45400d3b58f
msgid "The Django software foundation requests that anyone contributing more than a trivial patch to Django sign and submit a `Contributor License Agreement`_, this ensures that the Django Software Foundation has clear license to all contributions allowing for a clear license for all users."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:66
# 10e44e42537444f1846f4175db6fd95e
msgid "Ticket claimers' responsibility"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:68
# 74b32eaf72f143caa43cd8633e8578c4
msgid "Once you've claimed a ticket, you have a responsibility to work on that ticket in a reasonably timely fashion. If you don't have time to work on it, either unclaim it or don't claim it in the first place!"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:72
# fd92338ccd3e496f83168c9f9a83e28c
msgid "If there's no sign of progress on a particular claimed ticket for a week or two, another developer may ask you to relinquish the ticket claim so that it's no longer monopolized and somebody else can claim it."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:76
# 977d45de99d54b44842a6de8367ae4ae
msgid "If you've claimed a ticket and it's taking a long time (days or weeks) to code, keep everybody updated by posting comments on the ticket. If you don't provide regular updates, and you don't respond to a request for a progress report, your claim on the ticket may be revoked."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:81
# 8cce99a1bcfb4be9bba2db50a2df56d2
msgid "As always, more communication is better than less communication!"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:84
# 3ce1066d7eb349d3a03c5c725de99508
msgid "Which tickets should be claimed?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:86
# 575b582f90c0427f9e3b10d7fb3b6042
msgid "Of course, going through the steps of claiming tickets is overkill in some cases."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:89
# 17d0db0272ee4145869af5ee094693a4
msgid "In the case of small changes, such as typos in the documentation or small bugs that will only take a few minutes to fix, you don't need to jump through the hoops of claiming tickets. Just submit your patch and be done with it."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:94
# 4875492c973c4803b763d8f8e75c95e7
msgid "Of course, it is *always* acceptable, regardless whether someone has claimed it or not, to submit patches to a ticket if you happen to have a patch ready."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:100
# b1fe3d10c7694e26ab4cf6cb8b7f0a7f
msgid "Patch style"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:102
# aae75613803f4ef88e0cd9368a269e21
msgid "Make sure that any contribution you do fulfills at least the following requirements:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:105
# aa2921bf42564a22b9d3fcd18c1dc4b5
msgid "The code required to fix a problem or add a feature is an essential part of a patch, but it is not the only part. A good patch should also include a :doc:`regression test <unit-tests>` to validate the behavior that has been fixed and to prevent the problem from arising again. Also, if some tickets are relevant to the code that you've written, mention the ticket numbers in some comments in the test so that one can easily trace back the relevant discussions after your patch gets committed, and the tickets get closed."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:113
# 9eef7bbb82e54aabb2e7dc547bba8664
msgid "If the code associated with a patch adds a new feature, or modifies behavior of an existing feature, the patch should also contain documentation."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:117
# 1148d4e01925407b8dd3307d2b6f7a98
msgid "You can use either GitHub branches and pull requests or direct patches to publish your work. If you use the Git workflow, then you should announce your branch in the ticket by including a link to your branch. When you think your work is ready to be merged in create a pull request."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:122
# e33fee672e254e2db8958730bcac99fc
msgid "See the :doc:`working-with-git` documentation for mode details."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:124
# 0325bfc8fe784fdab76cb7b42138548d
msgid "You can also use patches in Trac. When using this style, follow these guidelines."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:127
# 53a74e25e8a74225992107c6f91139ae
msgid "Submit patches in the format returned by the ``git diff`` command. An exception is for code changes that are described more clearly in plain English than in code. Indentation is the most common example; it's hard to read patches when the only difference in code is that it's indented."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:133
# 4ddfad99222640f2a3a677eb297523e1
msgid "Attach patches to a ticket in the `ticket tracker`_, using the \"attach file\" button. Please *don't* put the patch in the ticket description or comment unless it's a single line patch."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:137
# 8d84ee0642ed49fb89eeb6f9a8af4201
msgid "Name the patch file with a ``.diff`` extension; this will let the ticket tracker apply correct syntax highlighting, which is quite helpful."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:140
# 98c239aa5f2245399d993fa825d13bb5
msgid "Regardless of the way you submit your work, follow these steps."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:142
# 1320b957aa48417f9c1b40036218c43c
msgid "Make sure your code matches our :doc:`coding-style`."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:144
# 9c64e48c34334bdabc49c9815f74dfe2
msgid "Check the \"Has patch\" box on the ticket details. This will make it obvious that the ticket includes a patch, and it will add the ticket to the `list of tickets with patches`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:150
# ce7e7610997f40c4b078e3c4da3684a8
msgid "Non-trivial patches"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:152
# 54296ded64b24d70a327c1aab965a235
msgid "A \"non-trivial\" patch is one that is more than a simple bug fix. It's a patch that introduces Django functionality and makes some sort of design decision."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:155
# 4a063b85165241278a1532ba4e744575
msgid "If you provide a non-trivial patch, include evidence that alternatives have been discussed on `django-developers`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:158
# 1bc8bc64e1474435be4fc254d86c011d
msgid "If you're not sure whether your patch should be considered non-trivial, just ask."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:162
# 89c8766e83934a79878bfee08dd89349
msgid "Javascript patches"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:164
# c248305f77864bb99a0b2cd1ba097a46
msgid "Django's admin system leverages the jQuery framework to increase the capabilities of the admin interface. In conjunction, there is an emphasis on admin javascript performance and minimizing overall admin media file size. Serving compressed or \"minified\" versions of javascript files is considered best practice in this regard."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:170
# 94e20dde5ee742c093a8f084aaf481f7
msgid "To that end, patches for javascript files should include both the original code for future development (e.g. ``foo.js``), and a compressed version for production use (e.g. ``foo.min.js``). Any links to the file in the codebase should point to the compressed version."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:176
# 59988b7009d44ac8a96415865f260c53
msgid "Compressing JavaScript"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:178
# 2a7cbe53bce14aea9e9b652577bf10fb
msgid "To simplify the process of providing optimized javascript code, Django includes a handy script which should be used to create a \"minified\" version. This script is located at ``django/contrib/admin/static/admin/js/compress.py``."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:182
# 3dcb42ddbec04483be86f66d501232e5
msgid "Behind the scenes, ``compress.py`` is a front-end for Google's `Closure Compiler`_ which is written in Java. However, the Closure Compiler library is not bundled with Django directly, so those wishing to contribute complete javascript patches will need to download and install the library independently."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:188
# 40cefaa1ab91495c88c71d32cebbff77
msgid "The Closure Compiler library requires Java version 6 or higher (Java 1.6 or higher on Mac OS X. Note that Mac OS X 10.5 and earlier did not ship with Java 1.6 by default, so it may be necessary to upgrade your Java installation before the tool will be functional. Also note that even after upgrading Java, the default ``/usr/bin/java`` command may remain linked to the previous Java binary, so relinking that command may be necessary as well.)"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:195
# 56975fd60c5248b4b6f8a0ac2790c24d
msgid "Please don't forget to run ``compress.py`` and include the ``diff`` of the minified scripts when submitting patches for Django's javascript."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:3
# 718c5deee8ad4298ab46f5b31b162778
msgid "Unit tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:5
# e3aec479229a46b39e0f3a1372a49c69
msgid "Django comes with a test suite of its own, in the ``tests`` directory of the code base. It's our policy to make sure all tests pass at all times."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:8
# d20816c3307f4cc7a32738cf7a9a45c1
msgid "The tests cover:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:10
# 09098ce5283a49b49643b47c228b1483
msgid "Models and the database API (``tests/modeltests``),"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:11
# 4ef536ea59724acb8de3bbe2488d5fb1
msgid "Everything else in core Django code (``tests/regressiontests``),"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:12
# 18a75edd3b3540a09e00c9cae05fb729
msgid ":ref:`contrib-apps` (``django/contrib/<app>/tests`` or ``tests/regressiontests/<app>_...``)."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:15
# 8543fd61e64a4f2085189b738f6c147d
msgid "We appreciate any and all contributions to the test suite!"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:17
# 4b92b0c4c9f74466bfa36223865dd81a
msgid "The Django tests all use the testing infrastructure that ships with Django for testing applications. See :doc:`Testing Django applications </topics/testing>` for an explanation of how to write new tests."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:24
# 3300a82bce724a47884fa823d0ffd884
msgid "Running the unit tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:27
# 61d648520d1742c0a417091afef80bd3
msgid "Quickstart"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:29
# 7fd6517cb24a41f2a5e62173d8195286
msgid "Running the tests requires a Django settings module that defines the databases to use. To make it easy to get started, Django provides a sample settings module that uses the SQLite database. To run the tests with this sample ``settings`` module, ``cd`` into the Django ``tests/`` directory and run:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:39
# 1e41801595914bc895e6cd1bcd4ced2a
msgid "If you get an ``ImportError: No module named django.contrib`` error, you need to add your install of Django to your ``PYTHONPATH``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:45
# a74618ffb11745bba5aadb7dc520aba4
msgid "Using another ``settings`` module"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:47
# 3479e833ca9d4b4fa86d54bb7dd78705
msgid "The included settings module allows you to run the test suite using SQLite. If you want to test behavior using a different database (and if you're proposing patches for Django, it's a good idea to test across databases), you may need to define your own settings file."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:52
# 48cc667527a24f3891c9af6fa325cdf9
msgid "To run the tests with different settings, ``cd`` to the ``tests/`` directory and type:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:59
# d8c15ce0dd7648999b830bcbe03d7783
msgid "The :setting:`DATABASES` setting in this test settings module needs to define two databases:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:62
# 51e350c2893244659ac8e11a8c3bbcbd
msgid "A ``default`` database. This database should use the backend that you want to use for primary testing"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:65
# 8faa3f36d5ce49658b5b25321d090a67
msgid "A database with the alias ``other``. The ``other`` database is used to establish that queries can be directed to different databases. As a result, this database can use any backend you want. It doesn't need to use the same backend as the ``default`` database (although it can use the same backend if you want to)."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:71
# d03dd8390c854e8f8d91211416fd27ed
msgid "If you're using a backend that isn't SQLite, you will need to provide other details for each database:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:74
# 25848df88c0540928b13833ff2344a11
msgid "The :setting:`USER` option for each of your databases needs to specify an existing user account for the database."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:77
# e7275a2bb602440ea06bb4f15964ed4e
msgid "The :setting:`PASSWORD` option needs to provide the password for the :setting:`USER` that has been specified."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:80
# 21605f949e3343ddbd6d4dad7f3a2d97
msgid "The :setting:`NAME` option must be the name of an existing database to which the given user has permission to connect. The unit tests will not touch this database; the test runner creates a new database whose name is :setting:`NAME` prefixed with ``test_``, and this test database is deleted when the tests are finished. This means your user account needs permission to execute ``CREATE DATABASE``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:87
# 6ad67b8bff6e46f2bd4504c638a1cb09
msgid "You will also need to ensure that your database uses UTF-8 as the default character set. If your database server doesn't use UTF-8 as a default charset, you will need to include a value for :setting:`TEST_CHARSET` in the settings dictionary for the applicable database."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:93
# b34f8af2b4d745cfadf9c0010e783887
msgid "Running only some of the tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:95
# ea3e44e4e2c446d192d1b7afc068e075
msgid "Django's entire test suite takes a while to run, and running every single test could be redundant if, say, you just added a test to Django that you want to run quickly without running everything else. You can run a subset of the unit tests by appending the names of the test modules to ``runtests.py`` on the command line."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:101
# fc3c685da76b431fa070028dc1c0f5cc
msgid "For example, if you'd like to run tests only for generic relations and internationalization, type:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:108
# dc83641f26f645998bff66cd04e1a859
msgid "How do you find out the names of individual tests? Look in ``tests/modeltests`` and ``tests/regressiontests`` â€” each directory name there is the name of a test. Contrib app names are also valid test names."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:112
# b00c854754154772b28ae6983b3ba348
msgid "If you just want to run a particular class of tests, you can specify a list of paths to individual test classes. For example, to run the ``TranslationTests`` of the ``i18n`` module, type:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:120
# de86623c7884445292df55176d5ca7d8
msgid "Going beyond that, you can specify an individual test method like this:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:127
# a0fbdff48b254596a27f34b3fcc0aac5
msgid "Running the Selenium tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:129
# 3a511e1cce154b50bebdae054a803d0f
msgid "Some admin tests require Selenium 2, Firefox and Python >= 2.6 to work via a real Web browser. To allow those tests to run and not be skipped, you must install the selenium_ package (version > 2.13) into your Python path."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:133
# 540834c77458450687d4dd412701b0cb
msgid "Then, run the tests normally, for example:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:142
# 1a50584f0d5846399df5b30f9c0ebf40
msgid "Running all the tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:144
# 69045046dd2f4096a063de8b9e20afd4
msgid "If you want to run the full suite of tests, you'll need to install a number of dependencies:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:147
# 9a7b80554f0b4ab1ae5de0c7482a6f7e
msgid "PyYAML_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:148
# e51c48e6e1ad4f429b289d250c1643af
msgid "Markdown_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:149
# a78b71648a2d4fa094fda382effc238a
msgid "Textile_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:150
# 68425f23e49d4e4aaaf266022b3b6fb1
msgid "Docutils_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:151
# 1eb998f2fa3c42c294cd22321614f15f
msgid "setuptools_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:152
# 866c556b27364507aa6cfe4f929b5e4e
msgid "memcached_, plus a :ref:`supported Python binding <memcached>`"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:153
# 1213931ca89047ca9debb34588b25853
msgid "gettext_ (:ref:`gettext_on_windows`)"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:154
# b224c513288e47b8b02bb92a636a23bb
msgid "selenium_ (if also using Python >= 2.6)"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:156
# 610193a54d1e4080842157c83d37dffa
msgid "If you want to test the memcached cache backend, you'll also need to define a :setting:`CACHES` setting that points at your memcached instance."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:159
# fbcd2bbf55364db38f5d4adb20a93a6b
msgid "Each of these dependencies is optional. If you're missing any of them, the associated tests will be skipped."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:172
# 918a865577d444b5ac4ab3963e83554b
msgid "Code coverage"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:174
# bcb1740aa6da4270b55322e25c00a43b
msgid "Contributors are encouraged to run coverage on the test suite to identify areas that need additional tests. The coverage tool installation and use is described in :ref:`testing code coverage<topics-testing-code-coverage>`."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:178
# c3a5c01cb2a14b4c8f4fc1988a474ae5
msgid "To run coverage on the Django test suite using the standard test settings::"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:182
# 1e268d296b84453db6a5b8b0b40a1e3e
msgid "After running coverage, generate the html report by running::"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:186
# 9069255f6b274c05a82855888085c90c
msgid "When running coverage for the Django tests, the included ``.coveragerc`` settings file  defines ``coverage_html`` as the output directory for the report and also excludes several directories not relevant to the results (test code or external code included in Django)."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:194
# eed1c0e0ae4047e4beae1b171650aa04
msgid "Contrib apps"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:196
# 92f7442583484b829a26e6189283f869
msgid "Tests for contrib apps go in their respective directories under ``django/contrib``, in a ``tests.py`` file. You can split the tests over multiple modules by using a ``tests`` directory in the normal Python way."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:200
# 8d91ff16fcda4cdcb6c7e5a8f4f3f719
msgid "For the tests to be found, a ``models.py`` file must exist, even if it's empty. If you have URLs that need to be mapped, put them in ``tests/urls.py``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:203
# 9cef3a6eb8ab490182c3bde03748d98a
msgid "To run tests for just one contrib app (e.g. ``markup``), use the same method as above::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:2
# 189d505a420b41a9bde96e61ec4f6972
msgid "Working with Git and GitHub"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:4
# daab109befde4c2a808a77291cc43617
msgid "This section explains how the community can contribute code to Django via pull requests. If you're interested in how core developers handle them, see :doc:`../committing-code`."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:8
# c2f84761337041d690ad1bee4c02b45b
msgid "Below, we are going to show how to create a GitHub pull request containing the changes for Trac ticket #xxxxx. By creating a fully-ready pull request you will make the committers' job easier, meaning that your work is more likely to be merged into Django."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:13
# 390eb20bf8e74f05856ef7aedf71107e
msgid "You could also upload a traditional patch to Trac, but it's less practical for reviews."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:17
# 740f78d7c7d9420faa3baef779b60308
msgid "Installing Git"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:19
# 32e1b30fc1d6427b9a333d28268bcc6c
msgid "Django uses `Git`_ for its source control. You can `download <http://git-scm.com/download>`_ Git, but it's often easier to install with your operating system's package manager."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:23
# a5bce719ae784dfc8725c4666bccc698
msgid "Django's `Git repository`_ is hosted on `GitHub`_, and it is recommended that you also work using GitHub."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:26
# 50d93499c06b4e8ab3063803204e3193
msgid "After installing Git the first thing you should do is setup your name and email::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:32
# d94a93ad0ae04ae497d1bb3e599e4d42
msgid "Note that ``user.name`` should be your real name, not your GitHub nick. GitHub should know the email you use in the ``user.email`` field, as this will be used to associate your commits with your GitHub account."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:41
# 645b022b32744e8bbe1f3659dfdd9ac4
msgid "Setting up local repository"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:43
# 0a9e78e87445411d89606a3b6f301791
msgid "When you have created your GitHub account, with the nick \"github_nick\", and forked Django's repository, create a local copy of your fork::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:48
# a9b2cd1885b34a218405bacc570cfc5a
msgid "This will create a new directory \"django\", containing a clone of your GitHub repository."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:51
# eec18a71481c496d95233d32b644a1a1
msgid "Your GitHub repository will be called \"origin\" in Git."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:53
# fe8ab8f2005c4a0a88476df5e4e89837
msgid "You should also setup django/django as an \"upstream\" remote (that is, tell git that the reference Django repository was the source of your fork of it)::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:59
# 9f0d3839f9fb4a0a874b70bfaf9c0340
msgid "You can add other remotes similarly, for example::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:64
# d9133687196b4ad38a4c92b54168966f
msgid "Working on a ticket"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:66
# 6e7bc0cfa8114374a40b89defcfdb83a
msgid "When working on a ticket create a new branch for the work, and base that work on upstream/master::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:71
# 4f68cf1e09f5491c9b77901bf672867e
msgid "The -b flag creates a new branch for you locally. Don't hesitate to create new branches even for the smallest things - that's what they are there for."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:74
# 43347e0c783a4a07979e9d83a1522045
msgid "If instead you were working for a fix on the 1.4 branch, you would do::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:78
# 0a0bbfc4013f43fb800161702046b6a5
msgid "Assume the work is carried on ticket_xxxxx branch. Make some changes and commit them::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:83
# 2804de36f79d4c5a8520e453527e6efb
msgid "When writing the commit message, follow the :ref:`commit message guidelines <committing-guidlines>` to ease the work of the committer. If you're uncomfortable with English, try at least to describe precisely what the commit does."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:88
# 5d33d596fe714a0dab98db9c607c6c8e
msgid "If you need to do additional work on your branch, commit as often as necessary::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:94
# 1766a4fb17154308b1fc2b9f1e62df57
msgid "Publishing work"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:96
# dc6c78ab40a14d15b854f60a1ca30f88
msgid "You can publish your work on GitHub just by doing::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:100
# 5c522ee2767648b9b30cead8d79e0fe4
msgid "When you go to your GitHub page you will notice a new branch has been created."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:102
# 67b8483abbcc4001966d1bb9c38dc226
msgid "If you are working on a Trac ticket, you should mention in the ticket that your work is available from branch ticket_xxxxx of your github repo. Include a link to your branch."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:106
# d571db6fa7994db593a660f949a8cc80
msgid "Note that the above branch is called a \"topic branch\" in Git parlance. You are free to rewrite the history of this branch, by using ``git rebase`` for example. Other people shouldn't base their work on such a branch, because their clone would become corrupt when you edit commits."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:111
# 27093e02c26649819fcbdebc278cfd72
msgid "There are also \"public branches\". These are branches other people are supposed to fork, so the history of these branches should never change. Good examples of public branches are the ``master`` and ``stable/A.B.x`` branches in the django/django repository."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:116
# 80122651b60746eab27d3453e8b4f7c8
msgid "When you think your work is ready to be pulled into Django, you should create a pull request at GitHub. A good pull request means:"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:119
# af08662513bc4fd5bd155ef9914b8a3d
msgid "commits with one logical change in each, following the :doc:`coding style <coding-style>`,"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:122
# b847d8019b0e48c5a7e0ef8577224ebc
msgid "well-formed messages for each commit: a summary line and then paragraphs wrapped at 72 characters thereafter -- see the :ref:`committing guidelines <committing-guidlines>` for more details,"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:126
# fbe52c98d2d44511aafec71311ce20df
msgid "documentation and tests, if needed -- actually tests are always needed, except for documentation changes."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:129
# a4da8dd1d7794f039c6d1c1a8bd895cb
msgid "The test suite must pass and the documentation must build without warnings."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:131
# 4f3be3002ad74437bba913d6800c95d5
msgid "Once you have created your pull request, you should add a comment in the related Trac ticket explaining what you've done. In particular you should note the environment in which you ran the tests, for instance: \"all tests pass under SQLite and MySQL\"."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:136
# b3950d1a6ee14c20a817f59448580f77
msgid "Pull requests at GitHub have only two states: open and closed. The committer who will deal with your pull request has only two options: merge it or close it. For this reason, it isn't useful to make a pull request until the code is ready for merging -- or sufficiently close that a committer will finish it himself."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:143
# 3853cd36cbf44b94b8bbb9060edf6591
msgid "Rebasing branches"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:145
# a53e2d7414f04b229064e8a35cca8435
msgid "In the example above you created two commits, the \"Fixed ticket_xxxxx\" commit and \"Added two more tests\" commit."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:148
# 1fc22d39abda41a7b9c7b52cc274be8a
msgid "We do not want to have the entire history of your working process in your repository. Your commit \"Added two more tests\" would be unhelpful noise. Instead, we would rather only have one commit containing all your work."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:152
# b0f218d1281d43e181f53fdaf50f92d9
msgid "To rework the history of your branch you can squash the commits into one by using interactive rebase::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:157
# f5e2b3b7079d4d4fa2c570cb69f86be5
msgid "The HEAD~2 above is shorthand for two latest commits. The above command will open an editor showing the two commits, prefixed with the word \"pick\"."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:160
# ff5079485c9641228ffa4c3950188035
msgid "Change the second line to \"squash\" instead. This will keep the first commit, and squash the second commit into the first one. Save and quit the editor. A second editor window should open, so you can reword the commit message for the commit now that it includes both your steps."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:165
# 1c06ff76f7df41c38f59f18f5bb03e34
msgid "You can also use the \"edit\" option in rebase. This way you can change a single commit, for example to fix a typo in a docstring::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:177
# 85ddcdd8cc614c5db3d2380c7ef93bfb
msgid "If your topic branch is already published at GitHub, for example if you're making minor changes to take into account a review, you will need to force- push the changes::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:183
# 57cb39e91b7c4a138db1f8ea58c1582f
msgid "Note that this will rewrite history of ticket_xxxxx - if you check the commit hashes before and after the operation at GitHub you will notice that the commit hashes do not match any more. This is acceptable, as the branch is merely a topic branch, and nobody should be basing their work on it."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:189
# 94f04dc4dd244bf7a8dc148c59327230
msgid "After upstream has changed"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:191
# 3dd074cdda124f76856fb819f5560e2e
msgid "When upstream (django/django) has changed, you should rebase your work. To do this, use::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:197
# d64b0595e50f44cc8bfed1c34982a45b
msgid "The work is automatically rebased using the branch you forked on, in the example case using upstream/master."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:200
# bc13045a240043a5845ff5d6d8acc4c9
msgid "The rebase command removes all your local commits temporarily, applies the upstream commits, and then applies your local commits again on the work."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:203
# 7ecd59e02a934c3792803b9f6fd1f260
msgid "If there are merge conflicts you will need to resolve them and then use ``git rebase --continue``. At any point you can use ``git rebase --abort`` to return to the original state."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:207
# b73203f94d13422c88f76a25d4df6ef1
msgid "Note that you want to *rebase* on upstream, not *merge* the upstream."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:209
# 5e8701a42aa04bf9bfac33b8273c4c2f
msgid "The reason for this is that by rebasing, your commits will always be *on top of* the upstream's work, not *mixed in with* the changes in the upstream. This way your branch will contain only commits related to its topic, which makes squashing easier."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:215
# 98a83653073942fb842dc45e981f91ad
msgid "After review"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:217
# 3cdc9d88d7984835a1bca660780cd1cc
msgid "It is unusual to get any non-trivial amount of code into core without changes requested by reviewers. In this case, it is often a good idea to add the changes as one incremental commit to your work. This allows the reviewer to easily check what changes you have done."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:222
# 048b43328c194e34ae301ed907815274
msgid "In this case, do the changes required by the reviewer. Commit as often as necessary. Before publishing the changes, rebase your work. If you added two commits, you would run::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:228
# 31553139f10b4f95bd7e4173a0c14d52
msgid "Squash the second commit into the first. Write a commit message along the lines of::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:235
# ea6015402e464541985d84e35c26f87c
msgid "Finally push your work back to your GitHub repository. Since you didn't touch the public commits during the rebase, you should not need to force-push::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:240
# e51143e04dbd49de9a4f2a31589af084
msgid "Your pull request should now contain the new commit too."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:242
# fddd115a998540d990674240166574c1
msgid "Note that the committer is likely to squash the review commit into the previous commit when committing the code."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:246
# 2432ab24edc348afbda8cac3277220ef
msgid "Summary"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:248
# ca1cde3865c84b3da85a384bf7150583
msgid "Work on GitHub if you can."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:249
# 42a74c3da2e3424c8b982ab34d35191e
msgid "Announce your work on the Trac ticket by linking to your GitHub branch."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:250
# 5c90364b27534fb19e4c0be86b1d3ca4
msgid "When you have something ready, make a pull request."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:251
# d8f802e0da78464781954f540bec5e4b
msgid "Make your pull requests as good as you can."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:252
# 82dc4809bd124376802ed27f401702b9
msgid "When doing fixes to your work, use ``git rebase -i`` to squash the commits."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:253
# 5afa08a66ba04c7794701083e3bc007c
msgid "When upstream has changed, do ``git fetch upstream; git rebase``."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:3
# 5b8a4fdf172b41219e3e81b1521394ac
msgid "Writing documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:5
# 4bb1d2e6c28a4d6291480ec92a861540
msgid "We place a high importance on consistency and readability of documentation. After all, Django was created in a journalism environment! So we treat our documentation like we treat our code: we aim to improve it as often as possible."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:10
# ad701db6b5544b8b9ff8c9d978a9ec8d
msgid "Documentation changes generally come in two forms:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:12
# feaffe79c08248a5af94b5963ac173d4
msgid "General improvements: typo corrections, error fixes and better explanations through clearer writing and more examples."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:15
# ed5e0129f5214a74ac73b0a3ef76dc4a
msgid "New features: documentation of features that have been added to the framework since the last release."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:18
# a6bed6266474427db2c00be67d646138
msgid "This section explains how writers can craft their documentation changes in the most useful and least error-prone ways."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:22
# 05f2c49446f54d109f6d60c5d94a826f
msgid "Getting the raw documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:24
# a86ac3d9154f4fd9ad7aecee049176c2
msgid "Though Django's documentation is intended to be read as HTML at https://docs.djangoproject.com/, we edit it as a collection of text files for maximum flexibility. These files live in the top-level ``docs/`` directory of a Django release."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:29
# 88fd6c5abb88463fba791982a0487112
msgid "If you'd like to start contributing to our docs, get the development version of Django from the source code repository (see :ref:`installing-development-version`). The development version has the latest-and-greatest documentation, just as it has latest-and-greatest code. We also backport documentation fixes and improvements, at the discretion of the committer, to the last release branch. That's because it's highly advantageous to have the docs for the last release be up-to-date and correct (see :ref:`differences-between-doc-versions`)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:39
# 9053e7e2d7204c7cae80004349cd7754
msgid "Getting started with Sphinx"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:41
# c3bea08cf10d4230bac9234fafcac3f4
msgid "Django's documentation uses the Sphinx__ documentation system, which in turn is based on docutils__. The basic idea is that lightly-formatted plain-text documentation is transformed into HTML, PDF, and any other output format."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:48
# 40eff1cbedc141498e32fc344d7cfefc
msgid "To actually build the documentation locally, you'll currently need to install Sphinx -- ``sudo pip install Sphinx`` should do the trick."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:53
# 17bbc18843fd49b9b4055d1157c2580d
msgid "Building the Django documentation requires Sphinx 1.0.2 or newer. Sphinx also requires the Pygments__ library for syntax highlighting; building the Django documentation requires Pygments 1.1 or newer (a new-enough version should automatically be installed along with Sphinx)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:60
# 98dafd188ced437980603be2fee5496c
msgid "Then, building the HTML is easy; just ``make html`` (or ``make.bat html`` on Windows) from the ``docs`` directory."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:63
# 9349d11b13684ef78104e2d7d085882a
msgid "To get started contributing, you'll want to read the :ref:`reStructuredText Primer <sphinx:rst-primer>`. After that, you'll want to read about the :ref:`Sphinx-specific markup <sphinx:sphinxmarkup>` that's used to manage metadata, indexing, and cross-references."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:69
# d61f28dbbbe344ae8d99fdc8e162b4c2
msgid "Commonly used terms"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:71
# 302a711869ee4ba4be3a33088b9e6f88
msgid "Here are some style guidelines on commonly used terms throughout the documentation:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:74
# 0140f21a99934e6cab7b70e63321f9ca
msgid "**Django** -- when referring to the framework, capitalize Django. It is lowercase only in Python code and in the djangoproject.com logo."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:77
# e895da1e9d244c899a0ab93961955d96
msgid "**email** -- no hyphen."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:79
# 6926f199c3934881a534f829cf41f8bc
msgid "**MySQL**, **PostgreSQL**, **SQLite**"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:81
# 0874263bc08d4de9b2233adcb24824c5
msgid "**Python** -- when referring to the language, capitalize Python."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:83
# 3f35060750ff41e3b81660e98a99d7d0
msgid "**realize**, **customize**, **initialize**, etc. -- use the American \"ize\" suffix, not \"ise.\""
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:86
# 610ad06e2ee14730afaa9e609f497e2b
msgid "**subclass** -- it's a single word without a hyphen, both as a verb (\"subclass that model\") and as a noun (\"create a subclass\")."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:89
# 43746ecc5f64412aa89bdbc925905da1
msgid "**Web**, **World Wide Web**, **the Web** -- note Web is always capitalized when referring to the World Wide Web."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:92
# 4a2e22467f6246959c8291f91791054f
msgid "**Web site** -- use two words, with Web capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:95
# a036db3a4f54474e983a69ed39cdd724
msgid "Django-specific terminology"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:97
# b58129005cbc4ca2ab87a826669b9a11
msgid "**model** -- it's not capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:99
# 93e2ff1deda44cdfa448eed0a1412c04
msgid "**template** -- it's not capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:101
# 504d5a843b8d4298842c7a8918bd8960
msgid "**URLconf** -- use three capitalized letters, with no space before \"conf.\""
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:104
# 555dfe46355743198fc6bd1e509ab85f
msgid "**view** -- it's not capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:107
# 22db60c6f13247b096d1c48cb9859a40
msgid "Guidelines for reStructuredText files"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:109
# 61252f7cce9c4edb909a0d7ebc6cd73e
msgid "These guidelines regulate the format of our reST (reStructuredText) documentation:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:112
# 84ccc0b89a1e4720956cce5f6d4a3353
msgid "In section titles, capitalize only initial words and proper nouns."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:114
# 8d7bebf411cd4c6bbef9c247ef05801a
msgid "Wrap the documentation at 80 characters wide, unless a code example is significantly less readable when split over two lines, or for another good reason."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:118
# c32dc8ef41bb4cd789f7fc338c8a5d8c
msgid "The main thing to keep in mind as you write and edit docs is that the more semantic markup you can add the better. So::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:123
# b57f6403b9c44346a8792c36c7466a1d
msgid "Isn't nearly as helpful as::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:127
# 2e6f7ac9556d402eba9dff82089a223d
msgid "This is because Sphinx will generate proper links for the latter, which greatly helps readers. There's basically no limit to the amount of useful markup you can add."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:131
# c5d1fc17ba7e43199db05db4f95a0fd7
msgid "Use :mod:`~sphinx.ext.intersphinx` to reference Python's and Sphinx' documentation."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:135
# 6e6a27fc412e4c5c92e9b647d3621ef8
msgid "Django-specific markup"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:137
# 066c32208e48462fa068d1c06a59686b
msgid "Besides the `Sphinx built-in markup`__, Django's docs defines some extra description units:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:142
# a1077d34a4f14debaa0f6369a0b72b74
msgid "Settings::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:146
# 445cb14868674e95a16704b51e09435f
msgid "To link to a setting, use ``:setting:`INSTALLED_APPS```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:148
# 5680a7164ef44200badd9eb8829f38e7
msgid "Template tags::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:152
# 54792ae9c07041b3a7268341f9275e18
msgid "To link, use ``:ttag:`regroup```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:154
# 68c9bc95b9274c82ae4f1900f7fdec89
msgid "Template filters::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:158
# d58c10474ec84d38bd6f50f12e4cedbf
msgid "To link, use ``:tfilter:`linebreaksbr```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:160
# 50beffd1dee4449281a8c1147a836f5a
msgid "Field lookups (i.e. ``Foo.objects.filter(bar__exact=whatever)``)::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:164
# 25c7e7e38fe340d98a825695a2bc33d4
msgid "To link, use ``:lookup:`exact```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:166
# 50b35380f21a4065888cde3e4c57ae86
msgid "``django-admin`` commands::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:170
# e1a4decf07874fee8f1b0813d30d83ab
msgid "To link, use ``:djadmin:`syncdb```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:172
# 2f7f706ea61c452181893618e9158fce
msgid "``django-admin`` command-line options::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:176
# 3598f532c72b4f2b8473ba5ee10e3330
msgid "To link, use ``:djadminopt:`--traceback```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:181
# 86beac2059614f2da5962c4d700c91c3
msgid "Documenting new features"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:183
# a90d48d1521e483b9bc96b41a4d0264a
msgid "Our policy for new features is:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:185
# dc80a254fdf34996a450987647194bda
msgid "All documentation of new features should be written in a way that clearly designates the features are only available in the Django development version. Assume documentation readers are using the latest release, not the development version."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:190
# 07be59c45d9943319de61019ced7f93e
msgid "Our preferred way for marking new features is by prefacing the features' documentation with: \"``.. versionadded:: X.Y``\", followed by an optional one line comment and a mandatory blank line."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:194
# 68cfe1088fbc46c998828911fcbe0f90
msgid "General improvements, or other changes to the APIs that should be emphasized should use the \"``.. versionchanged:: X.Y``\" directive (with the same format as the ``versionadded`` mentioned above."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:199
# 6bd2465efb2c44c0bc835ee47b43bc57
msgid "An example"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:201
# ebe59a6d1ff94cb8ba327aac493f35a9
msgid "For a quick example of how it all fits together, consider this hypothetical example:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:204
# 750847842ebb4c24aeefb2066eaa7209
msgid "First, the ``ref/settings.txt`` document could have an overall layout like this:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:229
# 8815a4a15e2b4805bdc7197873a1271f
msgid "Next, the ``topics/settings.txt`` document could contain something like this:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:241
# c6a14f82e5214529aa3ad24e2026072f
msgid "We use the Sphinx :rst:role:`doc` cross reference element when we want to link to another document as a whole and the :rst:role:`ref` element when we want to link to an arbitrary location in a document."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:245
# d9a1f698d347451e816aba79b2ac9a28
msgid "Next, notice how the settings are annotated:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:263
# 77c097d4c84a4cf09c346c3d2a119342
msgid "This marks up the following header as the \"canonical\" target for the setting ``ADMIN_FOR`` This means any time I talk about ``ADMIN_FOR``, I can reference it using ``:setting:`ADMIN_FOR```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:267
# 1ab18c77f0fd44f5b94f90cf9472d81a
msgid "That's basically how everything fits together."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:272
# 3472120b6eca4e7881860ab2fb03cffe
msgid "Improving the documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:274
# 9383826c6db54712b953241e83e7eff3
msgid "A few small improvements can be made to make the documentation read and look better:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:277
# 812244fd8fc24a84b6a20130cb200a97
msgid "Most of the various ``index.txt`` documents have *very* short or even non-existent intro text. Each of those documents needs a good short intro the content below that point."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:281
# aa6a8c7f42784fca861e4013702979af
msgid "The glossary is very perfunctory. It needs to be filled out."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:283
# 0ce58f52b65d4795848de80307af2e13
msgid "Add more metadata targets. Lots of places look like::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:288
# dab57c62333244d191af99797e437b14
msgid "\\... these should be::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:292
# a09fb668497f42d1b5907a690d2a6064
msgid "That is, use metadata instead of titles."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:294
# 42511fd610bf451eb3f62fb2e6dd5ef9
msgid "Add more links -- nearly everything that's an inline code literal right now can probably be turned into a xref."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:297
# 0c68e80a3d7b4dbca638ad3309e49427
msgid "See the ``literals_to_xrefs.py`` file in ``_ext`` -- it's a shell script to help do this work."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:300
# 9bac0d1f808b4612931101860c658645
msgid "This will probably be a continuing, never-ending project."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:302
# 0fd55e3f18e443e9a0dc6268a63ee508
msgid "Add `info field lists`__ where appropriate."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:306
# 6966317588ac40798e998fc0868f3224
msgid "Whenever possible, use links. So, use ``:setting:`ADMIN_FOR``` instead of ````ADMIN_FOR````."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:309
# 5dfa8cbd1e6d4142a7c906971a5ff24b
msgid "Use directives where appropriate. Some directives (e.g. ``.. setting::``) are prefix-style directives; they go *before* the unit they're describing. These are known as \"crossref\" directives. Others (e.g. ``.. class::``) generate their own markup; these should go inside the section they're describing. These are called \"description units\"."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:316
# 01464140ceab45fdbab58ea27b05b7b7
msgid "You can tell which are which by looking at in :file:`_ext/djangodocs.py`; it registers roles as one of the other."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:319
# a4ca354f56b449b1bc6a5a26353f4a0f
msgid "Add ``.. code-block:: <lang>`` to literal blocks so that they get highlighted."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:322
# eb55cedf485d4b14ba9d7ced01aaf3e2
msgid "When referring to classes/functions/modules, etc., you'll want to use the fully-qualified name of the target (``:class:`django.contrib.contenttypes.models.ContentType```)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:326
# 7ab16e3e9ff64724b8ef34ee927c8f27
msgid "Since this doesn't look all that awesome in the output -- it shows the entire path to the object -- you can prefix the target with a ``~`` (that's a tilde) to get just the \"last bit\" of that path. So ``:class:`~django.contrib.contenttypes.models.ContentType``` will just display a link with the title \"ContentType\"."
msgstr ""

#: ../../internals/deprecation.txt:3
# 1f15d83cab514801b012502cb3b94c5d
msgid "Django Deprecation Timeline"
msgstr ""

#: ../../internals/deprecation.txt:5
# dd90df0175de47f1a7d69fb020731e3c
msgid "This document outlines when various pieces of Django will be removed or altered in a backward incompatible way, following their deprecation, as per the :ref:`deprecation policy <internal-release-deprecation-policy>`. More details about each item can often be found in the release notes of two versions prior."
msgstr ""

#: ../../internals/deprecation.txt:11
# 51566e4cfd45499db3ce7bcc689c9cb7
msgid "1.4"
msgstr ""

#: ../../internals/deprecation.txt:13
# 94f53d910843411f888c70b08b97bfbf
msgid "See the :doc:`Django 1.2 release notes</releases/1.2>` for more details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:16
# f4b9fa167cf645d4b9c5fdfec05bc4e4
msgid "``CsrfResponseMiddleware`` and ``CsrfMiddleware`` will be removed.  Use the {% csrf_token %} template tag inside forms to enable CSRF protection. ``CsrfViewMiddleware`` remains and is enabled by default."
msgstr ""

#: ../../internals/deprecation.txt:20
# bacb321a58b049308016530f13203e36
msgid "The old imports for CSRF functionality (``django.contrib.csrf.*``), which moved to core in 1.2, will be removed."
msgstr ""

#: ../../internals/deprecation.txt:23
# 40e539fe039a48f290881448519319b7
msgid "The :mod:`django.contrib.gis.db.backend` module will be removed in favor of the specific backends."
msgstr ""

#: ../../internals/deprecation.txt:26
# 37305e6132724a3299a7610d2c6f75f0
msgid "``SMTPConnection`` will be removed in favor of a generic Email backend API."
msgstr ""

#: ../../internals/deprecation.txt:28
# 230ffdcdb3f14b8eb31a4cdd33811e1b
msgid "The many to many SQL generation functions on the database backends will be removed."
msgstr ""

#: ../../internals/deprecation.txt:31
# f5367376ab53475cbb0e43ebe1b5ed80
msgid "The ability to use the ``DATABASE_*`` family of top-level settings to define database connections will be removed."
msgstr ""

#: ../../internals/deprecation.txt:34
# 88f015b4ea5441e1adff0f8a29d16a45
msgid "The ability to use shorthand notation to specify a database backend (i.e., ``sqlite3`` instead of ``django.db.backends.sqlite3``) will be removed."
msgstr ""

#: ../../internals/deprecation.txt:38
# 191e5a09f06d40aab4db6da0ed8edafc
msgid "The ``get_db_prep_save``, ``get_db_prep_value`` and ``get_db_prep_lookup`` methods will have to support multiple databases."
msgstr ""

#: ../../internals/deprecation.txt:41
# f6593cc851a64ce1bf16b4abb8c5204e
msgid "The ``Message`` model (in ``django.contrib.auth``), its related manager in the ``User`` model (``user.message_set``), and the associated methods (``user.message_set.create()`` and ``user.get_and_delete_messages()``), will be removed.  The :doc:`messages framework </ref/contrib/messages>` should be used instead. The related ``messages`` variable returned by the auth context processor will also be removed. Note that this means that the admin application will depend on the messages context processor."
msgstr ""

#: ../../internals/deprecation.txt:51
# 592bc0cfd13c464795ebe9df67f9e764
msgid "Authentication backends will need to support the ``obj`` parameter for permission checking. The ``supports_object_permissions`` attribute will no longer be checked and can be removed from custom backends."
msgstr ""

#: ../../internals/deprecation.txt:55
# 3b9bf5ed90bd46a0aa2163ab8f9bf586
msgid "Authentication backends will need to support the ``AnonymousUser`` class being passed to all methods dealing with permissions.  The ``supports_anonymous_user`` variable will no longer be checked and can be removed from custom backends."
msgstr ""

#: ../../internals/deprecation.txt:60
# 374bc457e5f14133b32470d77dd337a5
msgid "The ability to specify a callable template loader rather than a ``Loader`` class will be removed, as will the ``load_template_source`` functions that are included with the built in template loaders for backwards compatibility."
msgstr ""

#: ../../internals/deprecation.txt:65
# 7d890312ea2a4d88a3747b9fc2943a95
msgid "``django.utils.translation.get_date_formats()`` and ``django.utils.translation.get_partial_date_formats()``. These functions will be removed; use the locale-aware ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../internals/deprecation.txt:70
# 0e080181e77e41f89d597e614c99d578
msgid "In ``django.forms.fields``, the constants: ``DEFAULT_DATE_INPUT_FORMATS``, ``DEFAULT_TIME_INPUT_FORMATS`` and ``DEFAULT_DATETIME_INPUT_FORMATS`` will be removed. Use ``django.utils.formats.get_format()`` to get the appropriate formats."
msgstr ""

#: ../../internals/deprecation.txt:76
# cefd72437bb348228be9f5645593b828
msgid "The ability to use a function-based test runners will be removed, along with the ``django.test.simple.run_tests()`` test runner."
msgstr ""

#: ../../internals/deprecation.txt:79
# 7e1651f85eb342dab18f0db7c87a0ac4
msgid "The ``views.feed()`` view and ``feeds.Feed`` class in ``django.contrib.syndication`` will be removed. The class-based view ``views.Feed`` should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:83
# 054c6833b19640b9ac6d6152b602d048
msgid "``django.core.context_processors.auth``.  This release will remove the old method in favor of the new method in ``django.contrib.auth.context_processors.auth``."
msgstr ""

#: ../../internals/deprecation.txt:87
# 65660f860ba34de8936c03d0971beaba
msgid "The ``postgresql`` database backend will be removed, use the ``postgresql_psycopg2`` backend instead."
msgstr ""

#: ../../internals/deprecation.txt:90
# 7ca6f64993dd455996b597710ef6b16a
msgid "The ``no`` language code will be removed and has been replaced by the ``nb`` language code."
msgstr ""

#: ../../internals/deprecation.txt:93
# f448e385177e4e1093684079f99b3762
msgid "Authentication backends will need to define the boolean attribute ``supports_inactive_user`` until version 1.5 when it will be assumed that all backends will handle inactive users."
msgstr ""

#: ../../internals/deprecation.txt:97
# 992bb44c54324f2fa929f855bcb4de5d
msgid "``django.db.models.fields.XMLField`` will be removed. This was deprecated as part of the 1.3 release. An accelerated deprecation schedule has been used because the field hasn't performed any role beyond that of a simple ``TextField`` since the removal of oldforms. All uses of ``XMLField`` can be replaced with ``TextField``."
msgstr ""

#: ../../internals/deprecation.txt:103
# 8cd772795d7e4634b7e39de3d574586f
msgid "The undocumented ``mixin`` parameter to the ``open()`` method of ``django.core.files.storage.Storage`` (and subclasses) will be removed."
msgstr ""

#: ../../internals/deprecation.txt:108
# 33bd8b4e07384cabaf1e2ac00d34e977
msgid "1.5"
msgstr ""

#: ../../internals/deprecation.txt:110
# 7612576ce036461788abe16cdb2bfb45
msgid "See the :doc:`Django 1.3 release notes</releases/1.3>` for more details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:113
# 88a53fc6805f4abfac9f08a74749f2c1
msgid "Starting Django without a :setting:`SECRET_KEY` will result in an exception rather than a `DeprecationWarning`. (This is accelerated from the usual deprecation path; see the :doc:`Django 1.4 release notes</releases/1.4>`.)"
msgstr ""

#: ../../internals/deprecation.txt:117
# ab037560e0a440b8be5d22fb238c1559
msgid "The ``mod_python`` request handler will be removed. The ``mod_wsgi`` handler should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:120
# 6554483038664e118455fae4a2aec3c0
msgid "The ``template`` attribute on :class:`~django.test.client.Response` objects returned by the :ref:`test client <test-client>` will be removed. The :attr:`~django.test.client.Response.templates` attribute should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:125
# 904161afd5aa46458f3c9081fb360e83
msgid "The :class:`~django.test.simple.DjangoTestRunner` will be removed. Instead use a unittest-native class.  The features of the :class:`django.test.simple.DjangoTestRunner` (including fail-fast and Ctrl-C test termination) can currently be provided by the unittest-native :class:`TextTestRunner`."
msgstr ""

#: ../../internals/deprecation.txt:131
# cc7fb3e8d62948d091c7b81c756d0fd6
msgid "The undocumented function :func:`django.contrib.formtools.utils.security_hash` will be removed, instead use :func:`django.contrib.formtools.utils.form_hmac`"
msgstr ""

#: ../../internals/deprecation.txt:135
# 91a1725bbc4b439ea314a3a2cd2b0ec2
msgid "The function-based generic view modules will be removed in favor of their class-based equivalents, outlined :doc:`here </topics/class-based-views/index>`."
msgstr ""

#: ../../internals/deprecation.txt:139
# bc0cee373e7c49bdbf74cf13d10726c0
msgid "The :class:`~django.core.servers.basehttp.AdminMediaHandler` will be removed.  In its place use :class:`~django.contrib.staticfiles.handlers.StaticFilesHandler`."
msgstr ""

#: ../../internals/deprecation.txt:143
# 41228751f4ff45d087dea18a04c65984
msgid "The template tags library ``adminmedia`` and the template tag ``{% admin_media_prefix %}`` will be removed in favor of the generic static files handling. (This is faster than the usual deprecation path; see the :doc:`Django 1.4 release notes</releases/1.4>`.)"
msgstr ""

#: ../../internals/deprecation.txt:148
# 3a83fdfc91254c6baa451e6911725010
msgid "The :ttag:`url` and :ttag:`ssi` template tags will be modified so that the first argument to each tag is a template variable, not an implied string. In 1.4, this behavior is provided by a version of the tag in the ``future`` template tag library."
msgstr ""

#: ../../internals/deprecation.txt:153
# 06ba4192db1b415a846995b7a6cd17b0
msgid "The :djadmin:`reset` and :djadmin:`sqlreset` management commands will be removed."
msgstr ""

#: ../../internals/deprecation.txt:156
# 28b46bff0d5148dba43bc5ab5fc7534a
msgid "Authentication backends will need to support an inactive user being passed to all methods dealing with permissions. The ``supports_inactive_user`` attribute will no longer be checked and can be removed from custom backends."
msgstr ""

#: ../../internals/deprecation.txt:161
# abc1bc69e2c342248a89c272693062b9
msgid ":meth:`~django.contrib.gis.geos.GEOSGeometry.transform` will raise a :class:`~django.contrib.gis.geos.GEOSException` when called on a geometry with no SRID value."
msgstr ""

#: ../../internals/deprecation.txt:165
# d8e69847feca481e8be56a42a8df846b
msgid ":class:`~django.http.CompatCookie` will be removed in favor of :class:`~django.http.SimpleCookie`."
msgstr ""

#: ../../internals/deprecation.txt:168
# ffd02e0ffed94f1c8b58fb881806e3ad
msgid ":class:`django.core.context_processors.PermWrapper` and :class:`django.core.context_processors.PermLookupDict` will be removed in favor of the corresponding :class:`django.contrib.auth.context_processors.PermWrapper` and :class:`django.contrib.auth.context_processors.PermLookupDict`, respectively."
msgstr ""

#: ../../internals/deprecation.txt:175
# 2c3aebf9ccb44246977a41ff029ee024
msgid "The :setting:`MEDIA_URL` or :setting:`STATIC_URL` settings will be required to end with a trailing slash to ensure there is a consistent way to combine paths in templates."
msgstr ""

#: ../../internals/deprecation.txt:179
# 033cab42e357483db137f3c43eee4154
msgid "``django.db.models.fields.URLField.verify_exists`` will be removed. The feature was deprecated in 1.3.1 due to intractable security and performance issues and will follow a slightly accelerated deprecation timeframe."
msgstr ""

#: ../../internals/deprecation.txt:184
# 8f2fc7db1ed2491d9426b7bfea37f278
msgid "Translations located under the so-called *project path* will be ignored during the translation building process performed at runtime. The :setting:`LOCALE_PATHS` setting can be used for the same task by including the filesystem path to a ``locale`` directory containing non-app-specific translations in its value."
msgstr ""

#: ../../internals/deprecation.txt:190
# 69700c81fa3b4eba8706efcd1e94ecb3
msgid "The Markup contrib app will no longer support versions of Python-Markdown library earlier than 2.1. An accelerated timeline was used as this was a security related deprecation."
msgstr ""

#: ../../internals/deprecation.txt:194
# 23921c79c2684a3abd36f41da2630336
msgid "The ``CACHE_BACKEND`` setting will be removed. The cache backend(s) should be specified in the :setting:`CACHES` setting."
msgstr ""

#: ../../internals/deprecation.txt:198
# a27333bc625b417d8b94c92a64f71040
msgid "1.6"
msgstr ""

#: ../../internals/deprecation.txt:200
# e3f95f997cd54c55ac637c4c6003071e
msgid "See the :doc:`Django 1.4 release notes</releases/1.4>` for more details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:203
# 3d1d22bf8456412597990ebd4eba9196
msgid "The compatibility modules ``django.utils.copycompat`` and ``django.utils.hashcompat`` as well as the functions ``django.utils.itercompat.all`` and ``django.utils.itercompat.any`` will be removed. The Python builtin versions should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:208
# 303962a6a94e423583a4b44e3e8e2dbd
msgid "The :func:`~django.views.decorators.csrf.csrf_response_exempt` and :func:`~django.views.decorators.csrf.csrf_view_exempt` decorators will be removed. Since 1.4 ``csrf_response_exempt`` has been a no-op (it returns the same function), and ``csrf_view_exempt`` has been a synonym for ``django.views.decorators.csrf.csrf_exempt``, which should be used to replace it."
msgstr ""

#: ../../internals/deprecation.txt:215
# ae908652fe624f9d83a25f67b6b8a028
msgid "The :class:`~django.core.cache.backends.memcached.CacheClass` backend was split into two in Django 1.3 in order to introduce support for PyLibMC. The historical :class:`~django.core.cache.backends.memcached.CacheClass` will be removed in favor of :class:`~django.core.cache.backends.memcached.MemcachedCache`."
msgstr ""

#: ../../internals/deprecation.txt:220
# 37459ee5f2c2404fb10c1ab310f14847
msgid "The UK-prefixed objects of ``django.contrib.localflavor.uk`` will only be accessible through their GB-prefixed names (GB is the correct ISO 3166 code for United Kingdom)."
msgstr ""

#: ../../internals/deprecation.txt:224
# c0aca193e37245b2acd7b195cc3beedc
msgid "The :setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS` settings have been superseded by :setting:`IGNORABLE_404_URLS` in the 1.4 release. They will be removed."
msgstr ""

#: ../../internals/deprecation.txt:228
# a055303bac824b37a277e1d99d9cdd3e
msgid "The :doc:`form wizard </ref/contrib/formtools/form-wizard>` has been refactored to use class-based views with pluggable backends in 1.4. The previous implementation will be removed."
msgstr ""

#: ../../internals/deprecation.txt:232
# 62b7cf2065874a70af882bebbe067eca
msgid "Legacy ways of calling :func:`~django.views.decorators.cache.cache_page` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:235
# 3fab6fdaa9dd4591ac4a90f2fe583e76
msgid "The backward-compatibility shim to automatically add a debug-false filter to the ``'mail_admins'`` logging handler will be removed. The :setting:`LOGGING` setting should include this filter explicitly if it is desired."
msgstr ""

#: ../../internals/deprecation.txt:240
# 0b27c18bdf7b4b33aeafa22683ff1bb3
msgid "The builtin truncation functions :func:`django.utils.text.truncate_words` and :func:`django.utils.text.truncate_html_words` will be removed in favor of the ``django.utils.text.Truncator`` class."
msgstr ""

#: ../../internals/deprecation.txt:244
# 155c9cf9c5fc4e17a6cf42dd6052f6ef
msgid "The :class:`~django.contrib.gis.geoip.GeoIP` class was moved to :mod:`django.contrib.gis.geoip` in 1.4 -- the shortcut in :mod:`django.contrib.gis.utils` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:248
# 185b777d0b51414987d3a587c15ce16a
msgid "``django.conf.urls.defaults`` will be removed. The functions :func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500`, are now available through :mod:`django.conf.urls` ."
msgstr ""

#: ../../internals/deprecation.txt:254
# 647a94a2929348d4a5a7fafd5a6bdd45
msgid "The Databrowse contrib module will be removed."
msgstr ""

#: ../../internals/deprecation.txt:256
# bfd89477e8674584a4b5225f6634befe
msgid "The functions :func:`~django.core.management.setup_environ` and :func:`~django.core.management.execute_manager` will be removed from :mod:`django.core.management`. This also means that the old (pre-1.4) style of :file:`manage.py` file will no longer work."
msgstr ""

#: ../../internals/deprecation.txt:261
# 286cbc6e6dd64515a1668c84f41ccea6
msgid "Setting the ``is_safe`` and ``needs_autoescape`` flags as attributes of template filter functions will no longer be supported."
msgstr ""

#: ../../internals/deprecation.txt:264
# 89564666d3ad42f1962e872dfc5aea34
msgid "The attribute ``HttpRequest.raw_post_data`` was renamed to ``HttpRequest.body`` in 1.4. The backward compatibility will be removed -- ``HttpRequest.raw_post_data`` will no longer work."
msgstr ""

#: ../../internals/deprecation.txt:268
# 93cc5d0dcca749bdaef147f956d820fa
msgid "``django.contrib.markup`` will be removed following an accelerated deprecation."
msgstr ""

#: ../../internals/deprecation.txt:272
# 20b73535f00f4ae3abb44dc812b0e5cf
msgid "1.7"
msgstr ""

#: ../../internals/deprecation.txt:274
# a312f3a6f8b7495e987407a6b4268b04
msgid "See the :doc:`Django 1.5 release notes</releases/1.5>` for more details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:277
# a1e9fb8c52e34e05b6f0cfbc9b27b741
msgid "The module ``django.utils.simplejson`` will be removed. The standard library provides :mod:`json` which should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:280
# 0693d2d5107f4e65b2c28fff7f21f699
msgid "The function ``django.utils.itercompat.product`` will be removed. The Python builtin version should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:283
# a8961e72f13448a5987ad02f48342248
msgid "Auto-correction of INSTALLED_APPS and TEMPLATE_DIRS settings when they are specified as a plain string instead of a tuple will be removed and raise an exception."
msgstr ""

#: ../../internals/deprecation.txt:287
# f63dd76213754f5fa4d448704b9e92eb
msgid "The ``mimetype`` argument to :class:`~django.http.HttpResponse` ``__init__`` will be removed (``content_type`` should be used instead)."
msgstr ""

#: ../../internals/deprecation.txt:290
# 68b01530250a412ea58cc1b21617d1e4
msgid "When :class:`~django.http.HttpResponse` is instantiated with an iterator, or when :attr:`~django.http.HttpResponse.content` is set to an iterator, that iterator will be immediately consumed."
msgstr ""

#: ../../internals/deprecation.txt:294
# dacc58ade3de4d4d821bc8aa146e9dcf
msgid "The ``AUTH_PROFILE_MODULE`` setting, and the ``get_profile()`` method on the User model, will be removed."
msgstr ""

#: ../../internals/deprecation.txt:297
# 5228e3f128654d29a7056fc8ae4df805
msgid "The ``cleanup`` management command will be removed. It's replaced by ``clearsessions``."
msgstr ""

#: ../../internals/deprecation.txt:300
# 16f0d202376c4dee8d1ecb95b90e0f16
msgid "The ``daily_cleanup.py`` script will be removed."
msgstr ""

#: ../../internals/deprecation.txt:302
# c3d2c73e863c463ca1ebc46dd173919f
msgid "The ``depth`` keyword argument will be removed from :meth:`~django.db.models.query.QuerySet.select_related`."
msgstr ""

#: ../../internals/deprecation.txt:306
# 6f15f79542c0478a8f8a8bd0726adff9
msgid "2.0"
msgstr ""

#: ../../internals/deprecation.txt:308
# 3e2b58c699174514bfc29ab1fbdfa158
msgid "``django.views.defaults.shortcut()``. This function has been moved to ``django.contrib.contenttypes.views.shortcut()`` as part of the goal of removing all ``django.contrib`` references from the core Django codebase. The old shortcut will be removed in the 2.0 release."
msgstr ""

#: ../../internals/deprecation.txt:314
# 76856dc72c6e4d8ca7d9527161cd0d51
msgid "``ssi`` and ``url`` template tags will be removed from the ``future`` template tag library (used during the 1.3/1.4 deprecation period)."
msgstr ""

#: ../../internals/git.txt:3
#: ../../internals/svn.txt:3
# 67e3296b9101400b8d15365cc9f4e2f3
# ee69109c982844d3b7dbb737fc994a67
msgid "The Django source code repository"
msgstr ""

#: ../../internals/git.txt:5
# fecc187f122442658f5a897ddd68fda2
msgid "When deploying a Django application into a real production environment, you will almost always want to use `an official packaged release of Django`_."
msgstr ""

#: ../../internals/git.txt:8
# ff8fe6d1523c4156a4548ea1653823de
msgid "However, if you'd like to try out in-development code from an upcoming release or contribute to the development of Django, you'll need to obtain a clone of Django's source code repository."
msgstr ""

#: ../../internals/git.txt:12
# 21ce683889ee4b12ba6b545adc1ae371
msgid "This document covers the way the code repository is laid out and how to work with and find things in it."
msgstr ""

#: ../../internals/git.txt:18
#: ../../internals/svn.txt:19
# ba6f6f4caa5842a0ba4d1d076f55c8cb
# e705d62959464675a5c623e6f08bb120
msgid "High-level overview"
msgstr ""

#: ../../internals/git.txt:20
# 216f69c33156436388c659bddbfb0a86
msgid "The Django source code repository uses `Git`_ to track changes to the code over time, so you'll need a copy of the Git client (a program called ``git``) on your computer, and you'll want to familiarize yourself with the basics of how Git works."
msgstr ""

#: ../../internals/git.txt:25
# 6bb09c98b46b451bbe47e3f7ee10a94c
msgid "Git's web site offers downloads for various operating systems. The site also contains vast amounts of `documentation`_."
msgstr ""

#: ../../internals/git.txt:28
# 6bde5525d4694a0ab132d2e8f3a8f2df
msgid "The Django Git repository is located online at `github.com/django/django <https://github.com/django/django>`_. It contains the full source code for all Django releases, which you can browse online."
msgstr ""

#: ../../internals/git.txt:32
# 44475157739e4982afd8399e051e7ed1
msgid "The Git repository includes several `branches`_:"
msgstr ""

#: ../../internals/git.txt:34
# e3dad168bf3e4bc4adbd629b1b7c9935
msgid "``master`` contains the main in-development code which will become the next packaged release of Django. This is where most development activity is focused."
msgstr ""

#: ../../internals/git.txt:38
# b37068d5591e41e1bdd5e57b8e44124b
msgid "``stable/A.B.x`` are the maintenance branches. They are used to support older versions of Django."
msgstr ""

#: ../../internals/git.txt:41
# 8d66c06799a646539d1083e2432334eb
msgid "``soc20XX/<project>`` branches were used by students who worked on Django during the 2009 and 2010 Google Summer of Code programs."
msgstr ""

#: ../../internals/git.txt:44
# a640c5d226fe4275a76cff0e8000957d
msgid "``attic/<project>`` branches were used to develop major or experimental new features without affecting the rest of Django's code."
msgstr ""

#: ../../internals/git.txt:47
# fda891f370174e59888913d9499b2fdc
msgid "The Git repository also contains `tags`_. These are the exact revisions from which packaged Django releases were produced, since version 1.0."
msgstr ""

#: ../../internals/git.txt:50
# 57efcd4f58f34f2bbf60bf90648e2ce5
msgid "The source code for the `Djangoproject.com <https://www.djangoproject.com/>`_ web site can be found at `github.com/django/djangoproject.com <https://github.com/django/djangoproject.com>`_."
msgstr ""

#: ../../internals/git.txt:60
# 241ee49df0844faeb44cb4c0be54d482
msgid "The master branch"
msgstr ""

#: ../../internals/git.txt:62
# 37de15f911b54ab19d7a3c964571f17e
msgid "If you'd like to try out the in-development code for the next release of Django, or if you'd like to contribute to Django by fixing bugs or developing new features, you'll want to get the code from the master branch."
msgstr ""

#: ../../internals/git.txt:66
# 52ad6506f6704bed8f924700300171a1
msgid "Note that this will get *all* of Django: in addition to the top-level ``django`` module containing Python code, you'll also get a copy of Django's documentation, test suite, packaging scripts and other miscellaneous bits. Django's code will be present in your clone as a directory named ``django``."
msgstr ""

#: ../../internals/git.txt:72
# 94952c9597f842b7b9d18aff37508211
msgid "To try out the in-development code with your own applications, simply place the directory containing your clone on your Python import path. Then ``import`` statements which look for Django will find the ``django`` module within your clone."
msgstr ""

#: ../../internals/git.txt:77
#: ../../internals/svn.txt:86
# 322b55d99d5249ea9ca843b162aee5f9
# 2d037ba10faa4d5889e8d67b2d5fa602
msgid "If you're going to be working on Django's code (say, to fix a bug or develop a new feature), you can probably stop reading here and move over to :doc:`the documentation for contributing to Django </internals/contributing/index>`, which covers things like the preferred coding style and how to generate and submit a patch."
msgstr ""

#: ../../internals/git.txt:84
# 16494783021c441882fe684ae16f4890
msgid "Other branches"
msgstr ""

#: ../../internals/git.txt:86
#: ../../internals/svn.txt:96
# a4b301d179074b028684ec1d439159e2
# 76d1ded5fe9b46b9af7dd2502ec73448
msgid "Django uses branches for two main purposes:"
msgstr ""

#: ../../internals/git.txt:88
# 4ee663aace2e424d9da056c38648ca98
msgid "Development of major or experimental features, to keep them from affecting progress on other work in master."
msgstr ""

#: ../../internals/git.txt:91
# 5361c9e00eba4ac38616fa3811a9495c
msgid "Security and bugfix support for older releases of Django, during their support lifetimes."
msgstr ""

#: ../../internals/git.txt:95
#: ../../internals/svn.txt:106
# 1034471d4ccf4815a34572fda4566498
# af3edce791284d2581777cfb8aa9a304
msgid "Feature-development branches"
msgstr ""

#: ../../internals/git.txt:99
# efc1380298074fd58f157d1bb5ec9bcb
msgid "Since Django moved to Git in 2012, anyone can clone the repository and create his own branches, alleviating the need for official branches in the source code repository."
msgstr ""

#: ../../internals/git.txt:103
# c754f0d5b5fb4b578e13b72c8fd7b767
msgid "The following section is mostly useful if you're exploring the repository's history, for example if you're trying to understand how some features were designed."
msgstr ""

#: ../../internals/git.txt:107
# 048fbd3eff5b4008a592b25f7b533609
msgid "Feature-development branches tend by their nature to be temporary. Some produce successful features which are merged back into Django's master to become part of an official release, but others do not; in either case there comes a time when the branch is no longer being actively worked on by any developer. At this point the branch is considered closed."
msgstr ""

#: ../../internals/git.txt:113
# 435b75aff99d40d284c58870fbf2cb4b
msgid "Unfortunately, Django used to be maintained with the Subversion revision control system, that has no standard way of indicating this. As a workaround, branches of Django which are closed and no longer maintained were moved into ``attic``."
msgstr ""

#: ../../internals/git.txt:118
#: ../../internals/svn.txt:119
# 15d96c5c871745fda1b2e272fef23d5e
# d4b9ad30015a4d26acefbd4b3ae8f3bb
msgid "For reference, the following are branches whose code eventually became part of Django itself, and so are no longer separately maintained:"
msgstr ""

#: ../../internals/git.txt:121
#: ../../internals/svn.txt:122
# 1c0d2e0baaa7473195a98c6768953a76
# a27d488d08b2483db7b165a23a45afff
msgid "``boulder-oracle-sprint``: Added support for Oracle databases to Django's object-relational mapper. This has been part of Django since the 1.0 release."
msgstr ""

#: ../../internals/git.txt:125
#: ../../internals/svn.txt:126
# fb70cba276ca4a658aee0a415b3ec77e
# 53a3366bd27348d4a251e8c17a407112
msgid "``gis``: Added support for geographic/spatial queries to Django's object-relational mapper. This has been part of Django since the 1.0 release, as the bundled application ``django.contrib.gis``."
msgstr ""

#: ../../internals/git.txt:129
#: ../../internals/svn.txt:130
# c36dbb4637434ed9a403f65d3ec2f931
# 6d3b2bf818184334905611c289300ccd
msgid "``i18n``: Added :doc:`internationalization support </topics/i18n/index>` to Django. This has been part of Django since the 0.90 release."
msgstr ""

#: ../../internals/git.txt:132
#: ../../internals/svn.txt:133
# 9922128db0b448dfa1dcb620e790721c
# 58b93164fcfa45eaa6430f349d494f92
msgid "``magic-removal``: A major refactoring of both the internals and public APIs of Django's object-relational mapper. This has been part of Django since the 0.95 release."
msgstr ""

#: ../../internals/git.txt:136
#: ../../internals/svn.txt:137
# 0c5fbdd2cd66477e93270faa5ef366ad
# c426b125268644979698716112b03527
msgid "``multi-auth``: A refactoring of :doc:`Django's bundled authentication framework </topics/auth>` which added support for :ref:`authentication backends <authentication-backends>`. This has been part of Django since the 0.95 release."
msgstr ""

#: ../../internals/git.txt:141
#: ../../internals/svn.txt:142
# 26e98e0266ad47a68afbebd63ea2bfbe
# de86f57edb79466ab5a4ed3300368331
msgid "``new-admin``: A refactoring of :doc:`Django's bundled administrative application </ref/contrib/admin/index>`. This became part of Django as of the 0.91 release, but was superseded by another refactoring (see next listing) prior to the Django 1.0 release."
msgstr ""

#: ../../internals/git.txt:146
#: ../../internals/svn.txt:147
# dc11549bfefa41c1a160ca9b84646fca
# 609ac0b97d204b1c9106ee603c77fbc1
msgid "``newforms-admin``: The second refactoring of Django's bundled administrative application. This became part of Django as of the 1.0 release, and is the basis of the current incarnation of ``django.contrib.admin``."
msgstr ""

#: ../../internals/git.txt:151
#: ../../internals/svn.txt:152
# bd746bf9125d4eef9f287b5901bd6b89
# 3751a9de46e14b1bb9d4c7b60d47988c
msgid "``queryset-refactor``: A refactoring of the internals of Django's object-relational mapper. This became part of Django as of the 1.0 release."
msgstr ""

#: ../../internals/git.txt:155
#: ../../internals/svn.txt:156
# 61e8c4e2daa941cdae102eaa79e871c0
# 4ceea07187d44a799f5e31b17cdc3395
msgid "``unicode``: A refactoring of Django's internals to consistently use Unicode-based strings in most places within Django and Django applications. This became part of Django as of the 1.0 release."
msgstr ""

#: ../../internals/git.txt:159
# e6194d665cf44509a6aab374817ee42e
msgid "When Django moved from SVN to Git, the information about branch merges wasn't preserved in the source code repository. This means that the ``master`` branch of Django doesn't contain merge commits for the above branches."
msgstr ""

#: ../../internals/git.txt:163
# 50c5eb6256c34b5dbb33b5b327526b43
msgid "However, this information is `available as a grafts file`_. You can restore it by putting the following lines in ``.git/info/grafts`` in your local clone::"
msgstr ""

#: ../../internals/git.txt:181
#: ../../internals/svn.txt:160
# cb3cc4114d614f6bb9ae97d0f4154fb5
# 48de2f4b5da54c46ba298945cfb42dfa
msgid "Additionally, the following branches are closed, but their code was never merged into Django and the features they aimed to implement were never finished:"
msgstr ""

#: ../../internals/git.txt:185
#: ../../internals/svn.txt:164
# 89a96ff0d1b64025a2442e93a1eb3322
# dc200fdb33b24d67a589db8c069373b3
msgid "``full-history``"
msgstr ""

#: ../../internals/git.txt:187
#: ../../internals/svn.txt:166
# 0b8503cd802141b7a351155de8214ea9
# 2e01a0b8741b4acab011046bd47db152
msgid "``generic-auth``"
msgstr ""

#: ../../internals/git.txt:189
#: ../../internals/svn.txt:168
# 7194fb19f00146709790eb8a6a471b05
# a333c013310f4213b418676a88d59f34
msgid "``multiple-db-support``"
msgstr ""

#: ../../internals/git.txt:191
#: ../../internals/svn.txt:170
# 0179c8c1af514a61be310eb75f5a8a17
# bb483d034481452fb0752001a31d05f3
msgid "``per-object-permissions``"
msgstr ""

#: ../../internals/git.txt:193
#: ../../internals/svn.txt:172
# 3bbe5faa8472499cb8ce523490e25e86
# 7b78908269854967aeb4de60cbe7dbe5
msgid "``schema-evolution``"
msgstr ""

#: ../../internals/git.txt:195
#: ../../internals/svn.txt:174
# e46b63351263449887911e040240298f
# 95f07d36b5224a6e8eca47fcaaba1948
msgid "``schema-evolution-ng``"
msgstr ""

#: ../../internals/git.txt:197
#: ../../internals/svn.txt:176
# 37c0127c4ac64ef7aba1fdd9e0b3c04e
# cf4514ff173341c682542833c6e973cf
msgid "``search-api``"
msgstr ""

#: ../../internals/git.txt:199
#: ../../internals/svn.txt:178
# b7aa2fc6bb5a4d70860c2b50e28702bc
# 077b11f5dbde4a42bec9dd67d6eb0ce2
msgid "``sqlalchemy``"
msgstr ""

#: ../../internals/git.txt:201
# 74b17c9275fa4413aa48c3b102ee473e
msgid "All of the above-mentioned branches now reside in ``attic``."
msgstr ""

#: ../../internals/git.txt:203
# 3994ebe0313e44c79c73a41780c6201c
msgid "Finally, the repository contains ``soc2009/xxx`` and ``soc2010/xxx`` feature branches, used for Google Summer of Code projects."
msgstr ""

#: ../../internals/git.txt:207
#: ../../internals/svn.txt:185
# 51fceb5469c549ac83f00d4ac1771a4c
# e85f451883b240dd8b4f9537fbec1424
msgid "Support and bugfix branches"
msgstr ""

#: ../../internals/git.txt:209
# 766d57631b154372b3d5044d0322d3e6
msgid "In addition to fixing bugs in current master, the Django project provides official bugfix support for the most recent released version of Django, and security support for the two most recently-released versions of Django."
msgstr ""

#: ../../internals/git.txt:213
# 5554357927c0494d8b061bf4f2b90f45
msgid "This support is provided via branches in which the necessary bug or security fixes are applied; the branches are then used as the basis for issuing bugfix or security releases."
msgstr ""

#: ../../internals/git.txt:217
# 4d607328983f42fca80c2fa457384a1a
msgid "These branches can be found in the repository as ``stable/A.B.x`` branches, and new branches will be created there after each new Django release."
msgstr ""

#: ../../internals/git.txt:221
# 06965d8cbf8c470fad6dec383d4c0229
msgid "For example, shortly after the release of Django 1.0, the branch ``stable/1.0.x`` was created to receive bug fixes, and shortly after the release of Django 1.1 the branch ``stable/1.1.x`` was created."
msgstr ""

#: ../../internals/git.txt:225
# 76e9c9a5a33b42d5a65dd1e25632ac90
msgid "Official support for the above mentioned releases has expired, and so they no longer receive direct maintenance from the Django project. However, the branches continue to exist and interested community members have occasionally used them to provide unofficial support for old Django releases."
msgstr ""

#: ../../internals/git.txt:231
#: ../../internals/svn.txt:222
# 680e7507e366454297916d3e29670424
# 76fa74e43d4d418f856bdb3faf842afa
msgid "Tags"
msgstr ""

#: ../../internals/git.txt:233
# f14372be2a784706a9c6f0b09c7804b9
msgid "Each Django release is tagged and signed by Django's release manager."
msgstr ""

#: ../../internals/git.txt:235
# 48d7b7fb589f433686d60062d697b3e6
msgid "The tags can be found on GitHub's `tags`_ page."
msgstr ""

#: ../../internals/index.txt:2
# b170258bffe749c797704f8cb7b58cac
msgid "Django internals"
msgstr ""

#: ../../internals/index.txt:4
# 341bb66af155404cbcde361f6427f5f5
msgid "Documentation for people hacking on Django itself. This is the place to go if you'd like to help improve Django, learn or learn about how Django works \"under the hood\"."
msgstr ""

#: ../../internals/index.txt:10
# 8a7a6b99203f4fa0ac7bee92686f3248
msgid "Elsewhere in the Django documentation, coverage of a feature is a sort of a contract: once an API is in the official documentation, we consider it \"stable\" and don't change it without a good reason. APIs covered here, however, are considered \"internal-only\": we reserve the right to change these internals if we must."
msgstr ""

#: ../../internals/release-process.txt:3
# fafa3c4416a749b8af35615f62eb0b3c
msgid "Django's release process"
msgstr ""

#: ../../internals/release-process.txt:8
# 9ecd8e149a2341fc824da01873844cf4
msgid "Official releases"
msgstr ""

#: ../../internals/release-process.txt:10
# efb6b815535842a6977b26378152c49a
msgid "Since version 1.0, Django's release numbering works as follows:"
msgstr ""

#: ../../internals/release-process.txt:12
# 78125e8ae364468985ea4721ddf5c17a
msgid "Versions are numbered in the form ``A.B`` or ``A.B.C``."
msgstr ""

#: ../../internals/release-process.txt:14
# f37fe34fdeff4297a4984a51d9232e6f
msgid "``A`` is the *major version* number, which is only incremented for major changes to Django, and these changes are not necessarily backwards-compatible. That is, code you wrote for Django 1.2 may break when we release Django 2.0."
msgstr ""

#: ../../internals/release-process.txt:19
# e4b9072543124ef1beec1372899a9ef1
msgid "``B`` is the *minor version* number, which is incremented for large yet backwards compatible changes.  Code written for Django 1.2 will continue to work under Django 1.3. Exceptions to this rule will be listed in the release notes."
msgstr ""

#: ../../internals/release-process.txt:24
# 31d03225968849fc9513ad0d299bad5f
msgid "``C`` is the *micro version* number, which is incremented for bug and security fixes. A new micro-release will be 100% backwards-compatible with the previous micro-release. The only exception is when a security issue can't be fixed without breaking backwards-compatibility. If this happens, the release notes will provide detailed upgrade instructions."
msgstr ""

#: ../../internals/release-process.txt:30
# e9708dee6776474f999e16b1651160e0
msgid "In some cases, we'll make alpha, beta, or release candidate releases. These are of the form ``A.B alpha/beta/rc N``, which means the ``Nth`` alpha/beta/release candidate of version ``A.B``."
msgstr ""

#: ../../internals/release-process.txt:34
# 0fcfceefc9f04ad98d469839b75c014c
msgid "In git, each Django release will have a tag indicating its version number, signed with the Django release key. Additionally, each release series (X.Y) has its own branch, and bugfix/security releases will be issued from those branches."
msgstr ""

#: ../../internals/release-process.txt:39
# f75dc18124194412b32490a9b064670a
msgid "For more information about how the Django project issues new releases for security purposes, please see :doc:`our security policies <security>`."
msgstr ""

#: ../../internals/release-process.txt:44
# 837702e6b5ac4394b4483e1bfe771a8d
msgid "Major releases"
msgstr ""

#: ../../internals/release-process.txt:46
# e042bca4ed584bf4b96525914bbb0836
msgid "Major releases (1.0, 2.0, etc.) will happen very infrequently (think \"years\", not \"months\"), and will probably represent major, sweeping changes to Django."
msgstr ""

#: ../../internals/release-process.txt:50
# 9c00f77a5acc47a0a734575685e46a1f
msgid "Minor releases"
msgstr ""

#: ../../internals/release-process.txt:52
# 1bf7d6370c28463bab3f17ab25e2477f
msgid "Minor release (1.1, 1.2, etc.) will happen roughly every nine months -- see `release process`_, below for details."
msgstr ""

#: ../../internals/release-process.txt:57
# 5013c8bf42664d87b9887dc9d7084fb0
msgid "These releases will contain new features, improvements to existing features, and such. A minor release may deprecate certain features from previous releases. If a feature in version ``A.B`` is deprecated, it will continue to work in version ``A.B+1``. In version ``A.B+2``, use of the feature will raise a ``DeprecationWarning`` but will continue to work. Version ``A.B+3`` will remove the feature entirely."
msgstr ""

#: ../../internals/release-process.txt:64
# 9ab071665a814c64a1609905c07910a7
msgid "So, for example, if we decided to remove a function that existed in Django 1.0:"
msgstr ""

#: ../../internals/release-process.txt:66
# 8b25195289be43f6b789fd329b389487
msgid "Django 1.1 will contain a backwards-compatible replica of the function which will raise a ``PendingDeprecationWarning``. This warning is silent by default; you need to explicitly turn on display of these warnings."
msgstr ""

#: ../../internals/release-process.txt:70
# fcf4e79e535646bdb8066f7347624212
msgid "Django 1.2 will contain the backwards-compatible replica, but the warning will be promoted to a full-fledged ``DeprecationWarning``. This warning is *loud* by default, and will likely be quite annoying."
msgstr ""

#: ../../internals/release-process.txt:74
# d5368e1dc80c4936977dbed601ad0911
msgid "Django 1.3 will remove the feature outright."
msgstr ""

#: ../../internals/release-process.txt:77
# c7ea4ae0e353454da20c798c1fe02c02
msgid "Micro releases"
msgstr ""

#: ../../internals/release-process.txt:79
# 280d314887664c899a2c0726d0489008
msgid "Micro releases (1.0.1, 1.0.2, 1.1.1, etc.) will be issued at least once half-way between minor releases, and probably more often as needed."
msgstr ""

#: ../../internals/release-process.txt:82
# f5ddf572e30f40059dce3fc5079307e5
msgid "These releases will be 100% compatible with the associated minor release, unless this is impossible for security reasons. So the answer to \"should I upgrade to the latest micro release?\" will always be \"yes.\""
msgstr ""

#: ../../internals/release-process.txt:86
# e10e4dc9779b43418087d2c63ce2d955
msgid "Each minor release of Django will have a \"release maintainer\" appointed. This person will be responsible for making sure that bug fixes are applied to both trunk and the maintained micro-release branch. This person will also work with the release manager to decide when to release the micro releases."
msgstr ""

#: ../../internals/release-process.txt:94
#: ../../internals/security.txt:45
# 0133456439b942cf96cb96b491ff14dd
# a5c37956a1014a85bc7e6f71690d99cc
msgid "Supported versions"
msgstr ""

#: ../../internals/release-process.txt:96
# b3b8e8f3fabf4190ab1d7d20c5920936
msgid "At any moment in time, Django's developer team will support a set of releases to varying levels:"
msgstr ""

#: ../../internals/release-process.txt:99
# 612bdefc05f54223be7705d51a5c5826
msgid "The current development trunk will get new features and bug fixes requiring major refactoring."
msgstr ""

#: ../../internals/release-process.txt:102
# 408ca40e0eaa4960bc8f28bec532276e
msgid "Patches applied to the trunk will also be applied to the last minor release, to be released as the next micro release, when they fix critical problems:"
msgstr ""

#: ../../internals/release-process.txt:106
# b26ae512c59c481fbd0928a0bd7aae94
msgid "Security issues."
msgstr ""

#: ../../internals/release-process.txt:108
# 288fb1ffc12f48a69bdbaa83ce10bc17
msgid "Data-loss bugs."
msgstr ""

#: ../../internals/release-process.txt:110
# 830d81bc37bc42eea0c463c5b390d8ca
msgid "Crashing bugs."
msgstr ""

#: ../../internals/release-process.txt:112
# 269e54d29b964782b501fa2bd0550630
msgid "Major functionality bugs in newly-introduced features."
msgstr ""

#: ../../internals/release-process.txt:114
# 01b23c4b87ab4ec980ee576fce966396
msgid "The rule of thumb is that fixes will be backported to the last minor release for bugs that would have prevented a release in the first place."
msgstr ""

#: ../../internals/release-process.txt:117
# 7a7d49ea3a36449e842404a06c49a649
msgid "Security fixes will be applied to the current trunk and the previous two minor releases."
msgstr ""

#: ../../internals/release-process.txt:120
# f2326fd7ad0340478bf4ee0dffef914b
msgid "Documentation fixes generally will be more freely backported to the last release branch, at the discretion of the committer, and they don't need to meet the \"critical fixes only\" bar. That's because it's highly advantageous to have the docs for the last release be up-to-date and correct, and the downside of backporting (risk of introducing regressions) is much less of a concern."
msgstr ""

#: ../../internals/release-process.txt:127
# d8c3ab5f3ae341db90ab11de08fb9323
msgid "As a concrete example, consider a moment in time halfway between the release of Django 1.3 and 1.4. At this point in time:"
msgstr ""

#: ../../internals/release-process.txt:130
# 05041aaff3af4cda986c56301b246b29
msgid "Features will be added to development trunk, to be released as Django 1.4."
msgstr ""

#: ../../internals/release-process.txt:132
# ad943e1d422446efb2bdd4b362e8115e
msgid "Critical bug fixes will be applied to a ``1.3.X`` branch, and released as 1.3.1, 1.3.2, etc."
msgstr ""

#: ../../internals/release-process.txt:135
# fb5a7bf837f34bc7a7fcbad5ed9a1c91
msgid "Security fixes will be applied to trunk, a ``1.3.X`` branch and a ``1.2.X`` branch. They will trigger the release of ``1.3.1``, ``1.2.1``, etc."
msgstr ""

#: ../../internals/release-process.txt:139
# e3e6a1bec83a40e1bf00ca9ece72aeaa
msgid "Documentation fixes will be applied to trunk, and, if easily backported, to the ``1.3.X`` branch."
msgstr ""

#: ../../internals/release-process.txt:145
# b654136979ae4acb85c3c6815714caba
msgid "Release process"
msgstr ""

#: ../../internals/release-process.txt:147
# 30b5a42b3d9e4ac2afd631959241227f
msgid "Django uses a time-based release schedule, with minor (i.e. 1.1, 1.2, etc.) releases every nine months, or more, depending on features."
msgstr ""

#: ../../internals/release-process.txt:150
# ddbe03d372ab4460b3bae47f53ce761a
msgid "After each release, and after a suitable cooling-off period of a few weeks, the core development team will examine the landscape and announce a timeline for the next release. Most releases will be scheduled in the 6-9 month range, but if we have bigger features to development we might schedule a longer period to allow for more ambitious work."
msgstr ""

#: ../../internals/release-process.txt:157
# 36cd892788e940169c87a2969e1d1c19
msgid "Release cycle"
msgstr ""

#: ../../internals/release-process.txt:159
# 709e12a5b69d4a34bef13f25f4f658ea
msgid "Each release cycle will be split into three periods, each lasting roughly one-third of the cycle:"
msgstr ""

#: ../../internals/release-process.txt:163
# f24963b26ed647fe93fa1de87463a78f
msgid "Phase one: feature proposal"
msgstr ""

#: ../../internals/release-process.txt:165
# 162c68b42bce46eda96ddf6ed0603fb8
msgid "The first phase of the release process will be devoted to figuring out what features to include in the next version. This should include a good deal of preliminary work on those features -- working code trumps grand design."
msgstr ""

#: ../../internals/release-process.txt:169
# 97f64732860c4b0f96746713edc6a3b0
msgid "At the end of part one, the core developers will propose a feature list for the upcoming release. This will be broken into:"
msgstr ""

#: ../../internals/release-process.txt:172
# cd033d15b600482fad8be35a480fc214
msgid "\"Must-have\": critical features that will delay the release if not finished"
msgstr ""

#: ../../internals/release-process.txt:173
# 310595eab5c741b89cbc209754aed491
msgid "\"Maybe\" features: that will be pushed to the next release if not finished"
msgstr ""

#: ../../internals/release-process.txt:174
# 26044006886342eca76b5af9f861260a
msgid "\"Not going to happen\": features explicitly deferred to a later release."
msgstr ""

#: ../../internals/release-process.txt:176
# f4fb30fa498044f9aedefc9c5b717540
msgid "Anything that hasn't got at least some work done by the end of the first third isn't eligible for the next release; a design alone isn't sufficient."
msgstr ""

#: ../../internals/release-process.txt:180
# 097c0fe6f20642da938f8510f1d4d289
msgid "Phase two: development"
msgstr ""

#: ../../internals/release-process.txt:182
# 4619acd16dd94a68880d7fb10cbd4289
msgid "The second third of the release schedule is the \"heads-down\" working period. Using the roadmap produced at the end of phase one, we'll all work very hard to get everything on it done."
msgstr ""

#: ../../internals/release-process.txt:186
# 069c539732714e30805a6d3db52dc45d
msgid "Longer release schedules will likely spend more than a third of the time in this phase."
msgstr ""

#: ../../internals/release-process.txt:189
# a121d57fc2af4f379c415ec73556c489
msgid "At the end of phase two, any unfinished \"maybe\" features will be postponed until the next release. Though it shouldn't happen, any \"must-have\" features will extend phase two, and thus postpone the final release."
msgstr ""

#: ../../internals/release-process.txt:193
# 9505e53e929b4d55a13bf38839604d00
msgid "Phase two will culminate with an alpha release."
msgstr ""

#: ../../internals/release-process.txt:196
# c1861eee2d1d4468939bcafbf1fa255e
msgid "Phase three: bugfixes"
msgstr ""

#: ../../internals/release-process.txt:198
# 6eb9a6de0b1c450c829ae05198378020
msgid "The last third of a release is spent fixing bugs -- no new features will be accepted during this time. We'll release a beta release about halfway through, and an rc complete with string freeze two weeks before the end of the schedule."
msgstr ""

#: ../../internals/release-process.txt:203
# 815fe7db48bc4b8baabb4b2724a2bb80
msgid "Bug-fix releases"
msgstr ""

#: ../../internals/release-process.txt:205
# a6f80a85c64f4cd6b19c2f03254a6432
msgid "After a minor release (e.g. 1.1), the previous release will go into bugfix mode."
msgstr ""

#: ../../internals/release-process.txt:208
# 1d9ee74c2ef244028232ac0cb4888419
msgid "A branch will be created of the form ``branches/releases/1.0.X`` to track bugfixes to the previous release. Critical bugs fixed on trunk must *also* be fixed on the bugfix branch; this means that commits need to cleanly separate bug fixes from feature additions. The developer who commits a fix to trunk will be responsible for also applying the fix to the current bugfix branch.  Each bugfix branch will have a maintainer who will work with the committers to keep them honest on backporting bug fixes."
msgstr ""

#: ../../internals/release-process.txt:217
# 133d0b9e73eb4340b3cecc53b80f892c
msgid "How this all fits together"
msgstr ""

#: ../../internals/release-process.txt:219
# 6de61819d0e6402c91420a0c75ddbd4d
msgid "Let's look at a hypothetical example for how this all first together. Imagine, if you will, a point about halfway between 1.1 and 1.2. At this point, development will be happening in a bunch of places:"
msgstr ""

#: ../../internals/release-process.txt:223
# 4f058e3118544f1e9eb6e1214f848477
msgid "On trunk, development towards 1.2 proceeds with small additions, bugs fixes, etc. being checked in daily."
msgstr ""

#: ../../internals/release-process.txt:226
# 52a2b4594f4747498ac0efa2fde50f33
msgid "On the branch \"branches/releases/1.1.X\", fixes for critical bugs found in the 1.1 release are checked in as needed. At some point, this branch will be released as \"1.1.1\", \"1.1.2\", etc."
msgstr ""

#: ../../internals/release-process.txt:230
# 88a8721a99e344bdb6e1670ab128aed0
msgid "On the branch \"branches/releases/1.0.X\", security fixes are made if needed and released as \"1.0.2\", \"1.0.3\", etc."
msgstr ""

#: ../../internals/release-process.txt:233
# 1ef0c312bd5649669012a47a2145986e
msgid "On feature branches, development of major features is done. These branches will be merged into trunk before the end of phase two."
msgstr ""

#: ../../internals/security.txt:3
# 2a9cf0e3255040cb85a0efd9d69e2798
msgid "Django's security policies"
msgstr ""

#: ../../internals/security.txt:5
# 503a5d7fbbfe4efaa985a989d74c4d1d
msgid "Django's development team is strongly committed to responsible reporting and disclosure of security-related issues. As such, we've adopted and follow a set of policies which conform to that ideal and are geared toward allowing us to deliver timely security updates to the official distribution of Django, as well as to third-party distributions."
msgstr ""

#: ../../internals/security.txt:15
# f0ace8393ab549c79779a27d02a1a6dc
msgid "Reporting security issues"
msgstr ""

#: ../../internals/security.txt:17
# 6e8c40911bbd4060b520c678dd6a8791
msgid "**Short version: please report security issues by emailing security@djangoproject.com**."
msgstr ""

#: ../../internals/security.txt:20
# 37d93302aa51449cb7b95e1cb46878e9
msgid "Most normal bugs in Django are reported to `our public Trac instance`_, but due to the sensitive nature of security issues, we ask that they *not* be publicly reported in this fashion."
msgstr ""

#: ../../internals/security.txt:24
# 00fdb884f0dc4e9fa10369bff00ec773
msgid "Instead, if you believe you've found something in Django which has security implications, please send a description of the issue via email to ``security@djangoproject.com``. Mail sent to that address reaches a subset of the core development team, who can forward security issues into the private committers' mailing list for broader discussion if needed."
msgstr ""

#: ../../internals/security.txt:31
# cefa9428a63b436f954052890196d169
msgid "You can send encrypted email to this address; the public key ID for ``security@djangoproject.com`` is ``0xfcb84b8d1d17f80b``, and this public key is available from most commonly-used keyservers."
msgstr ""

#: ../../internals/security.txt:35
# 039b6558190847568467b463841c1802
msgid "Once you've submitted an issue via email, you should receive an acknowledgment from a member of the Django development team within 48 hours, and depending on the action to be taken, you may receive further followup emails."
msgstr ""

#: ../../internals/security.txt:47
# dd1bda4790414aeba4a524b875fc1b41
msgid "At any given time, the Django team provides official security support for several versions of Django:"
msgstr ""

#: ../../internals/security.txt:50
# 234547767f6f415ab26f983bebc0aeab
msgid "The `master development branch`_, hosted on GitHub, which will become the next release of Django, receives security support."
msgstr ""

#: ../../internals/security.txt:53
# 2e7111e142ce4f5c8c6d92afc0b98e1b
msgid "The two most recent Django release series receive security support. For example, during the development cycle leading to the release of Django 1.5, support will be provided for Django 1.4 and Django 1.3. Upon the release of Django 1.5, Django 1.3's security support will end."
msgstr ""

#: ../../internals/security.txt:59
# 6b8ef3b4089f4128abc4fb672aebf580
msgid "When new releases are issued for security reasons, the accompanying notice will include a list of affected versions. This list is comprised solely of *supported* versions of Django: older versions may also be affected, but we do not investigate to determine that, and will not issue patches or new releases for those versions."
msgstr ""

#: ../../internals/security.txt:70
# 73ea9ad78d6d4762b9b639bf5c9a95db
msgid "How Django discloses security issues"
msgstr ""

#: ../../internals/security.txt:72
# 8108bea0d0b44024807229e9d40ab9d2
msgid "Our process for taking a security issue from private discussion to public disclosure involves multiple steps."
msgstr ""

#: ../../internals/security.txt:75
# 44aaec69b34e40e8b80d1c4bb9a19b37
msgid "Approximately one week before full public disclosure, we will send advance notification of the issue to a list of people and organizations, primarily composed of operating-system vendors and other distributors of Django. This notification will consist of an email message, signed with the Django release key, containing:"
msgstr ""

#: ../../internals/security.txt:81
# 6c32a27428774a21a99742bd225aad18
msgid "A full description of the issue and the affected versions of Django."
msgstr ""

#: ../../internals/security.txt:83
# 256130968c51441096c5ed0e8e211311
msgid "The steps we will be taking to remedy the issue."
msgstr ""

#: ../../internals/security.txt:85
# eeeaf00f17584eb68dcaa5434aec3bd3
msgid "The patch(es), if any, that will be applied to Django."
msgstr ""

#: ../../internals/security.txt:87
# eac1a8360c2a4bff8f50c652f06aa4b8
msgid "The date on which the Django team will apply these patches, issue new releases and publicy disclose the issue."
msgstr ""

#: ../../internals/security.txt:90
# 35a73f47557c41f5a25f54fc7e367d2f
msgid "Simultaneously, the reporter of the issue will receive notification of the date on which we plan to take the issue public."
msgstr ""

#: ../../internals/security.txt:93
# 6fc23c0c762b4a2496eba55c65303ae4
msgid "On the day of disclosure, we will take the following steps:"
msgstr ""

#: ../../internals/security.txt:95
# b0e1b6b3a6de43309fa46c86afed375a
msgid "Apply the relevant patch(es) to Django's codebase. The commit messages for these patches will indicate that they are for security issues, but will not describe the issue in any detail; instead, they will warn of upcoming disclosure."
msgstr ""

#: ../../internals/security.txt:100
# 74a11c95fd9c4e60a8a93e5420c46d9b
msgid "Issue the relevant release(s), by placing new packages on `the Python Package Index`_ and on the Django website, and tagging the new release(s) in Django's git repository."
msgstr ""

#: ../../internals/security.txt:104
# db5b5045acb24f308e60a5348a7a79d2
msgid "Post a public entry on `the official Django development blog`_, describing the issue and its resolution in detail, pointing to the relevant patches and new releases, and crediting the reporter of the issue (if the reporter wishes to be publicly identified)."
msgstr ""

#: ../../internals/security.txt:112
# 06c95cc3e9b14845bc75b8e3f2e5d546
msgid "If a reported issue is believed to be particularly time-sensitive -- due to a known exploit in the wild, for example -- the time between advance notification and public disclosure may be shortened considerably."
msgstr ""

#: ../../internals/security.txt:117
# d4b8006354654fed8d306f44df7ecb12
msgid "Additionally, if we have reason to believe that an issue reported to us affects other frameworks or tools in the Python/web ecosystem, we may privately contact and discuss those issues with the appropriate maintainers, and coordinate our own disclosure and resolution with theirs."
msgstr ""

#: ../../internals/security.txt:126
# 2602e51903084cdc8f832a3cb843840f
msgid "Who receives advance notification"
msgstr ""

#: ../../internals/security.txt:128
# e5b0fde5579f49d2b280a52a33749673
msgid "The full list of people and organizations who receive advance notification of security issues is not and will not be made public."
msgstr ""

#: ../../internals/security.txt:131
# deeab6ea7adb4c4d86717149e6d17980
msgid "We also aim to keep this list as small as effectively possible, in order to better manage the flow of confidential information prior to disclosure. As such, our notification list is *not* simply a list of users of Django, and merely being a user of Django is not sufficient reason to be placed on the notification list."
msgstr ""

#: ../../internals/security.txt:137
# 8746803ec6cd4d47864abc19ebeaeb5d
msgid "In broad terms, recipients of security notifications fall into three groups:"
msgstr ""

#: ../../internals/security.txt:140
# 499e306bf2e441af80bc7bea94e321d2
msgid "Operating-system vendors and other distributors of Django who provide a suitably-generic (i.e., *not* an individual's personal email address) contact address for reporting issues with their Django package, or for general security reporting. In either case, such addresses **must not** forward to public mailing lists or bug trackers. Addresses which forward to the private email of an individual maintainer or security-response contact are acceptable, although private security trackers or security-response groups are strongly preferred."
msgstr ""

#: ../../internals/security.txt:150
# 88c7fc45bdd94e978ece28a2e2bfc62b
msgid "On a case-by-case basis, individual package maintainers who have demonstrated a commitment to responding to and responsibly acting on these notifications."
msgstr ""

#: ../../internals/security.txt:154
# 57c0b960f41c4415baff74f0e73b239c
msgid "On a case-by-case basis, other entities who, in the judgment of the Django development team, need to be made aware of a pending security issue. Typically, membership in this group will consist of some of the largest and/or most likely to be severely impacted known users or distributors of Django, and will require a demonstrated ability to responsibly receive, keep confidential and act on these notifications."
msgstr ""

#: ../../internals/security.txt:162
# 9a7781f660864614b0de4668e5df9c0d
msgid "Additionally, a maximum of six days prior to disclosure, notification will be sent to the ``distros@vs.openwall.org`` mailing list, whose membership includes representatives of most major open-source operating system vendors."
msgstr ""

#: ../../internals/security.txt:168
# 7f57f4e9916f4be1a1118da567da4f7e
msgid "Requesting notifications"
msgstr ""

#: ../../internals/security.txt:170
# 5ce40313040748ecb5b3f5a9d89d1098
msgid "If you believe that you, or an organization you are authorized to represent, fall into one of the groups listed above, you can ask to be added to Django's notification list by emailing ``security@djangoproject.com``. Please use the subject line \"Security notification request\"."
msgstr ""

#: ../../internals/security.txt:176
# 44888095e0a24912840e78f56fe873ed
msgid "Your request **must** include the following information:"
msgstr ""

#: ../../internals/security.txt:178
# bebae21ded474c869cad2d6bd6e37352
msgid "Your full, real name and the name of the organization you represent, if applicable, as well as your role within that organization."
msgstr ""

#: ../../internals/security.txt:181
# 730380e9fc974da1abe45b1b4430f274
msgid "A detailed explanation of how you or your organization fit at least one set of criteria listed above."
msgstr ""

#: ../../internals/security.txt:184
# e1eef12d1aa846f29109d228bac8f989
msgid "A detailed explanation of why you are requesting security notifications. Again, please keep in mind that this is *not* simply a list for users of Django, and the overwhelming majority of users of Django should not request notifications and will not be added to our notification list if they do."
msgstr ""

#: ../../internals/security.txt:190
# eadbfd5e210a4c34a08b959ef5c8e74d
msgid "The email address you would like to have added to our notification list."
msgstr ""

#: ../../internals/security.txt:193
# a7b3779701814d10873bfade33e718ab
msgid "An explanation of who will be receiving/reviewing mail sent to that address, as well as information regarding any automated actions that will be taken (i.e., filing of a confidential issue in a bug tracker)."
msgstr ""

#: ../../internals/security.txt:198
# a1c8357d12de46f9874bab0ea057b91c
msgid "For individuals, the ID of a public key associated with your address which can be used to verify email received from you and encrypt email sent to you, as needed."
msgstr ""

#: ../../internals/security.txt:202
# 1db65eec7c7a4a0c8282988b21835148
msgid "Once submitted, your request will be considered by the Django development team; you will receive a reply notifying you of the result of your request within 30 days."
msgstr ""

#: ../../internals/security.txt:206
# 13e3a17fe21f4cc4a8b42391c5c4c109
msgid "Please also bear in mind that for any individual or organization, receiving security notifications is a privilege granted at the sole discretion of the Django development team, and that this privilege can be revoked at any time, with or without explanation."
msgstr ""

#: ../../internals/security.txt:211
# ecc093554c5944a09c7e83b32760de2d
msgid "If you are added to the notification list, security-related emails will be sent to you by Django's release manager, and all notification emails will be signed with the same key used to sign Django releases; that key has the ID ``0x3684C0C08C8B2AE1``, and is available from most commonly-used keyservers."
msgstr ""

#: ../../internals/svn.txt:6
# 39757136dbad430a8a2fab58a2b9ec86
msgid "When deploying a Django application into a real production environment, you will almost always want to use `an official packaged release of Django`_. However, if you'd like to try out in-development code from an upcoming release or contribute to the development of Django, you'll need to obtain a checkout from Django's source code repository. This document covers the way the code repository is laid out and how to work with and find things in it."
msgstr ""

#: ../../internals/svn.txt:21
# f267ccc6c2c44968a8942d324bbee6f4
msgid "The Django source code repository uses `Subversion`_ to track changes to the code over time, so you'll need a copy of the Subversion client (a program called ``svn``) on your computer, and you'll want to familiarize yourself with the basics of how Subversion works. Subversion's Web site offers downloads for various operating systems, and `a free online book`_ is available to help you get up to speed with using Subversion."
msgstr ""

#: ../../internals/svn.txt:29
# cf0ee9111aad44458f487c2f40ffa844
msgid "The Django Subversion repository is located online at `code.djangoproject.com/svn <https://code.djangoproject.com/svn/>`_. `A friendly Web-based interface for browsing the code`_ is also available, though when using Subversion you'll always want to use the repository address instead. At the top level of the repository are two directories: ``django`` contains the full source code for all Django releases, while ``djangoproject.com`` contains the source code and templates for the `djangoproject.com <https://www.djangoproject.com/>`_ Web site. For trying out in-development Django code, or contributing to Django, you'll always want to check out code from some location in the ``django`` directory."
msgstr ""

#: ../../internals/svn.txt:41
# b9b7399f278d45c699da0039ed267f06
msgid "Inside the ``django`` directory, Django's source code is organized into three areas:"
msgstr ""

#: ../../internals/svn.txt:44
# 4a1826fd3b1f496cbfc4ec8e464bb034
msgid "``branches`` contains branched copies of Django's code, which are (or were) maintained for various purposes. Some branches exist to provide a place to develop major or experimental new features without affecting the rest of Django's code, while others serve to provide bug fixes or support for older Django releases."
msgstr ""

#: ../../internals/svn.txt:50
# 35bf46829447402894d55185b09c0934
msgid "``tags`` contains snapshots of Django's code at various important points in its history; mostly these are the exact revisions from which packaged Django releases were produced."
msgstr ""

#: ../../internals/svn.txt:54
# a59805fcf8e8402fa0666fb75a069814
msgid "``trunk`` contains the main in-development code which will become the next packaged release of Django, and is where most development activity is focused."
msgstr ""

#: ../../internals/svn.txt:65
# e010f7532ef346a590ee4544e6924746
msgid "Working with Django's trunk"
msgstr ""

#: ../../internals/svn.txt:67
# 1b6f0183f34247d38695ffb30fb42845
msgid "If you'd like to try out the in-development code for the next release of Django, or if you'd like to contribute to Django by fixing bugs or developing new features, you'll want to get the code from trunk. You can get a complete copy of this code (a \"Subversion checkout\") by typing::"
msgstr ""

#: ../../internals/svn.txt:75
# c38bac9a4e754a2e8e82a0e450503d39
msgid "Note that this will get *all* of Django: in addition to the top-level ``django`` module containing Python code, you'll also get a copy of Django's documentation, unit-test suite, packaging scripts and other miscellaneous bits. Django's code will be present in your checkout as a directory named ``django``."
msgstr ""

#: ../../internals/svn.txt:81
# b3f87a5b85b1437ba1d7f6db269556d0
msgid "To try out the in-development trunk code with your own applications, simply place the directory containing your checkout on your Python import path. Then ``import`` statements which look for Django will find the ``django`` module within your checkout."
msgstr ""

#: ../../internals/svn.txt:94
# 35dd556f14464ebbbc5a12d1bc35b1c8
msgid "Branches"
msgstr ""

#: ../../internals/svn.txt:98
# 0b7c0625067b40269ae7f70bf31142a9
msgid "Development of major or experimental features, to keep them from affecting progress on other work in trunk."
msgstr ""

#: ../../internals/svn.txt:101
# de63f459a89240e983557473331071ff
msgid "Security and bug-fix support for older releases of Django, during their support lifetimes."
msgstr ""

#: ../../internals/svn.txt:108
# 3b67c13fcfb149f8aafaae32a7142bbe
msgid "Feature-development branches tend by their nature to be temporary. Some produce successful features which are merged back into Django's trunk to become part of an official release, but others do not; in either case there comes a time when the branch is no longer being actively worked on by any developer. At this point the branch is considered closed."
msgstr ""

#: ../../internals/svn.txt:115
# 124d78029e7b424bb9a0caa671ea9edb
msgid "Unfortunately, Subversion has no standard way of indicating this. As a workaround, branches of Django which are closed and no longer maintained are moved into the directory ``django/branches/attic``."
msgstr ""

#: ../../internals/svn.txt:180
# 41cff531a96d44649e23de8463b39d6f
msgid "All of the above-mentioned branches now reside in ``django/branches/attic``."
msgstr ""

#: ../../internals/svn.txt:187
# b92ee46bbb5a4e95bca338b9bf0bba48
msgid "In addition to fixing bugs in current trunk, the Django project provides official bug-fix support for the most recent released version of Django, and security support for the two most recently-released versions of Django. This support is provided via branches in which the necessary bug or security fixes are applied; the branches are then used as the basis for issuing bugfix or security releases."
msgstr ""

#: ../../internals/svn.txt:194
# 5e7f54c296bd4387b4605fd847d7d2be
msgid "As of the Django 1.0 release, these branches can be found in the repository in the directory ``django/branches/releases``, and new branches will be created there approximately one month after each new Django release. For example, shortly after the release of Django 1.0, the branch ``django/branches/releases/1.0.X`` was created to receive bug fixes, and shortly after the release of Django 1.1 the branch ``django/branches/releases/1.1.X`` was created."
msgstr ""

#: ../../internals/svn.txt:202
# d0eb19c3ddb44bef8efb8c8fddd86ee3
msgid "Prior to the Django 1.0 release, these branches were maintained within the top-level ``django/branches`` directory, and so the following branches exist there and provided support for older Django releases:"
msgstr ""

#: ../../internals/svn.txt:206
# 7db5ff0658e5416281b74d8de4e2187d
msgid "``0.90-bugfixes``"
msgstr ""

#: ../../internals/svn.txt:208
# e07cba63ae5d4a1383a471222b4aaecc
msgid "``0.91-bugfixes``"
msgstr ""

#: ../../internals/svn.txt:210
# 48ace7e1d7b74759b3301a29a20be7e1
msgid "``0.95-bugfixes``"
msgstr ""

#: ../../internals/svn.txt:212
# 87e37d89b81646208993d3c3c4e92a1c
msgid "``0.96-bugfixes``"
msgstr ""

#: ../../internals/svn.txt:214
# eb17fd3faa074614ac180184039f4062
msgid "Official support for those releases has expired, and so they no longer receive direct maintenance from the Django project. However, the branches continue to exist and interested community members have occasionally used them to provide unofficial support for old Django releases."
msgstr ""

#: ../../internals/svn.txt:224
# 7205a4d4c187486ca6c6d3cb320e6ef2
msgid "The directory ``django/tags`` within the repository contains complete copies of the Django source code as it existed at various points in its history. These \"tagged\" copies of Django are *never* changed or updated; new tags may be added as needed, but once added they are considered read-only and serve as useful guides to Django's development history."
msgstr ""

#: ../../internals/svn.txt:231
# 3c6721f741804ec59b8676e889a5f214
msgid "Within ``django/tags/releases`` are copies of the code which formed each packaged release of Django, and each tag is named with the version number of the release to which it corresponds. So, for example, ``django/tags/releases/1.1`` is a complete copy of the code which was packaged as the Django 1.1 release."
msgstr ""

#: ../../internals/svn.txt:237
# 6ad3c899b05f4be88c71a49b212ac089
msgid "Within ``django/tags/notable_moments`` are copies of the Django code from points which do not directly correspond to releases, but which are nonetheless important historical milestones for Django development. The current \"notable moments\" marked there are:"
msgstr ""

#: ../../internals/svn.txt:242
# 6de8b54491ae4949971b26b103764166
msgid "``ipo``: Django's code as it existed at the moment Django was first publicly announced in 2005."
msgstr ""

#: ../../internals/svn.txt:245
# 11213a90f0ae4751abbff50233ba244c
msgid "``pre-magic-removal``: The state of Django's code just before the merging of the ``magic-removal`` branch (described above), which significantly updated Django's object-relational mapper."
msgstr ""

#: ../../internals/svn.txt:249
# a52f8ca03ae54b8d8bc46a5eae32c52c
msgid "``pre-newforms-admin``: The state of Django's code just before the merging of the ``newforms-admin`` branch (see above), which significantly updated Django's bundled administrative application."
msgstr ""

#: ../../internals/svn.txt:253
# 01ad9e56a37d4a878095a3ef77acc4a2
msgid "Tags corresponding to each of the alpha, beta and release-candidate packages in the run up to the Django 1.0 release."
msgstr ""

