# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ref/authbackends.txt:3
# d6a40741f4df4530a398f628bcf81c3e
msgid "Authentication backends"
msgstr ""

#: ../../ref/authbackends.txt:8
# 0631abd45f674c34ba2dd3f399fb9319
msgid "This document details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the :ref:`Other authentication sources section <authentication-backends>` of the :doc:`User authentication guide </topics/auth>`."
msgstr ""

#: ../../ref/authbackends.txt:16
# e7ec5d42930241e0892a1760845602b8
msgid "Available authentication backends"
msgstr ""

#: ../../ref/authbackends.txt:18
# 900f0a91f1534c1eb6a4c43d608e70ae
msgid "The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""

#: ../../ref/authbackends.txt:22
# 5947cf3dd1c547cbb76e8569db95acb1
msgid "This is the default authentication backend used by Django.  It authenticates using usernames and passwords stored in the :class:`~django.contrib.auth.models.User` model."
msgstr ""

#: ../../ref/authbackends.txt:29
# bbe22ef14d33438a8abd47c0906f0f0b
msgid "Use this backend to take advantage of external-to-Django-handled authentication.  It authenticates using usernames passed in :attr:`request.META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""

#: ../../ref/class-based-views.txt:3
# f55ee5f547b84ca8a98722ea344011be
msgid "Class-based generic views"
msgstr ""

#: ../../ref/class-based-views.txt:8
# 30de686866674cc6a83c8aa311e483fa
msgid "Prior to Django 1.3, generic views were implemented as functions. The function-based implementation has been deprecated in favor of the class-based approach described here."
msgstr ""

#: ../../ref/class-based-views.txt:12
# 0dd47c375bcc4ef283cc1d65396d6583
msgid "For details on the previous generic views implementation, see the :doc:`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/generic-views>`."
msgstr ""

#: ../../ref/class-based-views.txt:16
# d2ecc2fb04804758b182fc66b242c0fd
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but Web developers also experience this boredom at the view level."
msgstr ""

#: ../../ref/class-based-views.txt:21
# 3b946e6ab2d3404d8eeee0bd2cc00ab4
msgid "A general introduction to class-based generic views can be found in the :doc:`topic guide </topics/class-based-views>`."
msgstr ""

#: ../../ref/class-based-views.txt:24
# 90cc4b9f996d44e78c1b807587cbeacb
msgid "This reference contains details of Django's built-in generic views, along with a list of the keyword arguments that each generic view expects. Remember that arguments may either come from the URL pattern or from the ``extra_context`` additional-information dictionary."
msgstr ""

#: ../../ref/class-based-views.txt:29
#: ../../ref/class-based-views/index.txt:60
#: ../../ref/generic-views.txt:28
# e73dd2dd7f564abc880b4feb34d21c19
# ba1e8a362f0e445eb74f16b1387b1298
# 7b91b95524ed43b9b582a9d1f955bb5f
msgid "Most generic views require the ``queryset`` key, which is a ``QuerySet`` instance; see :doc:`/topics/db/queries` for more information about ``QuerySet`` objects."
msgstr ""

#: ../../ref/class-based-views.txt:34
# dc2c3dd965da4d2f8346325e8cec447c
msgid "Mixins"
msgstr ""

#: ../../ref/class-based-views.txt:36
# e06e26c4d3c0476382bfbc6cc2d922ac
msgid "A mixin class is a way of using the inheritance capabilities of classes to compose a class out of smaller pieces of behavior. Django's class-based generic views are constructed by composing mixins into usable generic views."
msgstr ""

#: ../../ref/class-based-views.txt:41
# 426469aa61af4e57b93b21155173261b
msgid "For example, the :class:`~django.views.generic.base.detail.DetailView` is composed from:"
msgstr ""

#: ../../ref/class-based-views.txt:44
# c7a2b7c704b84b58ab26d9b40d0b7c94
msgid ":class:`~django.db.views.generic.base.View`, which provides the basic class-based behavior"
msgstr ""

#: ../../ref/class-based-views.txt:46
# 042d71c96f094a5a9f56916c421b7cc8
msgid ":class:`~django.db.views.generic.detail.SingleObjectMixin`, which provides the utilities for retrieving and displaying a single object"
msgstr ""

#: ../../ref/class-based-views.txt:48
# 026d661a58214850943461bad9ce9812
msgid ":class:`~django.db.views.generic.detail.SingleObjectTemplateResponseMixin`, which provides the tools for rendering a single object into a template-based response."
msgstr ""

#: ../../ref/class-based-views.txt:52
# a44bd40b81a44b7d86071711e0a42389
msgid "When combined, these mixins provide all the pieces necessary to provide a view over a single object that renders a template to produce a response."
msgstr ""

#: ../../ref/class-based-views.txt:56
# 448aea86dcdf49b8a755fd42508c98af
msgid "Django provides a range of mixins. If you want to write your own generic views, you can build classes that compose these mixins in interesting ways. Alternatively, you can just use the pre-mixed `Generic views`_ that Django provides."
msgstr ""

#: ../../ref/class-based-views.txt:63
# 791e77607dd9494a97d876284f971be5
msgid "When the documentation for a view gives the list of mixins, that view inherits all the properties and methods of that mixin."
msgstr ""

#: ../../ref/class-based-views.txt:67
#: ../../ref/class-based-views/mixins-simple.txt:3
# 4a5bf0185317474db9b80f44b1ada895
# 894a7928db39493f855f0471d82948c7
msgid "Simple mixins"
msgstr ""

#: ../../ref/class-based-views.txt:72
#: ../../ref/class-based-views/mixins-simple.txt:37
# 026283242a42458481bbf7bf05e45ad1
# 691efa0b6b2649a7a4177374eeaed1c6
msgid "TemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views.txt:77
# b2d4a66f209e465e9bb6fb628dfd2a1e
msgid "The path to the template to use when rendering the view."
msgstr ""

#: ../../ref/class-based-views.txt:81
#: ../../ref/class-based-views/mixins-simple.txt:56
# 3552082721ef418b8100f415c03ab9ca
# 18d7ef1d0a6547b69908788a9fe0153f
msgid "The response class to be returned by ``render_to_response`` method. Default is :class:`TemplateResponse <django.template.response.TemplateResponse>`. The template and context of ``TemplateResponse`` instances can be altered later (e.g. in :ref:`template response middleware <template-response-middleware>`)."
msgstr ""

#: ../../ref/class-based-views.txt:88
#: ../../ref/class-based-views/mixins-simple.txt:63
# 319b4406ed4845ae92c4ad4f0584040e
# 77ed19656b444b21b86495bb85e506ce
msgid "If you need custom template loading or custom context object instantiation, create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""

#: ../../ref/class-based-views.txt:94
#: ../../ref/class-based-views/mixins-simple.txt:71
# 61438eacff7d4863bf1527127134c890
# ff31326411ab4e6db1860348ccf92134
msgid "Returns a ``self.response_class`` instance."
msgstr ""

#: ../../ref/class-based-views.txt:96
#: ../../ref/class-based-views/mixins-simple.txt:73
# e1b7bafe062d417ea965c04ede7b72be
# 29e673cadf4c4e19a5257e0c56419633
msgid "If any keyword arguments are provided, they will be passed to the constructor of the response class."
msgstr ""

#: ../../ref/class-based-views.txt:99
#: ../../ref/class-based-views/mixins-simple.txt:76
# 4708b963826b4a9a9b37e49573a21d2e
# f5881bfe15ed418e91ac52fc17a5b61a
msgid "Calls :meth:`~TemplateResponseMixin.get_template_names()` to obtain the list of template names that will be searched looking for an existent template."
msgstr ""

#: ../../ref/class-based-views.txt:105
#: ../../ref/class-based-views/mixins-simple.txt:82
# f988bac837ae4078a13273790ccf8849
# 74a1ff9f49aa427d9151184c0b38e065
msgid "Returns a list of template names to search for when rendering the template."
msgstr ""

#: ../../ref/class-based-views.txt:108
#: ../../ref/class-based-views/mixins-simple.txt:85
# 9ced25d0c1b34e3f8cc79b78bc7deb48
# d1428c0c08e5495e8b7bf4fb5e4ed1c6
msgid "If :attr:`TemplateResponseMixin.template_name` is specified, the default implementation will return a list containing :attr:`TemplateResponseMixin.template_name` (if it is specified)."
msgstr ""

#: ../../ref/class-based-views.txt:114
#: ../../ref/class-based-views/mixins-single-object.txt:3
# a9b37ce7113249c4a5bdcc58b7e54977
# 14bae7df999a403cbe3b1c4edce3a22a
msgid "Single object mixins"
msgstr ""

#: ../../ref/class-based-views.txt:119
#: ../../ref/class-based-views/mixins-single-object.txt:6
# d081d5ba4d27495a9ae1d411e0b68cdc
# ef52fd8896cf4c1aa30b5617a1ad3149
msgid "SingleObjectMixin"
msgstr ""

#: ../../ref/class-based-views.txt:124
#: ../../ref/class-based-views.txt:287
#: ../../ref/class-based-views/mixins-multiple-object.txt:57
#: ../../ref/class-based-views/mixins-single-object.txt:17
# 100d17a256be4338b6e92cf36cf2f64b
# 557f24b38b854e5f813d65054c74efb7
# 8781db7d17c840dd94fae02a9df7653f
# 69981a07d05d4c349f3b079c036a0606
msgid "The model that this view will display data for. Specifying ``model = Foo`` is effectively the same as specifying ``queryset = Foo.objects.all()``."
msgstr ""

#: ../../ref/class-based-views.txt:130
#: ../../ref/class-based-views/mixins-single-object.txt:23
# 652d5b01ecbe4729b56953892d96770d
# d8921ba031074eb4afecb8adbca6ce1f
msgid "A ``QuerySet`` that represents the objects. If provided, the value of :attr:`SingleObjectMixin.queryset` supersedes the value provided for :attr:`SingleObjectMixin.model`."
msgstr ""

#: ../../ref/class-based-views.txt:136
#: ../../ref/class-based-views/mixins-single-object.txt:29
# b4bd3b2f8b1049719aa0256f3c840edd
# 80cf6b55795947feb7c08955c5231d19
msgid "The name of the field on the model that contains the slug. By default, ``slug_field`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views.txt:143
#: ../../ref/class-based-views/mixins-single-object.txt:36
# e45dd5df710e4f92b3edc504b563a9f6
# b047971991914df19f969a8d480b130a
msgid "The name of the URLConf keyword argument that contains the slug. By default, ``slug_url_kwarg`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views.txt:150
#: ../../ref/class-based-views/mixins-single-object.txt:43
# 041c5bc09aa44b33b039c54d25a4ed83
# aa3f67c0c33d4ca5b40d440cc92fe899
msgid "The name of the URLConf keyword argument that contains the primary key. By default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""

#: ../../ref/class-based-views.txt:155
#: ../../ref/class-based-views.txt:315
#: ../../ref/class-based-views/mixins-multiple-object.txt:94
#: ../../ref/class-based-views/mixins-single-object.txt:48
# 537123f442d44a368b11d2ca45fc48de
# 3cf9199f844741c59310494195aa0e5c
# da4d0c876d984f1aa90a0b292d921725
# 6a96973b64ee4ca68e60bd69423389a3
msgid "Designates the name of the variable to use in the context."
msgstr ""

#: ../../ref/class-based-views.txt:159
#: ../../ref/class-based-views/mixins-single-object.txt:52
# 358c3e7329f54c11b24e94f212f1d460
# 02b6118c31ba4356a178edc3ec463c66
msgid "Returns the single object that this view will display. If ``queryset`` is provided, that queryset will be used as the source of objects; otherwise, :meth:`~SingleObjectMixin.get_queryset` will be used. ``get_object()`` looks for a :attr:`SingleObjectMixin.pk_url_kwarg` argument in the arguments to the view; if this argument is found, this method performs a primary-key based lookup using that value. If this argument is not found, it looks for a :attr:`SingleObjectMixin.slug_url_kwarg` argument, and performs a slug lookup using the :attr:`SingleObjectMixin.slug_field`."
msgstr ""

#: ../../ref/class-based-views.txt:173
#: ../../ref/class-based-views/mixins-single-object.txt:66
# fe740844a3474dd4a8d6609fea0453d4
# 50a59cbc23d44a9dbb0fd1d69978f2bb
msgid "Returns the queryset that will be used to retrieve the object that this view will display. By default, :meth:`~SingleObjectMixin.get_queryset` returns the value of the :attr:`~SingleObjectMixin.queryset` attribute if it is set, otherwise it constructs a :class:`QuerySet` by calling the `all()` method on the :attr:`~SingleObjectMixin.model` attribute's default manager."
msgstr ""

#: ../../ref/class-based-views.txt:182
#: ../../ref/class-based-views/mixins-single-object.txt:75
# 8d322a46b1ca4f0fa3f7efbdeb669196
# 7b096aa2e8064ae6a085c6ccf54a3e4d
msgid "Return the context variable name that will be used to contain the data that this view is manipulating. If :attr:`~SingleObjectMixin.context_object_name` is not set, the context name will be constructed from the ``object_name`` of the model that the queryset is composed from. For example, the model ``Article`` would have context object named ``'article'``."
msgstr ""

#: ../../ref/class-based-views.txt:191
#: ../../ref/class-based-views.txt:362
#: ../../ref/class-based-views/mixins-multiple-object.txt:142
#: ../../ref/class-based-views/mixins-single-object.txt:84
# 7749a5e58a5041758509672984ccf8cb
# d11520944b8e4788921fb6ffe7587421
# 08b8e2c7cf0e4df1804db6dc78c13b51
# 60da9c4cbaa943c78b52dcc512394b87
msgid "Returns context data for displaying the list of objects."
msgstr ""

#: ../../ref/class-based-views.txt:193
#: ../../ref/class-based-views.txt:364
#: ../../ref/class-based-views.txt:477
#: ../../ref/class-based-views.txt:907
#: ../../ref/class-based-views.txt:1155
#: ../../ref/class-based-views.txt:1194
#: ../../ref/class-based-views.txt:1240
#: ../../ref/class-based-views.txt:1276
#: ../../ref/class-based-views/base.txt:143
#: ../../ref/class-based-views/generic-date-based.txt:113
#: ../../ref/class-based-views/generic-date-based.txt:217
#: ../../ref/class-based-views/generic-date-based.txt:318
#: ../../ref/class-based-views/generic-date-based.txt:424
#: ../../ref/class-based-views/generic-date-based.txt:587
#: ../../ref/class-based-views/mixins-editing.txt:85
#: ../../ref/class-based-views/mixins-multiple-object.txt:144
#: ../../ref/class-based-views/mixins-single-object.txt:86
# 49600f0f840d4588a1724eb361d5abb0
# 79015bc712214820bd3a29c75717e496
# fcffe1d5ef5d48bab0341367de1ee8a9
# c8037ecd81d14618aa5ebc6136e75347
# 2ade16c35e914506aee0c803d396d935
# 438050d1b88d40f2b5ef03259d85f52c
# c9915d22302d4b9a80f13edb81b3c587
# f49363e6d49245878867b50d8f270a3c
# 4f7e9d79849f43aba49354a1f2700222
# 0471090bf5ba4107a2458a6014fdbd2b
# 16573acd05a940d8a019a8463f4f35f2
# a75664bb37c043f0be61873047ea5f6b
# 50d9485950d348f2acb7733984cf0931
# 774e115ff0044b7b9f67f1bc681209e5
# 16bcba25b53a48a0b8c5b8a44cc429b2
# 31fecbfab12f4b51855bc2ccb3ff61f5
# 60db0e1b82fc439d9569f21fa8a7c95f
msgid "**Context**"
msgstr ""

#: ../../ref/class-based-views.txt:195
#: ../../ref/class-based-views/mixins-single-object.txt:88
# 960845909f584c1594e9d40b9ed40599
# 3a00b07be0c94d2f8ed76c323af63edc
msgid "``object``: The object that this view is displaying. If ``context_object_name`` is specified, that variable will also be set in the context, with the same value as ``object``."
msgstr ""

#: ../../ref/class-based-views.txt:200
#: ../../ref/class-based-views/mixins-single-object.txt:93
# 5770dab64cf74423acb5ae53298814b7
# 0861b665e027494292b51babf2538ca5
msgid "SingleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views.txt:204
#: ../../ref/class-based-views/mixins-single-object.txt:97
# b7bf2045d9484a65ad4a2b0e0f3bcb10
# 808ceb4e82ac4feba620bf035459a843
msgid "A mixin class that performs template-based response rendering for views that operate upon a single object instance. Requires that the view it is mixed with provides ``self.object``, the object instance that the view is operating on. ``self.object`` will usually be, but is not required to be, an instance of a Django model. It may be ``None`` if the view is in the process of constructing a new instance."
msgstr ""

#: ../../ref/class-based-views.txt:211
#: ../../ref/class-based-views.txt:393
#: ../../ref/class-based-views/mixins-editing.txt:171
#: ../../ref/class-based-views/mixins-multiple-object.txt:42
#: ../../ref/class-based-views/mixins-multiple-object.txt:175
#: ../../ref/class-based-views/mixins-single-object.txt:104
# b4528e690a454a80811deca7754f2b71
# 6e2d5d44613545758846cc771f701b11
# 190f4666fd6943e1a99da5c3f79bc123
# 29867f03f31c4d168bc7f4898597473d
# b5b04947ec114e4e927a0deb9da27189
# e6b713fff33e4fd3aba106150ab92bbf
msgid "**Extends**"
msgstr ""

#: ../../ref/class-based-views.txt:213
#: ../../ref/class-based-views.txt:395
#: ../../ref/class-based-views/mixins-multiple-object.txt:177
#: ../../ref/class-based-views/mixins-single-object.txt:106
# 57e4099a38664955977b21a9bb728718
# ba81b21ba0e047b28e68b3d9e28c3fbf
# 01e77622dfd94b718e366833b7d3f66f
# 95ac73f8c4b244aebb7e2cb08fb4e7e6
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:217
# 83eac2d5a29c4368b1c7d61e3a923718
msgid "The field on the current object instance that can be used to determine the name of a candidate template. If either ``template_name_field`` or the value of the ``template_name_field`` on the current object instance is ``None``, the object will not be interrogated for a candidate template name."
msgstr ""

#: ../../ref/class-based-views.txt:225
#: ../../ref/class-based-views/mixins-single-object.txt:120
# 7ec8703734174638b8b0458c5c1bd88f
# 0cf7c6ace1e6412a8f1b54476c663ed5
msgid "The suffix to append to the auto-generated candidate template name. Default suffix is ``_detail``."
msgstr ""

#: ../../ref/class-based-views.txt:230
#: ../../ref/class-based-views.txt:404
#: ../../ref/class-based-views/mixins-multiple-object.txt:188
#: ../../ref/class-based-views/mixins-single-object.txt:125
# 0c499e933918438892c42493a07082ff
# 219807715d324792819e99e6f519bf28
# cc674d54fa4941afb25aadebd06dd05b
# 3a88e2e415d3451eb50d12801eb86bdf
msgid "Returns a list of candidate template names. Returns the following list:"
msgstr ""

#: ../../ref/class-based-views.txt:232
#: ../../ref/class-based-views.txt:406
#: ../../ref/class-based-views/mixins-multiple-object.txt:190
#: ../../ref/class-based-views/mixins-single-object.txt:127
# 69e3f22750a14d78864ba4ad84febaf4
# 6774fb683af64a5590daeb901dfabdad
# 0748bbff49ab4fce816e62bad07b7238
# 1a28b8121cb44dc8812e527a57a6ee83
msgid "the value of ``template_name`` on the view (if provided)"
msgstr ""

#: ../../ref/class-based-views.txt:233
#: ../../ref/class-based-views/mixins-single-object.txt:128
# 04407b9b523948468dd3b91b2e115c58
# a7d235e9b4f54cf9b53b5c22c1a95559
msgid "the contents of the ``template_name_field`` field on the object instance that the view is operating upon (if available)"
msgstr ""

#: ../../ref/class-based-views.txt:235
#: ../../ref/class-based-views.txt:407
#: ../../ref/class-based-views/mixins-multiple-object.txt:191
#: ../../ref/class-based-views/mixins-single-object.txt:130
# 8b1f88ed8f984189b026df8c10d20722
# 09177f09265e4d13beb05ff17ceff8a8
# 9f4b7bb1cc684c39b8fab3d3b0c17d5f
# 8e117d869c6f4c4d9efb615ec7d40c57
msgid "``<app_label>/<object_name><template_name_suffix>.html``"
msgstr ""

#: ../../ref/class-based-views.txt:238
#: ../../ref/class-based-views/mixins-multiple-object.txt:3
# 61ef3748643847bdaf86ef5e6f15077a
# 2abfd109f2c84ae1bbd4b8cb11eb7e4a
msgid "Multiple object mixins"
msgstr ""

#: ../../ref/class-based-views.txt:243
#: ../../ref/class-based-views/mixins-multiple-object.txt:6
# 4773a054ca2b482aa255083486a2f79e
# 1311dedbc8944886a1038480a82e1dae
msgid "MultipleObjectMixin"
msgstr ""

#: ../../ref/class-based-views.txt:246
#: ../../ref/class-based-views/mixins-multiple-object.txt:10
# b9410ae6036f4314b66601d6534e00d5
# b32de222a14e4f69a4823438ff0f61b8
msgid "A mixin that can be used to display a list of objects."
msgstr ""

#: ../../ref/class-based-views.txt:248
#: ../../ref/class-based-views/mixins-multiple-object.txt:12
# 82695416891b410a8f64a95ddf8b80bf
# 93b43e530fc8471e866d514fb88aa8bf
msgid "If ``paginate_by`` is specified, Django will paginate the results returned by this. You can specify the page number in the URL in one of two ways:"
msgstr ""

#: ../../ref/class-based-views.txt:251
#: ../../ref/class-based-views/mixins-multiple-object.txt:15
#: ../../ref/generic-views.txt:771
# 3503c06c5fd7419c9f4c9680abd5e8e2
# ac048465f7284903afbb54fd8a899c99
# ee662aa006c34077b17de8628fd98de7
msgid "Use the ``page`` parameter in the URLconf. For example, this is what your URLconf might look like::"
msgstr ""

#: ../../ref/class-based-views.txt:256
#: ../../ref/class-based-views/mixins-multiple-object.txt:20
#: ../../ref/generic-views.txt:776
# 634761b3eb564f7e8ead5d52a5bd1506
# 12c02804bd79429885f319d21838def9
# ba606cfeee264c4ea244750cbfd61e31
msgid "Pass the page number via the ``page`` query-string parameter. For example, a URL would look like this::"
msgstr ""

#: ../../ref/class-based-views.txt:261
#: ../../ref/class-based-views/mixins-multiple-object.txt:25
#: ../../ref/generic-views.txt:785
# 24d1440dde3542cbad31110e0091072a
# c13ce94810014dcc9c5b0b0a7b710731
# 80f053772c04432c9a3417a544c77313
msgid "These values and lists are 1-based, not 0-based, so the first page would be represented as page ``1``."
msgstr ""

#: ../../ref/class-based-views.txt:264
#: ../../ref/class-based-views/mixins-multiple-object.txt:28
#: ../../ref/generic-views.txt:788
# 169fdb382ffa43458cd439b4bf69e5b3
# 9a761b2885744febb0765644270a0242
# 235864b373974a3db6fe9b625d534b88
msgid "For more on pagination, read the :doc:`pagination documentation </topics/pagination>`."
msgstr ""

#: ../../ref/class-based-views.txt:267
#: ../../ref/class-based-views/mixins-multiple-object.txt:31
#: ../../ref/generic-views.txt:791
# e8e4165fb3114dcd985c5b5ac5bcfc5e
# 909468da98cd4b92874e0847f7fdc3e9
# f583795053eb4a01b5fc2c691c0cc7fa
msgid "As a special case, you are also permitted to use ``last`` as a value for ``page``::"
msgstr ""

#: ../../ref/class-based-views.txt:272
#: ../../ref/class-based-views/mixins-multiple-object.txt:36
#: ../../ref/generic-views.txt:796
# f1ed976c634146969c9e16d0c3c3f018
# 8f447ddfbfa84fefb9d09a49ab8ab507
# 22c8d8fd7f5f4d0ea382305b5e910a92
msgid "This allows you to access the final page of results without first having to determine how many pages there are."
msgstr ""

#: ../../ref/class-based-views.txt:275
#: ../../ref/class-based-views/mixins-multiple-object.txt:39
#: ../../ref/generic-views.txt:799
# 4c083f38b86f402c8ec6ae65a28202e0
# 638f5f9477ae4e0d8d1ea81ce1835b0c
# 7181c80262204eb59fe01626d389ec42
msgid "Note that ``page`` *must* be either a valid page number or the value ``last``; any other value for ``page`` will result in a 404 error."
msgstr ""

#: ../../ref/class-based-views.txt:280
#: ../../ref/class-based-views/mixins-multiple-object.txt:50
# ab7f3c8710a64c1e9d66f9bf12dea737
# 23c67b6c8b7844fbac6ef024664b2efd
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:293
#: ../../ref/class-based-views/mixins-multiple-object.txt:63
# 0103cf2fa33f41c081cd341897192132
# afae4c1a6ba14b2b9312fba0bb308f5c
msgid "A ``QuerySet`` that represents the objects. If provided, the value of :attr:`MultipleObjectMixin.queryset` supersedes the value provided for :attr:`MultipleObjectMixin.model`."
msgstr ""

#: ../../ref/class-based-views.txt:299
# 573643f1e64f4a7c87534ed7b1735135
msgid "An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with :attr:`MultipleObjectMixin.paginate_by` objects per page. The view will expect either a ``page`` query string parameter (via ``GET``) or a ``page`` variable specified in the URLconf."
msgstr ""

#: ../../ref/class-based-views.txt:307
#: ../../ref/class-based-views/mixins-multiple-object.txt:86
# 274fd2331b054c62a2757ccf4fbe4e4b
# d7a6a0071ee54ffbb3a67ab1f6a780b1
msgid "The paginator class to be used for pagination. By default, :class:`django.core.paginator.Paginator` is used. If the custom paginator class doesn't have the same constructor interface as :class:`django.core.paginator.Paginator`, you will also need to provide an implementation for :meth:`MultipleObjectMixin.get_paginator`."
msgstr ""

#: ../../ref/class-based-views.txt:319
# add68f81856d4f1d950b8af20f2f77ed
msgid "Returns the queryset that represents the data this view will display."
msgstr ""

#: ../../ref/class-based-views.txt:323
#: ../../ref/class-based-views/mixins-multiple-object.txt:103
# 6eaa75c849dd46db91420abce6747100
# d182c1d26eeb4c55b78926b2a389a942
msgid "Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, ``is_paginated``)."
msgstr ""

#: ../../ref/class-based-views.txt:326
#: ../../ref/class-based-views/mixins-multiple-object.txt:106
# a89925be4c3d4663b491d286e699e419
# 601b9c91cb5e4e299ff6626239f07e14
msgid "Constructed by paginating ``queryset`` into pages of size ``page_size``. If the request contains a ``page`` argument, either as a captured URL argument or as a GET argument, ``object_list`` will correspond to the objects from that page."
msgstr ""

#: ../../ref/class-based-views.txt:333
#: ../../ref/class-based-views/mixins-multiple-object.txt:113
# 5115e9dd9a0040a7b7dad4f97ba46113
# 674f8d86d6f34ac489a30b77873cc54f
msgid "Returns the number of items to paginate by, or ``None`` for no pagination. By default this simply returns the value of :attr:`MultipleObjectMixin.paginate_by`."
msgstr ""

#: ../../ref/class-based-views.txt:339
#: ../../ref/class-based-views/mixins-multiple-object.txt:119
# 0d2219a81abc4d98a1ef9e6c1ec481a4
# 06c861db12564526a2cf45edec47958c
msgid "Returns an instance of the paginator to use for this view. By default, instantiates an instance of :attr:`paginator_class`."
msgstr ""

#: ../../ref/class-based-views.txt:344
#: ../../ref/class-based-views/mixins-multiple-object.txt:124
# b041fd3602c0498ca6094d513cfe4430
# 3c2b00fbfbd345bfa00bc0b4573d20ad
msgid "Return a boolean specifying whether to display the page if no objects are available. If this method returns ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:351
#: ../../ref/class-based-views/mixins-multiple-object.txt:131
# dba8f4e9886446b1a172689c530c1556
# aaa5dad48c7d4b148432a30877a84f5d
msgid "Return the context variable name that will be used to contain the list of data that this view is manipulating. If ``object_list`` is a queryset of Django objects and :attr:`~MultipleObjectMixin.context_object_name` is not set, the context name will be the ``object_name`` of the model that the queryset is composed from, with postfix ``'_list'`` appended. For example, the model ``Article`` would have a context object named ``article_list``."
msgstr ""

#: ../../ref/class-based-views.txt:366
#: ../../ref/class-based-views/mixins-multiple-object.txt:146
# dfd821b22db846f386b157371e3d23f1
# 089bed09681244169743d40fbc6b755f
msgid "``object_list``: The list of objects that this view is displaying. If ``context_object_name`` is specified, that variable will also be set in the context, with the same value as ``object_list``."
msgstr ""

#: ../../ref/class-based-views.txt:370
#: ../../ref/class-based-views/mixins-multiple-object.txt:150
# 464ef3e411f24a96ab1ef80777ba0645
# 5d19e47c1d0149a49eab466323376d44
msgid "``is_paginated``: A boolean representing whether the results are paginated. Specifically, this is set to ``False`` if no page size has been specified, or if the available objects do not span multiple pages."
msgstr ""

#: ../../ref/class-based-views.txt:375
#: ../../ref/class-based-views/mixins-multiple-object.txt:155
# 14ec515fc35245c582927776b7fea4ff
# 1f575cd25abb4254979935eb9a8edd3f
msgid "``paginator``: An instance of :class:`django.core.paginator.Paginator`. If the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:379
#: ../../ref/class-based-views/mixins-multiple-object.txt:159
# 4aadd811145c457799c0017841456d04
# d9b93add5d394f5ca94e16dfe9fc2c95
msgid "``page_obj``: An instance of :class:`django.core.paginator.Page`. If the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:384
#: ../../ref/class-based-views/mixins-multiple-object.txt:165
# 9c49d626a70b4ecba78b6f61ba17c6db
# c1f744c58d9b43b19d6b44856bec3a6d
msgid "MultipleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views.txt:387
#: ../../ref/class-based-views/mixins-multiple-object.txt:169
# e15378f8690c4dcab22b35b1fc6041f9
# acd0daea42d34bca993c3964e16440c8
msgid "A mixin class that performs template-based response rendering for views that operate upon a list of object instances. Requires that the view it is mixed with provides ``self.object_list``, the list of object instances that the view is operating on. ``self.object_list`` may be, but is not required to be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../ref/class-based-views.txt:399
#: ../../ref/class-based-views/mixins-multiple-object.txt:183
# 9a20c927724c4c01a50f1e8d51295b7b
# 12a7e126a2fa429c965c5100e99dc8d5
msgid "The suffix to append to the auto-generated candidate template name. Default suffix is ``_list``."
msgstr ""

#: ../../ref/class-based-views.txt:410
#: ../../ref/class-based-views/mixins-editing.txt:3
# 48833cb644b6494290a1bb1e3d094fff
# 2219fa70386249709050be4f4df22ff6
msgid "Editing mixins"
msgstr ""

#: ../../ref/class-based-views.txt:415
#: ../../ref/class-based-views/mixins-editing.txt:18
# 972cd0aa62fd4e768e16ffb8f93e5df6
# 224994da3db7466ea9aeda5ad6e58b15
msgid "FormMixin"
msgstr ""

#: ../../ref/class-based-views.txt:418
#: ../../ref/class-based-views/mixins-editing.txt:22
# 733aec73f2924b1f9a8f1fd045d9e615
# bd269a08c9004088b0176f44559f6e19
msgid "A mixin class that provides facilities for creating and displaying forms."
msgstr ""

#: ../../ref/class-based-views.txt:422
#: ../../ref/class-based-views/mixins-editing.txt:28
# 5148ec99f0544829a0ccce68b9d59344
# a0b050e31c1c436b9aec64103d207564
msgid "A dictionary containing initial data for the form."
msgstr ""

#: ../../ref/class-based-views.txt:426
#: ../../ref/class-based-views/mixins-editing.txt:32
# 8233c1751d9e4f07973bb74e91e1917e
# 687eb00e6b6348d3b4d550480a3029b8
msgid "The form class to instantiate."
msgstr ""

#: ../../ref/class-based-views.txt:430
#: ../../ref/class-based-views.txt:508
#: ../../ref/class-based-views/mixins-editing.txt:36
#: ../../ref/class-based-views/mixins-editing.txt:120
# 4e5e3a64546f4802a3a79e06e4e18cfb
# db2156917e0940868f3ccfbd04b2f048
# 2acc4c47501b4346ab5703fdb716fd53
# ed0b42dc170343e2b0b01f36f2a8fc80
msgid "The URL to redirect to when the form is successfully processed."
msgstr ""

#: ../../ref/class-based-views.txt:434
# 163fa5a8341e48688da97547f15b7fe2
msgid "Retrieve initial data for the form. By default, returns a copy of :attr:`.initial`."
msgstr ""

#: ../../ref/class-based-views.txt:439
# ae220054de5841a5806c1d037711bd44
msgid "In Django 1.3, this method was returning the :attr:`initial` class variable itself."
msgstr ""

#: ../../ref/class-based-views.txt:444
#: ../../ref/class-based-views/mixins-editing.txt:50
# 3cd260143e494b949a88f169936e59d0
# 8cb61e0111fc46d09ab19f4db3c61767
msgid "Retrieve the form class to instantiate. By default :attr:`.form_class`."
msgstr ""

#: ../../ref/class-based-views.txt:449
# a2e08ac757b9462ea9bd3d2e76653bab
msgid "Instantiate an instance of ``form_class`` using :meth:`.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views.txt:454
#: ../../ref/class-based-views/mixins-editing.txt:60
# 283f8628920c4967bfb1b48e26e607ba
# 7245d12571d64e69abc152bdc50012fa
msgid "Build the keyword arguments required to instantiate the form."
msgstr ""

#: ../../ref/class-based-views.txt:456
#: ../../ref/class-based-views/mixins-editing.txt:62
# 91d35a43699a4151a4aa553b1d887bab
# 6c13dc6e1c484b4ca8f741001fc93cd1
msgid "The ``initial`` argument is set to :meth:`.get_initial`. If the request is a ``POST`` or ``PUT``, the request data (``request.POST`` and ``request.FILES``) will also be provided."
msgstr ""

#: ../../ref/class-based-views.txt:462
# 95f8b0f59845438594883dead5dbc88b
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`.success_url` by default."
msgstr ""

#: ../../ref/class-based-views.txt:467
# 01fe797b4b7845beb4be297399383ba3
msgid "Redirects to :meth:`.get_success_url`."
msgstr ""

#: ../../ref/class-based-views.txt:471
#: ../../ref/class-based-views.txt:542
#: ../../ref/class-based-views/mixins-editing.txt:79
#: ../../ref/class-based-views/mixins-editing.txt:155
# dafe4d49abdb46d3a69eee5412f02ef4
# d8bb91566d6541dd822e2cbb2b5cceea
# 32128245e26b4f108f1d967b5def6972
# a88d4caad12c4375bd116feb67648064
msgid "Renders a response, providing the invalid form as context."
msgstr ""

#: ../../ref/class-based-views.txt:475
#: ../../ref/class-based-views/mixins-editing.txt:83
# a520a9aa3dbd49fd87390b354b6ff9aa
# 8c22a75bcc4a4fc8929a15cbeb70d84a
msgid "Populates a context containing the contents of ``kwargs``."
msgstr ""

#: ../../ref/class-based-views.txt:479
#: ../../ref/class-based-views/mixins-editing.txt:87
# 83287fd955364f8fb5da7067fb36c412
# b0c618b755b4407d9a1884346defee2a
msgid "``form``: The form instance that was generated for the view."
msgstr ""

#: ../../ref/class-based-views.txt:483
# bd3f215ce94343b9801e03c477fe611c
msgid "Views mixing :class:`FormMixin` must provide an implementation of :meth:`.form_valid` and :meth:`.form_invalid`."
msgstr ""

#: ../../ref/class-based-views.txt:488
#: ../../ref/class-based-views/mixins-editing.txt:97
# 38add308b51b4b5cb9fa434a69c3b267
# 8706deda5fb44587b5075470d7b8b5c8
msgid "ModelFormMixin"
msgstr ""

#: ../../ref/class-based-views.txt:491
#: ../../ref/class-based-views/mixins-editing.txt:101
# 92c7763cbd33487ab3065a76ca9002cd
# 4aa9a4e1408a458c85fd5ecbba4c8870
msgid "A form mixin that works on ModelForms, rather than a standalone form."
msgstr ""

#: ../../ref/class-based-views.txt:493
#: ../../ref/class-based-views/mixins-editing.txt:103
# 10255c70d89441daa3fbfc3c2456fb71
# 92411db309bb4349894d4cb4b4f9fa5e
msgid "Since this is a subclass of :class:`~django.views.generic.detail.SingleObjectMixin`, instances of this mixin have access to the :attr:`~SingleObjectMixin.model` and :attr:`~SingleObjectMixin.queryset` attributes, describing the type of object that the ModelForm is manipulating. The view also provides ``self.object``, the instance being manipulated. If the instance is being created, ``self.object`` will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:501
#: ../../ref/class-based-views.txt:788
#: ../../ref/class-based-views.txt:894
#: ../../ref/class-based-views.txt:977
#: ../../ref/class-based-views.txt:1003
#: ../../ref/class-based-views.txt:1026
#: ../../ref/class-based-views.txt:1043
#: ../../ref/class-based-views.txt:1062
#: ../../ref/class-based-views.txt:1081
#: ../../ref/class-based-views.txt:1113
#: ../../ref/class-based-views.txt:1137
#: ../../ref/class-based-views.txt:1187
#: ../../ref/class-based-views.txt:1233
#: ../../ref/class-based-views.txt:1268
#: ../../ref/class-based-views.txt:1317
#: ../../ref/class-based-views.txt:1336
#: ../../ref/class-based-views/mixins-date-based.txt:277
#: ../../ref/class-based-views/mixins-editing.txt:111
# 1ca9db510d26489fabc03179a34de69f
# 14f5b166486a45699ff99e00bc71f7e6
# a4ad9683338f45ed9885ec1464ce417e
# 75f08d6e8ed641d58b87d94aef59b33e
# 005e83b5050548d88ad0cffe51367c57
# 6760b9443f744ef1b0127a9812ca4958
# 73f9e4a3b8c74c9d880bc6821cb0f66b
# 230865108a424414904624f60035379e
# 6e9e4dad48944d349521cbe3d2d75ea8
# 1d07d218857249e1aca727953cefa2bf
# 9041679e5c9045cd80fee2ba5448b0c4
# 80364fcfc4da40bf833653f30ed99668
# 9198c0469dcc4922870a4664b373d62a
# c6623a96657e42118b0a164ca6ecf6c9
# 300e5a4474f64cf88eea0e7342fb114e
# c9e4a06eeec24c029c8418f7143ed4ed
# d082ee08660848128f6b560da1e8e1fb
# f2b65b60f7f14fa8ae22f72172af358c
msgid "**Mixins**"
msgstr ""

#: ../../ref/class-based-views.txt:503
#: ../../ref/class-based-views.txt:1028
#: ../../ref/class-based-views/generic-editing.txt:42
#: ../../ref/class-based-views/generic-editing.txt:91
#: ../../ref/class-based-views/generic-editing.txt:133
#: ../../ref/class-based-views/mixins-editing.txt:7
#: ../../ref/class-based-views/mixins-editing.txt:113
# 7cd4fbb99f5a44edb2cd8e3b7b99e9c8
# 80d443a053ac41fb896f8cc22a2223f4
# 17e7abe6de0344dca9416ffc8e92c7d7
# 76c83818eef1466783757b856dedc13b
# 592fec7342b0430e837c0c3bd9d1f3e7
# c7e2e4dbb0eb4f078a72eeb348feda98
# 6cd2cd1b989544e4909f1b3d304af312
msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:504
#: ../../ref/class-based-views.txt:979
#: ../../ref/class-based-views/generic-date-based.txt:584
#: ../../ref/class-based-views/generic-display.txt:23
#: ../../ref/class-based-views/generic-editing.txt:92
#: ../../ref/class-based-views/generic-editing.txt:134
#: ../../ref/class-based-views/generic-editing.txt:176
#: ../../ref/class-based-views/mixins-editing.txt:114
# 2e52369b47dc40648b275f45f3681b4a
# 4d33f28822ea411c910fe3eacf08b1fc
# d9bbf5109c424cfc9dc62a5c3b4c413a
# d339d43eff6147668d0d33eb0530342a
# 53c080f697464f5fb3ffe8b592458dab
# 1d7636b9635f4322b543eb703419350e
# 4f931b31a9c64b7a9a728959db9d6af3
# 3b28ca3da41e492cb96b7462fd55bceb
msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:510
#: ../../ref/class-based-views/mixins-editing.txt:122
# 023ae7aaa8b74463b0a489ec9b495a8f
# 14c21c4bf4404bebb90f73e09004dcaf
msgid "``success_url`` may contain dictionary string formatting, which will be interpolated against the object's field attributes. For example, you could use ``success_url=\"/polls/%(slug)s/\"`` to redirect to a URL composed out of the ``slug`` field on a model."
msgstr ""

#: ../../ref/class-based-views.txt:517
#: ../../ref/class-based-views/mixins-editing.txt:129
# e4077dbe3a254c73acf819ce4b6ce1b5
# 9478b92795bd457895b315fb8a966b1d
msgid "Retrieve the form class to instantiate. If :attr:`FormMixin.form_class` is provided, that class will be used. Otherwise, a ModelForm will be instantiated using the model associated with the :attr:`~SingleObjectMixin.queryset`, or with the :attr:`~SingleObjectMixin.model`, depending on which attribute is provided."
msgstr ""

#: ../../ref/class-based-views.txt:526
#: ../../ref/class-based-views/mixins-editing.txt:138
# 45ce8f2542074633b2844f5e62a56196
# 25ab45dca5b9449fa7365e6e608609ea
msgid "Add the current instance (``self.object``) to the standard :meth:`FormMixin.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views.txt:531
# aecd07434f6f4731a3d71d26b7933bd4
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`FormMixin.success_url` if it is provided; otherwise, attempts to use the ``get_absolute_url()`` of the object."
msgstr ""

#: ../../ref/class-based-views.txt:537
# 41b8faa58f3646eca62f9de471939179
msgid "Saves the form instance, sets the current object for the view, and redirects to :meth:`.get_success_url`."
msgstr ""

#: ../../ref/class-based-views.txt:545
#: ../../ref/class-based-views/mixins-editing.txt:159
# afe465f9418f45e192548130d399dec6
# 3b9528a6dbc848b6bab1a11b8a18efe0
msgid "ProcessFormView"
msgstr ""

#: ../../ref/class-based-views.txt:548
#: ../../ref/class-based-views/mixins-editing.txt:163
# e3a2e5e2ab7944a5bb3f4a309bbeb334
# a88fb22c124e44ae96de1458bff1bbc4
msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr ""

#: ../../ref/class-based-views.txt:552
#: ../../ref/class-based-views/mixins-editing.txt:179
# 449e59b67bfb4169bb60099649b564c3
# 444f0b1ad2e14bf491b7d530b9717ad4
msgid "Constructs a form, then renders a response using a context that contains that form."
msgstr ""

#: ../../ref/class-based-views.txt:557
#: ../../ref/class-based-views/mixins-editing.txt:184
# 4ac219934853401a8dfff02b869d58f1
# 4f84b70f638248bf933fae0780def6cd
msgid "Constructs a form, checks the form for validity, and handles it accordingly."
msgstr ""

#: ../../ref/class-based-views.txt:560
#: ../../ref/class-based-views/mixins-editing.txt:187
# 4e7a3e5d5df24fbcb1e18660001a205d
# 1155232ca48740f78b61705fe3af5984
msgid "The PUT action is also handled, as an analog of POST."
msgstr ""

#: ../../ref/class-based-views.txt:563
# 82386231c9334cf1bf2da1ea1f11cc46
msgid "DeletionMixin"
msgstr ""

#: ../../ref/class-based-views.txt:566
#: ../../ref/class-based-views/mixins-editing.txt:191
# 38bc14f807a940b3a2d7c4629997565f
# c1356121008e4809ae12c90c8272f84c
msgid "Enables handling of the ``DELETE`` http action."
msgstr ""

#: ../../ref/class-based-views.txt:570
#: ../../ref/class-based-views/mixins-editing.txt:197
# dcc62c389a7d4a278189211bc31e5bbd
# 5468988864aa49a08d0bb39cdc1a37d6
msgid "The url to redirect to when the nominated object has been successfully deleted."
msgstr ""

#: ../../ref/class-based-views.txt:575
#: ../../ref/class-based-views/mixins-editing.txt:202
# b0b0945660204a61bab5e74fcfce0b8e
# c5bd425c7bc44258b8bd0ebd981a0d06
msgid "Returns the url to redirect to when the nominated object has been successfully deleted. Returns :attr:`~django.views.generic.edit.DeletionMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views.txt:581
#: ../../ref/class-based-views/mixins-date-based.txt:3
# 68cadb2bb72748e0b658e4af58cfa7aa
# 31f035c2fea54b2bafee138b6619bf24
msgid "Date-based mixins"
msgstr ""

#: ../../ref/class-based-views.txt:586
#: ../../ref/class-based-views/mixins-date-based.txt:8
# eecdffe4cadf4132b0904085035383ac
# 2252adf918da47b89e0b491039183446
msgid "YearMixin"
msgstr ""

#: ../../ref/class-based-views.txt:589
#: ../../ref/class-based-views/mixins-date-based.txt:12
# aae0167f54924da394cd60b514c360cf
# 6f062accd9264892bf6585b9adf78a5a
msgid "A mixin that can be used to retrieve and provide parsing information for a year component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:594
#: ../../ref/class-based-views/mixins-date-based.txt:19
# 235272838cbe478492a112659942d231
# 6821f48a616c41338d740be973b00bfe
msgid "The :func:`~time.strftime` format to use when parsing the year. By default, this is ``'%Y'``."
msgstr ""

#: ../../ref/class-based-views.txt:599
# 471c553239974326aa6507f67172f0d9
msgid "**Optional** The value for the year (as a string). By default, set to ``None``, which means the year will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:604
# bfc9d4cf97784400a278fcc5c4aedc94
msgid "Returns the :func:`~time.strftime` format to use when parsing the year. Returns :attr:`YearMixin.year_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:609
# 0211fb02c5e84f27922002f3b13b0592
msgid "Returns the year for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:612
#: ../../ref/class-based-views/mixins-date-based.txt:37
# 244d992a375b456db7c8e2e8b235ba11
# 69d6bdfefcaf41cbabeed23ccc20f71e
msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:613
# 6327f7cc5eb84aeead2537608d9294fc
msgid "The value of the `year` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:614
#: ../../ref/class-based-views/mixins-date-based.txt:39
# 38cdb943c4a14d0a9ff2b7eedec36971
# 4d8b0b4229594f4da93b5f2baab8b8fe
msgid "The value of the `year` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:616
#: ../../ref/class-based-views/mixins-date-based.txt:41
# e04f6eba2c844fd39d9d2fdc81c24616
# 6405c72c39b643c9bf596442dd41407d
msgid "Raises a 404 if no valid year specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:619
#: ../../ref/class-based-views/mixins-date-based.txt:60
# 0687df52c9564c91a75643edc84f3956
# 9f000dc49d5a4029988f550c4b9f9b82
msgid "MonthMixin"
msgstr ""

#: ../../ref/class-based-views.txt:622
#: ../../ref/class-based-views/mixins-date-based.txt:64
# 1c9aeaa20d814dcab04d25ca139308ec
# 9f38c0e1ade94b60812711d3e023610d
msgid "A mixin that can be used to retrieve and provide parsing information for a month component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:627
#: ../../ref/class-based-views/mixins-date-based.txt:71
# cc0fededfc20477186c9c9b7cd9cfe82
# 2981d1ec190044ca9376d88064c79c52
msgid "The :func:`~time.strftime` format to use when parsing the month. By default, this is ``'%b'``."
msgstr ""

#: ../../ref/class-based-views.txt:632
# cbc0c03376db489eb3781c67cef2bacb
msgid "**Optional** The value for the month (as a string). By default, set to ``None``, which means the month will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:637
# 738c9df41fb2471f94b65167ac1e48a1
msgid "Returns the :func:`~time.strftime` format to use when parsing the month. Returns :attr:`MonthMixin.month_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:642
# 330dc71d164949ed8562d6f93b428d26
msgid "Returns the month for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:645
#: ../../ref/class-based-views/mixins-date-based.txt:89
# c5a055d41ca242b6a968365919e1fb64
# 5888204cd93e463db938a80a52879025
msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:646
# b147aa525d7a44bf8d47ebcabd113bb2
msgid "The value of the `month` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:647
#: ../../ref/class-based-views/mixins-date-based.txt:91
# 415ac7e7ad51454d8e019215e10a22f8
# 962baa703865494e8355802175df20b9
msgid "The value of the `month` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:649
#: ../../ref/class-based-views/mixins-date-based.txt:93
# 2a6800fb9c404db4b546c9d8801401b3
# adbffb929ab844e3aca127686aace1eb
msgid "Raises a 404 if no valid month specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:653
# 0efe93a0372c4d82995f1afe046234ae
msgid "Returns a date object containing the first day of the month after the date provided. Returns ``None`` if mixed with a view that sets ``allow_future = False``, and the next month is in the future. If ``allow_empty = False``, returns the next month that contains data."
msgstr ""

#: ../../ref/class-based-views.txt:660
# a85d001cce7b49a3b7f41789406d0203
msgid "Returns a date object containing the first day of the month before the date provided. If ``allow_empty = False``, returns the previous month that contained data."
msgstr ""

#: ../../ref/class-based-views.txt:665
#: ../../ref/class-based-views/mixins-date-based.txt:112
# 41d2e2745f3c41babd6b55add89ab419
# 9fd18750c2a94dedb910b9c5dbfad65f
msgid "DayMixin"
msgstr ""

#: ../../ref/class-based-views.txt:668
#: ../../ref/class-based-views/mixins-date-based.txt:116
# 3080e401d08b4e1db6e3d0bac0cea8ab
# 3cd7027db01e43799f2410a31b29dd31
msgid "A mixin that can be used to retrieve and provide parsing information for a day component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:673
#: ../../ref/class-based-views/mixins-date-based.txt:123
# 95bda580a0e342768807e5613bc699e7
# 05ff8dbce0af47cfbb53ad0887b5a477
msgid "The :func:`~time.strftime` format to use when parsing the day. By default, this is ``'%d'``."
msgstr ""

#: ../../ref/class-based-views.txt:678
# 71aa7e1188c446b0b92efceb132ded3a
msgid "**Optional** The value for the day (as a string). By default, set to ``None``, which means the day will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:683
# b700f38ddf1d4a659965d23b7c34ef52
msgid "Returns the :func:`~time.strftime` format to use when parsing the day. Returns :attr:`DayMixin.day_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:688
# 12aed154fa3a4e6d88168bfe1b515528
msgid "Returns the day for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:691
#: ../../ref/class-based-views/mixins-date-based.txt:141
# 094ffed83311452593347eb8ba7bb655
# 6071510cb9c7449d89aed1739298fd4a
msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:692
# 47a6442ea4c7452db9d38e9586d51876
msgid "The value of the `day` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:693
#: ../../ref/class-based-views/mixins-date-based.txt:143
# ea4b9e5595da4febb1c91f43ef2d4409
# 81e72ad20ba6433b9b01d6a90f17dc04
msgid "The value of the `day` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:695
#: ../../ref/class-based-views/mixins-date-based.txt:145
# 3145ed60c9db4fc5ac21993288e32044
# e8c2937eea134f2aa5755ce3d54fed26
msgid "Raises a 404 if no valid day specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:699
# af5adece8149488a8a49ebcc5577eba0
msgid "Returns a date object containing the next day after the date provided. Returns ``None`` if mixed with a view that sets ``allow_future = False``, and the next day is in the future. If ``allow_empty = False``, returns the next day that contains data."
msgstr ""

#: ../../ref/class-based-views.txt:706
# bf949e40d71a483da232c3053f31e769
msgid "Returns a date object containing the previous day. If ``allow_empty = False``, returns the previous day that contained data."
msgstr ""

#: ../../ref/class-based-views.txt:710
#: ../../ref/class-based-views/mixins-date-based.txt:164
# 17d6bd12a8fd4ce49aec72fc366008fc
# 76b1bcfdbf904f24a3173bbf7a9cd894
msgid "WeekMixin"
msgstr ""

#: ../../ref/class-based-views.txt:713
#: ../../ref/class-based-views/mixins-date-based.txt:168
# bedaeb231fcb49548dd529faa435a932
# 807aa8b6ad874b32a61a18e2eef53dcb
msgid "A mixin that can be used to retrieve and provide parsing information for a week component of a date."
msgstr ""

#: ../../ref/class-based-views.txt:718
# 311cbe80a3764077b6ed9660ecad1339
msgid "The :func:`~time.strftime` format to use when parsing the week. By default, this is ``'%U'``."
msgstr ""

#: ../../ref/class-based-views.txt:723
# 09aa1311f323454e819a8e932b62a550
msgid "**Optional** The value for the week (as a string). By default, set to ``None``, which means the week will be determined using other means."
msgstr ""

#: ../../ref/class-based-views.txt:728
# 48a0ee2799164130b0af1be51eb8e724
msgid "Returns the :func:`~time.strftime` format to use when parsing the week. Returns :attr:`WeekMixin.week_format` by default."
msgstr ""

#: ../../ref/class-based-views.txt:733
# 816583a49f1f43dbbb5c58aa5187c689
msgid "Returns the week for which this view will display data. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views.txt:736
#: ../../ref/class-based-views/mixins-date-based.txt:194
# 44950b17725e424f814b2db29334539d
# 57ae71235e8049ac8dadc84fe0bd6110
msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ""

#: ../../ref/class-based-views.txt:737
#: ../../ref/class-based-views/mixins-date-based.txt:195
# c7c83e8c59694ae3964f959d65dcbd4e
# f3d267ac9cf745419ac30eb9b5a00195
msgid "The value of the `week` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views.txt:738
#: ../../ref/class-based-views/mixins-date-based.txt:196
# 5f1415c66af24626b3739fabbca2ca49
# 7abea4f6a04346ad89d6d28545c692f2
msgid "The value of the `week` GET query argument."
msgstr ""

#: ../../ref/class-based-views.txt:740
#: ../../ref/class-based-views/mixins-date-based.txt:198
# 5ea4f9a9816b4e48ba88997caeaa0849
# 0a3e597f7c844e06b5dd02ad3ceaeaed
msgid "Raises a 404 if no valid week specification can be found."
msgstr ""

#: ../../ref/class-based-views.txt:744
#: ../../ref/class-based-views/mixins-date-based.txt:217
# ebe9dd4d08574c80acd05425b3fb2a22
# f5f3a462a59c4666ab5640aa54c0c5fa
msgid "DateMixin"
msgstr ""

#: ../../ref/class-based-views.txt:747
#: ../../ref/class-based-views/mixins-date-based.txt:221
# bfb9c85093cb4474829e144c36858164
# 55c8b3250f764c75830484a563fbea47
msgid "A mixin class providing common behavior for all date-based views."
msgstr ""

#: ../../ref/class-based-views.txt:751
# db58524aac0d4a599b2454fee383c80b
msgid "The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the date-based archive should use to determine the objects on the page."
msgstr ""

#: ../../ref/class-based-views.txt:757
#: ../../ref/class-based-views/mixins-date-based.txt:245
# e7fe5942c3f24d328a4a1de2fd631997
# e7441c4b5f7840589672827727e21d37
msgid "A boolean specifying whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:764
# 4a9f9c3e351f46bbb5c9ce0c34399335
msgid "Returns the name of the field that contains the date data that this view will operate on. Returns :attr:`DateMixin.date_field` by default."
msgstr ""

#: ../../ref/class-based-views.txt:769
# 889b2406cc26409bb0c53295e756a180
msgid "Determine whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. Returns :attr:`DateMixin.allow_future` by default."
msgstr ""

#: ../../ref/class-based-views.txt:775
#: ../../ref/class-based-views/mixins-date-based.txt:263
# f635e2c47de34c738651f153b55e4f86
# 763e32357a8c48e6adae2fc721679eab
msgid "BaseDateListView"
msgstr ""

#: ../../ref/class-based-views.txt:778
#: ../../ref/class-based-views/mixins-date-based.txt:267
# c8e0f307ed674e35bff0a958374322e5
# c3d61a9a95ef44a7bbd8ad39f0c24f20
msgid "A base class that provides common behavior for all date-based views. There won't normally be a reason to instantiate :class:`~django.views.generic.dates.BaseDateListView`; instantiate one of the subclasses instead."
msgstr ""

#: ../../ref/class-based-views.txt:783
# 192711253cbc449f894b0626ad281a00
msgid "While this view (and it's subclasses) are executing, ``self.object_list`` will contain the list of objects that the view is operating upon, and ``self.date_list`` will contain the list of dates for which data is available."
msgstr ""

#: ../../ref/class-based-views.txt:790
#: ../../ref/class-based-views/mixins-date-based.txt:279
# 2e1f160757bf4fe5b81d30feb47595db
# f49f238c8b6b481faf32d3166ee34460
msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:791
#: ../../ref/class-based-views/mixins-date-based.txt:280
# f727a3cb8e22436ebb3631d3fa7b1099
# 6f3c1c89c8534aeb80a75d50f3bc13e9
msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:795
# c11adb5c17784c6b9d60a0511522ac19
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``True`` and no objects are available, the view will display an empty page instead of raising a 404. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:802
#: ../../ref/class-based-views/mixins-date-based.txt:301
# 23e2e977ef354e31a9d58f16bb2420a1
# fca328fc463b4fa195c5b6a63a77e6fe
msgid "Returns a 3-tuple containing (``date_list``, ``object_list``, ``extra_context``)."
msgstr ""

#: ../../ref/class-based-views.txt:805
#: ../../ref/class-based-views/mixins-date-based.txt:304
# 9cc3138b69ca41699ecb8ce9a32c1b53
# 49bd1256b80c4f98ada81b84cc66503a
msgid "``date_list`` is the list of dates for which data is available. ``object_list`` is the list of objects. ``extra_context`` is a dictionary of context data that will be added to any context data provided by the :class:`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:813
#: ../../ref/class-based-views/mixins-date-based.txt:312
# ebd2b6f99e75459b891801e3598aacdc
# 956fe2ca61c84dd986d9d97652ddbadd
msgid "Returns a queryset, filtered using the query arguments defined by ``lookup``. Enforces any restrictions on the queryset, such as ``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../ref/class-based-views.txt:819
# 794ce0fea83b4979bfbda8500a615f73
msgid "Returns the list of dates of type ``date_type`` for which ``queryset`` contains entries. For example, ``get_date_list(qs, 'year')`` will return the list of years for which ``qs`` has entries. See :meth:`~django.db.models.query.QuerySet.dates()` for the ways that the ``date_type`` argument can be used."
msgstr ""

#: ../../ref/class-based-views.txt:827
#: ../../ref/generic-views.txt:3
# 68c6efc0d5764694ae7a090cddfdbf94
# d554a381b18b4bdf87ee849d62fc1ecd
msgid "Generic views"
msgstr ""

#: ../../ref/class-based-views.txt:830
#: ../../ref/class-based-views/flattened-index.txt:12
# 0a5db3c6a9cf48e392328521537db590
# 381bdcff2029484b8efe319626025986
msgid "Simple generic views"
msgstr ""

#: ../../ref/class-based-views.txt:835
#: ../../ref/class-based-views/base.txt:17
#: ../../ref/class-based-views/flattened-index.txt:15
# e0eaadd2e6104e83a2ebf92433522766
# 5f115e3399694a31956d553bff4bfa1e
# 0b44933cb1c24a2bbe4b25e752fd32d8
msgid "View"
msgstr ""

#: ../../ref/class-based-views.txt:838
# 325f20f124b845ec934ec1a2859a271a
msgid "The master class-based base view. All other generic class-based views inherit from this base class."
msgstr ""

#: ../../ref/class-based-views.txt:841
# 6769484dfff3451a8d294ef243536b5d
msgid "Each request served by a :class:`~django.views.generic.base.View` has an independent state; therefore, it is safe to store state variables on the instance (i.e., ``self.foo = 3`` is a thread-safe operation)."
msgstr ""

#: ../../ref/class-based-views.txt:845
# b86893e7e0574cdcab38590feafbccc0
msgid "A class-based view is deployed into a URL pattern using the :meth:`~View.as_view()` classmethod::"
msgstr ""

#: ../../ref/class-based-views.txt:852
# 55c5d6941752478babaa2ef66c7d4ac6
msgid "Any argument passed into :meth:`~View.as_view()` will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on ``MyView`` is able to interrogate ``self.size``."
msgstr ""

#: ../../ref/class-based-views.txt:859
# 682ec7bd8d0e480e865ea9da7faf58cf
msgid "Arguments passed to a view are shared between every instance of a view. This means that you shoudn't use a list, dictionary, or any other variable object as an argument to a view. If you did, the actions of one user visiting your view could have an effect on subsequent users visiting the same view."
msgstr ""

#: ../../ref/class-based-views.txt:867
#: ../../ref/class-based-views/base.txt:66
# c5fffa258cd048daa9fdfc4b62eeef9e
# 3fc6617130924ea1a1bf76a1694589f2
msgid "The ``view`` part of the view -- the method that accepts a ``request`` argument plus arguments, and returns a HTTP response."
msgstr ""

#: ../../ref/class-based-views.txt:870
#: ../../ref/class-based-views/base.txt:69
# 8a2e81c725b148348e99bb266d58eeb7
# ab8ea7be9594416291852a14ea1a751b
msgid "The default implementation will inspect the HTTP method and attempt to delegate to a method that matches the HTTP method; a ``GET`` will be delegated to :meth:`~View.get()`, a ``POST`` to :meth:`~View.post()`, and so on."
msgstr ""

#: ../../ref/class-based-views.txt:875
#: ../../ref/class-based-views/base.txt:79
# 0af130c78ef94c608e8763e65f7e2d05
# c8b116ef5c644fd4be38a121472e5c8c
msgid "The default implementation also sets ``request``, ``args`` and ``kwargs`` as instance variables, so any method on the view can know the full details of the request that was made to invoke the view."
msgstr ""

#: ../../ref/class-based-views.txt:881
# 8c433b8ca4614ab1b290c656aaaa90e8
msgid "If the view was called with HTTP method it doesn't support, this method is called instead."
msgstr ""

#: ../../ref/class-based-views.txt:884
# 92b0d40e61e64b35bf6578e6186f9d80
msgid "The default implementation returns ``HttpResponseNotAllowed`` with list of allowed methods in plain text."
msgstr ""

#: ../../ref/class-based-views.txt:888
#: ../../ref/class-based-views/base.txt:97
#: ../../ref/class-based-views/flattened-index.txt:30
# b75a494a31a54dd4bc50f6f33aa2c880
# 52d4e4bfddde448e99fbcdaf3f2afb59
# 939afe3ac4d4464f9a74726a203cf900
msgid "TemplateView"
msgstr ""

#: ../../ref/class-based-views.txt:891
#: ../../ref/class-based-views/base.txt:101
#: ../../ref/generic-views.txt:46
# 37cf1a26437b4b7189a3dc47a4c7bbf2
# c2615f1968e2438cb4a4f3101516ac78
# eaa5c302d78c4c43b6d078e6bd9349e2
msgid "Renders a given template, passing it a ``{{ params }}`` template variable, which is a dictionary of the parameters captured in the URL."
msgstr ""

#: ../../ref/class-based-views.txt:896
#: ../../ref/class-based-views/base.txt:109
#: ../../ref/class-based-views/generic-date-based.txt:38
#: ../../ref/class-based-views/generic-date-based.txt:91
#: ../../ref/class-based-views/generic-date-based.txt:208
#: ../../ref/class-based-views/generic-date-based.txt:309
#: ../../ref/class-based-views/generic-date-based.txt:414
#: ../../ref/class-based-views/generic-date-based.txt:518
#: ../../ref/class-based-views/generic-date-based.txt:577
#: ../../ref/class-based-views/generic-display.txt:21
#: ../../ref/class-based-views/generic-display.txt:82
#: ../../ref/class-based-views/generic-editing.txt:40
#: ../../ref/class-based-views/generic-editing.txt:88
#: ../../ref/class-based-views/generic-editing.txt:130
#: ../../ref/class-based-views/generic-editing.txt:172
# e7b223140b734537ad2ed39cbf4627b9
# ba7b0c39f0514642b30c1c19e0565ec3
# d990368f48374817888dd505ce49cc9b
# f34550b7bb934704a51c1096b25d5b8f
# 49173ab0115d44de98926975b434abd8
# 2b3cc222ed9c441187526314042ee86b
# 8b036c130f98475490a59675666b9f0f
# 7064a61f2ba4442c967cf40575570dc4
# eeeb2b33bbb5416c932b4e132cdd3634
# 7de1e840fe44438aa8c2a7207bdadb9a
# e74184b45fe94f4f9403b7fda7acf722
# dd00c54f2b3e4645b32d9496dba267de
# ac417709d9cf40f091d58009626c4777
# 848754d3e88b498dbf5d4e437da1726c
# cc65bc54a379440992f889ee229098a7
msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:900
# f45aaad2373844de9a642693a90d66c5
msgid "The full name of a template to use."
msgstr ""

#: ../../ref/class-based-views.txt:904
# 05f7c822184e4dbeb93e6ddad0093d6e
msgid "Return a context data dictionary consisting of the contents of ``kwargs`` stored in the context variable ``params``."
msgstr ""

#: ../../ref/class-based-views.txt:909
#: ../../ref/class-based-views/base.txt:145
# 3edeac25c9a248e39501d1314b995922
# a448119ace454e5fbe817c03a8cd1db3
msgid "``params``: The dictionary of keyword arguments captured from the URL pattern that served the view."
msgstr ""

#: ../../ref/class-based-views.txt:913
#: ../../ref/class-based-views/base.txt:149
#: ../../ref/class-based-views/flattened-index.txt:50
# 2051c253682f43a3bd9e31f0c0ac2a32
# b63757a26446427f8cde47bce5ae57ae
# cafe083ca8e84b7ea984b369909c3e19
msgid "RedirectView"
msgstr ""

#: ../../ref/class-based-views.txt:916
#: ../../ref/class-based-views/base.txt:153
#: ../../ref/generic-views.txt:83
# de81877316514eca8b6836d90bef7c83
# 7ffdae6cfe3a4320ba2c68c77a24bcdf
# 98e2dbb27bb846e98cb2233b8ad571ea
msgid "Redirects to a given URL."
msgstr ""

#: ../../ref/class-based-views.txt:918
#: ../../ref/class-based-views/base.txt:155
#: ../../ref/generic-views.txt:85
# 6e9b1e0b31234629929015157050b8f2
# dd1877ecf47c461480f0e633180262fd
# 6ff9e209bc204193b6d48d7b39f40eed
msgid "The given URL may contain dictionary-style string formatting, which will be interpolated against the parameters captured in the URL. Because keyword interpolation is *always* done (even if no arguments are passed in), any ``\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python will convert them to a single percent sign on output."
msgstr ""

#: ../../ref/class-based-views.txt:924
#: ../../ref/class-based-views/base.txt:161
#: ../../ref/generic-views.txt:91
# 502be689422b487d85fba1bb2eaf3d44
# ff42060c8b3943848e2f52e2729cba98
# 8015828936494d71b84de8936e7fa3ca
msgid "If the given URL is ``None``, Django will return an ``HttpResponseGone`` (410)."
msgstr ""

#: ../../ref/class-based-views.txt:929
#: ../../ref/class-based-views/base.txt:210
# 90bac0442e774364b92f2a6115a9e32c
# 21e3dba8a4164ba2a9cbd44bf7dc6292
msgid "The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP error."
msgstr ""

#: ../../ref/class-based-views.txt:934
#: ../../ref/class-based-views/base.txt:215
# 23fdc4d7aa84448f864f0739a19d00e7
# 54d2caff002347e89ad30429bf2dbe3a
msgid "Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If ``True``, then the redirect will use status code 301. If ``False``, then the redirect will use status code 302. By default, ``permanent`` is ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:941
#: ../../ref/class-based-views/base.txt:222
# 4fb7636acd194ed998074f316be54750
# a59ea77fa9ac4ae0b0c32b2b31e57b76
msgid "Whether to pass along the GET query string to the new location. If ``True``, then the query string is appended to the URL. If ``False``, then the query string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:948
#: ../../ref/class-based-views/base.txt:231
# 72f2d574b5d6496da0e55b7037ef7879
# 3f37a8b8d8704944b49925f5227343ef
msgid "Constructs the target URL for redirection."
msgstr ""

#: ../../ref/class-based-views.txt:950
#: ../../ref/class-based-views/base.txt:233
# 395a65e17afa4c75b09765759208d534
# b370014030534b5b8b713dec19d7abb0
msgid "The default implementation uses :attr:`~RedirectView.url` as a starting string, performs expansion of ``%`` parameters in that string, as well as the appending of query string if requested by :attr:`~RedirectView.query_string`. Subclasses may implement any behavior they wish, as long as the method returns a redirect-ready URL string."
msgstr ""

#: ../../ref/class-based-views.txt:958
# 2ec4b640f85146488db998a98edf0d99
msgid "Detail views"
msgstr ""

#: ../../ref/class-based-views.txt:963
#: ../../ref/class-based-views/flattened-index.txt:77
#: ../../ref/class-based-views/generic-display.txt:9
# a296bf990db44b52978e6e11d1108eff
# 3e7a5ac095ce489c8d3bed6e8bb4cde6
# bc8c384ade7643dba56299ed4859e80e
msgid "DetailView"
msgstr ""

#: ../../ref/class-based-views.txt:967
#: ../../ref/generic-views.txt:805
#: ../../ref/generic-views.txt:809
# d65c0695af174c0bafa886c6b164c93d
# cb03fcf2f7e24711ae69dd85292f6c51
# f2c2dde69da541babfc209e5a5846b38
msgid "A page representing an individual object."
msgstr ""

#: ../../ref/class-based-views.txt:969
#: ../../ref/class-based-views/generic-display.txt:13
# 6fa453d7b6ae44daac28f428345544b8
# 7d1f4a5e108044968db080c701f1eb5c
msgid "While this view is executing, ``self.object`` will contain the object that the view is operating upon."
msgstr ""

#: ../../ref/class-based-views.txt:972
# 4b44f05f39b5426a858d3e0f6379ddb4
msgid ":class:`~django.views.generic.base.BaseDetailView` implements the same behavior as :class:`~django.views.generic.base.DetailView`, but doesn't include the :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:980
#: ../../ref/class-based-views.txt:1338
#: ../../ref/class-based-views/generic-date-based.txt:576
#: ../../ref/class-based-views/generic-display.txt:20
#: ../../ref/class-based-views/generic-editing.txt:87
#: ../../ref/class-based-views/generic-editing.txt:129
#: ../../ref/class-based-views/generic-editing.txt:171
# 3a14ae00dff0496ca4d1897dbd13c953
# e34380fd2f644ec0bc90b8674f939ade
# a62c7b549f0b406e9d38a3f8fa86705e
# cbec79d09c3b4c2cb060c6e99b39d2bf
# 61ef679a964c41acb5ba32c9fb514d26
# efdfd059c4234680a17a52b74b85a7e0
# 60f152ef95c846959538a6f527370e7e
msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:983
# d44e88108a6c4117b4b704a6a16a5c4c
msgid "List views"
msgstr ""

#: ../../ref/class-based-views.txt:988
#: ../../ref/class-based-views/flattened-index.txt:109
#: ../../ref/class-based-views/generic-display.txt:66
# a12189be6716457e82af72912c484ea1
# cd8eed869d5e4c0d8cecf9174e001844
# 92831b44b94a48a68c3bd6b7cb304f8b
msgid "ListView"
msgstr ""

#: ../../ref/class-based-views.txt:992
#: ../../ref/class-based-views/generic-display.txt:70
#: ../../ref/generic-views.txt:697
# 8e5b617dbda74a948feac218e0943dcb
# 89dd824944864ed7b60f659df9b6e934
# 104065058c414c2a949c4ebc19d8d8d8
msgid "A page representing a list of objects."
msgstr ""

#: ../../ref/class-based-views.txt:994
#: ../../ref/class-based-views/generic-display.txt:72
# e5d680fb149b455b906c7311b03c40de
# 867997e8d1a145d08ee6e6b3b0b4632f
msgid "While this view is executing, ``self.object_list`` will contain the list of objects (usually, but not necessarily a queryset) that the view is operating upon."
msgstr ""

#: ../../ref/class-based-views.txt:998
# bfc5e956004b4d648845e2b0d332d563
msgid ":class:`~django.views.generic.list.BaseListView` implements the same behavior as :class:`~django.views.generic.list.ListView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1005
#: ../../ref/class-based-views/generic-date-based.txt:41
#: ../../ref/class-based-views/generic-date-based.txt:95
#: ../../ref/class-based-views/generic-date-based.txt:213
#: ../../ref/class-based-views/generic-date-based.txt:314
#: ../../ref/class-based-views/generic-date-based.txt:420
#: ../../ref/class-based-views/generic-date-based.txt:525
#: ../../ref/class-based-views/generic-display.txt:84
#: ../../ref/class-based-views/generic-display.txt:136
# aaf512135d2b442d9357ab44e21daee6
# f248bd4945624dafb65ba3f0916bc091
# 416ca8094d3e43ea8b59ae3ea18b091f
# 1026c379d4a94ee6976dd21897324b46
# 7ecc7e9b7f6f4ccba18978dcb18be423
# 2fee1a06a3ad48219c741defed1715cd
# 0fd7ce1de3394f2797cf077d6320e0e1
# f2d2d41115f548f19dbdaf7e1f5e4c07
# 6abdec3f88bd4de8a496fcde1c92eb4c
msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1006
#: ../../ref/class-based-views.txt:1116
#: ../../ref/class-based-views.txt:1139
#: ../../ref/class-based-views.txt:1189
#: ../../ref/class-based-views.txt:1235
#: ../../ref/class-based-views.txt:1270
#: ../../ref/class-based-views.txt:1319
#: ../../ref/class-based-views/generic-date-based.txt:37
#: ../../ref/class-based-views/generic-date-based.txt:90
#: ../../ref/class-based-views/generic-date-based.txt:207
#: ../../ref/class-based-views/generic-date-based.txt:308
#: ../../ref/class-based-views/generic-date-based.txt:413
#: ../../ref/class-based-views/generic-date-based.txt:517
#: ../../ref/class-based-views/generic-display.txt:81
# 84c16d9fe7014006bf06ef1d6493d240
# 931712395d6a4fd5af680512992451c2
# 278719cc68f94ad39df03886a2341aa7
# f7d3c1d9b8cd4637a9c29f2b87169c55
# 3ab234fed6b8499992562f36e1c8f934
# d4d6b864ba4347aabb135ea033ab3ead
# 33b1370b5bda48d9bacce05c9efc88cb
# 3de371524b9a4ccb971c765692aeca8f
# 98da355648ca4f3093f5a70bdc49e335
# 1882d0c14d0441409fd1094219c9ba47
# ebb97b049ad04a48ba895b0889e433c3
# b35159e6188b463ead3b5f2d421bf17e
# 26e16de041524515928827ef5dfd755e
# f3257b00c11c4693a6691ad4a2b70b21
msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1010
#: ../../ref/class-based-views/flattened-index.txt:138
# c52327c147ff438ab75b610872b0747d
# 195897bf7d62422cb692b57833365601
msgid "Editing views"
msgstr ""

#: ../../ref/class-based-views.txt:1015
#: ../../ref/class-based-views/flattened-index.txt:141
#: ../../ref/class-based-views/generic-editing.txt:28
# cebf2e06cc774ee89624e75947e4c360
# 498c3aad9bbd427ca59fea25bc3ee9d7
# 68de4888c125471690a8a85ec40712cd
msgid "FormView"
msgstr ""

#: ../../ref/class-based-views.txt:1019
#: ../../ref/class-based-views/generic-editing.txt:32
# bda825e8457e4364b4e6851b65b4ca87
# 8fafa2ab3ffb4f02b7102d035703baa2
msgid "A view that displays a form. On error, redisplays the form with validation errors; on success, redirects to a new URL."
msgstr ""

#: ../../ref/class-based-views.txt:1022
# dc55afc46f854119b7026647f12dca44
msgid ":class:`~django.views.generic.edit.BaseFormView` implements the same behavior as :class:`~django.views.generic.edit.FormView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1029
#: ../../ref/class-based-views.txt:1046
#: ../../ref/class-based-views.txt:1065
#: ../../ref/class-based-views/generic-editing.txt:43
#: ../../ref/class-based-views/generic-editing.txt:93
#: ../../ref/class-based-views/generic-editing.txt:135
#: ../../ref/class-based-views/mixins-editing.txt:9
# 3786d6bb06934b619eeabd9657f50e8a
# b6a60814ea7f4ffe8ef25ebb188b96af
# 434856d39be445daa557c5fc30df0f86
# 4303a713567b4372af4405a564ae0f57
# 2194da5696f64fb7ae43818435813de8
# acdb8e28edf243879da3d1009f05f199
# 65717a6000b64b96811e45684fd53518
msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ""

#: ../../ref/class-based-views.txt:1032
#: ../../ref/class-based-views/flattened-index.txt:170
#: ../../ref/class-based-views/generic-editing.txt:75
# 6bc8129c213342fb8f51ce0a2a066997
# a75a7b9fcbe9472eba6ead2f735c31c7
# c539e9d33e3245c194c9a560b5e990de
msgid "CreateView"
msgstr ""

#: ../../ref/class-based-views.txt:1036
#: ../../ref/class-based-views/generic-editing.txt:79
# 7925106142764bb7bb62c41b5ecee507
# 284b09393bed4f3ea01bf985eebbf307
msgid "A view that displays a form for creating an object, redisplaying the form with validation errors (if there are any) and saving the object."
msgstr ""

#: ../../ref/class-based-views.txt:1039
# 8b6a3f0618ff47ca86a89adb25993fc8
msgid ":class:`~django.views.generic.edit.BaseCreateView` implements the same behavior as :class:`~django.views.generic.edit.CreateView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1045
#: ../../ref/class-based-views.txt:1064
#: ../../ref/class-based-views/generic-editing.txt:90
#: ../../ref/class-based-views/generic-editing.txt:132
#: ../../ref/class-based-views/mixins-editing.txt:8
# b4b379fc834c465fafc2c826248ef0d4
# 03a15c2c6746490f91b89959b37649b9
# 67472c2f16ba49688debe3c7e8fe06f2
# f02be9429681479d9426d9241f023926
# 8254d13c335648ee882cb20f58636950
msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1049
#: ../../ref/class-based-views/flattened-index.txt:208
#: ../../ref/class-based-views/generic-editing.txt:115
# c08d6e32e0fd42f990f2abb8fa2e8cd5
# 788f267df3604e28a7f5fe94edfedb58
# 40b00ee18be44fad93628e05356d9037
msgid "UpdateView"
msgstr ""

#: ../../ref/class-based-views.txt:1053
#: ../../ref/class-based-views/generic-editing.txt:119
# 9f498cfef99743dea07230656878d9e9
# d021050dbd0f4232aa16d3ab2e41b1c6
msgid "A view that displays a form for editing an existing object, redisplaying the form with validation errors (if there are any) and saving changes to the object. This uses a form automatically generated from the object's model class (unless a form class is manually specified)."
msgstr ""

#: ../../ref/class-based-views.txt:1058
# eba143f9b7684afeb0d8004d0d8b1f48
msgid ":class:`~django.views.generic.edit.BaseUpdateView` implements the same behavior as :class:`~django.views.generic.edit.UpdateView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1068
#: ../../ref/class-based-views/flattened-index.txt:246
#: ../../ref/class-based-views/generic-editing.txt:157
# 57a6a587b6b54a1abd3249e6362b9ac0
# cf890144f3b540d38d2c546c2e53ca40
# eea08d534b064767909bad9dfe120d7d
msgid "DeleteView"
msgstr ""

#: ../../ref/class-based-views.txt:1072
#: ../../ref/class-based-views/generic-editing.txt:161
#: ../../ref/generic-views.txt:1050
# 364717a9662f4460927f64d2d1b1bb70
# 098c7dd055f2451ca4a9b07667aed090
# a540ccd18d2e475b828fe87fada9cf09
msgid "A view that displays a confirmation page and deletes an existing object. The given object will only be deleted if the request method is ``POST``. If this view is fetched via ``GET``, it will display a confirmation page that should contain a form that POSTs to the same URL."
msgstr ""

#: ../../ref/class-based-views.txt:1077
# d6924c9a6faa4a9ea109e42052bba22f
msgid ":class:`~django.views.generic.edit.BaseDeleteView` implements the same behavior as :class:`~django.views.generic.edit.DeleteView`, but doesn't include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1083
#: ../../ref/class-based-views/generic-editing.txt:174
#: ../../ref/class-based-views/mixins-editing.txt:10
# c8870fe030984797ade6146cf4abb739
# ec84d4cb87ac41edb8a32e1100c8e01a
# 9923bb8eea3548afa7035340d8b5bf70
msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1084
#: ../../ref/class-based-views.txt:1339
#: ../../ref/class-based-views/generic-date-based.txt:583
#: ../../ref/class-based-views/generic-display.txt:22
#: ../../ref/class-based-views/generic-editing.txt:175
# b6323cdce15e42b1ba55821a90b3a885
# adc4d939f3424b0691da86d0cdf987e3
# 4263991d2ed049b7ad63ade37ba75c58
# 5b845ce2ad624541ade1139460516f08
# d142af503b1d447bbc99543b89612a43
msgid ":class:`django.views.generic.detail.BaseDetailView`"
msgstr ""

#: ../../ref/class-based-views.txt:1086
#: ../../ref/class-based-views.txt:1118
#: ../../ref/class-based-views.txt:1168
#: ../../ref/class-based-views.txt:1215
#: ../../ref/class-based-views.txt:1250
#: ../../ref/class-based-views.txt:1299
#: ../../ref/class-based-views/generic-date-based.txt:45
#: ../../ref/class-based-views/generic-date-based.txt:148
#: ../../ref/class-based-views/generic-date-based.txt:244
#: ../../ref/class-based-views/generic-date-based.txt:338
#: ../../ref/class-based-views/generic-date-based.txt:454
#: ../../ref/class-based-views/generic-date-based.txt:529
#: ../../ref/class-based-views/generic-date-based.txt:592
# 465d8326f9c74ed58624f3bf7566715f
# 8e6f597766de4a45926333ff0f016a92
# b3c84ae8f7f243b3ba3df30ddc4898c9
# 65682dbebf3d403da75ff205a1712cce
# 4e73765decf64cabbaf14153464d8653
# f847dd9c49ec4bd69854690163954065
# 2bbca05a999d4beb9680432a180390ee
# 8399f35213964e6ca60f6694da251313
# 8485f52f36834c3290b77d1ec1a10e02
# ec0fbccb0195499ea8bef90a32050625
# 85acae7303b64ff7acbb6f3f5a1fb7df
# e77267586e2d4dc598ff407f2d871072
# b518310bf2904413ab79234196e10ce0
msgid "**Notes**"
msgstr ""

#: ../../ref/class-based-views.txt:1088
# 531755b84e2c42a89a42e98600ce6bd4
msgid "The delete confirmation page displayed to a GET request uses a ``template_name_suffix`` of ``'_confirm_delete'``."
msgstr ""

#: ../../ref/class-based-views.txt:1092
#: ../../ref/class-based-views/flattened-index.txt:278
# d3bdde6161494885ae880c5096ccaf55
# a591f158e9fb44a690223643b2307ca0
msgid "Date-based views"
msgstr ""

#: ../../ref/class-based-views.txt:1094
# be00b55dbe134cd386ea5395323d0b7f
msgid "Date-based generic views (in the module :mod:`django.views.generic.dates`) are views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/class-based-views.txt:1100
#: ../../ref/class-based-views/flattened-index.txt:281
#: ../../ref/class-based-views/generic-date-based.txt:26
# 311367eb72bd48cca25824f42580257e
# b144b24b0f8e4ac4b6603b1a10c9acb6
# 8cffcd4283d447469acced63c61ee243
msgid "ArchiveIndexView"
msgstr ""

#: ../../ref/class-based-views.txt:1104
#: ../../ref/class-based-views/generic-date-based.txt:30
#: ../../ref/generic-views.txt:164
# b05e123984974147976e7f89adef4fed
# e6abed4b88334182aa2e34c2d55bbf43
# 89931ed6fadb4855a706818116984627
msgid "A top-level index page showing the \"latest\" objects, by date. Objects with a date in the *future* are not included unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1108
# 6509493fb34f44cd8198fef752b9e8e1
msgid ":class:`~django.views.generic.dates.BaseArchiveIndexView` implements the same behavior as :class:`~django.views.generic.dates.ArchiveIndexView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1115
#: ../../ref/class-based-views.txt:1141
#: ../../ref/class-based-views.txt:1192
#: ../../ref/class-based-views.txt:1238
#: ../../ref/class-based-views.txt:1274
#: ../../ref/class-based-views/generic-date-based.txt:40
#: ../../ref/class-based-views/generic-date-based.txt:94
#: ../../ref/class-based-views/generic-date-based.txt:212
#: ../../ref/class-based-views/generic-date-based.txt:313
#: ../../ref/class-based-views/generic-date-based.txt:419
#: ../../ref/class-based-views/generic-date-based.txt:524
# 9d23fc5a32e64c4da1c3c2519075fb7f
# f54e092a160746e0a99b1857a72718fe
# fcd50d7172424237babef3fe5ca79a0a
# e52551a24ae643b2bc6a5a374d59beaf
# 64e6da348dd74f4299e2c330cff00615
# d211c21fa38f4dc69c238a2b1ea2dc8c
# f697ce9e1db64200956d31613815b292
# cb23eaa1cbef4628ab4a927b648990e9
# d96b2517af4142479ce1ea963cbc228b
# 07002f80d3fd441db5edd9cb9ee593c0
# 2676879420ab402fb3bd418139c35727
msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ""

#: ../../ref/class-based-views.txt:1120
#: ../../ref/class-based-views/generic-date-based.txt:47
# b7f42a919b964cbd9c04c169c1c02c87
# 5ae79b604040491481c7685c5cbc0f56
msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr ""

#: ../../ref/class-based-views.txt:1121
#: ../../ref/class-based-views/generic-date-based.txt:48
# 452cc5a56d4c4e4393e472e78a81cabc
# b183dfd838a54a82890b0a2c1d101126
msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr ""

#: ../../ref/class-based-views.txt:1124
#: ../../ref/class-based-views/flattened-index.txt:315
#: ../../ref/class-based-views/generic-date-based.txt:79
# 94111b6bea6d4c31a794494e77844423
# 6b8737f6d1714ecf8e59b26d3e8615ec
# 6e80035b47dd4f98b551b85c3706fde8
msgid "YearArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1128
#: ../../ref/class-based-views/generic-date-based.txt:83
#: ../../ref/generic-views.txt:245
# 9078658176f3425ea9b4f31bc70f19ab
# 010aa022cae345318be60cd2bdc9b78c
# 26c7f7e1b0d54021938429ce7f8cfa2f
msgid "A yearly archive page showing all available months in a given year. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1132
# ada66bb02dad4ecda2c08dc228bb4439
msgid ":class:`~django.views.generic.dates.BaseYearArchiveView` implements the same behavior as :class:`~django.views.generic.dates.YearArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1140
#: ../../ref/class-based-views.txt:1190
#: ../../ref/class-based-views.txt:1236
#: ../../ref/class-based-views.txt:1271
#: ../../ref/class-based-views.txt:1341
#: ../../ref/class-based-views/generic-date-based.txt:93
#: ../../ref/class-based-views/generic-date-based.txt:210
#: ../../ref/class-based-views/generic-date-based.txt:311
#: ../../ref/class-based-views/generic-date-based.txt:416
#: ../../ref/class-based-views/generic-date-based.txt:521
#: ../../ref/class-based-views/generic-date-based.txt:579
# ec8ba76bff48430d97bf83ef277defd1
# 4f9e52c5394d4bcc83e1ebd9c135e09d
# c47ed8ace4814275927d8f10b85cc30c
# e81a9c7235bc4c2a99f9f278521853b8
# 391d3a46bc464afa82c5a4d6faf30913
# c04fa524203f459aab4e072b21999e97
# eb3d526df7e74860bef49ff767aa7c2e
# ad4a35e547724e3e83480255aa7a4c3f
# 4de6c12620c849799dbdf4df478f0204
# 117393b95dd94123ae362ef7ede0d817
# 40b938d9485e4a84942bbca1b862fb81
msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1145
# f8720569999444deb5c317e8e0c0fe96
msgid "A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If ``True``, the list of objects will be made available to the context. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views.txt:1152
# 5bed15dfc4d745f0ba0e72b805272428
msgid "Determine if an object list will be returned as part of the context. If ``False``, the ``None`` queryset will be used as the object list."
msgstr ""

#: ../../ref/class-based-views.txt:1157
#: ../../ref/class-based-views/generic-date-based.txt:115
# f72511be704c47d0b9848fda4aa873f4
# 046d95eef5704dec99041b7826423d63
msgid "In addition to the context provided by :class:`django.views.generic.list.MultipleObjectMixin` (via :class:`django.views.generic.dates.BaseDateListView`), the template's context will be:"
msgstr ""

#: ../../ref/class-based-views.txt:1162
# 6f50ffab27c64999bfdae5543f3e0582
msgid "``date_list``: A ``DateQuerySet`` object containing all months that have objects available according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views.txt:1166
#: ../../ref/generic-views.txt:313
# 08f7f074577744be94ea2b2acb06b593
# 8787f7a779114e61b337068b57683095
msgid "``year``: The given year, as a four-character string."
msgstr ""

#: ../../ref/class-based-views.txt:1170
#: ../../ref/class-based-views/generic-date-based.txt:150
# 68379d46de6e4ab1a697f5e13d50e176
# 36ac88467b5c41f0a66338024def8091
msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr ""

#: ../../ref/class-based-views.txt:1173
#: ../../ref/class-based-views/flattened-index.txt:352
#: ../../ref/class-based-views/generic-date-based.txt:196
# ce3e2fbeebae4ead81922e050abb48e8
# a902ef1aef93436da28947d62f44c662
# b39ac472ef5d47a7996d9852adc32601
msgid "MonthArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1177
#: ../../ref/class-based-views/generic-date-based.txt:200
#: ../../ref/generic-views.txt:330
# a2bd97ebe4c04652893236a5f2d0514f
# 9717037291c746b6a6ecc50bdea6c08e
# f0eef27469394d259d659d08b3e99620
msgid "A monthly archive page showing all objects in a given month. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1181
# afa816e11e83406abf80e7e8ac0dfa4e
msgid ":class:`~django.views.generic.dates.BaseMonthArchiveView` implements the same behavior as :class:`~django.views.generic.dates.MonthArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1191
#: ../../ref/class-based-views.txt:1237
#: ../../ref/class-based-views.txt:1272
#: ../../ref/class-based-views.txt:1342
#: ../../ref/class-based-views/generic-date-based.txt:211
#: ../../ref/class-based-views/generic-date-based.txt:417
#: ../../ref/class-based-views/generic-date-based.txt:522
#: ../../ref/class-based-views/generic-date-based.txt:580
# de13d2d5358c4500a1fa8b62d1ee26e7
# ce2913a18c2b44aa98e2f786d9b110ec
# b98c3c9b3ec94eb3ba02aacb89b4f4a8
# 9b89ad3d26954fc9b69089ed82cd3c3a
# 1245daa10037490e8113cbfbeee4c41a
# 78813444cf4e4d76988440827a75bd48
# 134f841f90b84324a31b214e649b45b7
# 0005a2d994a041dc91f89ac3f1db15f2
msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1196
#: ../../ref/class-based-views.txt:1242
#: ../../ref/class-based-views.txt:1278
#: ../../ref/class-based-views/generic-date-based.txt:219
#: ../../ref/class-based-views/generic-date-based.txt:320
#: ../../ref/class-based-views/generic-date-based.txt:426
# 39ca1612206d428fa6cf9b6193d1dcbf
# dc09a8f02728498ebf5b2072b5b76509
# 71c7a30adb114f8bbcdaced0c069210b
# e8ec56f386f24144ae75da66d0856f50
# c16a847f040c404e9e731de7fca1b599
# 41da5677ca7246b99c31a368cddd2f16
msgid "In addition to the context provided by :class:`~django.views.generic.list.MultipleObjectMixin` (via :class:`~django.views.generic.dates.BaseDateListView`), the template's context will be:"
msgstr ""

#: ../../ref/class-based-views.txt:1201
# 2e8e90f9773f4fd492da2fa92f38195b
msgid "``date_list``: A ``DateQuerySet`` object containing all days that have objects available in the given month, according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views.txt:1205
#: ../../ref/generic-views.txt:403
# 06586eb5f0314df5ac8245495894dcdc
# 49d798745cde40088a857295258e0d5e
msgid "``month``: A ``datetime.date`` object representing the given month."
msgstr ""

#: ../../ref/class-based-views.txt:1207
#: ../../ref/class-based-views.txt:1291
#: ../../ref/generic-views.txt:405
# 4463578e440d4fb58ed4a8ecab7c283a
# b295915b4ace4066b2b165bcc424cc8f
# fa4a763f855745e08442d7ce7a2fb4f4
msgid "``next_month``: A ``datetime.date`` object representing the first day of the next month. If the next month is in the future, this will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1211
#: ../../ref/class-based-views.txt:1295
#: ../../ref/generic-views.txt:409
# e03120b3f1e546f0857be8f814bc9360
# 53e3890750224dafb66f034ec1e29389
# 58aafd7eefda4dccb38b8d2b651560b6
msgid "``previous_month``: A ``datetime.date`` object representing the first day of the previous month. Unlike ``next_month``, this will never be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1217
#: ../../ref/class-based-views/generic-date-based.txt:246
# 013eb9e35b864e3da738bc4f25bcc5a4
# 97ba79337613495e9298a09934a40720
msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr ""

#: ../../ref/class-based-views.txt:1220
#: ../../ref/class-based-views/flattened-index.txt:392
#: ../../ref/class-based-views/generic-date-based.txt:297
# 0ef11a37ead74307a57f04814038c0f8
# 82a7e313056b4975b3a0f077dff2a350
# 9286c6b084c845f493b50d6c6a4e5be5
msgid "WeekArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1224
#: ../../ref/class-based-views/generic-date-based.txt:301
#: ../../ref/generic-views.txt:423
# 3039a80dd3e34d9a978d76558e7f8f45
# df04537e48254e6faa34e14bd5997259
# c56453231ef1418e9d2cb69e694abd38
msgid "A weekly archive page showing all objects in a given week. Objects with a date in the *future* are not displayed unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1228
# 0e5ae56b836442beb85713f1edd1138b
msgid ":class:`~django.views.generic.dates.BaseWeekArchiveView` implements the same behavior as :class:`~django.views.generic.dates.WeekArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1247
#: ../../ref/generic-views.txt:482
# d1009e3f21e643c4966ddf2e410063fe
# 3a69ef64befc4517a2033246c274d932
msgid "``week``: A ``datetime.date`` object representing the first day of the given week."
msgstr ""

#: ../../ref/class-based-views.txt:1252
#: ../../ref/class-based-views/generic-date-based.txt:340
# fe82e0052e6649188265b43f422cc8bd
# 445e8447fd1f414c996795482e9b8bb1
msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr ""

#: ../../ref/class-based-views.txt:1255
#: ../../ref/class-based-views/flattened-index.txt:430
#: ../../ref/class-based-views/generic-date-based.txt:402
# 107decf2c1ec44aab9c894a15073fc34
# d80f41314fe64f5da169cd08dd73ace0
# af6ace0adc23431da512528575a6479e
msgid "DayArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1259
#: ../../ref/class-based-views/generic-date-based.txt:406
#: ../../ref/generic-views.txt:495
# d05f5002546b4b43ac57e72f128ce209
# 70c1753a3d57431a95e3c0a8429ba5bb
# 34a4925dc5de43ab9ced618c9476ce61
msgid "A day archive page showing all objects in a given day. Days in the future throw a 404 error, regardless of whether any objects exist for future days, unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1263
# 325bc2a3356c49f093ee8baf16a096e8
msgid ":class:`~django.views.generic.dates.BaseDayArchiveView` implements the same behavior as :class:`~django.views.generic.dates.DayArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1273
#: ../../ref/class-based-views.txt:1343
#: ../../ref/class-based-views/generic-date-based.txt:418
#: ../../ref/class-based-views/generic-date-based.txt:523
#: ../../ref/class-based-views/generic-date-based.txt:581
# 7d4d75b8c05e4686968d6ef2b43e0e1b
# de1dc0966e7b4b0a9196519ae543d54b
# aaa9fac8aa8f4d4fb6a47e42e69bc679
# 7ed53cbc7dab4a50af72e5ed7e09d459
# 7fb953b868744c9984d8952b89807fb0
msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ""

#: ../../ref/class-based-views.txt:1283
#: ../../ref/generic-views.txt:567
# 64d540e9849b478d8269ebff0ba2c543
# b1aa8a04fb9f433aa6b35158e3493a59
msgid "``day``: A ``datetime.date`` object representing the given day."
msgstr ""

#: ../../ref/class-based-views.txt:1285
#: ../../ref/generic-views.txt:569
# 8e7802b177484f7db07ab4721fc84eb8
# 24cf532de9fb40109a5d1a7224f357e9
msgid "``next_day``: A ``datetime.date`` object representing the next day. If the next day is in the future, this will be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1288
#: ../../ref/generic-views.txt:572
# 99926935f2c54eae9cda11b871d17f10
# 154b2f523eaa40c18839ddb2e44c53c2
msgid "``previous_day``: A ``datetime.date`` object representing the previous day. Unlike ``next_day``, this will never be ``None``."
msgstr ""

#: ../../ref/class-based-views.txt:1301
#: ../../ref/class-based-views/generic-date-based.txt:456
# 75b1a915ee594a4f98170854fce9af20
# 3a6729babc7943e0b71f6e99824a2c31
msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr ""

#: ../../ref/class-based-views.txt:1304
#: ../../ref/class-based-views/flattened-index.txt:474
#: ../../ref/class-based-views/generic-date-based.txt:506
# b49898ea39f543b3babfda9622f0b29d
# 61f39644d0d147298161f395c3a6f4ac
# 2a51c1dd67774b30b7b51b001474b1d5
msgid "TodayArchiveView"
msgstr ""

#: ../../ref/class-based-views.txt:1308
#: ../../ref/class-based-views/generic-date-based.txt:510
# b1068f19c8bf463ebcc8ac3c0428ee6c
# bdde9aa5bba44abca5e554db55c4b0b0
msgid "A day archive page showing all objects for *today*. This is exactly the same as :class:`django.views.generic.dates.DayArchiveView`, except today's date is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""

#: ../../ref/class-based-views.txt:1312
# aa373dbf1a4d4f66887fea2422af141e
msgid ":class:`~django.views.generic.dates.BaseTodayArchiveView` implements the same behavior as :class:`~django.views.generic.dates.TodayArchiveView`, but doesn't include the :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1320
#: ../../ref/class-based-views/generic-date-based.txt:415
#: ../../ref/class-based-views/generic-date-based.txt:520
# f9223006e24c447194bb779c11e6c365
# f612164c5cac4a06a10351b1f98c2516
# 63dfebfb0cda420796f1e0312a587105
msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ""

#: ../../ref/class-based-views.txt:1323
#: ../../ref/class-based-views/flattened-index.txt:518
#: ../../ref/class-based-views/generic-date-based.txt:565
# e9aadc90edaa4a889533511ea610b8b6
# 76631adbc2524f32ba36ff85a8cc2aec
# 277f5fdc7458439ca8ac5cfd6742e871
msgid "DateDetailView"
msgstr ""

#: ../../ref/class-based-views.txt:1327
#: ../../ref/class-based-views/generic-date-based.txt:569
#: ../../ref/generic-views.txt:594
# fbd48d59f58244e9b2f201efe3747ad9
# a7ba3433c7be43648420038010273f8c
# dc23f563078e4f968d40d01d4912abdc
msgid "A page representing an individual object. If the object has a date value in the future, the view will throw a 404 error by default, unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views.txt:1331
# 3f38879883714f5fb449161d7b1d4533
msgid ":class:`~django.views.generic.dates.BaseDateDetailView` implements the same behavior as :class:`~django.views.generic.dates.DateDetailView`, but doesn't include the :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../ref/class-based-views.txt:1340
#: ../../ref/class-based-views/generic-date-based.txt:42
#: ../../ref/class-based-views/generic-date-based.txt:96
#: ../../ref/class-based-views/generic-date-based.txt:214
#: ../../ref/class-based-views/generic-date-based.txt:315
#: ../../ref/class-based-views/generic-date-based.txt:421
#: ../../ref/class-based-views/generic-date-based.txt:526
#: ../../ref/class-based-views/generic-date-based.txt:582
# d1da2ad11ee64aeabb8db69f0c9e0215
# 45eecf0916224a75bcaae1e9ef4766ec
# b99d10aeb40f445ab0c287c7dbc5e1f4
# 5523dddf18d343d0840d3a2e7040c846
# 808be4b19b75479a96b53aaf31325793
# 30eee1b43fff430897f96a7806606a33
# 522a33c89205412c8d22f333e27d7786
# 4bbf896fe79d480994acb7597a0ed8d3
msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views/base.txt:3
# 5393aee861194ecbb90831a3f43660e2
msgid "Base views"
msgstr ""

#: ../../ref/class-based-views/base.txt:5
# f4921c75134648198d7e0e92925330a3
msgid "The following three classes provide much of the functionality needed to create Django views. You may think of them as *parent* views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins and Generic class-based views."
msgstr ""

#: ../../ref/class-based-views/base.txt:11
# ca08d4bfd6844143a70e300eab7e720c
msgid "Many of Django's built-in class-based views inherit from other class-based views or various mixins. Because this inheritence chain is very important, the ancestor classes are  documented under the section title of **Ancestors (MRO)**. MRO is an acronym for Method Resolution Order."
msgstr ""

#: ../../ref/class-based-views/base.txt:21
# f106b22ee9d3458094ab57e2168e655c
msgid "The master class-based base view. All other class-based views inherit from this base class."
msgstr ""

#: ../../ref/class-based-views/base.txt:24
#: ../../ref/class-based-views/base.txt:112
#: ../../ref/class-based-views/base.txt:170
#: ../../ref/class-based-views/generic-display.txt:26
#: ../../ref/class-based-views/generic-display.txt:87
# 221a0aa5ba9343dbb08e439540f63e0e
# 31639f0120f5480da02f0cedab733075
# dff994cefd214309ba5125f8042eda91
# 7acd5c6c0b4e486a85fdb541e04c4834
# c7ff742699fb485cbb8591f92ec28aee
msgid "**Method Flowchart**"
msgstr ""

#: ../../ref/class-based-views/base.txt:26
#: ../../ref/class-based-views/base.txt:114
#: ../../ref/class-based-views/base.txt:172
#: ../../ref/class-based-views/generic-display.txt:28
#: ../../ref/class-based-views/generic-display.txt:89
# aae5205e12c6438e95029c8ec495a5e3
# 46c593b96fb54c7b9403c752833d26b3
# 28fb7f0f801242e999724f49204caf11
# 6a65ff0c3ee64ebb8561e4aa7ccdd078
# b006c95319d94209aa2b228741dcd30c
msgid ":meth:`dispatch()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:27
#: ../../ref/class-based-views/base.txt:115
#: ../../ref/class-based-views/base.txt:173
#: ../../ref/class-based-views/generic-display.txt:29
#: ../../ref/class-based-views/generic-display.txt:90
# e3e30116d309443385533c253ef80ee2
# baee81a6215c418aa7287a806039a85c
# de5c5fb0edfc4ba1abc2d9c224fadc8f
# e3c82851dca24cbcbee98a00f9e20f7a
# 7c1106a294ac48249f83b0d47e7620b1
msgid ":meth:`http_method_not_allowed()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:28
# 2be2f615f4a34d9495b65b3f94eca8de
msgid ":meth:`options()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:30
#: ../../ref/class-based-views/base.txt:118
#: ../../ref/class-based-views/base.txt:176
#: ../../ref/class-based-views/generic-date-based.txt:53
#: ../../ref/class-based-views/generic-date-based.txt:152
#: ../../ref/class-based-views/generic-date-based.txt:248
#: ../../ref/class-based-views/generic-date-based.txt:342
#: ../../ref/class-based-views/generic-date-based.txt:458
#: ../../ref/class-based-views/generic-date-based.txt:533
#: ../../ref/class-based-views/generic-display.txt:39
#: ../../ref/class-based-views/generic-display.txt:99
#: ../../ref/class-based-views/generic-editing.txt:58
#: ../../ref/class-based-views/generic-editing.txt:106
#: ../../ref/class-based-views/generic-editing.txt:148
#: ../../ref/class-based-views/generic-editing.txt:190
# b9d7a40fbf5f4465bc5e41511e78fec6
# ceccae9203b84a0c8d8e00b93ee6d708
# e08312f8ce1c40edb5d58dbabb38b987
# 16be27c5b662433288d83c1f76374056
# 9c292961654844ee9f351b89f93b8aeb
# dc782e27fee444a8a8366fd9921b64ed
# 5d1096ceea9c4512959c9db62deaf981
# 81a0a4cfc53644e9bfc0819c93446b22
# 8dd6596dff014b98a344ae6a3120579f
# 7f63722b39ae4e2abff1930dc05d5a94
# 50ea3a0518214b4fabbdd23d261ff037
# 39255f4e92f846ecb84f6e73501b8a20
# 95a9ed3dfb7444d098ea68ed7f2869af
# 51d3502d7c574acc8204b085f2e30538
# 039a3c9ef8d34e589935b171854b90ee
msgid "**Example views.py**::"
msgstr ""

#: ../../ref/class-based-views/base.txt:40
#: ../../ref/class-based-views/base.txt:133
#: ../../ref/class-based-views/base.txt:193
#: ../../ref/class-based-views/generic-date-based.txt:164
#: ../../ref/class-based-views/generic-date-based.txt:260
#: ../../ref/class-based-views/generic-date-based.txt:355
#: ../../ref/class-based-views/generic-date-based.txt:470
#: ../../ref/class-based-views/generic-date-based.txt:545
#: ../../ref/class-based-views/generic-date-based.txt:596
#: ../../ref/class-based-views/generic-display.txt:55
#: ../../ref/class-based-views/generic-display.txt:115
# e65a7a3f2c054f2da2574141306c1220
# d0d303b57dc0444e8cac9a2b932be345
# ac456f91ce98443d89cfb6b13ae891b2
# 8bc21c95a0f340a59e0e561327772b72
# c87ef2c228a84ca9a6149e0e65947896
# a7f2d4711d424c06906e5e62e3584a05
# 5ed09db434d54a24a308ec548e636848
# 0e325a98b5024ce4b3e6aeb3898ea097
# b558f55fecf74e42819d4a914eb2d210
# faf3a461c96b4402a02caf2379fd141a
# 9513779abe724190abbc024d531a60e3
msgid "**Example urls.py**::"
msgstr ""

#: ../../ref/class-based-views/base.txt:50
#: ../../ref/class-based-views/base.txt:206
#: ../../ref/class-based-views/generic-editing.txt:96
#: ../../ref/class-based-views/generic-editing.txt:138
#: ../../ref/class-based-views/generic-editing.txt:179
#: ../../ref/class-based-views/mixins-simple.txt:46
# af8e00a11c9d489283738250519f7d19
# bc5c60bead9b4f9f957085d235eb9567
# 88b7c229286a40178f36f856d722a984
# 478a9241c30d4cf88fe2e743e476c7cd
# 5eb2f6e84e394041bc2badd72fbde6ee
# 87d7ea7897694b77affee84e38448355
msgid "**Attributes**"
msgstr ""

#: ../../ref/class-based-views/base.txt:54
# a75e27a88095497d922d2200301735ca
msgid "The default list of HTTP method names that this view will accept."
msgstr ""

#: ../../ref/class-based-views/base.txt:56
#: ../../ref/class-based-views/base.txt:227
#: ../../ref/class-based-views/flattened-index.txt:22
#: ../../ref/class-based-views/flattened-index.txt:39
#: ../../ref/class-based-views/flattened-index.txt:60
#: ../../ref/class-based-views/flattened-index.txt:94
#: ../../ref/class-based-views/flattened-index.txt:125
#: ../../ref/class-based-views/flattened-index.txt:153
#: ../../ref/class-based-views/flattened-index.txt:190
#: ../../ref/class-based-views/flattened-index.txt:228
#: ../../ref/class-based-views/flattened-index.txt:264
#: ../../ref/class-based-views/flattened-index.txt:299
#: ../../ref/class-based-views/flattened-index.txt:336
#: ../../ref/class-based-views/flattened-index.txt:374
#: ../../ref/class-based-views/flattened-index.txt:414
#: ../../ref/class-based-views/flattened-index.txt:454
#: ../../ref/class-based-views/flattened-index.txt:498
#: ../../ref/class-based-views/flattened-index.txt:543
#: ../../ref/class-based-views/generic-display.txt:139
#: ../../ref/class-based-views/mixins-simple.txt:12
#: ../../ref/class-based-views/mixins-simple.txt:67
# 3c26991717244dfbba669ecbe9333b75
# 173d64a436f04a43a353e58c244a1cb3
# f14a4354980d4f49af5fcb125e300ada
# a6a24275e0144bb0aa95cdf958feca58
# 7136ae5944b44d0db18a52f11646a9e6
# 0c61f8c42094455da084b8f82fd399ba
# 3ece351f4a5d4f0ebe9783b77a068fa3
# 84daef5606204dba90953c646de75df4
# 6e5d3cba09c54a10b17fa0082d53bd85
# c2e91ece65844d5d8d0e5c28f7a39586
# a83ddaa69ad04358b00a9f48a749ca9c
# c4d3226cef314e3096b7218a115e6edd
# 33197ac57e9443aeb3f0c422b50c9866
# bbb9d5a4c67241e181a64c0c907e3911
# fc1e18d52cd34ea19adf03a31752bbed
# 70c3d031d7cf44db8b84488cbe122ec8
# 121c078c44fe4f02940657e4c1c4aa21
# 6e4ad202b5a2498a8700710ee289db17
# a195297429f44129b4d57557ddf75c5c
# 6cf9e83cbad9449bbca4594a5037e583
# d5c95bdfe41446be9b7591b8a1489fcf
msgid "**Methods**"
msgstr ""

#: ../../ref/class-based-views/base.txt:60
# 9487fd7cae3e498198998ee1f256b521
msgid "Returns a callable view that takes a request and returns a response::"
msgstr ""

#: ../../ref/class-based-views/base.txt:74
# da6f320e4c4149e4b01d355e6e4b2980
msgid "By default, a ``HEAD`` request will be delegated to :meth:`~View.get()`. If you need to handle ``HEAD`` requests in a different way than ``GET``, you can override the :meth:`~View.head()` method. See :ref:`supporting-other-http-methods` for an example."
msgstr ""

#: ../../ref/class-based-views/base.txt:85
# e14487f0adbd41f98dbeab90da5efc29
msgid "If the view was called with a HTTP method it doesn't support, this method is called instead."
msgstr ""

#: ../../ref/class-based-views/base.txt:88
# 725ec7fc261b40698f5e89620891cde1
msgid "The default implementation returns ``HttpResponseNotAllowed`` with a list of allowed methods in plain text."
msgstr ""

#: ../../ref/class-based-views/base.txt:93
# 6d68986e30804140a9465a5d25cfe061
msgid "Handles responding to requests for the OPTIONS HTTP verb.  Returns a list of the allowed HTTP method names for the view."
msgstr ""

#: ../../ref/class-based-views/base.txt:104
#: ../../ref/class-based-views/base.txt:164
#: ../../ref/class-based-views/generic-date-based.txt:34
#: ../../ref/class-based-views/generic-date-based.txt:87
#: ../../ref/class-based-views/generic-date-based.txt:204
#: ../../ref/class-based-views/generic-date-based.txt:305
#: ../../ref/class-based-views/generic-date-based.txt:410
#: ../../ref/class-based-views/generic-date-based.txt:514
#: ../../ref/class-based-views/generic-date-based.txt:573
#: ../../ref/class-based-views/generic-display.txt:16
#: ../../ref/class-based-views/generic-display.txt:76
#: ../../ref/class-based-views/generic-display.txt:132
#: ../../ref/class-based-views/generic-editing.txt:35
#: ../../ref/class-based-views/generic-editing.txt:82
#: ../../ref/class-based-views/generic-editing.txt:124
#: ../../ref/class-based-views/generic-editing.txt:166
# 3014134aaa1340708d84a818ceb450c4
# 9e0ad52011474d0886ce3ada5d050bff
# 1571a15a75bb468393e688a71005aa77
# 27760cb5522e4f488e1c30599e368b5a
# 31082fd2c63e473297ed9244956debcd
# 2a5c5426caef48b6ac7a7dcda36be548
# 59a381bddfba4ee4bc18ae38f877dc45
# 62f47046b1844c48a29e1261ec651c4c
# d6823318f9d54be0accd4f5e80da522d
# fea89d7058e7483292e32cff3f94a157
# 26b2bec821b742e6b727b2854f60b931
# c54afd106d8b48a4ae99c6e20780b06d
# 512f1ebaa44b4f859562f7c149b3dc21
# c6c4dbea5f8c4fbaba9102098cf85d64
# cbf03f0a68284f188b20263386b65a97
# d8c753f0e1df4d43a4dd0aa20f813f58
msgid "**Ancestors (MRO)**"
msgstr ""

#: ../../ref/class-based-views/base.txt:106
#: ../../ref/class-based-views/generic-display.txt:18
#: ../../ref/class-based-views/generic-display.txt:78
#: ../../ref/class-based-views/generic-display.txt:134
#: ../../ref/class-based-views/generic-editing.txt:37
#: ../../ref/class-based-views/generic-editing.txt:84
#: ../../ref/class-based-views/generic-editing.txt:126
#: ../../ref/class-based-views/generic-editing.txt:168
# fc56c791065543c99a106489505780de
# 0e9f9c379e3b4898b4585fd82fa15d3c
# a82e631cddb1472ba19ec694bbc3417d
# 250abf76eab64095b366f6248384d5f4
# 675a99a160aa48b8b0c4bffea430ef49
# ba6fb0f9328f47028df08a01e0afa3ed
# 05dbbc9d1ab54dd4af114641bf7a4e60
# 586f9d340ea546f1b2e180193b56d4ae
msgid "This view inherits methods and attributes from the following views:"
msgstr ""

#: ../../ref/class-based-views/base.txt:108
# 345fe18d333f414bb963dad5ce3fcc6f
msgid ":class:`django.views.generic.base.TemplateView`"
msgstr ""

#: ../../ref/class-based-views/base.txt:110
#: ../../ref/class-based-views/base.txt:168
#: ../../ref/class-based-views/generic-date-based.txt:43
#: ../../ref/class-based-views/generic-date-based.txt:97
#: ../../ref/class-based-views/generic-date-based.txt:215
#: ../../ref/class-based-views/generic-date-based.txt:316
#: ../../ref/class-based-views/generic-date-based.txt:422
#: ../../ref/class-based-views/generic-date-based.txt:527
#: ../../ref/class-based-views/generic-date-based.txt:585
#: ../../ref/class-based-views/generic-display.txt:24
#: ../../ref/class-based-views/generic-display.txt:85
#: ../../ref/class-based-views/generic-display.txt:137
#: ../../ref/class-based-views/generic-editing.txt:44
#: ../../ref/class-based-views/generic-editing.txt:94
#: ../../ref/class-based-views/generic-editing.txt:136
#: ../../ref/class-based-views/generic-editing.txt:177
#: ../../ref/class-based-views/mixins-editing.txt:173
# 63dd108987aa4c6f8bdd9b5caa8fac2d
# 9c33c169620a40a48e3e94e6d4c34dfb
# 0bbcc77fdbdc42bab155d4d2e6f62331
# 63844d13ce1d4127af6a0ea6cda84ce3
# 5d03db5e7b6e4c76a9218cf6271138ce
# 3adf13d0e38741e3b1791926d0793f77
# 68ddc6e194684776882d5612d5fedfcb
# 9b5b7ff894cd438e93d8b5367e3a9eaa
# e8380ec209f94733a0f53e89a70d3fe4
# 9ab6449ff1b445209cca8a3f7c41ea92
# 241eaacfdda0460496edc194e2e28448
# c5fe2a01a3734978b085cc4947d8566e
# a023075d13084465910089c45453aa8f
# a56ae227fbf1468ab0103a0fbb188a37
# 47317834c1cd473ea698aa301993b6aa
# 73d16b80513b48b590b3c0fb8e2f6c2f
# 403516f0c48b413a8f1da0f23a5ac0e3
msgid ":class:`django.views.generic.base.View`"
msgstr ""

#: ../../ref/class-based-views/base.txt:116
#: ../../ref/class-based-views/generic-display.txt:35
#: ../../ref/class-based-views/generic-display.txt:94
# 37051bc1b08446b5924201d82d2a0b56
# 9d49005cf8ba408daf58ddd6ea55d287
# 91a8842e081d439a91cee8f97761c1e6
msgid ":meth:`get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:166
# 01669b33a38941228de112a7e661a171
msgid "This view inherits methods and attributes from the following view:"
msgstr ""

#: ../../ref/class-based-views/base.txt:174
# 7562a709fb6348bb8a11266f8108b486
msgid ":meth:`get_redirect_url()`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:3
# d12db574a0644dca95fc197ff13ba169
msgid "Class-based generic views - flattened index"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:5
# 7000cbac52fd4359a1481f9cd842770e
msgid "This index provides an alternate organization of the reference documentation for class-based views. For each view, the effective attributes and methods from the class tree are represented under that view. For the reference documentation organized by the class which defines the behavior, see :doc:`Class-based views</ref/class-based-views/index>`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:18
#: ../../ref/class-based-views/flattened-index.txt:33
#: ../../ref/class-based-views/flattened-index.txt:53
#: ../../ref/class-based-views/flattened-index.txt:80
#: ../../ref/class-based-views/flattened-index.txt:112
#: ../../ref/class-based-views/flattened-index.txt:144
#: ../../ref/class-based-views/flattened-index.txt:173
#: ../../ref/class-based-views/flattened-index.txt:211
#: ../../ref/class-based-views/flattened-index.txt:249
#: ../../ref/class-based-views/flattened-index.txt:284
#: ../../ref/class-based-views/flattened-index.txt:318
#: ../../ref/class-based-views/flattened-index.txt:355
#: ../../ref/class-based-views/flattened-index.txt:395
#: ../../ref/class-based-views/flattened-index.txt:433
#: ../../ref/class-based-views/flattened-index.txt:477
#: ../../ref/class-based-views/flattened-index.txt:521
# 7aedbe0caf464d2a9ff478cd329967e1
# 1cf98373fc6a4d3e97f2b64d696a619d
# 6741fdbccddc46e4bf257616a8980de2
# 79a5f0e0010b48d69e14ba1d3b0e40e2
# cc6a9f4b69654adea2460e3a4a6bde75
# 0a517f44991e45ff8579f435f7ca19b5
# a622d9d649424999a9f988f575ab9022
# fc724dad6a37481fad18634211a32854
# fd9a0a98be954c32bfb740787943e8e8
# 32fc81d70773440290cdb38e1c1bb6a8
# 4321b216567847078ece47f7124d1447
# 3336cf1e50c746569eadaecc9b96fdbe
# c214b92d437847b9bbddb8c1ee73b393
# 065f5dac2c1347e8b181e81159fc8b3c
# a03339d94a2c4bc28849a91469904687
# adfbf2ab5be540f598ca0a8ab824c59e
msgid "**Attributes** (with optional accessor):"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:20
#: ../../ref/class-based-views/flattened-index.txt:35
#: ../../ref/class-based-views/flattened-index.txt:55
#: ../../ref/class-based-views/flattened-index.txt:83
#: ../../ref/class-based-views/flattened-index.txt:116
#: ../../ref/class-based-views/flattened-index.txt:147
#: ../../ref/class-based-views/flattened-index.txt:177
#: ../../ref/class-based-views/flattened-index.txt:215
#: ../../ref/class-based-views/flattened-index.txt:252
#: ../../ref/class-based-views/flattened-index.txt:290
#: ../../ref/class-based-views/flattened-index.txt:324
#: ../../ref/class-based-views/flattened-index.txt:361
#: ../../ref/class-based-views/flattened-index.txt:401
#: ../../ref/class-based-views/flattened-index.txt:441
#: ../../ref/class-based-views/flattened-index.txt:485
#: ../../ref/class-based-views/flattened-index.txt:528
# bdfa6dccf95546679049c95d3fc49aa5
# e914ee1858e74cce881cc932ff12ff3a
# 9d7b7298c65e431a9a39b4c6695a47ef
# ae960e34da1e42b0bc93334f318fe663
# ed20e10fa8d641559a8e414385f5e803
# 18b501509f9240cdbd3cbc8367cf7305
# c65c4161c58645c99b57dd8b36176a91
# 7f8298d7462142de9a32e018728355b8
# 7e5f6e47bcdd44f4b6710aebbdbafe24
# fefd111ca44c4bf29c46909fbba0c103
# a29c9becc5874c849bd0f1f8c4fddafa
# 00ada46d528445f98f61c51d3ca529f6
# 4fc4b45bbca9453ab963f8af52fb4340
# a4804feff64f4a778f67b4e90d5efef3
# 16d9fc2159124bd4aaa3d64afa7c2a10
# 347fff80cd614b529f88b3b134ffe81f
msgid ":attr:`~django.views.generic.base.View.http_method_names`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:24
#: ../../ref/class-based-views/flattened-index.txt:41
#: ../../ref/class-based-views/flattened-index.txt:62
#: ../../ref/class-based-views/flattened-index.txt:96
#: ../../ref/class-based-views/flattened-index.txt:127
#: ../../ref/class-based-views/flattened-index.txt:155
#: ../../ref/class-based-views/flattened-index.txt:192
#: ../../ref/class-based-views/flattened-index.txt:230
#: ../../ref/class-based-views/flattened-index.txt:266
#: ../../ref/class-based-views/flattened-index.txt:301
#: ../../ref/class-based-views/flattened-index.txt:338
#: ../../ref/class-based-views/flattened-index.txt:376
#: ../../ref/class-based-views/flattened-index.txt:416
#: ../../ref/class-based-views/flattened-index.txt:456
#: ../../ref/class-based-views/flattened-index.txt:500
#: ../../ref/class-based-views/flattened-index.txt:545
# b39ba180cab44721b7238e3bb395af4d
# 63deaa2a353944f4b8215be54b6fb136
# edd02b71e0964f40b6ac62f2faac90dd
# 95c1aea59abb41d1a69f6a32fa44a3d9
# dad15552cb634d5b848427f112cf8612
# 8758b838b0374e3b929bc4efb1b34aae
# cee12e4d671346698d1fc9a98d58913b
# b76f139540164a409ffaa255b370aa33
# d30c943dc15647efb4ba74675520ff35
# 6770be2ed98a45e289fee5e232be9b3a
# 726e037c2372440399233c540b54b223
# 03d6118eb2ed4861994fa39835c13b00
# af064bfdbf224e9cae69d4f9210739de
# 3f3b2476b27e4f7e9e08bee4c75caa38
# 0f8addf306224b84bcd1621033b4c41c
# 499cd85757054032ae6fd948f3e6e715
msgid ":meth:`~django.views.generic.base.View.as_view`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:25
#: ../../ref/class-based-views/flattened-index.txt:42
#: ../../ref/class-based-views/flattened-index.txt:64
#: ../../ref/class-based-views/flattened-index.txt:97
#: ../../ref/class-based-views/flattened-index.txt:128
#: ../../ref/class-based-views/flattened-index.txt:156
#: ../../ref/class-based-views/flattened-index.txt:193
#: ../../ref/class-based-views/flattened-index.txt:231
#: ../../ref/class-based-views/flattened-index.txt:268
#: ../../ref/class-based-views/flattened-index.txt:302
#: ../../ref/class-based-views/flattened-index.txt:339
#: ../../ref/class-based-views/flattened-index.txt:377
#: ../../ref/class-based-views/flattened-index.txt:417
#: ../../ref/class-based-views/flattened-index.txt:457
#: ../../ref/class-based-views/flattened-index.txt:501
#: ../../ref/class-based-views/flattened-index.txt:546
# 69c9d4e864fb4a0bab242c3e0f1dbd21
# 60f93593a0814c85b189e98086dba363
# b63b42c517a2408cba0b1f6e53dfd4fe
# 07324a82785d4ae28a08342b35c882aa
# eac1e9b8dbb9479290ef54b032a85cff
# 895807639ba9498293328c42cad7f937
# 6e97270e20214140a4a559ad7cd83710
# dcb3f7c4b9384514bdbcf25530a00c9e
# 11080b1e94c24673956254f8332f9ff0
# 6253d8f77b6b4ff3bd5f0f3631754c33
# 5d4862612db94b88b39b2a0e65c393e1
# 8895632cd8334e83908ad5db1ec02d18
# 02aa244791db45baa79c9884ec389a4b
# 32a9b5efe1f74499ae8d87470e2e15cc
# ce9c8b7c4e5b4ef28dcc78d06788d4c9
# 28975caed7624712b889581e88ea543b
msgid ":meth:`~django.views.generic.base.View.dispatch`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:26
#: ../../ref/class-based-views/flattened-index.txt:45
#: ../../ref/class-based-views/flattened-index.txt:67
#: ../../ref/class-based-views/flattened-index.txt:101
#: ../../ref/class-based-views/flattened-index.txt:132
#: ../../ref/class-based-views/flattened-index.txt:163
#: ../../ref/class-based-views/flattened-index.txt:201
#: ../../ref/class-based-views/flattened-index.txt:239
#: ../../ref/class-based-views/flattened-index.txt:272
#: ../../ref/class-based-views/flattened-index.txt:309
#: ../../ref/class-based-views/flattened-index.txt:346
#: ../../ref/class-based-views/flattened-index.txt:386
#: ../../ref/class-based-views/flattened-index.txt:424
#: ../../ref/class-based-views/flattened-index.txt:468
#: ../../ref/class-based-views/flattened-index.txt:512
#: ../../ref/class-based-views/flattened-index.txt:554
# 014d37a8d4184194b42e42738f1d6aeb
# 90d525195a274e74a51705e5169de2d8
# 62660faafbcf4f98b102d373d7745b69
# 73132f4baffa4a82977f8d57c7038cf1
# feae22743c2b4baf94d9fc500471c3ed
# cd8f6b8014e5467b9afed7c91aa32fe6
# 36a56b7fdbad49b6a51bc71b57daab7f
# aec8f268d7a241a08feb22ce69776e60
# df51b640cc6e46b395f48c44c8b874b6
# f10c73a78de94a1d8ef9c3cb72c28e8c
# 3e052462d06b4249b7d8f90bcdcce2bb
# eee1d8865faf43f48963b231e4f8fe25
# 5901b43372a2410998e7ec0a68fd63cb
# 5f4a9e1a48564e3e8e9e475f8f0bb256
# ee329bb5e3d4405d9d9096c335164664
# 2d040366217343e2a66f1cff44896f96
msgid ":meth:`~django.views.generic.base.View.head`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:27
#: ../../ref/class-based-views/flattened-index.txt:46
#: ../../ref/class-based-views/flattened-index.txt:68
#: ../../ref/class-based-views/flattened-index.txt:102
#: ../../ref/class-based-views/flattened-index.txt:133
#: ../../ref/class-based-views/flattened-index.txt:164
#: ../../ref/class-based-views/flattened-index.txt:202
#: ../../ref/class-based-views/flattened-index.txt:240
#: ../../ref/class-based-views/flattened-index.txt:273
#: ../../ref/class-based-views/flattened-index.txt:310
#: ../../ref/class-based-views/flattened-index.txt:347
#: ../../ref/class-based-views/flattened-index.txt:387
#: ../../ref/class-based-views/flattened-index.txt:425
#: ../../ref/class-based-views/flattened-index.txt:469
#: ../../ref/class-based-views/flattened-index.txt:513
#: ../../ref/class-based-views/flattened-index.txt:555
# 9141de513a054501ba2c3c89c96846dd
# d250f99c623d4284a91cab2e2a5a7979
# 683b710df5ef480fa0dcc1592d4b8161
# 8675941a1e364912b4145458c080c2fc
# c5479e4ecfe34cfd9c6403bd49f9c7a7
# 868bf40ed64c48e2980c287236756370
# 5dc52e58c41246eeab8a5c66a559ac9f
# 7cd01ba371ce40a1a2c894acad9ed108
# 074d6029911f496880815944d8cbc5be
# be1753e1b89c43d194d55e2e659527d4
# c134b9f0ab0148018b76c4c1628e8485
# f576816a2d4f4f26abd616bacc96dc0a
# e5f7a6601a6840ce9f563d3f927165de
# b14d303bbf08470ab6bded8e47ccb6f1
# bf9f13c3b7ab40c8be82ac25cc863c79
# 28973cb8cc864fedb2aab61a72464a0a
msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:36
#: ../../ref/class-based-views/flattened-index.txt:87
#: ../../ref/class-based-views/flattened-index.txt:121
#: ../../ref/class-based-views/flattened-index.txt:149
#: ../../ref/class-based-views/flattened-index.txt:182
#: ../../ref/class-based-views/flattened-index.txt:220
#: ../../ref/class-based-views/flattened-index.txt:256
#: ../../ref/class-based-views/flattened-index.txt:295
#: ../../ref/class-based-views/flattened-index.txt:330
#: ../../ref/class-based-views/flattened-index.txt:368
#: ../../ref/class-based-views/flattened-index.txt:406
#: ../../ref/class-based-views/flattened-index.txt:448
#: ../../ref/class-based-views/flattened-index.txt:492
#: ../../ref/class-based-views/flattened-index.txt:534
# a6f1ad5d08a944409d3ae6ffc1ee4271
# 613ca9cd21474530a4e4f9ffad201cf4
# cbd0fc84f23d456ba4a2a1442618e911
# 9c34cb77d26e45db8b8957c8e9a02fb4
# 4b75ab9a09d64befa6080297fc22890d
# acdb3d3eb9c14f14b00cd52e2b4105f1
# dcc354a0db724b8585285a5807f4005a
# 2753d335e6b74792905f540dd4cd1f2e
# 93c47e5c610844c6bd337ad31bdcf421
# 45c549cf11044c768f0c613d203b7346
# 9aaa25b0718a4110b87c83e64597b293
# ff2284c1bfaa40028d02ce5ef5652f3d
# 064d627963e64eb7917f3207d019e471
# e14faf31c6054ed19a8d6496479c1650
msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.response_class`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:37
#: ../../ref/class-based-views/flattened-index.txt:90
#: ../../ref/class-based-views/flattened-index.txt:122
#: ../../ref/class-based-views/flattened-index.txt:151
#: ../../ref/class-based-views/flattened-index.txt:186
#: ../../ref/class-based-views/flattened-index.txt:224
#: ../../ref/class-based-views/flattened-index.txt:260
#: ../../ref/class-based-views/flattened-index.txt:296
#: ../../ref/class-based-views/flattened-index.txt:331
#: ../../ref/class-based-views/flattened-index.txt:369
#: ../../ref/class-based-views/flattened-index.txt:407
#: ../../ref/class-based-views/flattened-index.txt:449
#: ../../ref/class-based-views/flattened-index.txt:493
#: ../../ref/class-based-views/flattened-index.txt:537
# 6513910d40a54329a1031c1af40bf03c
# f6424a1471ba403fab099c0b331dea1f
# e702dcbba7ec4eb28307d926472f6252
# a81bb2efbdaa4469934f9ff6b3d0c034
# 31918403441244f69566980b46b3a88b
# 7f8af2654ab5416395a254d5dab0b72a
# 3909d3f644e841ff85735549ce2e0864
# 23ca52db22704804ab563ca835d7ad6a
# d5980e0a186843a4bc12e1f4480bd8f7
# 9febe13896b246788852f42bd8696039
# ed50271d691943049954a9fd2e4c212a
# 8274d3de72a0483d89eb4ef7ad9c95ec
# 243cbcc11eb34320819622293a33eeba
# 58b48dee9142409fb2a6572f0c9000fd
msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` [:meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:43
# 37755597d9bf4b47861c9fa426fc5a63
msgid ":meth:`~django.views.generic.base.TemplateView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:44
# 025e7050b33349cbb9b9efa0ff2c7d44
msgid ":meth:`~django.views.generic.base.TemplateView.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:47
#: ../../ref/class-based-views/flattened-index.txt:103
#: ../../ref/class-based-views/flattened-index.txt:135
#: ../../ref/class-based-views/flattened-index.txt:167
#: ../../ref/class-based-views/flattened-index.txt:205
#: ../../ref/class-based-views/flattened-index.txt:243
#: ../../ref/class-based-views/flattened-index.txt:275
#: ../../ref/class-based-views/flattened-index.txt:312
#: ../../ref/class-based-views/flattened-index.txt:349
#: ../../ref/class-based-views/flattened-index.txt:389
#: ../../ref/class-based-views/flattened-index.txt:427
#: ../../ref/class-based-views/flattened-index.txt:471
#: ../../ref/class-based-views/flattened-index.txt:515
#: ../../ref/class-based-views/flattened-index.txt:556
# 0e262fce2141407a8c7930558512846f
# 4f75955588f748b1ae05a510042dd82b
# af9e054ba090498ba9d46794abbdb5ad
# 86473bc6459549e9864334193bde3c02
# 8f2ef9c534454812b3f4eaaf6100fc60
# 1199607f6e034e77b5b48ee053731583
# 2e6782731bc3470a94c15599b6b6cc56
# c2b34dcc5f2e44c68d2df097d5b9ed6a
# ef456fc19bae4bb7b3242f2ac9938af8
# 4bd7a316ee76470598f073438f8f2861
# 53b3a5374b53412bbfe1ff34771a8ff3
# 967dcbd0007d43ecbfe2550c7a6bc61b
# 376b3c697c67477bb0b1d4cc504a8fd1
# 94b8dfc7c6dc4fedb18ca3186935102e
msgid ":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:56
# d789e082341c42e688ae76dd36bd31a7
msgid ":attr:`~django.views.generic.base.RedirectView.permanent`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:57
# c296dad70e8642c9abaeffc98cab4886
msgid ":attr:`~django.views.generic.base.RedirectView.query_string`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:58
# 0332ab88a15a4d24bfd4c1f7fdd66899
msgid ":attr:`~django.views.generic.base.RedirectView.url`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:63
# 5875cff2320948c09a4dd51511e9673a
msgid ":meth:`~django.views.generic.base.RedirectView.delete`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:65
# 149baeda3b4f4b5cbcaab7356eb4eb42
msgid ":meth:`~django.views.generic.base.RedirectView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:66
# 4b67fb9da2d943358d1ed54644bf6da2
msgid ":meth:`~django.views.generic.base.RedirectView.get_redirect_url`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:69
# e44820fb079f4905b432955ae3952604
msgid ":meth:`~django.views.generic.base.RedirectView.options`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:70
# 87dd811d576a4040a788dc68e208fddd
msgid ":meth:`~django.views.generic.base.RedirectView.post`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:71
# 301e7b4519fa4437a8bb7a57371da547
msgid ":meth:`~django.views.generic.base.RedirectView.put`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:74
# f64945f9a702432491d0846ebaca817b
msgid "Detail Views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:82
#: ../../ref/class-based-views/flattened-index.txt:175
#: ../../ref/class-based-views/flattened-index.txt:213
#: ../../ref/class-based-views/flattened-index.txt:251
#: ../../ref/class-based-views/flattened-index.txt:524
# aa9ae4e7d6d44b0ea26d4c857c509a56
# 196d064b17b847e7ab9731f2a7eeaf02
# c57caa359cbf43a6bfb91ce79c4660e1
# 6b1cb495bb364cff9d55b32d7be49c44
# 8f7030cf92c54ad586f0ea4aaa70f47a
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` [:meth:`~django.views.generic.detail.SingleObjectMixin.get_context_object_name`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:84
#: ../../ref/class-based-views/flattened-index.txt:179
#: ../../ref/class-based-views/flattened-index.txt:217
#: ../../ref/class-based-views/flattened-index.txt:253
#: ../../ref/class-based-views/flattened-index.txt:529
# 900eab4052b646cda9e3fbeb6ec0369f
# 7ad303e57ffd4850bb9e1b518e3b84a2
# 9abac65d6e8f44b997d65c33484ac0f0
# 371aa00a7ec0403eb2e794eeb474ce85
# 1af2ab7aaf2e4660885a115463da4255
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:85
#: ../../ref/class-based-views/flattened-index.txt:180
#: ../../ref/class-based-views/flattened-index.txt:218
#: ../../ref/class-based-views/flattened-index.txt:254
#: ../../ref/class-based-views/flattened-index.txt:532
# 3d9e146768144894b48fd92432512387
# 5bc2385ef2f343d18e75e412ef6c5ae6
# dedcd8986df24e08ab6bf1b5f11a0cec
# f19e947d75d94c578c2afae7276b6b8b
# c0f17dd6856c492d9af03650350b312f
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:86
#: ../../ref/class-based-views/flattened-index.txt:181
#: ../../ref/class-based-views/flattened-index.txt:219
#: ../../ref/class-based-views/flattened-index.txt:255
#: ../../ref/class-based-views/flattened-index.txt:533
# 13a0d40069e7443a9e479030f2bece98
# c18310c6b1d641ef9ed650d3aee41ed6
# bf058f599ead4274bdcd94f5ca45bed0
# 9e2e2d4791234d7c8e844635e05660f8
# 157aa0a5957a4a5692916310844ed4ac
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` [:meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:88
#: ../../ref/class-based-views/flattened-index.txt:183
#: ../../ref/class-based-views/flattened-index.txt:221
#: ../../ref/class-based-views/flattened-index.txt:257
#: ../../ref/class-based-views/flattened-index.txt:535
# b0a58da3e249472fb5fb32c109c47ee4
# ae93eb77924b4568a8a58282423ee18d
# b93136145dcb410a905a21aeee6eecc9
# 542c98bc002440c989e272c167c4d049
# c63b8271170e4b749522c53e92566bef
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` [:meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:89
#: ../../ref/class-based-views/flattened-index.txt:184
#: ../../ref/class-based-views/flattened-index.txt:222
#: ../../ref/class-based-views/flattened-index.txt:258
#: ../../ref/class-based-views/flattened-index.txt:536
# 45a551c52e5f48699356d695f5e8f220
# 1223561d5f884f919c5b05f09dd60f2e
# 023ffa85b93e44cead6eb8535c602381
# ede69beb92324a5da9177701dbb7bcf5
# 6e2b5b0214f4463cba289ff94c2bb4bc
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:91
#: ../../ref/class-based-views/flattened-index.txt:187
#: ../../ref/class-based-views/flattened-index.txt:225
#: ../../ref/class-based-views/flattened-index.txt:261
#: ../../ref/class-based-views/flattened-index.txt:538
# d9c8ab24cda242fb91b7a560e3293fab
# ea2d9ea396674c96a3ca7632148ffd6b
# c007df6d3cd94019b4db4296a037a801
# d3b6180d4536400ea110701262313bf8
# cb5fda82d07e4e26a2a4f5b063b840f5
msgid ":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_field`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:92
#: ../../ref/class-based-views/flattened-index.txt:188
#: ../../ref/class-based-views/flattened-index.txt:226
#: ../../ref/class-based-views/flattened-index.txt:262
#: ../../ref/class-based-views/flattened-index.txt:539
# e6d6e3edcc4547a9b282c597aaaae783
# abbd05f47f874390b27cde5cf5af6913
# 90106521dd2f4720bd8b880dbc2d49d8
# 238acefb8dc44ef1b8d15a6495419ffe
# 251e28a64cc94bc08321a364f9374f49
msgid ":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:98
#: ../../ref/class-based-views/flattened-index.txt:269
#: ../../ref/class-based-views/flattened-index.txt:547
# 2eef482b35a748f48124d51bf6ab6d19
# 7e1e0cd41ddb48f086eed5570c70356d
# 445b88f697a44cbb98b3b3d7eac6945d
msgid ":meth:`~django.views.generic.detail.BaseDetailView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:99
#: ../../ref/class-based-views/flattened-index.txt:270
#: ../../ref/class-based-views/flattened-index.txt:548
# ae87a09e95c7410a87590b1b57df3f47
# 77dffe5653124027abeba5498890563e
# 0b640f02f83e4a27a8079cbfd031a865
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:100
#: ../../ref/class-based-views/flattened-index.txt:200
#: ../../ref/class-based-views/flattened-index.txt:238
#: ../../ref/class-based-views/flattened-index.txt:271
#: ../../ref/class-based-views/flattened-index.txt:551
# 0b886c7c23084e918eec6a7bf95b5bb8
# 6086b1dd46cd4add87fe9c92ab23d1d1
# ed6d121e7df3489f850afe621a6515c8
# 36244cf23f5d4bd7a3adc6be1dde0880
# 1901c865061d4f958009aaff74295fd1
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:106
# 92f729125a2e434e9ee5d6e9f773de35
msgid "List Views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:114
#: ../../ref/class-based-views/flattened-index.txt:286
#: ../../ref/class-based-views/flattened-index.txt:320
#: ../../ref/class-based-views/flattened-index.txt:357
#: ../../ref/class-based-views/flattened-index.txt:397
#: ../../ref/class-based-views/flattened-index.txt:435
#: ../../ref/class-based-views/flattened-index.txt:479
# 8ff18e2607b347759688740bcb1028c1
# 1470001aba564213ab018ea17832d426
# 7ef29319501941a0973f255a6085a902
# cb31ab8bef41404ead34f2ae0244ea55
# 3537ff4632284f07a643c38d0a09e6b9
# 38d2eef7a9ca440fbcf7b6e911791fb7
# 81728876e2f54bdc8220ed3875ec45c8
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:115
#: ../../ref/class-based-views/flattened-index.txt:288
#: ../../ref/class-based-views/flattened-index.txt:322
#: ../../ref/class-based-views/flattened-index.txt:359
#: ../../ref/class-based-views/flattened-index.txt:399
#: ../../ref/class-based-views/flattened-index.txt:437
#: ../../ref/class-based-views/flattened-index.txt:481
# b64c1511ef064509b2f9395faab0ced3
# 1803df78d588478db5e51fac3b300b0d
# 65424ad523cb4cfbb7fc72f907494836
# 2b3785931f3440e79d65cbbd86d082a2
# 5293a2c4b9c942b1920be510c0598729
# 23728dee00e54bb1ab3d879daf2a877b
# e2fdb4f832cd46bea06e1dfbd17662ab
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_context_object_name`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:117
#: ../../ref/class-based-views/flattened-index.txt:291
#: ../../ref/class-based-views/flattened-index.txt:326
#: ../../ref/class-based-views/flattened-index.txt:362
#: ../../ref/class-based-views/flattened-index.txt:402
#: ../../ref/class-based-views/flattened-index.txt:442
#: ../../ref/class-based-views/flattened-index.txt:486
# e4aed998377a4f51b6c6d59640690f4e
# 60957c8814f34008a5fe8e3ac91f237d
# 1d43c561591b4b19836a260c97d915a9
# 4ae1ce2e0cd74460a71b2f1ec832e40d
# 78f9328505dc496680e9bf78a34096c3
# d5e221c7e138428282dc5acdaf0d82f4
# 9a53824710b6424fbc219625e410677e
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:118
#: ../../ref/class-based-views/flattened-index.txt:292
#: ../../ref/class-based-views/flattened-index.txt:327
#: ../../ref/class-based-views/flattened-index.txt:365
#: ../../ref/class-based-views/flattened-index.txt:403
#: ../../ref/class-based-views/flattened-index.txt:445
#: ../../ref/class-based-views/flattened-index.txt:489
# 8d0ee879043e4eb49664a8a4fb18dc82
# cd09bb8f526148e689c6e1259362d417
# 0371b43b7a654245ac16b65a83c47989
# 120933274bf54154875407131e24b717
# a02bcd4f78804416a7720a6e82aa935f
# 78026dda75a44474ba5ac026cc97c5e9
# d811c867687a43bf93003bb21f1a3af6
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:119
#: ../../ref/class-based-views/flattened-index.txt:293
#: ../../ref/class-based-views/flattened-index.txt:328
#: ../../ref/class-based-views/flattened-index.txt:366
#: ../../ref/class-based-views/flattened-index.txt:404
#: ../../ref/class-based-views/flattened-index.txt:446
#: ../../ref/class-based-views/flattened-index.txt:490
# 4e477f4227a144bea79ac59a63d09bb6
# fb5697f0fa31453196c65c389a4e55f1
# 30c3ab45dfb14a01bb844f191d3872a8
# 5744c3f6195a4ecc80e017c8e45630cf
# f2612817f0294e34a220df2fa5eb2878
# 591a0d225f7d4d49ad724179e12a26a9
# e6c8c13997fc4e548e5010ec9fdced7e
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:120
#: ../../ref/class-based-views/flattened-index.txt:294
#: ../../ref/class-based-views/flattened-index.txt:329
#: ../../ref/class-based-views/flattened-index.txt:367
#: ../../ref/class-based-views/flattened-index.txt:405
#: ../../ref/class-based-views/flattened-index.txt:447
#: ../../ref/class-based-views/flattened-index.txt:491
# f35fe7980366459ea542c4e1aff5da97
# 457431c57feb4d44ba7247f6a29aba43
# 0cb8db473b8045fb8b36f126d182b0cb
# de781979882643a8a9858321d560ddc2
# f042bb88ff2c446b81948a0084ee8c31
# 98383c65b3204c64821ab6b78186edb7
# aa6f93424c814586a1fafd54e3bbfe2b
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` [:meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:123
#: ../../ref/class-based-views/flattened-index.txt:297
#: ../../ref/class-based-views/flattened-index.txt:332
#: ../../ref/class-based-views/flattened-index.txt:370
#: ../../ref/class-based-views/flattened-index.txt:408
#: ../../ref/class-based-views/flattened-index.txt:450
#: ../../ref/class-based-views/flattened-index.txt:494
# 733657f9c27848738ffc8678f4c428d6
# 08ae35d6808c486397f965ce5c003a16
# 5915d3657b084786bc3d082831ef1288
# 3467ed55260b4622bdc8a0eedc63046a
# cef78aa835a24f38916614af7f383422
# de15239a2d224f7baf134560fe5ad339
# 31d726b0c8c6467daca46f9e5e6389a0
msgid ":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:129
# c247f6caceac4787a399a6bc0dbce903
msgid ":meth:`~django.views.generic.list.BaseListView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:130
#: ../../ref/class-based-views/flattened-index.txt:304
#: ../../ref/class-based-views/flattened-index.txt:341
#: ../../ref/class-based-views/flattened-index.txt:379
#: ../../ref/class-based-views/flattened-index.txt:419
#: ../../ref/class-based-views/flattened-index.txt:459
#: ../../ref/class-based-views/flattened-index.txt:503
# a11d9cb727cd4fca8058cb9c5deb7e87
# de4d391456d2455587e4175215189772
# b51c12c3791046b28349d8cec946e8f7
# 8b0afdd42c06461e9ee16b6e82abe73f
# e216e5f664584ab680bcd1da93899d72
# 894fad127e6642cab98c340e4881cb2a
# 51bf253873024ccd96b5f5e556ee6f8e
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:131
#: ../../ref/class-based-views/flattened-index.txt:308
#: ../../ref/class-based-views/flattened-index.txt:345
#: ../../ref/class-based-views/flattened-index.txt:384
#: ../../ref/class-based-views/flattened-index.txt:423
#: ../../ref/class-based-views/flattened-index.txt:465
#: ../../ref/class-based-views/flattened-index.txt:509
# 3c77513e0ac944e68e829d368a06dc88
# ebbce4dd24664b0cac13c5e4f0e3b051
# 4eb1409d3b9b4441946148ccfee27fe6
# bb6a19c15c0f404c95431069d660a173
# 08bd03afeaab4a088b307b9796b76e0c
# edd5e140c0b94c1e99cd420c9934953f
# c9754c6416cf4c7a83d8d3ba86968a47
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:134
#: ../../ref/class-based-views/flattened-index.txt:311
#: ../../ref/class-based-views/flattened-index.txt:348
#: ../../ref/class-based-views/flattened-index.txt:388
#: ../../ref/class-based-views/flattened-index.txt:426
#: ../../ref/class-based-views/flattened-index.txt:470
#: ../../ref/class-based-views/flattened-index.txt:514
# 2c5468568bf2476d852b5673a22bbc65
# 00caee6696c74f29b3d4f39bbad56449
# 6a8baaa939cd4b4ebd1103865de25fbd
# 97d0b653c49a475780f2beaf58f90210
# ed21287935ae41e0b89149aec95f3166
# 761257b5f7a5486ca6caf8dd5c99ef00
# 7f90ca895ad343079613850715059947
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:146
#: ../../ref/class-based-views/flattened-index.txt:176
#: ../../ref/class-based-views/flattened-index.txt:214
# ebddf0ce47a84b4494ebc7f7d1070044
# cb251611190a4f5cba3be2a8e28d183e
# e83b4977cb934f2a94101acad07596be
msgid ":attr:`~django.views.generic.edit.FormMixin.form_class` [:meth:`~django.views.generic.edit.FormMixin.get_form_class`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:148
#: ../../ref/class-based-views/flattened-index.txt:178
#: ../../ref/class-based-views/flattened-index.txt:216
# 78ca265cd3de4eb8a8451664e153f6c1
# 9e692c31d1764b35aa036902cdfc1e4d
# cc23c37476254f76996272d16b8e23f5
msgid ":attr:`~django.views.generic.edit.FormMixin.initial` [:meth:`~django.views.generic.edit.FormMixin.get_initial`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:150
#: ../../ref/class-based-views/flattened-index.txt:185
#: ../../ref/class-based-views/flattened-index.txt:223
# b069e6a6788f4529a8704bb856b7417a
# e74fac47dac14c3da337f1a9a3dc994b
# 0019d67d8e5a4ab1be55691ef0f53607
msgid ":attr:`~django.views.generic.edit.FormMixin.success_url` [:meth:`~django.views.generic.edit.FormMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:157
#: ../../ref/class-based-views/flattened-index.txt:194
#: ../../ref/class-based-views/flattened-index.txt:232
# 8e032ebcdb21425e86338664ee8e5e93
# 52e41aa68b4a424c972c0df42622b0d7
# 0137d172a7fe490783615dad3424d74b
msgid ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:158
#: ../../ref/class-based-views/flattened-index.txt:195
#: ../../ref/class-based-views/flattened-index.txt:233
# 7d4f7378962e44b1a9739b53a421209f
# f3772ed7177f4be59a7c12780ad7cdb6
# bf645a2215c840e4a9e40b04126c42e7
msgid ":meth:`~django.views.generic.edit.FormMixin.form_valid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:159
#: ../../ref/class-based-views/flattened-index.txt:196
#: ../../ref/class-based-views/flattened-index.txt:234
# a5dda77101be41fb9ccd3ecf677decb4
# e1026177f93541499591e7d5436159ca
# 07dd7e90159e4e4b9cc8bc48e23ce473
msgid ":meth:`~django.views.generic.edit.ProcessFormView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:160
#: ../../ref/class-based-views/flattened-index.txt:197
#: ../../ref/class-based-views/flattened-index.txt:235
# 2571a55f52f848cb9b8643d787f98a51
# e865f624123a47c788dcd40c99800b1c
# ccf49b8359ec4eba81361e6d412926ab
msgid ":meth:`~django.views.generic.edit.FormMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:161
#: ../../ref/class-based-views/flattened-index.txt:198
#: ../../ref/class-based-views/flattened-index.txt:236
# a7e370c11489458ca2fa14449e73c1a8
# b3e237e6a750493d8f845a5b05184c3d
# 9357c35f8f7841638f0c6ed1959ed55b
msgid ":meth:`~django.views.generic.edit.FormMixin.get_form`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:162
#: ../../ref/class-based-views/flattened-index.txt:199
#: ../../ref/class-based-views/flattened-index.txt:237
# ff71a85f1a5b45e88963e43f79d914fc
# 0b9dc7a6090e40ef8d129a81ba057058
# 2258d220174b46d6aabdc109b6af546d
msgid ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:165
#: ../../ref/class-based-views/flattened-index.txt:203
#: ../../ref/class-based-views/flattened-index.txt:241
# 376ad61146104becbd24fbe154623e5f
# 2d12cfdf94954c8a86fe87dbc7a607f5
# 4d3d673dfe864a538aeb8553ffa29a12
msgid ":meth:`~django.views.generic.edit.ProcessFormView.post`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:166
#: ../../ref/class-based-views/flattened-index.txt:204
#: ../../ref/class-based-views/flattened-index.txt:242
# b3a2dc8cf63245a1b011b6a21c5f2061
# 1dc1c09589e24e3790d625071eb2a2e0
# 5b67d0f7dd4e4a9ebabcc07ce12d78ee
msgid ":meth:`~django.views.generic.edit.ProcessFormView.put`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:259
# ed6e8c495a5448509df82a1847cd5880
msgid ":attr:`~django.views.generic.edit.DeletionMixin.success_url` [:meth:`~django.views.generic.edit.DeletionMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:267
# f3d4b98ff7504d85908e47af30d1b49f
msgid ":meth:`~django.views.generic.edit.DeletionMixin.delete`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:274
# 8b40586e38a64bbbb8cfa750d3d2d406
msgid ":meth:`~django.views.generic.edit.DeletionMixin.post`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:287
#: ../../ref/class-based-views/flattened-index.txt:321
#: ../../ref/class-based-views/flattened-index.txt:358
#: ../../ref/class-based-views/flattened-index.txt:398
#: ../../ref/class-based-views/flattened-index.txt:436
#: ../../ref/class-based-views/flattened-index.txt:480
#: ../../ref/class-based-views/flattened-index.txt:523
# 0c94083eb35741da95132ceded199603
# 31cde0ae82fb46ccb6e987fc6991387e
# 995664053eaa410bbe15cb597fed182d
# da0376ce6bc546b78cba122d1763845f
# b37afc0dacd24b8da7de6a45a249c3c3
# 1550013e320e4ebf96ba08cfd3d4d2a5
# bf1d6dbdc58e4f0095ad1c7280a0867d
msgid ":attr:`~django.views.generic.dates.DateMixin.allow_future` [:meth:`~django.views.generic.dates.DateMixin.get_allow_future`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:289
#: ../../ref/class-based-views/flattened-index.txt:323
#: ../../ref/class-based-views/flattened-index.txt:360
#: ../../ref/class-based-views/flattened-index.txt:400
#: ../../ref/class-based-views/flattened-index.txt:438
#: ../../ref/class-based-views/flattened-index.txt:482
#: ../../ref/class-based-views/flattened-index.txt:525
# b34209c3b529462f87845d2bad93edcf
# c7cf67923e15417b8805b6bd3df46ca6
# 0b3e0da4803944a7a7995e326ddb2009
# 3d085322c0f14211a1d1368a5fd124c9
# 992a74390d944c00bb89924d71cd5cd4
# a75b5d33087e442598bd38dd3760356c
# 22e451f7ea6548559deccc8647571797
msgid ":attr:`~django.views.generic.dates.DateMixin.date_field` [:meth:`~django.views.generic.dates.DateMixin.get_date_field`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:303
#: ../../ref/class-based-views/flattened-index.txt:340
#: ../../ref/class-based-views/flattened-index.txt:378
#: ../../ref/class-based-views/flattened-index.txt:418
#: ../../ref/class-based-views/flattened-index.txt:458
#: ../../ref/class-based-views/flattened-index.txt:502
# 9cccad4736364a349a4c91bbe322a8c2
# 12deb65d7fbe4cca8e9ff9224353f0c7
# 61104f1c14bb42b8b82a052268bdbc78
# c777f44680c446288c3cdc7be7c27f1f
# 69477880c1a34739840b8dc51299b248
# fb881f97bb59486681fd291693955875
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:305
#: ../../ref/class-based-views/flattened-index.txt:342
#: ../../ref/class-based-views/flattened-index.txt:380
#: ../../ref/class-based-views/flattened-index.txt:420
#: ../../ref/class-based-views/flattened-index.txt:460
#: ../../ref/class-based-views/flattened-index.txt:504
# ffc2d46ecf784d84a1a60cbbc1657e24
# 3521ff6f4fc0462bb618f6197151ca71
# 1e1e0b00dd844550b635b7de118d8e53
# b4580441964442bd998f9a990f671fab
# a430d6a3b2b84d8a86ae5b0d85b2f86f
# 55efc4dadec549dca7f09465b8bc3d54
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:306
#: ../../ref/class-based-views/flattened-index.txt:343
#: ../../ref/class-based-views/flattened-index.txt:381
#: ../../ref/class-based-views/flattened-index.txt:421
#: ../../ref/class-based-views/flattened-index.txt:461
#: ../../ref/class-based-views/flattened-index.txt:505
# 4c9fa131da6d4a81b5a03c1959ee3e96
# 940cea0399f64e9192e8dbf705497e2c
# a2ecde37b8c045cd9c779a589db862a7
# 2f55e892101d4fd5a7d9e9c514aa860a
# c7a22d143068416e80621be1450f73c1
# 28461f7282524377a0e8d918ec0fd7de
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:307
#: ../../ref/class-based-views/flattened-index.txt:344
#: ../../ref/class-based-views/flattened-index.txt:382
#: ../../ref/class-based-views/flattened-index.txt:422
#: ../../ref/class-based-views/flattened-index.txt:462
#: ../../ref/class-based-views/flattened-index.txt:506
# 269cf9bfe53d484abbfbdc724dd8840d
# 2ffa297224cd4572b46b59a2d2f656f3
# 781f61282d244c6f9389e6b9b1f406a2
# bf1114032f064daba0b5ed360828b148
# d2895a393b324c91a87c7a24f53aafa0
# a5d5c7a6f07b4023be3108bb26735787
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:325
# 9eae563fb7e94fa888e684b9dff03727
msgid ":attr:`~django.views.generic.dates.BaseYearArchiveView.make_object_list` [:meth:`~django.views.generic.dates.BaseYearArchiveView.get_make_object_list`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:333
#: ../../ref/class-based-views/flattened-index.txt:371
#: ../../ref/class-based-views/flattened-index.txt:411
#: ../../ref/class-based-views/flattened-index.txt:451
#: ../../ref/class-based-views/flattened-index.txt:495
#: ../../ref/class-based-views/flattened-index.txt:540
# 1c983214beeb44ca9ab09080ac3de53a
# f3bdd633da0c4efbafb326703175c000
# a62b97a5149f4b2695049e4699561d7a
# e8f409eb9c714715ae2ea7d0200981fc
# fba6875f41dd416eb62987ebfac4c177
# d815982adc334af2b1ee6991751a45dd
msgid ":attr:`~django.views.generic.dates.YearMixin.year` [:meth:`~django.views.generic.dates.YearMixin.get_year`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:334
#: ../../ref/class-based-views/flattened-index.txt:372
#: ../../ref/class-based-views/flattened-index.txt:412
#: ../../ref/class-based-views/flattened-index.txt:452
#: ../../ref/class-based-views/flattened-index.txt:496
#: ../../ref/class-based-views/flattened-index.txt:541
# 2a1f5d6077074ca9ac067b04b410e2db
# 39bda85dc2e243d4a2247234692b14cf
# 5e8aa7138fe64d40981ca29945c283f6
# ec488b55a4514b9b9194df238332355b
# de242952acd9471785e3d41f81ca5601
# 6a3652ea2d574db990a0827b10fdd525
msgid ":attr:`~django.views.generic.dates.YearMixin.year_format` [:meth:`~django.views.generic.dates.YearMixin.get_year_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:363
#: ../../ref/class-based-views/flattened-index.txt:443
#: ../../ref/class-based-views/flattened-index.txt:487
#: ../../ref/class-based-views/flattened-index.txt:530
# 0dec97d9384a46598af71ebfa8dc7537
# 992512a0f47f489693f56ed63b731899
# d63ce72295564f948d291011deaf4236
# 8b88a4a8a53a46d2abf1f1b25eb51e9c
msgid ":attr:`~django.views.generic.dates.MonthMixin.month` [:meth:`~django.views.generic.dates.MonthMixin.get_month`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:364
#: ../../ref/class-based-views/flattened-index.txt:444
#: ../../ref/class-based-views/flattened-index.txt:488
#: ../../ref/class-based-views/flattened-index.txt:531
# 5e436549a0f14ab38a572338e5e48b54
# cad841297bdd4de78cabaf7b33d8a58c
# ddda1b9a5c264fc48b86a4f692b8feb6
# 6c1b243ba3b2432db6871019eb893213
msgid ":attr:`~django.views.generic.dates.MonthMixin.month_format` [:meth:`~django.views.generic.dates.MonthMixin.get_month_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:383
#: ../../ref/class-based-views/flattened-index.txt:464
#: ../../ref/class-based-views/flattened-index.txt:508
#: ../../ref/class-based-views/flattened-index.txt:550
# ab1bb84c999a4834913945e6a088e269
# 50f2acd2fc8b4beab833bd4ed664a343
# e31b87bd610c43a0ac38fa659222b9cf
# 2c4600b8f408478bb424f499206fc4e4
msgid ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:385
#: ../../ref/class-based-views/flattened-index.txt:467
#: ../../ref/class-based-views/flattened-index.txt:511
#: ../../ref/class-based-views/flattened-index.txt:553
# 07e853a2f001461796ed15b52eb4e268
# 53eaa808cfa347448a060ff572321343
# 132321559f7840e3a2a45eb0b82ad772
# 95b101de37dc47a6a2e35351ddbf89c1
msgid ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:409
# 0f18fbd72a4b4c19a8e0db038a1f05df
msgid ":attr:`~django.views.generic.dates.WeekMixin.week` [:meth:`~django.views.generic.dates.WeekMixin.get_week`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:410
# 4bc980c66653417a9d0a4f955ac8d4c6
msgid ":attr:`~django.views.generic.dates.WeekMixin.week_format` [:meth:`~django.views.generic.dates.WeekMixin.get_week_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:439
#: ../../ref/class-based-views/flattened-index.txt:483
#: ../../ref/class-based-views/flattened-index.txt:526
# c607811a7c99456a9db80bcbe6046fbc
# 16affa135a594ed184665b27649760ab
# de1b4a5d688745f990609325902e0750
msgid ":attr:`~django.views.generic.dates.DayMixin.day` [:meth:`~django.views.generic.dates.DayMixin.get_day`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:440
#: ../../ref/class-based-views/flattened-index.txt:484
#: ../../ref/class-based-views/flattened-index.txt:527
# 5bb7abcc3abd49ec8ada4dc1d7bfd117
# f1118b48f5d949c4808754b28b372338
# c8a62f8ad15b4d2585d893234d02483a
msgid ":attr:`~django.views.generic.dates.DayMixin.day_format` [:meth:`~django.views.generic.dates.DayMixin.get_day_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:463
#: ../../ref/class-based-views/flattened-index.txt:507
#: ../../ref/class-based-views/flattened-index.txt:549
# 1931689ed0de4f5c801f7fbfaeb75cfe
# b9bc234b6f58458d8614d2cd5b1c3f39
# 5505033724f142b693264e2c949b2859
msgid ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:466
#: ../../ref/class-based-views/flattened-index.txt:510
#: ../../ref/class-based-views/flattened-index.txt:552
# 0434beea2fdd4d5da754d29c8428199f
# 1a02885b95a2401a8920946a3eaceaf3
# a774138e6c9e4137a7f7c9e30017e09a
msgid ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:3
# 6a4304a2abda427da2ded00af030b8c2
msgid "Generic date views"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:7
# a62a3117d1a240adb04caa97adaf1d73
msgid "Date-based generic views, provided in :mod:`django.views.generic.dates`, are views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:12
#: ../../ref/class-based-views/generic-editing.txt:15
# a0c86396d9de406cbe716fa9d7476bd5
# c842087827e243e280f2b29cf8e9ce05
msgid "Some of the examples on this page assume that an ``Article`` model has been defined as follows in ``myapp/models.py``::"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:36
# 9ed1932d70c54724a96e1ea63660840b
msgid ":class:`django.views.generic.dates.ArchiveIndexView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:39
# a903c20096d14aaaafda3ff9c3d4d48a
msgid ":class:`django.views.generic.dates.BaseArchiveIndexView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:49
# 796009918e7a4703a695f8d14b5ba76a
msgid "Defaults to providing ``date_list`` by year, but this can be altered to month or day using the attribute ``date_list_period``. This also applies to all subclass views."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:66
# 9d628707d1a54e7cb3437f46dcf9a8ff
msgid "**Example myapp/article_archive.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:76
# b17b8d7e865141beb8de7a99df9d35b3
msgid "This will output all articles."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:89
# 834de68c42684249b410f435aa80efc8
msgid ":class:`django.views.generic.dates.YearArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:92
# 84ae9b3d05fe4890bbe17e7170e5e614
msgid ":class:`django.views.generic.dates.BaseYearArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:101
# 8543c8f8ae0d4fc4b5e57fe3ec0020ba
msgid "A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If ``True``, the list of objects will be made available to the context. If ``False``, the ``None`` queryset will be used as the object list. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:109
# 3424d713e59e45f29abe153845a25770
msgid "Determine if an object list will be returned as part of the context. Returns :attr:`~YearArchiveView.make_object_list` by default."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:120
# fa9d387868034c529a9a089a5ff36ef0
msgid "``date_list``: A :meth:`DateQuerySet<django.db.models.query.QuerySet.dates>` object object containing all months that have objects available according to ``queryset``, represented as :class:`datetime.datetime<python:datetime.datetime>` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:127
# 19214a0dda7b46588c1399ea6bd94fea
msgid "``year``: A :class:`~datetime.date` object representing the given year."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:132
# 8bba78b5c00f434f804f80b84eea177d
msgid "Previously, this returned a string."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:134
# a4310193c5634906bb17cee602ae0199
msgid "``next_year``: A :class:`~datetime.date` object representing the first day of the next year, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:141
# f23c0354375e4865be8bbc8350f41217
msgid "``previous_year``: A :class:`~datetime.date` object representing the first day of the previous year, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:176
# 4c2e3ec45ef64ea59e1278b0219a4f99
msgid "**Example myapp/article_archive_year.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:206
# 68f8de9bb7e048079b8f5f2e34dc36c0
msgid ":class:`django.views.generic.dates.MonthArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:209
# 9cc67ceb6b774979b52d9586d7c50d21
msgid ":class:`django.views.generic.dates.BaseMonthArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:224
# 2c25c04b327d4db19bec8e9695d59f00
msgid "``date_list``: A :meth:`DateQuerySet<django.db.models.query.QuerySet.dates>` object containing all days that have objects available in the given month, according to ``queryset``, represented as :class:`datetime.datetime<python:datetime.datetime>` objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:231
# 20174b56f8784d40adb18244f918881a
msgid "``month``: A :class:`~datetime.date` object representing the given month."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:234
#: ../../ref/class-based-views/generic-date-based.txt:444
# aec32d9806eb45819d74667d73a453c5
# 75bb2cb4f18047f998a1e239bcb03bbb
msgid "``next_month``: A :class:`~datetime.date` object representing the first day of the next month, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:239
#: ../../ref/class-based-views/generic-date-based.txt:449
# be513cb6b58349c0853c13f0719fbda0
# 7c5b18768bb445489cb40980e88f1888
msgid "``previous_month``: A :class:`~datetime.date` object representing the first day of the previous month, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:277
# 53cdb3f5c8f94c76bd36d8fc1cd2393c
msgid "**Example myapp/article_archive_month.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:307
# 2810253bb41645e4bbb92083e7b9bf6c
msgid ":class:`django.views.generic.dates.WeekArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:310
# 4cce73f5bec24c688b6a52b531c27131
msgid ":class:`django.views.generic.dates.BaseWeekArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:312
# 5338a47ac9b743d8ba110830b04b19c3
msgid ":class:`django.views.generic.dates.WeekMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:325
# 89b2a5a4908f403ebfe816b0d85df8b2
msgid "``week``: A :class:`~datetime.date` object representing the first day of the given week."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:328
# b3205673c48348c89d31c1fd63da718b
msgid "``next_week``: A :class:`~datetime.date` object representing the first day of the next week, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:333
# 89da8b17812548649d3d26dc191bdb27
msgid "``previous_week``: A :class:`~datetime.date` object representing the first day of the previous week, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:368
# 781d0c4ded824a18b7958d3ab894fe4b
msgid "**Example myapp/article_archive_week.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:390
# 3ffc33fb426f4272a91ae46016b41b60
msgid "In this example, you are outputting the week number. The default ``week_format`` in the ``WeekArchiveView`` uses  week format ``'%U'`` which is based on the United States week system where the week begins on a Sunday. The ``'%W'`` format uses the ISO week format and its week begins on a Monday.  The ``'%W'`` format is the same in both the :func:`~time.strftime` and the :tfilter:`date`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:397
# 732c3e6ba8524ce6b894c685f84add28
msgid "However, the :tfilter:`date` template filter does not have an equivalent output format that supports the US based week system. The :tfilter:`date` filter ``'%U'`` outputs the number of seconds since the Unix epoch."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:412
# 9ab53fb6710e43cc8cb80bc8f6e3d327
msgid ":class:`django.views.generic.dates.DayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:431
# 7d916de86ed74e46a0e50e99e3ab99b3
msgid "``day``: A :class:`~datetime.date` object representing the given day."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:434
# 19c2ed68ca004dc8ab114015d63a959d
msgid "``next_day``: A :class:`~datetime.date` object representing the next day, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:439
# f1b7385cde7a47b38f1ef8b9846d6071
msgid "``previous_day``: A :class:`~datetime.date` object representing the previous day, according to :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:483
# f37fa3949cee44428c685ee9e32fcdce
msgid "**Example myapp/article_archive_day.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:516
# c627300130434eb4a9e36d9316af603b
msgid ":class:`django.views.generic.dates.TodayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:519
# 2b93c970aad6466e8117d571b27325f9
msgid ":class:`django.views.generic.dates.BaseTodayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:531
# 5cb3f763519042b5a4ae41d5e0cee203
msgid "Uses a default ``template_name_suffix`` of ``_archive_today``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:559
# 72ae7b2a09c74b92a68144a73f12d7df
msgid "This view uses by default the same template as the :class:`~DayArchiveView`, which is in the previous example. If you need a different template, set the ``template_name`` attribute to be the name of the new template."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:575
# 3f044b385cd24f5993bc09aa5bb59fb6
msgid ":class:`django.views.generic.dates.DateDetailView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:578
# d9f49850c6b04411827437ec57a1dadc
msgid ":class:`django.views.generic.dates.BaseDateDetailView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:589
# 640d06a7a23544a697a122b18e342501
msgid "Includes the single object associated with the ``model`` specified in the ``DateDetailView``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:594
# c939dca1cd064374bc780940adb8757d
msgid "Uses a default ``template_name_suffix`` of ``_detail``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:607
# fd82c8058df24ee8a0cef9ea375b3d31
msgid "**Example myapp/article_detail.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:615
# c71ba9ed7a5149bdb342cd915ef55435
msgid "All of the generic views listed above have matching ``Base`` views that only differ in that the they do not include the :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`:"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:3
# 659ebcb41d69457387f55b3ee72770ab
msgid "Generic display views"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:5
# a8015561745c40af9cbdf7831a42ba56
msgid "The two following generic class-based views are designed to display data. On many projects they are typically the most commonly used views."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:30
#: ../../ref/class-based-views/generic-display.txt:91
# 92877c6f15964104b4d1ffd0be17cde6
# 74cfe073338d4ba787c0e469cd310d8e
msgid ":meth:`get_template_names()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:31
# 54d685a4b71c471f954685f519464537
msgid ":meth:`get_slug_field()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:32
#: ../../ref/class-based-views/generic-display.txt:92
# 548958aa8f19404ab14bec03254be86b
# 35b8733b36044e058f606742abe90617
msgid ":meth:`get_queryset()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:33
# 74e8df96de444d199ce61af19a313bbd
msgid ":meth:`get_object()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:34
# 2925df3507694b7eb12f14163ce79cd9
msgid ":meth:`get_context_object_name()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:36
#: ../../ref/class-based-views/generic-display.txt:95
# 15d34875316e4d06bcd49bfca51a33e0
# 124e81a5dbca49fdb16b7edded182420
msgid ":meth:`get()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:37
#: ../../ref/class-based-views/generic-display.txt:96
# 3a65f7e0b0614fbf8de432c5acac0aa7
# 0c47f85d7e9d45b7896e47d20104b78f
msgid ":meth:`render_to_response()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:80
# 6924962716804a85af90d60a65c3dcc9
msgid ":class:`django.views.generic.list.ListView`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:83
# 44cff92c75a94d69a36e6839bba8a6fb
msgid ":class:`django.views.generic.list.BaseListView`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:93
# 1774fb33d03d4f7a9b09ec486f44460a
msgid ":meth:`get_objects()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:127
# 167b9722d5224337accc8baf3db689da
msgid "A base view for displaying a list of objects. It is not intended to be used directly, but rather as a parent class of the :class:`django.views.generic.list.ListView` or other views representing lists of objects."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:143
# 798b134e9ae541019a5347906f33443b
msgid "Adds :attr:`object_list` to the context. If :attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is True then display an empty list. If :attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is False then raise a 404 error."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:3
# ec1e1b3271bb4d2c9ae25b312ca770ae
msgid "Generic editing views"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:5
# 210f1ed01c49452a9aa01c70e194150b
msgid "The following views are described on this page and provide a foundation for editing content:"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:8
#: ../../ref/class-based-views/generic-editing.txt:39
# e575b9035d9049f3bf5d49d7b5effca6
# 1ac2f5a14d264fa8a1a88d5c0fe8f737
msgid ":class:`django.views.generic.edit.FormView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:9
#: ../../ref/class-based-views/generic-editing.txt:86
# 3f3096064c4f4d4dad6e4efd514483c0
# a6f18ade5f784ffe883c226715628e5a
msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:10
#: ../../ref/class-based-views/generic-editing.txt:128
# 70bcfcbaa4ee4c259788bc597550ad1f
# a8ce53396ee94c8aaf5e0afa7a9e9642
msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:11
#: ../../ref/class-based-views/generic-editing.txt:170
# a314218ee2b44edf99321186b85498d4
# 941fb9cd976841b2b2d4511a88f40ae6
msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:41
# f4b4af092b924aae9996e6c2789626e9
msgid ":class:`django.views.generic.edit.BaseFormView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:46
# 4dae184fce294ebea63b81cb514a6e9e
msgid "**Example forms.py**::"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:89
# 7f6e4fed5b7542148a6617b58fc51fb0
msgid ":class:`django.views.generic.edit.BaseCreateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:100
# fd12121fc931477f88b04f87912310c5
msgid "The CreateView page displayed to a GET request uses a ``template_name_suffix`` of ``'_form.html'``. For example, changing this attribute to ``'_create_form.html'`` for a view creating objects for the the example `Author` model would cause the the default `template_name` to be ``'myapp/author_create_form.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:131
# 451a48a5d3b44a63a6c74d436e9b95d3
msgid ":class:`django.views.generic.edit.BaseUpdateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:142
# 6b414ca1a8a04dc1a59f0a8a55e88db0
msgid "The UpdateView page displayed to a GET request uses a ``template_name_suffix`` of ``'_form.html'``. For example, changing this attribute to ``'_update_form.html'`` for a view updating objects for the the example `Author` model would cause the the default `template_name` to be ``'myapp/author_update_form.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:173
# 7cbd0d9c1a5049dabb4c05a08bdd9301
msgid ":class:`django.views.generic.edit.BaseDeleteView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:183
# 498e8e0b735e40a5ac8243d6c7fd0b0e
msgid "The DeleteView page displayed to a GET request uses a ``template_name_suffix`` of ``'_confirm_delete.html'``. For example, changing this attribute to ``'_check_delete.html'`` for a view deleting objects for the the example `Author` model would cause the the default `template_name` to be ``'myapp/author_check_delete.html'``."
msgstr ""

#: ../../ref/class-based-views/index.txt:3
# d562ff467d744ebb8d7e0618add100e2
msgid "Class-based views"
msgstr ""

#: ../../ref/class-based-views/index.txt:5
# 0c24147a9313418ba48cb1473eba0055
msgid "Class-based views API reference. For introductory material, see :doc:`/topics/class-based-views/index`."
msgstr ""

#: ../../ref/class-based-views/index.txt:19
# 4d3587e2d5af4f70ae69f2136fef9a8e
msgid "Specification"
msgstr ""

#: ../../ref/class-based-views/index.txt:21
# c1074b39e0e44119ab18ef524f84847b
msgid "Each request served by a class-based view has an independent state; therefore, it is safe to store state variables on the instance (i.e., ``self.foo = 3`` is a thread-safe operation)."
msgstr ""

#: ../../ref/class-based-views/index.txt:25
# d2df07c944ba4280a5ad5bb1b37d4822
msgid "A class-based view is deployed into a URL pattern using the :meth:`~django.views.generic.base.View.as_view()` classmethod::"
msgstr ""

#: ../../ref/class-based-views/index.txt:34
# 00c7efc5f561403c86813782e9d5558c
msgid "Arguments passed to a view are shared between every instance of a view. This means that you shoudn't use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view."
msgstr ""

#: ../../ref/class-based-views/index.txt:40
# 696657784805469bbce2612ef34acb32
msgid "Arguments passed into :meth:`~django.views.generic.base.View.as_view()` will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on ``MyView`` is able to use ``self.size``. Arguments must correspond to attributes that already exist on the class (return ``True`` on a ``hasattr`` check)."
msgstr ""

#: ../../ref/class-based-views/index.txt:47
# f2636a1e25444c4b98fc25c438f6b321
msgid "Base vs Generic views"
msgstr ""

#: ../../ref/class-based-views/index.txt:49
# b7714bd1c5f24034891b80bd6537ba20
msgid "Base class-based views can be thought of as *parent* views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do."
msgstr ""

#: ../../ref/class-based-views/index.txt:54
# d96bbd486392481285b46a0aada5f047
msgid "Django’s generic views are built off of those base views, and were developed as a shortcut for common usage patterns such as displaying the details of an object. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself."
msgstr ""

#: ../../ref/class-based-views/mixins.txt:3
# 08165889f76047a68f6b007a94865a0b
msgid "Class-based views mixins"
msgstr ""

#: ../../ref/class-based-views/mixins.txt:5
# 71134ece2013466e8785356cfc47d96a
msgid "Class-based views API reference. For introductory material, see :doc:`/topics/class-based-views/mixins`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:15
#: ../../ref/class-based-views/mixins-date-based.txt:67
#: ../../ref/class-based-views/mixins-date-based.txt:119
#: ../../ref/class-based-views/mixins-date-based.txt:171
#: ../../ref/class-based-views/mixins-date-based.txt:223
#: ../../ref/class-based-views/mixins-date-based.txt:282
#: ../../ref/class-based-views/mixins-editing.txt:24
#: ../../ref/class-based-views/mixins-editing.txt:116
#: ../../ref/class-based-views/mixins-editing.txt:175
#: ../../ref/class-based-views/mixins-editing.txt:193
#: ../../ref/class-based-views/mixins-multiple-object.txt:46
#: ../../ref/class-based-views/mixins-multiple-object.txt:179
#: ../../ref/class-based-views/mixins-single-object.txt:13
#: ../../ref/class-based-views/mixins-single-object.txt:108
# 057d4c0c4edc4949a7b336c3aae44268
# 2d609e953a0e4da8a9a9149702532b72
# d3a765abffb24fbd98a9152150bb6fb3
# bc287f60e6494fb084fa15c4111f834f
# 031d78a494f54c29aef1989ab22ae1f8
# b985ece372034356a25b42a35d0f5da1
# e247005f7ad744c98665bea763ebd004
# 9a05605016af440c959c1208bc227b56
# 24430211c8a8435cb28d54898434b916
# fa19bdc875ee4856930872063c332ed6
# c6e5f7d4acf64386b15e4eaf10c6388e
# 1f20082543b74378bdb475b888fa6698
# abf22cc772fc436f846db8ed7e0e67f0
# 43fd7442fa2e43cb9d236fca683ec717
msgid "**Methods and Attributes**"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:24
# 621ba88e443d4dd98c8d8b62a0cdbb83
msgid "**Optional** The value for the year, as a string. By default, set to ``None``, which means the year will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:29
# 07a5868487a349a580d7b08fb659754b
msgid "Returns the :func:`~time.strftime` format to use when parsing the year. Returns :attr:`~YearMixin.year_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:34
# 92407117656544d1a3ffc45607866de7
msgid "Returns the year for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:38
# 4a2209c616c6452b92ee740e2ce61c03
msgid "The value of the `year` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:45
# f2411d92d49341b1829404d9b0ad2e49
msgid "Returns a date object containing the first day of the year after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:53
# 0365145ff8714768bc950700518917db
msgid "Returns a date object containing the first day of the year before the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:76
# 220ad81e8d1044a793782428b5a57012
msgid "**Optional** The value for the month, as a string. By default, set to ``None``, which means the month will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:81
# 43c9b5b0df8c4160bc82ece3eb5d29de
msgid "Returns the :func:`~time.strftime` format to use when parsing the month. Returns :attr:`~MonthMixin.month_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:86
# a6aeda2161894eab8f9a162479e170d5
msgid "Returns the month for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:90
# 9962d77738aa43dfa5327c36425692f4
msgid "The value of the `month` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:97
# 529fdc1641594283a2b2fbe4d89055c1
msgid "Returns a date object containing the first day of the month after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:105
# 82af2a8733c049a68a4aa15d8c60d7c2
msgid "Returns a date object containing the first day of the month before the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:128
# e93e830449644442b76e89827b8ecbbb
msgid "**Optional** The value for the day, as a string. By default, set to ``None``, which means the day will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:133
# 993ca91daeb94a3b8e613d5da2bc002b
msgid "Returns the :func:`~time.strftime` format to use when parsing the day. Returns :attr:`~DayMixin.day_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:138
# f04696fd2a3a438c9336a981c741cf0a
msgid "Returns the day for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:142
# 1c06fe11052d4b76aafd328228452ce7
msgid "The value of the `day` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:149
# a827e6f4da19485aa10548cb05e663e6
msgid "Returns a date object containing the next valid day after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:157
# 763bfe5299d04b7bab3eb1844643c0fa
msgid "Returns a date object containing the previous valid day. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:175
# d5f8dde781f448d49d0a0a36ab3257a4
msgid "The :func:`~time.strftime` format to use when parsing the week. By default, this is ``'%U'``, which means the week starts on Sunday. Set it to ``'%W'`` if your week starts on Monday."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:181
# 234eb8639f154546b0feb6691b04c183
msgid "**Optional** The value for the week, as a string. By default, set to ``None``, which means the week will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:186
# 40af58c30748473c9b4daea1b3d4a021
msgid "Returns the :func:`~time.strftime` format to use when parsing the week. Returns :attr:`~WeekMixin.week_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:191
# 1de7e7b495cd4b59acad23a35b05da30
msgid "Returns the week for which this view will display data, as a string. Tries the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:202
# bd55327e8d234005a0bbb39580662ae3
msgid "Returns a date object containing the first day of the week after the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:210
# e9eb7f1e33474a8480b0722c8bdb991c
msgid "Returns a date object containing the first day of the week before the date provided. This function can also return ``None`` or raise an :class:`~django.http.Http404` exception, depending on the values of :attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:227
# 37b07b6035d54d0a89d272d63883899f
msgid "The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the date-based archive should use to determine the list of objects to display on the page."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:231
# 2a18aaadc3b54e798b860dd1b8cb6f8c
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled and ``date_field`` is a ``DateTimeField``, dates are assumed to be in the current time zone. Otherwise, the queryset could include objects from the previous or the next day in the end user's time zone."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:238
# 33580ba812854c1c913297dddf6d07ce
msgid "In this situation, if you have implemented per-user time zone selection, the same URL may show a different set of objects, depending on the end user's time zone. To avoid this, you should use a ``DateField`` as the ``date_field`` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:252
# e7c52d081b564e9e9068efbc73c82763
msgid "Returns the name of the field that contains the date data that this view will operate on. Returns :attr:`~DateMixin.date_field` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:257
# 8d3bc9506d6c443a96e8a3f39b1b29fc
msgid "Determine whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. Returns :attr:`~DateMixin.allow_future` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:272
# 7d50cb2f75c84fbcb6de3d3090e3fc47
msgid "While this view (and its subclasses) are executing, ``self.object_list`` will contain the list of objects that the view is operating upon, and ``self.date_list`` will contain the list of dates for which data is available."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:286
# f1fa8d0367564ee09d3fe67d0be9f9d6
msgid "A boolean specifying whether to display the page if no objects are available. If this is ``True`` and no objects are available, the view will display an empty page instead of raising a 404."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:290
# 2e3d07cd0eaf4bfdb8003feff38815c4
msgid "This is identical to :attr:`MultipleObjectMixin.allow_empty`, except for the default value, which is ``False``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:295
# 880345e23606435f9215e49339d2439f
msgid "**Optional** A string defining the aggregation period for ``date_list``. It must be one of ``'year'`` (default), ``'month'``, or ``'day'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:318
# 096131ce44874027aa3af9b882c2d32c
msgid "Returns the aggregation period for ``date_list``. Returns :attr:`~BaseDateListView.date_list_period` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:323
# acbbe8e943a341a1b1457391d2db3b0d
msgid "Returns the list of dates of type ``date_type`` for which ``queryset`` contains entries. For example, ``get_date_list(qs, 'year')`` will return the list of years for which ``qs`` has entries. If ``date_type`` isn't provided, the result of :meth:`~BaseDateListView.get_date_list_period` is used. ``date_type`` and ``ordering`` are simply passed to :meth:`QuerySet.dates()<django.db.models.query.QuerySet.dates>`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:5
# 1df7683915c14038a1c586b497eadba2
msgid "The following mixins are used to construct Django's editing views:"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:14
# 571a7b7d93f4435dbe3df2b94308c90c
msgid "Examples of how these are combined into editing views can be found at the documentation on ``Generic editing views``."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:40
# 1d2f2f35d2e349c7aea8fbbcff45ec5e
msgid "Retrieve initial data for the form. By default, returns a copy of :attr:`~django.views.generic.edit.FormMixin.initial`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:55
# 5ec2d7d90788469ca0ac3e55ea7075d5
msgid "Instantiate an instance of ``form_class`` using :meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:68
# 8b5bec3b4d994534bf00e2a6d7c6080a
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`~django.views.generic.edit.FormMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:74
# 39b32f485cde4fff8deb38854ccc656e
msgid "Redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:91
# 50206174eae845f3b547d577dcac98ca
msgid "Views mixing :class:`FormMixin` must provide an implementation of :meth:`~django.views.generic.FormMixin.form_valid` and :meth:`~django.views.generic.FormMixin.form_invalid`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:143
# 20d343aa2ca24750841cf9da4fe27499
msgid "Determine the URL to redirect to when the form is successfully validated. Returns :attr:`ModelFormMixin.success_url` if it is provided; otherwise, attempts to use the ``get_absolute_url()`` of the object."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:149
# 05f4b44f97754f77b8bb5fb28912a46a
msgid "Saves the form instance, sets the current object for the view, and redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:167
# f74dd78a8d704977b66b4214bb3e68fc
msgid "This is named 'ProcessFormView' and inherits directly from :class:`django.views.generic.base.View`, but breaks if used independently, so it is more of a mixin."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:44
# 87bb4e4eb271446089fbd4b1165518e5
msgid ":class:`django.views.generic.base.ContextMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:69
# b19addc0c3d740489901e1ebaf3f8f91
msgid "An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with :attr:`MultipleObjectMixin.paginate_by` objects per page. The view will expect either a ``page`` query string parameter (via ``request.GET``) or a ``page`` variable specified in the URLconf."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:79
# 985dc19b5b6644d4913ec15d7c0b3437
msgid "A string specifying the name to use for the page parameter. The view will expect this prameter to be available either as a query string parameter (via ``request.GET``) or as a kwarg variable specified in the URLconf. Defaults to ``page``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:98
# e29b7d0b6a3c4fa1bac1bf66a108255c
msgid "Get the list of items for this view. This must be an iterable and may be a queryset (in which queryset-specific behavior will be enabled)."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:6
# 9ad8cd3bbcb04249893aba262303e846
msgid "ContextMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:16
# 612985e233034b569671d5cc36d9537f
msgid "Returns a dictionary representing the template context. The keyword arguments provided will make up the returned context. Example usage::"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:24
# 1f1e0d507c534329802fbdb8669a59d8
msgid "The template context of all class-based generic views include a ``view`` variable that points to the ``View`` instance."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:29
# 9441daaa6cf94a14a87f970561c46e8f
msgid "Note that having the view instance in the template context may expose potentially hazardous methods to template authors.  To prevent methods like this from being called in the template, set ``alters_data=True`` on those methods.  For more information, read the documentation on :ref:`rendering a template context <alters-data-description>`."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:41
# cf4b17fb1f8c4f60bb19eb36a18c8ece
msgid "Provides a mechanism to construct a :class:`~django.template.response.TemplateResponse`, given suitable context. The template to use is configurable and can be further customized by subclasses."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:50
# a73bf8d88bd94f17887aef779b61200c
msgid "The full name of a template to use as defined by a string. Not defining a template_name will raise a :class:`django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:10
# d277f3dce5eb40169d9ed323e8475619
msgid "Provides a mechanism for looking up an object associated with the current HTTP request."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:112
# 1119e41007404b6891f49dec2ec2102d
msgid "The field on the current object instance that can be used to determine the name of a candidate template. If either ``template_name_field`` itself or the value of the ``template_name_field`` on the current object instance is ``None``, the object will not be used for a candidate template name."
msgstr ""

#: ../../ref/clickjacking.txt:3
# 93a9f6c1ebc046f58a94310441aa6a74
msgid "Clickjacking Protection"
msgstr ""

#: ../../ref/clickjacking.txt:8
# d3b4fe44cf9541b082bcb004085df9d5
msgid "The clickjacking middleware and decorators provide easy-to-use protection against `clickjacking`_.  This type of attack occurs when a malicious site tricks a user into clicking on a concealed element of another site which they have loaded in a hidden frame or iframe."
msgstr ""

#: ../../ref/clickjacking.txt:19
# df4b839c628a46bbae34acae2df3440a
msgid "An example of clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:21
# bd5c3de5dcd64f8eac28274651ed1338
msgid "Suppose an online store has a page where a logged in user can click \"Buy Now\" to purchase an item. A user has chosen to stay logged into the store all the time for convenience. An attacker site might create an \"I Like Ponies\" button on one of their own pages, and load the store's page in a transparent iframe such that the \"Buy Now\" button is invisibly overlaid on the \"I Like Ponies\" button. If the user visits the attacker site and clicks \"I Like Ponies\" he will inadvertently click on the online store's \"Buy Now\" button and unknowingly purchase the item."
msgstr ""

#: ../../ref/clickjacking.txt:32
# 4c905058fda945c78dbb76f905a58a8f
msgid "Preventing clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:34
# 8a84fedbca184c61a83b37f71d5a8ae2
msgid "Modern browsers honor the `X-Frame-Options`_ HTTP header that indicates whether or not a resource is allowed to load within a frame or iframe. If the response contains the header with a value of SAMEORIGIN then the browser will only load the resource in a frame if the request originated from the same site. If the header is set to DENY then the browser will block the resource from loading in a frame no matter which site made the request."
msgstr ""

#: ../../ref/clickjacking.txt:43
# ea482f9188a04eb1a29177eab373bd53
msgid "Django provides a few simple ways to include this header in responses from your site:"
msgstr ""

#: ../../ref/clickjacking.txt:46
# 881a26dc46e54fd4a93c7eb104ea8324
msgid "A simple middleware that sets the header in all responses."
msgstr ""

#: ../../ref/clickjacking.txt:48
# 740b1691d23a4d719783a99d6f1eb4de
msgid "A set of view decorators that can be used to override the middleware or to only set the header for certain views."
msgstr ""

#: ../../ref/clickjacking.txt:52
#: ../../ref/contrib/csrf.txt:27
# 878dc51f314d44b492b91c72e2ba4e6f
# 5c85d8bdf8344bdaaca33574f0c8255e
msgid "How to use it"
msgstr ""

#: ../../ref/clickjacking.txt:55
# 660b363a65874188a09825c1b7433ca6
msgid "Setting X-Frame-Options for all responses"
msgstr ""

#: ../../ref/clickjacking.txt:57
# a658cec3284447f6b176e1a4bc3ff596
msgid "To set the same X-Frame-Options value for all responses in your site, add ``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../ref/clickjacking.txt:67
# 707baa9b723f45f49983371418648cbc
msgid "By default, the middleware will set the X-Frame-Options header to SAMEORIGIN for every outgoing ``HttpResponse``. If you want DENY instead, set the :setting:`X_FRAME_OPTIONS` setting::"
msgstr ""

#: ../../ref/clickjacking.txt:73
# 9c5825b1055847059f7cd9942dc7e746
msgid "When using the middleware there may be some views where you do **not** want the X-Frame-Options header set. For those cases, you can use a view decorator that tells the middleware not to set the header::"
msgstr ""

#: ../../ref/clickjacking.txt:86
# 5f15e0e1f5e641719b1c27af3259734f
msgid "Setting X-Frame-Options per view"
msgstr ""

#: ../../ref/clickjacking.txt:88
# 06016972ee89443d98f67760765e5065
msgid "To set the X-Frame-Options header on a per view basis, Django provides these decorators::"
msgstr ""

#: ../../ref/clickjacking.txt:103
# f3f27c0d3fca410cbf372fee92236d29
msgid "Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware."
msgstr ""

#: ../../ref/clickjacking.txt:107
#: ../../ref/contrib/csrf.txt:360
# 95a2fea4f6ee4ab59e36dc0cd0e320c4
# 57127853f1b349a68a5b5634c03e2a93
msgid "Limitations"
msgstr ""

#: ../../ref/clickjacking.txt:109
# df3203ca44644ec3bb68421ad92cc16a
msgid "The `X-Frame-Options` header will only protect against clickjacking in a modern browser. Older browsers will quietly ignore the header and need `other clickjacking prevention techniques`_."
msgstr ""

#: ../../ref/clickjacking.txt:114
# dfa82fa8b5a74fababb0fe8ea3b8842c
msgid "Browsers that support X-Frame-Options"
msgstr ""

#: ../../ref/clickjacking.txt:116
# 882742879e2b49eca561f0cf6706a585
msgid "Internet Explorer 8+"
msgstr ""

#: ../../ref/clickjacking.txt:117
# 9fea8d3c6a3b4826967499461f1b42d4
msgid "Firefox       3.6.9+"
msgstr ""

#: ../../ref/clickjacking.txt:118
# 07e17841ec7b42d99156a07852ce2298
msgid "Opera 10.5+"
msgstr ""

#: ../../ref/clickjacking.txt:119
# aacfddc75126432faf5aaa22fc8e21f5
msgid "Safari        4+"
msgstr ""

#: ../../ref/clickjacking.txt:120
# 002c6aa2575e4176b5f6f0cb77144d0f
msgid "Chrome        4.1+"
msgstr ""

#: ../../ref/clickjacking.txt:123
# 068df1213f6e482696ab5efab38036dd
msgid "See also"
msgstr ""

#: ../../ref/clickjacking.txt:125
# 38cc90e9f64b42be96ef91cf39d1335b
msgid "A `complete list`_ of browsers supporting X-Frame-Options."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:3
# 8f968f3934ed454496ddb0553693135e
msgid "Admin actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:7
# 843e81f140fc4a6d811627ec75bd1ef7
msgid "The basic workflow of Django's admin is, in a nutshell, \"select an object, then change it.\" This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:12
# 4e8ba3885ace4c5eacbd6e567dcd36da
msgid "In these cases, Django's admin lets you write and register \"actions\" -- simple functions that get called with a list of objects selected on the change list page."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:16
# 8887aea2981b4bfa96491ede9dc665d6
msgid "If you look at any change list in the admin, you'll see this feature in action; Django ships with a \"delete selected objects\" action available to all models. For example, here's the user module from Django's built-in :mod:`django.contrib.auth` app:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:25
# e88b061b837f45b39e88ad662a49ec42
msgid "The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` for efficiency reasons, which has an important caveat: your model's ``delete()`` method will not be called."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:30
# c59ca64db0f240fe8cf4de866d266598
msgid "If you wish to override this behavior, simply write a custom action which accomplishes deletion in your preferred manner -- for example, by calling ``Model.delete()`` for each of the selected items."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:34
# 2139f8ed619d482fbd35a0650907084f
msgid "For more background on bulk deletion, see the documentation on :ref:`object deletion <topics-db-queries-delete>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:37
# adf228b6b84e4c65bfb3392056f5a95f
msgid "Read on to find out how to add your own actions to this list."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:40
# f5df5ffa146044989538e54d3cdb8e40
msgid "Writing actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:42
# 2ca43354a1e3457383eac1ce3ed00996
msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:44
# dbf5561d232a46c4a27c193109aae7ed
msgid "A common use case for admin actions is the bulk updating of a model. Imagine a simple news application with an ``Article`` model::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:63
# e648915f627c4447a06f1e27959688d8
msgid "A common task we might perform with a model like this is to update an article's status from \"draft\" to \"published\". We could easily do this in the admin one article at a time, but if we wanted to bulk-publish a group of articles, it'd be tedious. So, let's write an action that lets us change an article's status to \"published.\""
msgstr ""

#: ../../ref/contrib/admin/actions.txt:70
# ce1cd1aee63047159adeb7e08b1d40a9
msgid "Writing action functions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:72
# fd0b7ea8b4e348b9b95d5961a01f8083
msgid "First, we'll need to write a function that gets called when the action is trigged from the admin. Action functions are just regular functions that take three arguments:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:76
# 3d523b8a7fa9431e97710962114b01c6
msgid "The current :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:77
# 1062402607ea4209a3a348a84b534b76
msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:78
# f67c2431b8014f9384ec82393c9b8ae0
msgid "A :class:`~django.db.models.query.QuerySet` containing the set of objects selected by the user."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:81
# 646b77a1668c4137b4f37b892e1c8ee9
msgid "Our publish-these-articles function won't need the :class:`ModelAdmin` or the request object, but we will use the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:89
# c903232a8fae470e8cdce9beb4ae7936
msgid "For the best performance, we're using the queryset's :ref:`update method <topics-db-queries-update>`. Other types of actions might need to deal with each object individually; in these cases we'd just iterate over the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:97
# 8bd2ad6918c345bc89930708dee8780d
msgid "That's actually all there is to writing an action! However, we'll take one more optional-but-useful step and give the action a \"nice\" title in the admin. By default, this action would appear in the action list as \"Make published\" -- the function name, with underscores replaced by spaces. That's fine, but we can provide a better, more human-friendly name by giving the ``make_published`` function a ``short_description`` attribute::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:110
# 4e635946e0bf4b4a878b1e50358d5262
msgid "This might look familiar; the admin's ``list_display`` option uses the same technique to provide human-readable descriptions for callback functions registered there, too."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:115
# 7cea732f111d48ae99e5bc7445db403a
msgid "Adding actions to the :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:117
# 678d63cce19444eeb61cfac69acb0f95
msgid "Next, we'll need to inform our :class:`ModelAdmin` of the action. This works just like any other configuration option. So, the complete ``admin.py`` with the action and its registration would look like::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:135
# b164df710c234ec5a7c406fdb2a3a5e5
msgid "That code will give us an admin change list that looks something like this:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:139
# bde40f29085a456888c2e7f2e2fc384f
msgid "That's really all there is to it! If you're itching to write your own actions, you now know enough to get started. The rest of this document just covers more advanced techniques."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:144
# f839d538b7164c50a209a35aaa3cd40b
msgid "Handling errors in actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:146
# 2ad314d639a0414793f8cab95eabc8a2
msgid "If there are foreseeable error conditions that may occur while running your action, you should gracefully inform the user of the problem. This means handling exceptions and and using :meth:`django.contrib.admin.ModelAdmin.message_user` to display a user friendly description of the problem in the response."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:153
# e5a841a2b53f4c3db33ac85b088313eb
msgid "Advanced action techniques"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:155
# 3c1de2b7b22a491499289592644b5aa1
msgid "There's a couple of extra options and possibilities you can exploit for more advanced options."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:159
# 44b9bfc0e4764966a31d5097cc748c72
msgid "Actions as :class:`ModelAdmin` methods"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:161
# 1cc1eae408f54d7caeeb9b2ea4de636e
msgid "The example above shows the ``make_published`` action defined as a simple function. That's perfectly fine, but it's not perfect from a code design point of view: since the action is tightly coupled to the ``Article`` object, it makes sense to hook the action to the ``ArticleAdmin`` object itself."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:166
# 02175eac5ee3498881c3e42f5d6754be
msgid "That's easy enough to do::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:177
# ba704ad58a2749d8b4789d7de2f2964f
msgid "Notice first that we've moved ``make_published`` into a method and renamed the `modeladmin` parameter to `self`, and second that we've now put the string ``'make_published'`` in ``actions`` instead of a direct function reference. This tells the :class:`ModelAdmin` to look up the action as a method."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:182
# 142cb480fa454f9fa429a8ad64148df3
msgid "Defining actions as methods gives the action more straightforward, idiomatic access to the :class:`ModelAdmin` itself, allowing the action to call any of the methods provided by the admin."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:188
# 5ad7ee868ab9437aaf91c02faa393460
msgid "For example, we can use ``self`` to flash a message to the user informing her that the action was successful::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:202
# a1077bdc5b924a38a7625260152e05d2
msgid "This make the action match what the admin itself does after successfully performing an action:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:208
# ca7b64d124e24dbd96de687ccb6d4b35
msgid "Actions that provide intermediate pages"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:210
# 54b39e84ed724f59adaff34d26c90a6d
msgid "By default, after an action is performed the user is simply redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:216
# fd1bf57f016b419daedd673c65f55d35
msgid "To provide an intermediary page, simply return an :class:`~django.http.HttpResponse` (or subclass) from your action. For example, you might write a simple export function that uses Django's :doc:`serialization functions </topics/serialization>` to dump some selected objects as JSON::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:230
# a98181239dba4de89066893714c66b6a
msgid "Generally, something like the above isn't considered a great idea. Most of the time, the best practice will be to return an :class:`~django.http.HttpResponseRedirect` and redirect the user to a view you've written, passing the list of selected objects in the GET query string. This allows you to provide complex interaction logic on the intermediary pages. For example, if you wanted to provide a more complete export function, you'd want to let the user choose a format, and possibly a list of fields to include in the export. The best thing to do would be to write a small action that simply redirects to your custom export view::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:249
# 239a112181d6429fb9e8575f7598289f
msgid "As you can see, the action is the simple part; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the ``ContentType``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:253
# 807f98bf4f3b47c5a166c28206bc1388
msgid "Writing this view is left as an exercise to the reader."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:258
# d82126970f2c433cadbaae70c44ea0d0
msgid "Making actions available site-wide"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:262
# 6d1bc2ad225e457d819026385e2dec66
msgid "Some actions are best if they're made available to *any* object in the admin site -- the export action defined above would be a good candidate. You can make an action globally available using :meth:`AdminSite.add_action()`. For example::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:271
# 8796803f03d94258814480a4f2d8b1fd
msgid "This makes the `export_selected_objects` action globally available as an action named `\"export_selected_objects\"`. You can explicitly give the action a name -- good if you later want to programatically :ref:`remove the action <disabling-admin-actions>` -- by passing a second argument to :meth:`AdminSite.add_action()`::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:282
# ffe8c844d18c4ce49e355bb3c6e61a08
msgid "Disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:284
# d0065c3b40474a6d9bc38a9f63616188
msgid "Sometimes you need to disable certain actions -- especially those :ref:`registered site-wide <adminsite-actions>` -- for particular objects. There's a few ways you can disable actions:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:289
# 579c6f35e1b94ae59c919c3163f30620
msgid "Disabling a site-wide action"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:293
# 2d582e7f7e344499803f1114b99fd8bb
msgid "If you need to disable a :ref:`site-wide action <adminsite-actions>` you can call :meth:`AdminSite.disable_action()`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:296
# 1369ea9ef2db4ec6b5bb4938e1238257
msgid "For example, you can use this method to remove the built-in \"delete selected objects\" action::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:301
# fce82ba777394b339c68fce269c5224e
msgid "Once you've done the above, that action will no longer be available site-wide."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:304
# 26dc9267f68d40de82487f66534d77d0
msgid "If, however, you need to re-enable a globally-disabled action for one particular model, simply list it explicitly in your ``ModelAdmin.actions`` list::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:323
# 20ee1a7675ca42cf8dfabddf12d84518
msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:325
# b1b5bbe8dfa144589d30e25b03670bd1
msgid "If you want *no* bulk actions available for a given :class:`ModelAdmin`, simply set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:331
# a4b759735d4a4d46bec54a28b521f1ec
msgid "This tells the :class:`ModelAdmin` to not display or allow any actions, including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:335
# 058adb4505c544d296a6ff656768be73
msgid "Conditionally enabling or disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:339
# 506b5bb42d164e9e899ccfa9eb566ee2
msgid "Finally, you can conditionally enable or disable actions on a per-request (and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:342
# 1d3233766bc94a219943c96b12487da2
msgid "This returns a dictionary of actions allowed. The keys are action names, and the values are ``(function, name, short_description)`` tuples."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:345
# f2d9a896537f43f5947807afba4efa36
msgid "Most of the time you'll use this method to conditionally remove actions from the list gathered by the superclass. For example, if I only wanted users whose names begin with 'J' to be able to delete objects in bulk, I could do the following::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:3
# 0959e5f94fe94a159898eb09aca4ed26
msgid "The Django admin documentation generator"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:10
# f20769078d8647f9891ca6bf2a01c0c2
msgid "Django's :mod:`~django.contrib.admindocs` app pulls documentation from the docstrings of models, views, template tags, and template filters for any app in :setting:`INSTALLED_APPS` and makes that documentation available from the :mod:`Django admin <django.contrib.admin>`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:15
# 869405c1908e4b569c82ade7b6f413ce
msgid "In addition to providing offline documentation for all template tags and template filters that ship with Django, you may utilize admindocs to quickly document your own code."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:20
#: ../../ref/contrib/admin/index.txt:15
#: ../../ref/contrib/comments/moderation.txt:19
#: ../../ref/contrib/contenttypes.txt:13
#: ../../ref/contrib/formtools/form-preview.txt:18
#: ../../ref/contrib/gis/gdal.txt:30
#: ../../ref/contrib/gis/install.txt:10
#: ../../ref/contrib/gis/install/index.txt:10
#: ../../ref/contrib/sitemaps.txt:14
#: ../../ref/contrib/syndication.txt:26
# fda7b60a1eb64f3c84dad46f69453936
# 46319ebf24f1458fb7d65e2a63b41945
# 421abeacfc1d4a09adec60d47f495181
# 9e6eadb94a984094914f1f80d4cf7f60
# 7057e753112747b0a9c7f3eb97123765
# bcf8a19583b24b6ab9db50668212db53
# db7d4aa404394ab4945581ab28c1c83a
# c30d81c599a647f3acb3b39d95b711c6
# 94934b49bed1482883d0879fbde1eac3
# 008638d8148f43ddb9589c136d519294
msgid "Overview"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:22
# e187a21c691245a9b8d3053519737945
msgid "To activate the :mod:`~django.contrib.admindocs`, you will need to do the following:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:25
# 0704d525c40643db82e30bd8b5115cde
msgid "Add :mod:`django.contrib.admindocs` to your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:26
# a5f2b9a86635414799a33decd56c8408
msgid "Add ``(r'^admin/doc/', include('django.contrib.admindocs.urls'))`` to your :data:`urlpatterns`. Make sure it's included *before* the ``r'^admin/'`` entry, so that requests to ``/admin/doc/`` don't get handled by the latter entry."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:30
# d151e45ffa844694b0fc41794be25f88
msgid "Install the docutils Python module (http://docutils.sf.net/)."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:31
# e23f29824318414395a49d42ea9d88cd
msgid "**Optional:** Linking to templates requires the :setting:`ADMIN_FOR` setting to be configured."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:33
# 0525a8b766e4440eb51716211226d9bd
msgid "**Optional:** Using the admindocs bookmarklets requires the :mod:`XViewMiddleware<django.middleware.doc>` to be installed."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:36
# 93fbbd0fc4a043128fd25c02e86b2b65
msgid "Once those steps are complete, you can start browsing the documentation by going to your admin interface and clicking the \"Documentation\" link in the upper right of the page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:41
# dbaa82fce604449b9926ba221009798e
msgid "Documentation helpers"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:43
# c64f4e82cdce464aae8642eafcf6b0da
msgid "The following special markup can be used in your docstrings to easily create hyperlinks to other components:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:47
# 87fad690793b41b5b6e8a2f4dff7373b
msgid "Django Component"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:47
# 7d64b1439e3646c792d5f703c9031d57
msgid "reStructuredText roles"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:49
#: ../../ref/models/index.txt:3
#: ../../ref/unicode.txt:230
# 71b00e9fbbff404d9687dde49755b597
# 8f473840d36a427499cbc13d9164bc85
# fe44af7135eb4e8ebdf7c5e7031e54ca
msgid "Models"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:49
# 269fbe17e01448eab8e570fac6772477
msgid "``:model:`appname.ModelName```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
# a863a4bcb52a45b1bdc266295beaf591
msgid "Views"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
# 5310bff1f0414b8889fbfb3400be7f30
msgid "``:view:`appname.view_name```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:51
#: ../../ref/contrib/staticfiles.txt:366
#: ../../ref/contrib/webdesign.txt:19
# dc17355999324074931e829b0a7165e6
# 3042dd9207104346997d1e782291162f
# 538efac2eb444a13a78ef133e835f88b
msgid "Template tags"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:51
# 4790e8b805ed49519a7d70c898e34a99
msgid "``:tag:`tagname```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
# b357ca191bd34c6da39276ffd18eefe3
msgid "Template filters"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
# 3986aecdb4c0433dbcb8d3ac781af845
msgid "``:filter:`filtername```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
#: ../../ref/templates/index.txt:3
#: ../../ref/unicode.txt:300
# 689b5bb5a20343b3b158c83547633933
# b5909bca868e449a890d7d0315f79987
# 915ff60960e843b4b52965df13bba921
msgid "Templates"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
# 71c4292860ca491dbd3e96d35313e5db
msgid "``:template:`path/to/template.html```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:57
# af9835b387e745d0a1bbe965968f3703
msgid "Model reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:59
# 46291852eca4402fbdcfc2b5db9e3057
msgid "The **models** section of the ``admindocs`` page describes each model in the system along with all the fields and methods available on it. Relationships to other models appear as hyperlinks. Descriptions are pulled from ``help_text`` attributes on fields or from docstrings on model methods."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:64
# 9c369f8178934dd3ad7b72337121cadf
msgid "A model with useful documentation might look like this::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:82
# d25b9aa91a2c4796bdeea88e44aa58bd
msgid "View reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:84
# 8bac6d69aeb849338f92eb7f5cd9bf51
msgid "Each URL in your site has a separate entry in the ``admindocs`` page, and clicking on a given URL will show you the corresponding view. Helpful things you can document in your view function docstrings include:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:88
# af59bee30f8d47d8ad0b03ebbb1ba58a
msgid "A short description of what the view does."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:89
# 26c8783cc64c496e98d3f6094ac98782
msgid "The **context**, or a list of variables available in the view's template."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:90
# 30aa49c60203485b9b28a0a7001b3d9b
msgid "The name of the template or templates that are used for that view."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:92
#: ../../ref/contrib/admin/index.txt:503
#: ../../ref/contrib/comments/index.txt:101
#: ../../ref/contrib/comments/index.txt:117
#: ../../ref/contrib/comments/index.txt:149
#: ../../ref/contrib/comments/index.txt:177
#: ../../ref/contrib/comments/index.txt:200
#: ../../ref/contrib/gis/db-api.txt:103
#: ../../ref/contrib/gis/geos.txt:760
#: ../../ref/contrib/staticfiles.txt:212
#: ../../ref/django-admin.txt:870
#: ../../ref/django-admin.txt:946
#: ../../ref/models/instances.txt:433
#: ../../ref/models/instances.txt:479
#: ../../ref/models/instances.txt:488
#: ../../ref/models/instances.txt:632
#: ../../ref/models/querysets.txt:470
#: ../../ref/models/querysets.txt:1004
#: ../../ref/models/querysets.txt:1181
#: ../../ref/models/querysets.txt:1199
#: ../../ref/request-response.txt:283
#: ../../ref/templates/builtins.txt:1068
#: ../../ref/templates/builtins.txt:1085
#: ../../ref/templates/builtins.txt:1115
#: ../../ref/templates/builtins.txt:1145
#: ../../ref/templates/builtins.txt:1159
#: ../../ref/templates/builtins.txt:1172
#: ../../ref/templates/builtins.txt:1185
#: ../../ref/templates/builtins.txt:1285
#: ../../ref/templates/builtins.txt:1322
#: ../../ref/templates/builtins.txt:1339
#: ../../ref/templates/builtins.txt:1353
#: ../../ref/templates/builtins.txt:1393
#: ../../ref/templates/builtins.txt:1431
#: ../../ref/templates/builtins.txt:1446
#: ../../ref/templates/builtins.txt:1467
#: ../../ref/templates/builtins.txt:1485
#: ../../ref/templates/builtins.txt:1573
#: ../../ref/templates/builtins.txt:1591
#: ../../ref/templates/builtins.txt:1604
#: ../../ref/templates/builtins.txt:1618
#: ../../ref/templates/builtins.txt:1632
#: ../../ref/templates/builtins.txt:1645
#: ../../ref/templates/builtins.txt:1660
#: ../../ref/templates/builtins.txt:1675
#: ../../ref/templates/builtins.txt:1689
#: ../../ref/templates/builtins.txt:1714
#: ../../ref/templates/builtins.txt:1727
#: ../../ref/templates/builtins.txt:1743
#: ../../ref/templates/builtins.txt:1762
#: ../../ref/templates/builtins.txt:1813
#: ../../ref/templates/builtins.txt:1826
#: ../../ref/templates/builtins.txt:1847
#: ../../ref/templates/builtins.txt:1912
#: ../../ref/templates/builtins.txt:1930
#: ../../ref/templates/builtins.txt:1943
#: ../../ref/templates/builtins.txt:1965
#: ../../ref/templates/builtins.txt:2033
#: ../../ref/templates/builtins.txt:2051
#: ../../ref/templates/builtins.txt:2066
#: ../../ref/templates/builtins.txt:2086
#: ../../ref/templates/builtins.txt:2129
#: ../../ref/templates/builtins.txt:2142
#: ../../ref/templates/builtins.txt:2186
#: ../../ref/templates/builtins.txt:2215
#: ../../ref/templates/builtins.txt:2232
#: ../../ref/templates/builtins.txt:2247
#: ../../ref/templates/builtins.txt:2266
#: ../../ref/utils.txt:458
#: ../../ref/utils.txt:540
#: ../../ref/utils.txt:551
#: ../../ref/utils.txt:687
# cf271b8366da437092fbea38e9a65f41
# 901daca40514419094c60d1a2bf734d2
# db694b9d378c4e3dad3ec19b16acce03
# eddac31682f74e90b5ddbae732e0a8f5
# ec541762340f43829dfede7e0076e421
# 19cf76c5e7124bcf9c45e807da7ef7de
# 2abf86d9f2d34115aae0c0df7407b203
# 8002cdc9ab8642219539972e7024439a
# 2101bc1c04274d14bbd89d0c96b0fd2a
# be2d8c68810447dbab1f22718e450883
# e0c591fea8524946bcc937f0820d4d8e
# b3a85d3dbf704c2f98fe12de8b6e08f0
# 05f4475a182b4a5d9c8935cf75c7d2ca
# 58002b4fde2c4ee59375fa3d541276a7
# e7cb9e69a5ea447691e6823cd5010840
# e08f2681e9e34086b85c0dc6b79f01d3
# dd58160df75043d3943ca426bdb8d19a
# 0c1071b1760c4d4e9e9dbc7ed369ff7b
# bd640448e9cd41e2a6c6698188e03ad4
# 5185bcdfd0fa4bc0a70c91ad80ea8066
# 8001cb448d224aaebd792dc6cae5c441
# 570752d3348e4b798a7ae759a1531f8d
# 98ed57bdbf66458eba4bf3979072fc41
# 6ce09dbb344e42ffb89ff45af4773c32
# bc0f8c8c6ab04371a8d907b03899ec8c
# 84b2b1f4751c402db3343177cc61ca82
# dbedaa5103bc449bbd04371b2ca8566a
# 2c6d895b4af64934a9fe5d2fefcbce62
# 72c7aa1e94804a4c8ca9a8bb5bcf9c81
# ddd5abc603b540d8b7271da68c35c4f8
# 192e8c122053479fab469b9bb76a8cfe
# eaae2b2307ac48d691b2bb5d9afd93ff
# 55ed92f5ea7045099d013003b135c474
# 8506fb26bcd64e55872b9cd7cfd4227f
# 5d49a00f8a794bd0a6cf4c8e77c863d2
# f61a67753f894926b9fb7e59d23c295e
# a9e2c8ccd8ab412482bbcece8829115d
# 1e145e2f05d64cf996a0f5db455053d4
# e0b58ed947b94bcc8efaeab38ec9eac7
# f02b41628ab14ff7ac16fa75f4e4a0da
# 7e94dac5798e47a8b85dae8272d60db4
# 65a958345f264fa9a6a847b590bef301
# 485b42b7f5134279aae95c346b05c9ea
# 7b49b6e48e564e99b79a05e0a5a5186b
# 80b8508fd44a483795beb0794f93914a
# cfb3c77a937b4681a8da1e3af253c5e2
# e7bb38a695fb4935b70e445f6c2dc607
# d4ca9a0fa70f4fbba673265d6bb26d0e
# 0f02a4f517e04cab87435c1c26bdcda5
# 4398e98d797049eb9f9b2e0df5dcded1
# 145652d0d93244cea6dc0e39e980bec2
# 3f70d9ce685c40299a9cb97339271c78
# ae26ce05321a41178fac07d67f141a66
# 074434731f87495c91cb43c67814f008
# df5b8846e338445da7421b3c9bdc7880
# a9117d88e40446a99a956fde26d47126
# bb7e651bbd4a49dbadd7321bea0ee268
# 87020a2a87c54fc981a8f6c2a87a4957
# 7148af4a4fd048d8b4626c7956e2f53f
# fe430d39fa2d4c7d9a5977ad997e7044
# 7ca6bbf88ea54b108cf661685a16f33a
# f59399cb2bc041cc961320e1c2b6b395
# ebad1eb07ba34e519af1688e30b7f0ac
# 0ed31b8b1a6a40fdb16ee1046db2fa50
# 3c952a5486aa4bf4a824dc4909a19cb9
# ff12f88391fd4beeb5cdf478e86dd509
# 9277d5cda9904f778a39929f53f90dec
# 182d4cd14d2a4369a1fa57fd69e3b351
# 296a40106fe7475286bf4886f77402fe
# 2e98f562f6e545b18dc25eefc82a1983
# 4de9513614ff43afa9387a7cf18f7133
# 80735784ba064b6aa154f8d46cd7dc72
msgid "For example::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:118
# 55ea18f648814b7da265a1004713563b
msgid "Template tags and filters reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:120
# 8bddb27d9c4640109812c73adfb3ddbd
msgid "The **tags** and **filters** ``admindocs`` sections describe all the tags and filters that come with Django (in fact, the :ref:`built-in tag reference <ref-templates-builtins-tags>` and :ref:`built-in filter reference <ref-templates-builtins-filters>` documentation come directly from those pages). Any tags or filters that you create or are added by a third-party app will show up in these sections as well."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:129
# 170822bfe68743fb987d59fdf873852e
msgid "Template reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:131
# 899eeb8d2a5e46e4a2ce2b347a23e232
msgid "While ``admindocs`` does not include a place to document templates by themselves, if you use the ``:template:`path/to/template.html``` syntax in a docstring the resulting page will verify the path of that template with Django's :ref:`template loaders <template-loaders>`. This can be a handy way to check if the specified template exists and to show where on the filesystem that template is stored."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:140
# 4d596415adba4100a81f0b4c9aa71960
msgid "Included Bookmarklets"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:142
# 5d8229779aaa44eaacb5752c48895fc4
msgid "Several useful bookmarklets are available from the ``admindocs`` page:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:145
# ddeae0b501094c60a051a75f18a5ffe9
msgid "Jumps you from any page to the documentation for the view that generates that page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:149
# 095bfb5d2f02416cb103b82e7b458130
msgid "Shows the content-type and unique ID for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:153
# 6d8f711d8b354be492e63c2000cc4f81
msgid "Jumps to the admin page for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:155
# 4351fc517d84416f876d09f2907779dd
msgid "Using these bookmarklets requires that you are either logged into the :mod:`Django admin <django.contrib.admin>` as a :class:`~django.contrib.auth.models.User` with :attr:`~django.contrib.auth.models.User.is_staff` set to `True`, or that the :mod:`django.middleware.doc` middleware and :mod:`XViewMiddleware <django.middleware.doc>` are installed and you are accessing the site from an IP address listed in :setting:`INTERNAL_IPS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:3
# 4b3b2c82abcc41f89864635dfd0b4acc
msgid "The Django admin site"
msgstr ""

#: ../../ref/contrib/admin/index.txt:8
# f9429de5396247e9aa70e5e0588e7d1a
msgid "One of the most powerful parts of Django is the automatic admin interface. It reads metadata in your model to provide a powerful and production-ready interface that content producers can immediately use to start adding content to the site. In this document, we discuss how to activate, use and customize Django's admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:17
# a4ad7c47f79d449db0aab67fc8581a29
msgid "There are seven steps in activating the Django admin site:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:19
# e734118be2f7463ab83d6064d3950424
msgid "Add ``'django.contrib.admin'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/admin/index.txt:22
# 1e3b20d4d002420eaab26fb8c934bf8c
msgid "The admin has four dependencies - :mod:`django.contrib.auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages` and :mod:`django.contrib.sessions`.  If these applications are not in your :setting:`INSTALLED_APPS` list, add them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:28
# f627c4b928a942298f175dc1a7c8339c
msgid "Add ``django.contrib.messages.context_processors.messages`` to :setting:`TEMPLATE_CONTEXT_PROCESSORS` as well as :class:`django.contrib.auth.middleware.AuthenticationMiddleware` and :class:`django.contrib.messages.middleware.MessageMiddleware` to :setting:`MIDDLEWARE_CLASSES`. (These are all active by default, so you only need to do this if you've manually tweaked the settings.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:35
# f5b73c7414814cf490b521602fcf1bf0
msgid "Determine which of your application's models should be editable in the admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:38
# 907707e37d5f4d3a81971d6676153ea6
msgid "For each of those models, optionally create a ``ModelAdmin`` class that encapsulates the customized admin functionality and options for that particular model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:42
# 0ed290b89b8342829b67269640729046
msgid "Instantiate an ``AdminSite`` and tell it about each of your models and ``ModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:45
# 295890cd583e4e5fba90303576438815
msgid "Hook the ``AdminSite`` instance into your URLconf."
msgstr ""

#: ../../ref/contrib/admin/index.txt:47
# 8736441dce76483b971aab38b8ed8193
msgid "After you've taken these steps, you'll be able to use your Django admin site by visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:51
# 27c8085b3c0c413eb2cadab33f8f416e
msgid "Other topics"
msgstr ""

#: ../../ref/contrib/admin/index.txt:61
# 43c315811e9a4eb7a17b5088a477f5f0
msgid "For information about serving the static files (images, JavaScript, and CSS) associated with the admin in production, see :ref:`serving-files`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:64
# 6ce44f914e4143a58fb8630c82b32c15
msgid "Having problems?  Try :doc:`/faq/admin`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:67
# 4a3017d4d34d4b76a0c3a3251efdf8dd
msgid "``ModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:71
# 91f786f14283456fbb91cde360aa80b1
msgid "The ``ModelAdmin`` class is the representation of a model in the admin interface. These are stored in a file named ``admin.py`` in your application. Let's take a look at a very simple example of the ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:85
# 6cb314c03b324a52925cfef0080bbf45
msgid "In the preceding example, the ``ModelAdmin`` class doesn't define any custom values (yet). As a result, the default admin interface will be provided. If you are happy with the default admin interface, you don't need to define a ``ModelAdmin`` object at all -- you can register the model class without providing a ``ModelAdmin`` description. The preceding example could be simplified to::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:98
# d99574111e1241ff8c94c88e984e2e9d
msgid "``ModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:100
# 18d1745d18ee49bb855e80d721e316f3
msgid "The ``ModelAdmin`` is very flexible. It has several options for dealing with customizing the interface. All options are defined on the ``ModelAdmin`` subclass::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:109
# 09cb12db118746ad9767ee1a0c58b6f4
msgid "A list of actions to make available on the change list page. See :doc:`/ref/contrib/admin/actions` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:115
# 224100d0a19a40aa898ce417396ce9ca
msgid "Controls where on the page the actions bar appears. By default, the admin changelist displays actions at the top of the page (``actions_on_top = True; actions_on_bottom = False``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:121
# f2e79778b9374121bd5b45fee11a43f7
msgid "Controls whether a selection counter is displayed next to the action dropdown. By default, the admin changelist will display it (``actions_selection_counter = True``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:127
# c5f6be93081d4a31893d5e1703971036
msgid "Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` in your model, and the change list page will include a date-based drilldown navigation by that field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:131
#: ../../ref/contrib/admin/index.txt:246
#: ../../ref/contrib/admin/index.txt:267
#: ../../ref/contrib/admin/index.txt:387
#: ../../ref/contrib/csrf.txt:400
#: ../../ref/contrib/gis/gdal.txt:894
#: ../../ref/contrib/gis/geoquerysets.txt:37
#: ../../ref/contrib/gis/geoquerysets.txt:59
#: ../../ref/contrib/gis/geoquerysets.txt:81
#: ../../ref/contrib/gis/geoquerysets.txt:102
#: ../../ref/contrib/gis/geoquerysets.txt:129
#: ../../ref/contrib/gis/geoquerysets.txt:149
#: ../../ref/contrib/gis/geoquerysets.txt:170
#: ../../ref/contrib/gis/geoquerysets.txt:190
#: ../../ref/contrib/gis/geoquerysets.txt:210
#: ../../ref/contrib/gis/geoquerysets.txt:245
#: ../../ref/contrib/gis/geoquerysets.txt:285
#: ../../ref/contrib/gis/geoquerysets.txt:309
#: ../../ref/contrib/gis/geoquerysets.txt:326
#: ../../ref/contrib/gis/geoquerysets.txt:348
#: ../../ref/contrib/gis/geoquerysets.txt:371
#: ../../ref/contrib/gis/geoquerysets.txt:389
#: ../../ref/contrib/gis/geoquerysets.txt:407
#: ../../ref/contrib/gis/geoquerysets.txt:426
#: ../../ref/contrib/gis/geoquerysets.txt:444
#: ../../ref/contrib/gis/geoquerysets.txt:462
#: ../../ref/contrib/gis/geoquerysets.txt:480
#: ../../ref/contrib/gis/geoquerysets.txt:498
#: ../../ref/contrib/gis/geoquerysets.txt:539
#: ../../ref/contrib/gis/geoquerysets.txt:559
#: ../../ref/contrib/gis/geoquerysets.txt:579
#: ../../ref/contrib/gis/geoquerysets.txt:599
#: ../../ref/contrib/gis/geoquerysets.txt:619
#: ../../ref/contrib/gis/geoquerysets.txt:867
#: ../../ref/contrib/gis/geoquerysets.txt:982
#: ../../ref/contrib/gis/geoquerysets.txt:1015
#: ../../ref/contrib/gis/geoquerysets.txt:1120
#: ../../ref/contrib/gis/geoquerysets.txt:1136
#: ../../ref/contrib/gis/geoquerysets.txt:1152
#: ../../ref/contrib/gis/geoquerysets.txt:1174
#: ../../ref/contrib/gis/geoquerysets.txt:1193
#: ../../ref/contrib/gis/geos.txt:793
#: ../../ref/contrib/gis/geos.txt:806
#: ../../ref/contrib/gis/geos.txt:822
#: ../../ref/contrib/gis/geos.txt:831
#: ../../ref/contrib/gis/geos.txt:886
#: ../../ref/contrib/gis/geos.txt:909
#: ../../ref/models/options.txt:91
#: ../../ref/models/querysets.txt:264
#: ../../ref/models/querysets.txt:452
#: ../../ref/models/querysets.txt:896
#: ../../ref/models/querysets.txt:965
#: ../../ref/models/querysets.txt:1023
#: ../../ref/models/querysets.txt:1406
#: ../../ref/models/querysets.txt:1432
#: ../../ref/models/querysets.txt:1746
#: ../../ref/models/querysets.txt:1771
#: ../../ref/models/querysets.txt:1796
#: ../../ref/models/querysets.txt:1817
#: ../../ref/models/querysets.txt:1874
#: ../../ref/models/querysets.txt:1910
#: ../../ref/models/querysets.txt:1928
#: ../../ref/models/querysets.txt:1949
#: ../../ref/models/querysets.txt:1970
#: ../../ref/models/querysets.txt:1991
#: ../../ref/models/querysets.txt:2022
#: ../../ref/models/querysets.txt:2040
#: ../../ref/models/querysets.txt:2057
#: ../../ref/models/querysets.txt:2080
#: ../../ref/models/querysets.txt:2106
#: ../../ref/models/querysets.txt:2122
#: ../../ref/models/querysets.txt:2149
#: ../../ref/models/querysets.txt:2173
#: ../../ref/models/relations.txt:41
#: ../../ref/settings.txt:1240
#: ../../ref/templates/builtins.txt:612
#: ../../ref/templates/builtins.txt:726
#: ../../ref/templates/builtins.txt:1776
#: ../../ref/templates/builtins.txt:1786
#: ../../ref/templates/builtins.txt:1793
#: ../../ref/templates/builtins.txt:1897
# d1596e35d3d542e881374304af385e47
# 8e241ca8b4f44fa2be5f9090da2ddf38
# 6a3803ad33324fb9820fd1bf91beba09
# 254dfa3608dd4cd08746bc6570effc93
# 868136c5a8044063bbe7572690bd3c6e
# b1201fe92363497ea7b66494da1a1bc8
# 8c143cec75c04619b3bbe4a5fdc14f67
# 6dc0f91b4bd54ebab1307220b0c46e9a
# c9af4c86d32b407cb5b544eebc64c371
# fb04fa446a6546d7a19961a7bae1b0f7
# 03d8673398e543418edcd4e362469b6e
# a13163dc6e1d41ee847165568fb06d06
# bff4bf267ed341a39c923b4062875acc
# 77f764da50c54964b26367ac2a3df64c
# 13877767edbf41dcb098f7b8d621de09
# 7d530be23ee7477db950b36713622ff1
# 63a5fab5f3df4e11a1b56f0d548ae9ce
# 778c84d43c3749cbbf9a983fcb441ad9
# 7458041fdde4418981f6140601dfa2ad
# ca99b80fa69b4ea89b50d25097f63823
# 1b5ce0bd11024da3bfcbe2688d94fce3
# cdb5e062be574d0c8e207ad63c81aaca
# 6c092686cdf141839cdcee4d15cc4541
# 1dfbb973425b4ab781d39f3ba76375d1
# 30229fcca6274ea3a597140cb41e74e7
# b39fd57ac1434ec38a9deed461fc1f0e
# 6650660750204495a85ca1a9e5345a25
# fb07e0381bc1476aaeb0260705892c2d
# 26b016cbc99d4076a3d1cf89b3409bad
# 7e9b3beffa78474d88220dab54ab3fb4
# a1b01bba5b0b41029093432555406735
# ce147b8903be4cd5b5c924a138f39f4b
# 57316338a6cc433987e98195cd60fe5c
# 7d0be720e38e45e0ab5ff95ec22bc992
# 1877449c7593475f8b8c80147da4f11b
# 40e047890d4048029d836936937a559c
# cbb86e6ac4f14083a00f7d10cb8c5ef5
# 90a4829a10ca406293c033470d2530b4
# c9c451b3fe8445cda746f740b3f4a9c0
# 27d8898e0cc748d98d2dd7c80a438976
# d90e5455e6f64e4f806c59014af04009
# 385953f01ee545edabfbe54ec208397b
# 70038a7a81e046ac8debbb0fb2617e34
# 25d1010802a64dc4a1a7fbcc4ff686d2
# 26cb33a0294948d8bc608a11e7947b2d
# 8010ac7c210648549aab7b42379015a6
# 88c8a0e597b64586849be12a109696ac
# 09e232e8887a445ea89c51f627f7ad2d
# 3dc300fbda9045dcb3e308b8967fe17a
# 578d6600120d44ddb47e5e755c89565d
# eae5cfa3a4014dc58d0b4a6b3ff1dad2
# 2c3205f55db04b88a85ad70328264d06
# b69a53f651f14c208a36f1f76984d82a
# 190cf0711a2f466bad7322918b294b51
# d2892340c4eb45ffb6e2475608b0f461
# e7188937fdff4dcfba8e216d8f115f6b
# ab7184e762164761846cf6a3d2a24c1d
# 4f12e4a565364eed9cc1e5026527afb0
# 22329c805dea4229bcd4ddc5a09c28dc
# ef3ce0d2dbc54527baaf8fc1ddc25f77
# 0c678914e98f48bfb5a60fdbb8d2c28e
# 36ec2ad5fa6543f9bb8e709745cf63cd
# 142c49fc4d334c05a814ca19b2af5d82
# 282164d97d504ba9bc457fc74158404a
# bea531aacfe34f5fab311f17c0743b1d
# a03b343007f24e7eae825be2e3330629
# fae553d5cdfc42d8964c26236aa23a93
# 8fa68501a4e1468f948febc164c4eb7d
# 310a73d5436443a7805a1ae9bb681bc5
# 2bad695396e94383b7e8f7185fbe44a6
# 331cb86cf31b435ca606ccc1e9587d54
# bfc460c1e5a74ae18a8d284e93852c43
# 4bf7b6936f734e499afceacf4d2570f4
# 01d39a4896b6428b92efac2e23ed424d
# aaa23d2c9687486b9f5fac316ab76b61
# 5d9cf16144ce452d8154a5b8dd3d6033
# 4ae6a0d1314a45c5aeb00d5772fedbe9
# dc9585f35d7249e1b8bfd2faa641ef8b
# e154fe6d6f674b78948f00301ade28bd
# a28f7f8e7c534069a63167cc85cf32de
# f81a4a8b4c84486eb9254d4381f22003
msgid "Example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:135
# 4b24eb668ac440cbbda82cbb35b5bf60
msgid "This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it'll show the day-level drill-down only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:141
# 60d6326e69a14252b5acb227dc8f3f13
msgid "This attribute, if given, should be a list of field names to exclude from the form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:144
# fad43221daee42d582b44c307f9cdae2
msgid "For example, let's consider the following model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:151
# e8b0530e1de94f4bbe3f8874470e4a0e
msgid "If you want a form for the ``Author`` model that includes only the ``name`` and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:161
# d8ce2df6c8c34e35a57a6b8bc6804b01
msgid "Since the Author model only has three fields, ``name``, ``title``, and ``birth_date``, the forms resulting from the above declarations will contain exactly the same fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:167
# ff689b9a5ef64d67853ec6600bd01aca
msgid "If you need to achieve simple changes in the layout of fields in the forms of the \"add\" and \"change\" pages like only showing a subset of the available fields, modifying their order or grouping them in rows you can use the ``fields`` option (for more complex layout needs see the :attr:`~ModelAdmin.fieldsets` option described in the next section). For example, you could define a simpler version of the admin form for the ``django.contrib.flatpages.FlatPage`` model as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:178
# 561e52dbd9914052b476a2e9f2cd060c
msgid "In the above example, only the fields ``url``, ``title`` and ``content`` will be displayed, sequentially, in the form. ``fields`` can contain values defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:185
# 603ba6ad19e84f4881dea7e93e9335bb
msgid "To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the ``url`` and ``title`` fields will display on the same line and the ``content`` field will be displayed below them in its own line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:195
# dbfe46a6fa37457c9655277ced8ad01f
msgid "This ``fields`` option should not be confused with the ``fields`` dictionary key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in the next section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:199
# fbf2959ed672446baf38cf5534e20266
msgid "If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, Django will default to displaying each field that isn't an ``AutoField`` and has ``editable=True``, in a single fieldset, in the same order as the fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:206
# 0ad133a7d8254a49803993ecb3d5f466
msgid "Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:208
# 5b0f3d592efd44d0aea41e3af180ff3f
msgid "``fieldsets`` is a list of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of the form.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:212
# 9285784469fb48b59a9b06a86604a595
msgid "The two-tuples are in the format ``(name, field_options)``, where ``name`` is a string representing the title of the fieldset and ``field_options`` is a dictionary of information about the fieldset, including a list of fields to be displayed in it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:217
# 66890e732b74485fa4f06c1fc1cc90bb
msgid "A full example, taken from the :class:`django.contrib.flatpages.FlatPage` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:231
# e8b0a0614c8b4a18ba68d3e3b394b7c6
msgid "This results in an admin page that looks like:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:235
# a2b0c65351e34cf6883bb636222a64bd
msgid "If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, Django will default to displaying each field that isn't an ``AutoField`` and has ``editable=True``, in a single fieldset, in the same order as the fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:240
# 194770f140f942559b47ccc07ad44c9a
msgid "The ``field_options`` dictionary can have the following keys:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:243
# 183ab34633b04dd9aa175fdc70fc4f8c
msgid "A tuple of field names to display in this fieldset. This key is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:252
# b5d0fd41a6094952adef1fa507f74f32
msgid "Just like with the :attr:`~ModelAdmin.fields` option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the ``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:261
# 7c86840e97914b1d85361d13372b1754
msgid "``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:265
# e2d21f8ce3874b64b64314adc8b10af2
msgid "A list containing extra CSS classes to apply to the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:273
# 9728b80e15b744f9a246ce278d4600e3
msgid "Two useful classes defined by the default admin site stylesheet are ``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be initially collapsed in the admin and replaced with a small \"click to expand\" link. Fieldsets with the ``wide`` style will be given extra horizontal space."
msgstr ""

#: ../../ref/contrib/admin/index.txt:280
# a1e3970d46c948249ed8f5d1c41cc5b0
msgid "A string of optional extra text to be displayed at the top of each fieldset, under the heading of the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:283
# 3a3fa3004ca141cc97025c1e070d2ddf
msgid "Note that this value is *not* HTML-escaped when it's displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and ``django.utils.html.escape()`` to escape any HTML special characters."
msgstr ""

#: ../../ref/contrib/admin/index.txt:291
# a8f514a0153047be8d4030c5bcc960ca
msgid "By default, a :class:`~django.db.models.ManyToManyField` is displayed in the admin site with a ``<select multiple>``. However, multiple-select boxes can be difficult to use when selecting many items. Adding a :class:`~django.db.models.ManyToManyField` to this list will instead use a nifty unobtrusive JavaScript \"filter\" interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See :attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:302
# 671d6928a1c24ec2902fe697cb230828
msgid "Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display of the filter interface with the box of unselected options appearing above the box of selected options."
msgstr ""

#: ../../ref/contrib/admin/index.txt:308
# 7c4324373a104751b5aa49f0a797b11c
msgid "By default a ``ModelForm`` is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own ``ModelForm`` to override any default form behavior on the add/change pages. Alternatively, you can customize the default form rather than specifying an entirely new one by using the :meth:`ModelAdmin.get_form` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:315
# bb6150c3cf0b436bb83815eb7d5aa267
msgid "For an example see the section `Adding custom validation to the admin`_."
msgstr ""

#: ../../ref/contrib/admin/index.txt:319
# af9edb2807054abbb5ef0a44c1db7a71
msgid "If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option then ``ModelAdmin`` takes precedence::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:332
# b75cb597011f493782b508461a7f984a
msgid "In the above example, the \"age\" field will be excluded but the \"name\" field will be included in the generated form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:337
# a7fec7ebd1d24bb29024fc50f114c72b
msgid "This provides a quick-and-dirty way to override some of the :class:`~django.forms.Field` options for use in the admin. ``formfield_overrides`` is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time."
msgstr ""

#: ../../ref/contrib/admin/index.txt:342
# dccd43920ac442cfa26e341e0765b218
msgid "Since that's a bit abstract, let's look at a concrete example. The most common use of ``formfield_overrides`` is to add a custom widget for a certain type of field. So, imagine we've written a ``RichTextEditorWidget`` that we'd like to use for large text fields instead of the default ``<textarea>``. Here's how we'd do that::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:360
# 13e49305d7f94d05a29ab31acd6b857a
msgid "Note that the key in the dictionary is the actual field class, *not* a string. The value is another dictionary; these arguments will be passed to :meth:`~django.forms.Field.__init__`. See :doc:`/ref/forms/api` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:367
# c95e4d04770a44c39167be881a8079f6
msgid "If you want to use a custom widget with a relation field (i.e. :class:`~django.db.models.ForeignKey` or :class:`~django.db.models.ManyToManyField`), make sure you haven't included that field's name in ``raw_id_fields`` or ``radio_fields``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:372
# b36243fc78fd419fb9ba2b9b473b4b5c
msgid "``formfield_overrides`` won't let you change the widget on relation fields that have ``raw_id_fields`` or ``radio_fields`` set. That's because ``raw_id_fields`` and ``radio_fields`` imply custom widgets of their own."
msgstr ""

#: ../../ref/contrib/admin/index.txt:379
# 8339daf12c0343efb32da399be2e570e
msgid "See :class:`InlineModelAdmin` objects below as well as :meth:`ModelAdmin.get_formsets`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:384
# e79b0732429545e5b76018bb60bb054a
msgid "Set ``list_display`` to control which fields are displayed on the change list page of the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:391
# 4ca98339b18246f09d7a6620754c4939
msgid "If you don't set ``list_display``, the admin site will display a single column that displays the ``__unicode__()`` representation of each object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:394
# a4260aad3bc94e3692969574427f832d
msgid "You have four possible values that can be used in ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:396
# 90350f313aa44784b023e2c2834a8933
msgid "A field of the model. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:401
# b7f02694fcde43c5813b805be9e697e8
msgid "A callable that accepts one parameter for the model instance. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:411
# bb9f1aed321a4448bd7afadb2099e9f7
msgid "A string representing an attribute on the ``ModelAdmin``. This behaves same as the callable. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:421
# 6120db87c6324341a83449170f5c7d01
msgid "A string representing an attribute on the model. This behaves almost the same as the callable, but ``self`` in this context is the model instance. Here's a full model example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:436
# 4da2f5e1291c449183ae4a9781506eea
msgid "A few special cases to note about ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:438
# a5837d92c5c04fad87973c2a466aae5f
msgid "If the field is a ``ForeignKey``, Django will display the ``__unicode__()`` of the related object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:441
# e731ec3e6f6147f7b61837e47ec13b84
msgid "``ManyToManyField`` fields aren't supported, because that would entail executing a separate SQL statement for each row in the table. If you want to do this nonetheless, give your model a custom method, and add that method's name to ``list_display``. (See below for more on custom methods in ``list_display``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:447
# 09bb6ada4a5d4fadaae267f66828d8c8
msgid "If the field is a ``BooleanField`` or ``NullBooleanField``, Django will display a pretty \"on\" or \"off\" icon instead of ``True`` or ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:451
# 37cb25acd1c5480fa0075c8cd3e2a0a0
msgid "If the string given is a method of the model, ``ModelAdmin`` or a callable, Django will HTML-escape the output by default. If you'd rather not escape the output of the method, give the method an ``allow_tags`` attribute whose value is ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:456
#: ../../ref/contrib/admin/index.txt:475
# 8f192c2e608944eb93c9dfb869b8665e
# 7056e4b2106e4345964465ad0af27707
msgid "Here's a full example model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:470
# 73dd3974cc1b4ec092a4f90e1936f497
msgid "If the string given is a method of the model, ``ModelAdmin`` or a callable that returns True or False Django will display a pretty \"on\" or \"off\" icon if you give the method a ``boolean`` attribute whose value is ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:489
# 4973d4a3a7ac417bb5b9998bb3351a90
msgid "The ``__str__()`` and ``__unicode__()`` methods are just as valid in ``list_display`` as any other model method, so it's perfectly OK to do this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:495
# 84c9f671bc2d4c46be7d2577cd4b9ce4
msgid "Usually, elements of ``list_display`` that aren't actual database fields can't be used in sorting (because Django does all the sorting at the database level)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:499
# 9f462bed47e14907b703a17bbd252f07
msgid "However, if an element of ``list_display`` represents a certain database field, you can indicate this fact by setting the ``admin_order_field`` attribute of the item."
msgstr ""

#: ../../ref/contrib/admin/index.txt:517
# a079713beaf84bf29b92b67535b917b9
msgid "The above will tell Django to order by the ``first_name`` field when trying to sort by ``colored_first_name`` in the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:522
# 6be272dcaaa3408085c71d98c9724f9b
msgid "Set ``list_display_links`` to control which fields in ``list_display`` should be linked to the \"change\" page for an object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:525
# d652cd0cf63a4b50a6ec9a8a8a4e7c1f
msgid "By default, the change list page will link the first column -- the first field specified in ``list_display`` -- to the change page for each item. But ``list_display_links`` lets you change which columns are linked. Set ``list_display_links`` to a list or tuple of fields (in the same format as ``list_display``) to link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:531
# 3d7186678d164456957f6a8b4353ab51
msgid "``list_display_links`` can specify one or many fields. As long as the fields appear in ``list_display``, Django doesn't care how many (or how few) fields are linked. The only requirement is: If you want to use ``list_display_links``, you must define ``list_display``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:536
# e851f709e91d4541b275e21c2a5d15d1
msgid "In this example, the ``first_name`` and ``last_name`` fields will be linked on the change list page::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:547
# 134e6dcacb744c50902e83ce61996180
msgid "Set ``list_editable`` to a list of field names on the model which will allow editing on the change list page. That is, fields listed in ``list_editable`` will be displayed as form widgets on the change list page, allowing users to edit and save multiple rows at once."
msgstr ""

#: ../../ref/contrib/admin/index.txt:554
# bd75ae6de43b44abb91b5cac1b02a314
msgid "``list_editable`` interacts with a couple of other options in particular ways; you should note the following rules:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:557
# 7ce6db2b1cb54e90b9b50231be831aab
msgid "Any field in ``list_editable`` must also be in ``list_display``. You can't edit a field that's not displayed!"
msgstr ""

#: ../../ref/contrib/admin/index.txt:560
# 3caa2d2efb9647ed952aed6d28cd2195
msgid "The same field can't be listed in both ``list_editable`` and ``list_display_links`` -- a field can't be both a form and a link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:564
# 4be8369bac4647cc9c98783bc617b50e
msgid "You'll get a validation error if either of these rules are broken."
msgstr ""

#: ../../ref/contrib/admin/index.txt:568
# 62ab5c15633a4430b5744f7e6e7095da
msgid "Set ``list_filter`` to activate filters in the right sidebar of the change list page of the admin, as illustrated in the following screenshot:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:573
# 0fa91d7b7dc24586a4d454e4958a465b
msgid "``list_filter`` should be a list or tuple of elements, where each element should be of one of the following types:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:576
# 87d38735736b4a839f5658c5cd192234
msgid "a field name, where the specified field should be either a ``BooleanField``, ``CharField``, ``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` or ``ManyToManyField``, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:583
# 11081d88975142a68913d7f713e0d403
msgid "Field names in ``list_filter`` can also span relations using the ``__`` lookup, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:591
# 064bb4cbb608423bba500e9d8bdacce2
msgid "a class inheriting from :mod:`django.contrib.admin.SimpleListFilter`, which you need to provide the ``title`` and ``parameter_name`` attributes to and override the ``lookups`` and ``queryset`` methods, e.g.::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:642
# 00aa94bbe48542f3a2f093b4b0da2f9f
msgid "As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` and ``queryset`` methods, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:657
# fd7bd126f0f94e2ba0f635995d146ed2
msgid "Also as a convenience, the ``ModelAdmin`` object is passed to the ``lookups`` method, for example if you want to base the lookups on the available data::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:678
# ebed3574e153402b95865cf1c55a4543
msgid "a tuple, where the first element is a field name and the second element is a class inheriting from :mod:`django.contrib.admin.FieldListFilter`, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:691
# af82f4870c0b4a77a95e02d550fb9418
msgid "The ``FieldListFilter`` API is considered internal and might be changed."
msgstr ""

#: ../../ref/contrib/admin/index.txt:696
# 196af24c3e454d62a1961ce0077364d7
msgid "It is possible to specify a custom template for rendering a list filter::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:701
# 1aa4f0066f5d4e7cb06515ec4df3629f
msgid "See the default template provided by django (``admin/filter.html``) for a concrete example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:708
# 02985597a6624325aa9d1e5b6d1dedc7
msgid "Set ``list_max_show_all`` to control how many items can appear on a \"Show all\" admin change list page. The admin will display a \"Show all\" link on the change list only if the total result count is less than or equal to this setting. By default, this is set to ``200``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:715
# 4bfc5b45951248639c39889347609eb3
msgid "Set ``list_per_page`` to control how many items appear on each paginated admin change list page. By default, this is set to ``100``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:720
# 051188d3cd8644389fcc2f4bb6f87741
msgid "Set ``list_select_related`` to tell Django to use :meth:`~django.db.models.query.QuerySet.select_related` in retrieving the list of objects on the admin change list page. This can save you a bunch of database queries."
msgstr ""

#: ../../ref/contrib/admin/index.txt:725
# 7ca4a882c7084db79d2ecb67719674b3
msgid "The value should be either ``True`` or ``False``. Default is ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:727
# b4d20318c23945e6a2d43c8f547b2f5c
msgid "Note that Django will use :meth:`~django.db.models.query.QuerySet.select_related`, regardless of this setting if one of the ``list_display`` fields is a ``ForeignKey``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:734
# 6efb87962d804eeaa1f259f8b62572d1
msgid "Set ``ordering`` to specify how lists of objects should be ordered in the Django admin views. This should be a list or tuple in the same format as a model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""

#: ../../ref/contrib/admin/index.txt:738
# 7a913664edf1421e9d6be9b620f5a3f9
msgid "If this isn't provided, the Django admin will use the model's default ordering."
msgstr ""

#: ../../ref/contrib/admin/index.txt:743
# 9991d365cdac4d42ab7cd8344d3123ef
msgid "If you need to specify a dynamic order (for example depending on user or language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:748
# a5a6600dc537404ab58ad7a5081c5fc0
msgid "Django honors all elements in the list/tuple; before 1.4, only the first was respected."
msgstr ""

#: ../../ref/contrib/admin/index.txt:753
# 71040a613bae46b0aeb1188c6a86d1ea
msgid "The paginator class to be used for pagination. By default, :class:`django.core.paginator.Paginator` is used. If the custom paginator class doesn't have the same constructor interface as :class:`django.core.paginator.Paginator`, you will also need to provide an implementation for :meth:`ModelAdmin.get_paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:761
# 4eb9db5d627c489bb78a433ef8829e7b
msgid "Set ``prepopulated_fields`` to a dictionary mapping field names to the fields it should prepopulate from::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:767
# 6b10e31fe1e943e1b93f1e5bb2df94f0
msgid "When set, the given fields will use a bit of JavaScript to populate from the fields assigned. The main use for this functionality is to automatically generate the value for ``SlugField`` fields from one or more other fields. The generated value is produced by concatenating the values of the source fields, and then by transforming that result into a valid slug (e.g. substituting dashes for spaces)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:774
# c48952096c9f4dfb8415e989f18e935e
msgid "``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, nor ``ManyToManyField`` fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:779
# 14330348901b4daf903557427e17fd3b
msgid "By default, Django's admin uses a select-box interface (<select>) for fields that are ``ForeignKey`` or have ``choices`` set. If a field is present in ``radio_fields``, Django will use a radio-button interface instead. Assuming ``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:787
# e46f6fbfb0aa44328a0087c87b4e2e83
msgid "You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the ``django.contrib.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:790
# f7c1805675184e8dbf840d4c70d1b99c
msgid "Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or has ``choices`` set."
msgstr ""

#: ../../ref/contrib/admin/index.txt:795
#: ../../ref/contrib/admin/index.txt:1572
# 90b0dbac893647e7aea46c9f73c30d0c
# e1a18b72b0224723b3c2b1bc59a3ec0f
msgid "By default, Django's admin uses a select-box interface (<select>) for fields that are ``ForeignKey``. Sometimes you don't want to incur the overhead of having to select all the related instances to display in the drop-down."
msgstr ""

#: ../../ref/contrib/admin/index.txt:800
# 4c938712dc1545d09e9ae7cb919670c2
msgid "``raw_id_fields`` is a list of fields you would like to change into an ``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:807
# 301b152890494da2af1723b7bacd6eb9
msgid "The ``raw_id_fields`` ``Input`` widget should contain a primary key if the field is a ``ForeignKey`` or a comma separated list of values if the field is a ``ManyToManyField``.  The ``raw_id_fields`` widget shows a magnifying glass button next to the field which allows users to search for and select a value:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:817
# a9d0186f19ea48f0bfdcb09ad39407b5
msgid "By default the admin shows all fields as editable. Any fields in this option (which should be a ``list`` or ``tuple``) will display its data as-is and non-editable; they are also excluded from the :class:`~django.forms.ModelForm` used for creating and editing. Note that when specifying :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields must be present to be shown (they are ignored otherwise)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:825
# 8e8e0ef14bd045b5b8983a55eb384e0b
msgid "If ``readonly_fields`` is used without defining explicit ordering through :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added last after all editable fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:829
# f3e474422d2a4ed7a42f3a9fae068121
msgid "A read-only field can not only display data from a model's field, it can also display the output of a a model's method or a method of the ``ModelAdmin`` class itself. This is very similar to the way :attr:`ModelAdmin.list_display` behaves. This provides an easy way to use the admin interface to provide feedback on the status of the objects being edited, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:851
# 98d37e5607e14044bef4accb3f23cb0d
msgid "Set ``save_as`` to enable a \"save as\" feature on admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:853
# 02a3b3aeba6440398735903faf8a73e6
msgid "Normally, objects have three save options: \"Save\", \"Save and continue editing\" and \"Save and add another\". If ``save_as`` is ``True``, \"Save and add another\" will be replaced by a \"Save as\" button."
msgstr ""

#: ../../ref/contrib/admin/index.txt:857
# 9fe9163edc334a4ba459f2291cb5352c
msgid "\"Save as\" means the object will be saved as a new object (with a new ID), rather than the old object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:860
# 43975ff5a7f94fd1ada3c98432ad4e35
msgid "By default, ``save_as`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:864
# 2a7aaa720a1b490d80be8aadd4555b1d
msgid "Set ``save_on_top`` to add save buttons across the top of your admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:867
# 4479b9319db04888b1ce77aacd7ef146
msgid "Normally, the save buttons appear only at the bottom of the forms. If you set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""

#: ../../ref/contrib/admin/index.txt:871
# a7ccc8dc9029427fbac497fea915dfa2
msgid "By default, ``save_on_top`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:875
# 902de51c5e0e48c6a6bc02b3c2b6aa36
msgid "Set ``search_fields`` to enable a search box on the admin change list page. This should be set to a list of field names that will be searched whenever somebody submits a search query in that text box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:879
# c8b797de09ae42beae910b630eaca0dc
msgid "These fields should be some kind of text field, such as ``CharField`` or ``TextField``. You can also perform a related lookup on a ``ForeignKey`` or ``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:885
# 9577237f93074ea8932fef77c4fd0bbf
msgid "For example, if you have a blog entry with an author, the following definition would enable search blog entries by the email address of the author::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:891
# f028045f2860433fba4a1e0480e1ded2
msgid "When somebody does a search in the admin search box, Django splits the search query into words and returns all objects that contain each of the words, case insensitive, where each word must be in at least one of ``search_fields``. For example, if ``search_fields`` is set to ``['first_name', 'last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:901
# 2ea38502606b4cb9b556f9bf5e644d7f
msgid "For faster and/or more restrictive searches, prefix the field name with an operator:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:905
# 2b970e962a2a441f8148bb9b14bf58ef
msgid "Matches the beginning of the field. For example, if ``search_fields`` is set to ``['^first_name', '^last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:913
# d8c2ac8645544a998eea1e4b25f0787e
msgid "This query is more efficient than the normal ``'%john%'`` query, because the database only needs to check the beginning of a column's data, rather than seeking through the entire column's data. Plus, if the column has an index on it, some databases may be able to use the index for this query, even though it's a ``LIKE`` query."
msgstr ""

#: ../../ref/contrib/admin/index.txt:920
# fb2daa9823404feaa26d838e5616799d
msgid "Matches exactly, case-insensitive. For example, if ``search_fields`` is set to ``['=first_name', '=last_name']`` and a user searches for ``john lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:928
# 8e152d73e8974de0bc056f7902504ab5
msgid "Note that the query input is split by spaces, so, following this example, it's currently not possible to search for all records in which ``first_name`` is exactly ``'john winston'`` (containing a space)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:933
# 0f23d14c8f5e4c298220b2e1f3315a17
msgid "Performs a full-text match. This is like the default search method but uses an index. Currently this is only available for MySQL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:937
# 2246fe53f1e648d897a26c4ac5a0f3bf
msgid "Custom template options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:939
# dbb7d75823de46c490f58eb0feac29f3
msgid "The `Overriding Admin Templates`_ section describes how to override or extend the default admin templates.  Use the following options to override the default templates used by the :class:`ModelAdmin` views:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:945
# 9a716e18a1c44396bfaab79fdd359c7e
msgid "Path to a custom template, used by :meth:`add_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:949
# 2db28bfade9b41bc90ffc469c130abec
msgid "Path to a custom template, used by :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:953
# ae24e0b9715a46e3bc40b656ef3aca26
msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:957
# 3eba4a16e85c4f74b42a3c41dbfdd703
msgid "Path to a custom template, used by :meth:`delete_view` for displaying a confirmation page when deleting one or more objects."
msgstr ""

#: ../../ref/contrib/admin/index.txt:962
# 4736148839cd4cb8b3435ac6b0303760
msgid "Path to a custom template, used by the :meth:`delete_selected` action method for displaying a confirmation page when deleting one or more objects. See the :doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:969
# 4f0f0e2f596a4805911291471ccfdd39
msgid "Path to a custom template, used by :meth:`history_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:975
# fd13266e8cbc4fafb997bb1e1bf222aa
msgid "``ModelAdmin`` methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:979
# c585a8d3493a49ad8784302cea2a93c1
msgid ":meth:`ModelAdmin.save_model` and :meth:`ModelAdmin.delete_model` must save/delete the object, they are not for veto purposes, rather they allow you to perform extra operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:985
# 72c555b722744004b8c24b1f438aced7
msgid "The ``save_model`` method is given the ``HttpRequest``, a model instance, a ``ModelForm`` instance and a boolean value based on whether it is adding or changing the object. Here you can do any pre- or post-save operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:989
# 338d155793a14bb0a23aa83ea7d036de
msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:998
# 5bef52c297fc4bc9b5a72c9ff1926032
msgid "The ``delete_model`` method is given the ``HttpRequest`` and a model instance. Use this method to do pre- or post-delete operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1003
# 2cb60ae2f9c243ffb7dc512550c03b31
msgid "The ``save_formset`` method is given the ``HttpRequest``, the parent ``ModelForm`` instance and a boolean value based on whether it is adding or changing the parent object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1007
# 691e8b2fe1184bc794fa81639c7de78c
msgid "For example to attach ``request.user`` to each changed formset model instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1022
# 2efce37f6e98423ebc3b4f6a7ed182c6
msgid "The ``get_ordering`` method takes a``request`` as parameter and is expected to return a ``list`` or ``tuple`` for ordering similar to the :attr:`ordering` attribute. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1038
# 78254566f6404e36a809cb48d47a5f28
msgid "The ``save_related`` method is given the ``HttpRequest``, the parent ``ModelForm`` instance, the list of inline formsets and a boolean value based on whether the parent is being added or changed. Here you can do any pre- or post-save operations for objects related to the parent. Note that at this point the parent object and its form have already been saved."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1046
# 997bba9511c04bf3913a4941b458dea4
msgid "The ``get_readonly_fields`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``list`` or ``tuple`` of field names that will be displayed as read-only, as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1055
# 1aecb5264d5f4b908e0c0d619d658ffd
msgid "The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``dictionary``, as described above in the :attr:`ModelAdmin.prepopulated_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1064
# fba438f6cb9b4d8086c9c02a81b4e173
msgid "The ``get_list_display`` method is given the ``HttpRequest`` and is expected to return a ``list`` or ``tuple`` of field names that will be displayed on the changelist view as described above in the :attr:`ModelAdmin.list_display` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1073
# c4859a554c50413488624b4ae77f461a
msgid "The ``get_list_display_links`` method is given the ``HttpRequest`` and the ``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is expected to return a ``list`` or ``tuple`` of field names on the changelist that will be linked to the change view, as described in the :attr:`ModelAdmin.list_display_links` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1083
# 7149e1ea939b445dbea8eb6714e3ecbe
msgid "The ``get_list_filter`` method is given the ``HttpRequest`` and is expected to return the same kind of sequence type as for the :attr:`~ModelAdmin.list_filter` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1091
# 52404c29fdda4d46829e9302f5122ef5
msgid "The ``get_inline_instances`` method is given the ``HttpRequest`` and the ``obj`` being edited (or ``None`` on an add form) and is expected to return a ``list`` or ``tuple`` of :class:`~django.contrib.admin.InlineModelAdmin` objects, as described below in the :class:`~django.contrib.admin.InlineModelAdmin` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1099
# c9a73840821d47a0854b1570ed64fc4a
msgid "The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for that ModelAdmin in the same way as a URLconf.  Therefore you can extend them as documented in :doc:`/topics/http/urls`::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1117
# 04c18be67496411e8e73864d5e9786b8
msgid "Notice that the custom patterns are included *before* the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you'll usually want to prepend your custom URLs to the built-in ones."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1122
# 72495bfe475d42c5909dccfc50128d24
msgid "In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1126
# f5736a115d0e41d5b47d528cc2246009
msgid "However, the ``self.my_view`` function registered above suffers from two problems:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1129
# 142decee65924948b771fb8a3851d1e0
msgid "It will *not* perform any permission checks, so it will be accessible to the general public."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1131
# d2ca317e626c4bf7a265ffa7c209a5bd
msgid "It will *not* provide any header details to prevent caching. This means if the page retrieves data from the database, and caching middleware is active, the page could show outdated information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1135
# 6ca7df48c9f54c7b87ad5f2d02c85cbc
msgid "Since this is usually not what you want, Django provides a convenience wrapper to check permissions and mark the view as non-cacheable. This wrapper is :meth:`AdminSite.admin_view` (i.e. ``self.admin_site.admin_view`` inside a ``ModelAdmin`` instance); use it like so::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1149
# 0e3adb8d7c28491fac39fde8fa6545dd
msgid "Notice the wrapped view in the fifth line above::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1153
# a50a839e9fe64217a14498d14c7631a9
msgid "This wrapping will protect ``self.my_view`` from unauthorized access and will apply the ``django.views.decorators.cache.never_cache`` decorator to make sure it is not cached if the cache middleware is active."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1157
# a0ff240e920443df91d32454dc9f6dd7
msgid "If the page is cacheable, but you still want the permission check to be performed, you can pass a ``cacheable=True`` argument to :meth:`AdminSite.admin_view`::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1165
# 02164e900c6e4b658aba40c3b4408ccf
msgid "Returns a :class:`~django.forms.ModelForm` class for use in the admin add and change views, see :meth:`add_view` and :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1168
# 38b461a3fde74ab48c8285bf6bf1863f
msgid "If you wanted to hide a field from non-superusers, for example, you could override ``get_form`` as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1180
# 6ef26bca87044ce0841b9a8f68c48f60
msgid "Yields :class:`InlineModelAdmin`\\s for use in admin add and change views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1182
# 1bc710b32c704e11b454c913421d64de
msgid "For example if you wanted to display a particular inline only in the change view, you could override ``get_formsets`` as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1197
# 9f52088ca21948b2829ccbd28b3616b9
msgid "The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to override the default formfield for a foreign keys field. For example, to return a subset of objects for this foreign key field based on the user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1207
# da905ceefc444973908741fcdf2f2ccf
msgid "This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key field to only display the cars owned by the ``User`` instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1212
# 859a0a461c1647b280300f3a3aea8f18
msgid "Like the ``formfield_for_foreignkey`` method, the ``formfield_for_manytomany`` method can be overridden to change the default formfield for a many to many field. For example, if an owner can own multiple cars and cars can belong to multiple owners -- a many to many relationship -- you could filter the ``Car`` foreign key field to only display the cars owned by the ``User``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1227
# 0f718043ace7431a8145069479b5d291
msgid "Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` methods, the ``formfield_for_choice_field`` method can be overridden to change the default formfield for a field that has declared choices. For example, if the choices available to a superuser should be different than those available to regular staff, you could proceed as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1246
# de05405ddcab44ab891fcc732b7e7a5b
msgid "Returns the ``Changelist`` class to be used for listing. By default, ``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this class you can change the behavior of the listing."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1252
# c74ae60127d3415c9766d0cd43b0f52a
msgid "Returns a :class:`~django.forms.ModelForm` class for use in the ``Formset`` on the changelist page. To use a custom form, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1265
# e73eba835bad4d8ab245478cb141ccc8
msgid "Returns a :ref:`ModelFormSet <model-formsets>` class for use on the changelist page if :attr:`~ModelAdmin.list_editable` is used. To use a custom formset, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1281
# d98e4b1d4908497ea06369c2ffeb96fd
msgid "Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1286
# 50a39761b88f4667ae693abdc15ac68b
msgid "Should return ``True`` if editing obj is permitted, ``False`` otherwise. If obj is ``None``, should return ``True`` or ``False`` to indicate whether editing of objects of this type is permitted in general (e.g., ``False`` will be interpreted as meaning that the current user is not permitted to edit any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1294
# 62a87de77c8841d0982e42db8b08bd23
msgid "Should return ``True`` if deleting obj is permitted, ``False`` otherwise. If obj is ``None``, should return ``True`` or ``False`` to indicate whether deleting objects of this type is permitted in general (e.g., ``False`` will be interpreted as meaning that the current user is not permitted to delete any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1302
# d0b0154668534e2eab6b2e1cde1e11af
msgid "The ``queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db.models.query.QuerySet` of all model instances that can be edited by the admin site. One use case for overriding this method is to show objects owned by the logged-in user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1316
# ef38eca256fa415ba008579e04acca39
msgid "Sends a message to the user using the :mod:`django.contrib.messages` backend.  See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1321
# edb2d0665d804c10b483563af017adf0
msgid "Keyword arguments allow you to change the message level, add extra CSS tags, or fail silently if the ``contrib.messages`` framework is not installed. These keyword arguments match those for :func:`django.contrib.messages.add_message`, see that function's documentation for more details. One difference is that the level may be passed as a string label in addition to integer/constant."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1330
# 94073d38fa1f4d43a33e6d7da643ec97
msgid "Returns an instance of the paginator to use for this view. By default, instantiates an instance of :attr:`paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1334
# 8353c34ad5f540deb8ab81afb381b11f
msgid "Other methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1338
# e0fc0efe5548437984f3f2c6e911c508
msgid "Django view for the model instance addition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1342
# 332402fa61694f93844a13d0c428cc32
msgid "Django view for the model instance edition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1346
# 9773a28ee40c418d9704d52067e930a1
msgid "The ``form_url`` parameter was added."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1350
# 447a502414834b72bd5ebd573c7f0f36
msgid "Django view for the model instances change list/actions page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1355
# c83a831eb52a4e92a2411e84a7f9d584
msgid "Django view for the model instance(s) deletion confirmation page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1360
# 0e43c63c460c4980b69508330b742988
msgid "Django view for the page that shows the modification history for a given model instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1363
# f6d397dc7d804c618ff0e12bdbaf616b
msgid "Unlike the hook-type ``ModelAdmin`` methods detailed in the previous section, these five methods are in reality designed to be invoked as Django views from the admin application URL dispatching handler to render the pages that deal with model instances CRUD operations. As a result, completely overriding these methods will significantly change the behavior of the admin application."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1369
# 13d9205f15d84cc59cbf79d84d992bd7
msgid "One common reason for overriding these methods is to augment the context data that is provided to the template that renders the view. In the following example, the change view is overridden so that the rendered template is provided some extra mapping data that would not otherwise be available::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1391
# f03fe080baff46bda5aa1a3328108021
msgid "These views now return :class:`~django.template.response.TemplateResponse` instances which allow you to easily customize the response data before rendering. For more details, see the :doc:`TemplateResponse documentation </ref/template-response>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1399
# 7acd9c1f651649d0bfc8b4f903b378cd
msgid "``ModelAdmin`` media definitions"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1401
# b80eaf286b034cf6a5d61f5a885d783d
msgid "There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a Media inner class on your ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1412
# 1bdb1c8ee17b460a921286ff069535a1
msgid "The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) to any media paths. The same rules apply as :ref:`regular media definitions on forms <form-media-paths>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1417
# 3c53fa8e466e4dab9212a410712eb312
msgid "Django admin Javascript makes use of the `jQuery`_ library. To avoid conflicts with user-supplied scripts or libraries, Django's jQuery is namespaced as ``django.jQuery``. If you want to use jQuery in your own admin JavaScript without including a second copy, you can use the ``django.jQuery`` object on changelist and add/edit views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1423
# 8c6536d6bbfb44d096b9ff29900ea382
msgid "If you require the jQuery library to be in the global namespace, for example when using third-party jQuery plugins, or need a newer version of jQuery, you will have to include your own copy of jQuery."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1430
# 7cb4adfe7d36403ca2bfe0e2a1578ea4
msgid "Adding custom validation to the admin"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1432
# 25b17bcc44794584bb4210b39c869073
msgid "Adding custom validation of data in the admin is quite easy. The automatic admin interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class gives you the ability define your own form::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1439
# 284781aa59bd43b0a155c7d54ef03d99
msgid "``MyArticleAdminForm`` can be defined anywhere as long as you import where needed. Now within your form you can add your own custom validation for any field::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1451
# da135e3ee6044b23aafe350e938c675e
msgid "It is important you use a ``ModelForm`` here otherwise things can break. See the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation </ref/forms/validation>` and, more specifically, the :ref:`model form validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1460
# 46de9d9b86fa469fb87d43231a94a9a2
msgid "``InlineModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1466
# 777da8bd8559484985b684c0fd4a5abd
msgid "The admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1476
# 6e33a83413824646810c6a4cf040a74a
msgid "You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1487
# 7e2218eba7bb403d9fac0b3385cce195
msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1489
# 5561d044be564278ae1ac6374eb69825
msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1490
# da58fd0453c24868ac90d6ad5b87e0bc
msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1492
# cc3109ec6c0d48a98cf165ee95393e6a
msgid "The difference between these two is merely the template used to render them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1496
# 7e63ff69af7a4aefbdcc2b01fde081d4
msgid "``InlineModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1498
# 68ba4b5deb22403781ade430fce63f4e
msgid "``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and adds some of its own (the shared features are actually defined in the ``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1502
# ff7060f151fb4229ab5e7fcfd833b0b6
msgid ":attr:`~InlineModelAdmin.form`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1503
# 74460b67759b4a2ba0389f3dd8c9f8e8
msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1504
# ddc5662d853e448ab8c57d3780e95786
msgid ":attr:`~ModelAdmin.fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1505
# 07b3626cdd264b62a3249f0ab8f03c25
msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1506
# 74efeb06e5814b75bfe3d7f7a941f6e6
msgid ":attr:`~ModelAdmin.exclude`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1507
# 7e1ffaec9ad04c549a06765ee9205e12
msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1508
# 68fc761ddc5649ed94f9344b9fce1275
msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1509
# 28a54b6978f845d3a1394962c2379ef8
msgid ":attr:`~ModelAdmin.ordering`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1510
# d1e5508101e64f318c88d7f052bd6a8f
msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1511
# b9354b2e36174ffe82a315d958ae85ca
msgid ":meth:`~ModelAdmin.queryset`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1512
# ab0ce12e0b754e86853efdb81056c1f5
msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1513
# bded32e2a8a14598a10338bbd028aa93
msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1514
# f14dfb939e7542e8ac875183674da88b
msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1515
# 23b1960ce3e34dcbbbd2853e378ea5c7
msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1516
# 900594e39b1c46e4abd393005319e459
msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1520
# f7c1358333f0402b83b15b5c160fa1d4
msgid ":meth:`~ModelAdmin.has_add_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1521
# 018beaec8805467ba0446c1e0bcc9f04
msgid ":meth:`~ModelAdmin.has_change_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1522
# 356f3b92fa514409a929c40190632fd0
msgid ":meth:`~ModelAdmin.has_delete_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1524
# 2a51ef75805447109b86060792353930
msgid "The ``InlineModelAdmin`` class adds:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1528
# d59c2004eb11486a892d95a7829eddf4
msgid "The model which the inline is using. This is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1532
# f77ec060ed8040aba215f36d7b3c3f18
msgid "The name of the foreign key on the model. In most cases this will be dealt with automatically, but ``fk_name`` must be specified explicitly if there are more than one foreign key to the same parent model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1538
# c9a1b04d8d3e456b89a1f4fc280ba801
msgid "This defaults to ``BaseInlineFormSet``. Using your own formset can give you many possibilities of customization. Inlines are built around :ref:`model formsets <model-formsets>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1544
# b3d5554ba8ab40949e36102f13eecc60
msgid "The value for ``form`` defaults to ``ModelForm``. This is what is passed through to ``inlineformset_factory`` when creating the formset for this inline."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1550
# 3e93fd30c6584518bdc641b2bfb3ef6a
msgid "This controls the number of extra forms the formset will display in addition to the initial forms. See the :doc:`formsets documentation </topics/forms/formsets>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1555
# 6d6483d9d94d4d28b51f832e09befc1f
msgid "For users with JavaScript-enabled browsers, an \"Add another\" link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the ``extra`` argument."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1559
# bc20b4434d384c438b5887d5df1bed91
msgid "The dynamic link will not appear if the number of currently displayed forms exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1566
# f76345f1625544399bcff398efa90421
msgid "This controls the maximum number of forms to show in the inline. This doesn't directly correlate to the number of objects, but can if the value is small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1577
# f98ba48c935140cfaaff097c5405b9ed
msgid "``raw_id_fields`` is a list of fields you would like to change into a ``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1587
# f34528f60c4948f198fb665e9b1c143d
msgid "The template used to render the inline on the page."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1591
# 66f9efccaa094365ae6c113352546542
msgid "An override to the ``verbose_name`` found in the model's inner ``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1596
# ae1e215bfdda462ca99ac8bc9cd4e24e
msgid "An override to the ``verbose_name_plural`` found in the model's inner ``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1601
# ed346362e9f94dcaacce93a9eec858e7
msgid "Specifies whether or not inline objects can be deleted in the inline. Defaults to ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1606
# 505183aae72a479fbee5c39a8c609e67
msgid "Returns a ``BaseInlineFormSet`` class for use in admin add/change views. See the example for :class:`ModelAdmin.get_formsets`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1610
# 697595cd9958433eb04c2205e36b0b44
msgid "Working with a model with two or more foreign keys to the same parent model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1612
# c76d892f5adf40169eb4ee387f0b6b7b
msgid "It is sometimes possible to have more than one foreign key to the same model. Take this model for instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1619
# e9bf8f48083c4bcc92ae0d2ef4a37f97
msgid "If you wanted to display an inline on the ``Person`` admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1633
# 1be05626fb4341eba249f2ffa736b746
msgid "Working with many-to-many models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1635
# 82da46d2ef884468a4c9ff3f6a05f05c
msgid "By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the :class:`~django.db.models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each many-to-many field in your model will be represented by a standard HTML ``<select multiple>``, a horizontal or vertical filter, or a ``raw_id_admin`` widget. However, it is also possible to replace these widgets with inlines."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1643
# 22278f1ac7604a57b1100703462847dd
msgid "Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1652
# b71d38d52c6d4c399bc71cb65b77e103
msgid "If you want to display many-to-many relations using an inline, you can do so by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1669
# a0d589889f154a1aa0d931097cfbc191
msgid "There are two features worth noting in this example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1671
# c160d721be6c4d31b09004da7c43339a
msgid "Firstly - the ``MembershipInline`` class references ``Group.members.through``. The ``through`` attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1676
# f2c9b00141d54fa29f48b600b89347ce
msgid "Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. Django displays an admin widget for a many-to-many field on the model that defines the relation (in this case, ``Group``). If you want to use an inline model to represent the many-to-many relationship, you must tell Django's admin to *not* display this widget - otherwise you will end up with two widgets on your admin page for managing the relation."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1683
# 2398da7a131b454f84aecaa42f78c1bd
msgid "In all other respects, the ``InlineModelAdmin`` is exactly the same as any other. You can customize the appearance using any of the normal ``ModelAdmin`` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1688
# 0a6639dcccf94b44b0f4b64013bc1d35
msgid "Working with many-to-many intermediary models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1690
# 6647d5567bb944d0a8e2704651546fc7
msgid "When you specify an intermediary model using the ``through`` argument to a :class:`~django.db.models.ManyToManyField`, the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1697
# ae1186f90f85474a8866ebd66835f98f
msgid "However, we still want to be able to edit that information inline. Fortunately, this is easy to do with inline admin models. Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1714
# 1ebc51072fe540d597c7e06abe0a0177
msgid "The first step in displaying this intermediate model in the admin is to define an inline class for the ``Membership`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1721
# 41634b81bb11457ab6ec18a86064f705
msgid "This simple example uses the default ``InlineModelAdmin`` values for the ``Membership`` model, and limits the extra add forms to one. This could be customized using any of the options available to ``InlineModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1725
# 1efa73597c09431e8108ffd99ca1580c
msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1733
# 6b05501b853548c4b5894cecf78084b4
msgid "Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1738
# 75ae522c6704422d89babf1f7ca0221e
msgid "Now your admin site is set up to edit ``Membership`` objects inline from either the ``Person`` or the ``Group`` detail pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1744
# 30e45da729454ccfae60ba9e32d88458
msgid "Using generic relations as an inline"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1746
# 6d553c4bb52047e1ba86de2b3686bd05
msgid "It is possible to use an inline with generically related objects. Let's say you have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1758
# 5cb611d2aef24974b2f9492b57547123
msgid "If you want to allow editing and creating ``Image`` instance on the ``Product`` add/change views you can use ``GenericTabularInline`` or ``GenericStackedInline`` (both subclasses of ``GenericInlineModelAdmin``) provided by ``django.contrib.contenttypes.generic``, they implement tabular and stacked visual layouts for the forms representing the inline objects respectively just like their non-generic counterparts and behave just like any other inline. In your ``admin.py`` for this example app::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1781
# 55575ae359974159b8182d571a49370b
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for more specific information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1785
# 7adfebb1e8694556b6984960b8fdb863
msgid "Overriding admin templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1787
# 2e30beb7fec44aa0aaa31a4bc95be904
msgid "It is relatively easy to override many of the templates which the admin module uses to generate the various pages of an admin site. You can even override a few of these templates for a specific app, or a specific model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1792
# 520e2d9518ff487487ff10d9ec49979e
msgid "Set up your projects admin template directories"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1794
# a2ac2aa6b6974d05b956ad73b70e184b
msgid "The admin template files are located in the ``contrib/admin/templates/admin`` directory."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1797
# ece08a91a8b648e19a60ef304a034790
msgid "In order to override one or more of them, first create an ``admin`` directory in your project's ``templates`` directory. This can be any of the directories you specified in :setting:`TEMPLATE_DIRS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1801
# 99b7f83ff78d45ef9ca59a1263ac0b45
msgid "Within this ``admin`` directory, create sub-directories named after your app. Within these app subdirectories create sub-directories named after your models. Note, that the admin app will lowercase the model name when looking for the directory, so make sure you name the directory in all lowercase if you are going to run your app on a case-sensitive filesystem."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1807
# 1e5a9db84e7d41639335927bf6ca919b
msgid "To override an admin template for a specific app, copy and edit the template from the ``django/contrib/admin/templates/admin`` directory, and save it to one of the directories you just created."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1811
# ff10bfcd3473496bab750f97abc59d5c
msgid "For example, if we wanted to add a tool to the change list view for all the models in an app named ``my_app``, we would copy ``contrib/admin/templates/admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our project, and make any necessary changes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1817
# f04579cc22ec41fb96fc22c46f646a5c
msgid "If we wanted to add a tool to the change list view for only a specific model named 'Page', we would copy that same file to the ``templates/admin/my_app/page`` directory of our project."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1822
# 0e649af3322c451a91c2ea8aee52b0a7
msgid "Overriding vs. replacing an admin template"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1824
# 0b44c4ef00ce450691ec84a7108bb73c
msgid "Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1828
# eacc7e9fe7654077bdc8c73ab7f4b6e6
msgid "To continue the example above, we want to add a new link next to the ``History`` tool for the ``Page`` model. After looking at ``change_form.html`` we determine that we only need to override the ``object-tools`` block. Therefore here is our new ``change_form.html`` :"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1851
# c5ee3fe2dc3341f1850d27652c53e81a
msgid "And that's it! If we placed this file in the ``templates/admin/my_app`` directory, our link would appear on every model's change form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1855
# ce3853c148d642c3a11bd849ac17235b
msgid "Templates which may be overridden per app or model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1857
# 17f136273bec4ac9b2605a66f9085fc8
msgid "Not every template in ``contrib/admin/templates/admin`` may be overridden per app or per model. The following can:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1860
# a26ae820a9194bccabe22a2be84fb95d
msgid "``app_index.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1861
# a76e8d7d3ff6415e9be0306565c683bf
msgid "``change_form.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1862
# f06bd3120fc04bf6843082f6c9cb4af2
msgid "``change_list.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1863
# 8ae2ba256cf5406bbbd096739dd839de
msgid "``delete_confirmation.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1864
# 03e7da9e6e1249dcadafaeab3c7febd5
msgid "``object_history.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1866
# 774b8c9da87145fda98c953425f0672d
msgid "For those templates that cannot be overridden in this way, you may still override them for your entire project. Just place the new version in your ``templates/admin`` directory. This is particularly useful to create custom 404 and 500 pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1873
# 5c8e573a0ed645728eb8c7aa41596621
msgid "Some of the admin templates, such as ``change_list_request.html`` are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1880
# bf84c8d0958a4a8693ffe234bcf4b044
msgid "Root and login templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1882
# f0370193c49a45aab4e8cab5a87cba88
msgid "If you wish to change the index, login or logout templates, you are better off creating your own ``AdminSite`` instance (see below), and changing the :attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:`AdminSite.logout_template` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1888
# 5a600197e1294d4abfb77cfbe31ff504
msgid "``AdminSite`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1892
# daa19598de7e49c6b1520121b0498bf8
msgid "A Django administrative site is represented by an instance of ``django.contrib.admin.sites.AdminSite``; by default, an instance of this class is created as ``django.contrib.admin.site`` and you can register your models and ``ModelAdmin`` instances with it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1897
# aff54e7799ae4b38a77198d52fcae010
msgid "If you'd like to set up your own administrative site with custom behavior, however, you're free to subclass ``AdminSite`` and override or add anything you like. Then, simply create an instance of your ``AdminSite`` subclass (the same way you'd instantiate any other Python class), and register your models and ``ModelAdmin`` subclasses with it instead of using the default."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1904
# 3cbf9561ff044244825396f1c45fabb2
msgid "When constructing an instance of an ``AdminSite``, you are able to provide a unique instance name using the ``name`` argument to the constructor. This instance name is used to identify the instance, especially when :ref:`reversing admin URLs <admin-reverse-urls>`. If no instance name is provided, a default instance name of ``admin`` will be used."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1911
# af671d35d3cb4326af9dd9b9ff6171d9
msgid "``AdminSite`` attributes"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1913
# 35b1b62258a948c09ee1961b3bb7bb69
msgid "Templates can override or extend base admin templates as described in `Overriding Admin Templates`_."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1918
# ab066a314e3c49c2830bf8be59afc745
msgid "Path to a custom template that will be used by the admin site main index view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1923
# 93627844d3c24d7793247b0947a98d6a
msgid "Path to a custom template that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1927
# 042e1ad114134568ad64fe4cf96047aa
msgid "Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1932
# 609d9f48d3da47d4af77235c85d7d183
msgid "Path to a custom template that will be used by the admin site logout view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1936
# e73bc4686ff74b1590cbc18816ca6214
msgid "Path to a custom template that will be used by the admin site password change view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1941
# f535db2950014f169c73f34baccd6718
msgid "Path to a custom template that will be used by the admin site password change done view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1945
# 2fce389bb458403c8689110e41d395fd
msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1947
# 6ba97de77a154b18a531aa6d7e2afce2
msgid "The last step in setting up the Django admin is to hook your ``AdminSite`` instance into your URLconf. Do this by pointing a given URL at the ``AdminSite.urls`` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1951
# 15051a51e2fe44dcad87cac8909db161
msgid "In this example, we register the default ``AdminSite`` instance ``django.contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1964
# 2a7389c3d0794f7b890b71799008b5d6
msgid "Above we used ``admin.autodiscover()`` to automatically load the :setting:`INSTALLED_APPS` admin.py modules."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1967
# 4872cc8a7bf449908d3e925b95cad448
msgid "In this example, we register the ``AdminSite`` instance ``myproject.admin.admin_site`` at the URL ``/myadmin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1978
# c4837b7125094a659246e9a6f808a658
msgid "There is really no need to use autodiscover when using your own ``AdminSite`` instance since you will likely be importing all the per-app admin.py modules in your ``myproject.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1983
# 7dc52b0cb5ca4a94896666ab0c730b33
msgid "Multiple admin sites in the same URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1985
# 9970f1f71ac04b5d97d317b0596e4c55
msgid "It's easy to create multiple instances of the admin site on the same Django-powered Web site. Just create multiple instances of ``AdminSite`` and root each one at a different URL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1989
# d87bd04b381c4edd90163c531fe5bf30
msgid "In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature separate versions of the admin site -- using the ``AdminSite`` instances ``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, respectively::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2003
# 79529bc102cb44aa8527a7160c150389
msgid "``AdminSite`` instances take a single argument to their constructor, their name, which can be anything you like. This argument becomes the prefix to the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. This is only necessary if you are using more than one ``AdminSite``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2009
# 7ff43413358644b990be2992355196aa
msgid "Adding views to admin sites"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2011
# 10ec7b872ee346ebb0d4a174e4fb5a92
msgid "Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to include a pattern for your new view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2020
# a64e0d50ab004738a536f58cd68a1390
msgid "Any view you render that uses the admin templates, or extends the base admin template, should provide the ``current_app`` argument to :class:`~django.template.RequestContext` or :class:`~django.template.Context` when rendering the template.  It should be set to either ``self.name`` if your view is on an ``AdminSite`` or ``self.admin_site.name`` if your view is on a ``ModelAdmin``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2030
# 793a46bf80f44efc89a070fc395ab781
msgid "Adding a password-reset feature"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2032
# 8c81e86113aa4127a224abab46fe47c6
msgid "You can add a password-reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2042
# c11e792d54f842d184c87e3375ef8ce5
msgid "(This assumes you've added the admin at ``admin/`` and requires that you put the URLs starting with ``^admin/`` before the line that includes the admin app itself)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2048
# cd502c381caa4b19a14d151ef946c2c9
msgid "The presence of the ``admin_password_reset`` named URL will cause a \"forgotten your password?\" link to appear on the default admin log-in page under the password box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2055
# d6e0991bc41d4d09b02e5091b6b75b8e
msgid "Reversing admin URLs"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2057
# 09ef26f8a071472c85d308fd2d922584
msgid "When an :class:`AdminSite` is deployed, the views provided by that site are accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2060
# b934777b8e2f41d2ad9c89d67c245baf
msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2063
#: ../../ref/contrib/admin/index.txt:2077
# ba5cdf3e36c748c9b25631e425a31528
# 3d045d0c7dca4e7c911181a53951eaa2
msgid "Page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2063
#: ../../ref/contrib/admin/index.txt:2077
# 1fddfa1ebda841d589cab739f9768bc0
# 9054fd1fb71e492e942f54516ece8f67
msgid "URL name"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2063
#: ../../ref/contrib/admin/index.txt:2077
# 77ab8f43f72a4c4f83a31eff244f1ef9
# 838fc0840d144e8bb79d46a36ad6adb1
msgid "Parameters"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2065
#: ../../ref/contrib/sitemaps.txt:364
# adc2d030a6dc4f7fa0510717e8332db9
# 2badc7ea2e5443aca1380efa8c850e85
msgid "Index"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2065
# 9be42d0e6fbc48e5873c021dcc189c87
msgid "``index``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2066
# 497f17d7411d43329f05cf95d518b567
msgid "Logout"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2066
# 813bb827c2544fca9618b7e8b3d5449b
msgid "``logout``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2067
# 5eb247fabf97416ea4555446c8fbfd4c
msgid "Password change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2067
# 62275cae94094efc9722094ebfd05777
msgid "``password_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2068
# e85148f97e97472b8575c1531163d086
msgid "Password change done"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2068
# 2013ec6932a84ba3ac6d22a18593836b
msgid "``password_change_done``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2069
# ef666cf7bf8e4a8f9e310b3c315c4e86
msgid "i18n javascript"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2069
# ae520e1ce7bd43388b6817750e675a81
msgid "``jsi18n``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2070
# 09e7950cde9f4493a04fac092311fc83
msgid "Application index page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2070
# 73e853e262bd463d88c1d3ca0a20c482
msgid "``app_list``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2070
#: ../../ref/models/options.txt:23
# 331d0f130311453bbae435295adf0515
# 9576257b6ca74febb2323a729038824e
msgid "``app_label``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2071
# 6cd3e31f94f14ab89e426932b2c78ad5
msgid "Redirect to object's page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2071
# a67777c216ba48a7a6d093326b2bedd4
msgid "``view_on_site``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2071
# adb25a69c7574b38af5294b1ec5b93a0
msgid "``content_type_id``, ``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2074
# 6fa600f9402f407a81633fc4d9510db4
msgid "Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2079
# 375fa6205a6f48f893400c8dea52e467
msgid "Changelist"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2079
# 5572db34b57745fab542d5913fa3b71e
msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2080
# de736323de8c4283858ab6f0ec69386e
msgid "Add"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2080
# 90564413a78c4733b1f2342932971cc0
msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2081
# 2d040c2775d64845b8d01cd8fbc23279
msgid "History"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2081
# 0cfff7808cb84c7cb8168279fa99b98c
msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2081
#: ../../ref/contrib/admin/index.txt:2082
#: ../../ref/contrib/admin/index.txt:2083
# 808d17afd9ee49b6874bb2f1a0bf7903
# bb9308ddbd5e4e388d30bfbf860ede67
# 0df775f4d7ba46b2a42442d77b1f8086
msgid "``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2082
# 395a301e00ed48f68442972dbdfcc09d
msgid "Delete"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2082
# 0217464b06794114b47359b1e0161cd8
msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2083
# 8a41e43a110f400bb8ab6cf6b04536ef
msgid "Change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2083
# 769deb41ba274354aadb3ae73260c1b7
msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2086
# 74bf554e2b3f44d39ce172ce5587fecd
msgid "These named URLs are registered with the application namespace ``admin``, and with an instance namespace corresponding to the name of the Site instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2089
# f4f3354ea4af498485a58860b45a0467
msgid "So - if you wanted to get a reference to the Change view for a particular ``Choice`` object (from the polls application) in the default admin, you would call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2097
# da71a426eea34626bbec9188a460d816
msgid "This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing ``poll.Choice`` instances in that instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2101
# a6eca0f35ac44009bea64d53a1a08416
msgid "If you want to find a URL in a specific admin instance, provide the name of that instance as a ``current_app`` hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named ``custom``, you would need to call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2108
# 74c5ad6281fe440587c1ea63d86732ed
msgid "For more details, see the documentation on :ref:`reversing namespaced URLs <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2113
# ffbb42293d404b47a0e43661e0cb07d9
msgid "To allow easier reversing of the admin urls in templates, Django provides an ``admin_urlname`` filter which takes an action as argument:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2122
# 069a22183d7f44c99ebefe055b0b66e0
msgid "The action in the examples above match the last part of the URL names for :class:`ModelAdmin` instances described above. The ``opts`` variable can be any object which has an ``app_label`` and ``module_name`` and is usually supplied by the admin views for the current model."
msgstr ""

#: ../../ref/contrib/auth.txt:2
#: ../../ref/django-admin.txt:1140
# 0bf653b375a44057b58ab6accaf7b16f
# 7fc6de93364241b0aadabe381c57447f
msgid "``django.contrib.auth``"
msgstr ""

#: ../../ref/contrib/auth.txt:4
#: ../../ref/contrib/index.txt:59
# a6e0ba8d2f6749488f99ad09240ff9e7
# 47a2116fe33441238913a37c2d577c00
msgid "See :doc:`/topics/auth`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:3
# 6be17715161d4d4a9954048d93c82887
msgid "Customizing the comments framework"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:7
# 791fa98b8eb548b192c14771705dd889
msgid "If the built-in comment framework doesn't quite fit your needs, you can extend the comment app's behavior to add custom data and logic. The comments framework lets you extend the built-in comment model, the built-in comment form, and the various comment views."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:12
# d95e042043f34258bdaaea964c01f61e
msgid "The :setting:`COMMENTS_APP` setting is where this customization begins. Set :setting:`COMMENTS_APP` to the name of the app you'd like to use to provide custom behavior. You'll use the same syntax as you'd use for :setting:`INSTALLED_APPS`, and the app given must also be in the :setting:`INSTALLED_APPS` list."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:18
# bc1fbb0085aa4956826e766745ffe139
msgid "For example, if you wanted to use an app named ``my_comment_app``, your settings file would contain::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:29
# 648f3461c9da4361a078b3d0f39ac2ba
msgid "The app named in :setting:`COMMENTS_APP` provides its custom behavior by defining some module-level functions in the app's ``__init__.py``. The :ref:`complete list of these functions <custom-comment-app-api>` can be found below, but first let's look at a quick example."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:35
# a05a9ee23ae64e4d8d0c66295b84d4fc
msgid "An example custom comments app"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:37
# c8d705bbd2384af69a04b7370d4a5dc4
msgid "One of the most common types of customization is modifying the set of fields provided on the built-in comment model. For example, some sites that allow comments want the commentator to provide a title for their comment; the built-in comment model has no field for that title."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:42
# 1715752e59e74a5f84e741fab2efec26
msgid "To make this kind of customization, we'll need to do three things:"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:44
# 79dbf932e82a48eb94da630321e7f3b6
msgid "Create a custom comment :class:`~django.db.models.Model` that adds on the \"title\" field."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:47
# 16d42b4be642472a8f46ba2d6b7e3dbf
msgid "Create a custom comment :class:`~django.forms.Form` that also adds this \"title\" field."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:50
# 0877cc35b2084113b3c9240365bab762
msgid "Inform Django of these objects by defining a few functions in a custom :setting:`COMMENTS_APP`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:53
# af214de14afe49c885cca9c786a31ddd
msgid "So, carrying on the example above, we're dealing with a typical app structure in the ``my_comment_app`` directory::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:61
# 7d4d1a01ec174230b3405bfc1afb9120
msgid "In the ``models.py`` we'll define a ``CommentWithTitle`` model::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:69
# b4c36503973945dbbe3fe2cb6f45107d
msgid "Most custom comment models will subclass the :class:`Comment` model. However, if you want to substantially remove or change the fields available in the :class:`Comment` model, but don't want to rewrite the templates, you could try subclassing from :class:`BaseCommentAbstractModel`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:74
# 09f9cf3daa6848519e837d1d1ac5a4bb
msgid "Next, we'll define a custom comment form in ``forms.py``. This is a little more tricky: we have to both create a form and override :meth:`CommentForm.get_comment_model` and :meth:`CommentForm.get_comment_create_data` to return deal with our custom title field::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:97
# af3c8093dc3c4ba8ae2a925a87d2257b
msgid "Django provides a couple of \"helper\" classes to make writing certain types of custom comment forms easier; see :mod:`django.contrib.comments.forms` for more."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:101
# c5af2a3ffb834c6fba8dbeacd010d916
msgid "Finally, we'll define a couple of methods in ``my_comment_app/__init__.py`` to point Django at these classes we've created::"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:116
# 4c8f955daa9a46f7aeeeedb75ea71b31
msgid "Be careful not to create cyclic imports in your custom comments app. If you feel your comment configuration isn't being used as defined -- for example, if your comment moderation policy isn't being applied -- you may have a cyclic import problem."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:121
# 642c7bee3b3c4051973e4cd84d4e6e42
msgid "If you are having unexplained problems with comments behavior, check if your custom comments application imports (even indirectly) any module that itself imports Django's comments module."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:125
# b189f95588654e2381f1b6ea81430e15
msgid "The above process should take care of most common situations. For more advanced usage, there are additional methods you can define. Those are explained in the next section."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:132
# c5870ae5d9864453aa3ccaa50d6cc400
msgid "Custom comment app API"
msgstr ""

#: ../../ref/contrib/comments/custom.txt:134
# a7a2f1eb3672496984dcc65dbfda0bdf
msgid "The :mod:`django.contrib.comments` app defines the following methods; any custom comment app must define at least one of them. All are optional, however."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:140
# 9c8d26d614224fe1a8a8c4e97a356561
msgid "Return the :class:`~django.db.models.Model` class to use for comments. This model should inherit from :class:`django.contrib.comments.models.BaseCommentAbstractModel`, which defines necessary core fields."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:145
# 966e35bd48fe42a38884fdb32eebc50f
msgid "The default implementation returns :class:`django.contrib.comments.models.Comment`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:150
# 6e15827532ec46cb8fc31058db816804
msgid "Return the :class:`~django.forms.Form` class you want to use for creating, validating, and saving your comment model.  Your custom comment form should accept an additional first argument, ``target_object``, which is the object the comment will be attached to."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:156
# 6f0e1af906c24cb18b6d4b76bfc6ff3c
msgid "The default implementation returns :class:`django.contrib.comments.forms.CommentForm`."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:161
# 7ac57dd782c04a9983ba4134d5b92614
msgid "The default comment form also includes a number of unobtrusive spam-prevention features (see :ref:`notes-on-the-comment-form`).  If replacing it with your own form, you may want to look at the source code for the built-in form and consider incorporating similar features."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:169
# b850008dafac4887808551f42472ab32
msgid "Return the URL for POSTing comments. This will be the ``<form action>`` attribute when rendering your comment form."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:172
# 16aa0c77067a44a1b211f8412cb82e3c
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`post_comment` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:177
# 20f516f0fb5b4394be3427a82b160579
msgid "If you provide a custom comment model and/or form, but you want to use the default :func:`post_comment` view, you will need to be aware that it requires the model and form to have certain additional attributes and methods: see the :func:`post_comment` view documentation for details."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:185
# 235fbe3fe69149379173dd68bd21d1dc
msgid "Return the URL for the \"flag this comment\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:187
# e8a53a133908429fbe6be38722d8cf0f
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`django.contrib.comments.views.moderation.flag` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:192
# 94412991cfb84a2cbde54b55dd927cd5
msgid "Return the URL for the \"delete this comment\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:194
# 97792a526eee4e61aefc18736840802b
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`django.contrib.comments.views.moderation.delete` view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:199
# 65909f58621d4e9ab48a0936a46ad69c
msgid "Return the URL for the \"approve this comment from moderation\" view."
msgstr ""

#: ../../ref/contrib/comments/custom.txt:201
# 397f34f7c32d4590939de41f129363a9
msgid "The default implementation returns a reverse-resolved URL pointing to the :func:`django.contrib.comments.views.moderation.approve` view."
msgstr ""

#: ../../ref/contrib/comments/example.txt:5
# 480226a7ec72416ab431334eb6252f95
msgid "Example of using the built-in comments app"
msgstr ""

#: ../../ref/contrib/comments/example.txt:7
# 476033b882d2462eb63204a13f369b16
msgid "Follow the first three steps of the quick start guide in the :doc:`documentation </ref/contrib/comments/index>`."
msgstr ""

#: ../../ref/contrib/comments/example.txt:10
# 3dd048e3fbe947d694b96ad0835d59a8
msgid "Now suppose, you have an app (``blog``) with a model (``Post``) to which you want to attach comments. Let's also suppose that you have a template called ``blog_detail.html`` where you want to display the comments list and comment form."
msgstr ""

#: ../../ref/contrib/comments/example.txt:16
#: ../../ref/templates/builtins.txt:1508
#: ../../ref/templates/builtins.txt:1519
#: ../../ref/templates/builtins.txt:1530
#: ../../ref/templates/builtins.txt:1542
# 4a3eaf1928c94c60ba3346f3b4eed68d
# 769d5aaf050742ef9cc95af9846ff601
# fc68687d13af4b20a642ae09e7eca3fe
# 49fd37551cda4da19b4e3ab9fca874c6
# adc4c57bf4594c5b9f0934f623e7bd52
msgid "Template"
msgstr ""

#: ../../ref/contrib/comments/example.txt:18
# 8882b53a07cd4483b9cd55f0c340d17b
msgid "First, we should load the ``comment`` template tags in the ``blog_detail.html`` so that we can use its functionality. So just like all other custom template tag libraries::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:24
# 4c0cc605111d4ef688b2a9f196005172
msgid "Next, let's add the number of comments attached to the particular model instance of ``Post``. For this we assume that a context variable ``object_pk`` is present which gives the ``id`` of the instance of ``Post``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:29
# 0f654ec3fd4a4403b40bfb9421805527
msgid "The usage of the :ttag:`get_comment_count` tag is like below::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:34
# 800cb51601a54f88a0367cfbdf939a27
msgid "If you have the instance (say ``entry``) of the model (``Post``) available in the context, then you can refer to it directly::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:40
# 909e084799b242abbcdef2aa3b8f431a
msgid "Next, we can use the :ttag:`render_comment_list` tag, to render all comments to the given instance (``entry``) by using the ``comments/list.html`` template::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:45
# 86a28af8b5ed46568b3b03a54860fdda
msgid "Django will will look for the ``list.html`` under the following directories (for our example)::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:52
# ef56719398e144c5a851afa10c6cb5d6
msgid "To get a list of comments, we make use of the :ttag:`get_comment_list` tag. Using this tag is very similar to the :ttag:`get_comment_count` tag. We need to remember that :ttag:`get_comment_list` returns a list of comments and hence we have to iterate through them to display them::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:65
# af09c68797044e62a04883bcf8ac8679
msgid "Finally, we display the comment form, enabling users to enter their comments. There are two ways of doing so. The first is when you want to display the comments template available under your ``comments/form.html``. The other method gives you a chance to customize the form."
msgstr ""

#: ../../ref/contrib/comments/example.txt:70
# 07d151c865874e328440fc5e6c7e0bad
msgid "The first method makes use of the :ttag:`render_comment_form` tag. Its usage too is similar to the other three tags we have discussed above::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:75
# ec60fb4bf0fe448eaa212765f1d2773d
msgid "It looks for the ``form.html`` under the following directories (for our example)::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:82
# 239c0e09910141279a97378979bd712d
msgid "Since we customize the form in the second method, we make use of another tag called :ttag:`comment_form_target`. This tag on rendering gives the URL where the comment form is posted. Without any :doc:`customization </ref/contrib/comments/custom>`, :ttag:`comment_form_target` evaluates to ``/comments/post/``. We use this tag in the form's ``action`` attribute."
msgstr ""

#: ../../ref/contrib/comments/example.txt:88
# e17cfd717b364f58803b0a8240f53757
msgid "The :ttag:`get_comment_form` tag renders a ``form`` for a model instance by creating a context variable. One can iterate over the ``form`` object to get individual fields. This gives you fine-grain control over the form::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:98
# eb4a699b38864e9099179944c54f4eef
msgid "But let's look at a simple example::"
msgstr ""

#: ../../ref/contrib/comments/example.txt:117
# 94bbefff2b4c4dc3b9872c35a5c39abe
msgid "Flagging"
msgstr ""

#: ../../ref/contrib/comments/example.txt:119
# ae2c5c5d59ba40c984707b526494389f
msgid "If you want your users to be able to flag comments (say for profanity), you can just direct them (by placing a link in your comment list) to ``/flag/{{ comment.id }}/``. Similarly, a user with requisite permissions (``\"Can moderate comments\"``) can approve and delete comments. This can also be done through the ``admin`` as you'll see later. You might also want to customize the following templates:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:126
# 0d1003ebfeda49d489c93e63ca0617ad
msgid "``flag.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:127
# b225a03f635b44b09bf67d7078ff6e3a
msgid "``flagged.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:128
# 64b9ee725ad5446386ca4fe6f7a433f6
msgid "``approve.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:129
# 359c48d41a5b41899187682ce162a6dc
msgid "``approved.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:130
# 300cd2ca9f7a457dad02db28f02ff854
msgid "``delete.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:131
# 571d1db546ca4b01897ed210f3405725
msgid "``deleted.html``"
msgstr ""

#: ../../ref/contrib/comments/example.txt:133
# 2a7721ce62dc4a44b0f248f69ff84aad
msgid "found under the directory structure we saw for ``form.html``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:136
# df471f78652540979372f258e562e3a7
msgid "Feeds"
msgstr ""

#: ../../ref/contrib/comments/example.txt:138
# d8d0b67b9da04b09afa27c07f030da06
msgid "Suppose you want to export a :doc:`feed </ref/contrib/syndication>` of the latest comments, you can use the built-in :class:`LatestCommentFeed`. Just enable it in your project's ``urls.py``:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:153
# be33d277b9264a01bd8f38e7f6fe5fcc
msgid "Now you should have the latest comment feeds being served off ``/feeds/latest/``."
msgstr ""

#: ../../ref/contrib/comments/example.txt:157
# ba7949cf2cd54a92bd05f2edda669721
msgid "Moderation"
msgstr ""

#: ../../ref/contrib/comments/example.txt:159
# bb5a44854d064494bc78dc48aaa8c30b
msgid "Now that we have the comments framework working, we might want to have some moderation setup to administer the comments. The comments framework comes built-in with :doc:`generic comment moderation </ref/contrib/comments/moderation>`. The comment moderation has the following features (all of which or only certain can be enabled):"
msgstr ""

#: ../../ref/contrib/comments/example.txt:165
# a4b8dc08d594420b8ad12d1f961ca9c9
msgid "Enable comments for a particular model instance."
msgstr ""

#: ../../ref/contrib/comments/example.txt:166
# f58f8972cbdd4090bb63c05b66ab82df
msgid "Close comments after a particular (user-defined) number of days."
msgstr ""

#: ../../ref/contrib/comments/example.txt:167
# 1cf3566a69034525a870806bfc17fb40
msgid "Email new comments to the site-staff."
msgstr ""

#: ../../ref/contrib/comments/example.txt:169
# 453cd192e64b418c860e168e0f0797e4
msgid "To enable comment moderation, we subclass the :class:`CommentModerator` and register it with the moderation features we want. Let's suppose we want to close comments after 7 days of posting and also send out an email to the site staff. In ``blog/models.py``, we register a comment moderator in the following way:"
msgstr ""

#: ../../ref/contrib/comments/example.txt:193
# 364e95f640a04f0985f0652479566e59
msgid "The generic comment moderation also has the facility to remove comments. These comments can then be moderated by any user who has access to the ``admin`` site and the ``Can moderate comments`` permission (can be set under the ``Users`` page in the ``admin``)."
msgstr ""

#: ../../ref/contrib/comments/example.txt:198
# ee46cf72851e404785155cd8e1829282
msgid "The moderator can ``Flag``, ``Approve`` or ``Remove`` comments using the ``Action`` drop-down in the ``admin`` under the ``Comments`` page."
msgstr ""

#: ../../ref/contrib/comments/example.txt:203
# 1ce41ea398a84cfbadce7614969b839a
msgid "Only a super-user will be able to delete comments from the database. ``Remove Comments`` only sets the ``is_public`` attribute to ``False``."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:3
# 68cde702447940d4a9c5ef93f2b66ce4
msgid "Comment form classes"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:8
# 80b34eb1eb8044c0b5693d6a21f8d9cf
msgid "The ``django.contrib.comments.forms`` module contains a handful of forms you'll use when writing custom views dealing with comments, or when writing :doc:`custom comment apps </ref/contrib/comments/custom>`."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:14
# 505629382f9c4d728fb1d2e8578bab62
msgid "The main comment form representing the standard, built-in way of handling submitted comments. This is the class used by all the views :mod:`django.contrib.comments` to handle submitted comments."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:18
# 82dfe67561c847c59f76b36b1f30ad84
msgid "If you want to build custom views that are similar to Django's built-in comment handling views, you'll probably want to use this form."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:22
# 54d634a1ab73404bafd11e8c93355858
msgid "Abstract comment forms for custom comment apps"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:24
# 2ab548e0ab03449f939888c4bde2afa7
msgid "If you're building a :doc:`custom comment app </ref/contrib/comments/custom>`, you might want to replace *some* of the form logic but still rely on parts of the existing form."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:28
# 0d7bcccfddc54a62bd23aec73aa463d5
msgid ":class:`CommentForm` is actually composed of a couple of abstract base class forms that you can subclass to reuse pieces of the form handling logic:"
msgstr ""

#: ../../ref/contrib/comments/forms.txt:33
# 8921dfcb419c49e997b7adb899d841c1
msgid "Handles the anti-spoofing protection aspects of the comment form handling."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:35
# 038d0955156845ad8afdc39ef3490855
msgid "This class contains the ``content_type`` and ``object_pk`` fields pointing to the object the comment is attached to, along with a ``timestamp`` and a ``security_hash`` of all the form data. Together, the timestamp and the security hash ensure that spammers can't \"replay\" form submissions and flood you with comments."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:43
# 5992aea27ec94a57b082002891c0d0bf
msgid "Handles the details of the comment itself."
msgstr ""

#: ../../ref/contrib/comments/forms.txt:45
# 8a2b62796db749dd832aeba9bd8f61be
msgid "This class contains the ``name``, ``email``, ``url``, and the ``comment`` field itself, along with the associated validation logic."
msgstr ""

#: ../../ref/contrib/comments/index.txt:3
# cbf0dfa561e74968aca681ebec610568
msgid "Django's comments framework"
msgstr ""

#: ../../ref/contrib/comments/index.txt:10
# fc6d7079ab944d9a9971483c2fd42cba
msgid "Django includes a simple, yet customizable comments framework. The built-in comments framework can be used to attach comments to any model, so you can use it for comments on blog entries, photos, book chapters, or anything else."
msgstr ""

#: ../../ref/contrib/comments/index.txt:16
# 14d1fcc952de48448def26ad53a35082
msgid "If you used to use Django's older (undocumented) comments framework, you'll need to upgrade. See the :doc:`upgrade guide </ref/contrib/comments/upgrade>` for instructions."
msgstr ""

#: ../../ref/contrib/comments/index.txt:21
# fb126b0e4f134db5980c58f150e72eb2
msgid "Quick start guide"
msgstr ""

#: ../../ref/contrib/comments/index.txt:23
# af61ea697017430188765421940f4c12
msgid "To get started using the ``comments`` app, follow these steps:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:25
# f77b1b253cae4e569b8b7d388360f99e
msgid "Install the comments framework by adding ``'django.contrib.comments'`` to :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:28
# 45209ddb79dc453b89807c85ecf500cf
msgid "Run ``manage.py syncdb`` so that Django will create the comment tables."
msgstr ""

#: ../../ref/contrib/comments/index.txt:30
# f52bd2d0f9a947c2bc4b5ef4f224d6ae
msgid "Add the comment app's URLs to your project's ``urls.py``:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:40
# da6573e019a54d9899f1fa10db841bfb
msgid "Use the `comment template tags`_ below to embed comments in your templates."
msgstr ""

#: ../../ref/contrib/comments/index.txt:43
# c25824d40e724a58bac91aefc271af10
msgid "You might also want to examine :doc:`/ref/contrib/comments/settings`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:46
# d6333c98a8654666bcffd345f6805e9c
msgid "Comment template tags"
msgstr ""

#: ../../ref/contrib/comments/index.txt:48
# 2585acb6b452461d9fc2a14aa421878f
msgid "You'll primarily interact with the comment system through a series of template tags that let you embed comments and generate forms for your users to post them."
msgstr ""

#: ../../ref/contrib/comments/index.txt:51
# 5bc332976b1c4956aabfa92c3acb7ddf
msgid "Like all custom template tag libraries, you'll need to :ref:`load the custom tags <loading-custom-template-libraries>` before you can use them::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:56
# b3370e49249d4320a19e45a36dcd144d
msgid "Once loaded you can use the template tags below."
msgstr ""

#: ../../ref/contrib/comments/index.txt:59
# dc352de784ed426092c161c9bc3e8ae5
msgid "Specifying which object comments are attached to"
msgstr ""

#: ../../ref/contrib/comments/index.txt:61
# bbd05c4f301a46d4977521b26a0b50d4
msgid "Django's comments are all \"attached\" to some parent object. This can be any instance of a Django model. Each of the tags below gives you a couple of different ways you can specify which object to attach to:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:65
# f39e76fcb5ff430a94dac2724f1bc8ac
msgid "Refer to the object directly -- the more common method. Most of the time, you'll have some object in the template's context you want to attach the comment to; you can simply use that object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:69
# 738f617e71af4699b35973de7bf43d51
msgid "For example, in a blog entry page that has a variable named ``entry``, you could use the following to load the number of comments::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:74
# adbaf835090e444a957a1c422b38bcd3
msgid "Refer to the object by content-type and object id. You'd use this method if you, for some reason, don't actually have direct access to the object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:77
# 260f464214f54f459e9a0361c77531cb
msgid "Following the above example, if you knew the object ID was ``14`` but didn't have access to the actual object, you could do something like::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:82
# 6969d6e3ca4b480bab57a216a2c8e426
msgid "In the above, ``blog.entry`` is the app label and (lower-cased) model name of the model class."
msgstr ""

#: ../../ref/contrib/comments/index.txt:86
# e83e1ae6e36247e2ac99913913fad57e
msgid "Displaying comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:88
# 07856a5e604948bf894f38a4377e06b7
msgid "To display a list of comments, you can use the template tags :ttag:`render_comment_list` or :ttag:`get_comment_list`."
msgstr ""

#: ../../ref/contrib/comments/index.txt:94
# 4fb46b41dc8c413e8d2c8db63ab88188
msgid "Quickly rendering a comment list"
msgstr ""

#: ../../ref/contrib/comments/index.txt:96
# 7622b044fe254ce09dbf4d52f23779fd
msgid "The easiest way to display a list of comments for some object is by using :ttag:`render_comment_list`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:105
# 49a0bfe35b4b4f0186af6ae665555021
msgid "This will render comments using a template named ``comments/list.html``, a default version of which is included with Django."
msgstr ""

#: ../../ref/contrib/comments/index.txt:111
# f82c17fb4e9a4fa49e8690193d27f833
msgid "Rendering a custom comment list"
msgstr ""

#: ../../ref/contrib/comments/index.txt:113
# 65edf6542633469299e358bdacf4e4f5
msgid "To get the list of comments for some object, use :ttag:`get_comment_list`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:124
# 2abf89a777354895a6cf8825cb179104
msgid "This returns a list of :class:`~django.contrib.comments.models.Comment` objects; see :doc:`the comment model documentation </ref/contrib/comments/models>` for details."
msgstr ""

#: ../../ref/contrib/comments/index.txt:131
# c08cd33d23d34601a9c729ebe531f6a4
msgid "Linking to comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:133
# 6b0ff6d964fe4b79a18e231d3096f90a
msgid "To provide a permalink to a specific comment, use :ttag:`get_comment_permalink`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:137
# 61a9fb751b9140a790aaffcf5e642413
msgid "By default, the named anchor that will be appended to the URL will be the letter 'c' followed by the comment id, for example 'c82'. You may specify a custom format string if you wish to override this behavior::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:143
# 61163600e72442b99fa59988758125d7
msgid "The format string is a standard python format string. Valid mapping keys include any attributes of the comment object."
msgstr ""

#: ../../ref/contrib/comments/index.txt:146
# 0958b64970cd408785bb7fd538cd4e66
msgid "Regardless of whether you specify a custom anchor pattern, you must supply a matching named anchor at a suitable place in your template."
msgstr ""

#: ../../ref/contrib/comments/index.txt:161
# afecc67e4c22436b91d605dd01b29960
msgid "There's a `known bug`_ in Safari/Webkit which causes the named anchor to be forgotten following a redirect. The practical impact for comments is that the Safari/webkit browsers will arrive at the correct page but will not scroll to the named anchor."
msgstr ""

#: ../../ref/contrib/comments/index.txt:171
# 026397656936488d9bc1eb0b53dcc87a
msgid "Counting comments"
msgstr ""

#: ../../ref/contrib/comments/index.txt:173
# d96ab3803fb543c6acdb02b17e291c9c
msgid "To count comments attached to an object, use :ttag:`get_comment_count`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:185
# 0eb00701a1c84c51972704db00b8b16f
msgid "Displaying the comment post form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:187
# 8ab464d67e69429594690ec4ee640a05
msgid "To show the form that users will use to post a comment, you can use :ttag:`render_comment_form` or :ttag:`get_comment_form`"
msgstr ""

#: ../../ref/contrib/comments/index.txt:193
# 57bd971f1ce94e7baa8fcd8714923834
msgid "Quickly rendering the comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:195
# 7e0c5e974dea4f69946472da1caf7392
msgid "The easiest way to display a comment form is by using :ttag:`render_comment_form`::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:204
# fa1b93e7f6a547eab9c23dd04ff3c135
msgid "This will render comments using a template named ``comments/form.html``, a default version of which is included with Django."
msgstr ""

#: ../../ref/contrib/comments/index.txt:210
# 48d3f19e749544f686626b8ef9c977dc
msgid "Rendering a custom comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:212
# d7f19faf8f0d456ab3bc492d21d36da3
msgid "If you want more control over the look and feel of the comment form, you may use :ttag:`get_comment_form` to get a :doc:`form object </topics/forms/index>` that you can use in the template::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:218
# 0c3e0a996adc44f38311134080799c0f
msgid "A complete form might look like::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:234
# f9990cbc65984bc087767fde597d1087
msgid "Be sure to read the `notes on the comment form`_, below, for some special considerations you'll need to make if you're using this approach."
msgstr ""

#: ../../ref/contrib/comments/index.txt:240
# f9af91deeb614348a3078e7e439b3c65
msgid "Getting the comment form target"
msgstr ""

#: ../../ref/contrib/comments/index.txt:242
# 60117217628b4a6887976fa91c829e00
msgid "You may have noticed that the above example uses another template tag -- :ttag:`comment_form_target` -- to actually get the ``action`` attribute of the form. This will always return the correct URL that comments should be posted to; you'll always want to use it like above::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:250
# 930c86e9c0e44a218e25b8d50cd90b36
msgid "Redirecting after the comment post"
msgstr ""

#: ../../ref/contrib/comments/index.txt:252
# 04df132c489d428cabd79a820c39a065
msgid "To specify the URL you want to redirect to after the comment has been posted, you can include a hidden form input called ``next`` in your comment form. For example::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:258
# b0f942a30b914464a584f5440fa83917
msgid "Providing a comment form for authenticated users"
msgstr ""

#: ../../ref/contrib/comments/index.txt:260
# aa72dde319df44b8b78dcb6693b45367
msgid "If a user is already authenticated, it makes little sense to display the name, email, and URL fields, since these can already be retrieved from their login data and profile. In addition, some sites will only accept comments from authenticated users."
msgstr ""

#: ../../ref/contrib/comments/index.txt:265
# fd7eb994e9114dcd9a1f5cae8c6566e8
msgid "To provide a comment form for authenticated users, you can manually provide the additional fields expected by the Django comments framework. For example, assuming comments are attached to the model \"object\"::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:286
# d987cc937ec3445d8199500d64dbf07f
msgid "The honeypot, content_type, object_pk, timestamp, and security_hash fields are fields that would have been created automatically if you had simply used ``{{ form }}`` in your template, and are referred to in `Notes on the comment form`_ below."
msgstr ""

#: ../../ref/contrib/comments/index.txt:291
# a911df225a3d41a7bac584c99f72eecd
msgid "Note that we do not need to specify the user to be associated with comments submitted by authenticated users. This is possible because the :doc:`Built-in Comment Models</ref/contrib/comments/models>` that come with Django associate comments with authenticated users by default."
msgstr ""

#: ../../ref/contrib/comments/index.txt:296
# 6ce1e5d71a96443484fb6433c6e327bb
msgid "In this example, the honeypot field will still be visible to the user; you'll need to hide that field in your CSS::"
msgstr ""

#: ../../ref/contrib/comments/index.txt:303
# 8f09d715c5dd43408692810fa67247a6
msgid "If you want to accept either anonymous or authenticated comments, replace the contents of the \"else\" clause above with a standard comment form and the right thing will happen whether a user is logged in or not."
msgstr ""

#: ../../ref/contrib/comments/index.txt:310
# b0927431d4f24b8f9f92b00ba99a0784
msgid "Notes on the comment form"
msgstr ""

#: ../../ref/contrib/comments/index.txt:312
# 9eb956fd468e4f2dafb4ee2deb457da7
msgid "The form used by the comment system has a few important anti-spam attributes you should know about:"
msgstr ""

#: ../../ref/contrib/comments/index.txt:315
# 5aa9fd35bddf4a74bca70475eae10dd9
msgid "It contains a number of hidden fields that contain timestamps, information about the object the comment should be attached to, and a \"security hash\" used to validate this information. If someone tampers with this data -- something comment spammers will try -- the comment submission will fail."
msgstr ""

#: ../../ref/contrib/comments/index.txt:320
# cdb628bf71fc4c2e9ecf7beb7b3bad5b
msgid "If you're rendering a custom comment form, you'll need to make sure to pass these values through unchanged."
msgstr ""

#: ../../ref/contrib/comments/index.txt:323
# 7d4d6010509d4303b9579c347f773514
msgid "The timestamp is used to ensure that \"reply attacks\" can't continue very long. Users who wait too long between requesting the form and posting a comment will have their submissions refused."
msgstr ""

#: ../../ref/contrib/comments/index.txt:327
# 404303ce53c446f6884d86858f53f026
msgid "The comment form includes a \"honeypot_\" field. It's a trap: if any data is entered in that field, the comment will be considered spam (spammers often automatically fill in all fields in an attempt to make valid submissions)."
msgstr ""

#: ../../ref/contrib/comments/index.txt:331
# f0a9b8f063b24b7398354e9f46ce6403
msgid "The default form hides this field with a piece of CSS and further labels it with a warning field; if you use the comment form with a custom template you should be sure to do the same."
msgstr ""

#: ../../ref/contrib/comments/index.txt:335
# df923547f65f43049392570b981595bf
msgid "The comments app also depends on the more general :doc:`Cross Site Request Forgery protection </ref/contrib/csrf>` that comes with Django.  As described in the documentation, it is best to use ``CsrfViewMiddleware``.  However, if you are not using that, you will need to use the ``csrf_protect`` decorator on any views that include the comment form, in order for those views to be able to output the CSRF token and cookie."
msgstr ""

#: ../../ref/contrib/comments/index.txt:345
# 9a3a9a150b7f437395974ef367c0dd61
msgid "More information"
msgstr ""

#: ../../ref/contrib/comments/models.txt:3
# 2760186416014a438465a2f9e8f66ffa
msgid "The built-in comment models"
msgstr ""

#: ../../ref/contrib/comments/models.txt:10
# d8345191e6d147b98f568ce0cd6e3be2
msgid "Django's built-in comment model. Has the following fields:"
msgstr ""

#: ../../ref/contrib/comments/models.txt:14
# b88f3d1b94cc4264b5f76b3dca1287d1
msgid "A :class:`~django.contrib.contettypes.generic.GenericForeignKey` attribute pointing to the object the comment is attached to. You can use this to get at the related object (i.e. ``my_comment.content_object``)."
msgstr ""

#: ../../ref/contrib/comments/models.txt:18
# 32f581a77b0a4a5bb13468c76657fc98
msgid "Since this field is a :class:`~django.contrib.contettypes.generic.GenericForeignKey`, it's actually syntactic sugar on top of two underlying attributes, described below."
msgstr ""

#: ../../ref/contrib/comments/models.txt:25
# 3209962ba0024664bf8c2dbbfd098822
msgid "A :class:`~django.db.models.ForeignKey` to :class:`~django.contrib.contenttypes.models.ContentType`; this is the type of the object the comment is attached to."
msgstr ""

#: ../../ref/contrib/comments/models.txt:31
# d9640ffe1b4b42d5af0734c4d84db842
msgid "A :class:`~django.db.models.TextField` containing the primary key of the object the comment is attached to."
msgstr ""

#: ../../ref/contrib/comments/models.txt:36
# 596d803b5b874fceb70413e997f667a0
msgid "A :class:`~django.db.models.ForeignKey` to the :class:`~django.contrib.sites.models.Site` on which the comment was posted."
msgstr ""

#: ../../ref/contrib/comments/models.txt:42
# fa3d9292965647ee8081bd7a3a4f21fa
msgid "A :class:`~django.db.models.ForeignKey` to the :class:`~django.contrib.auth.models.User` who posted the comment. May be blank if the comment was posted by an unauthenticated user."
msgstr ""

#: ../../ref/contrib/comments/models.txt:48
# 88ce36ab5de343bfbf4ce7cef9c34b81
msgid "The name of the user who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:52
# 79a93fc722eb4aadb7969c644f54f35c
msgid "The email of the user who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:56
# 25671a88b30b49ee9dc934953a2b459f
msgid "The URL entered by the person who posted the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:60
# e8f0a52a1a3546f5917579d3d535974b
msgid "The actual content of the comment itself."
msgstr ""

#: ../../ref/contrib/comments/models.txt:64
# 5febbb02a3044ae084688462a23e5ebd
msgid "The date the comment was submitted."
msgstr ""

#: ../../ref/contrib/comments/models.txt:68
# 6c687666bfc5488aaf683399afbe3e8c
msgid "The IP address of the user posting the comment."
msgstr ""

#: ../../ref/contrib/comments/models.txt:72
# c30651adb8284099a6cfeb09fdd03988
msgid "``False`` if the comment is in moderation (see :doc:`/ref/contrib/comments/moderation`); If ``True``, the comment will be displayed on the site."
msgstr ""

#: ../../ref/contrib/comments/models.txt:78
# 4f043558c6bd46a7833f94eac72b5978
msgid "``True`` if the comment was removed. Used to keep track of removed comments instead of just deleting them."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:3
# 1f34e54e6a024507b604b440ddbf3a7b
msgid "Generic comment moderation"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:8
# 85022a6f975d4a5ba56cde9d69381cab
msgid "Django's bundled comments application is extremely useful on its own, but the amount of comment spam circulating on the Web today essentially makes it necessary to have some sort of automatic moderation system in place for any application which makes use of comments. To make this easier to handle in a consistent fashion, ``django.contrib.comments.moderation`` provides a generic, extensible comment-moderation system which can be applied to any model or set of models which want to make use of Django's comment system."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:21
# 68ad903918b1421f9001bb22b07ce553
msgid "The entire system is contained within ``django.contrib.comments.moderation``, and uses a two-step process to enable moderation for any given model:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:24
# 5fce1c1f1a264cb68a7408eef0769c74
msgid "A subclass of :class:`CommentModerator` is defined which specifies the moderation options the model wants to enable."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:28
# 70bccbd00c8b4d63aa63a48e5ecec1a9
msgid "The model is registered with the moderation system, passing in the model class and the class which specifies its moderation options."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:31
# 5f1a7316200f40a182eebc4a503a637f
msgid "A simple example is the best illustration of this. Suppose we have the following model, which would represent entries in a Weblog::"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:42
# b8b205a7aa954a66915a3b4e434c0227
msgid "Now, suppose that we want the following steps to be applied whenever a new comment is posted on an ``Entry``:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:45
# 70e39aa456d84a53a8526a1022a87231
msgid "If the ``Entry``'s ``enable_comments`` field is ``False``, the comment will simply be disallowed (i.e., immediately deleted)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:48
# af62ea44d35945e68dffc2de59589cda
msgid "If the ``enable_comments`` field is ``True``, the comment will be allowed to save."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:51
# 15c7ee64c6774ef8b29009d8b9383de1
msgid "Once the comment is saved, an email should be sent to site staff notifying them of the new comment."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:54
# edf3b3c31f9b4e03add218048cc37690
msgid "Accomplishing this is fairly straightforward and requires very little code::"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:65
# 17d364844193418dae63748e63df53c4
msgid "The :class:`CommentModerator` class pre-defines a number of useful moderation options which subclasses can enable or disable as desired, and ``moderator`` knows how to work with them to determine whether to allow a comment, whether to moderate a comment which will be allowed to post, and whether to email notifications of new comments."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:72
# 95ac9e4d62bf4992ab7d1f6aa0fb5bed
msgid "Built-in moderation options"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:76
# b18301b550854a359aa7dd88a8737e5d
msgid "Most common comment-moderation needs can be handled by subclassing :class:`CommentModerator` and changing the values of pre-defined attributes; the full range of built-in options is as follows."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:83
# 2d0c73f248174287a7547e5f935824a4
msgid "If this is set to the name of a :class:`~django.db.models.fields.DateField` or :class:`~django.db.models.fields.DateTimeField` on the model for which comments are being moderated, new comments for objects of that model will be disallowed (immediately deleted) when a certain number of days have passed after the date specified in that field. Must be used in conjunction with :attr:`close_after`, which specifies the number of days past which comments should be disallowed. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:95
# b40973c1fde94e0d9f89c78b522c4dd9
msgid "Like :attr:`auto_close_field`, but instead of outright deleting new comments when the requisite number of days have elapsed, it will simply set the ``is_public`` field of new comments to ``False`` before saving them. Must be used in conjunction with :attr:`moderate_after`, which specifies the number of days past which comments should be moderated. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:104
# f842d20c13df4174a0a9fb7441318b3b
msgid "If :attr:`auto_close_field` is used, this must specify the number of days past the value of the field specified by :attr:`auto_close_field` after which new comments for an object should be disallowed. Allowed values are ``None``, 0 (which disallows comments immediately), or any positive integer. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:113
# 3f4576f0f05d47d9b789fd21de217136
msgid "If ``True``, any new comment on an object of this model which survives moderation (i.e., is not deleted) will generate an email to site staff. Default value is ``False``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:119
# 4322c3e1b4d14132a7f9ab651bba58fb
msgid "If this is set to the name of a :class:`~django.db.models.fields.BooleanField` on the model for which comments are being moderated, new comments on objects of that model will be disallowed (immediately deleted) whenever the value of that field is ``False`` on the object the comment would be attached to. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:128
# b23cb41c0eb84364acf2a09be0fd9777
msgid "If :attr:`auto_moderate_field` is used, this must specify the number of days past the value of the field specified by :attr:`auto_moderate_field` after which new comments for an object should be marked non-public. Allowed values are ``None``, 0 (which moderates comments immediately), or any positive integer. Default value is ``None``."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:135
# 60e586e6500d42a4b0d5ce54dffdaf67
msgid "Simply subclassing :class:`CommentModerator` and changing the values of these options will automatically enable the various moderation methods for any models registered using the subclass."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:140
# 21c940c120db4b7fac5fd246d9089450
msgid "Adding custom moderation methods"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:142
# a6744e513d684058a7dad79d02a4ba2b
msgid "For situations where the built-in options listed above are not sufficient, subclasses of :class:`CommentModerator` can also override the methods which actually perform the moderation, and apply any logic they desire.  :class:`CommentModerator` defines three methods which determine how moderation will take place; each method will be called by the moderation system and passed two arguments: ``comment``, which is the new comment being posted, ``content_object``, which is the object the comment will be attached to, and ``request``, which is the :class:`~django.http.HttpRequest` in which the comment is being submitted:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:154
# 66ea43bb87db472da92012763dbc4d96
msgid "Should return ``True`` if the comment should be allowed to post on the content object, and ``False`` otherwise (in which case the comment will be immediately deleted)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:160
# ad31e1e5b9324dac93f59326a610e531
msgid "If email notification of the new comment should be sent to site staff or moderators, this method is responsible for sending the email."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:166
# db8884d35c414f119efc6aa97c85426f
msgid "Should return ``True`` if the comment should be moderated (in which case its ``is_public`` field will be set to ``False`` before saving), and ``False`` otherwise (in which case the ``is_public`` field will not be changed)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:173
# 29ca10f7fb0d47b0bbaed4d33086baa3
msgid "Registering models for moderation"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:175
# 8659f68804374a1980c4a7a02739afe5
msgid "The moderation system, represented by ``django.contrib.comments.moderation.moderator`` is an instance of the class :class:`Moderator`, which allows registration and \"unregistration\" of models via two methods:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:182
# 6abe9ec1ba5a4cb89c69505b5a1b8865
msgid "Takes two arguments: the first should be either a model class or list of model classes, and the second should be a subclass of ``CommentModerator``, and register the model or models to be moderated using the options defined in the ``CommentModerator`` subclass. If any of the models are already registered for moderation, the exception :exc:`AlreadyModerated` will be raised."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:192
# 49fa1eae1f7341ffa68a86374a8096b1
msgid "Takes one argument: a model class or list of model classes, and removes the model or models from the set of models which are being moderated. If any of the models are not currently being moderated, the exception :exc:`NotModerated` will be raised."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:200
# 0d1d4fd37db94ed19e651c0b8b167748
msgid "Customizing the moderation system"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:202
# c21f46cad49c4e5e86c8bb7b0bb722a9
msgid "Most use cases will work easily with simple subclassing of :class:`CommentModerator` and registration with the provided :class:`Moderator` instance, but customization of global moderation behavior can be achieved by subclassing :class:`Moderator` and instead registering models with an instance of the subclass."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:210
# d5fa4bb70b214f358936ed443e545c9d
msgid "In addition to the :meth:`Moderator.register` and :meth:`Moderator.unregister` methods detailed above, the following methods on :class:`Moderator` can be overridden to achieve customized behavior:"
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:216
# 537efeb0bb0f4f48a17c175ea1d0f8e9
msgid "Determines how moderation is set up globally. The base implementation in :class:`Moderator` does this by attaching listeners to the :data:`~django.contrib.comments.signals.comment_will_be_posted` and :data:`~django.contrib.comments.signals.comment_was_posted` signals from the comment models."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:225
# 67c0c0bd30d24a148d3ce96f68802b47
msgid "In the base implementation, applies all pre-save moderation steps (such as determining whether the comment needs to be deleted, or whether it needs to be marked as non-public or generate an email)."
msgstr ""

#: ../../ref/contrib/comments/moderation.txt:232
# ac7b5125cc2b427986200f06463869f0
msgid "In the base implementation, applies all post-save moderation steps (currently this consists entirely of deleting comments which were disallowed)."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:3
# 081ecb65c40047dfb28f1079a9cd78e2
msgid "Comment settings"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:5
# c0166840eaf24d70af9f4f8ea071900d
msgid "These settings configure the behavior of the comments framework:"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:10
# 8b09f54b63214bae913d7f7dddd318a7
msgid "COMMENTS_HIDE_REMOVED"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:12
# 4ec91cdb6b194d59a0f7b456a54b74a5
msgid "If ``True`` (default), removed comments will be excluded from comment lists/counts (as taken from template tags). Otherwise, the template author is responsible for some sort of a \"this comment has been removed by the site staff\" message."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:20
# f7cb49d5edfa41498430ac25f49c6d4c
msgid "COMMENT_MAX_LENGTH"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:22
# 1cf6ece9f9cd4ce98971c84e4a6da7ba
msgid "The maximum length of the comment field, in characters. Comments longer than this will be rejected. Defaults to 3000."
msgstr ""

#: ../../ref/contrib/comments/settings.txt:28
# 53fbe4dc1273467f990f120e35c481d3
msgid "COMMENTS_APP"
msgstr ""

#: ../../ref/contrib/comments/settings.txt:30
# 6e1d3bfcbfdd4f908cb979266be5de1e
msgid "An app which provides :doc:`customization of the comments framework </ref/contrib/comments/custom>`.  Use the same dotted-string notation as in :setting:`INSTALLED_APPS`.  Your custom :setting:`COMMENTS_APP` must also be listed in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:3
# c2ffbf5a0c024227a711be2dc9fb5d84
msgid "Signals sent by the comments app"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:8
# a9bd02a5c2aa432bab0e2157fc22c16a
msgid "The comment app sends a series of :doc:`signals </topics/signals>` to allow for comment moderation and similar activities. See :doc:`the introduction to signals </topics/signals>` for information about how to register for and receive these signals."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:14
# 075e1ce574ad4d82bd9ad313314c4fa1
msgid "comment_will_be_posted"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:19
# f3a90f46217e4a96942afead8d438fa3
msgid "Sent just before a comment will be saved, after it's been sanity checked and submitted. This can be used to modify the comment (in place) with posting details or other such actions."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:23
# f4be8dd835e540cbbde9b007b685e395
msgid "If any receiver returns ``False`` the comment will be discarded and a 400 response will be returned."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:26
# 9b26ba7da51f4eb38d7130cd8f1f2725
msgid "This signal is sent at more or less the same time (just before, actually) as the ``Comment`` object's :data:`~django.db.models.signals.pre_save` signal."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:29
#: ../../ref/contrib/comments/signals.txt:50
#: ../../ref/contrib/comments/signals.txt:73
#: ../../ref/signals.txt:52
#: ../../ref/signals.txt:90
#: ../../ref/signals.txt:107
#: ../../ref/signals.txt:139
#: ../../ref/signals.txt:174
#: ../../ref/signals.txt:195
#: ../../ref/signals.txt:221
#: ../../ref/signals.txt:381
#: ../../ref/signals.txt:437
#: ../../ref/signals.txt:452
#: ../../ref/signals.txt:465
#: ../../ref/signals.txt:496
#: ../../ref/signals.txt:517
#: ../../ref/signals.txt:548
# c280bfbafd2546858264ac96f07d3c30
# b1ee9c41abf84bc98f9a70f3fe523f65
# bc50abab3d244053bb576703977f5677
# bfdabdc42a3b478ab8658f31c8cc49f1
# 27bed54c78984b399c61de364f821ff0
# fe23cf945bf84854bbd3c7bf52a7366b
# 43fd4818f56c472088d0c3e4e35f48de
# 41d5f1df5a3f4617ab7efc7dcb2e6b4b
# 3133d787e98a481d9742c212ae45cb08
# ed8c858bfd514c1ba4b3303b559d8aad
# aa04e7a1c9db447d9df09161f5170afc
# be5c07954bc04d4990989cf4dc6f6f67
# 6d1a19420c324b70afefbc28a044255d
# 0ffd084463f5427ba9276256d42605dd
# 41b82723ace74c039393436dee41e6c5
# 6f2f7940efae463b86f93d3b7e257121
# 15ca70b4866244d69035abf3a40f2298
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:32
#: ../../ref/contrib/comments/signals.txt:53
#: ../../ref/contrib/comments/signals.txt:76
# d70f5d0c65b846e8b053af24559fb33c
# 60970995a1114bee82dd1b7a4380a407
# 5d632d288bc84f379919202c1a3ad409
msgid "The comment model."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:35
# 9ea9286dcb3a4e1fb180472c38c24d4d
msgid "The comment instance about to be posted. Note that it won't have been saved into the database yet, so it won't have a primary key, and any relations might not work correctly yet."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:40
#: ../../ref/contrib/comments/signals.txt:61
#: ../../ref/contrib/comments/signals.txt:91
# 72b074a5873d4a11967475ae613af9ab
# 3452b0a0d64a4a7ba402ae4662752a5b
# 6b171bb120d24e2ca394f3e5626a0a01
msgid "The :class:`~django.http.HttpRequest` that posted the comment."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:43
# 4cfc8c0b2ca846639b7c5a37b78e212d
msgid "comment_was_posted"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:48
# b18841e461574313b261344d81506658
msgid "Sent just after the comment is saved."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:56
#: ../../ref/contrib/comments/signals.txt:79
# e21d833037c043e0b90e0d64379b31f5
# 9edbb74ed61d492c94739e1886bfdd1a
msgid "The comment instance that was posted. Note that it will have already been saved, so if you modify it you'll need to call :meth:`~django.db.models.Model.save` again."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:64
# 5df22b014109428faf4bdd8911cf44f7
msgid "comment_was_flagged"
msgstr ""

#: ../../ref/contrib/comments/signals.txt:69
# 022ce9897d12470381839ecc20464433
msgid "Sent after a comment was \"flagged\" in some way. Check the flag to see if this was a user requesting removal of a comment, a moderator approving/removing a comment, or some other custom user flag."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:84
# 36bcf8455b9d4ec7b31fe2ec247688d4
msgid "The :class:`~django.contrib.comments.models.CommentFlag` that's been attached to the comment."
msgstr ""

#: ../../ref/contrib/comments/signals.txt:88
# 3901b81ce4344ec9a4f27786001f7c2d
msgid "``True`` if this is a new flag; ``False`` if it's a duplicate flag."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:3
# 3f401a88e43943bc91a20c18d10aaeb9
msgid "Upgrading from Django's previous comment system"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:5
# 17e50e2cddc749aa88df2d3b267c665a
msgid "Prior versions of Django included an outdated, undocumented comment system. Users who reverse-engineered this framework will need to upgrade to use the new comment system; this guide explains how."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:8
# e0e3ee207ae845399c4550530e3cb378
msgid "The main changes from the old system are:"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:10
# b3e80c104fd649a79780a436c2f34361
msgid "This new system is documented."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:12
# 35a2c8493bb64ad39886cb74af9a4cc1
msgid "It uses modern Django features like :doc:`forms </topics/forms/index>` and :doc:`modelforms </topics/forms/modelforms>`."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:15
# de9015f10c654c05bdf447d284533ff2
msgid "It has a single ``Comment`` model instead of separate ``FreeComment`` and ``Comment`` models."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:18
# 2910395512d248a98517b0a404793764
msgid "Comments have \"email\" and \"URL\" fields."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:20
# 30e877ee31fc4efcb3cfdf97ecc1b8e5
msgid "No ratings, photos and karma. This should only effect World Online."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:22
# a93df7fa9d3a4df69aa2b8198904b758
msgid "The ``{% comment_form %}`` tag no longer exists. Instead, there's now two functions: ``{% get_comment_form %}``, which returns a form for posting a new comment, and ``{% render_comment_form %}``, which renders said form using the ``comments/form.html`` template."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:27
# 720aabe00f3e412c8e404203c850146c
msgid "The way comments are include in your URLconf have changed; you'll need to replace::"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:32
# 6ca5610776fb4a619a7a7a03797889f3
msgid "with::"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:37
# 3f08c860dae345b3b473bf96b2c52a75
msgid "Upgrading data"
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:39
# 80deea7c9f0a40a6a4261faff8cca738
msgid "The data models for Django's comment system have changed, as have the table names. Before you transfer your existing data into the new comments system, make sure that you have installed the new comments system as explained in the :doc:`quick start guide </ref/contrib/comments/index>`. This will ensure that the new tables have been properly created."
msgstr ""

#: ../../ref/contrib/comments/upgrade.txt:46
# 56b8fce3ec934804a81491c4bd5f2562
msgid "To transfer your data into the new comments system, you'll need to directly run the following SQL:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:3
# 4f12d1b4bc664354801633057b69ceb4
msgid "The contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:8
# c1024e14d5db48418df95e7ce44aa2be
msgid "Django includes a :mod:`~django.contrib.contenttypes` application that can track all of the models installed in your Django-powered project, providing a high-level, generic interface for working with your models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:15
# 7c06292c306a4ff8b8ed4c1e6d01209c
msgid "At the heart of the contenttypes application is the :class:`~django.contrib.contenttypes.models.ContentType` model, which lives at ``django.contrib.contenttypes.models.ContentType``. Instances of :class:`~django.contrib.contenttypes.models.ContentType` represent and store information about the models installed in your project, and new instances of :class:`~django.contrib.contenttypes.models.ContentType` are automatically created whenever new models are installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:23
# 4304fc100d1d43b6a3ae4f668d298dad
msgid "Instances of :class:`~django.contrib.contenttypes.models.ContentType` have methods for returning the model classes they represent and for querying objects from those models. :class:`~django.contrib.contenttypes.models.ContentType` also has a :ref:`custom manager <custom-managers>` that adds methods for working with :class:`~django.contrib.contenttypes.models.ContentType` and for obtaining instances of :class:`~django.contrib.contenttypes.models.ContentType` for a particular model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:31
# 46afe1ddace7474ca39062c62e8f14e6
msgid "Relations between your models and :class:`~django.contrib.contenttypes.models.ContentType` can also be used to enable \"generic\" relationships between an instance of one of your models and instances of any model you have installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:37
# 4c6650df07234534a5bf317449b6924a
msgid "Installing the contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:39
# 187323c4284c4050a31b9a09939f76b5
msgid "The contenttypes framework is included in the default :setting:`INSTALLED_APPS` list created by ``django-admin.py startproject``, but if you've removed it or if you manually set up your :setting:`INSTALLED_APPS` list, you can enable it by adding ``'django.contrib.contenttypes'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:45
# fc4f011e50b54852bcec97ffbbde2925
msgid "It's generally a good idea to have the contenttypes framework installed; several of Django's other bundled applications require it:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:48
# 2d4fdc7b81ec45c49aa0dd663fd4a609
msgid "The admin application uses it to log the history of each object added or changed through the admin interface."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:51
# a7c07939f98541b2a4a478684c9dd803
msgid "Django's :mod:`authentication framework <django.contrib.auth>` uses it to tie user permissions to specific models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:54
# 2c8fa01898114219bd525ddf3c4baaea
msgid "Django's comments system (:mod:`django.contrib.comments`) uses it to \"attach\" comments to any installed model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:60
# 49de4795dcaf4b10991353dd7d609512
msgid "The ``ContentType`` model"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:64
# ce23c3f88d304b4f9942013793f9dc96
msgid "Each instance of :class:`~django.contrib.contenttypes.models.ContentType` has three fields which, taken together, uniquely describe an installed model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:70
# a4cf6789fe5e41448c6c87c77803fa8d
msgid "The name of the application the model is part of. This is taken from the :attr:`app_label` attribute of the model, and includes only the *last* part of the application's Python import path; \"django.contrib.contenttypes\", for example, becomes an :attr:`app_label` of \"contenttypes\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:78
# 7d079eb3162b4d0face17513978f504d
msgid "The name of the model class."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:82
# 265c5521d4b041bb92cfebe6506dfb11
msgid "The human-readable name of the model. This is taken from the :attr:`verbose_name <django.db.models.Field.verbose_name>` attribute of the model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:86
# 9dc1fcd316ae4760973590ae1fe3b649
msgid "Let's look at an example to see how this works. If you already have the :mod:`~django.contrib.contenttypes` application installed, and then add :mod:`the sites application <django.contrib.sites>` to your :setting:`INSTALLED_APPS` setting and run ``manage.py syncdb`` to install it, the model :class:`django.contrib.sites.models.Site` will be installed into your database. Along with it a new instance of :class:`~django.contrib.contenttypes.models.ContentType` will be created with the following values:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:95
# 793a6c5def634693aeb6c18f11ee182b
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be set to ``'sites'`` (the last part of the Python path \"django.contrib.sites\")."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:99
# e7c17ec9f1034dab8add1599b70a982b
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:102
# a8e6a72275554b87bfff208d6fd5e6ff
msgid ":attr:`~django.contrib.contenttypes.models.ContentType.name` will be set to ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:108
# b9797112df8a4a76a4f08a2850b6ec71
msgid "Methods on ``ContentType`` instances"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:110
# 230887c7b187423cbdc81ddfc23d18b6
msgid "Each :class:`~django.contrib.contenttypes.models.ContentType` instance has methods that allow you to get from a :class:`~django.contrib.contenttypes.models.ContentType` instance to the model it represents, or to retrieve objects from that model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:117
# 6666c4117d7942e58df10cf54a52411b
msgid "Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the model the :class:`~django.contrib.contenttypes.models.ContentType` represents, and does :meth:`a get() lookup <django.db.models.query.QuerySet.get>` on that model, returning the corresponding object."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:125
# 11517e9dea724e9aaf738dda42a10e70
msgid "Returns the model class represented by this :class:`~django.contrib.contenttypes.models.ContentType` instance."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:128
# 88451dfb54bc4920b63095cda111b7ab
msgid "For example, we could look up the :class:`~django.contrib.contenttypes.models.ContentType` for the :class:`~django.contrib.auth.models.User` model::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:137
# 9cec7c62cd864ba69f7c0be78628386b
msgid "And then use it to query for a particular :class:`~django.contrib.auth.models.User`, or to get access to the ``User`` model class::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:146
# d043f7f92af44ebabcbd19866b8d608a
msgid "Together, :meth:`~django.contrib.contenttypes.models.ContentType.get_object_for_this_type` and :meth:`~django.contrib.contenttypes.models.ContentType.model_class` enable two extremely important use cases:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:151
# f0fef6dbebcc46a0b8f0dbb03322deab
msgid "Using these methods, you can write high-level generic code that performs queries on any installed model -- instead of importing and using a single specific model class, you can pass an ``app_label`` and ``model`` into a :class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, and then work with the model class or retrieve objects from it."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:158
# 8315643df8a74aeea34784abca899378
msgid "You can relate another model to :class:`~django.contrib.contenttypes.models.ContentType` as a way of tying instances of it to particular model classes, and use these methods to get access to those model classes."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:163
# d1a63c2b613c43e19261007f4769fd4e
msgid "Several of Django's bundled applications make use of the latter technique. For example, :class:`the permissions system <django.contrib.auth.models.Permission>` in Django's authentication framework uses a :class:`~django.contrib.auth.models.Permission` model with a foreign key to :class:`~django.contrib.contenttypes.models.ContentType`; this lets :class:`~django.contrib.auth.models.Permission` represent concepts like \"can add blog entry\" or \"can delete news story\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:173
# 8570ae4b992c4a6d94b74dbf219a8786
msgid "The ``ContentTypeManager``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:177
# 136e629f59a54f1b951f2cb3d22749fe
msgid ":class:`~django.contrib.contenttypes.models.ContentType` also has a custom manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, which adds the following methods:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:183
# 6356fc08e3ef4f12b888fbbcbffacd55
msgid "Clears an internal cache used by :class:`~django.contrib.contenttypes.models.ContentType` to keep track of which models for which it has created :class:`~django.contrib.contenttypes.models.ContentType` instances. You probably won't ever need to call this method yourself; Django will call it automatically when it's needed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:192
# 2ad0643487e846029bff76116e3fce78
msgid "Lookup a :class:`~django.contrib.contenttypes.models.ContentType` by ID. Since this method uses the same shared cache as :meth:`~django.contrib.contenttypes.models.ContentTypeManager.get_for_model`, it's preferred to use this method over the usual ``ContentType.objects.get(pk=id)``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:200
# 7c14fbc0da6b48d380dfb7281929c9cc
msgid "Takes either a model class or an instance of a model, and returns the :class:`~django.contrib.contenttypes.models.ContentType` instance representing that model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:206
# 3df9ce1d603c44a1b60e61a884d57275
msgid "Takes a variadic number of model classes, and returns a dictionary mapping the model classes to the :class:`~django.contrib.contenttypes.models.ContentType` instances representing them."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:213
# 6cc5b1d267404938ba88f4a5f69a7635
msgid "Returns the :class:`~django.contrib.contenttypes.models.ContentType` instance uniquely identified by the given application label and model name. The primary purpose of this method is to allow :class:`~django.contrib.contenttypes.models.ContentType` objects to be referenced via a :ref:`natural key<topics-serialization-natural-keys>` during deserialization."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:220
# 080ce083509748cd9fc9244a6e4457ee
msgid "The :meth:`~ContentTypeManager.get_for_model()` method is especially useful when you know you need to work with a :class:`ContentType <django.contrib.contenttypes.models.ContentType>` but don't want to go to the trouble of obtaining the model's metadata to perform a manual lookup::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:237
# bcb8396127744eb9abfce4dcaef8bb61
msgid "Prior to Django 1.5 :meth:`~ContentTypeManager.get_for_model()` and :meth:`~ContentTypeManager.get_for_models()` always returned the :class:`~django.contrib.contenttypes.models.ContentType` associated with the concrete model of the specified one(s). That means there was no way to retreive the :class:`~django.contrib.contenttypes.models.ContentType` of a proxy model using those methods. As of Django 1.5 you can now pass a boolean flag – respectively ``for_concrete_model`` and ``for_concrete_models`` – to specify wether or not you want to retreive the :class:`~django.contrib.contenttypes.models.ContentType` for the concrete or direct model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:249
# 7caeba4b04124c68860911c59292e995
msgid "Generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:251
# 27772e9b989c442bb84a69bfb8c8f1d1
msgid "Adding a foreign key from one of your own models to :class:`~django.contrib.contenttypes.models.ContentType` allows your model to effectively tie itself to another model class, as in the example of the :class:`~django.contrib.auth.models.Permission` model above. But it's possible to go one step further and use :class:`~django.contrib.contenttypes.models.ContentType` to enable truly generic (sometimes called \"polymorphic\") relationships between models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:259
# 0a9093a2bcd54d509bfac6a7c577aae0
msgid "A simple example is a tagging system, which might look like this::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:274
# 1c441c6be92a407b8baea413f04effa0
msgid "A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one other model, which means that if the ``TaggedItem`` model used a :class:`~django.db.models.ForeignKey` it would have to choose one and only one model to store tags for. The contenttypes application provides a special field type which works around this and allows the relationship to be with any model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:284
# 6df336d5f93e44aca9ea46307239f6bf
msgid "There are three parts to setting up a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:287
# d4f64091b7c3446ca78246ee7b5100e7
msgid "Give your model a :class:`~django.db.models.ForeignKey` to :class:`~django.contrib.contenttypes.models.ContentType`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:290
# 5557535912a84637badd8e7f8f86a3a0
msgid "Give your model a field that can store primary key values from the models you'll be relating to. For most models, this means a :class:`~django.db.models.PositiveIntegerField`. The usual name for this field is \"object_id\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:295
# 0e3cd5e7e0214d838521c3242179cf69
msgid "Give your model a :class:`~django.contrib.contenttypes.generic.GenericForeignKey`, and pass it the names of the two fields described above. If these fields are named \"content_type\" and \"object_id\", you can omit this -- those are the default field names :class:`~django.contrib.contenttypes.generic.GenericForeignKey` will look for."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:305
# cbca1302344844f58f7fb7b718e09997
msgid "The \"object_id\" field doesn't have to be the same type as the primary key fields on the related models, but their primary key values must be coercible to the same type as the \"object_id\" field by its :meth:`~django.db.models.Field.get_db_prep_value` method."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:310
# cde5a451b6e640b99afc6de4cc91eab2
msgid "For example, if you want to allow generic relations to models with either :class:`~django.db.models.IntegerField` or :class:`~django.db.models.CharField` primary key fields, you can use :class:`~django.db.models.CharField` for the \"object_id\" field on your model since integers can be coerced to strings by :meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:317
# 2ccf9c6057b040a5a793007b7e007b2e
msgid "For maximum flexibility you can use a :class:`~django.db.models.TextField` which doesn't have a maximum length defined, however this may incur significant performance penalties depending on your database backend."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:322
# adbd74f03d2c4fa8a089616501e1fa92
msgid "There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:328
# 0fcc3fe3011445028953e59efb0faf71
msgid "If you're serializing data (for example, when generating :class:`~django.test.TestCase.fixtures`) from a model that implements generic relations, you should probably be using a natural key to uniquely identify related :class:`~django.contrib.contenttypes.models.ContentType` objects. See :ref:`natural keys<topics-serialization-natural-keys>` and :djadminopt:`dumpdata --natural <--natural>` for more information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:335
# b5e489f2542a449a813fc0b39952f61c
msgid "This will enable an API similar to the one used for a normal :class:`~django.db.models.ForeignKey`; each ``TaggedItem`` will have a ``content_object`` field that returns the object it's related to, and you can also assign to that field or use it when creating a ``TaggedItem``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:348
# e1c2f72e8c134d14b0279b90943d15c7
msgid "Due to the way :class:`~django.contrib.contenttypes.generic.GenericForeignKey` is implemented, you cannot use such fields directly with filters (``filter()`` and ``exclude()``, for example) via the database API. Because a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` isn't a normal field object, these examples will *not* work::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:360
# 43e52a1d514f41d194b23bd2058baa8a
msgid "Reverse generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:364
# 0f7344ebe9974d9b9bd415e7a2bbf76d
msgid "If you know which models you'll be using most often, you can also add a \"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:371
# f9878861c07d4e27b53de8d3fadc0962
msgid "``Bookmark`` instances will each have a ``tags`` attribute, which can be used to retrieve their associated ``TaggedItems``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:383
# 54ca66050b7447709e0f0bd324846c8c
msgid "Just as :class:`~django.contrib.contenttypes.generic.GenericForeignKey` accepts the names of the content-type and object-ID fields as arguments, so too does :class:`~django.contrib.contenttypes.generic.GenericRelation`; if the model which has the generic foreign key is using non-default names for those fields, you must pass the names of the fields when setting up a :class:`.GenericRelation` to it. For example, if the ``TaggedItem`` model referred to above used fields named ``content_type_fk`` and ``object_primary_key`` to create its generic foreign key, then a :class:`.GenericRelation` back to it would need to be defined like so::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:398
# 844a5fb7308a480499d23c19408b4caa
msgid "Of course, if you don't add the reverse relationship, you can do the same types of lookups manually::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:407
# 0aff80832dde427bb350ce465e78f235
msgid "Note that if the model in a :class:`~django.contrib.contenttypes.generic.GenericRelation` uses a non-default value for ``ct_field`` or ``fk_field`` in its :class:`~django.contrib.contenttypes.generic.GenericForeignKey` (e.g. the :mod:`django.contrib.comments` app uses ``ct_field=\"object_pk\"``), you'll need to set ``content_type_field`` and/or ``object_id_field`` in the :class:`~django.contrib.contenttypes.generic.GenericRelation` to match the ``ct_field`` and ``fk_field``, respectively, in the :class:`~django.contrib.contenttypes.generic.GenericForeignKey`::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:419
# fc2c3fae2cb0423cb47fce8b2da686fc
msgid "Note also, that if you delete an object that has a :class:`~django.contrib.contenttypes.generic.GenericRelation`, any objects which have a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` pointing at it will be deleted as well. In the example above, this means that if a ``Bookmark`` object were deleted, any ``TaggedItem`` objects pointing at it would be deleted at the same time."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:426
# 6083f80602df4318a4187045e4e293b3
msgid "Unlike :class:`~django.db.models.ForeignKey`, :class:`~django.contrib.contenttypes.generic.GenericForeignKey` does not accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to customize this behavior; if desired, you can avoid the cascade-deletion simply by not using :class:`~django.contrib.contenttypes.generic.GenericRelation`, and alternate behavior can be provided via the :data:`~django.db.models.signals.pre_delete` signal."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:435
# 776807d5217043c8a7d357d572daea8b
msgid "Generic relations and aggregation"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:437
# 1d1c824964394ba5bd5ffe12f78ada9c
msgid ":doc:`Django's database aggregation API </topics/db/aggregation>` doesn't work with a :class:`~django.contrib.contenttypes.generic.GenericRelation`. For example, you might be tempted to try something like::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:444
# a836e823736448dc8b3d845b7d43b67c
msgid "This will not work correctly, however. The generic relation adds extra filters to the queryset to ensure the correct content type, but the :meth:`~django.db.models.query.QuerySet.aggregate` method doesn't take them into account. For now, if you need aggregates on generic relations, you'll need to calculate them without using the aggregation API."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:451
# 2292280bd393473e9121c528d0d7c920
msgid "Generic relations in forms and admin"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:453
# 1744047f7052414e9c2ae68c3fe61fc1
msgid "The :mod:`django.contrib.contenttypes.generic` module provides :class:`~django.contrib.contenttypes.generic.BaseGenericInlineFormSet`, :class:`~django.contrib.contenttypes.generic.GenericTabularInline` and :class:`~django.contrib.contenttypes.generic.GenericStackedInline` (the last two are subclasses of :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin`). This enables the use of generic relations in forms and the admin. See the :doc:`model formset </topics/forms/modelforms>` and :ref:`admin <using-generic-relations-as-an-inline>` documentation for more information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:466
# 302aff839cef431086180e932156f047
msgid "The :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin` class inherits all properties from an :class:`~django.contrib.admin.InlineModelAdmin` class. However, it adds a couple of its own for working with the generic relation:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:473
# b800ede8459d4fd5956aa9acd61acd84
msgid "The name of the :class:`~django.contrib.contenttypes.models.ContentType` foreign key field on the model. Defaults to ``content_type``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:479
# 9db7865479bf430b80212d1c057d260c
msgid "The name of the integer field that represents the ID of the related object. Defaults to ``object_id``."
msgstr ""

#: ../../ref/contrib/csrf.txt:3
# 7bcab5ce882c49f8b9db1ce8fb72cb49
msgid "Cross Site Request Forgery protection"
msgstr ""

#: ../../ref/contrib/csrf.txt:8
# 94cd63ef2c38423b8f2dad9c77e9e5e3
msgid "The CSRF middleware and template tag provides easy-to-use protection against `Cross Site Request Forgeries`_.  This type of attack occurs when a malicious Web site contains a link, a form button or some javascript that is intended to perform some action on your Web site, using the credentials of a logged-in user who visits the malicious site in their browser.  A related type of attack, 'login CSRF', where an attacking site tricks a user's browser into logging into a site with someone else's credentials, is also covered."
msgstr ""

#: ../../ref/contrib/csrf.txt:16
# e2feb136153643c49298b4cc02b0f554
msgid "The first defense against CSRF attacks is to ensure that GET requests (and other 'safe' methods, as defined by 9.1.1 Safe Methods, HTTP 1.1, :rfc:`2616#section-9.1.1`) are side-effect free. Requests via 'unsafe' methods, such as POST, PUT and DELETE, can then be protected by following the steps below."
msgstr ""

#: ../../ref/contrib/csrf.txt:29
# 84ca0f16de7b41ee92f824402273e1af
msgid "To enable CSRF protection for your views, follow these steps:"
msgstr ""

#: ../../ref/contrib/csrf.txt:31
# a2b578e0944f4959bc2ef1d2fa893942
msgid "Add the middleware ``'django.middleware.csrf.CsrfViewMiddleware'`` to your list of middleware classes, :setting:`MIDDLEWARE_CLASSES`.  (It should come before any view middleware that assume that CSRF attacks have been dealt with.)"
msgstr ""

#: ../../ref/contrib/csrf.txt:37
# b112eb69b878409085207dd6bf99ab9d
msgid "Alternatively, you can use the decorator :func:`~django.views.decorators.csrf.csrf_protect` on particular views you want to protect (see below)."
msgstr ""

#: ../../ref/contrib/csrf.txt:41
# a6ec6a9188af4b96b0989579dbeea5bf
msgid "In any template that uses a POST form, use the :ttag:`csrf_token` tag inside the ``<form>`` element if the form is for an internal URL, e.g.::"
msgstr ""

#: ../../ref/contrib/csrf.txt:46
# 3bcd95c8496646328b9fe840decb56a5
msgid "This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""

#: ../../ref/contrib/csrf.txt:49
# 475233b1a3b444d6b0f581ec53c5c804
msgid "In the corresponding view functions, ensure that the ``'django.core.context_processors.csrf'`` context processor is being used. Usually, this can be done in one of two ways:"
msgstr ""

#: ../../ref/contrib/csrf.txt:53
# 2002dbb556f2458c99818b6df7089c3b
msgid "Use RequestContext, which always uses ``'django.core.context_processors.csrf'`` (no matter what your TEMPLATE_CONTEXT_PROCESSORS setting).  If you are using generic views or contrib apps, you are covered already, since these apps use RequestContext throughout."
msgstr ""

#: ../../ref/contrib/csrf.txt:59
# 929a60da988746168a8cee2969dfd927
msgid "Manually import and use the processor to generate the CSRF token and add it to the template context. e.g.::"
msgstr ""

#: ../../ref/contrib/csrf.txt:71
# c7de172268dd4f1386ad6842fb4a5328
msgid "You may want to write your own :func:`~django.shortcuts.render_to_response()` wrapper that takes care of this step for you."
msgstr ""

#: ../../ref/contrib/csrf.txt:75
# 74b546ed6f18417b8ae40b272677fd7c
msgid "The utility script ``extras/csrf_migration_helper.py`` (located in the Django distribution, but not installed) can help to automate the finding of code and templates that may need these steps. It contains full help on how to use it."
msgstr ""

#: ../../ref/contrib/csrf.txt:82
# e5a4fa6e5cbc4587ac4ce3f610401fac
msgid "AJAX"
msgstr ""

#: ../../ref/contrib/csrf.txt:84
# 04eebc5417d94531af59da6677a43ec1
msgid "While the above method can be used for AJAX POST requests, it has some inconveniences: you have to remember to pass the CSRF token in as POST data with every POST request. For this reason, there is an alternative method: on each XMLHttpRequest, set a custom ``X-CSRFToken`` header to the value of the CSRF token. This is often easier, because many javascript frameworks provide hooks that allow headers to be set on every request."
msgstr ""

#: ../../ref/contrib/csrf.txt:91
# 6b15f6fddccf4b8680131b2865483667
msgid "As a first step, you must get the CSRF token itself. The recommended source for the token is the ``csrftoken`` cookie, which will be set if you've enabled CSRF protection for your views as outlined above."
msgstr ""

#: ../../ref/contrib/csrf.txt:97
# 81d542a6a6c643fd8ec0c8ad0fcd2ff4
msgid "The CSRF token cookie is named ``csrftoken`` by default, but you can control the cookie name via the :setting:`CSRF_COOKIE_NAME` setting."
msgstr ""

#: ../../ref/contrib/csrf.txt:100
# 78c0876c39094409a0c51ba3b167f783
msgid "Acquiring the token is straightforward:"
msgstr ""

#: ../../ref/contrib/csrf.txt:122
# 54ae34c055594a6099cf368c879783b2
msgid "The above code could be simplified by using the `jQuery cookie plugin <http://plugins.jquery.com/project/Cookie>`_ to replace ``getCookie``:"
msgstr ""

#: ../../ref/contrib/csrf.txt:131
# 15ea12b514ec478db47fefd5c201f68a
msgid "The CSRF token is also present in the DOM, but only if explicitly included using :ttag:`csrf_token` in a template. The cookie contains the canonical token; the ``CsrfViewMiddleware`` will prefer the cookie to the token in the DOM. Regardless, you're guaranteed to have the cookie if the token is present in the DOM, so you should use the cookie!"
msgstr ""

#: ../../ref/contrib/csrf.txt:139
# 7fc7825a5c0149ca8f94ea9fe89c503c
msgid "If your view is not rendering a template containing the :ttag:`csrf_token` template tag, Django might not set the CSRF token cookie. This is common in cases where forms are dynamically added to the page. To address this case, Django provides a view decorator which forces setting of the cookie: :func:`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""

#: ../../ref/contrib/csrf.txt:145
# 59526bc3703e485f880e35bd45aaae13
msgid "Finally, you'll have to actually set the header on your AJAX request, while protecting the CSRF token from being sent to other domains."
msgstr ""

#: ../../ref/contrib/csrf.txt:180
# 7d28df03d4ee4fa4bf573724f49b555c
msgid "Due to a bug introduced in jQuery 1.5, the example above will not work correctly on that version. Make sure you are running at least jQuery 1.5.1."
msgstr ""

#: ../../ref/contrib/csrf.txt:183
# d0d81669f91748ba95aa101d275e0a67
msgid "You can use `settings.crossDomain <http://api.jquery.com/jQuery.ajax>`_ in jQuery 1.5 and newer in order to replace the `sameOrigin` logic above:"
msgstr ""

#: ../../ref/contrib/csrf.txt:203
# 90bdc1f4a6eb4eb497e7d94b58c6358e
msgid "In a `security release blogpost`_, a simpler \"same origin test\" example was provided which only checked for a relative URL. The ``sameOrigin`` test above supersedes that example—it works for edge cases like scheme-relative or absolute URLs for the same domain."
msgstr ""

#: ../../ref/contrib/csrf.txt:211
# 83d33f601c9247a2af3e1033ff5444d0
msgid "Other template engines"
msgstr ""

#: ../../ref/contrib/csrf.txt:213
# 4be9004522914f809011b54b46710750
msgid "When using a different template engine than Django's built-in engine, you can set the token in your forms manually after making sure it's available in the template context."
msgstr ""

#: ../../ref/contrib/csrf.txt:217
# c135f335d14749a681d97447ce9a4a9b
msgid "For example, in the Cheetah template language, your form could contain the following:"
msgstr ""

#: ../../ref/contrib/csrf.txt:226
# a1c13350f2054a61a94271ead090c7e4
msgid "You can use JavaScript similar to the :ref:`AJAX code <csrf-ajax>` above to get the value of the CSRF token."
msgstr ""

#: ../../ref/contrib/csrf.txt:230
# 026e948a20114ef6a61d69d6a4e84d06
msgid "The decorator method"
msgstr ""

#: ../../ref/contrib/csrf.txt:234
# a9ac37a6f180495a811df798e81ae23d
msgid "Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can use the ``csrf_protect`` decorator, which has exactly the same functionality, on particular views that need the protection. It must be used **both** on views that insert the CSRF token in the output, and on those that accept the POST form data. (These are often the same view function, but not always)."
msgstr ""

#: ../../ref/contrib/csrf.txt:240
# 23ffd4cde77c47cf833a512fb982ac54
msgid "Use of the decorator by itself is **not recommended**, since if you forget to use it, you will have a security hole. The 'belt and braces' strategy of using both is fine, and will incur minimal overhead."
msgstr ""

#: ../../ref/contrib/csrf.txt:246
# 6c0bb19a1b96478cba4526e2d07215f1
msgid "Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr ""

#: ../../ref/contrib/csrf.txt:248
#: ../../ref/contrib/webdesign.txt:32
# 1ba3677014174294bc6b2caad0ded135
# a2b6bec5f72e45c1bddbd4aecd3dffd7
msgid "Usage::"
msgstr ""

#: ../../ref/contrib/csrf.txt:260
# 1d61a1f3e10d4912a00391140689ee59
msgid "Rejected requests"
msgstr ""

#: ../../ref/contrib/csrf.txt:262
# b7a4d8b123c94da9a583644c13678059
msgid "By default, a '403 Forbidden' response is sent to the user if an incoming request fails the checks performed by ``CsrfViewMiddleware``.  This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form."
msgstr ""

#: ../../ref/contrib/csrf.txt:268
# a7a479165e174f33a5a0c729dfdd74ad
msgid "The error page, however, is not very friendly, so you may want to provide your own view for handling this condition.  To do this, simply set the :setting:`CSRF_FAILURE_VIEW` setting."
msgstr ""

#: ../../ref/contrib/csrf.txt:275
#: ../../ref/contrib/flatpages.txt:63
#: ../../ref/contrib/formtools/form-wizard.txt:23
#: ../../ref/contrib/redirects.txt:23
# 7fdab08c7dae4722a8623053e2f50ff9
# 07fb84d5c75e4ecdad5b5c4ec679ed1c
# f5400ad5b9204feb81cc7231a8215afd
# 148c976b04954dd094975277426a8ba9
msgid "How it works"
msgstr ""

#: ../../ref/contrib/csrf.txt:277
# 4dd67e66480a49e5a13df8caef346cd3
msgid "The CSRF protection is based on the following things:"
msgstr ""

#: ../../ref/contrib/csrf.txt:279
# 0609b0f2d7ad4f56bcbfcd71599e399d
msgid "A CSRF cookie that is set to a random value (a session independent nonce, as it is called), which other sites will not have access to."
msgstr ""

#: ../../ref/contrib/csrf.txt:282
# 2e582de714214f54918e8681494abe76
msgid "This cookie is set by ``CsrfViewMiddleware``.  It is meant to be permanent, but since there is no way to set a cookie that never expires, it is sent with every response that has called ``django.middleware.csrf.get_token()`` (the function used internally to retrieve the CSRF token)."
msgstr ""

#: ../../ref/contrib/csrf.txt:287
# 277666bb875f45dfa6c904c31d6b0527
msgid "A hidden form field with the name 'csrfmiddlewaretoken' present in all outgoing POST forms.  The value of this field is the value of the CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:291
# c2d99c48a40a4d98bb8f4cf8e53e17df
msgid "This part is done by the template tag."
msgstr ""

#: ../../ref/contrib/csrf.txt:293
# 438186826ded422cb9b84d6843245446
msgid "For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""

#: ../../ref/contrib/csrf.txt:297
# 7035bc58457c4740aec559b674f0a92a
msgid "This check is done by ``CsrfViewMiddleware``."
msgstr ""

#: ../../ref/contrib/csrf.txt:299
# 4f970c39fa64485e990fc6d7826965db
msgid "In addition, for HTTPS requests, strict referer checking is done by ``CsrfViewMiddleware``.  This is necessary to address a Man-In-The-Middle attack that is possible under HTTPS when using a session independent nonce, due to the fact that HTTP 'Set-Cookie' headers are (unfortunately) accepted by clients that are talking to a site under HTTPS.  (Referer checking is not done for HTTP requests because the presence of the Referer header is not reliable enough under HTTP.)"
msgstr ""

#: ../../ref/contrib/csrf.txt:307
# bd9e5cd3273842f899d6f18d03895fef
msgid "This ensures that only forms that have originated from your Web site can be used to POST data back."
msgstr ""

#: ../../ref/contrib/csrf.txt:310
# 5b46f48509244ef2976f8b45a23c0fda
msgid "It deliberately ignores GET requests (and other requests that are defined as 'safe' by :rfc:`2616`). These requests ought never to have any potentially dangerous side effects , and so a CSRF attack with a GET request ought to be harmless. :rfc:`2616` defines POST, PUT and DELETE as 'unsafe', and all other methods are assumed to be unsafe, for maximum protection."
msgstr ""

#: ../../ref/contrib/csrf.txt:317
# 2a12342b648b481085fdff682c738116
msgid "Caching"
msgstr ""

#: ../../ref/contrib/csrf.txt:319
# ab45c89e765c40f09cd6ac865cd8666b
msgid "If the :ttag:`csrf_token` template tag is used by a template (or the ``get_token`` function is called some other way), ``CsrfViewMiddleware`` will add a cookie and a ``Vary: Cookie`` header to the response. This means that the middleware will play well with the cache middleware if it is used as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""

#: ../../ref/contrib/csrf.txt:325
# 6314b28d3f2d4fb99c54b86cf8ed936a
msgid "However, if you use cache decorators on individual views, the CSRF middleware will not yet have been able to set the Vary header or the CSRF cookie, and the response will be cached without either one. In this case, on any views that will require a CSRF token to be inserted you should use the :func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""

#: ../../ref/contrib/csrf.txt:341
# d91049734797440cbafdbd8639508394
msgid "Testing"
msgstr ""

#: ../../ref/contrib/csrf.txt:343
# aaae66d3f73840a4b3ff81da88284396
msgid "The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view functions, due to the need for the CSRF token which must be sent with every POST request.  For this reason, Django's HTTP client for tests has been modified to set a flag on requests which relaxes the middleware and the ``csrf_protect`` decorator so that they no longer rejects requests.  In every other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""

#: ../../ref/contrib/csrf.txt:350
# bbc7261b0f9a40f58eb8fd46a2a4a715
msgid "If, for some reason, you *want* the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks::"
msgstr ""

#: ../../ref/contrib/csrf.txt:362
# fa9a266244a34906a26425924589a720
msgid "Subdomains within a site will be able to set cookies on the client for the whole domain.  By setting the cookie and using a corresponding token, subdomains will be able to circumvent the CSRF protection.  The only way to avoid this is to ensure that subdomains are controlled by trusted users (or, are at least unable to set cookies).  Note that even without CSRF, there are other vulnerabilities, such as session fixation, that make giving subdomains to untrusted parties a bad idea, and these vulnerabilities cannot easily be fixed with current browsers."
msgstr ""

#: ../../ref/contrib/csrf.txt:371
# 7f5023a5756b4d0da2de7d83c64e0d88
msgid "Edge cases"
msgstr ""

#: ../../ref/contrib/csrf.txt:373
# ef2632885b534355b06023c1af4f0c50
msgid "Certain views can have unusual requirements that mean they don't fit the normal pattern envisaged here. A number of utilities can be useful in these situations. The scenarios they might be needed in are described in the following section."
msgstr ""

#: ../../ref/contrib/csrf.txt:379
# ab864180f4ee4700808eb879c3943ec6
msgid "Utilities"
msgstr ""

#: ../../ref/contrib/csrf.txt:383
# 36d8cb1a084242c4b62ea1b99d66bc9c
msgid "This decorator marks a view as being exempt from the protection ensured by the middleware. Example::"
msgstr ""

#: ../../ref/contrib/csrf.txt:394
# 5f1c65ffb877499f9268bdfd36c0d401
msgid "Normally the :ttag:`csrf_token` template tag will not work if ``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` has not run. The view decorator ``requires_csrf_token`` can be used to ensure the template tag does work. This decorator works similarly to ``csrf_protect``, but never rejects an incoming request."
msgstr ""

#: ../../ref/contrib/csrf.txt:415
# adac150652654b29b1daaf5e01a168c7
msgid "This decorator forces a view to send the CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:418
# c192f99e0286464f9f20dd704e27aee8
msgid "Scenarios"
msgstr ""

#: ../../ref/contrib/csrf.txt:421
# ecc1eba59aca4e8fb71d8d9e725f31c0
msgid "CSRF protection should be disabled for just a few views"
msgstr ""

#: ../../ref/contrib/csrf.txt:423
# 178270ed7b5a43fd97db71d84c13fca0
msgid "Most views requires CSRF protection, but a few do not."
msgstr ""

#: ../../ref/contrib/csrf.txt:425
# be0bb188b92c4fb8bfc4c308e9480dd1
msgid "Solution: rather than disabling the middleware and applying ``csrf_protect`` to all the views that need it, enable the middleware and use :func:`~django.views.decorators.csrf.csrf_exempt`."
msgstr ""

#: ../../ref/contrib/csrf.txt:430
# 92fdc5e261be4f74adf94f3d56bad544
msgid "CsrfViewMiddleware.process_view not used"
msgstr ""

#: ../../ref/contrib/csrf.txt:432
# e439e7c8d34d4ea0af8d3ea704e614c1
msgid "There are cases when ``CsrfViewMiddleware.process_view`` may not have run before your view is run - 404 and 500 handlers, for example - but you still need the CSRF token in a form."
msgstr ""

#: ../../ref/contrib/csrf.txt:436
# c7ce30f863c94b55aff4e6790476aba3
msgid "Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""

#: ../../ref/contrib/csrf.txt:439
# 98ed44610e454368b5e5ab214cfb0a41
msgid "Unprotected view needs the CSRF token"
msgstr ""

#: ../../ref/contrib/csrf.txt:441
# 1573dd4047214d22b5cbedaec15ae538
msgid "There may be some views that are unprotected and have been exempted by ``csrf_exempt``, but still need to include the CSRF token."
msgstr ""

#: ../../ref/contrib/csrf.txt:444
# 341beefb5fa14cf099e12b9378049f91
msgid "Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by :func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. ``requires_csrf_token`` should be the innermost decorator)."
msgstr ""

#: ../../ref/contrib/csrf.txt:449
# e269d906101f4e4d8350b7e6d617a138
msgid "View needs protection for one path"
msgstr ""

#: ../../ref/contrib/csrf.txt:451
# 039a75d0d179488fabfb40b9413452fa
msgid "A view needs CRSF protection under one set of conditions only, and mustn't have it for the rest of the time."
msgstr ""

#: ../../ref/contrib/csrf.txt:454
# 9f6e19dd9c004f64ad9119e411227632
msgid "Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` for the path within it that needs protection. Example::"
msgstr ""

#: ../../ref/contrib/csrf.txt:473
# 4a7534debcde479ab5d1b56adf2e4ef7
msgid "Page uses AJAX without any HTML form"
msgstr ""

#: ../../ref/contrib/csrf.txt:475
# 25580d3d615e4808aab14809ff933685
msgid "A page makes a POST request via AJAX, and the page does not have an HTML form with a :ttag:`csrf_token` that would cause the required CSRF cookie to be sent."
msgstr ""

#: ../../ref/contrib/csrf.txt:478
# 9363e955552c41c2833df377d674f84f
msgid "Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on the view that sends the page."
msgstr ""

#: ../../ref/contrib/csrf.txt:482
# 43390652b0a14516a68ab280dce5852b
msgid "Contrib and reusable apps"
msgstr ""

#: ../../ref/contrib/csrf.txt:484
# c793012b07f147e88d6b44428c59ba11
msgid "Because it is possible for the developer to turn off the ``CsrfViewMiddleware``, all relevant views in contrib apps use the ``csrf_protect`` decorator to ensure the security of these applications against CSRF.  It is recommended that the developers of other reusable apps that want the same guarantees also use the ``csrf_protect`` decorator on their views."
msgstr ""

#: ../../ref/contrib/csrf.txt:491
#: ../../ref/contrib/gis/gdal.txt:1087
#: ../../ref/contrib/gis/geos.txt:954
#: ../../ref/contrib/gis/testing.txt:14
#: ../../ref/contrib/gis/testing.txt:115
#: ../../ref/contrib/messages.txt:315
#: ../../ref/contrib/staticfiles.txt:20
#: ../../ref/settings.txt:3
# db3f031aeda34869b8b501ac6c56fdf5
# ab1211b63f6e4de9b71256b9f588513f
# 13a0cbf95ba849738d90c394e25c25b1
# 8ddd2db006904735894ef2d9e7200b88
# 21b4d1157bd94e0c8bc0a9c29c3845c8
# c6b974987a6f47eab08683f0f54c4344
# 34577ebaf4154ca39cdd54e807a30dbd
# af5ab8a9807e4329a3d1ded57f4957ea
msgid "Settings"
msgstr ""

#: ../../ref/contrib/csrf.txt:493
# ac65e7c647cd430393b86a6c1899096c
msgid "A number of settings can be used to control Django's CSRF behavior."
msgstr ""

#: ../../ref/contrib/csrf.txt:496
#: ../../ref/settings.txt:299
# ce6b744a54c2450582764d1d1306ddc0
# 7354781f4de54916a0fdadb7485ca53d
msgid "CSRF_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/contrib/csrf.txt:498
#: ../../ref/contrib/messages.txt:386
#: ../../ref/settings.txt:301
#: ../../ref/settings.txt:497
#: ../../ref/settings.txt:514
#: ../../ref/settings.txt:540
#: ../../ref/settings.txt:555
#: ../../ref/settings.txt:582
#: ../../ref/settings.txt:606
#: ../../ref/settings.txt:618
#: ../../ref/settings.txt:630
#: ../../ref/settings.txt:1008
#: ../../ref/settings.txt:1034
#: ../../ref/settings.txt:1074
#: ../../ref/settings.txt:1086
#: ../../ref/settings.txt:1540
#: ../../ref/settings.txt:1646
#: ../../ref/settings.txt:1753
#: ../../ref/settings.txt:1862
#: ../../ref/settings.txt:2168
# 2773ef9f440e417eb9319f1c14378eb8
# 3bb8f3afc45243cfa9a1ea7dd6952d81
# d0e4ba883dd14f3db3c7dc92ed62a532
# 1b268004471a4b249490ff97d8166daa
# c5d0e321154644c19d38d0d51397d9a2
# 2a84be77e4bc4a09956bbae2e78d2678
# e91574a36005433b89b02f59e2c49844
# c3be98125c514c9e8a8fe8651ae48798
# f45652265376412981dc30e441f70d40
# c6272f087b874a66ba0cecf9ca49863c
# 00138abb371240dd8e3a63698d5be87d
# 53d96cb06b0b4de68f60cdd9cdd0166d
# 70d4bc398ffb45efa56a60f9449ff5b3
# 7f0daacc20d7497faac37eef41a8265b
# df9913a084d243eaa376c880030a2d7d
# 3bd64a6b632d456583350d36c3060984
# af11e86277f741b193723cf3a0bdb5a4
# 668826a7887a46b6b7702e8d095072a5
# f0d0b213de7d4987b66ce602536be0c3
# 24a2fca94aa74d358c3bb6ce74257d60
msgid "Default: ``None``"
msgstr ""

#: ../../ref/contrib/csrf.txt:500
# 003a1397c1644dd3a020811a63f8d8b1
msgid "The domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as ``\".example.com\"`` to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/contrib/csrf.txt:506
# 9cb49c0643604a0480ae61bef8c25859
msgid "Please note that, with or without use of this setting, this CSRF protection mechanism is not safe against cross-subdomain attacks -- see `Limitations`_."
msgstr ""

#: ../../ref/contrib/csrf.txt:510
#: ../../ref/settings.txt:316
# e160997043cc40c6bd83e52a7f06b278
# 955c123a4ad74903acfad184e8aa8fb6
msgid "CSRF_COOKIE_NAME"
msgstr ""

#: ../../ref/contrib/csrf.txt:512
#: ../../ref/settings.txt:318
# 410c17503f414eb18779fd4cb00c57b6
# 9aad1f86730b4357962aa0d7bee5522f
msgid "Default: ``'csrftoken'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:514
# c8e671e6eb1e4be299e11f079e37ffee
msgid "The name of the cookie to use for the CSRF authentication token. This can be whatever you want."
msgstr ""

#: ../../ref/contrib/csrf.txt:518
#: ../../ref/settings.txt:326
# 585c93ca04a047e79800c4450365972c
# 775123db383c4fc7b3839e6de3d9a189
msgid "CSRF_COOKIE_PATH"
msgstr ""

#: ../../ref/contrib/csrf.txt:522
#: ../../ref/settings.txt:330
#: ../../ref/settings.txt:1690
# f4cb4f259a054657bf0aa0ebf2546610
# 34c752c78ccf46c5bff4b0a11ea53f18
# 6b5392fa3e954c6db74ed155d5be88c9
msgid "Default: ``'/'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:524
#: ../../ref/settings.txt:332
# 640d71f88071411dae70d21b29e39a6a
# f86d301a7fa74e60b94caa14c9e3d433
msgid "The path set on the CSRF cookie. This should either match the URL path of your Django installation or be a parent of that path."
msgstr ""

#: ../../ref/contrib/csrf.txt:527
#: ../../ref/settings.txt:335
# e01b890facd240cebe129e8a818d9a9c
# 135de076261b4e809e843cc776d78b8d
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own CSRF cookie."
msgstr ""

#: ../../ref/contrib/csrf.txt:532
#: ../../ref/settings.txt:342
# e232cf81c8954091893ca452d2b03c9c
# 9ac8a949f8ef45deb6c21433f7fd7630
msgid "CSRF_COOKIE_SECURE"
msgstr ""

#: ../../ref/contrib/csrf.txt:536
#: ../../ref/settings.txt:262
#: ../../ref/settings.txt:346
#: ../../ref/settings.txt:729
#: ../../ref/settings.txt:778
#: ../../ref/settings.txt:967
#: ../../ref/settings.txt:1466
#: ../../ref/settings.txt:1601
#: ../../ref/settings.txt:1714
#: ../../ref/settings.txt:1743
#: ../../ref/settings.txt:1765
#: ../../ref/settings.txt:1904
#: ../../ref/settings.txt:2075
#: ../../ref/settings.txt:2101
#: ../../ref/settings.txt:2119
#: ../../ref/settings.txt:2136
#: ../../ref/settings.txt:2155
# 554f2c26a1e74240bee4b6cbeceeb456
# c317d2d665ad461887f30e784e17cf6e
# abed1d4a4f5d4ebf8220d31d0b01e5c6
# 054f703f6fe14a5b90b241b7194dc293
# 6d6dd6e2e7a841faa893b28c3933a76a
# 94955a52551346ccb79180a5dcbd2037
# 4060a0c975f84169a0b1377d2612ded3
# bc2e32708fb34780b033425fa4810fdd
# 8a6f7ef7ac15413e9705d8c789729542
# 69f02e3cdbb14b6c942cf3b7791b0d04
# 9f7b6861e95b4c1ca630c77513333fb4
# cf434565e2574b4fb6ee189b57f8e91d
# 37bcf3e35b1d4575a927ee85d360e141
# 18ae06bdd88046eea0726ee82d14b591
# 6a24b3f4868e461f8d12a00c0d281210
# e1ba9fcc06bc4768b700e629120c7f45
# 9611109f75294c46b34843690151534b
msgid "Default: ``False``"
msgstr ""

#: ../../ref/contrib/csrf.txt:538
#: ../../ref/settings.txt:348
# 097a604aaabc4fa19812a10aa7e0ab15
# 6085399724e14a3da1c5ae90c704b1d7
msgid "Whether to use a secure cookie for the CSRF cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../ref/contrib/csrf.txt:543
#: ../../ref/settings.txt:355
# d915331302a94c2687b450dac6ab7498
# ae9c86b19fd64ea7814ebb4d60cb80fe
msgid "CSRF_FAILURE_VIEW"
msgstr ""

#: ../../ref/contrib/csrf.txt:545
#: ../../ref/settings.txt:357
# 20173810e32049e1858bedf1711fb92d
# 9d9f9dade3f346808f4784312f97c977
msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr ""

#: ../../ref/contrib/csrf.txt:547
#: ../../ref/settings.txt:359
# 9993e29c8175418eac178488b37dc556
# b9115b86189542678a30626548b1b015
msgid "A dotted path to the view function to be used when an incoming request is rejected by the CSRF protection.  The function should have this signature::"
msgstr ""

#: ../../ref/contrib/csrf.txt:552
# 1f3a040bcbba487e99f93527d8d90c02
msgid "where ``reason`` is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected."
msgstr ""

#: ../../ref/contrib/databrowse.txt:3
# 6380724fccfc4232a33950733e152291
msgid "Databrowse"
msgstr ""

#: ../../ref/contrib/databrowse.txt:11
# 6e8e74d25fd4427e911767475727529d
msgid "Databrowse is a Django application that lets you browse your data."
msgstr ""

#: ../../ref/contrib/databrowse.txt:13
# a7f9f0f4c9ce44c19ed635e9efbaff03
msgid "As the Django admin dynamically creates an admin interface by introspecting your models, Databrowse dynamically creates a rich, browsable Web site by introspecting your models."
msgstr ""

#: ../../ref/contrib/databrowse.txt:18
# 1133cb6952d84052b5cb7be970be2d44
msgid "How to use Databrowse"
msgstr ""

#: ../../ref/contrib/databrowse.txt:20
# b1af158623be4d06ad59a943e97c7338
msgid "Point Django at the default Databrowse templates. There are two ways to do this:"
msgstr ""

#: ../../ref/contrib/databrowse.txt:23
# 2d3ccb1a3133411dbd424b70511b6f86
msgid "Add ``'django.contrib.databrowse'`` to your :setting:`INSTALLED_APPS` setting. This will work if your :setting:`TEMPLATE_LOADERS` setting includes the ``app_directories`` template loader (which is the case by default). See the :ref:`template loader docs <template-loaders>` for more."
msgstr ""

#: ../../ref/contrib/databrowse.txt:29
# 5f50f6fe2fb341bd9b0071920428522a
msgid "Otherwise, determine the full filesystem path to the :file:`django/contrib/databrowse/templates` directory, and add that directory to your :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/contrib/databrowse.txt:33
# 93ef80b8de2f4536a009699f284c994d
msgid "Register a number of models with the Databrowse site::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:41
# 6163449b77f2461a895e192d240cbc7b
msgid "Note that you should register the model *classes*, not instances."
msgstr ""

#: ../../ref/contrib/databrowse.txt:45
# 19d543abf15e416c82751fd0ce195b2a
msgid "Since Django 1.4, it is possible to register several models in the same call to :func:`~databrowse.site.register`."
msgstr ""

#: ../../ref/contrib/databrowse.txt:48
# d91b9ad84ec947a29ee874cc316d684e
msgid "It doesn't matter where you put this, as long as it gets executed at some point. A good place for it is in your :doc:`URLconf file </topics/http/urls>` (``urls.py``)."
msgstr ""

#: ../../ref/contrib/databrowse.txt:52
# 4bfa3478e5d74092b4fd9c2c31c8409e
msgid "Change your URLconf to import the :mod:`~django.contrib.databrowse` module::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:56
# 245eef5ff2c6487c909b7a7f47204d77
msgid "...and add the following line to your URLconf::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:60
# 54c3e87c300d47a89c3a792fd1d15d6c
msgid "The prefix doesn't matter -- you can use ``databrowse/`` or ``db/`` or whatever you'd like."
msgstr ""

#: ../../ref/contrib/databrowse.txt:63
# 15a9411c20ea455691bbe03902acf234
msgid "Run the Django server and visit ``/databrowse/`` in your browser."
msgstr ""

#: ../../ref/contrib/databrowse.txt:66
# d93ed38f1b0a4109b51ece49655eb0ae
msgid "Requiring user login"
msgstr ""

#: ../../ref/contrib/databrowse.txt:68
# 382c9a10626249efbd23efe002017e92
msgid "You can restrict access to logged-in users with only a few extra lines of code. Simply add the following import to your URLconf::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:73
# b4d3c72b0c4947ffbffc6869225f1b60
msgid "Then modify the :doc:`URLconf </topics/http/urls>` so that the :func:`databrowse.site.root` view is decorated with :func:`django.contrib.auth.decorators.login_required`::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:79
# e255c4064216472d988c439dbde2454c
msgid "If you haven't already added support for user logins to your :doc:`URLconf </topics/http/urls>`, as described in the :doc:`user authentication docs </ref/contrib/auth>`, then you will need to do so now with the following mapping::"
msgstr ""

#: ../../ref/contrib/databrowse.txt:86
# 9b8998343e3848d59f485c98f8d18ce7
msgid "The final step is to create the login form required by :func:`django.contrib.auth.views.login`. The :doc:`user authentication docs </ref/contrib/auth>` provide full details and a sample template that can be used for this purpose."
msgstr ""

#: ../../ref/contrib/flatpages.txt:3
# 2b0da6de3cdd4d6db7fb78f5928a8ef5
msgid "The flatpages app"
msgstr ""

#: ../../ref/contrib/flatpages.txt:8
# ac901b9226e442b09e72b2a25d83585d
msgid "Django comes with an optional \"flatpages\" application. It lets you store simple \"flat\" HTML content in a database and handles the management for you via Django's admin interface and a Python API."
msgstr ""

#: ../../ref/contrib/flatpages.txt:12
# 37a6b62620644ae395b1310232b1fbcf
msgid "A flatpage is a simple object with a URL, title and content. Use it for one-off, special-case pages, such as \"About\" or \"Privacy Policy\" pages, that you want to store in a database but for which you don't want to develop a custom Django application."
msgstr ""

#: ../../ref/contrib/flatpages.txt:17
# fb5f50d238384d26a45b30ad3a75a187
msgid "A flatpage can use a custom template or a default, systemwide flatpage template. It can be associated with one, or multiple, sites."
msgstr ""

#: ../../ref/contrib/flatpages.txt:20
# 38f5b68903aa463db0a3d8f480f00de2
msgid "The content field may optionally be left blank if you prefer to put your content in a custom template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:23
# 469a2d33494e4d6eaa94dd663bf5c50c
msgid "Here are some examples of flatpages on Django-powered sites:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:25
# dc3dc8d525404488a9175b5f2f83a95b
msgid "http://www.lawrence.com/about/contact/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:26
# 29ecdef7de2f455e847e8bb78f0440e0
msgid "http://www2.ljworld.com/site/rules/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:29
#: ../../ref/contrib/gis/install/index.txt:76
#: ../../ref/contrib/redirects.txt:12
#: ../../ref/contrib/sitemaps.txt:30
# 80aaaaf0b4784eb1b61a63d7e95857e4
# 3cec8e654bcb4177b2cfedea96182d63
# ddf2770785674b65b9ea78ab1c28f12b
# 7e985445892341539d4987a5df1cb26b
msgid "Installation"
msgstr ""

#: ../../ref/contrib/flatpages.txt:31
# 0be4a514da0945099597863125317855
msgid "To install the flatpages app, follow these steps:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:33
# 070d40f0831d4e2986eee95933041bc1
msgid "Install the :mod:`sites framework <django.contrib.sites>` by adding ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting, if it's not already in there."
msgstr ""

#: ../../ref/contrib/flatpages.txt:37
# 42350ed9245d4f669cd111ea09fa4a6f
msgid "Also make sure you've correctly set :setting:`SITE_ID` to the ID of the site the settings file represents. This will usually be ``1`` (i.e. ``SITE_ID = 1``, but if you're using the sites framework to manage multiple sites, it could be the ID of a different site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:42
# 1e5d870951b945d58adb83fa10f5cf0a
msgid "Add ``'django.contrib.flatpages'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:45
# d3fbdfb6843c44b5ae5e5a04b74f877e
msgid "Then either:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:47
# aa06192b741d47348d1065366f407ade
msgid "Add an entry in your URLconf. For example::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:53
# ea1c718b7c5446da95b8597f41aba8fc
msgid "or:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:55
# 508d3ffe349b454d820076a14e15bcfa
msgid "Add ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:58
#: ../../ref/contrib/redirects.txt:20
# cdc2488c24d3406681b60a9f6423ca5b
# b60f200f5c8542b58676fcb9e99b36eb
msgid "Run the command :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:65
# 2e15beb5a03b4fc2a35695a209c0a8d1
msgid "``manage.py syncdb`` creates two tables in your database: ``django_flatpage`` and ``django_flatpage_sites``. ``django_flatpage`` is a simple lookup table that simply maps a URL to a title and bunch of text content. ``django_flatpage_sites`` associates a flatpage with a site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:71
# d71aba66dc3e43cf9c59b07983d6e6be
msgid "Using the URLconf"
msgstr ""

#: ../../ref/contrib/flatpages.txt:73
# 77306eb07eee4fa3af2c44c82bd64914
msgid "There are several ways to include the flat pages in your URLconf. You can dedicate a particular path to flat pages::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:80
# c13fd06bab724e3ab7170cbfe1ae81da
msgid "You can also set it up as a \"catchall\" pattern. In this case, it is important to place the pattern at the end of the other urlpatterns::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:88
# 17a8ef166f764622a129409ef89788d3
msgid "Another common setup is to use flat pages for a limited set of known pages and to hard code the urls, so you can reference them with the :ttag:`url` template tag::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:98
# 3df8374791ca47508c5871ed81f8ec94
msgid "Using the middleware"
msgstr ""

#: ../../ref/contrib/flatpages.txt:100
# 39394067a39b4e929dd8162568bae7c4
msgid "The :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` can do all of the work."
msgstr ""

#: ../../ref/contrib/flatpages.txt:105
# a3e8cd71faf54de0bd655509ff674f6d
msgid "Each time any Django application raises a 404 error, this middleware checks the flatpages database for the requested URL as a last resort. Specifically, it checks for a flatpage with the given URL with a site ID that corresponds to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:110
# 7416103186be4aeea91cc652dfbec2b0
msgid "If it finds a match, it follows this algorithm:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:112
# 15c5ba101ace4e25be2487d564f3c7e9
msgid "If the flatpage has a custom template, it loads that template. Otherwise, it loads the template :file:`flatpages/default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:115
# 7e658a24c44544f9bc59bbffe369f2b3
msgid "It passes that template a single context variable, ``flatpage``, which is the flatpage object. It uses :class:`~django.template.RequestContext` in rendering the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:132
#: ../../ref/contrib/redirects.txt:38
# 04776167440348549cba0e382511961e
# f0fe853b68f541d0bbd501ec2af801a3
msgid "If it doesn't find a match, the request continues to be processed as usual."
msgstr ""

#: ../../ref/contrib/flatpages.txt:134
#: ../../ref/contrib/redirects.txt:41
# 7fcf598a9aae48e09fafe58ace5c0496
# bff8c99a8c92421093ea4be09f42cbc2
msgid "The middleware only gets activated for 404s -- not for 500s or responses of any other status code."
msgstr ""

#: ../../ref/contrib/flatpages.txt:139
# ac6002f827984b20b42331bfa915b96f
msgid "Because the ``FlatpageFallbackMiddleware`` is applied only after URL resolution has failed and produced a 404, the response it returns will not apply any :ref:`view middleware <view-middleware>` methods. Only requests which are successfully routed to a view via normal URL resolution apply view middleware."
msgstr ""

#: ../../ref/contrib/flatpages.txt:145
# d5a0e0610152408989cd3cb3e0f17563
msgid "Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you can put :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middlewares see the real flatpage response rather than the 404."
msgstr ""

#: ../../ref/contrib/flatpages.txt:152
#: ../../ref/contrib/redirects.txt:48
# e531ad4ec4954065a02bf19e1b30a243
# d0d3e5938d184454a39d98e3c8b0cc1d
msgid "For more on middleware, read the :doc:`middleware docs </topics/http/middleware>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:157
# 8586cc0131254a0d8a19ec8e8a7c9778
msgid "Note that the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead, the response will become an HTTP 500 (\"Internal Server Error\") and the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` will not attempt to serve a flat page."
msgstr ""

#: ../../ref/contrib/flatpages.txt:169
# 34475ebe5726492aacab8ff2b7eabb26
msgid "How to add, change and delete flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:172
#: ../../ref/contrib/redirects.txt:55
# a6250a69d9c04193a90545cd2b307472
# 2a2b52bcc00f445681139aec5b6be395
msgid "Via the admin interface"
msgstr ""

#: ../../ref/contrib/flatpages.txt:174
# 96ecd5f21fb2487285b7e85efe6a01ec
msgid "If you've activated the automatic Django admin interface, you should see a \"Flatpages\" section on the admin index page. Edit flatpages as you edit any other object in the system."
msgstr ""

#: ../../ref/contrib/flatpages.txt:179
#: ../../ref/contrib/redirects.txt:62
# 47cd81b2b5464cdb9d893bf4624622a7
# 8104726959144b1a98df851346aa563c
msgid "Via the Python API"
msgstr ""

#: ../../ref/contrib/flatpages.txt:183
# f277f9010a34422dab9ac92c84bce455
msgid "Flatpages are represented by a standard :doc:`Django model </topics/db/models>`, which lives in `django/contrib/flatpages/models.py`_. You can access flatpage objects via the :doc:`Django database API </topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:194
# 8af6e59e3b8b43edba9e791da284e7d0
msgid "If you add or modify flatpages via your own code, you will likely want to check for duplicate flatpage URLs within the same site. The flatpage form used in the admin performs this validation check, and can be imported from :class:`django.contrib.flatpages.forms.FlatPageForm` and used in your own views."
msgstr ""

#: ../../ref/contrib/flatpages.txt:201
# f95583c770004728b24435d6f938bf23
msgid "Flatpage templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:203
# d494f959b330453e9ed84b358c03ae06
msgid "By default, flatpages are rendered via the template :file:`flatpages/default.html`, but you can override that for a particular flatpage: in the admin, a collapsed fieldset titled \"Advanced options\" (clicking will expand it) contains a field for specifying a template name. If you're creating a flat page via the Python API you can simply set the template name as the field ``template_name`` on the ``FlatPage`` object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:211
# 9391741990274c60ade46814edb82e58
msgid "Creating the :file:`flatpages/default.html` template is your responsibility; in your template directory, just create a :file:`flatpages` directory containing a file :file:`default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:215
# 907db5d395684fa08b1d504d1c0da383
msgid "Flatpage templates are passed a single context variable, ``flatpage``, which is the flatpage object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:218
# ed38d5558ff24fc3b27e3349f2c4a154
msgid "Here's a sample :file:`flatpages/default.html` template:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:232
# ada3c9bc0f684b5190d478f5cd10c468
msgid "Since you're already entering raw HTML into the admin page for a flatpage, both ``flatpage.title`` and ``flatpage.content`` are marked as **not** requiring :ref:`automatic HTML escaping <automatic-html-escaping>` in the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:238
# 66d2694a152b40a7aed909cdb54c32b2
msgid "Getting a list of :class:`~django.contrib.flatpages.models.FlatPage` objects in your templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:240
# 565ae55e513f433bbb27432c2635de37
msgid "The flatpages app provides a template tag that allows you to iterate over all of the available flatpages on the :ref:`current site <hooking-into-current-site-from-views>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:244
# 332eb9d7c8364fe2af10887d2cceaa09
msgid "Like all custom template tags, you'll need to :ref:`load its custom tag library <loading-custom-template-libraries>` before you can use it. After loading the library, you can retrieve all current flatpages via the :ttag:`get_flatpages` tag:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:262
# a29861375cc14a819bd08045130fe015
msgid "Displaying ``registration_required`` flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:264
# e42ec047e9e147d1a52860ac7e74e37c
msgid "By default, the :ttag:`get_flatpages` templatetag will only show flatpages that are marked ``registration_required = False``. If you want to display registration-protected flatpages, you need to specify an authenticated user using a``for`` clause."
msgstr ""

#: ../../ref/contrib/flatpages.txt:269
#: ../../ref/contrib/flatpages.txt:287
# 3d627587eee14c5cbc9b786e374256fc
# 7b2cacdc7b2d4f36bbf5d7f44c51f17c
msgid "For example:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:275
# bafbcfb05e044a4fbad7806db42dc28a
msgid "If you provide an anonymous user, :ttag:`get_flatpages` will behave the same as if you hadn't provided a user -- i.e., it will only show you public flatpages."
msgstr ""

#: ../../ref/contrib/flatpages.txt:280
# 32cad0bc800246c58495e84290186430
msgid "Limiting flatpages by base URL"
msgstr ""

#: ../../ref/contrib/flatpages.txt:282
# 5e904a4bb1cf49a2be3b0c1519af69cf
msgid "An optional argument, ``starts_with``, can be applied to limit the returned pages to those beginning with a particular base URL. This argument may be passed as a string, or as a variable to be resolved from the context."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:3
# f216440d0ac844988288e03529a5639d
msgid "Form preview"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:9
# 9addd098551642a2904e8174d28f8aec
msgid "Django comes with an optional \"form preview\" application that helps automate the following workflow:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:12
#: ../../ref/contrib/index.txt:100
# 176f8a72fa4344a19dba6326d59574a2
# 881a8064941346af93795e71f5f1c2d9
msgid "\"Display an HTML form, force a preview, then do something with the submission.\""
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:14
# 44050273801b42ea96b10e6ae8c53d09
msgid "To force a preview of a form submission, all you have to do is write a short Python class."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:20
# 0a0618d87439436db1fbe58a97f32e92
msgid "Given a :class:`django.forms.Form` subclass that you define, this application takes care of the following workflow:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:23
# 7aecaa414a2443978e27636d26029629
msgid "Displays the form as HTML on a Web page."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:24
# 7eeb99dbb448401c9177c4d63e5deea8
msgid "Validates the form data when it's submitted via POST. a. If it's valid, displays a preview page. b. If it's not valid, redisplays the form with error messages."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:27
# 2f5dae5528cd4aa395919118fc0beff6
msgid "When the \"confirmation\" form is submitted from the preview page, calls a hook that you define -- a :meth:`~django.contrib.formtools.preview.FormPreview.done()` method that gets passed the valid data."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:32
# abe8774fec534e17a80647c74859144d
msgid "The framework enforces the required preview by passing a shared-secret hash to the preview page via hidden form fields. If somebody tweaks the form parameters on the preview page, the form submission will fail the hash-comparison test."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:37
# 8d5e512a530c4eb3b190b9665c1e7035
msgid "How to use ``FormPreview``"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:39
# fed2792940a6451fb9938ecff696ab46
msgid "Point Django at the default FormPreview templates. There are two ways to do this:"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:42
# b31f3a430585494088739c578355a717
msgid "Add ``'django.contrib.formtools'`` to your :setting:`INSTALLED_APPS` setting. This will work if your :setting:`TEMPLATE_LOADERS` setting includes the ``app_directories`` template loader (which is the case by default). See the :ref:`template loader docs <template-loaders>` for more."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:49
# 05d632895a5b4f8eab767d412465f11b
msgid "Otherwise, determine the full filesystem path to the :file:`django/contrib/formtools/templates` directory, and add that directory to your :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:53
# e2bfd64d5ab34c01a2f6305d6a6e8ebd
msgid "Create a :class:`~django.contrib.formtools.preview.FormPreview` subclass that overrides the :meth:`~django.contrib.formtools.preview.FormPreview.done()` method::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:67
# 57927fe035404522bb8e8750a2f61ed4
msgid "This method takes an :class:`~django.http.HttpRequest` object and a dictionary of the form data after it has been validated and cleaned. It should return an :class:`~django.http.HttpResponseRedirect` that is the end result of the form being submitted."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:72
# 4eb50b87b4de4dfda2242970f27f81b8
msgid "Change your URLconf to point to an instance of your :class:`~django.contrib.formtools.preview.FormPreview` subclass::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:79
# a85edb844fb54ce1a6b1916846953c3c
msgid "...and add the following line to the appropriate model in your URLconf::"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:83
# 17f8f62508204d4aa255435ca996badd
msgid "where ``SomeModelForm`` is a Form or ModelForm class for the model."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:85
# 98fa9853da4f4212ac9fda7652c2103b
msgid "Run the Django server and visit :file:`/post/` in your browser."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:88
# 32ca920e86ab4256a18eba962baad44c
msgid "``FormPreview`` classes"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:92
# f9b11e8d27ec439fb879e2a74542e16b
msgid "A :class:`~django.contrib.formtools.preview.FormPreview` class is a simple Python class that represents the preview workflow. :class:`~django.contrib.formtools.preview.FormPreview` classes must subclass ``django.contrib.formtools.preview.FormPreview`` and override the :meth:`~django.contrib.formtools.preview.FormPreview.done()` method. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:100
# fed5d5dc37934748a43e20a5ab9b63e4
msgid "``FormPreview`` templates"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:102
# 7222d1d3cd204394b2933a17a6922d09
msgid "By default, the form is rendered via the template :file:`formtools/form.html`, and the preview page is rendered via the template :file:`formtools/preview.html`. These values can be overridden for a particular form preview by setting :attr:`~django.contrib.formtools.preview.FormPreview.preview_template` and :attr:`~django.contrib.formtools.preview.FormPreview.form_template` attributes on the FormPreview subclass. See :file:`django/contrib/formtools/templates` for the default templates."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:111
# e56abecd4f0d429fa4881d31baf4fc97
msgid "Advanced ``FormPreview`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:115
# baf614ee68104fa88d6dd7b4c74c3cab
msgid "Given a validated form, performs any extra processing before displaying the preview page, and saves any extra data in context."
msgstr ""

#: ../../ref/contrib/formtools/form-preview.txt:118
# 16fc8e81fdaf42ab901c33d570dfa7d8
msgid "By default, this method is empty.  It is called after the form is validated, but before the context is modified with hash information and rendered."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:3
# 225698a88a674343989538fef5fe5134
msgid "Form wizard"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:8
# b6fd40c596964b679cb71b1d11372826
msgid "Django comes with an optional \"form wizard\" application that splits :doc:`forms </topics/forms/index>` across multiple Web pages. It maintains state in one of the backends so that the full server-side processing can be delayed until the submission of the final form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:13
# 6246f4e139aa4bfa8f8882e4485476a2
msgid "You might want to use this if you have a lengthy form that would be too unwieldy for display on a single page. The first page might ask the user for core information, the second page might ask for less important information, etc."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:18
# 5a63fb1742a44d8dbcaee92689c41b4e
msgid "The term \"wizard\", in this context, is `explained on Wikipedia`_."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:25
# 41711df6969c4451982a10f65ad6216a
msgid "Here's the basic workflow for how a user would use a wizard:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:27
# fe0e9e9e8dab4f199763f7f1d9af8076
msgid "The user visits the first page of the wizard, fills in the form and submits it."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:29
# 9170445106b641d580c8ab4b7cf0dcc2
msgid "The server validates the data. If it's invalid, the form is displayed again, with error messages. If it's valid, the server saves the current state of the wizard in the backend and redirects to the next step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:32
# 557eb46e4103482d990acd8b5c4aff78
msgid "Step 1 and 2 repeat, for every subsequent form in the wizard."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:33
# 5110b8a5bb954ed1a3bc2cc75537d598
msgid "Once the user has submitted all the forms and all the data has been validated, the wizard processes the data -- saving it to the database, sending an email, or whatever the application needs to do."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:38
#: ../../ref/django-admin.txt:36
#: ../../ref/request-response.txt:547
# dc19ccc25acc47d59b185484e31a3f9d
# ff65b65527994c688a8ac6caf929f304
# 0703a29bd7fe4e6caec5060014d1953c
msgid "Usage"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:40
# 98f4a92a083e400284068513bd9df012
msgid "This application handles as much machinery for you as possible. Generally, you just have to do these things:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:43
# 1f1f59593ff34e358e60b9b9e61020e4
msgid "Define a number of :class:`~django.forms.Form` classes -- one per wizard page."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:46
# 76106a61e89a4aec87f3f3a468b3c609
msgid "Create a :class:`WizardView` subclass that specifies what to do once all of your forms have been submitted and validated. This also lets you override some of the wizard's behavior."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:50
# fe8c68a0ed584f92bce9297b53cd406a
msgid "Create some templates that render the forms. You can define a single, generic template to handle every one of the forms, or you can define a specific template for each form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:54
# 7025cc500bba4af682e792c600672d66
msgid "Add ``django.contrib.formtools`` to your :setting:`INSTALLED_APPS` list in your settings file."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:57
# 61b96c483db548f39cc9c92dcc1c7651
msgid "Point your URLconf at your :class:`WizardView` :meth:`~WizardView.as_view` method."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:60
# 173824390e3a440eba6a7ba94dfefc80
msgid "Defining ``Form`` classes"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:62
# 3534bf59d9f24f0fa599c165f3df8abe
msgid "The first step in creating a form wizard is to create the :class:`~django.forms.Form` classes.  These should be standard :class:`django.forms.Form` classes, covered in the :doc:`forms documentation </topics/forms/index>`.  These classes can live anywhere in your codebase, but convention is to put them in a file called :file:`forms.py` in your application."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:69
# 01b6012379e84868a9382df60c11d106
msgid "For example, let's write a \"contact form\" wizard, where the first page's form collects the sender's email address and subject, and the second page collects the message itself. Here's what the :file:`forms.py` might look like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:85
# 6131d9eec622439ba5d2e1ac9e31f505
msgid "In order to use :class:`~django.forms.FileField` in any form, see the section :ref:`Handling files <wizard-files>` below to learn more about what to do."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:90
# ee4c49ce15784677b0348f715368b41a
msgid "Creating a ``WizardView`` subclass"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:92
# 62f9595d9e31412aaf66eff6c8af028f
msgid "The next step is to create a :class:`django.contrib.formtools.wizard.views.WizardView` subclass. You can also use the :class:`SessionWizardView` or :class:`CookieWizardView` classes which preselect the backend used for storing information during execution of the wizard (as their names indicate, server-side sessions and browser cookies respectively)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:101
# 856877a2de9f48e890920df4a5b35224
msgid "To use the :class:`SessionWizardView` follow the instructions in the :doc:`sessions documentation </topics/http/sessions>` on how to enable sessions."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:105
# a1001e3fe4bf4be6b3749395a49881e3
msgid "We will use the :class:`SessionWizardView` in all examples but is is completely fine to use the :class:`CookieWizardView` instead. As with your :class:`~django.forms.Form` classes, this :class:`WizardView` class can live anywhere in your codebase, but convention is to put it in :file:`views.py`."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:110
# 16e64ab4a88a4fbd852e7340d394da21
msgid "The only requirement on this subclass is that it implement a :meth:`~WizardView.done()` method."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:115
# ba99a8cdd2694cf3b2327b67216308ee
msgid "This method specifies what should happen when the data for *every* form is submitted and validated. This method is passed a list of validated :class:`~django.forms.Form` instances."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:119
# 49b22540cc9a4d5caba2c9fd41dff570
msgid "In this simplistic example, rather than performing any database operation, the method simply renders a template of the validated data::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:131
# fa04dd48bdde4de7b9f45619057ba1bc
msgid "Note that this method will be called via ``POST``, so it really ought to be a good Web citizen and redirect after processing the data. Here's another example::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:143
# a47da2d5f2794ccd91e8150a29620e34
msgid "See the section :ref:`Advanced WizardView methods <wizardview-advanced-methods>` below to learn about more :class:`WizardView` hooks."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:147
# 72201b81c66c49b2adc2770235e1bb4b
msgid "Creating templates for the forms"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:149
# 1e6ca5ab29e74517aa764cbfd065b595
msgid "Next, you'll need to create a template that renders the wizard's forms. By default, every form uses a template called :file:`formtools/wizard/wizard_form.html`. You can change this template name by overriding either the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` attribute or the :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()` method, which are documented in the :class:`~django.views.generic.base.TemplateResponseMixin` documentation.  The latter one allows you to use a different template for each form (:ref:`see the example below <wizard-template-for-each-form>`)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:161
# 429688c8138f4f5e925df62c66f9b17a
msgid "This template expects a ``wizard`` object that has various items attached to it:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:164
# 366b9e3fc2cb4e6a892f65ec54fca249
msgid "``form`` -- The :class:`~django.forms.Form` or :class:`~django.forms.formset.BaseFormSet` instance for the current step (either empty or with errors)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:168
# 03a0fa481bac4ec18e9c0b083327759f
msgid "``steps`` -- A helper object to access the various steps related data:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:170
# 571e723441174ae098a10c331e777ada
msgid "``step0`` -- The current step (zero-based)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:171
# 2818d9a2db1e4c75a4be1eafbc9e0c6c
msgid "``step1`` -- The current step (one-based)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:172
# 70f6d495d1354ff884fbec5252270857
msgid "``count`` -- The total number of steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:173
# 6f1f2044428d4d5db8babc360f8d97a3
msgid "``first`` -- The first step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:174
# 013cfafb69bf4cd589ecaf3abf16ff96
msgid "``last`` -- The last step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:175
# cd28e2844a844a2a8878504296a7a9e2
msgid "``current`` -- The current (or first) step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:176
# 595978f0a6d34f2186130abe843d8f2d
msgid "``next`` -- The next step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:177
# 2b6dec0cf24847f091f4b6f2f97a2448
msgid "``prev`` -- The previous step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:178
# 995e7d3c2b434488879264a1b7e7ad9f
msgid "``index`` -- The index of the current step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:179
# 49f1bf25838747dc90988db5cfb4eedf
msgid "``all`` -- A list of all steps of the wizard."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:181
# 2b732a9d49d14ce7a79306c1dd42936e
msgid "You can supply additional context variables by using the :meth:`~WizardView.get_context_data` method of your :class:`WizardView` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:185
# 34483a301a6c400ea391221ce48bb82a
msgid "Here's a full example template:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:220
# 5a61947771f0497492a7a16442d7b003
msgid "Note that ``{{ wizard.management_form }}`` **must be used** for the wizard to work properly."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:226
# a314744993524c8899a63e0df7e0bead
msgid "Hooking the wizard into a URLconf"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:228
# 94d50df74a75416d9e53a1093bfb633b
msgid "Finally, we need to specify which forms to use in the wizard, and then deploy the new :class:`WizardView` object at a URL in the ``urls.py``. The wizard's :meth:`as_view` method takes a list of your :class:`~django.forms.Form` classes as an argument during instantiation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:245
# 8bceed32e6344cc290f3125d5dc593a6
msgid "Using a different template for each form"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:247
# 7517f094e2434514807999bd0f05c35b
msgid "As mentioned above, you may specify a different template for each form. Consider an example using a form wizard to implement a multi-step checkout process for an online store. In the first step, the user specifies a billing and shipping address. In the second step, the user chooses payment type. If they chose to pay by credit card, they will enter credit card information in the next step. In the final step, they will confirm the purchase."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:254
# f5afc281416f414f93177acb3df6c441
msgid "Here's what the view code might look like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:286
# 9e57ae3596544dde9764b184f6ff9741
msgid "The ``urls.py`` file would contain something like::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:292
# 1d5294966d0d4780b5a9c6b972e63bae
msgid "Note that the ``OrderWizard`` object is initialized with a list of pairs. The first element in the pair is a string that corresponds to the name of the step and the second is the form class."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:296
# 0b7b7bec247a4b519d0964d7020acfca
msgid "In this example, the :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()` method returns a list containing a single template, which is selected based on the name of the current step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:304
# e678a42fdb384f9da0642e4dc21e9112
msgid "Advanced ``WizardView`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:308
# 5eb003f0df5442768c2ca1221ab597f9
msgid "Aside from the :meth:`~done()` method, :class:`WizardView` offers a few advanced method hooks that let you customize how your wizard works."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:311
# 87c5c39c6a8b401a842cbc514f24e5c1
msgid "Some of these methods take an argument ``step``, which is a zero-based counter as string representing the current step of the wizard. (E.g., the first form is ``'0'`` and the second form is ``'1'``)"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:317
# 678200fe30544f0d8e8aab974101d065
msgid "Given the step, returns a form prefix to use. By default, this simply uses the step itself. For more, see the :ref:`form prefix documentation <form-prefix>`."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:323
# 9b65f017392c484496febc05b7a51dc1
msgid "Returns a dictionary which will be passed as the :attr:`~django.forms.Form.initial` argument when instantiating the Form instance for step ``step``. If no initial data was provided while initializing the form wizard, an empty dictionary should be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:328
#: ../../ref/contrib/formtools/form-wizard.txt:338
#: ../../ref/contrib/formtools/form-wizard.txt:353
#: ../../ref/contrib/formtools/form-wizard.txt:428
# 0126f09820254fcf9952f1589320c612
# 24680b4a0dcf4ca4aa6017c76c494bfa
# b69c4530ddc342758191b416ab14e38e
# 9d720e4e12154818b49af3d61017d105
msgid "The default implementation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:335
# 0043d225188348c2b5991fd76d0985aa
msgid "Returns a dictionary which will be used as the keyword arguments when instantiating the form instance on given ``step``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:345
# 1677c4c20c1a4b178a93c342de149e86
msgid "This method will be called only if a :class:`~django.forms.ModelForm` is used as the form for step ``step``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:348
# a0e54f7c33ca416ca8ec94feab9c995d
msgid "Returns an :class:`~django.db.models.Model` object which will be passed as the :attr:`~django.forms.ModelForm.instance` argument when instantiating the ModelForm for step ``step``.  If no instance object was provided while initializing the form wizard, ``None`` will be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:360
# 1f3e2249d79541d49f688d6ea7d38883
msgid "Returns the template context for a step. You can overwrite this method to add more data for all or some steps. This method returns a dictionary containing the rendered form step."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:364
# eaa5c27c50734d42a69ed6b1345c2932
msgid "The default template context variables are:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:366
# 330f39512b7f4b58bb4a19a8fbe37f00
msgid "Any extra data the storage backend has stored"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:367
# b557fb5d6e7b4f1d98d65082a7178a40
msgid "``form`` -- form instance of the current step"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:368
# 3672269ad82b4f1980024b31618de8a2
msgid "``wizard`` -- the wizard instance itself"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:370
# 598ebcc1c829476aa8097fbe37f4182a
msgid "Example to add extra variables for a specific step::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:380
# 8f33dc88c0d24055bb9100eaddea1670
msgid "This method returns a prefix for use by the storage backends. Backends use the prefix as a mechanism to allow data to be stored separately for each wizard. This allows wizards to store their data in a single backend without overwriting each other."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:385
# 33f0c4a97b8948a5acb2b825632b94be
msgid "You can change this method to make the wizard data prefix more unique to, e.g. have multiple instances of one wizard in one session."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:388
#: ../../ref/contrib/formtools/form-wizard.txt:441
#: ../../ref/contrib/formtools/form-wizard.txt:457
#: ../../ref/contrib/formtools/form-wizard.txt:469
#: ../../ref/contrib/formtools/form-wizard.txt:479
#: ../../ref/contrib/formtools/form-wizard.txt:489
#: ../../ref/contrib/formtools/form-wizard.txt:694
# 433f9ef05c354b76a3c1af088b0c83be
# 5379016e72824512b6f37cc8be2a2fe6
# ebacc08bbbe548c4b8e18be7bb98dac3
# 9d520646fd1643e4bd09195c61bdbf2e
# 10e29c8972fc4c668be2249e59e9d2ef
# e3285fd88ee3423f9d08842b14dff618
# 521dc3deea924954b426739ee15bd00e
msgid "Default implementation::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:396
# 5b3dd097f6c84b339367d329de7b3bfb
msgid "This method constructs the form for a given ``step``. If no ``step`` is defined, the current step will be determined automatically. The method gets three arguments:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:400
# defedd1b2c194458bfd9958890ee7ee1
msgid "``step`` -- The step for which the form instance should be generated."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:401
# f34185670ad04831b0c6894d56afe9f4
msgid "``data`` -- Gets passed to the form's data argument"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:402
# fb29ae05ada240ac9c704f19a91aac97
msgid "``files`` -- Gets passed to the form's files argument"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:404
# 45277ef8a8314680a7278d56c001b94a
msgid "You can override this method to add extra arguments to the form instance."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:406
# 0e7757a152fd4c9f946a1197f8267054
msgid "Example code to add a user attribute to the form on step 2::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:416
# 586cbd9aebd24c1a87822e3856e0246d
msgid "Hook for modifying the wizard's internal state, given a fully validated :class:`~django.forms.Form` object. The Form is guaranteed to have clean, valid data."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:420
# f5219399acea4e8bb7761e34b879b2a4
msgid "This method gives you a way to post-process the form data before the data gets stored within the storage backend. By default it just returns the ``form.data`` dictionary. You should not manipulate the data here but you can use it to do some extra work if needed (e.g. set storage extra data)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:425
# fa50e3ed19984d49bbebdf9159ba940f
msgid "Note that this method is called every time a page is rendered for *all* submitted steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:435
# 05ec3ace130c4274968b605a58bc833a
msgid "This method gives you a way to post-process the form files before the files gets stored within the storage backend. By default it just returns the ``form.files`` dictionary. You should not manipulate the data here but you can use it to do some extra work if needed (e.g. set storage extra data)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:448
# 403e342d7dd94d9483126d9f60bba7cf
msgid "When the wizard thinks all steps have passed it revalidates all forms with the data from the backend storage."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:451
# ece777ff24d449c1abcab4b3003791d3
msgid "If any of the forms don't validate correctly, this method gets called. This method expects two arguments, ``step`` and ``form``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:454
# f7932ff8913344d69075fb38ec4895ca
msgid "The default implementation resets the current step to the first failing form and redirects the user to the invalid form."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:465
# ddb360d669354834a65eed447ad0dc3e
msgid "This method fetches the data from the ``form`` Form instance and returns the dictionary. You can use this method to manipulate the values before the data gets stored in the storage backend."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:476
# 7fd18f9a922c415881752a241e9e806e
msgid "This method returns the form files. You can use this method to manipulate the files before the data gets stored in the storage backend."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:486
# 43d14f86636642e8a60f8d364f3bb613
msgid "This method gets called after the GET or POST request has been handled. You can hook in this method to, e.g. change the type of HTTP response."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:498
# 45aae00fdbb5416ebf111e6703bc5311
msgid "This method returns the cleaned data for a given ``step``. Before returning the cleaned data, the stored values are revalidated through the form. If the data doesn't validate, ``None`` will be returned."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:504
# c8960ab14eef467c8db3b466a92aa916
msgid "This method returns a merged dictionary of all form steps' ``cleaned_data`` dictionaries. If a step contains a ``FormSet``, the key will be prefixed with ``formset-`` and contain a list of the formset's ``cleaned_data`` dictionaries. Note that if two or more steps have a field with the same name, the value for that field from the latest step will overwrite the value from any earlier steps."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:512
# d94e062bce894bd5b1dc646e92b51968
msgid "Providing initial data for the forms"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:516
# 1ca62facf5e14433a624aaedf590c8b9
msgid "Initial data for a wizard's :class:`~django.forms.Form` objects can be provided using the optional :attr:`~Wizard.initial_dict` keyword argument. This argument should be a dictionary mapping the steps to dictionaries containing the initial data for each step. The dictionary of initial data will be passed along to the constructor of the step's :class:`~django.forms.Form`::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:537
# 048e7dd58e024ac8b38115cb938773f2
msgid "The ``initial_dict`` can also take a list of dictionaries for a specific step if the step is a ``FormSet``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:543
# 554dd1974ab244d48fed13e9d553520e
msgid "Handling files"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:545
# 5dbf349f5268494aabd0e457587b9b23
msgid "To handle :class:`~django.forms.FileField` within any step form of the wizard, you have to add a :attr:`file_storage` to your :class:`WizardView` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:548
# 6bbcf58a1c524ec887d8a93c26514d2d
msgid "This storage will temporarily store the uploaded files for the wizard. The :attr:`file_storage` attribute should be a :class:`~django.core.files.storage.Storage` subclass."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:552
# a892d7f0984f40fa9355319058267e3f
msgid "Django provides a built-in storage class (see :ref:`the built-in filesystem storage class <builtin-fs-storage>`)::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:564
# f053c03fbdac4ca89029f9845e3ed7c3
msgid "Please remember to take care of removing old files as the :class:`WizardView` won't remove any files, whether the wizard gets finished correctly or not."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:569
# e92d41ff66104bbebf11e34659df76cb
msgid "Conditionally view/skip specific steps"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:573
# fe9e1dd1935d4c57aa159bd9a1585859
msgid "The :meth:`~WizardView.as_view` method accepts a ``condition_dict`` argument. You can pass a dictionary of boolean values or callables. The key should match the steps names (e.g. '0', '1')."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:577
# 8d03444bc3a44f63bacbd4ada8587ec9
msgid "If the value of a specific step is callable it will be called with the :class:`WizardView` instance as the only argument. If the return value is true, the step's form will be used."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:581
# 7b811241d963460b86547c4c7c268e6b
msgid "This example provides a contact form including a condition. The condition is used to show a message form only if a checkbox in the first step was checked."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:584
# f9e4f692cd4c48f8aab5b52768a4135b
msgid "The steps are defined in a ``forms.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:596
# 6e99bf46cdfc474da2e71eecc4b3d8bf
msgid "We define our wizard in a ``views.py``::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:614
# 27d3051a30b74cf687dab8f1405f679b
msgid "We need to add the ``ContactWizard`` to our ``urls.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:629
# ffd1036c411d4e029a8ce9c213c4e4a2
msgid "As you can see, we defined a ``show_message_form_condition`` next to our :class:`WizardView` subclass and added a ``condition_dict`` argument to the :meth:`~WizardView.as_view` method. The key refers to the second wizard step (because of the zero based step index)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:635
# 26c08a21592246109ab033b790893622
msgid "How to work with ModelForm and ModelFormSet"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:639
# 6feb77c646554ea89ddd3b8d78fff705
msgid "WizardView supports :doc:`ModelForms </topics/forms/modelforms>` and :ref:`ModelFormSets <model-formsets>`. Additionally to :attr:`~WizardView.initial_dict`, the :meth:`~WizardView.as_view` method takes an ``instance_dict`` argument that should contain model instances for steps based on ``ModelForm`` and querysets for steps based on ``ModelFormSet``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:646
# 812ec4420f244b9ea9657cf1b94bf50a
msgid "Usage of ``NamedUrlWizardView``"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:650
# 8e5e63f9736d47be84faef7b1d64bfdd
msgid "There is a :class:`WizardView` subclass which adds named-urls support to the wizard. By doing this, you can have single urls for every step. You can also use the :class:`NamedUrlSessionWizardView` or :class:`NamedUrlCookieWizardView` classes which preselect the backend used for storing information (server-side sessions and browser cookies respectively)."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:656
# 190e19936c4e45cb8269d57468e75d91
msgid "To use the named urls, you have to change the ``urls.py``."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:658
# 2074c3b8b13a432abf4e038bb1fc7c91
msgid "Below you will see an example of a contact wizard with two steps, step 1 with \"contactdata\" as its name and step 2 with \"leavemessage\" as its name."
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:661
# c77cb9d5b8bb4e5ca6cec98cf467b1a6
msgid "Additionally you have to pass two more arguments to the :meth:`~WizardView.as_view` method:"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:664
# 392905ca086045e0ba4887671dd12e7e
msgid "``url_name`` -- the name of the url (as provided in the urls.py)"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:665
# e798753b747040a9a3653129ee95aa3b
msgid "``done_step_name`` -- the name in the url for the done step"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:667
# 9a8097fe46c1485aa5dbc89d8b2806ca
msgid "Example code for the changed ``urls.py`` file::"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:688
# 11f438af7751423c93e11a98c2a24b6a
msgid "Advanced ``NamedUrlWizardView`` methods"
msgstr ""

#: ../../ref/contrib/formtools/form-wizard.txt:692
# ef4a11639ebf442d840dff44e6bdf91b
msgid "This method returns the URL for a specific step."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:2
# 77f10830180643f68b9ea97e73e21dc6
msgid "django.contrib.formtools"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:4
# bd2f3d12ddb54ea490055e4557519d67
msgid "A set of high-level abstractions for Django forms (:mod:`django.forms`)."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:5
# b4ab0028ecf14b4ca4554f3a5b1cfa56
msgid "GeoDjango's admin site"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:12
# 68558d9777ca4a9fbb96ed2f3a0d2e9e
msgid "``GeoModelAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:18
# 94a39964cf1c48189bdba3ae47c2ad73
msgid "The default center longitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:22
# 7470a9b1cc39418eaec936dc3f66b01b
msgid "The default center latitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:26
# 91400eb695954bfd87871069664afe10
msgid "The default zoom level to use.  Defaults to 18."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:30
# 9eaf09c9bca34a67aba16264f1200939
msgid "Sequence of URLs to any extra JavaScript to include."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:34
# 99bc8ee8749649af82ee4eb6eb22e4c2
msgid "Override the template used to generate the JavaScript slippy map. Default is ``'gis/admin/openlayers.html'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:39
# a3e7084aae3249eeace34f3fe50b8b46
msgid "Width of the map, in pixels.  Defaults to 600."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:43
# 9d1300294ed847df84658fa9f0a41369
msgid "Height of the map, in pixels.  Defaults to 400."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:47
# 6546e66a5bfb4b079f9ad2d3eec4bf76
msgid "Link to the URL of the OpenLayers JavaScript.  Defaults to ``'http://openlayers.org/api/2.11/OpenLayers.js'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:53
# d8d5cb3307614217962bd2c8539c68a2
msgid "Defaults to ``True``.  When set to ``False``, disables editing of existing geometry fields in the admin."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:58
# c53b3e0d3a6f4aab948622449951fdc6
msgid "This is different from adding the geometry field to :attr:`~django.contrib.admin.ModelAdmin.readonly_fields`, which will only display the WKT of the geometry. Setting ``modifiable=False``, actually displays the geometry in a map, but disables the ability to edit its vertices."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:65
#: ../../ref/contrib/gis/tutorial.txt:758
# a27457c4272d432fa4f608580b23567f
# 7b59865732034115b90b75bfd8a03d3a
msgid "``OSMGeoAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:69
# 6ea835678d4f451f86eb0377fa96f708
msgid "A subclass of :class:`GeoModelAdmin` that uses a spherical mercator projection with `OpenStreetMap <http://openstreetmap.org/>`_ street data tiles. See the :ref:`OSMGeoAdmin introduction <osmgeoadmin-intro>` in the tutorial for a usage example."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:5
# cc897975faad4298ad363addff93d31a
msgid "GeoDjango Management Commands"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:8
#: ../../ref/django-admin.txt:240
# adf94bc70dc6435480358576fca8da6f
# 038bf243f8a74dab92677283721cd95a
msgid "inspectdb"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:12
# c32cc23b86a9482fa081020feb519225
msgid "When :mod:`django.contrib.gis` is in your :setting:`INSTALLED_APPS`, the :djadmin:`inspectdb` management command is overridden with one from GeoDjango. The overridden command is spatially-aware, and places geometry fields in the auto-generated model definition, where appropriate."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:18
# c10c5cd406d542a093cd831775ea162d
msgid "ogrinspect <data_source> <model_name>"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:22
# 107ced84814f4f24849ad1e66aa77780
msgid "The ``ogrinpsect`` management command will inspect the given OGR-compatible :class:`~django.contrib.gis.gdal.DataSource` (e.g., a shapefile) and will output a GeoDjango model with the given model name.  There's a detailed example of using ``ogrinspect`` :ref:`in the tutorial <ogrinspect-intro>`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:29
# 0bdfb750a66c4ffb8a7e4aea6ebe270a
msgid "Use a comma separated list of OGR field names to add the ``blank=True`` keyword option to the field definition.  Set with ``true`` to apply to all applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:35
# 59ca08f9a7884e018d077787382d080e
msgid "Use a comma separated list of OGR float fields to generate :class:`~django.db.models.DecimalField` instead of the default :class:`~django.db.models.FloatField`. Set to ``true`` to apply to all OGR float fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:42
# e098b72b2307460a9f9f19a3f9196f5f
msgid "Specifies the model attribute name to use for the geometry field. Defaults to ``'geom'``."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:47
# 40f1aab888cd44f0b6869e65c8d16a83
msgid "The key for specifying which layer in the OGR :class:`~django.contrib.gis.gdal.DataSource` source to use. Defaults to 0 (the first layer). May be an integer or a string identifier for the :class:`~django.contrib.gis.gdal.Layer`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:54
# ab63d2b2e2584cca9967822486e5fc54
msgid "Automatically generate a mapping dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:59
# c3e29a0a55404d73b6c6d6e074fb7466
msgid "When generating the geometry field, treat it as a geometry collection. For example, if this setting is enabled then a :class:`~django.contrib.gis.db.models.MultiPolygonField` will be placed in the generated model rather than :class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:67
# c97e3cbea35f459bb0060629825fd777
msgid "Generates a ``__unicode__`` routine on the model that will return the the given field name."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:72
# dcaf976e767849bfb660235bef6c1789
msgid "Suppresses the ``from django.contrib.gis.db import models`` import statement."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:76
# c70502267c464797a5a93242ab0f112c
msgid "Use a comma separated list of OGR field names to add the ``null=True`` keyword option to the field definition.  Set with ``true`` to apply to all applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:82
# 956346d00a2043a58febb15dcc4f4a9d
msgid "The SRID to use for the geometry field.  If not set, ``ogrinspect`` attempts to automatically determine of the SRID of the data source."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:5
# 3a2c746ab9204d8a98ceca83aa9a993b
msgid "GeoDjango Database API"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:13
# 1e70bc113af74104a10d4ca665854910
msgid "Spatial Backends"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:15
# 0887d6eaaa9b4a0498db9e23499cd361
msgid "GeoDjango currently provides the following spatial database backends:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:17
# 28cdda614d8b4decbf54abd6bf9c19c7
msgid ":mod:`django.contrib.gis.db.backends.postgis`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:18
# 2e8c22272af34698a901865e441feb89
msgid ":mod:`django.contrib.gis.db.backends.mysql`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:19
# c3f1d923e6fe4e1eb1b11264af67c1e6
msgid ":mod:`django.contrib.gis.db.backends.oracle`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:20
# 2fa1751c5db846c4afa7db5761513865
msgid ":mod:`django.contrib.gis.db.backends.spatialite`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:25
# 11040cc7e81d4edaa11b045ab9c50b0f
msgid "MySQL Spatial Limitations"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:27
# cd7c3401c6d14583a4fffae2e813adcc
msgid "MySQL's spatial extensions only support bounding box operations (what MySQL calls minimum bounding rectangles, or MBR).  Specifically, `MySQL does not conform to the OGC standard <http://dev.mysql.com/doc/refman/5.1/en/functions-for-testing-spatial-relations-between-geometric-objects.html>`_:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:31
# e1cdb80dcd25410d871c4a7ab133ed57
msgid "Currently, MySQL does not implement these functions [``Contains``, ``Crosses``, ``Disjoint``, ``Intersects``, ``Overlaps``, ``Touches``, ``Within``] according to the specification.  Those that are implemented return the same result as the corresponding MBR-based functions."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:37
# 5ca1338ac31c45ca96f5503c165b1523
msgid "In other words, while spatial lookups such as :lookup:`contains <gis-contains>` are available in GeoDjango when using MySQL, the results returned are really equivalent to what would be returned when using :lookup:`bbcontains` on a different spatial backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:44
# dafa4d60ea6d4558ae0c566d7330eaae
msgid "True spatial indexes (R-trees) are only supported with MyISAM tables on MySQL. [#fnmysqlidx]_ In other words, when using MySQL spatial extensions you have to choose between fast spatial lookups and the integrity of your data -- MyISAM tables do not support transactions or foreign key constraints."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:51
# 4d4689f63bb54bc19de21e34a2e469b4
msgid "Creating and Saving Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:52
# e5f0bae9d7eb46fda0f3edb93cc26030
msgid "Here is an example of how to create a geometry object (assuming the ``Zipcode`` model)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:59
# 796d41bda0454baf8a0b27e8dcb7b713
msgid ":class:`~django.contrib.gis.geos.GEOSGeometry` objects may also be used to save geometric models::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:66
# bb8b1c63ec4d4494ad8fd4c20ec52759
msgid "Moreover, if the ``GEOSGeometry`` is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model's field, using the spatial database's transform procedure::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:78
# 573ef8536e0c4c758dcee559465d9272
msgid "Thus, geometry parameters may be passed in using the ``GEOSGeometry`` object, WKT (Well Known Text [#fnwkt]_), HEXEWKB (PostGIS specific -- a WKB geometry in hexadecimal [#fnewkb]_), and GeoJSON [#fngeojson]_ (requires GDAL). Essentially, if the input is not a ``GEOSGeometry`` object, the geometry field will attempt to create a ``GEOSGeometry`` instance from the input."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:84
# f61bd4e5490446f49e3aee333ea9ad2e
msgid "For more information creating :class:`~django.contrib.gis.geos.GEOSGeometry` objects, refer to the :ref:`GEOS tutorial <geos-tutorial>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:90
#: ../../ref/contrib/gis/db-api.txt:224
#: ../../ref/contrib/gis/geoquerysets.txt:15
#: ../../ref/contrib/gis/tutorial.txt:590
# bb04c7f47a8a4671860bfd49285eaef6
# daa497fb82884b86ba95deb31c47e4d9
# 6a3065bb51334ac9a1928e485e80877d
# 8ad6cc4d3d894f3a8bb7a29177dcc589
msgid "Spatial Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:92
# e6ce1f450a2f425891eb4912d3d005c2
msgid "GeoDjango's lookup types may be used with any manager method like ``filter()``, ``exclude()``, etc.  However, the lookup types unique to GeoDjango are only available on geometry fields. Filters on 'normal' fields (e.g. :class:`~django.db.models.CharField`) may be chained with those on geographic fields.  Thus, geographic queries take the following general form (assuming  the ``Zipcode`` model used in the :ref:`ref-gis-model-api`)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:107
# 709f99ff293845e797484b1995612662
msgid "In this case, ``poly`` is the geographic field, :lookup:`contains <gis-contains>` is the spatial lookup type, and ``pnt`` is the parameter (which may be a :class:`~django.contrib.gis.geos.GEOSGeometry` object or a string of GeoJSON , WKT, or HEXEWKB)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:112
# ea118a688eb649d2b8a77992d5f6ab82
msgid "A complete reference can be found in the :ref:`spatial lookup reference <spatial-lookups>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:117
# 2e70058601e94c108d5b2b8d81200fe9
msgid "GeoDjango constructs spatial SQL with the :class:`GeoQuerySet`, a subclass of :class:`~django.db.models.query.QuerySet`.  The :class:`GeoManager` instance attached to your model is what enables use of :class:`GeoQuerySet`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:125
# 4e425026fc1f4f1980bb6ab9594904cf
msgid "Distance Queries"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:128
#: ../../ref/contrib/gis/tutorial.txt:6
# 911e60e7038a49c18358d5d8f1261839
# 71e82555e0984f97aabbce63e7150142
msgid "Introduction"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:129
# aa7178efbca14870abfaf1416e249b73
msgid "Distance calculations with spatial data is tricky because, unfortunately, the Earth is not flat.  Some distance queries with fields in a geographic coordinate system may have to be expressed differently because of limitations in PostGIS.  Please see the :ref:`selecting-an-srid` section in the :ref:`ref-gis-model-api` documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:138
#: ../../ref/contrib/gis/geoquerysets.txt:510
# aae3c3a49bfd4df7bc04cd78e965e447
# c1e7cd9273d24dcab4c8fe773514e806
msgid "Distance Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:139
#: ../../ref/contrib/gis/geoquerysets.txt:270
#: ../../ref/contrib/gis/geoquerysets.txt:512
#: ../../ref/contrib/gis/geoquerysets.txt:691
#: ../../ref/contrib/gis/geoquerysets.txt:770
#: ../../ref/contrib/gis/geoquerysets.txt:790
#: ../../ref/contrib/gis/geoquerysets.txt:849
#: ../../ref/contrib/gis/geoquerysets.txt:887
#: ../../ref/contrib/gis/geoquerysets.txt:977
#: ../../ref/contrib/gis/geoquerysets.txt:1073
#: ../../ref/contrib/gis/geoquerysets.txt:1085
#: ../../ref/contrib/gis/geoquerysets.txt:1162
# b6095a9b0e54497e8089d5d4e9ff253b
# 7a71213751fc46a5a1204b2fc3bb1b5d
# 0e11c40a54454dae8fdc0055e038018f
# db959a7dbe1f49ea9b45a67c23ec208f
# 0e32ea00fa124679a9402168a9e242a8
# 7cd8704a08d84e8eb84586182548e05d
# d4d0773eaed9425bb08f1dacbbd32e00
# d2499c28ad234e24b56282d2547265c7
# 62d633f1770f4f7fb16cc81a99071133
# 64ae4e027f2a4cbbbdc8f7c2a69457d4
# bcfc99fa6fce4a5aa81209f2bd68fe21
# 2a3c460bf65c4f549a3db8207905b3ab
msgid "*Availability*: PostGIS, Oracle, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:141
# 750e23a177cb4fc7b50aaaedfd2f6fa7
msgid "The following distance lookups are available:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:143
#: ../../ref/contrib/gis/db-api.txt:243
# 500c50e1cee14f6c9cf8fdfdcfdf0651
# b877b1deb3344ae9aaf534382ffed5fe
msgid ":lookup:`distance_lt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:144
#: ../../ref/contrib/gis/db-api.txt:244
# 23fc121822614b7291cdae2c571c1bfd
# f742a361e66147f89e824af307cab0bb
msgid ":lookup:`distance_lte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:145
#: ../../ref/contrib/gis/db-api.txt:241
# 4b8734a9076c43bba9ff35761686def2
# e378f84a1996438a80825ff7a6662343
msgid ":lookup:`distance_gt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:146
#: ../../ref/contrib/gis/db-api.txt:242
# e6e5e655f01b491b9d13924c2467912e
# a43f83950f564e82b5c5f0f50e91fad5
msgid ":lookup:`distance_gte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:147
#: ../../ref/contrib/gis/db-api.txt:245
# df02dbbe1b4241108b9ff6e53bcafe84
# 4c3f0ba1a69948bcb8185c34b3aec79b
msgid ":lookup:`dwithin`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:151
# 826c5be7b861440b942c253753aeb974
msgid "For *measuring*, rather than querying on distances, use the :meth:`GeoQuerySet.distance` method."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:154
# 1af8658ae3cf44339d47a2f0f715316b
msgid "Distance lookups take a tuple parameter comprising:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:156
# f488b50689d34e7eb72743612fba8e5f
msgid "A geometry to base calculations from; and"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:157
# b86e72b94969409b85ba5c0ae4a64c59
msgid "A number or :class:`~django.contrib.gis.measure.Distance` object containing the distance."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:159
# 0941867058a44170859eebe3bb05cf9b
msgid "If a :class:`~django.contrib.gis.measure.Distance` object is used, it may be expressed in any units (the SQL generated will use units converted to those of the field); otherwise, numeric parameters are assumed to be in the units of the field."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:166
# 7f8e63707cb8485bbd622919b51aa086
msgid "For users of PostGIS 1.4 and below, the routine ``ST_Distance_Sphere`` is used by default for calculating distances on geographic coordinate systems (e.g., WGS84) -- which may only be called with point geometries [#fndistsphere14]_. Thus, geographic distance lookups on traditional PostGIS geometry columns are only allowed on :class:`PointField` model fields using a point for the geometry parameter."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:175
# c21a837308ed444788597c2ffc910ceb
msgid "In PostGIS 1.5, ``ST_Distance_Sphere`` does *not* limit the geometry types geographic distance queries are performed with. [#fndistsphere15]_  However, these queries may take a long time, as great-circle distances must be calculated on the fly for *every* row in the query.  This is because the spatial index on traditional geometry fields cannot be used."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:181
# 22935a17e9fa4a2ba09a6c1c26dd2153
msgid "For much better performance on WGS84 distance queries, consider using :ref:`geography columns <geography-type>` in your database instead because they are able to use their spatial index in distance queries. You can tell GeoDjango to use a geography column by setting ``geography=True`` in your field definition."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:187
# 1734373c74e846c8b7695df638b497e9
msgid "For example, let's say we have a ``SouthTexasCity`` model (from the `GeoDjango distance tests`__ ) on a *projected* coordinate system valid for cities in southern Texas::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:200
# 7aaef317c7a54425950a2f4a7abc2e56
msgid "Then distance queries may be performed as follows::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:219
# 98d6f2dac6d74541a4efe1749a8f7ce5
msgid "Compatibility Tables"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:226
# 88df808fab0142209f711c17299a4285
msgid "The following table provides a summary of what spatial lookups are available for each spatial database backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
# e9fae18558d8457d93263c76a315e526
msgid "Lookup Type"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
#: ../../ref/contrib/gis/db-api.txt:273
#: ../../ref/contrib/gis/geoquerysets.txt:44
#: ../../ref/contrib/gis/geoquerysets.txt:66
#: ../../ref/contrib/gis/geoquerysets.txt:88
#: ../../ref/contrib/gis/geoquerysets.txt:109
#: ../../ref/contrib/gis/geoquerysets.txt:136
#: ../../ref/contrib/gis/geoquerysets.txt:156
#: ../../ref/contrib/gis/geoquerysets.txt:177
#: ../../ref/contrib/gis/geoquerysets.txt:197
#: ../../ref/contrib/gis/geoquerysets.txt:217
#: ../../ref/contrib/gis/geoquerysets.txt:252
#: ../../ref/contrib/gis/geoquerysets.txt:333
#: ../../ref/contrib/gis/geoquerysets.txt:355
#: ../../ref/contrib/gis/geoquerysets.txt:546
#: ../../ref/contrib/gis/geoquerysets.txt:566
#: ../../ref/contrib/gis/geoquerysets.txt:586
#: ../../ref/contrib/gis/geoquerysets.txt:606
#: ../../ref/contrib/gis/geoquerysets.txt:626
#: ../../ref/contrib/gis/install.txt:225
#: ../../ref/contrib/gis/install.txt:1222
#: ../../ref/contrib/gis/install/index.txt:448
#: ../../ref/contrib/gis/testing.txt:11
# ade8b49f23084f99be400671a9e3f15a
# 8a9959eac60a4d80ac13199b7225d864
# 291294474f1f4aba8073a71cf5a76810
# 04f9c2e54a234058ba46dbe683d286fb
# b7313f99d9514b6682e73089bf05eb50
# 8a79b4d5e13e4961bd3595ad21b65702
# 262d42f04fab43e897b742487954a723
# b59cb232b1ee4cb88dd1eb8b8db88ef8
# 94ead634265c4052a06c1948350151ec
# f6a560282143464fa9dab25259639522
# fe65377e8a1d434cbd2bb36f45176273
# 84572a457f0e4467a9d72aa2ef8e6f64
# e4824432cbb84c3c9d8007fdf767bdec
# ba83b6a9ec0940a79512ca58b0583634
# 9d2859e090d540e39c1fb003bdc0abc9
# c9941c11a6e4468a84470b9f757c5015
# 6824c195ffcc441a95d83d911c9b11f4
# a294739156774ab695c77de1cfc30cde
# ab36ca48144742aeae422858126490ce
# 9d033a6ee88648768bcbadc146da4acc
# f930be56f0b7440cbe79033ac7dd054f
# 9ea97c5868344b25bc40671d88e7f07f
# 9ae9a643842a42edaea0ceff9c7d5a08
msgid "PostGIS"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
#: ../../ref/contrib/gis/db-api.txt:273
#: ../../ref/contrib/gis/geoquerysets.txt:110
#: ../../ref/contrib/gis/geoquerysets.txt:157
#: ../../ref/contrib/gis/geoquerysets.txt:178
#: ../../ref/contrib/gis/geoquerysets.txt:218
#: ../../ref/contrib/gis/geoquerysets.txt:253
#: ../../ref/contrib/gis/geoquerysets.txt:300
#: ../../ref/contrib/gis/geoquerysets.txt:335
#: ../../ref/contrib/gis/geoquerysets.txt:357
#: ../../ref/contrib/gis/geoquerysets.txt:547
#: ../../ref/contrib/gis/geoquerysets.txt:567
#: ../../ref/contrib/gis/geoquerysets.txt:587
#: ../../ref/contrib/gis/geoquerysets.txt:607
#: ../../ref/contrib/gis/geoquerysets.txt:627
#: ../../ref/contrib/gis/install.txt:68
#: ../../ref/contrib/gis/install/index.txt:66
# a6c8911c5f2b4af6bebde4dcc2f0999b
# e649c7eda1ea4e90b85d977782178a37
# d1039cc76978467ea5fecd985174b544
# 981d965312744fc4b2754a8f44aed86c
# 57afae86af8246bba0a75e7f6530a3ec
# 34d19c2012c64f859d43c2691d117fef
# 0ed8fe525a994c7591f6bd53bc973eda
# 974969998d114aa485c58dfcf16a9fde
# 8bf3092dcbbd488390e152ffc8328c51
# 658a877be3ee4c458fcd3f368d390d05
# 33ccff3799004d2d921b9797f4608c32
# 99100364b86e4ef48fe1b20dbdd5d59f
# fe7157aa59d4463a8930a0b05fa2406c
# eb189dddbbd6475f893db2e62af77da7
# a44da41ea6994ec39e157b5bac868dfe
# f403a9d796cc405b8a118b6a122e25a2
# 39dee489597f4edab931923fb4dbdf57
msgid "Oracle"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
# a21211a943bc4d898c703136b674309f
msgid "MySQL [#]_"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
#: ../../ref/contrib/gis/db-api.txt:273
#: ../../ref/contrib/gis/geoquerysets.txt:46
#: ../../ref/contrib/gis/geoquerysets.txt:68
#: ../../ref/contrib/gis/geoquerysets.txt:90
#: ../../ref/contrib/gis/geoquerysets.txt:112
#: ../../ref/contrib/gis/geoquerysets.txt:198
#: ../../ref/contrib/gis/geoquerysets.txt:220
#: ../../ref/contrib/gis/geoquerysets.txt:255
#: ../../ref/contrib/gis/geoquerysets.txt:336
#: ../../ref/contrib/gis/geoquerysets.txt:358
#: ../../ref/contrib/gis/geoquerysets.txt:548
#: ../../ref/contrib/gis/geoquerysets.txt:568
#: ../../ref/contrib/gis/geoquerysets.txt:588
#: ../../ref/contrib/gis/geoquerysets.txt:608
#: ../../ref/contrib/gis/install.txt:363
#: ../../ref/contrib/gis/install.txt:889
#: ../../ref/contrib/gis/testing.txt:107
# e8769d99e1af4ed3a79af491fd875544
# 748c6541374e4f4d89e701a869d5052e
# 6b52b531a96f493d87bd3f5f04ad858b
# aedd1299791540e9bf781517186ab8f6
# 8654687a357d47b59ed426a2bc29c243
# 514ecbeac1204cdfa1b5132a3e2bebcb
# dd19014389bb45469fe650b6efe0d641
# dca5c136556242148f86571a6c5fb50c
# 3c9e25095f2c44d5939293bf2e6a36e1
# 5272f519fe574745ba97e5a8384416c7
# 244bbc32d796457dbde77d3baa8376d0
# c1bb869dd42140d7bd0a2fe07bad009f
# 35cab853910643f8a2ded99be7a7d8e7
# 1ae0f9e37be2411b96a8ead11c1f4572
# 1fffa7709dab4e339617a3f7a3727db1
# 54057094128d4851a86045482ce66d02
# f87a2820e7954ef8a6c94689a62123b5
# ee1c6b3e586a4dfda130716a303431af
msgid "SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:232
# 89c36a76a86841038a1a9c795226ce51
msgid ":lookup:`bbcontains`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:232
#: ../../ref/contrib/gis/db-api.txt:232
#: ../../ref/contrib/gis/db-api.txt:232
#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:249
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:251
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:253
#: ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:255
#: ../../ref/contrib/gis/db-api.txt:256
#: ../../ref/contrib/gis/db-api.txt:257
#: ../../ref/contrib/gis/db-api.txt:258
#: ../../ref/contrib/gis/db-api.txt:259
#: ../../ref/contrib/gis/db-api.txt:260
#: ../../ref/contrib/gis/db-api.txt:261
#: ../../ref/contrib/gis/db-api.txt:275
#: ../../ref/contrib/gis/db-api.txt:275
#: ../../ref/contrib/gis/db-api.txt:275
#: ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/db-api.txt:277
#: ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:281
#: ../../ref/contrib/gis/db-api.txt:281
#: ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:284
#: ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:286
#: ../../ref/contrib/gis/db-api.txt:286
#: ../../ref/contrib/gis/db-api.txt:286
#: ../../ref/contrib/gis/db-api.txt:287
#: ../../ref/contrib/gis/db-api.txt:287
#: ../../ref/contrib/gis/db-api.txt:287
#: ../../ref/contrib/gis/db-api.txt:288
#: ../../ref/contrib/gis/db-api.txt:288
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:294
#: ../../ref/contrib/gis/db-api.txt:294
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:295
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:296
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/db-api.txt:298
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:299
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:300
#: ../../ref/contrib/gis/db-api.txt:301
#: ../../ref/contrib/gis/db-api.txt:301
#: ../../ref/contrib/gis/db-api.txt:301
#: ../../ref/contrib/gis/db-api.txt:302
#: ../../ref/contrib/gis/db-api.txt:302
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:303
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/db-api.txt:304
# 7133e25866504422a14661a59469b5fe
# bff3d8d41aec45009ef6733d749c8452
# 006ecbae6b244d3181352755db6cd238
# 3a83585f559c426f8df99785cb63369c
# 6569007eb5db4019813dc884849211d8
# babe45d2a7754a99ace585b05e711950
# 1f0d2b7dc0fd469aa9b6d705209b6289
# b22553a0ac5e4d77b3a6492b80ce891f
# 6442873059f34ebe99f0d55f04f2f508
# e13cf1bfedd94c528b77969f08d242e7
# 0449ee73551a42b0a305862df842049c
# 45a2c9ac690145918aa7b28a3138fca8
# 3d62c52e755f4e5e978c7c6edf258c37
# 886158c208e9436fb020381b19f2af85
# 61f25f738bca41b4931a220856f8d5a8
# 9d5b390b9b834f6cac9abb97c2d42d9b
# 773d38efd33948958ca5b625e61f0a41
# d2d2a80ecc39450fad8346e6195df1a6
# 511ca1f0d86248e3ba726770f5ed4184
# 07ffd70999364aba887b3ac1a786df44
# 5fe942476fb74c78b5a626c98e6d61b9
# 98826492082a4ac8aca43e530c34739b
# a0e7926608c64edb816f399d792f901f
# 2ee7652ac6184852906208d9bd5429c6
# 5b200db8b64a4ee6baaffd19e09958a6
# 5f330b7d91cd44678ffe11c42b2fde3a
# 9e5cb3c2f5784119af9016f37c898b2f
# d765b5c3ca9944f098ff3a49ca8fc7e1
# 53f4bc8cc9c742a9a365ad13de8fadb0
# e543bf8ade37488f801a69e756403e24
# 7bdc844adb1b43aaac4f3bac9eb1cd05
# 0ac957f892f7406d8da9340490f37be5
# 75d7b740539b413a9be8c35d06371c80
# fb3692286680495f90296be7441ea0fd
# 03622f7802484e8e9e466ee2f45f748b
# 955cebcde7bc44298db94799030ddf23
# 55e7d87c03b4473295401e1a90b55643
# ea5bc7047eba456685665e625d0b519e
# 0e6db7cdc9184a4c9d723d8337bef163
# 06ae99e9f2164eb6846d9381f11bd181
# a39cef02fc634a7eb06c7b442f2f11f3
# 567ce1b16d6a4aed82018e2ec917d746
# ec0e66f771624e92b9c94bcf7cd0a335
# 22af5b593759489eae5e6c24b6e150f1
# 07a505fe9d6f4f9481c166c0f42b1be3
# 38631b05db2d410ab284e6e97a728168
# 639b869435a94c6ca7553b6af72e3e20
# 339b769633784d2da90138bd42ff8056
# ae7ed5e783214c57980a40a88d6ad6f1
# 512316d8aedf4395aa5d7fde306f5be0
# 5667b36fb7854e42a1e389f78d54cb72
# 21ba916359e44445863351d3dc33fe12
# 3f828b1b88664b129d5035804d0f4da2
# 301bc3d381f343aba536babf4dfac842
# 7e3734a9c28b460c9f462e2d3f0dce5b
# 1d914470fe124a13bfbbc604e940d4d4
# 8ca60bebb6af4e1f960a04ea85204934
# 8da6849b785943ee9a13cb5634a4f770
# ec1d7bb1bd6248b88842007f49d82879
# 755c1d42383f474aa5ee1becb875d89a
# 2a5153b2d0f44bf7ac4335e313391171
# 6c09b30bc6fa4cfba6280a95cd3f6a4b
# d4c989aca51b430daecc6bc70b0b1919
# d5b37842aaa949ffb4e0b67b60c9fd7b
# ab9f810c89da4afa93dc4c6bc31fb134
# aee8b882c5cf4517932ae3e7c3791837
# 330a012ea3674c8fab52c05d41ec1a5c
# f6fa02717f664f0e8a0dec82b4a6c629
# d6e39eadd75f45f68d189fc5f6b82fd7
# 5373b17310054b798d8bf69676877183
# 072598f023f84056bfc81f3eaa095851
# 06e413d9f824408093e80b946fcc6f70
# c0830bd57b834dd69f8e4fd962d9d40e
# 53082a27337649c2838bb63f9dfc6947
# 81667b5968d948ec97f9a3f243ff871c
# dfeef6592b484c53b6324f36ff6c2924
# 1e2c9f9ac5914ebcba1da7d729baadf4
# e8ece4ce819e48beb3a83e5e968b6dc6
# 78ef5dc857f349a7816dc6aaa6b1b1c5
# 01cc6fa978c24dc1b32256af440e25a6
# 6d5e166b31b245bba9fb05139b006330
# 259f5284bf18473aad1057b021877d7f
# d1e6743e1e94436fa1807effc348febf
# 3a2eab40c9024c39be82b6e74f1260ca
# d1882c0d820d49618b026f5b82e36fd1
# 7443ad8215a1490c966db057630a140d
# ed85d06c769b4d4bbf3e2001cf10d16f
# 5e2021ddaead40dbba366b9ea6a70c56
# dee97189a5a34eac8039766cd355f254
# b9113914b7a5456caaf9e9eb1ade6f34
# 9c74d838b8ba4469b3aaed5fd0135d8c
# c5380c3940844be98a7d529a68557630
# 570d7af159c44a0f929099efc15edf9d
# b090ea1f46474f6883a16318a4762ff1
# 101e9fbd1d764e63a902b521d37f7805
# 135abd612d294e64bfdbed8c8f5755fb
# 49e4f0ae5a0646d8b9cd6f8ce26e3402
# 8d94370a79844964a754b80b296710ef
# a9b7a910807147cd9ee36872a85aab4d
# d113feeb56b04861b48d207e65904878
# 91b8ba9996f9414992f4f9ce851d77a6
# f15d66c37c2046fd85f8e9c5e98f1a61
# fae1205e69684dcdb5197b4cfd85a68c
# fef90f5dd4e34f05a82606a83baca102
# 75b7498230274367ade0d8d50ea273cc
# e702f121fb0c450c9da5e37240c5d670
# a21b28ce4eba4e97bd7a1f3e11da4bc6
# 8c9bacb3a5ba4c9c998c65b9d59cbe73
# b8524f690e2d483c86f43bac7c6f6131
# 8fe91fd2f80043549a462d62485721b8
# 078530461d274b52a0892a1fa24b0ab5
# e7d964208d5145f582ec7db6614a845c
# 83f6f41a73b24cc6b6d224286429339d
# 1168dec618f44c68bd8c1fdd6b45d24e
# 8726ab1d8e1843d28cf8f73e3aabd264
# 77924b9f11f04e3bb7bab808e19616d3
# b2f2fd0c948548efa27d03abdf09b54c
# 6d0a1521ebbf4c0595462aa8bdbe0fb1
# 491de882e31d4ba3a441ed68020a2766
# d51a251743c3485c99279c33707ffe28
# 07a4134c93cc483997b60b9267f1c91f
# 1b0c231d816e4f788d795de214d2fb4c
# 6851c903664c4d76bd061cc89eb24520
# 930ff73837c448289c05450dd35ba44c
# 10591afd96084bf6950a82f630e33088
# 2135a4fc376d411897a2db3dbcfb7a5a
# 161c529f5d6446ef93a9f4874aae2c6a
# c053917493a44c93b00a1c63053aa410
# fc089c711a084207b515bb75425d7bcd
# 1859a514f53143778bb483aebf91f7ae
# 13c88a3e651646d2a05324ea251228fa
# 0d59b9c2f38d44e9ae40531bfad8dff1
# 6e7f9b961b7c4fcea308a99aad52cd90
# d3332e666c144cea855f175c561834db
# 19477b9400e5404e9d018fd838777048
# 9adc0082d5f3420a89aa13835f7d38ee
# 7d197dba0e8d4dc4b9af4ffa254aa46a
# 7cf3d6186aa444b2a26cbe1cce1a0d17
# 40e7010d99d24e4ebc9b280a2a0297e5
# a16819ea50ed48b4af6fbc2efe879427
# 3876dad302b44fd7b3c7d7f7be3e2744
# d1282789123a4800b0a16d276d9fb870
# 22519847cacc4b5aad507a2626683460
# 701357f1569e4b81ab5843e5455d1dfd
msgid "X"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/model-api.txt:214
# 3d3537a752ca4ee796d255a674f490c6
# 62637016fde442b28870cbf01e394fbe
msgid ":lookup:`bboverlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
# 2ac0331085aa46c089344993274553d8
msgid ":lookup:`contained`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:235
# 67231f6ffde8487ea1385f5ef287ca39
msgid ":lookup:`contains <gis-contains>`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:236
# 2fcfa413b7794ec885c717f42b63d46c
msgid ":lookup:`contains_properly`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/model-api.txt:215
# f215deb6d9414331b63a1ac677cd0d0c
# 16cf74756d96468abc23c395e3f34f36
msgid ":lookup:`coveredby`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/model-api.txt:216
# 77d34442fd4c407a9283ff445089930a
# 5b17f66e13f943f89b0ac65045983d7b
msgid ":lookup:`covers`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:239
# f3b8a5cf800348de83ed431d3d813f30
msgid ":lookup:`crosses`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:240
# 4758400083564f649330d6daa46b640b
msgid ":lookup:`disjoint`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:246
# 2f8c27b2b415480b81aec19219fa9f16
msgid ":lookup:`equals`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:247
# 2ce0a720896d452caa01c970184016c1
msgid ":lookup:`exact`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/model-api.txt:217
# e1473eb4e43345e0a330a63fbf361897
# 54289c8d04fe4f6f9bf3d3635ab70574
msgid ":lookup:`intersects`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:249
# 5e301106fa1445e9a269ea8ee7def7f7
msgid ":lookup:`overlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:250
# bfbcaf860c1140948f20d1edf12614e8
msgid ":lookup:`relate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:251
# 76ad803a18a849d498d4676b262d6f0b
msgid ":lookup:`same_as`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:252
# bafd22e20e9947f68fbe330e5bdce5f2
msgid ":lookup:`touches`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:253
# a8d5620499824e01b90c295d5dd91fdf
msgid ":lookup:`within`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:254
# 63b101df0e6e4f29acc7beb93e88dd87
msgid ":lookup:`left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:255
# d6f80e4172d745309d26ea3bb6250d98
msgid ":lookup:`right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:256
# d942d902c4da4a0d875523e4dbf00975
msgid ":lookup:`overlaps_left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:257
# 718847f14fa44cd4b8681e19920ab850
msgid ":lookup:`overlaps_right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:258
# 120db5b188a64571a1472c4070878b48
msgid ":lookup:`overlaps_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:259
# 6ef2b7dcb7354f44aec074b520be89b3
msgid ":lookup:`overlaps_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:260
# 36b48e11a9bf4d53bb8d03598aff64e7
msgid ":lookup:`strictly_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:261
# 7bde3ef6ec8d46eb81bf3de543f6119e
msgid ":lookup:`strictly_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:267
#: ../../ref/contrib/gis/geoquerysets.txt:638
#: ../../ref/contrib/gis/tutorial.txt:702
# ce4cc835a36b4fd6bfe9f0caaba982b4
# efa728b3cf3f4c1c8163ab9cd46b07a4
# b8888d046c2d4cc9b76d98730eed46b6
msgid "``GeoQuerySet`` Methods"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:268
# 6995448f82da49ab9273fcc4101b4cbd
msgid "The following table provides a summary of what :class:`GeoQuerySet` methods are available on each spatial backend.  Please note that MySQL does not support any of these methods, and is thus excluded from the table."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:273
# 3fb408c46a9f41fb8a3729bc67ff2686
msgid "Method"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:275
# e75f5a83e04c40edb06d3357b51761cb
msgid ":meth:`GeoQuerySet.area`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:276
# 9763efc1ae1d4fa8baa3b50d47a62fb5
msgid ":meth:`GeoQuerySet.centroid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:277
# 045b33707d994d8f8229e60863d844fd
msgid ":meth:`GeoQuerySet.collect`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:278
# da0d480253fb4b168a06386dda3f652e
msgid ":meth:`GeoQuerySet.difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:279
# 637dcdf90057436abbcf46b614ba38d7
msgid ":meth:`GeoQuerySet.distance`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:280
# 98a244ad71b1414c8ddfdd5c4f21b982
msgid ":meth:`GeoQuerySet.envelope`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:281
# 82e10fc931ed4f09b7c29e52b7421fca
msgid ":meth:`GeoQuerySet.extent`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:282
# 3ae9caa592b841398a98d28de005d3f4
msgid ":meth:`GeoQuerySet.extent3d`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:283
# cabb581a3c1047729307279f33248be9
msgid ":meth:`GeoQuerySet.force_rhr`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:284
# cf9b4fe1c71b466b9ea9ae9afb160978
msgid ":meth:`GeoQuerySet.geohash`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:285
# 40a1d9d234c44980b9617aa4bfbebaa6
msgid ":meth:`GeoQuerySet.geojson`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:286
# 1c0f8e96780146b281a9e9cb2762dea0
msgid ":meth:`GeoQuerySet.gml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:287
# 7115804c5eb64853832ef11aeac82c17
msgid ":meth:`GeoQuerySet.intersection`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:288
# 75078b11efa54244aff334785655faf7
msgid ":meth:`GeoQuerySet.kml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:289
# 8d80868ee4d64deb9b28e626bb41b475
msgid ":meth:`GeoQuerySet.length`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:290
# d9f7fab3019041b48f9e5526987a43ac
msgid ":meth:`GeoQuerySet.make_line`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:291
# 71ad468c8ed944beb8b85c4e17a15374
msgid ":meth:`GeoQuerySet.mem_size`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:292
# 201358f7d49a4a5bbe962c581ba3aa4f
msgid ":meth:`GeoQuerySet.num_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:293
# 5df9b13edcf0491fb202b5d57f4c59f7
msgid ":meth:`GeoQuerySet.num_points`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:294
# c96f9282a60e403783daebc4c92efa4f
msgid ":meth:`GeoQuerySet.perimeter`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:295
# 35dc2fc677b74036a70742793c5b65c8
msgid ":meth:`GeoQuerySet.point_on_surface`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:296
# 1b4570e7950d4bab9e04c0812cc44b14
msgid ":meth:`GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:297
# ddc9864bbb2d4011831e6483ec59078a
msgid ":meth:`GeoQuerySet.scale`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:298
# 600f8232cfbe41d387e96ae8f384d614
msgid ":meth:`GeoQuerySet.snap_to_grid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:299
# 88ecd2186cad4724a0c57926c1ea6d60
msgid ":meth:`GeoQuerySet.svg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:300
# 90aae71f7bf649f2bff4e64eac857855
msgid ":meth:`GeoQuerySet.sym_difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:301
# 855da588cfbe4188a081ae479930f1d7
msgid ":meth:`GeoQuerySet.transform`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:302
# 2811bab1560349408c2c17137714f187
msgid ":meth:`GeoQuerySet.translate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:303
# 14cacac5aa8a48f8b119a01417ff2fb1
msgid ":meth:`GeoQuerySet.union`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:304
# 099c917a391547909f82e00f06df1790
msgid ":meth:`GeoQuerySet.unionagg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/geoip.txt:229
#: ../../ref/contrib/gis/geoquerysets.txt:1233
#: ../../ref/contrib/gis/geos.txt:949
#: ../../ref/contrib/gis/install.txt:1316
#: ../../ref/contrib/gis/install/geolibs.txt:271
#: ../../ref/contrib/gis/install/index.txt:531
#: ../../ref/contrib/gis/measure.txt:177
#: ../../ref/contrib/gis/model-api.txt:254
#: ../../ref/contrib/gis/sitemaps.txt:25
#: ../../ref/contrib/gis/tutorial.txt:780
# c97b77b8904444f094107f0bba9ff288
# 4f6660181e6b472b894347296ed4f8bf
# 5034f0052c4a49ca996b2c194f211941
# 79fa637fc66841b9a3e05f9743980984
# ecc337410731448abb21fe29664f8e3d
# eb34aebc2df34d7ab1bba89f247bfb6e
# fc85472a0be54190b8a4348dc8166557
# a0d61ac69ec0406d989b897603d6715d
# fd79b4d0feda4c1fbf46820ea3010be9
# 594b6c59256c44fcba6ffd050ab104dc
# 31cd54594da7488bac379bf89045d597
msgid "Footnotes"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:308
# e9e99076eb5142b99397b8f8642458f1
msgid "*See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document 99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual Representation of Geometry)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:309
# 11e62ea4975047adba7d044a83586688
msgid "*See* `PostGIS EWKB, EWKT and Canonical Forms <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#EWKB_EWKT>`_, PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:310
# a826198eb46c43eb8f258278a6b9198d
msgid "*See* Howard Butler, Martin Daly, Allan Doyle, Tim Schaub, & Christopher Schmidt, `The GeoJSON Format Specification <http://geojson.org/geojson-spec.html>`_, Revision 1.0 (June 16, 2008)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:311
# e4cef955244842939a745ecc200c9d8b
msgid "*See* `PostGIS 1.4 documentation <http://postgis.refractions.net/documentation/manual-1.4/ST_Distance_Sphere.html>`_ on ``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:312
# 26e516a05e5d4c2eafb40a5f016c723e
msgid "*See* `PostGIS 1.5 documentation <http://postgis.refractions.net/documentation/manual-1.5/ST_Distance_Sphere.html>`_ on ``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:313
# bb5ea6f1dee14f7989a37ea1739b2f9c
msgid "*See* `Creating Spatial Indexes <http://dev.mysql.com/doc/refman/5.1/en/creating-spatial-indexes.html>`_ in the MySQL 5.1 Reference Manual:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:316
# 9c3673f2565840fc906dc995aa45c7ed
msgid "For MyISAM tables, ``SPATIAL INDEX`` creates an R-tree index. For storage engines that support nonspatial indexing of spatial columns, the engine creates a B-tree index. A B-tree index on spatial values will be useful for exact-value lookups, but not for range scans."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:321
# ba84b55b113f4102bdea2067c0bcefb4
msgid "Refer :ref:`mysql-spatial-limitations` section for more details."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:3
# 94a0054f9d094825b1a5d0fce86ff628
msgid "Deploying GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:5
# 21731116565c4fd69026ed834224e969
msgid "Basically, the deployment of a GeoDjango application is not different from the deployment of a normal Django application. Please consult Django's :doc:`deployment documentation </howto/deployment/index>`."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:11
# db4719b6250b4fe8a535baa1f3b20019
msgid "GeoDjango uses the GDAL geospatial library which is not thread safe at this time.  Thus, it is *highly* recommended to not use threading when deploying -- in other words, use an appropriate configuration of Apache or the prefork method when using FastCGI through another Web server."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:17
# 10f1428ba48c427ea1d57e589870c273
msgid "For example, when configuring your application with ``mod_wsgi``, set the ``WSGIDaemonProcess`` attribute ``threads`` to ``1``, unless Apache may crash when running your GeoDjango application.  Increase the number of ``processes`` instead."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:3
# 7bfd18e6133840678d30ceba88e9aaea
msgid "Geographic Feeds"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:8
# 180b3611f6f14db88f414c6ee80ae601
msgid "GeoDjango has its own :class:`Feed` subclass that may embed location information in RSS/Atom feeds formatted according to either the `Simple GeoRSS`__ or `W3C Geo`_ standards.  Because GeoDjango's syndication API is a superset of Django's, please consult :doc:`Django's syndication documentation </ref/contrib/syndication>` for details on general usage."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:19
#: ../../ref/contrib/gis/geoip.txt:38
#: ../../ref/contrib/gis/layermapping.txt:34
#: ../../ref/contrib/gis/measure.txt:17
#: ../../ref/contrib/gis/sitemaps.txt:11
#: ../../ref/contrib/gis/testing.txt:150
#: ../../ref/contrib/gis/testing.txt:185
#: ../../ref/contrib/sitemaps.txt:255
# a75ceecd149148568a362741b80ebc32
# 16b6b0ac5785473992e79e104f4e2bc2
# e58310a1b2d642c8ad941d96f6887b59
# 7f71db5e2a35492e84dbfc314170cf1f
# dc5f5ce5e46946d7abe55981cdb0c7ff
# d03e5d41f22141b096ef5e37c97c834e
# a4829e648a744f039890ca96e308dbe8
# a07d6a1189264761aa1b0d9c69c60330
msgid "Example"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:22
#: ../../ref/index.txt:3
# a3bcf702aa9c451bad9829fa5647c7c8
# 53120ddff3234ea59ddf7844d310c079
msgid "API Reference"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:25
# 55e1e1da9a3d4d8184a145cc26e63d5a
msgid "``Feed`` Subclass"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:29
# 01f3def1fc99429484e0c889c6d64936
msgid "In addition to methods provided by the :class:`django.contrib.syndication.feeds.Feed` base class, GeoDjango's ``Feed`` class provides the following overrides.  Note that these overrides may be done in multiple ways::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:58
# c61e732083c84d958300e673e78cc0ed
msgid "Takes the object returned by ``get_object()`` and returns the *feed's* geometry.  Typically this is a ``GEOSGeometry`` instance, or can be a tuple to represent a point or a box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:70
# 4e83a13cc65d45f7a8697621db9ff44e
msgid "Set this to return the geometry for each *item* in the feed.  This can be a ``GEOSGeometry`` instance, or a tuple that represents a point coordinate or bounding box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:81
# def4fc5627a44e79b6c229bc58d880df
msgid "``SyndicationFeed`` Subclasses"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:83
# c726f12a861d4cd1a58a3b835fe4c473
msgid "The following :class:`django.utils.feedgenerator.SyndicationFeed` subclasses are available:"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:94
# 462fb754486a49eba38e0c5e1b0a290b
msgid "`W3C Geo`_ formatted feeds only support :class:`~django.contrib.gis.db.models.PointField` geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:5
# cbfd1efda51147faa4449781c31310c2
msgid "GDAL API"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:10
# d36e68aa1c5e4f2190db8d02bc85057b
msgid "`GDAL`__ stands for **G**\\ eospatial **D**\\ ata **A**\\ bstraction **L**\\ ibrary, and is a veritable \"swiss army knife\" of GIS data functionality.  A subset of GDAL is the `OGR`__ Simple Features Library, which specializes in reading and writing vector geographic data in a variety of standard formats."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:16
# 25805ba5e5d54fc9bbbc4043b2694b4b
msgid "GeoDjango provides a high-level Python interface for some of the capabilities of OGR, including the reading and coordinate transformation of vector spatial data."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:22
# ec1fe1bd43ea47aeac5ca9085a4e7318
msgid "Although the module is named ``gdal``, GeoDjango only supports some of the capabilities of OGR.  Thus, none of GDAL's features with respect to raster (image) data are supported at this time."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:33
# c7ebfd1d939246a9ba02b08fe1ba0afe
msgid "Sample Data"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:35
# 660befd516c84fc98b3520e7385f9989
msgid "The GDAL/OGR tools described here are designed to help you read in your geospatial data, in order for most of them to be useful you have to have some data to work with.  If you're starting out and don't yet have any data of your own to use, GeoDjango comes with a number of simple data sets that you can use for testing.  This snippet will determine where these sample files are installed on your computer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:48
# 1378c31a6fd44f21a9453aa4af3a3081
msgid "Vector Data Source Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:51
# 89fc9e40c0ce45929beabd21706b8a9e
msgid "``DataSource``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:53
# b6786f9848a94bbca80a3bc624498a72
msgid ":class:`DataSource` is a wrapper for the OGR data source object that supports reading data from a variety of OGR-supported geospatial file formats and data sources using a simple, consistent interface.  Each data source is represented by a :class:`DataSource` object which contains one or more layers of data.  Each layer, represented by a :class:`Layer` object, contains some number of geographic features (:class:`Feature`), information about the type of features contained in that layer (e.g. points, polygons, etc.), as well as the names and types of any additional fields (:class:`Field`) of data that may be associated with each feature in that layer."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:66
# 70ebe3eb5dcd4ede80eac1233485d0bc
msgid "The constructor for ``DataSource`` just a single parameter: the path of the file you want to read.  However, OGR also supports a variety of more complex data sources, including databases, that may be accessed by passing a special name string instead of a path.  For more information, see the `OGR Vector Formats`__ documentation.  The :attr:`name` property of a ``DataSource`` instance gives the OGR name of the underlying data source that it is using."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:75
# 4a39479e61784b3fbdcbd198c318b74a
msgid "Once you've created your ``DataSource``, you can find out how many layers of data it contains by accessing the :attr:`layer_count` property, or (equivalently) by using the ``len()`` function.  For information on accessing the layers of data themselves, see the next section::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:89
# 105e626542b94d838dfc6e223e5e4176
msgid "Returns the number of layers in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:93
# 43ed681e79814c7c83ffe5877b99feb6
msgid "Returns the name of the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:98
# 20ad85a033134a388596ce000b698da2
msgid "``Layer``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:102
# d28b924a05de43f7a86f13d825d0f728
msgid "``Layer`` is a wrapper for a layer of data in a ``DataSource`` object. You never create a ``Layer`` object directly.  Instead, you retrieve them from a :class:`DataSource` object, which is essentially a standard Python container of ``Layer`` objects.  For example, you can access a specific layer by its index (e.g. ``ds[0]`` to access the first layer), or you can iterate over all the layers in the container in a ``for`` loop.  The ``Layer`` itself acts as a container for geometric features."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:111
# aa1eb40b97f044a6a7d18e1a40327cde
msgid "Typically, all the features in a given layer have the same geometry type. The :attr:`geom_type` property of a layer is an :class:`OGRGeomType` that identifies the feature type.  We can use it to print out some basic information about each layer in a :class:`DataSource`::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:121
# ed574657319b476981e5afce5c783ddb
msgid "The example output is from the cities data source, loaded above, which evidently contains one layer, called ``\"cities\"``, which contains three point features.  For simplicity, the examples below assume that you've stored that layer in the variable ``layer``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:130
# 68883005a45f4705a3c611dbac071a46
msgid "Returns the name of this layer in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:137
# 99bdf12b5c714559b6393107e1d7a160
msgid "Returns the number of features in the layer.  Same as ``len(layer)``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:144
# 59a75481ab304446aec3f73020ccf6be
msgid "Returns the geometry type of the layer, as an :class:`OGRGeomType` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:152
# 02ecd57e5c8f412eb1b12b5a91e97838
msgid "Returns the number of fields in the layer, i.e the number of fields of data associated with each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:160
# aacb8747420f42a9a2745e0dc70fd349
msgid "Returns a list of the names of each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:167
# d0dd5802ab034fc7ad7cf5aec56f8da8
msgid "Returns a list of the data types of each of the fields in this layer. These are subclasses of ``Field``, discussed below::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:175
# 469f5bc159d24a94a57ec41e07fa9529
msgid "Returns a list of the maximum field widths for each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:183
# 6d014db4ff9a422f88bc6f5928c3da72
msgid "Returns a list of the numeric precisions for each of the fields in this layer.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:192
# 1d7d932256aa470595a7867c2576bd45
msgid "Returns the spatial extent of this layer, as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:200
# 4d37fa0b336f4e75a44bbb3e25f7f701
msgid "Property that returns the :class:`SpatialReference` associated with this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:210
# b327cdbab0b245ee9b5e3563fd473b9f
msgid "If the :class:`Layer` has no spatial reference information associated with it, ``None`` is returned."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:215
# 262ab0fa115f488484247477101fc4cb
msgid "Property that may be used to retrieve or set a spatial filter for this layer.  A spatial filter can only be set with an :class:`OGRGeometry` instance, a 4-tuple extent, or ``None``.  When set with something other than ``None``, only features that intersect the filter will be returned when iterating over the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:239
# 2cdcbd923776435a90f469ff92859fa1
msgid "A method that returns a list of the values of a given field for each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:247
# ba422b1ea8bb462b99b39f37a6b9a9c6
msgid "A method that returns a list containing the geometry of each feature in the layer.  If the optional argument ``geos`` is set to ``True`` then the geometries are converted to :class:`~django.contrib.gis.geos.GEOSGeometry` objects. Otherwise, they are returned as :class:`OGRGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:257
# 72c543f2939a46abadb595a3bdc94828
msgid "Returns a boolean indicating whether this layer supports the given capability (a string).  Examples of valid capability strings include: ``'RandomRead'``, ``'SequentialWrite'``, ``'RandomWrite'``, ``'FastSpatialFilter'``, ``'FastFeatureCount'``, ``'FastGetExtent'``, ``'CreateField'``, ``'Transactions'``, ``'DeleteFeature'``, and ``'FastSetNextByIndex'``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:265
# fa743ba842704c5499db30ee50fe650e
msgid "``Feature``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:270
# bb70da0dbf9c4245bf06a56e99e82347
msgid "``Feature`` wraps an OGR feature.  You never create a ``Feature`` object directly.  Instead, you retrieve them from a :class:`Layer` object. Each feature consists of a geometry and a set of fields containing additional properties.  The geometry of a field is accessible via its ``geom`` property, which returns an :class:`OGRGeometry` object.  A ``Feature`` behaves like a standard Python container for its fields, which it returns as :class:`Field` objects: you can access a field directly by its index or name, or you can iterate over a feature's fields, e.g. in a ``for`` loop."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:281
# 66eaf22a758447188a4ed344f0aa5538
msgid "Returns the geometry for this feature, as an ``OGRGeometry`` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:288
# 3f6376fec8c4475b87691022af64e6f7
msgid "A method that returns the value of the given field (specified by name) for this feature, **not** a ``Field`` wrapper object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:296
# 93a03a6db39c46af883ce89bb6d38155
msgid "Returns the type of geometry for this feature, as an :class:`OGRGeomType` object.  This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.geom_type` property of the :class:`Layer`` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:303
# d9935f3d5d81492fa1d92a2e00e2e3cd
msgid "Returns the number of fields of data associated with the feature. This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.num_fields` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:310
# 230c0660e7d44fb88cd6bd4fa953e6f0
msgid "Returns a list of the names of the fields of data associated with the feature.  This will be the same for all features in a given layer, and is equivalent to the :attr:`Layer.fields` property of the :class:`Layer` object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:317
# 058955e3c5ef448cae586153905c80c7
msgid "Returns the feature identifier within the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:324
# 490787abe16748ad9cf3ed746f854fb2
msgid "Returns the name of the :class:`Layer` that the feature came from. This will be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:332
# 9b48185c5496455dabc91b7df6713924
msgid "A method that returns the index of the given field name.  This will be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:339
# 003151bc656244d2aa31e37c948ca758
msgid "``Field``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:345
# a49f0d32e149498f991ad33e73eb25c4
msgid "Returns the name of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:352
# 8adcbb1c3afb4dca9754862516c44a28
msgid "Returns the OGR type of this field, as an integer.  The ``FIELD_CLASSES`` dictionary maps these values onto subclasses of ``Field``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:361
# 349ed2e6f7514659be5119aa8ad41b76
msgid "Returns a string with the name of the data type of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:368
# b5b595b0a4674556b96d90dbce1de8b4
msgid "Returns the value of this field.  The ``Field`` class itself returns the value as a string, but each subclass returns the value in the most appropriate form::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:377
# 61f13d678eac4f5a87e248eae8b77066
msgid "Returns the width of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:384
# f285bd835b0d4aa5a0c5824475dd79fb
msgid "Returns the numeric precision of this field.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:392
# ff87af7f2b4d4ac0b3755c4352979e03
msgid "Returns the value of the field as a double (float)::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:399
# 4a16492b26ff4085a2605a204aa07d14
msgid "Returns the value of the field as an integer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:406
# 5e7226f8b68a4873a3707e59c2bb3641
msgid "Returns the value of the field as a string::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:413
# a917a4927352432f84a9ecd4f7939fd9
msgid "Returns the value of the field as a tuple of date and time components::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:419
# 0dbc1b534130409db430fa1a782cf617
msgid "``Driver``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:423
# 07c60c2e7f444bbd8aef424f4f473881
msgid "The ``Driver`` class is used internally to wrap an OGR :class:`DataSource` driver."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:427
# bf7b3b1098a040ec8477d75f09ae55f7
msgid "Returns the number of OGR vector drivers currently registered."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:431
# 66016bdb4abb41ae8ecf6158d0e8720b
msgid "OGR Geometries"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:434
# 1c7093d86dca4b51ab3188b8329e34e7
msgid "``OGRGeometry``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:436
# bee7d31378d249fd920659d45fc62041
msgid ":class:`OGRGeometry` objects share similar functionality with :class:`~django.contrib.gis.geos.GEOSGeometry` objects, and are thin wrappers around OGR's internal geometry representation.  Thus, they allow for more efficient access to data when using :class:`DataSource`. Unlike its GEOS counterpart, :class:`OGRGeometry` supports spatial reference systems and coordinate transformation::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:448
# 87cd3ab1dc344270af3d5942b0eadf62
msgid "This object is a wrapper for the `OGR Geometry`__ class. These objects are instantiated directly from the given ``geom_input`` parameter, which may be a string containing WKT, HEX, GeoJSON, a ``buffer`` containing WKB data, or an :class:`OGRGeomType` object. These objects are also returned from the :class:`Feature.geom` attribute, when reading vector data from :class:`Layer` (which is in turn a part of a :class:`DataSource`)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:460
# fecbebcbf4614e75bac431b98a2537f4
msgid "Constructs a :class:`Polygon` from the given bounding-box (a 4-tuple)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:464
# d88e93b75df640918db413517bac5681
msgid "Returns the number of points in a :class:`LineString`, the number of rings in a :class:`Polygon`, or the number of geometries in a :class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:470
# 81394e8d20364f449b7a25248e368b0c
msgid "Iterates over the points in a :class:`LineString`, the rings in a :class:`Polygon`, or the geometries in a :class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:476
# 6dc24a6f00614ac0bc228ca8bd2c68ff
msgid "Returns the point at the specified index for a :class:`LineString`, the interior ring at the specified index for a :class:`Polygon`, or the geometry at the specified index in a :class:`GeometryCollection`.  Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:483
# dc9499ea981d461ebd161fe303790ea0
msgid "Returns the number of coordinated dimensions of the geometry, i.e. 0 for points, 1 for lines, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:491
# ea3c8ed7e1f14f84ba170ca375e1c8d3
msgid "Returns or sets the coordinate dimension of this geometry.  For example, the value would be 2 for two-dimensional geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:496
# e67ecac5fdf74e4eb49496d95a5fbf98
msgid "Returns the number of elements in this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:503
# f38a95c07c3e4269a23408920cf6d11b
msgid "Returns the number of points used to describe this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:510
#: ../../ref/contrib/gis/gdal.txt:514
# 19ce8fd9e8d741ffbc0e0703c6ed722c
# 876b87a8e46f4e62bed170f454e6bcd9
msgid "Alias for :attr:`point_count`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:518
# 76a1de2007044270b6b34032cfda1b4e
msgid "Returns the type of this geometry, as an :class:`OGRGeomType` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:522
# 64dc58ae0c9144ffbc49e8388d115472
msgid "Returns the name of the type of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:529
# fd225b70df0b40c3a0b56fbd66659f9a
msgid "Returns the area of this geometry, or 0 for geometries that do not contain an area::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:537
# 871704965b984ac884e50cc048ea9d5e
msgid "Returns the envelope of this geometry, as an :class:`Envelope` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:541
# b202c24bd68c443f93aa0460ff704b13
msgid "Returns the envelope of this geometry as a 4-tuple, instead of as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:549
# c8b1b0f184c84fc18af8eed23fa9d884
msgid "This property controls the spatial reference for this geometry, or ``None`` if no spatial reference system has been assigned to it. If assigned, accessing this property returns a :class:`SpatialReference` object.  It may be set with another :class:`SpatialReference` object, or any input that :class:`SpatialReference` accepts. Example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:560
# cac25ec73b9742c2ab274c91271bec79
msgid "Returns or sets the spatial reference identifier corresponding to :class:`SpatialReference` of this geometry.  Returns ``None`` if there is no spatial reference information associated with this geometry, or if an SRID cannot be determined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:567
# 1bcb9049ed8f477e9361e3d3bd1a9972
msgid "Returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object corresponding to this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:572
# a6a5191d126f4d3fac3f692c923e84f9
msgid "Returns a string representation of this geometry in GML format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:579
# a711deb900b84030a54ba8872fe31b41
msgid "Returns a string representation of this geometry in HEX WKB format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:586
# 1ae3b9b3761c41019c17308d7043191b
msgid "Returns a string representation of this geometry in JSON format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:594
# 57f1cdfbc2cb49829d7461ee0bd294f5
msgid "Returns a string representation of this geometry in KML format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:598
# e8c73c0e2e5447229695be0db4897438
msgid "Returns the size of the WKB buffer needed to hold a WKB representation of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:606
# a7ce4ece3377464087f378c17276d5c9
msgid "Returns a ``buffer`` containing a WKB representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:610
# f75af888d1844c5f8def8ef1e2915308
msgid "Returns a string representation of this geometry in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:614
# f1f9b216ec0f49fca1d6624961f001cd
msgid "Returns the EWKT representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:618
# 0b9ad9952e3048a297759dbb62ed163c
msgid "Returns a new :class:`OGRGeometry` clone of this geometry object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:622
# 5474ccf6833043a39e9aacac522227bb
msgid "If there are any rings within this geometry that have not been closed, this routine will do so by adding the starting point to the end::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:632
# a12bf9b613974483bbba42eb7104f38a
msgid "Transforms this geometry to a different spatial reference system.  May take a :class:`CoordTransform` object, a :class:`SpatialReference` object, or any other input accepted by :class:`SpatialReference` (including spatial reference WKT and PROJ.4 strings, or an integer SRID). By default nothing is returned and the geometry is transformed in-place. However, if the `clone` keyword is set to ``True`` then a transformed clone of this geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:642
# 061d04d0631c4bf382a743adc149a118
msgid "Returns ``True`` if this geometry intersects the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:647
# af2056c0d6624703bd0d9336cc98001b
msgid "Returns ``True`` if this geometry is equivalent to the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:652
# b7e795a46c13454eb125905a8cc31dc6
msgid "Returns ``True`` if this geometry is spatially disjoint to (i.e. does not intersect) the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:657
# 69d6aed75aec4fcf9e958b4d09a49708
msgid "Returns ``True`` if this geometry touches the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:662
# 0bf27698e8c441c883eb2611827004a3
msgid "Returns ``True`` if this geometry crosses the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:667
# 5c8053bec9614e489023af0eb8009c83
msgid "Returns ``True`` if this geometry is contained within the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:672
# 3c1c65ef33794b2793df21d4c2201b6f
msgid "Returns ``True`` if this geometry contains the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:677
# 95589bcd34a94d6d9529a5bd3d577712
msgid "Returns ``True`` if this geometry overlaps the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:682
# 2d475fe54b234cdc9641f733288f3a5d
msgid "The boundary of this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:686
# 009b1e81a2fb4d2db56200c3d5e690df
msgid "The smallest convex polygon that contains this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:691
# c824b073522a4778bcfed987ca6df4c1
msgid "Returns the region consisting of the difference of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:696
# a8b435ac535a4ac1b551dc15709d6e91
msgid "Returns the region consisting of the intersection of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:701
# e368ad1715634aaeb2b38a7d05734af8
msgid "Returns the region consisting of the symmetric difference of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:706
# 1bbb1459c8e64b60a7051c908c5e2770
msgid "Returns the region consisting of the union of this geometry and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:711
# 02c89558ebc8491981026d2b34b3a49c
msgid "Returns the coordinates of a point geometry as a tuple, the coordinates of a line geometry as a tuple of tuples, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:721
# 89807b074ad54c3ab694827d3e6e77c0
msgid "An alias for :attr:`tuple`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:727
# 6926ef6199214c6ab9032ac33e0950b2
msgid "Returns the X coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:734
# 44f2310a69724ef68c456354bf3de28d
msgid "Returns the Y coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:741
# dab06133d35048afa31b2bc1f88fb9aa
msgid "Returns the Z coordinate of this point, or ``None`` if the the point does not have a Z coordinate::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:751
# 485f0812626d49a39924af747957533c
msgid "Returns a list of X coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:758
# c1412bf6488643f2b54b981c3d00fac0
msgid "Returns a list of Y coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:765
# d0634e14d7a4455fbe37d8db81314471
msgid "Returns a list of Z coordinates in this line, or ``None`` if the line does not have Z coordinates::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:776
# 8b3b83dc72874161815bffe908048c2d
msgid "Returns the shell or exterior ring of this polygon, as a ``LinearRing`` geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:781
# c1cdf55312ad4efc85cab9a05062052c
msgid "An alias for :attr:`shell`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:785
# 63c4d159f7d443968223828625756473
msgid "Returns a :class:`Point` representing the centroid of this polygon."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:791
# e6e3d6e0313b4f1cb264d52d138eb17d
msgid "Adds a geometry to this geometry collection.  Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:796
# c24f4fa97670421783aaa8383647bb2a
msgid "``OGRGeomType``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:800
# 93d01398a1094059ba5ecc777a595d20
msgid "This class allows for the representation of an OGR geometry type in any of several ways::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:812
# 4ed696cb61034725b611dac631309fa3
msgid "Returns a short-hand string form of the OGR Geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:819
# 28893bb3b5d849718e64008ead639ca9
msgid "Returns the number corresponding to the OGR geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:826
# e73a21bca50843f6aa7ff11f40266d78
msgid "Returns the Django field type (a subclass of GeometryField) to use for storing this OGR type, or ``None`` if there is no appropriate Django type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:834
# a240de3c260d48d1b2e17476f0baaa95
msgid "``Envelope``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:838
# 91df04e4f03943aba8fb8bb96fa92bfc
msgid "Represents an OGR Envelope structure that contains the minimum and maximum X, Y coordinates for a rectangle bounding box. The naming of the variables is compatible with the OGR Envelope C structure."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:845
# ed674cafdfcc45518db67310074a373f
msgid "The value of the minimum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:849
# bbd7a5096aef446e9a29f28ae97a17fb
msgid "The value of the maximum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:853
# 824f3bfe5cc24bf1a0f84ace630c8442
msgid "The value of the minimum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:857
# 4082c7cec2004bb19ed3716f68eaf6b8
msgid "The value of the maximum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:861
# 2a98f5a5310649838931d8cb984507c1
msgid "The upper-right coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:865
# 0d98c664672346b69625b74cdcf54c8d
msgid "The lower-left coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:869
# 8a70bad9a1704fb58851b1c29d17d916
msgid "A tuple representing the envelope."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:873
# 723d8e1f279f47569c633b9ee0dcf192
msgid "A string representing this envelope as a polygon in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:879
# 44cb7b87cb4949d09cdd246153cdede8
msgid "Coordinate System Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:882
# 0836724742544ced83fd587ae1d68585
msgid "``SpatialReference``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:886
# 9f80d3e5af1f4608b2d45303f8d2fccd
msgid "Spatial reference objects are initialized on the given ``srs_input``, which may be one of the following:"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:889
# a617d85f4c79443e9d99c56285f47ab3
msgid "OGC Well Known Text (WKT) (a string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:890
# 6cdda197e2fb4490a3270b26287614a1
msgid "EPSG code (integer or string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:891
# f3c633969de74f14a1927d69c77a6425
msgid "PROJ.4 string"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:892
# 49f696178d994df1835f0fcf554a4f7f
msgid "A shorthand string for well-known standards (``'WGS84'``, ``'WGS72'``, ``'NAD27'``, ``'NAD83'``)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:914
# aa8a30decf8a45fb9033bb10fc59b536
msgid "Returns the value of the given string attribute node, ``None`` if the node doesn't exist.  Can also take a tuple as a parameter, (target, child), where child is the index of the attribute in the WKT.  For example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:937
# 76b766300f514164b063caffc6f06779
msgid "The attribute value for the given target node (e.g. ``'PROJCS'``). The index keyword specifies an index of the child node to return."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:942
# 3b542e71ac2e45fcac2253e4afa4b90b
msgid "Returns the authority name for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:946
# 1fa5301e0f1b4c01bf46cc3d67cc27ac
msgid "Returns the authority code for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:950
# 55372355481d4b16b7f5c77acd1e2de3
msgid "Returns a clone of this spatial reference object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:954
# b41a7a8e71174e6088df08b877fa56a0
msgid "This method inspects the WKT of this SpatialReference, and will add EPSG authority nodes where an EPSG identifier is applicable."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:959
# 1a87f25cae4a4366ade698ee43186c6a
msgid "Morphs this SpatialReference from ESRI's format to EPSG"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:963
# 32c52b42e72647a087d992790c502824
msgid "Morphs this SpatialReference to ESRI's format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:967
# 0f530c64c392407585bb3ab0cf0f1e0c
msgid "Checks to see if the given spatial reference is valid, if not an exception will be raised."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:972
# 57819550bb7f4cb4898690690bf24c03
msgid "Import spatial reference from EPSG code."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:976
# 791f13263a954d0b934a9b9835281310
msgid "Import spatial reference from PROJ.4 string."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:982
# 1ecf6fa908c14303b181f5d50e3da908
msgid "Import spatial reference from WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:986
# 2cb96b9677bd4aca90645411801be6d4
msgid "Import spatial reference from XML."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:990
# 34cf26f48ddd47549201fdd96b02de14
msgid "Returns the name of this Spatial Reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:994
# 82f028e83d814a0f8bfb4eb1f89a8b54
msgid "Returns the SRID of top-level authority, or ``None`` if undefined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:998
# 3eebe6907a854474a80090995d0fd40e
msgid "Returns the name of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1002
# d8cc6ecea10f46b999a2b40e3e1cdb4e
msgid "Returns the value of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1006
# b8f9c73a53a147279ab8adb11669aebf
msgid "Returns the name of the angular units.\""
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1010
# 600db995016f40e0bfae5f568c30f165
msgid "Returns the value of the angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1014
# 320250f7fe9f4ada931e00ccb5852cee
msgid "Returns a 2-tuple of the units value and the units name, and will automatically determines whether to return the linear or angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1020
# 69a501a7231a46eb805dcb2dc7dec380
msgid "Returns a tuple of the ellipsoid parameters for this spatial reference: (semimajor axis, semiminor axis, and inverse flattening)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1025
# 2c0afdff03e14702a60cea619732c4e5
msgid "Returns the semi major axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1029
# 8fd7af79578340f18eb6d587de006550
msgid "Returns the semi minor axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1033
# 1f00612fb8d8413e91ccadbc9e41eca2
msgid "Returns the inverse flattening of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1037
# 5ccd26ddf2944f9598ddc01393e878de
msgid "Returns ``True`` if this spatial reference is geographic (root node is ``GEOGCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1042
# 48383fc9784d409991aeb1c5dc0aae1f
msgid "Returns ``True`` if this spatial reference is local (root node is ``LOCAL_CS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1047
# 0649983ec66044fb82d20bb33997e203
msgid "Returns ``True`` if this spatial reference is a projected coordinate system (root node is ``PROJCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1052
# 331a1bb65b064dc7aa57a076ff2e107c
msgid "Returns the WKT representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1056
# 3bb2d7a92ebc420eb6d49cd7bc1fb293
msgid "Returns the 'pretty' representation of the WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1060
# f496817830744ab786e065dc36a77703
msgid "Returns the PROJ.4 representation for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1064
# 9b29418c2ffa4ece827899d06f83fb21
msgid "Alias for :attr:`SpatialReference.proj`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1068
# a3cfbb9216674aecbb3b3befed2485ea
msgid "Returns the XML representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1072
# e9461ef1d37b4622a5108716fe687091
msgid "``CoordTransform``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1076
# 9ab9076b67ac4c9c853e661971d0f835
msgid "Represents a coordinate system transform.  It is initialized with two :class:`SpatialReference`, representing the source and target coordinate systems, respectively.  These objects should be used when performing the same coordinate transformation repeatedly on different geometries::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1092
# 28c78993a503423eb2edd83b4cdf6659
msgid "GDAL_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1094
# ca6b880518a9434cbbbcfa1751ba5f5c
msgid "A string specifying the location of the GDAL library.  Typically, this setting is only used if the GDAL library is in a non-standard location (e.g., ``/home/john/lib/libgdal.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:5
# bcdfe61981244665be110b57996fc4a4
msgid "Geolocation with GeoIP"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:14
# df217e22d7904cf7a3d1f781f6671f9a
msgid "In Django 1.4, the :class:`GeoIP` object was moved out of :mod:`django.contrib.gis.utils` and into its own module, :mod:`django.contrib.gis.geoip`. A shortcut is still provided in ``utils``, but will be removed in Django 1.6."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:19
# 9bfedfaec4444b6cad54e46fd186fbf7
msgid "The :class:`GeoIP` object is a ctypes wrapper for the `MaxMind GeoIP C API`__. [#]_  This interface is a BSD-licensed alternative to the GPL-licensed `Python GeoIP`__ interface provided by MaxMind."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:23
# 6e3e36c064b2457bae07b1c87334c494
msgid "In order to perform IP-based geolocation, the :class:`GeoIP` object requires the GeoIP C libary and either the GeoIP `Country`__ or `City`__ datasets in binary format (the CSV files will not work!).  These datasets may be `downloaded from MaxMind`__.  Grab the ``GeoLiteCountry/GeoIP.dat.gz`` and ``GeoLiteCity.dat.gz`` files and unzip them in a directory corresponding to what you set :setting:`GEOIP_PATH` with in your settings.  See the example and reference below for more details."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:40
# f7ef59ab842644aaa23f52086855fa2d
msgid "Assuming you have the GeoIP C library installed, here is an example of its usage::"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:66
# 04dd23e597d6470f815ba38fe028b728
msgid "``GeoIP`` Settings"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:71
# c618cc489dab436d873f9f22230c99e5
msgid "GEOIP_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:73
# 191eb89b1a9b4be0a9f42fe5564e7187
msgid "A string specifying the directory where the GeoIP data files are located.  This setting is *required* unless manually specified with ``path`` keyword when initializing the :class:`GeoIP` object."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:80
# a110abc3ba424c56b43fe92b4670d325
msgid "GEOIP_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:82
# f8b2be257f684d179d58986f599c18c2
msgid "A string specifying the location of the GeoIP C library.  Typically, this setting is only used if the GeoIP C library is in a non-standard location (e.g., ``/home/sue/lib/libGeoIP.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:89
# 51fada7512af4e3c8b436b8dce903894
msgid "GEOIP_COUNTRY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:91
# 266396f99e1e4b79a4068d8b2977d956
msgid "The basename to use for the GeoIP country data file. Defaults to ``'GeoIP.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:97
# a1ec5d85edd74e32bbe9cd238efbacc1
msgid "GEOIP_CITY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:99
# 7373ab71318d411782260ab8da3d7fa2
msgid "The basename to use for the GeoIP city data file. Defaults to ``'GeoLiteCity.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:103
# 7c83a678e7744eb2a8b65c401a15278b
msgid "``GeoIP`` API"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:107
# 41b5d776e20744a0bb0873af982f8413
msgid "The ``GeoIP`` object does not require any parameters to use the default settings.  However, at the very least the :setting:`GEOIP_PATH` setting should be set with the path of the location of your GeoIP data sets.  The following intialization keywords may be used to customize any of the defaults."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:114
#: ../../ref/contrib/gis/layermapping.txt:112
# bb324640dc1f43e58ce823ed13a77d12
# 2e3f4f581049479d9d8c3153aa64f0e2
msgid "Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:114
#: ../../ref/contrib/gis/geoquerysets.txt:659
#: ../../ref/contrib/gis/geoquerysets.txt:837
#: ../../ref/contrib/gis/geoquerysets.txt:956
#: ../../ref/contrib/gis/geoquerysets.txt:989
#: ../../ref/contrib/gis/geoquerysets.txt:1022
#: ../../ref/contrib/gis/geoquerysets.txt:1042
#: ../../ref/contrib/gis/geoquerysets.txt:1180
#: ../../ref/contrib/gis/geos.txt:880
#: ../../ref/contrib/gis/geos.txt:903
#: ../../ref/contrib/gis/install.txt:80
#: ../../ref/contrib/gis/install/geolibs.txt:11
#: ../../ref/contrib/gis/layermapping.txt:95
#: ../../ref/contrib/gis/layermapping.txt:157
#: ../../ref/contrib/webdesign.txt:40
#: ../../ref/models/fields.txt:526
#: ../../ref/templates/builtins.txt:312
#: ../../ref/templates/builtins.txt:1205
# 9c08083356e54e10bb6705bbf868f96a
# 4fa0a5959647419d836f6a3b01cf5165
# afb52285b8384aaba654b7eb7dd50593
# e376da3dd9064268a7cfa8ad1807c0de
# 7642e6e007194fae94e03fcc29ebd01d
# b4b5f5a896744de49b8a873ecfbaeb58
# 5c229139cee0470997fd9803e50de678
# 608149fe1b9948718fa5021afd97f739
# c040f843a002416194154554ce1fb4ba
# 8a743c35739f448ca427d419dadf9425
# 2f151675503444f88b1f379983f835d1
# cca43f5e092a4798b8b8a411098a1df8
# 269bdefe38b748d0885a609bbda10cb6
# c420d4c17bf24bd0b9b884ef0c33f5b7
# 7d45f612bfa84547aff60bfbb1671cc8
# fde48fa9266e4b6cbde37e755690788b
# e04793132bd54c139f5a6a38d56213a9
# 116ee8e7f32e48338090c8a410ffca66
msgid "Description"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
# 41eb955fc56d4cca920c43706a4e716c
msgid "``path``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
# 1135474e74c94277860256e0eeee2bd6
msgid "Base directory to where GeoIP data is located or the full path to where the city or country data files (.dat) are located.  Assumes that both the city and country data sets are located in this directory; overrides the :setting:`GEOIP_PATH` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:122
# ba90087cac4e4d13b3d82fc82e70b1c4
msgid "``cache``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:122
# 97d8834d5b0e4d2eb9d4362d85534db2
msgid "The cache settings when opening up the GeoIP datasets, and may be an integer in (0, 1, 2, 4) corresponding to the ``GEOIP_STANDARD``, ``GEOIP_MEMORY_CACHE``, ``GEOIP_CHECK_CACHE``, and ``GEOIP_INDEX_CACHE`` ``GeoIPOptions`` C API settings, respectively. Defaults to 0 (``GEOIP_STANDARD``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
# d6590516fbad4a5baedc7d04f1e7530b
msgid "``country``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
# cef948debf3144a3a79382158767ec32
msgid "The name of the GeoIP country data file.  Defaults to ``GeoIP.dat``.  Setting this keyword overrides the :setting:`GEOIP_COUNTRY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:133
# 6852fd7d299d4aa3927173677d9d88f7
msgid "``city``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:133
# 7a78128083c04ad2aa2062c9f983e2ff
msgid "The name of the GeoIP city data file.  Defaults to ``GeoLiteCity.dat``.  Setting this keyword overrides the :setting:`GEOIP_CITY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:139
# c709c115eb82436db1f4400a4fee4e64
msgid "``GeoIP`` Methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:142
# 2a6ec9a1d4a042b5863d992d7339c27f
msgid "Querying"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:144
# e338bac0b0ec4e10b8a875e4cfe4f8fe
msgid "All the following querying routines may take either a string IP address or a fully qualified domain name (FQDN).  For example, both ``'205.186.163.125'`` and ``'djangoproject.com'`` would be valid query parameters."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:151
# 9efaf0de56b740f1bcb945bca9b42da6
msgid "Returns a dictionary of city information for the given query.  Some of the values in the dictionary may be undefined (``None``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:156
# b2b6186f58d941a5b6f6faf4eb23b880
msgid "Returns a dictionary with the country code and country for the given query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:161
# c992179d9ac94ae1b531d79e6aa23805
msgid "Returns only the country code corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:165
# f83d969143ea46e3a2ea437885b36208
msgid "Returns only the country name corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:168
# 579c98128ca5433dabf343490aee4a88
msgid "Coordinate Retrieval"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:172
#: ../../ref/contrib/gis/geoip.txt:176
# 2ea0612d9aaf4403a593a01ea87bd227
# 5452b5d1eb7d4f29bfed8028035e10ca
msgid "Returns a coordinate tuple of (longitude, latitude)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:180
# 8e05861bd1a2476b906bf1849d61eeef
msgid "Returns a coordinate tuple of (latitude, longitude),"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:184
# d28667fd224441ca942e4b3f9bf208da
msgid "Returns a :class:`django.contrib.gis.geos.Point` object corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:187
# 1c517ac6cebe44ea9602d5a28fe512ad
msgid "Database Information"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:191
# ab761d0a5a5a44b893736a78b2b60390
msgid "This property returns information about the GeoIP country database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:195
# 4ab36bed894e436bb7cc661239303523
msgid "This property returns information about the GeoIP city database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:199
# 41899f62427245c78fd0fdb856f2db7c
msgid "This property returns information about all GeoIP databases (both city and country), and the version of the GeoIP C library (if supported)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:203
# 8c42c5fb9b904839a43ae8339a3e41c3
msgid "GeoIP-Python API compatibility methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:205
# 2ff59a1b377946f8b9b57bb7e76c74b8
msgid "These methods exist to ease compatibility with any code using MaxMind's existing Python API."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:210
# 51963545ea4b4001b7f3b3223da7edf8
msgid "This classmethod instantiates the GeoIP object from the given database path and given cache setting."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:230
# a3314bffe54a483ca882ae17dc5e9db5
msgid "GeoIP(R) is a registered trademark of MaxMind, LLC of Boston, Massachusetts."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:5
# 271aab4baf984c318c678164d8923eab
msgid "GeoQuerySet API Reference"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:17
# 711a285d36f248e697c678914cf12043
msgid "Just like when using the :ref:`queryset-api`, interaction with ``GeoQuerySet`` by :ref:`chaining filters <chaining-filters>`. Instead of the regular Django :ref:`field-lookups`, the spatial lookups in this section are available for :class:`GeometryField`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:22
# 2cc83cc60ca74ec48f4ca32079b58867
msgid "For an introduction, see the :ref:`spatial lookups introduction <spatial-lookups-intro>`.  For an overview of what lookups are compatible with a particular spatial backend, refer to the :ref:`spatial lookup compatibility table <spatial-lookup-compatibility>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:30
# 49f2baed857445bab3f98c95e683cf02
msgid "bbcontains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:32
#: ../../ref/contrib/gis/geoquerysets.txt:54
#: ../../ref/contrib/gis/geoquerysets.txt:76
# 660d0ccbec064f498051d4b21e3ff96c
# 36ebcab876c34b079e2478ff6bc66931
# 85020917442149a5813ca29748501acb
msgid "*Availability*: PostGIS, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:34
# 609974ea0a0e4e9ba8179f099a8f1256
msgid "Tests if the geometry field's bounding box completely contains the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:134
#: ../../ref/contrib/gis/geoquerysets.txt:154
#: ../../ref/contrib/gis/geoquerysets.txt:175
#: ../../ref/contrib/gis/geoquerysets.txt:195
#: ../../ref/contrib/gis/geoquerysets.txt:215
#: ../../ref/contrib/gis/geoquerysets.txt:250
#: ../../ref/contrib/gis/geoquerysets.txt:331
#: ../../ref/contrib/gis/geoquerysets.txt:353
#: ../../ref/contrib/gis/geoquerysets.txt:544
#: ../../ref/contrib/gis/geoquerysets.txt:564
#: ../../ref/contrib/gis/geoquerysets.txt:584
#: ../../ref/contrib/gis/geoquerysets.txt:604
#: ../../ref/contrib/gis/geoquerysets.txt:624
# 03a1574b644843099f5a891a6b2fadef
# 65199aca2311444995fc540339c18c99
# 69956b1ad7c6470a834ccb8db503ebba
# 2b7f0be8ce0b41bc94ed46d624351ab2
# 4a6a9c30e7ae48f18f4851961025ca88
# 1aa792086da845ad94c0aaabaa9c0829
# 9b0202c1e9a1421689e51a4ba45b37f9
# d8d3dae2efa04dcd9ecf32c793d00a49
# daf8773c2c3a4ca4965648f1df699582
# c25c8c7ec7ff4d489be6b395d98bf0c3
# 7867c0163dc84d1ab845c4f716c40f84
# b8d34c14b8c44874b2165bc9b59a1efb
# 3f2fe7f1979d4ca98b0057b31bc5d842
# 6a0ee07e12c244769d06ccbe4d51901e
# bd3acc3f3a3c4e2db7603cab590148f7
# f2ba646f700a4080be7af9360e14d6a0
# e339a74db7444efbb2bef9761336620e
msgid "Backend"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:134
#: ../../ref/contrib/gis/geoquerysets.txt:154
#: ../../ref/contrib/gis/geoquerysets.txt:175
#: ../../ref/contrib/gis/geoquerysets.txt:195
#: ../../ref/contrib/gis/geoquerysets.txt:215
#: ../../ref/contrib/gis/geoquerysets.txt:250
#: ../../ref/contrib/gis/geoquerysets.txt:331
#: ../../ref/contrib/gis/geoquerysets.txt:353
#: ../../ref/contrib/gis/geoquerysets.txt:544
#: ../../ref/contrib/gis/geoquerysets.txt:564
#: ../../ref/contrib/gis/geoquerysets.txt:584
#: ../../ref/contrib/gis/geoquerysets.txt:604
#: ../../ref/contrib/gis/geoquerysets.txt:624
# c9c4451f9a6041b4951649f0f0fc76c4
# 01ad498194864b14a50f5685fc6a7d06
# 3aff10c4635d4faba7774b50dd89d30e
# 4512e3085ae14d94995826cd4cda0350
# 318e81c0018d4577a3caeb7ce9e59c84
# 5a6fe8a9a8d9492e8e6f66d4d39efea0
# 4bc5b2e5e60049a3b7953021a55a597d
# dd2c824edbe5438eba853487a0ad2459
# ef498f488a6e4780ad318e1dc01ed70c
# f780231565a04d36b07aee8a43da9ca3
# aa5cee0b77ad4280a826e33df5bf1c43
# e9686bbf679d459695776463f1a409f6
# 072b25b6dd05465d957ded1b9c33c4e0
# b940d207bffd40dfa9f3ef1cc71e177a
# 833a1b32b10d49a5ba8f9a8e789cb450
# bab0b66f1ef64e73b3a082b058438c03
# c0b55e03bc294086bca1c301fc939ff9
msgid "SQL Equivalent"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:44
# 82d2886fe330407dae47a77e036c6f47
msgid "``poly ~ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:45
#: ../../ref/contrib/gis/geoquerysets.txt:67
#: ../../ref/contrib/gis/geoquerysets.txt:89
#: ../../ref/contrib/gis/geoquerysets.txt:111
#: ../../ref/contrib/gis/geoquerysets.txt:219
#: ../../ref/contrib/gis/geoquerysets.txt:254
#: ../../ref/contrib/gis/geoquerysets.txt:334
#: ../../ref/contrib/gis/geoquerysets.txt:356
#: ../../ref/contrib/gis/install.txt:67
#: ../../ref/contrib/gis/install/index.txt:65
# 186eb160a3074b47b24f6eebb5677fc3
# 189befc4c6074d879b71bd223c42da22
# 072317c1457a4f039a896ff61f2b2f9d
# a2d4b171fc72479886ed8aca965f9da5
# 9e2c76ccbcaf4aa1a24db820503a66af
# 699ffb7a49464cf78e3e7caff1672119
# 7381bf7909eb4ccb909c6e8a41fb1816
# c67ee4d0f37d4b649bc9b8e9c08295a6
# 7294563776da419b85f4fac2f2e51aad
# 4236a84f490c4f189032ce7cb2210d30
msgid "MySQL"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:45
#: ../../ref/contrib/gis/geoquerysets.txt:111
# 956e52467811481f838c3b28279dd5ae
# d14a61b53c12414b88414aa33a91fd75
msgid "``MBRContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:46
# 1e58ad6e6914419eb3a490dfd57a7d25
msgid "``MbrContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:52
# eead9bf17793403a94d851fc47e55d05
msgid "bboverlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:56
# d54bc835411f4da69cd5aa3a645d03f2
msgid "Tests if the geometry field's bounding box overlaps the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:66
# f6d9a8ee7f044aef8cb2c4948b558ff7
msgid "``poly && geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:67
# 8582b8cec520472298459275b36b7ef6
msgid "``MBROverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:68
# c3a1a1bacc0d4e3d8d166c56815b95e2
msgid "``MbrOverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:74
# 86d784697c604c38a700aebc88992cc8
msgid "contained"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:78
# 9c418c53289e4333a48e790ddf0daaf8
msgid "Tests if the geometry field's bounding box is completely contained by the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:88
# 24ce4be6da1042e196af47eae8dc3b21
msgid "``poly @ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:89
#: ../../ref/contrib/gis/geoquerysets.txt:356
# 446ddfe0febf41e5bb2a598f088aa5e1
# d256d1f393c24fa9b333386d5057db76
msgid "``MBRWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:90
# 9bb7db113b5a48daaa3633d2433dc44b
msgid "``MbrWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:96
#: ../../ref/models/querysets.txt:1767
# 5046f57214074046b182e986c7b3eca5
# b23a62ce24dd46799f420bd1530df403
msgid "contains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:98
#: ../../ref/contrib/gis/geoquerysets.txt:206
#: ../../ref/contrib/gis/geoquerysets.txt:226
#: ../../ref/contrib/gis/geoquerysets.txt:234
#: ../../ref/contrib/gis/geoquerysets.txt:241
#: ../../ref/contrib/gis/geoquerysets.txt:263
#: ../../ref/contrib/gis/geoquerysets.txt:322
#: ../../ref/contrib/gis/geoquerysets.txt:344
# 2ed3e43e94344a4f9e89ddb70f3df645
# c12a123f06d445aba8f919fb656ec8e5
# 91693f7314cb4bc9b5a33fb9092017fc
# 43032fc9763f4bbbb8782fc751a338ff
# 757410159e0f4150a21a02dddf839a2b
# 0cf3479f02964ff0b9f7b16cc15080e7
# c0994fb736fc4c9484bf7c1d99b18f68
# ec91d15bf8e44b56b3840fbd3e3cb990
msgid "*Availability*: PostGIS, Oracle, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:100
# 97cb4739e9ac48ef99ecc3836f52068f
msgid "Tests if the geometry field spatially contains the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:109
# 1274c30a9fd64c5ab007f39c5558ea91
msgid "``ST_Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:110
# f673a48ec1ec4521b6f79e6b0c737771
msgid "``SDO_CONTAINS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:112
# bba602dccb074dc7b1e74f905f0a2379
msgid "``Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:118
# 26343802dcf243e3b85eb664b965d9d5
msgid "contains_properly"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:120
#: ../../ref/contrib/gis/geoquerysets.txt:366
#: ../../ref/contrib/gis/geoquerysets.txt:384
#: ../../ref/contrib/gis/geoquerysets.txt:402
#: ../../ref/contrib/gis/geoquerysets.txt:421
#: ../../ref/contrib/gis/geoquerysets.txt:439
#: ../../ref/contrib/gis/geoquerysets.txt:457
#: ../../ref/contrib/gis/geoquerysets.txt:475
#: ../../ref/contrib/gis/geoquerysets.txt:493
#: ../../ref/contrib/gis/geoquerysets.txt:804
#: ../../ref/contrib/gis/geoquerysets.txt:1063
#: ../../ref/contrib/gis/geoquerysets.txt:1102
#: ../../ref/contrib/gis/geoquerysets.txt:1131
#: ../../ref/contrib/gis/geoquerysets.txt:1147
# 97f2111d30fc4fb79a7ac400b7073c2d
# d9ef27c9de07404684816aeb6379a05f
# 069f020b188841fe98f93265acf2efe5
# 9598aa61b058489383a34ac69390198a
# 0fc3cedd433a4ce798cf3c278655548e
# 28851af052c64ec5975d039afa8521e6
# 998a5495769043a4a68b9bf336c772b8
# a11a3ae7df0045fa9be85dc7f7927bd7
# 3c3f729f06494539a69c834c983c6758
# 1f2666fea6c24b25b022d549e8de4b51
# fa12127a73bf4bf48dcccf187c201cd5
# 92cc8dfd02994d11b99f7d1b7fdc0b3a
# 2b40db607c6b4f779b0c21122ef3689d
# e8119c9fd1ef48ac89be3d71c9f15d7f
msgid "*Availability*: PostGIS"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:122
# 00ef0e48e2014f508c0ab4bd89da63bd
msgid "Returns true if the lookup geometry intersects the interior of the geometry field, but not the boundary (or exterior). [#fncontainsproperly]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:127
# afb082b9bcea45a2be8a28c7ab3036c0
msgid "Requires PostGIS 1.4 and above."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:136
# 26df1daac5f54c45bdc9e3fa820e9b92
msgid "``ST_ContainsProperly(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:142
# 57f4a82db6864619bf4572270219fe97
msgid "coveredby"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:144
#: ../../ref/contrib/gis/geoquerysets.txt:165
#: ../../ref/contrib/gis/geoquerysets.txt:815
#: ../../ref/contrib/gis/geoquerysets.txt:1115
# bb986678f48949d085fdca4d45f435ac
# 052d6dd05a8743e4aaefa3ec78b3b553
# ba62a62a974d4e408a3d55f091209afc
# 33ec4f161e9a4a528533025f6f44f865
msgid "*Availability*: PostGIS, Oracle"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:146
# 5026f346227440f78df9cf4523ec0825
msgid "Tests if no point in the geometry field is outside the lookup geometry. [#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:156
# 21789a8fe6ca4f739f268e5a5f7eefd4
msgid "``ST_CoveredBy(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:157
# 23f95c4a3a3c4230a9635c7a4c42ebba
msgid "``SDO_COVEREDBY(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:163
# 6f55df90617e43bd8a7647a92eba8173
msgid "covers"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:167
# 5e9aa0c2456e4dc18aba6f66c8b578db
msgid "Tests if no point in the lookup geometry is outside the geometry field. [#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:177
# 563d79dd57c04821ab70cec6cd6d1557
msgid "``ST_Covers(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:178
# dab11c62ba074bc991c621340fa5891b
msgid "``SDO_COVERS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:184
# 196bd0f8e90742c096ef983319a0189f
msgid "crosses"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:186
#: ../../ref/contrib/gis/geoquerysets.txt:780
#: ../../ref/contrib/gis/geoquerysets.txt:825
#: ../../ref/contrib/gis/geoquerysets.txt:880
#: ../../ref/contrib/gis/geoquerysets.txt:950
#: ../../ref/contrib/gis/geoquerysets.txt:1008
#: ../../ref/contrib/gis/geoquerysets.txt:1036
# 71be63b0262244b4b5991da860ee3f47
# 0322818f964d41b0a73b4015387994b4
# 0354199196b64b3cb37cb14665b50198
# c9d54a7d5ad44d9abfb19f6b87d64718
# 6959c0abd04e4fb9b2326d5ba628bfbb
# 7b561916a6ff410bbcef3ca8f46e0a46
# 70874be76d644367a49d4fd957f79331
msgid "*Availability*: PostGIS, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:188
# 487679c838ce46e48772053eb662d598
msgid "Tests if the geometry field spatially crosses the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:197
# 0d5bd3a21847419e9396054e06a30ec7
msgid "``ST_Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:198
# 37e9d513321a4aeb97f20d8cc16b961b
msgid "``Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:204
# 890b4bdae2c74d158a72839b90477bfa
msgid "disjoint"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:208
# a6e26dda46d7418693afbae984a19872
msgid "Tests if the geometry field is spatially disjoint from the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:217
# 0b646ad59a7441bdac3e64ca24fc3150
msgid "``ST_Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:218
# 4eb7b63436b04f73a2cf4956873a125a
msgid "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:219
# c2027fb2f7e24f3b9aa9dec1ea72a3ba
msgid "``MBRDisjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:220
# 9793b704f7944b7baa21451e74dc4f05
msgid "``Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:224
# 9c731b3e20c54189a58240eb720e7cb7
msgid "equals"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:232
# 9786f3dcd8394473bc3f714cdf5ffdad
msgid "exact, same_as"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:239
# 5ef3a5fb9c674e19b5a39feaa1d3f564
msgid "intersects"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:243
# 284260e3a0204b5fbae496d375478ad9
msgid "Tests if the geometry field spatially intersects the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:252
# db9122849ee444068adc0429c668f19c
msgid "``ST_Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:253
# 0a7a24f623b7483db47ec262f1a1bf87
msgid "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:254
# 4b546bb2344243cf8a59818530e887f8
msgid "``MBRIntersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:255
# 946f698e2563409ebd89d1787d9b40e2
msgid "``Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:261
# c1e3754b52b2480ca03d5b68ec919e3d
msgid "overlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:268
# 7b7ff8d95fe34b5aba45365eebc615db
msgid "relate"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:272
# c5f37deb8158493a9d9f063ee9cece29
msgid "Tests if the geometry field is spatially related to the lookup geometry by the values given in the given pattern.  This lookup requires a tuple parameter, ``(geom, pattern)``; the form of ``pattern`` will depend on the spatial backend:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:277
# b7d634a7d770498987cdbb7692ae8115
msgid "PostGIS & SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:278
# 79bc4c9b3b0048a8951a9958e0516ba7
msgid "On these spatial backends the intersection pattern is a string comprising nine characters, which  define intersections between  the interior, boundary, and exterior of the geometry field and the lookup geometry. The intersection pattern matrix may only use the following characters: ``1``, ``2``, ``T``, ``F``, or ``*``.  This lookup type allows users to \"fine tune\" a specific geometric relationship consistent with the DE-9IM model. [#fnde9im]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:291
# 0e6bee37c5404ee292b7efbb01b74015
msgid "PostGIS SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:295
# aa56aec628f14158a79af20cc5848758
msgid "SpatiaLite SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:302
# 3394f5d6d3104c9f973b43ad8d06ea5e
msgid "Here the relation pattern is comprised at least one of the nine relation strings: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, ``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, and ``ANYINTERACT``.   Multiple strings may be combined with the logical Boolean operator OR, for example, ``'inside+touch'``. [#fnsdorelate]_  The relation strings are case-insensitive."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:313
# 07d3579534c94128b30b8a6afa2395f2
msgid "Oracle SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:320
# 184bc589c73d487d99c0e05026b95aae
msgid "touches"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:324
# e10fe75e09bf47298e3a9d9e67a5410d
msgid "Tests if the geometry field spatially touches the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:333
# 4aa03387bf174265840bba08c8e8bf15
msgid "``ST_Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:334
# cdab0f70b7f740eabcbe81778dedb2df
msgid "``MBRTouches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:335
# 19c4abf89f164b1695299c5391620e62
msgid "``SDO_TOUCH(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:336
# 8eed529477844981b8decaeac7c41074
msgid "``Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:342
# 782382b6d0ee420b9c3f74dcf3db01da
msgid "within"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:346
# cfc0d8e5cfee467ba310f11574f1152b
msgid "Tests if the geometry field is spatially within the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:355
# f62f1f6a325a4b359eca7e53c3be6d91
msgid "``ST_Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:357
# ca3fd17f0975415f90bb73edc489af1b
msgid "``SDO_INSIDE(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:358
# d0a83ad6242b481b92e3232aba24dc2b
msgid "``Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:364
# 6ba4236388a640aeb1f27cb24db06734
msgid "left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:368
# b21867d4414946bb9d4b9af6a0f810c2
msgid "Tests if the geometry field's bounding box is strictly to the left of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:375
#: ../../ref/contrib/gis/geoquerysets.txt:393
#: ../../ref/contrib/gis/geoquerysets.txt:411
#: ../../ref/contrib/gis/geoquerysets.txt:430
#: ../../ref/contrib/gis/geoquerysets.txt:448
#: ../../ref/contrib/gis/geoquerysets.txt:466
#: ../../ref/contrib/gis/geoquerysets.txt:484
#: ../../ref/contrib/gis/geoquerysets.txt:502
# b7ae192ab2db4afeae8424d389e7f3da
# 4c99cab5042546beaa76deae28975bad
# 7107ddd2a8d34cb9a5fbe0a66070a29e
# 583e09b73e4945ecade0804696b1ce2a
# bdce09c6e81246f7bd0b07ee06877e26
# cf4b9ee7d3994c41baf72f4b66afad16
# 28f669fb14a44876bd4dd018e160dc03
# 1d04346921924e079a7ec968a616bb5d
msgid "PostGIS equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:382
# 18af68583ccf481d8cec4ef5c6a311cc
msgid "right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:386
# f7327f91165c4b2ea3c8dcca795a5ccc
msgid "Tests if the geometry field's bounding box is strictly to the right of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:400
# f3bd4e6f2c2f4c86a7c5c78631332b35
msgid "overlaps_left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:404
# 5d196b8976aa41cab4480a6a49a033b6
msgid "Tests if the geometry field's bounding box overlaps or is to the left of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:419
# 847f66652a294facb4a3831c8f15aebc
msgid "overlaps_right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:423
# ef5298e528b5460abf4d756d8f9ab9a0
msgid "Tests if the geometry field's bounding box overlaps or is to the right of the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:437
# 822410f3901940e283d86afe2297fd04
msgid "overlaps_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:441
# 8c4f24b9b7d14f989d435072e4fd5b5f
msgid "Tests if the geometry field's bounding box overlaps or is above the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:455
# b58eff7d7b834e7b88cd4de2883fa7f6
msgid "overlaps_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:459
# 0faed3cdadce4e96a22114a0c3336ed2
msgid "Tests if the geometry field's bounding box overlaps or is below the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:473
# 97937e0b4e6e4399a3b1be8ce56d9009
msgid "strictly_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:477
#: ../../ref/contrib/gis/geoquerysets.txt:495
# 27ef5afb226f417eadc791c9b04e7c41
# d75d9d829a7941c8bbf36c7b3e2f7116
msgid "Tests if the geometry field's bounding box is strictly above the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:491
# 10c892bae77c47b38c2236a2c295bb8e
msgid "strictly_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:514
# 1906db7e7dd8422e81cfaf9fdaefa178
msgid "For an overview on performing distance queries, please refer to the :ref:`distance queries introduction <distance-queries>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:517
# f6741024e2724d4b891e74ec9b285fe0
msgid "Distance lookups take the following form::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:521
# e303839a269d45719a2c015799d16808
msgid "The value passed into a distance lookup is a tuple; the first two values are mandatory, and are the geometry to calculate distances to, and a distance value (either a number in units of the field or a :class:`~django.contrib.gis.measure.Distance` object).  On every distance lookup but :lookup:`dwithin`, an optional third element, ``'spheroid'``, may be included to tell GeoDjango to use the more accurate spheroid distance calculation functions on fields with a geodetic coordinate system (e.g., ``ST_Distance_Spheroid`` would be used instead of ``ST_Distance_Sphere``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:534
# 69710a37c3dc4970890e45da249bb8b6
msgid "distance_gt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:536
# 36cdfa18d68342de91d915cc6dac179b
msgid "Returns models where the distance to the geometry field from the lookup geometry is greater than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:546
# 2054d4f9babe40e89494a69ed8120f8e
msgid "``ST_Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:547
# 06fac2ec522d4a5382aa493a2559a519
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:548
# 15056a9c27574c569b808024084cb536
msgid "``Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:554
# 97a3577caa864f1c988fbb292959ca3f
msgid "distance_gte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:556
# 296b041e887f40efa2557775f4fb1077
msgid "Returns models where the distance to the geometry field from the lookup geometry is greater than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:566
# abe4c7ea498a437db8ae962a4add63b6
msgid "``ST_Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:567
# c7dff1e9dae94e3098c6c610ffccbc92
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:568
# 67afba920ad64477b33991d61ddd8ce9
msgid "``Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:574
# b174e639d08e4607afde71e8bc1704f4
msgid "distance_lt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:576
# c42b02239b1a4cd8929097814da63e25
msgid "Returns models where the distance to the geometry field from the lookup geometry is less than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:586
# f45122d1d3b94e0da7f4458611b87c1f
msgid "``ST_Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:587
# d6f371cdfe8b41c286e16eae7d92ed5f
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:588
# c039889ae65044e6ab7c1c1ed6564d1e
msgid "``Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:594
# 4914707970f34d02b0bd728d9840cca6
msgid "distance_lte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:596
# 05f4d801fab24105975454ef2f20018b
msgid "Returns models where the distance to the geometry field from the lookup geometry is less than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:606
# 4aad2750531f4e8d8731cf2eb7db73e1
msgid "``ST_Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:607
# 086d6a50725e4e049ac26ffb7d42e53d
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:608
# fcb0e49f3f93411b94af474a944041a9
msgid "``Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:614
# c4ebbae6ddc742c5a1e487cf991067f7
msgid "dwithin"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:616
# 2e7e7ccc96844566b496fc7b47d7fc61
msgid "Returns models where the distance to the geometry field from the lookup geometry are within the given distance from one another."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:626
# 2679ead256ba40aca2f369fbee2c0371
msgid "``ST_DWithin(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:627
# ebcf84602cc942da94715fad44606818
msgid "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:632
# cdf5208f0a194f4384b390148c0e438c
msgid "This lookup is not available on SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:640
# 6a092d473b794887844e05fda8d812c3
msgid "``GeoQuerySet`` methods specify that a spatial operation be performed on each patial operation on each geographic field in the queryset and store its output in a new attribute on the model (which is generally the name of the ``GeoQuerySet`` method)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:645
# 90f369aba74f4b8fb4c4601bb4eefd03
msgid "There are also aggregate ``GeoQuerySet`` methods which return a single value instead of a queryset.  This section will describe the API and availability of every ``GeoQuerySet`` method available in GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:651
# a986cd28d6ed4c82b419e2f9ef144f0c
msgid "What methods are available depend on your spatial backend.  See the :ref:`compatibility table <geoqueryset-method-compatibility>` for more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:655
# f7d39823d53a4545802abc26876b4d9f
msgid "With a few exceptions, the following keyword arguments may be used with all ``GeoQuerySet`` methods:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:659
#: ../../ref/contrib/gis/geoquerysets.txt:956
#: ../../ref/contrib/gis/geoquerysets.txt:989
#: ../../ref/contrib/gis/geoquerysets.txt:1022
#: ../../ref/contrib/gis/geoquerysets.txt:1042
#: ../../ref/contrib/gis/geoquerysets.txt:1180
# 018d43050e1949c2bf32fdff66f9545d
# 7d3d7bc8359848f7ab4d724646e53ed2
# e54f463faf4441508af9ff9d51321682
# 9477472f9a08402694b0031e158a3c58
# bc2e1aa0de134a288d5a21f77cd4cfb5
# 7b4ec6e8a9a04a988fb98fe3083287e5
msgid "Keyword Argument"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:661
# 75176dbc80624a39be9e9c40c68f1c36
msgid "``field_name``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:661
# 34adc38b6b1d477daaf1051471327323
msgid "By default, ``GeoQuerySet`` methods use the first geographic field encountered in the model.  This keyword should be used to specify another geographic field (e.g., ``field_name='point2'``) when there are multiple geographic fields in a model."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:667
# 1dc1bd11576c40d3aab3da8e81ea47c4
msgid "On PostGIS, the ``field_name`` keyword may also be used on geometry fields in models that are related via a ``ForeignKey`` relation (e.g., ``field_name='related__point'``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:672
# b1cbb644a38c40ff92c648fd8dc48c4d
msgid "``model_att``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:672
# 3986104407b4444a8fea8eb480c268c8
msgid "By default, ``GeoQuerySet`` methods typically attach their output in an attribute with the same name as the ``GeoQuerySet`` method.  Setting this keyword with the desired attribute name will override this default behavior.  For example, ``qs = Zipcode.objects.centroid(model_att='c')`` will attach the centroid of the ``Zipcode`` geometry field in a ``c`` attribute on every model rather than in a ``centroid`` attribute."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:682
# e240a4bc5a0849f08157046a5ec83064
msgid "This keyword is required if a method name clashes with an existing ``GeoQuerySet`` method -- if you wanted to use the ``area()`` method on model with a ``PolygonField`` named ``area``, for example."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:690
# a3efd9d52e164f50bcb14f3d9f36cd0b
msgid "Measurement"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:694
# 74057ef8420a4932ab5e036b0431cd61
msgid "``area``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:698
# 51252e0bdd4942d5a20a7364f3a9c2c5
msgid "Returns the area of the geographic field in an ``area`` attribute on each element of this GeoQuerySet."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:702
# 6f4cf74ce35246099eca0750cc9044ad
msgid "``distance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:706
# 9a96b10884ac487698520a2c30f06c2c
msgid "This method takes a geometry as a parameter, and attaches a ``distance`` attribute to every model in the returned queryset that contains the distance (as a :class:`~django.contrib.gis.measure.Distance` object) to the given geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:710
# 09d2965a36364747a9303698b9f55a4c
msgid "In the following example (taken from the `GeoDjango distance tests`__), the distance from the `Tasmanian`__ city of Hobart to every other :class:`PointField` in the ``AustraliaCity`` queryset is calculated::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:730
# 7fd7a7527c9e45c09d30512a99e27d44
msgid "Because the ``distance`` attribute is a :class:`~django.contrib.gis.measure.Distance` object, you can easily express the value in the units of your choice.  For example, ``city.distance.mi`` is the distance value in miles and ``city.distance.km`` is the distance value in kilometers.  See the :ref:`ref-measure` for usage details and the list of :ref:`supported_units`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:741
# 9a7b76e3cd8c49b9b3685b3e534c5693
msgid "``length``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:745
# a12bc56c5fd7460eb99dc27e5d9f6ffc
msgid "Returns the length of the geometry field in a ``length`` attribute (a :class:`~django.contrib.gis.measure.Distance` object) on each model in the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:750
# 0a3b5e3a12d943b7a1f6b0a2c2832726
msgid "``perimeter``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:754
# eeeb149beeb947d18ec6ed15f4bd55a2
msgid "Returns the perimeter of the geometry field in a ``perimeter`` attribute (a :class:`~django.contrib.gis.measure.Distance` object) on each model in the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:759
# 7838e81a8de74fa2909e0274e016fe64
msgid "Geometry Relationships"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:761
# a74b4e6850e1499f8da130628eca722e
msgid "The following methods take no arguments, and attach geometry objects each element of the :class:`GeoQuerySet` that is the result of relationship function evaluated on the geometry field."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:766
# bb2830e36d6440ccab8b6199e5816664
msgid "``centroid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:772
# 808a4317dc954aa1804e46fbebb2a73c
msgid "Returns the ``centroid`` value for the geographic field in a ``centroid`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:776
# 03191b7985804e999e6256a4bc2001fd
msgid "``envelope``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:782
# 1a23fcb6159a467f92d94601f3977cba
msgid "Returns a geometry representing the bounding box of the geometry field in an ``envelope`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:786
# df3ca7c7fc7849e1a2aea8bf540eba30
msgid "``point_on_surface``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:792
# 68008257bd6947b08f4e62b5202e8bc2
msgid "Returns a Point geometry guaranteed to lie on the surface of the geometry field in a ``point_on_surface`` attribute on each element of the queryset; otherwise sets with None."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:797
# c7ae38dbfe444bed9e4d562fd9187c76
msgid "Geometry Editors"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:800
# 87e43205a9334d9d94bc34ccd954124c
msgid "``force_rhr``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:806
# 0adfadb1859543d4a59fa63872c9bc71
msgid "Returns a modified version of the polygon/multipolygon in which all of the vertices follow the Right-Hand-Rule, and attaches as a ``force_rhr`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:811
# 8e06bb9279594994bd25ce0edb7db5cc
msgid "``reverse_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:817
# 2de9d9bc01e94c8c97cbfa19e51505ad
msgid "Reverse the coordinate order of the geometry field, and attaches as a ``reverse`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:821
# 3aefe3ee92eb4b67973f69cdf41e85c2
msgid "``scale``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:828
# 2350901803764a4ca01e92ccd16bf566
msgid "``snap_to_grid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:832
# f65ac484c7b84b6f98ede6ef7988b2b6
msgid "Snap all points of the input geometry to the grid.  How the geometry is snapped to the grid depends on how many numeric (either float, integer, or long) arguments are given."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:837
# 7440b323d98544c494c6673bc304f916
msgid "Number of Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:839
#: ../../ref/contrib/gis/geos.txt:199
#: ../../ref/contrib/gis/geos.txt:883
# 1956def5e3144fba8c5cf1cb9da14c3e
# 60a9aa2e0668401a9ebc6a545d8060fb
# 0ba687f71e86485a86980ba093771c8e
msgid "1"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:839
# 9a2ac2b492c446fbb5d6c65076243bad
msgid "A single size to snap bot the X and Y grids to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:840
#: ../../ref/contrib/gis/geos.txt:200
#: ../../ref/contrib/gis/geos.txt:905
# 06f0db21608b4088bee23c9540aa4f29
# 2cc97a11e1504ea58616cd8068e211e6
# 4969badae96d498d8ddb2a426207d91f
msgid "2"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:840
# bd7032503c854d33ac424204bd686751
msgid "X and Y sizes to snap the grid to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:841
#: ../../ref/contrib/gis/geos.txt:202
# f756fe5babd749b18bcc316284c34b3c
# 2e41588ef21d40dc89596d4204926d15
msgid "4"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:841
# 81474a09251e40c1952af3246e3337df
msgid "X, Y sizes and the corresponding X, Y origins."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:845
#: ../../ref/contrib/gis/layermapping.txt:131
# b39159c760254d27990ecb9d9955eca8
# 4a3985d4de2444c3a6b6789c62adab20
msgid "``transform``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:851
# ecb8988b3a9a47b5b18fcc8aab2519b4
msgid "The ``transform`` method transforms the geometry field of a model to the spatial reference system specified by the ``srid`` parameter.  If no ``srid`` is given, then 4326 (WGS84) is used by default."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:857
# f92e1ebe78da4d41a5947b7089f3b5c5
msgid "Unlike other ``GeoQuerySet`` methods, ``transform`` stores its output \"in-place\".  In other words, no new attribute for the transformed geometry is placed on the models."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:863
# bfddae9fa6004552b421e2f09bc94d0e
msgid "What spatial reference system an integer SRID corresponds to may depend on the spatial database used.  In other words, the SRID numbers used for Oracle are not necessarily the same as those used by PostGIS."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:877
# 687d051b6f244c65b93bca41548a59ae
msgid "``translate``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:882
# 405f9b82ec2c41c5a989828cfa53aa01
msgid "Translates the geometry field to a new location using the given numeric parameters as offsets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:886
# ca0ba9e3533949b89b063abdde5819e0
msgid "Geometry Operations"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:889
# d5ffb12c71d84820a2a27399364629a3
msgid "The following methods all take a geometry as a parameter and attach a geometry to each element of the ``GeoQuerySet`` that is the result of the operation."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:893
# ad6e0a7f1f6e4265a7f1f49483139418
msgid "``difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:897
# bb629599e60e4109b3ca1471f785fd9e
msgid "Returns the spatial difference of the geographic field with the given geometry in a ``difference`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:903
# 8896b65d6a6c490a989a260c0fec96ae
msgid "``intersection``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:907
# a0f8cc2d912741f48ff63c75035ebb72
msgid "Returns the spatial intersection of the geographic field with the given geometry in an ``intersection`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:912
# bcd1e2f18838449d933f16ee1afe6220
msgid "``sym_difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:916
# b3e43905114840fdbcea670eb1bc18da
msgid "Returns the symmetric difference of the geographic field with the given geometry in a ``sym_difference`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:921
# 54a29abaec7a4bdbb4ac262791de0408
msgid "``union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:925
# a525df060dfd4ef8a5df6f09f2dce966
msgid "Returns the union of the geographic field with the given geometry in an ``union`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:930
# 026406f1a5aa4d019b34452f3232da79
msgid "Geometry Output"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:932
# b69f7f38381f402ba23109bee6c581a0
msgid "The following ``GeoQuerySet`` methods will return an attribute that has the value of the geometry field in each model converted to the requested output format."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:936
# d2ed1025974f40b88b44672526aab3a4
msgid "``geohash``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:940
# 4d5ac4416d43427ab95a89c7010e1b76
msgid "Attaches a ``geohash`` attribute to every model the queryset containing the `GeoHash`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:946
# b774736b74ed4e4aaf7b1e2a3c568566
msgid "``geojson``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:952
# 2619e110d3e243b5ad598d9a2269cf92
msgid "Attaches a ``geojson`` attribute to every model in the queryset that contains the `GeoJSON`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:958
#: ../../ref/contrib/gis/geoquerysets.txt:991
#: ../../ref/contrib/gis/geoquerysets.txt:1024
#: ../../ref/contrib/gis/geoquerysets.txt:1048
# 3ddc5e4daa0341d9a90f2e4ff2fbd4d1
# 2167a0def2de44198168aa51b6c498ce
# cab4937efd0f457ca4efcf6d5447e1b7
# bfb37c2abecd46ed8e0aae4ea0e46087
msgid "``precision``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:958
# 106367af6bd64c08bba90a6841586553
msgid "It may be used to specify the number of significant digits for the coordinates in the GeoJSON representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:962
# 174a3787599747bc8a2550b0ee2547b4
msgid "``crs``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:962
# 01d258b4fa34492fb8fbc6d1fac6cacf
msgid "Set this to ``True`` if you want the coordinate reference system to be included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:966
# 0558491328e84fc999e2d576d1681e14
msgid "``bbox``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:966
# a91a5dddaf0144d9936ae96fc7d45195
msgid "Set this to ``True`` if you want the bounding box to be included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:973
# 06092062205b4e7fa665b5dc781acd70
msgid "``gml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:979
# 1daa76cf67714115b57e10b98c2d85ce
msgid "Attaches a ``gml`` attribute to every model in the queryset that contains the `Geographic Markup Language (GML)`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:991
# 22dfc65f468e403eae2742a0ea3c0ab6
msgid "This keyword is for PostGIS only.  It may be used to specify the number of significant digits for the coordinates in the GML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:996
# 8458ab1b12f740e9afbcb80c9229daf2
msgid "``version``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:996
# d070c56247b44c5882cd929aab2afc88
msgid "This keyword is for PostGIS only.  It may be used to specify the GML version used, and may only be values of 2 or 3.  The default value is 2."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1004
# 05e76fb5449543dfa891d188651b1e29
msgid "``kml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1010
# 6d31aa2ee7a14398af30f480ce55872d
msgid "Attaches a ``kml`` attribute to every model in the queryset that contains the `Keyhole Markup Language (KML)`__ representation of the geometry fields. It should be noted that the contents of the KML are transformed to WGS84 if necessary."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1024
# e1f2d30d03fd488ba5c6a22d14537ea3
msgid "This keyword may be used to specify the number of significant digits for the coordinates in the KML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1032
# d00d07240d9b44148fecb075caaf1537
msgid "``svg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1038
# d3de13ee4b5d4f7b82e297b859e5c126
msgid "Attaches a ``svg`` attribute to every model in the queryset that contains the `Scalable Vector Graphics (SVG)`__ path data of the geometry fields."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1044
# 819011a8989a4efd88b2a3fb8c7057b5
msgid "``relative``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1044
# 18a1e8c32444472fbdd21cc4971dffc0
msgid "If set to ``True``, the path data will be implemented in terms of relative moves.  Defaults to ``False``, meaning that absolute moves are used instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1048
# 6264a0358e7d43cbb1b446b609416e0e
msgid "This keyword may be used to specify the number of significant digits for the coordinates in the SVG representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1056
# f91d1023f0f9417e90a0899d281b7f44
msgid "Miscellaneous"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1059
# 538795a8609945b18d406f3a4920ad19
msgid "``mem_size``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1065
# d5abef4d23a146b9b866e88b9cb569c9
msgid "Returns the memory size (number of bytes) that the geometry field takes in a ``mem_size`` attribute  on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1069
# 608cd95280a94e8196dfae561e35e94a
msgid "``num_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1075
# 740900b37a4e4d399391846a69055a11
msgid "Returns the number of geometries in a ``num_geom`` attribute on each element of the ``GeoQuerySet`` if the geometry field is a collection (e.g., a ``GEOMETRYCOLLECTION`` or ``MULTI*`` field); otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1081
# ce6211d8a43b4a3e8ae5344a3dca498d
msgid "``num_points``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1087
# d728f4b9ca3d4cc8b0a4ef890b2b3729
msgid "Returns the number of points in the first linestring in the geometry field in a ``num_points`` attribute on each element of the ``GeoQuerySet``; otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1092
# 18742dc605db4679b6f63540550ccfaa
msgid "Spatial Aggregates"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1095
# 48dadd7edf594612ba2286998e2942fc
msgid "Aggregate Methods"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1098
# f4ad3432c6dd4b85ba1444eae99ee3ec
msgid "``collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1104
# 10bfe121502c4aa090fe9f3830cd93af
msgid "Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the geometry column.  This is analagous to a simplified version of the :meth:`GeoQuerySet.unionagg` method, except it can be several orders of magnitude faster than peforming a union because it simply rolls up geometries into a collection or multi object, not caring about dissolving boundaries."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1111
# 961c84377b3d444aabf58aa224ff97ef
msgid "``extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1117
# 295271b1bed04b2a9037aa60875b078d
msgid "Returns the extent of the ``GeoQuerySet`` as a four-tuple, comprising the lower left coordinate and the upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1127
# da9594d9af2d4efb88c035a53ddf2a65
msgid "``extent3d``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1133
# 8b7876b945634a01b85c3a819e83c50b
msgid "Returns the 3D extent of the ``GeoQuerySet`` as a six-tuple, comprising the lower left coordinate and upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1143
# 4297ee3165144431940f30b8755436bf
msgid "``make_line``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1149
# 25bf1d377cd9443d9624cccba02b37f5
msgid "Returns a ``LineString`` constructed from the point field geometries in the ``GeoQuerySet``.  Currently, ordering the queryset has no effect."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1158
# fad5be0c0d504cbd92cc42ffb7692b57
msgid "``unionagg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1164
# ee087ae886d943778ab9b6d8a29374aa
msgid "This method returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object comprising the union of every geometry in the queryset.  Please note that use of ``unionagg`` is processor intensive and may take a significant amount of time on large querysets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1171
# a816010c0dd74623b44b051155965c48
msgid "If the computation time for using this method is too expensive, consider using :meth:`GeoQuerySet.collect` instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1182
# 1bd55421549e43bfb462603e2eeb9b95
msgid "``tolerance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1182
# 893d9b0a84544e7d80ddbaa2e821c1c0
msgid "This keyword is for Oracle only.  It is for the tolerance value used by the ``SDOAGGRTYPE`` procedure; the  `Oracle documentation`__ has more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1191
# 619c06a7f8a84306aa58ce426390e7ed
msgid "Aggregate Functions"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1199
# ea4ee7f2ef2245e7808562f4dcdd61a1
msgid "``Collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1203
# 9326248cdb394cef97363a3a9c117de8
msgid "Returns the same as the :meth:`GeoQuerySet.collect` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1206
# 4b64e542be3f444ba4e7df070a4554c0
msgid "``Extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1210
# e696048afc9741129464421635a462dd
msgid "Returns the same as the :meth:`GeoQuerySet.extent` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1213
# 0b2a3785f6c045c3b53121547778ac61
msgid "``Extent3D``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1217
# 70df924c2c86412898ce1baacb00402b
msgid "Returns the same as the :meth:`GeoQuerySet.extent3d` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1220
# 8f5fabd55b9c43fd8f21c4c71838e505
msgid "``MakeLine``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1224
# c57a2081b555445c9ca9fb25fd596bcc
msgid "Returns the same as the :meth:`GeoQuerySet.make_line` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1227
# a4bfbbfdbd574e47912fc2725f3e7c33
msgid "``Union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1231
# fbd7dbcd38b048b5adad1560f1cf5052
msgid "Returns the same as the :meth:`GeoQuerySet.union` aggregate method."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1234
# d8237e89552043968bb690953dda7173
msgid "*See* `OpenGIS Simple Feature Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, at Ch. 2.1.13.2, p. 2-13 (The Dimensionally Extended Nine-Intersection Model)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1235
# 091fc1a629244031a24b3a5e30377dd3
msgid "*See* `SDO_RELATE documentation <http://docs.oracle.com/cd/B19306_01/appdev.102/b14255/sdo_operat.htm#sthref845>`_, from Ch. 11 of the Oracle Spatial User's Guide and Manual."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1236
# 7ed80165aea44a138b2c0b0fbac800a8
msgid "For an explanation of this routine, read `Quirks of the \"Contains\" Spatial Predicate <http://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-covers-spatial.html>`_ by Martin Davis (a PostGIS developer)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1237
# 2cbb984dc1dc4a3c87bcf12d790e7c24
msgid "Refer to the PostGIS ``ST_ContainsProperly`` `documentation <http://postgis.refractions.net/documentation/manual-1.4/ST_ContainsProperly.html>`_ for more details."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:5
# c7d211cdd2f745e9b60419563a22bdfd
msgid "GEOS API"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:11
# d2d06537248345dc987eadea17ff718f
msgid "Background"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:14
# 6d04f07809264d128fffeac51cf27bc1
msgid "What is GEOS?"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:16
# a521e5076a5d430cac52ebfb066893d7
msgid "`GEOS`__ stands for **G**\\ eometry **E**\\ ngine - **O**\\ pen **S**\\ ource, and is a C++ library, ported from the  `Java Topology Suite`__.  GEOS implements the OpenGIS `Simple Features for SQL`__ spatial predicate functions and spatial operators. GEOS, now an OSGeo project, was initially developed and maintained by `Refractions Research`__ of Victoria, Canada."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:28
# 8313e4d76b044960bd992bcc6a9ee229
msgid "Features"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:30
# b6c8600745104c039c84014d708a6b06
msgid "GeoDjango implements a high-level Python wrapper for the GEOS library, its features include:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:33
# 883639887982438483fe6f87e9300785
msgid "A BSD-licensed interface to the GEOS geometry routines, implemented purely in Python using ``ctypes``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:35
# 9b6ad5119ce2442ab006937a3133dada
msgid "Loosely-coupled to GeoDjango.  For example, :class:`GEOSGeometry` objects may be used outside of a django project/application.  In other words, no need to have ``DJANGO_SETTINGS_MODULE`` set or use a database, etc."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:38
# 63c5ad5558ba411a9fbd2fb7f096f8c3
msgid "Mutability: :class:`GEOSGeometry` objects may be modified."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:39
# 51086cf978664acbbfea58f1ab8f77f6
msgid "Cross-platform and tested; compatible with Windows, Linux, Solaris, and Mac OS X platforms."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:45
# 9f013d1220694b3e844b4f2fb68b9074
msgid "Tutorial"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:47
# e54daf2a7c28452cadf87234d1f7de2c
msgid "This section contains a brief introduction and tutorial to using :class:`GEOSGeometry` objects."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:51
# 23cc33bbfaf74265a4c9bf4bef1d0f5e
msgid "Creating a Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:53
# 0274b077017b4a7fa269544347794c3e
msgid ":class:`GEOSGeometry` objects may be created in a few ways.  The first is to simply instantiate the object on some spatial input -- the following are examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:63
# 7c019b2696b940c2a6ff01f62cb7e325
msgid "Another option is to use the constructor for the specific geometry type that you wish to create.  For example, a :class:`Point` object may be created by passing in the X and Y coordinates into its constructor::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:70
# cc6dc73e4f2740b199d9c71ec217648f
msgid "Finally, there are :func:`fromstr` and :func:`fromfile` factory methods, which return a :class:`GEOSGeometry` object from an input string or a file::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:82
# 7b7c14af538b4baea3b7d11579cc758a
msgid "You find many ``TypeError`` or ``AttributeError`` exceptions filling your Web server's log files. This generally means that you are creating GEOS objects at the top level of some of your Python modules. Then, due to a race condition in the garbage collector, your module is garbage collected before the GEOS object. To prevent this, create :class:`GEOSGeometry` objects inside the local scope of your functions/methods."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:90
# 549f3c0f953544bbb4231f0e369ca1ff
msgid "Geometries are Pythonic"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:91
# bafc71c688ea491dbca93be2c12f74a3
msgid ":class:`GEOSGeometry` objects are 'Pythonic', in other words components may be accessed, modified, and iterated over using standard Python conventions. For example, you can iterate over the coordinates in a :class:`Point`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:99
# 8270e1ccfd9946ceadfbf1c11652a10a
msgid "With any geometry object, the :attr:`GEOSGeometry.coords` property may be used to get the geometry coordinates as a Python tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:105
# a9ccbeef0e5747d9a1e92bf38c431412
msgid "You can get/set geometry components using standard Python indexing techniques.  However, what is returned depends on the geometry type of the object.  For example, indexing on a :class:`LineString` returns a coordinate tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:117
# c7a4161408584c6199d4382d35ef242d
msgid "Whereas indexing on a :class:`Polygon` will return the ring (a :class:`LinearRing` object) corresponding to the index::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:127
# eeac860468a94bb18434cb0c9d60a3fe
msgid "In addition, coordinates/components of the geometry may added or modified, just like a Python list::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:138
# 25bbe415f7934660941f7a8a4c1e2aa8
msgid "Geometry Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:141
# 01d679298a29443d9bb325d2d6ab4680
msgid "``GEOSGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:150
# 761762ddea494e7aa66d31fcf8ac176b
msgid "This is the base class for all GEOS geometry objects.  It initializes on the given ``geo_input`` argument, and then assumes the proper geometry subclass (e.g., ``GEOSGeometry('POINT(1 1)')`` will create a :class:`Point` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:154
# 0a00a7026ed64532bcedf860e51ccf56
msgid "The following input formats, along with their corresponding Python types, are accepted:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:158
# 79ab9d4f824148db943a2ac8f6f09e2b
msgid "Format"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:158
# 1e508ab04fe84f3ba53665a40f9f6193
msgid "Input Type"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:160
# 28d784a162434809862e57f81707a160
msgid "WKT / EWKT"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:160
#: ../../ref/contrib/gis/geos.txt:161
#: ../../ref/contrib/gis/geos.txt:163
# 9d7c681f463340beaa630b2250f2fafd
# 31e570227c7e44c2aba7ceda541d8321
# aea1d7761c914b009e6200ccca12c0c4
msgid "``str`` or ``unicode``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:161
# 7d91230ed0534b7786ea10b9df63ad46
msgid "HEX / HEXEWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:162
# 5ba7899bf7de4f749d5f6bf0a830df7a
msgid "WKB / EWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:162
# 1c0a618863f343dcbd0735e0d7467376
msgid "``buffer``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:163
# 19a38e259be74daf9774d528d166f68c
msgid "GeoJSON"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:168
# 4378c409d89c446e81c28eb14bc878ea
msgid "The new 3D/4D WKT notation with an intermediary Z or M (like ``POINT Z (3, 4, 5)``) is only supported with GEOS 3.3.0 or later."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:172
# 1dd0385e4776492a9cf0457675d7fc0e
msgid "Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:176
# bf53cf47aebd427684c451fa90d1ba9f
msgid "Returns the coordinates of the geometry as a tuple."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:180
# f530cd542c984aeb9dcadf6808cf5277
msgid "Returns whether or not the set of points in the geometry is empty."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:184
# e6820fd06ea64f2dbf2fd09194cf1df9
msgid "Returns a string corresponding to the type of geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:192
# cc4488a2eac44ea1a536f223f3450e08
msgid "Returns the GEOS geometry type identification number.  The following table shows the value for each geometry type:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:196
# d3b4c1f742e3447a9412538e6c63022f
msgid "Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:196
# 5197b62a942a4816b3a49e58e5a1d8a3
msgid "ID"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:198
# 70805cd4f8354b719dcdca913f4deaaa
msgid ":class:`Point`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:198
#: ../../ref/contrib/gis/geos.txt:882
# b1777e65602444ec8e86fbedc7720a96
# dcfc30fd926a49c48c8391f7268970a9
msgid "0"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:199
# 736cb06932b3417f9e50114b8c935dc8
msgid ":class:`LineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:200
# 08a1e352982b45559d6b30609f76f803
msgid ":class:`LinearRing`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:201
# c41c2cb20eff4563b27c5f9d6686467e
msgid ":class:`Polygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:201
#: ../../ref/contrib/gis/geos.txt:906
# 32b24a03f4b14d2588a3d5b8e2d6629e
# 841743b159f4499eaf30e117357f9e4a
msgid "3"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:202
# 9031a0ca56e345129b9623917b5f21ad
msgid ":class:`MultiPoint`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:203
# 0d0adfb8f05c468b9f49743fb4b7e7a0
msgid ":class:`MultiLineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:203
# 08d49b12012f4f0a908dc24b7b3200ca
msgid "5"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:204
# 308dee407fec4b8491556daf382eef00
msgid ":class:`MultiPolygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:204
# a2433e0d5dd148f481b90f121992f957
msgid "6"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:205
# 5889ea0721d74801bcba12640ec7468b
msgid ":class:`GeometryCollection`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:205
# 01d0a78fd36a4a8996cab2bad599effc
msgid "7"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:210
# 340e172d3d9149c3bf381356ceacb3b5
msgid "Returns the number of coordinates in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:214
# 75c4ea22a69946318f8f7b4323ac5fae
msgid "Returns the number of geometries in this geometry.  In other words, will return 1 on anything but geometry collections."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:219
# d3f3bafd714d4317b438ea09f56a5d33
msgid "Returns a boolean indicating whether the geometry is three-dimensional."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:223
# 4067ec458448466bbd910a31dfde2d14
msgid "Returns a boolean indicating whether the geometry is a ``LinearRing``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:227
# 955505e80fff45e0b655f1ea929884ec
msgid "Returns a boolean indicating whether the geometry is 'simple'. A geometry is simple if and only if it does not intersect itself (except at boundary points).  For example, a :class:`LineString` object is not simple if it intersects itself. Thus, :class:`LinearRing` and :class`Polygon` objects are always simple because they do cannot intersect themselves, by definition."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:236
# ea3c64df64204daf999c48a5c45200d9
msgid "Returns a boolean indicating whether the geometry is valid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:240
# 5a0f4504ec33429aac5bd9bc55c5b1ea
msgid "Returns a string describing the reason why a geometry is invalid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:244
# 6070c2858f5049aca7257e5e34d9c00a
msgid "Property that may be used to retrieve or set the SRID associated with the geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:255
# 948e78a6facf4681a9f08b52e5b70baf
msgid "Output Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:257
# 213568d84ff448ef93d860f95ec818dd
msgid "The properties in this section export the :class:`GEOSGeometry` object into a different.  This output may be in the form of a string, buffer, or even another object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:263
# bc3b2ca9043342f3a4ab3d45452e15f4
msgid "Returns the \"extended\" Well-Known Text of the geometry.  This representation is specific to PostGIS and is a super set of the OGC WKT standard. [#fnogc]_ Essentially the SRID is prepended to the WKT representation, for example ``SRID=4326;POINT(5 23)``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:270
# 2415cbde2f014f949772ca662063c590
msgid "The output from this property does not include the 3dm, 3dz, and 4d information that PostGIS supports in its EWKT representations."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:275
# bcb685f2ef6749409fff9d93d42e414c
msgid "Returns the WKB of this Geometry in hexadecimal form.  Please note that the SRID value is not included in this representation because it is not a part of the OGC specification (use the :attr:`GEOSGeometry.hexewkb` property instead)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:286
# 6376f952d7924934902a40d37f71b572
msgid "Returns the EWKB of this Geometry in hexadecimal form.  This is an extension of the WKB specification that includes the SRID value that are a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:292
# c5dc2c1093c242fbb59c3d9a8414e43e
msgid "GEOS 3.1 is *required* if you want valid 3D HEXEWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:296
# 0bd7db0f94284b0d82ea9d5170eac673
msgid "Returns the GeoJSON representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:300
#: ../../ref/contrib/gis/geos.txt:319
#: ../../ref/contrib/gis/geos.txt:565
#: ../../ref/contrib/gis/geos.txt:579
# 8be93428cd744dca9b1f0dc2396cf242
# ba376e72b0df4a28a3cd0e81d9b84ff1
# d93f94f56e2e4488855bae9bf9b5ec21
# f60182d6e5b14b9a8e4608da44e0a7d9
msgid "Requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:304
# 9c8980883c654cc5b25d1da9967f49f7
msgid "Alias for :attr:`GEOSGeometry.json`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:308
# 8ffeabe11cfa4c96b56a6a968f08f9b3
msgid "Returns a `KML`__ (Keyhole Markup Language) representation of the geometry.  This should only be used for geometries with an SRID of 4326 (WGS84), but this restriction is not enforced."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:314
# 51a8a6983dc34d75aac629a3922d59b4
msgid "Returns an :class:`~django.contrib.gis.gdal.OGRGeometry` object correspondg to the GEOS geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:325
# bde3492730a54d439844cb63c1fb29ab
msgid "Returns the WKB (Well-Known Binary) representation of this Geometry as a Python buffer.  SRID value is not included, use the :attr:`GEOSGeometry.ewkb` property instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:337
# 011252574ba54ec1a5d7596be2934146
msgid "Return the EWKB representation of this Geometry as a Python buffer. This is an extension of the WKB specification that includes any SRID value that are a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:343
# dc8c77ddea2045259da1171025f65c61
msgid "GEOS 3.1 is *required* if you want valid 3D EWKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:347
# 9393fa3ec92c48a3839d83f0facf2c12
msgid "Returns the Well-Known Text of the geometry (an OGC standard)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:352
# f20a2cd7def540409515a259b18179d5
msgid "Spatial Predicate Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:354
# fb41101e03414b96a39ef26c7d99cf33
msgid "All of the following spatial predicate methods take another :class:`GEOSGeometry` instance (``other``) as a parameter, and return a boolean."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:360
# d5ecdd5d70194ca99db2eb7160fa8c22
msgid "Returns ``True`` if :meth:`GEOSGeometry.within` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:364
# 33388418d07a4f09b75783d3f9edcb6e
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two Geometries is ``T*T******`` (for a point and a curve,a point and an area or a line and an area) ``0********`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:370
# 1127aa1bb04a4f05b62d301cf26f6b62
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``FF*FF****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:375
# e4f1a11bb0944917b7d8e095942948e3
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``T*F**FFF*``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:380
# 610e76d5b7f5458f95d4f3ac99c9ee47
msgid "Returns true if the two geometries are exactly equal, up to a specified tolerance.  The ``tolerance`` value should be a floating point number representing the error tolerance in the comparison, e.g., ``poly1.equals_exact(poly2, 0.001)`` will compare equality to within one thousandth of a unit."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:388
# 585e9e9b4b7c4eefb9b47996689b758e
msgid "Returns ``True`` if :meth:`GEOSGeometry.disjoint` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:392
# be807195ac5d446db006678525a376bb
msgid "Returns true if the DE-9IM intersection matrix for the two geometries is ``T*T***T**`` (for two points or two surfaces) ``1*T***T**`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:398
# 333550f4e45c429db99ca952fc108565
msgid "Returns ``True`` if the elements in the DE-9IM intersection matrix for this geometry and the other matches the given ``pattern`` -- a string of nine characters from the alphabet: {``T``, ``F``, ``*``, ``0``}."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:404
# f310d0366cc344d996a2710997a17028
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``FT*******``, ``F**T*****`` or ``F***T****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:409
# aadacdbfb7e641a9bd0258b08dc48c3d
msgid "Returns ``True`` if the DE-9IM intersection matrix for the two geometries is ``T*F**F***``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:413
# 67529c8f5b8c4175bc5bf571026547d2
msgid "Topological Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:417
# 77bb683b48a4424f87a54d1cac7e29f0
msgid "Returns a :class:`GEOSGeometry` that represents all points whose distance from this geometry is less than or equal to the given ``width``. The optional ``quadsegs`` keyword sets the number of segments used to approximate a quarter circle (defaults is 8)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:424
# 8dfdaf21ab9544bfad1c1439094cceb6
msgid "Returns a :class:`GEOSGeometry` representing the points making up this geometry that do not make up other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:432
# c5acd35b3328487fa448891b845e3de2
msgid "Given a distance (float), returns the point (or closest point) within the geometry (:class:`LineString` or :class:`MultiLineString`) at that distance. The normalized version takes the distance as a float between 0 (origin) and 1 (endpoint)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:437
# bd21bca9d646459a97deee891ecf6fd1
msgid "Reverse of :meth:`GEOSGeometry.project`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:441
# a0a94a0ffd3f402f90532bdae7a7af2a
msgid "Returns a :class:`GEOSGeometry` representing the points shared by this geometry and other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:449
# 16532346be38436c936bc2f34edb550b
msgid "Returns the distance (float) from the origin of the geometry (:class:`LineString` or :class:`MultiLineString`) to the point projected on the geometry (that is to a point of the line the closest to the given point). The normalized version returns the distance as a float between 0 (origin) and 1 (endpoint)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:455
# 64cf2b6877b74e478adfd325157e505f
msgid "Reverse of :meth:`GEOSGeometry.interpolate`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:459
# b7327df3475f451fabda3ef8c33dfad9
msgid "Returns the DE-9IM intersection matrix (a string) representing the topological relationship between this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:464
# 189476e508eb4a7e879ea5a55d714c67
msgid "Returns a new :class:`GEOSGeometry`, simplified using the Douglas-Peucker algorithm to the specified tolerance.  A higher tolerance value implies less points in the output.  If no tolerance is tolerance provided, it defaults to 0."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:469
# 34591e1d3ab44ad48d4b48854f8fe9cd
msgid "By default, this function does not preserve topology - e.g., :class:`Polygon` objects can be split, collapsed into lines or disappear. :class:`Polygon` holes can be created or disappear, and lines can cross. By specifying ``preserve_topology=True``, the result will have the same dimension and number of components as the input, however, this is significantly slower."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:478
# f407657888c049979cb1bd9e2cb01083
msgid "Returns a :class:`GEOSGeometry` combining the points in this geometry not in other, and the points in other not in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:483
# 98aa71b7fb8e405ab58d4714650999d1
msgid "Returns a :class:`GEOSGeometry` representing all the points in this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:487
# d6d70295c7784c00aecf515b293f5d20
msgid "Topological Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:491
# e3fe53728165415fb3451a6f7034eea8
msgid "Returns the boundary as a newly allocated Geometry object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:495
# 71f49d47f7a94beab92e820acd0df7d3
msgid "Returns a :class:`Point` object representing the geometric center of the geometry.  The point is not guaranteed to be on the interior of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:501
# 7288ee55ad9f4d6ea5ade7b9e4d3ceeb
msgid "Returns the smallest :class:`Polygon` that contains all the points in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:506
# 609468bd891c4e5abfe444e0effafd4e
msgid "Returns a :class:`Polygon` that represents the bounding envelope of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:511
# e0f5b3470cdb4b89ace54249b1c80c43
msgid "Computes and returns a :class:`Point` guaranteed to be on the interior of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:515
# 755272931cda4f5e9a2d2caf19bb8b06
msgid "Other Properties & Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:519
# c8e07f60eed743c3a3e948e7dbd4c6da
msgid "This property returns the area of the Geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:523
# cb497f5b8fed4bc5a63cb7807a61cf10
msgid "This property returns the extent of this geometry as a 4-tuple, consisting of (xmin, ymin, xmax, ymax)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:528
# 3aff11b587814c46a2205d5f8fc76542
msgid "This method returns a :class:`GEOSGeometry` that is a clone of the original."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:532
# cd0abd3744b44496afa5f2b4cab6fd10
msgid "Returns the distance between the closest points on this geometry and the given ``geom`` (another :class:`GEOSGeometry` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:537
# 920c8b6b0a1542d29a5efdbcc2ff3e59
msgid "GEOS distance calculations are  linear -- in other words, GEOS does not perform a spherical calculation even if the SRID specifies a geographic coordinate system."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:543
# 0d4666544f414594a1fc53f5ca977339
msgid "Returns the length of this geometry (e.g., 0 for a :class:`Point`, the length of a :class:`LineString`, or the circumference of a :class:`Polygon`)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:551
# 86fc8113999a49da99c463a560d68c39
msgid "Support for prepared geometries requires GEOS 3.1."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:553
# 872693c8d3434bdeb115d17608ff12f5
msgid "Returns a GEOS ``PreparedGeometry`` for the contents of this geometry. ``PreparedGeometry`` objects are optimized for the contains, intersects, and covers operations.  Refer to the :ref:`prepared-geometries` documentation for more information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:560
# 5865a5cde6b64d4b993e87d6fcfd58bf
msgid "Returns a :class:`~django.contrib.gis.gdal.SpatialReference` object corresponding to the SRID of the geometry or ``None``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:569
# 74de14c90f2a47b3ad087a31501c69d1
msgid "Transforms the geometry according to the given coordinate transformation paramter (``ct``), which may be an integer SRID, spatial reference WKT string, a PROJ.4 string, a :class:`~django.contrib.gis.gdal.SpatialReference` object, or a :class:`~django.contrib.gis.gdal.CoordTransform` object. By default, the geometry is transformed in-place and nothing is returned. However if the ``clone`` keyword is set, then the geometry is not modified and a transformed clone of the geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:583
# 4257d699af05499e8de7bf2dd5f84929
msgid "Prior to 1.3, this method would silently no-op if GDAL was not available. Now, a :class:`~django.contrib.gis.geos.GEOSException` is raised as application code relying on this behavior is in error. In addition, use of this method when the SRID is ``None`` or less than 0 now also generates a :class:`~django.contrib.gis.geos.GEOSException`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:591
# 96f238cd47054312b8cf9b1977524961
msgid "``Point``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:595
# 7fe92d26e40f4de19701ba2d1d69ba62
msgid "``Point`` objects are instantiated using arguments that represent the component coordinates of the point or with a single sequence coordinates.  For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:603
# 5aebdb6245474e32a2ce9458f9d911f5
msgid "``LineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:607
# 59ef98f77a5f4a5e81e52e5c0e0a2ec0
msgid "``LineString`` objects are instantiated using arguments that are either a sequence of coordinates or :class:`Point` objects. For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:614
# caaa04167b2b4c718617d5ee0341ce9f
msgid "In addition, ``LineString`` objects may also be created by passing in a single sequence of coordinate or :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:621
# 73e2f8d34a144709ba25db5e0c458fc3
msgid "``LinearRing``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:625
# c1a9210c77384c9eaecdbf302c49fcd7
msgid "``LinearRing`` objects are constructed in the exact same way as :class:`LineString` objects, however the coordinates must be *closed*, in other words, the first coordinates must be the same as the last coordinates.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:632
# af76968f8a37419f8c79efca5555502e
msgid "Notice that ``(0, 0)`` is the first and last coordinate -- if they were not equal, an error would be raised."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:636
# 5a3e244076d845379c08e522203b2d90
msgid "``Polygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:640
# 431baf1178c14843927375873bffa73d
msgid "``Polygon`` objects may be instantiated by passing in one or more parameters that represent the rings of the polygon.  The parameters must either be :class:`LinearRing` instances, or a sequence that may be used to construct a :class:`LinearRing`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:652
# 24282d1e973742f0b812d31dd4b236ed
msgid "Returns a polygon object from the given bounding-box, a 4-tuple comprising (xmin, ymin, xmax, ymax)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:657
# b14ff5e03a574486b4bd507dd53c775f
msgid "Returns the number of interior rings in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:661
# dbcb98e90623430680c5d7faadc2a6b2
msgid "Note that it is possible to compare ``Polygon`` objects directly with ``<`` or ``>``, but as the comparison is made through Polygon's :class:`LineString`, it does not mean much (but is consistent and quick). You can always force the comparison with the :attr:`~GEOSGeometry.area` property::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:671
# 7401867890fd480db70155eb5bb60f02
msgid "Geometry Collections"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:674
# b5ea3bc7fec5479fb009f9f91c386b3f
msgid "``MultiPoint``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:678
# dbe309fc27594fb6868c38b2402bd514
msgid "``MultiPoint`` objects may be instantiated by passing in one or more :class:`Point` objects as arguments, or a single sequence of :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:686
# 7c9b615493a8400789cc03dcd763af59
msgid "``MultiLineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:690
# 077fb8f7453f4217b7e7336110a7727d
msgid "``MultiLineString`` objects may be instantiated by passing in one or more :class:`LineString` objects as arguments, or a single sequence of :class:`LineString` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:701
# 2a114fedab0f46dcb89c4f01a72bff14
msgid "Returns a :class:`LineString` representing the line merge of all the components in this ``MultiLineString``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:706
# 67492f3abef3424a9fdf0c9814a0b6e8
msgid "``MultiPolygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:710
# ff893710717249369550b9d29b34d3f8
msgid "``MultiPolygon`` objects may be instantiated by passing one or more :class:`Polygon` objects as arguments, or a single sequence of :class:`Polygon` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:721
# 188162fd81ca48f78847e235d202de1b
msgid "Returns a :class:`Polygon` that is the union of all of the component polygons in this collection.  The algorithm employed is significantly more efficient (faster) than trying to union the geometries together individually. [#fncascadedunion]_"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:728
# b6a9c43c19e1487caf7ef1a0a6e54400
msgid "GEOS 3.1 is *required* to peform cascaded unions."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:731
# 5b047e798231484e90525e4b98d137c9
msgid "``GeometryCollection``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:735
# 99c0675610584e3e944e564fdffc1af4
msgid "``GeometryCollection`` objects may be instantiated by passing in one or more other :class:`GEOSGeometry` as arguments, or a single sequence of :class:`GEOSGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:746
# ad9ccd448bc84a48a35ba76ac544693d
msgid "Prepared Geometries"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:748
# 9f33cc17ecd64386a3be769a08b244c2
msgid "In order to obtain a prepared geometry, just access the :attr:`GEOSGeometry.prepared` property.  Once you have a ``PreparedGeometry`` instance its spatial predicate methods, listed below, may be used with other ``GEOSGeometry`` objects.  An operation with a prepared geometry can be orders of magnitude faster -- the more complex the geometry that is prepared, the larger the speedup in the operation.  For more information, please consult the `GEOS wiki page on prepared geometries <http://trac.osgeo.org/geos/wiki/PreparedGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:758
# 17a72f89e82d4a5e81bbc61a74f825e4
msgid "GEOS 3.1 is *required* in order to use prepared geometries."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:769
# bfd544412bee438197c6454cf55d3c97
msgid "``PreparedGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:773
# 04c7715b9d914955af5e07680c954450
msgid "All methods on ``PreparedGeometry`` take an ``other`` argument, which must be a :class:`GEOSGeometry` instance."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:785
# 2e2bfeae08304846a6d2636a63919600
msgid "Geometry Factories"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:812
# 83e774835a0f4dd3a9865f3c0980af50
msgid "I/O Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:815
# 00551afb78cd4b38ba1e0f122b10ac29
msgid "Reader Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:817
# b7ad7b8639e04193831a83df8d746056
msgid "The reader I/O classes simply return a :class:`GEOSGeometry` instance from the WKB and/or WKT input given to their ``read(geom)`` method."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:839
# b88d1f110fb148a4b71bf6369081d7d5
msgid "Writer Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:841
# 4ea7d1beb7e3428fbb7ca4a8368a54d5
msgid "All writer objects have a ``write(geom)`` method that returns either the WKB or WKT of the given geometry.  In addition, :class:`WKBWriter` objects also have properties that may be used to change the byte order, and or include the SRID value (in other words, EWKB)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:848
# 09b6f914466e4f2eb86f94ba5cc6fa38
msgid "``WKBWriter`` provides the most control over its output.  By default it returns OGC-compliant WKB when it's ``write`` method is called.  However, it has properties that allow for the creation of EWKB, a superset of the WKB standard that includes additional information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:855
# 68437e17fdcf415a8766a6cc80e99c99
msgid "Returns the WKB of the given geometry as a Python ``buffer`` object. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:866
# 82ab2d73dc3247a190fd5e277f230e57
msgid "Returns WKB of the geometry in hexadecimal.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:876
# db4ee563e3a14de4a6289fe3d77e3d79
msgid "This property may be be set to change the byte-order of the geometry representation."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:880
# cbbaac8ba3244ff9abf1a47923b90d65
msgid "Byteorder Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:882
# 25335543eb3e4b3a95495ca065548b42
msgid "Big Endian (e.g., compatible with RISC systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:883
# 7c974c1bfc974ea2ac12200b42475173
msgid "Little Endian (e.g., compatible with x86 systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:898
# ac00161d340d4dca8a03a562d106c207
msgid "This property may be set to change the output dimension of the geometry representation.  In other words, if you have a 3D geometry then set to 3 so that the Z value is included in the WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:903
# b0e54428fbe7473fa916342412d8b176
msgid "Outdim Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:905
# abe243fc785d42a1923ca399037bef7a
msgid "The default, output 2D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:906
# d72b04790cb64feb85a4b910ffd92f05
msgid "Output 3D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:924
# eb0131c136824c189aafd15c776fe709
msgid "Set this property with a boolean to indicate whether the SRID of the geometry should be included with the WKB representation.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:940
# c3265a0c7d9c485597b785d0fadd1ded
msgid "Returns the WKT of the given geometry. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:950
# 58a979411aa44918ae3549046db02500
msgid "*See* `PostGIS EWKB, EWKT and Canonical Forms <http://postgis.refractions.net/docs/using_postgis_dbmanagement.html#EWKB_EWKT>`_, PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:951
# 24baa7dfb2104385b9605c91eb1daf0e
msgid "For more information, read Paul Ramsey's blog post about `(Much) Faster Unions in PostGIS 1.4 <http://blog.cleverelephant.ca/2009/01/must-faster-unions-in-postgis-14.html>`_ and Martin Davis' blog post on `Fast polygon merging in JTS using Cascaded Union <http://lin-ear-th-inking.blogspot.com/2007/11/fast-polygon-merging-in-jts-using.html>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:959
# e3ab857315194d35ab90b5ebbee2aad0
msgid "GEOS_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:961
# 82e1a7aa9a3e448bb2042e4b800ba059
msgid "A string specifying the location of the GEOS C library.  Typically, this setting is only used if the GEOS C library is in a non-standard location (e.g., ``/home/bob/lib/libgeos_c.so``)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:967
#: ../../ref/contrib/gis/install.txt:191
#: ../../ref/contrib/gis/install/geolibs.txt:139
# bdeb97abf1124c4387b4e0e734c163be
# ec2b149b210643889fce47c9e8924658
# d6926ef592fa4639aa830da804042c49
msgid "The setting must be the *full* path to the **C** shared library; in other words you want to use ``libgeos_c.so``, not ``libgeos.so``."
msgstr ""

#: ../../ref/contrib/gis/index.txt:5
# bc0c08b836d345c1b6d7a495c66b4cae
msgid "GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/index.txt:10
# 3e62bd613d4f4fb0b1a99c0093955afa
msgid "GeoDjango intends to be a world-class geographic Web framework. Its goal is to make it as easy as possible to build GIS Web applications and harness the power of spatially enabled data."
msgstr ""

#: ../../ref/contrib/gis/install.txt:5
#: ../../ref/contrib/gis/install/index.txt:5
# 1a89c7e366934e7380b009fe70307963
# cd219ccd148c44499c53ba070e53e06a
msgid "GeoDjango Installation"
msgstr ""

#: ../../ref/contrib/gis/install.txt:11
#: ../../ref/contrib/gis/install/index.txt:11
# fe3c86534b98412eb00033e08eb59727
# 2c876dc58a104bb1be0cf98314545804
msgid "In general, GeoDjango installation requires:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:13
#: ../../ref/contrib/gis/install/index.txt:13
# 1c90cd23103843e4bbe89734efc0c8a2
# 65261db91383463581653a718dd9cd95
msgid ":ref:`Python and Django <django>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:14
#: ../../ref/contrib/gis/install/index.txt:14
# d35ec53e2f8e45b3a230c560941ac9cf
# 0385467e13534af7ae3affebdeddcd73
msgid ":ref:`spatial_database`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:15
#: ../../ref/contrib/gis/install/index.txt:15
# 1c7fd22fcade48d8b17bc3f67c0099a4
# 0f3a4a3be77e4f7cb630df4df6452752
msgid ":ref:`geospatial_libs`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:17
# 3c3ce3256a744837b1d0c8298bf990c4
msgid "Details for each of the requirements and installation instructions are provided in the sections below.   In addition, platform-specific instructions are available for:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:21
#: ../../ref/contrib/gis/install/index.txt:21
# 9faf161d45ec4dfcbe5970e9f0da1ab6
# 745b2a9aac934d6e94fa1cc29ee7f2c2
msgid ":ref:`macosx`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:22
# 039c0cf6f4be44e1ad778c32bd5ace00
msgid ":ref:`ubuntudebian`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:23
#: ../../ref/contrib/gis/install/index.txt:22
# 33bfe5960c4248a9ab6f5956dd010024
# 1bc4a0a9d0a64888b99ec177f25a4f7e
msgid ":ref:`windows`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:27
# 6630500607854fd0b657fed1ded5b884
msgid "Because GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren't available for your platform, :ref:`installation from source <build_from_source>` may be required. When compiling the libraries from source, please follow the directions closely, especially if you're a beginner."
msgstr ""

#: ../../ref/contrib/gis/install.txt:35
#: ../../ref/contrib/gis/install/index.txt:33
# 09b49e95c447403e921fa92f20fdb343
# 5d201538844e42939d2d9cccca2c79c0
msgid "Requirements"
msgstr ""

#: ../../ref/contrib/gis/install.txt:40
#: ../../ref/contrib/gis/install/index.txt:38
# 607e7122f92a41ca9a6f1be083052410
# ffd33bb0aa0948d29e5ac87a95f4d64e
msgid "Python and Django"
msgstr ""

#: ../../ref/contrib/gis/install.txt:42
#: ../../ref/contrib/gis/install/index.txt:40
# 56432c06f01c405d93b4b5d9d099f367
# 70d955e61d284ff685ca2a67abd26c3e
msgid "Because GeoDjango is included with Django, please refer to Django's :ref:`installation instructions <installing-official-release>` for details on how to install."
msgstr ""

#: ../../ref/contrib/gis/install.txt:50
#: ../../ref/contrib/gis/install/index.txt:48
# 0250af2aa0af4bd7938d47b4c5552bde
# fa13496ecc58435fa6e2f0e183ef863f
msgid "Spatial database"
msgstr ""

#: ../../ref/contrib/gis/install.txt:51
#: ../../ref/contrib/gis/install/index.txt:49
# 874bcdf3444643aba083650fac85780b
# 56ba46a6c2e048af87f2fc1bb8cf996d
msgid "PostgreSQL (with PostGIS), MySQL, Oracle, and SQLite (with SpatiaLite) are the spatial databases currently supported."
msgstr ""

#: ../../ref/contrib/gis/install.txt:56
#: ../../ref/contrib/gis/install/index.txt:54
# 223d281fe9e14099a244c9c2e53bd123
# 0fd18c55d2f04a1ea429ad020ee06d7c
msgid "PostGIS is recommended, because it is the most mature and feature-rich open source spatial database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:59
#: ../../ref/contrib/gis/install/index.txt:57
# 23dc84ce4a2a46508576b540f52b1af2
# 156f234ff274405ca43b1ed4c5b6a372
msgid "The geospatial libraries required for a GeoDjango installation depends on the spatial database used.  The following lists the library requirements, supported versions, and any notes for each of the supported database backends:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
#: ../../ref/contrib/gis/install/index.txt:62
# b678351ba0c4482b95658c68e7d1a2b3
# ff145a799b1048c0b17c0aab6fc4f6f3
msgid "Database"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
#: ../../ref/contrib/gis/install/index.txt:62
# fb219c90d27845e5a04340ee416d2f9a
# 7fc389e1377743558b2a6739d22f889d
msgid "Library Requirements"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
#: ../../ref/contrib/gis/install.txt:80
#: ../../ref/contrib/gis/install/geolibs.txt:11
#: ../../ref/contrib/gis/install/index.txt:62
# ebe8acd92f6340a6b286db8a73e16c2d
# 9043c470e25d473ea2b153384a1183c0
# 216ae22b64a3407390275cc941faba96
# b05413d61c7b4f32acc705374160ea30
msgid "Supported Versions"
msgstr ""

#: ../../ref/contrib/gis/install.txt:64
#: ../../ref/contrib/gis/install/index.txt:62
# 0b490a676f0140fc88e5af550676e1b1
# 5d84d8baab1d401c8d1f0759857dc485
msgid "Notes"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
#: ../../ref/contrib/gis/install.txt:1190
#: ../../ref/contrib/gis/install/index.txt:64
#: ../../ref/contrib/gis/install/index.txt:416
# 74c72981b22d4eb29aa7bb41fd1f47db
# e4affeb40c664a549cd73e8bfd9bcbbf
# c790e8d695fc4c71ae114bd1c6735bb0
# 9da72cf8486b44008ebae3c3855a38f4
msgid "PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
#: ../../ref/contrib/gis/install/index.txt:64
# ee455d16e20b4497881011fa41810a07
# 37ed43350e7a4d20ba107918de701dd7
msgid "GEOS, PROJ.4, PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
# 9d9b4cbc8e03486bbfad534f6bd5289c
msgid "8.1+"
msgstr ""

#: ../../ref/contrib/gis/install.txt:66
#: ../../ref/contrib/gis/install/index.txt:64
# 756153f345344dc492d5ea93d41a1bfe
# 1bbf8c0e26224d5da7911614d2442f0f
msgid "Requires PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:67
#: ../../ref/contrib/gis/install.txt:68
#: ../../ref/contrib/gis/install.txt:136
#: ../../ref/contrib/gis/install.txt:822
#: ../../ref/contrib/gis/install/geolibs.txt:84
#: ../../ref/contrib/gis/install/index.txt:65
#: ../../ref/contrib/gis/install/index.txt:66
#: ../../ref/contrib/gis/install/index.txt:298
# 4e26c22159854085885737aa8a215b4f
# c19dc9eb9e4c44de8c800d8006de9d86
# 7907d50363584045b12b97ed93be115f
# 625e1749ca7b44e58828ba86dd8d1c0c
# e63e5c4c85a34c259c58684baf8acecb
# 8e9a13a16721491f97e2f813e2258bf4
# fc12095c8fc24c2885f64591646403ad
# 8920d9f5c914452da8399424bdfad3c2
msgid "GEOS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:67
#: ../../ref/contrib/gis/install/index.txt:65
# 722692c2dd57442b9eb9d36b0bd5c3ac
# af4b959b124847489b796e34fc992f7d
msgid "5.x"
msgstr ""

#: ../../ref/contrib/gis/install.txt:67
#: ../../ref/contrib/gis/install/index.txt:65
# 1d12cd6691374c1890ab4cc51c3cecf5
# fc5dc15faba94b13b2540db1298f51b2
msgid "Not OGC-compliant; limited functionality."
msgstr ""

#: ../../ref/contrib/gis/install.txt:68
#: ../../ref/contrib/gis/install/index.txt:66
# 85433b83c7be46609a227c6d3d4af158
# 49edc767fa614ec0b2c9cbf401089298
msgid "10.2, 11"
msgstr ""

#: ../../ref/contrib/gis/install.txt:68
#: ../../ref/contrib/gis/install/index.txt:66
# 5f3c2e5a2c984422a99c43e3f05ae76c
# 81ae89373db74d5586687c3def570df1
msgid "XE not supported; not tested with 9."
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
#: ../../ref/contrib/gis/install.txt:384
#: ../../ref/contrib/gis/install/index.txt:67
#: ../../ref/contrib/gis/install/spatialite.txt:31
# 0051ec94917747218958e8c3caaba85d
# 9a318bbf828944fe9b1891daf41a5e5d
# c2d037ccee6a4fc79d51f8902b06e692
# 1e6564891c984123b61b6e3d7312d390
msgid "SQLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
#: ../../ref/contrib/gis/install/index.txt:67
# cc55d5a54212474a8abf0a182c2fae1f
# 37553e154efa47bfa720c3b6f393f153
msgid "GEOS, GDAL, PROJ.4, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
#: ../../ref/contrib/gis/install/index.txt:67
# 6ae6991af890449fb1280560dcaf87c1
# 9eab2e0e064548e699257edc08011cfc
msgid "3.6.+"
msgstr ""

#: ../../ref/contrib/gis/install.txt:69
# e85dbea054364eee818fd5236474cbf2
msgid "Requires SpatiaLite 2.3+, pysqlite2 2.5+, and Django 1.1."
msgstr ""

#: ../../ref/contrib/gis/install.txt:75
#: ../../ref/contrib/gis/install/index.txt:79
# b1e65a2642b142939417bd0ea410c3c1
# 35eaa2c66487474dbb62da0852b97356
msgid "Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install.txt:76
#: ../../ref/contrib/gis/install/geolibs.txt:7
# 651c44ccf1384088ab61a3fc2d7c6a6c
# 0b66104421c348cdb9edcba6366940e6
msgid "GeoDjango uses and/or provides interfaces for the following open source geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:80
#: ../../ref/contrib/gis/install/geolibs.txt:11
# 7103ecda28534af39f13465fb48bfacd
# b9a505632570469986319fe6529fdc74
msgid "Program"
msgstr ""

#: ../../ref/contrib/gis/install.txt:80
#: ../../ref/contrib/gis/install/geolibs.txt:11
# 9ea6cf7ccb194cc29eacaab3aeaa05db
# e3efd922abef4d6b861ac4d523150fb1
msgid "Required"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
#: ../../ref/contrib/gis/install/geolibs.txt:13
# ad8230c1cece4037bf2e9258b2635bc4
# 98873c95192a43d09c5cd9b1b841a356
msgid ":ref:`GEOS <ref-geos>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
#: ../../ref/contrib/gis/install/geolibs.txt:13
# 30b34ae7bb3d4f7faa721b57d7d18f41
# ed7e2e5967fb417d947e3bbc55de6069
msgid "Geometry Engine Open Source"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
#: ../../ref/contrib/gis/install/geolibs.txt:13
# 15f11243ce994ca498fc098c8661732f
# 282dbf77596f4e7c874deb2de38e7e4a
msgid "Yes"
msgstr ""

#: ../../ref/contrib/gis/install.txt:82
#: ../../ref/contrib/gis/install/geolibs.txt:13
# 5bff252c2a8649859834e7462606e7a7
# 0ebdbbd1adff412c8fd6b4936ecab694
msgid "3.3, 3.2, 3.1, 3.0"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
#: ../../ref/contrib/gis/install/geolibs.txt:14
# 6630ef235ede4064b5585d0a44c79a10
# e0cb4f67a1ca450f89021b419b5acaa3
msgid "`PROJ.4`_"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
#: ../../ref/contrib/gis/install/geolibs.txt:14
# afaa507178c445b2865a55cd1ef6bff6
# ee4b0ab9aa984ac890f316402c046ea7
msgid "Cartographic Projections library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
#: ../../ref/contrib/gis/install/geolibs.txt:14
# 6e05d7d793444c6ea4a23d6e4386acfb
# ef1383fef0d443c98059f3cd4c1a42e7
msgid "Yes (PostgreSQL and SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:83
# 98bf352c277e44979fb9706b4a1ecc83
msgid "4.7, 4.6, 4.5, 4.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
#: ../../ref/contrib/gis/install/geolibs.txt:15
# 2caac68d5a7b43f2892c12ec170fbcbb
# 562947e190b0401eba956e75d78ed54e
msgid ":ref:`GDAL <ref-gdal>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
#: ../../ref/contrib/gis/install/geolibs.txt:15
# 417412004133462a833fbf4f280a35e9
# 7c55892d0fa04e6f88fc8e377c8ddfef
msgid "Geospatial Data Abstraction Library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
#: ../../ref/contrib/gis/install/geolibs.txt:15
# 927c22b300dc40b58de708be2bcaafdd
# 0911fd6fa0ea494982a296d189b625ec
msgid "No (but, required for SQLite)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:84
# eb2c2badce6949d79f41cee131043a0f
msgid "1.8, 1.7, 1.6, 1.5, 1.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
#: ../../ref/contrib/gis/install/geolibs.txt:16
# cbcc9ba316e64c048d127555089c839c
# 4c8696cfc6144ec2bc2d7adc7cd0a691
msgid ":ref:`GeoIP <ref-geoip>`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
#: ../../ref/contrib/gis/install/geolibs.txt:16
# 9bcedf87100c4675953b59363e7acf71
# 5255a8c0da8b4e1cad412b5e487cb92e
msgid "IP-based geolocation library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
#: ../../ref/contrib/gis/install/geolibs.txt:16
# 6f657218b2a54b16a96d1f46d8074556
# b72af4d688454da78669b7cdcfce3320
msgid "No"
msgstr ""

#: ../../ref/contrib/gis/install.txt:85
#: ../../ref/contrib/gis/install.txt:557
#: ../../ref/contrib/gis/install/geolibs.txt:16
#: ../../ref/contrib/gis/install/postgis.txt:132
# 9cf821ae72fb40ee916b17f34dafb9d3
# 78589f7a36bc4b48bdde78c198d1f836
# 3731e0f8b788419abd30db850e438c35
# 2a19c3dc48944ed1b5f78c1b665c02f9
msgid "1.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
#: ../../ref/contrib/gis/install/geolibs.txt:17
# f397617ea32e4b9db63801649b36058d
# dced4ea865f04a69b361901e5f05c44c
msgid "`PostGIS`__"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
#: ../../ref/contrib/gis/install/geolibs.txt:17
# ad078b4439ce41f997e8bf02fc5ef0a4
# 7346f02bf4014bdfb6ed5a7987a0bee2
msgid "Spatial extensions for PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
#: ../../ref/contrib/gis/install/geolibs.txt:17
# 3c77d356837646f0a10ae1746e0aeae4
# 5b9ea101e0b44168b53542df96e48630
msgid "Yes (PostgreSQL only)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:86
# 3e6e633334b14206a232fca0ef26f852
msgid "1.5, 1.4, 1.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
#: ../../ref/contrib/gis/install/geolibs.txt:18
# c628e713766b45faab9d9fa0a53b4856
# 1e5d85907a2a43b793d7f2ecdc34804f
msgid "`SpatiaLite`__"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
#: ../../ref/contrib/gis/install/geolibs.txt:18
# c2ff12db00cb40a2bc69bd1774dec082
# aeffaa91fdaf478fa15cc87b9e00fbf2
msgid "Spatial extensions for SQLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
#: ../../ref/contrib/gis/install/geolibs.txt:18
# 4aafd286bdcc4bf2ac2b2199bb57bf4b
# 2c0d62cc3a734f61a67decb2cfbbfac8
msgid "Yes (SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:87
#: ../../ref/contrib/gis/install/geolibs.txt:18
# 86da430ccb874ac6af3c1bf191755c1a
# 1c46d3bb64454154928fcfc1bae10535
msgid "3.0, 2.4, 2.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:92
#: ../../ref/contrib/gis/install/geolibs.txt:23
# 4f30fba51a764643aa79702c733fd4a3
# 591cd9b547ce4577a51ebefdc6b7aa83
msgid "While :ref:`gdalbuild` is technically not required, it is *recommended*. Important features of GeoDjango (including the :ref:`ref-layermapping`, geometry reprojection, and the geographic admin) depend on its functionality."
msgstr ""

#: ../../ref/contrib/gis/install.txt:99
#: ../../ref/contrib/gis/install/geolibs.txt:30
# ef78e54042ef4d1eaef811d43996838f
# 4b7c4dd313af410a825bd9bdef01db1c
msgid "The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently of Django.  In other words, no database or settings file required -- just import them as normal from :mod:`django.contrib.gis`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:110
#: ../../ref/contrib/gis/install/geolibs.txt:58
#: ../../ref/contrib/gis/install/postgis.txt:27
# 71507cf9506e44dc909e6377c4a5acd5
# bbffa858c654472ea32d807eb2295a01
# 9b54ca88926d4eebbf489e7bf2fdf300
msgid "Building from source"
msgstr ""

#: ../../ref/contrib/gis/install.txt:112
#: ../../ref/contrib/gis/install/geolibs.txt:60
# f4e1a0315ff245dda3ff9c0d48fc3d8d
# d20e04a2f6f9423298d69e19edc437f5
msgid "When installing from source on UNIX and GNU/Linux systems, please follow the installation instructions carefully, and install the libraries in the given order.  If using MySQL or Oracle as the spatial database, only GEOS is required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:119
#: ../../ref/contrib/gis/install/geolibs.txt:67
# 196be113c130443980f998023a6fe95a
# b67960db8f134a0dbe5eed0046421e35
msgid "On Linux platforms, it may be necessary to run the ``ldconfig`` command after installing each library.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:127
#: ../../ref/contrib/gis/install/geolibs.txt:75
# 0bbd44834dc2404bbb280d18ae9bdbd6
# 1aa0dc75c7ab4dad8eb56d1c41f8e30e
msgid "OS X users are required to install `Apple Developer Tools`_ in order to compile software from source.  This is typically included on your OS X installation DVDs."
msgstr ""

#: ../../ref/contrib/gis/install.txt:138
#: ../../ref/contrib/gis/install/geolibs.txt:86
# ea88400233b44f52b1eb92b2ebc6f73a
# cdb5817905984470be995093cf01e880
msgid "GEOS is a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it's behind the \"lazy\" geometries).  Specifically, the C API library is called (e.g., ``libgeos_c.so``) directly from Python using ctypes."
msgstr ""

#: ../../ref/contrib/gis/install.txt:143
# a1c16eb558da4a48bfa14dc8b7c5daa9
msgid "First, download GEOS 3.2 from the refractions Web site and untar the source archive::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:149
#: ../../ref/contrib/gis/install/geolibs.txt:97
# 265a097f2bc04125a7c0e1a28a03c95d
# 8f2d7605158543ccb4931c26c3751017
msgid "Next, change into the directory where GEOS was unpacked, run the configure script, compile, and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:159
#: ../../ref/contrib/gis/install.txt:300
#: ../../ref/contrib/gis/install.txt:655
#: ../../ref/contrib/gis/install/geolibs.txt:107
#: ../../ref/contrib/gis/install/geolibs.txt:211
#: ../../ref/contrib/gis/install/index.txt:130
#: ../../ref/contrib/gis/layermapping.txt:199
# 6e928f74c4544463ae2a6adb79665922
# 66460bec85c94073b4c555faaf78e46e
# 6012125b00154b5e8d1ea1feeb34e062
# fdc6c5c7087b43be8ce471666245e309
# 23fadc6cf97d4d088767aad3c9bd09f9
# 8a4f47a6e97040d78569810559379ca1
# 6ea0a4b6aec34270b14d29e24fa0e442
msgid "Troubleshooting"
msgstr ""

#: ../../ref/contrib/gis/install.txt:162
#: ../../ref/contrib/gis/install/geolibs.txt:110
# 673159f4b49941cdb73c84e73008a7a7
# 136538c21df643e39d620b1c7ca250af
msgid "Can't find GEOS library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:164
#: ../../ref/contrib/gis/install/geolibs.txt:112
# 140a6ff76bc8433ba98369d2388b648a
# 72e2ce83209c48a7a835273a5084fa4d
msgid "When GeoDjango can't find GEOS, this error is raised:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:170
#: ../../ref/contrib/gis/install/geolibs.txt:118
# 0a7c2f651926428997ddb17af76f9a42
# 54e890a021b1491da0a23d40b3c26a01
msgid "The most common solution is to properly configure your :ref:`libsettings` *or* set :ref:`geoslibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install.txt:173
#: ../../ref/contrib/gis/install/geolibs.txt:121
# fea238e67ef54c879c9ac24546f9554c
# fc0f40d41e164d2e80c1a2012007d79e
msgid "If using a binary package of GEOS (e.g., on Ubuntu), you may need to :ref:`binutils`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:178
#: ../../ref/contrib/gis/install/geolibs.txt:126
# 831aa2762b024a00b44dbbaf276e2376
# 3769c761d778440d9193305bdfb5cea8
msgid "``GEOS_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:180
#: ../../ref/contrib/gis/install/geolibs.txt:128
# 82b67b9655674af79971ea6e6be1aa0a
# eb5cec540f3045c99d20fe8c51bbb82b
msgid "If your GEOS library is in a non-standard location, or you don't want to modify the system's library path then the :setting:`GEOS_LIBRARY_PATH` setting may be added to your Django settings file with the full path to the GEOS C library.  For example:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:197
#: ../../ref/contrib/gis/install/geolibs.txt:147
# a51238dbef6143bea0531aba192ed70f
# c703f1beb80c47c38363215f7abfbb03
msgid "PROJ.4"
msgstr ""

#: ../../ref/contrib/gis/install.txt:199
#: ../../ref/contrib/gis/install/geolibs.txt:149
# 50b6d3575ba2470481c17d78c1d88edf
# a5a7bfa5162147ce9b5caa5c70106d3e
msgid "`PROJ.4`_ is a library for converting geospatial data to different coordinate reference systems."
msgstr ""

#: ../../ref/contrib/gis/install.txt:202
#: ../../ref/contrib/gis/install/geolibs.txt:152
# 067ea36b139243c9b8eb7d7db78b520a
# 82091d5cddf64ecaa6f92828507de089
msgid "First, download the PROJ.4 source code and datum shifting files [#]_::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:207
#: ../../ref/contrib/gis/install/geolibs.txt:157
# e5e78b3198ff4577be373989f85de4c1
# ad15fb08cafa48e8803e8dd44291dc19
msgid "Next, untar the source code archive, and extract the datum shifting files in the ``nad`` subdirectory.  This must be done *prior* to configuration::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:215
#: ../../ref/contrib/gis/install/geolibs.txt:165
# dd1aa6c5e0854de9bec208dbdeff8ce8
# fd9c6b3aacf04f9ba373f928655740d9
msgid "Finally, configure, make and install PROJ.4::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:227
# 6368b6ca619c4dc883bb7672bfdd9be6
msgid "`PostGIS`__ adds geographic object support to PostgreSQL, turning it into a spatial database. :ref:`geosbuild` and :ref:`proj4` should be installed prior to building PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:233
#: ../../ref/contrib/gis/install/postgis.txt:14
# a39979f5221a421d97d6d7995f661a19
# a439c60270ec4805a07bd69830bb6138
msgid "The `psycopg2`_ module is required for use as the database adaptor when using GeoDjango with PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:238
#: ../../ref/contrib/gis/install/postgis.txt:29
# 0300b0f00a764f85b95e710c76fc40f2
# fbb0d495aa8246d49df5ab089f28f305
msgid "First download the source archive, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:244
#: ../../ref/contrib/gis/install/postgis.txt:35
# 59cdddfddaba46ab9ac122fd9d3ae23c
# e732abd7ab024928bf16163687db80d5
msgid "Next, configure, make and install PostGIS::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:248
#: ../../ref/contrib/gis/install/postgis.txt:39
# 93f1ef5d39d74f848a64f06788c2a5e3
# 3816c0dcb25945dd88c6a5a5d702de85
msgid "Finally, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:256
# e4c463096529452b92d99f1445f3b493
msgid "GeoDjango does not automatically create a spatial database.  Please consult the section on :ref:`spatialdb_template` for more information."
msgstr ""

#: ../../ref/contrib/gis/install.txt:264
#: ../../ref/contrib/gis/install.txt:824
#: ../../ref/contrib/gis/install/geolibs.txt:175
#: ../../ref/contrib/gis/install/index.txt:300
# 03d5b0a026fd4e8197f2e34a9963301f
# c4beecdde7d242d681cdb5333e87ea8a
# fde35c5dd8dd4134b1efaee1910ae9aa
# d4c664dfc2e048278fb10912fca3b84b
msgid "GDAL"
msgstr ""

#: ../../ref/contrib/gis/install.txt:266
#: ../../ref/contrib/gis/install/geolibs.txt:177
# dac9c773f91841ceb7cdc0ff6ff9ec8a
# 7af8fb5473ad43b38ff94fe8409db15b
msgid "`GDAL`__ is an excellent open source geospatial library that has support for reading most vector and raster spatial data formats.  Currently, GeoDjango only supports :ref:`GDAL's vector data <ref-gdal>` capabilities [#]_. :ref:`geosbuild` and :ref:`proj4` should be installed prior to building GDAL."
msgstr ""

#: ../../ref/contrib/gis/install.txt:271
#: ../../ref/contrib/gis/install/geolibs.txt:182
# 3add15ba7af943169e116f24b05ca6d4
# ea73bece831e403086ebea81d760f51a
msgid "First download the latest GDAL release version and untar the archive::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:277
#: ../../ref/contrib/gis/install/geolibs.txt:188
# 48dcd74cd4a84dd4b378055439358aa2
# a29235b0157244edad695c6d2ad36243
msgid "Configure, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:286
#: ../../ref/contrib/gis/install/geolibs.txt:197
# 04fdc8f3858141a0931f4eb89a05aa14
# 10cabbcefe92438ea94f33f38f8edfe6
msgid "Because GeoDjango has it's own Python interface, the preceding instructions do not build GDAL's own Python bindings.  The bindings may be built by adding the ``--with-python`` flag when running ``configure``.  See `GDAL/OGR In Python`__ for more information on GDAL's bindings."
msgstr ""

#: ../../ref/contrib/gis/install.txt:291
#: ../../ref/contrib/gis/install/geolibs.txt:202
# f3e7e109cc2e439fa47ddd0ae6cb1c2a
# 8dfa9e8bf3e0405a9c6cafca5aaf2210
msgid "If you have any problems, please see the troubleshooting section below for suggestions and solutions."
msgstr ""

#: ../../ref/contrib/gis/install.txt:303
#: ../../ref/contrib/gis/install/geolibs.txt:214
# 004a015d47c54ab4b7a45b12f32327f8
# c19d6c62c0614a52b5bdeb09187740e8
msgid "Can't find GDAL library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:305
#: ../../ref/contrib/gis/install/geolibs.txt:216
# 099878f3e3c74f07894e2d152b5fb137
# 064abbcf09d6447fb186573cf0a8ff00
msgid "When GeoDjango can't find the GDAL library, the ``HAS_GDAL`` flag will be false:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:314
#: ../../ref/contrib/gis/install/geolibs.txt:225
# df12449690644af0a8c36d2671bc1178
# b4cfd2c0770e4458ba3959db83f43ebc
msgid "The solution is to properly configure your :ref:`libsettings` *or* set :ref:`gdallibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install.txt:320
#: ../../ref/contrib/gis/install/geolibs.txt:231
# 66f265f654db436c9ecf2e21a6b709dd
# 70b4175932014d99bac81b4af3dbb55a
msgid "``GDAL_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:322
#: ../../ref/contrib/gis/install/geolibs.txt:233
# 5afbd86e805d4923b7f4d80d705ad12d
# 789c6b3fcfde4a11b930a7f67c496ac3
msgid "If your GDAL library is in a non-standard location, or you don't want to modify the system's library path then the :setting:`GDAL_LIBRARY_PATH` setting may be added to your Django settings file with the full path to the GDAL library.  For example:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:334
#: ../../ref/contrib/gis/install/geolibs.txt:245
# 697d12b4184540bf828613c090a7ae95
# 7dd13aa9c7f54ded82dca1680f130ed7
msgid "Can't find GDAL data files (``GDAL_DATA``)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:336
#: ../../ref/contrib/gis/install/geolibs.txt:247
# 2ddaa4c418f448aeb4267d3b27230e89
# e83b2601dfdd46939018bd7e62671fdb
msgid "When installed from source, GDAL versions 1.5.1 and below have an autoconf bug that places data in the wrong location. [#]_   This can lead to error messages like this:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:346
#: ../../ref/contrib/gis/install/geolibs.txt:257
# ea950807ccc44aff9e0a70ce4c619b55
# dcecfb09d4cd4d7aa5c7a1a9f571b4cf
msgid "The solution is to set the ``GDAL_DATA`` environment variable to the location of the GDAL data files before invoking Python  (typically ``/usr/local/share``; use ``gdal-config --datadir`` to find out). For example::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:353
#: ../../ref/contrib/gis/install/geolibs.txt:264
# 7f7c28b6f20a413a9617601f088bd3d4
# 6a9e3b92fefe4391a8b719e6bb0fc347
msgid "If using Apache, you may need to add this environment variable to your configuration file:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:367
#: ../../ref/contrib/gis/install/spatialite.txt:163
# c17b2be1cbe648a3a7982d2c3f25b9f8
# 8924a6e05f9d477da7a559553fe6ed70
msgid "Mac OS X users should follow the instructions in the :ref:`kyngchaos` section, as it is much easier than building from source."
msgstr ""

#: ../../ref/contrib/gis/install.txt:370
# afc7e4d1c4f24c4f8caac967ef92f69c
msgid "`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-featured spatial database.  Because SpatiaLite has special requirements, it typically requires SQLite and pysqlite2 (the Python SQLite DB-API adaptor) to be built from source.  :ref:`geosbuild` and :ref:`proj4` should be installed prior to building SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/install.txt:376
# c81a5e555e8a4022b694a0b7891ad749
msgid "After installation is complete, don't forget to read the post-installation docs on :ref:`create_spatialite_db`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:386
# 452e4deb221d47a5b64ee51af38719cc
msgid "Typically, SQLite packages are not compiled to include the `R*Tree module`__ -- thus it must be compiled from source.  First download the latest amalgamation source archive from the `SQLite download page`__, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:394
#: ../../ref/contrib/gis/install/spatialite.txt:48
# 066abf893d26402583c4c80955725c25
# 130f9b51fecb4f15867eb8476bba1086
msgid "Next, run the ``configure`` script -- however the ``CFLAGS`` environment variable needs to be customized so that SQLite knows to build the R*Tree module::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:404
# e2815e2c8a2f422091b6aa1b20921152
msgid "If using Ubuntu, installing a newer SQLite from source can be very difficult because it links to the existing ``libsqlite3.so`` in ``/usr/lib`` which many other packages depend on.  Unfortunately, the best solution at this time is to overwrite the existing library by adding ``--prefix=/usr`` to the ``configure`` command."
msgstr ""

#: ../../ref/contrib/gis/install.txt:416
#: ../../ref/contrib/gis/install/spatialite.txt:62
# 8b7b1fe1762140adaf29dfc616490226
# 7a2a39beb9994d34be7ef139de4841a1
msgid "SpatiaLite library (``libspatialite``) and tools (``spatialite``)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:418
# 8c7244fe8a454a16a862b819ff80ee07
msgid "After SQLite has been built with the R*Tree module enabled, get the latest SpatiaLite library source and tools bundle from the `download page`__::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:426
#: ../../ref/contrib/gis/install/spatialite.txt:72
# d42afad5cbcd49d2942d14eea5146fcb
# 64d23fb923014ba5b5e904e2ec30c5d8
msgid "Prior to attempting to build, please read the important notes below to see if customization of the ``configure`` command is necessary.  If not, then run the ``configure`` script, make, and install for the SpatiaLite library::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:436
#: ../../ref/contrib/gis/install/spatialite.txt:82
# ef7b7a2727c948058bd22ef1f827b998
# 4f2a7e2055fe45a1a5015bda12188672
msgid "Finally, do the same for the SpatiaLite tools::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:446
#: ../../ref/contrib/gis/install/spatialite.txt:92
# 4a246b9e3c1745f19d716d722a8217dc
# 9a6f5aca2e2449f48f0d9d09edc07bbc
msgid "If you've installed GEOS and PROJ.4 from binary packages, you will have to specify their paths when running the ``configure`` scripts for *both* the library and the tools (the configure scripts look, by default, in ``/usr/local``).  For example, on Debian/Ubuntu distributions that have GEOS and PROJ.4 packages, the command would be::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:455
#: ../../ref/contrib/gis/install/spatialite.txt:101
# f3a06a2f33c746d1b89b38594d10e714
# 6cefb24c64fd4a90b41f7eb40f05f82e
msgid "For Mac OS X users building from source, the SpatiaLite library *and* tools need to have their ``target`` configured::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:465
#: ../../ref/contrib/gis/install.txt:872
#: ../../ref/contrib/gis/install/spatialite.txt:111
# ae011237e6bd47d7a9c1d81bc2f9394c
# b8f9fa15495c46c6a63f95430f31b564
# e7a2b1905d2940ba920070ebd5f37836
msgid "pysqlite2"
msgstr ""

#: ../../ref/contrib/gis/install.txt:467
# eb15a11f242e46b5936de77102b2609a
msgid "Because SpatiaLite must be loaded as an external extension, it requires the ``enable_load_extension`` method, which is only available in versions 2.5+. Thus, download pysqlite2 2.6, and untar::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:475
#: ../../ref/contrib/gis/install/spatialite.txt:122
# 0212bbebf4a84261b48e5d298c711119
# 721a1ac2079c4eb488b49716b30a7e78
msgid "Next, use a text editor (e.g., ``emacs`` or ``vi``) to edit the ``setup.cfg`` file to look like the following:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:489
#: ../../ref/contrib/gis/install/spatialite.txt:147
# 17223d71ff7d4965a78158d7464f7b81
# fbf2783e3ec74ab4ba57057c46ec6fa3
msgid "The important thing here is to make sure you comment out the ``define=SQLITE_OMIT_LOAD_EXTENSION`` flag and that the ``include_dirs`` and ``library_dirs`` settings are uncommented and set to the appropriate path if the SQLite header files and libraries are not in ``/usr/include`` and ``/usr/lib``, respectively."
msgstr ""

#: ../../ref/contrib/gis/install.txt:495
#: ../../ref/contrib/gis/install/spatialite.txt:153
# 1ebbbc5401ee4b2086e8391a87e0474d
# 3a91660865d84130ba064642bf1e0591
msgid "After modifying ``setup.cfg`` appropriately, then run the ``setup.py`` script to build and install::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:501
#: ../../ref/contrib/gis/install/postgis.txt:54
# 88c4050e11f64557b7b4b20eeef41e20
# 34ccfa78df81445eb7827c08587aa613
msgid "Post-installation"
msgstr ""

#: ../../ref/contrib/gis/install.txt:506
# ce71017f04a141edb99af88b281bb959
msgid "Creating a spatial database template for PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:508
#: ../../ref/contrib/gis/install/postgis.txt:82
# 7089faaea35141a39538f9b586de2080
# b0f1a774b91c4dd3b7dc45213d2e4e00
msgid "Creating a spatial database with PostGIS is different than normal because additional SQL must be loaded to enable spatial functionality.  Because of the steps in this process, it's better to create a database template that can be reused later."
msgstr ""

#: ../../ref/contrib/gis/install.txt:513
#: ../../ref/contrib/gis/install/postgis.txt:87
# afa15016b9a04229aed25af9cd85cad4
# 0dbefe486926431592a74c65fba20f90
msgid "First, you need to be able to execute the commands as a privileged database user.  For example, you can use the following to become the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:520
#: ../../ref/contrib/gis/install/postgis.txt:94
# 8fc30b3620d644ec9d2cbff0d8fbdb39
# 083e77d21d8940bcb15ba534e2935548
msgid "The location *and* name of the PostGIS SQL files (e.g., from ``POSTGIS_SQL_PATH`` below) depends on the version of PostGIS. PostGIS versions 1.3 and below use ``<pg_sharedir>/contrib/lwpostgis.sql``; whereas version 1.4 uses ``<sharedir>/contrib/postgis.sql`` and version 1.5 uses ``<sharedir>/contrib/postgis-1.5/postgis.sql``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:526
# bce5485ba2fd4930be4b5f7724e0a4a5
msgid "To complicate matters, :ref:`ubuntudebian` distributions have their own separate directory naming system that changes each release."
msgstr ""

#: ../../ref/contrib/gis/install.txt:529
#: ../../ref/contrib/gis/install/postgis.txt:104
# bbe83504979443e6b7af2f74382e8ed2
# 7eecbab70b0f4ea2860b660767cec04e
msgid "The example below assumes PostGIS 1.5, thus you may need to modify ``POSTGIS_SQL_PATH`` and the name of the SQL file for the specific version of PostGIS you are using."
msgstr ""

#: ../../ref/contrib/gis/install.txt:533
#: ../../ref/contrib/gis/install/postgis.txt:108
# c4888b97a51b43799f28f9323e749e6d
# 99bf859fb3f74455bab807cfdc862d4a
msgid "Once you're a database super user, then you may execute the following commands to create a PostGIS spatial database template::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:550
#: ../../ref/contrib/gis/install/postgis.txt:125
# b293363bea404d29a7fb3981d712e1bd
# a0d617aed15543198bba799542bd087f
msgid "These commands may be placed in a shell script for later use; for convenience the following scripts are available:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:554
#: ../../ref/contrib/gis/install/postgis.txt:129
# d20b22812c2145aaa0217ce49852e688
# 9dda3055a8364857b556c66bbc0dbe5f
msgid "PostGIS version"
msgstr ""

#: ../../ref/contrib/gis/install.txt:554
#: ../../ref/contrib/gis/install/postgis.txt:129
# 2d54be73c35a4aa5839a961bb1e48f91
# a0bf3674a0634a88b4c14d00f11d764a
msgid "Bash shell script"
msgstr ""

#: ../../ref/contrib/gis/install.txt:556
#: ../../ref/contrib/gis/install/postgis.txt:131
# 76ff9f56fd2046f98e9457d3b4e6a7f4
# f2dc6e3d88ab4873a7c228ac152d5034
msgid "1.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:556
#: ../../ref/contrib/gis/install/postgis.txt:131
# e86971e1afd74c02b2d7f0b44a0491f7
# 142266e795644fa58436c620bac43d1a
msgid ":download:`create_template_postgis-1.3.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:557
#: ../../ref/contrib/gis/install/postgis.txt:132
# ff0e583a5bec4147a3e7d5f65ef90c2f
# ab704fc682b846a5b0ecf41e0e3b6a3f
msgid ":download:`create_template_postgis-1.4.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:558
#: ../../ref/contrib/gis/install/postgis.txt:133
# 4f93cf5951014c67bd9081d059c89ad8
# 9a618e836e61475d8a61ee88628efc19
msgid "1.5"
msgstr ""

#: ../../ref/contrib/gis/install.txt:558
#: ../../ref/contrib/gis/install/postgis.txt:133
# 2260bb8e220d42839ece9953115345d7
# 2d8bb4e0d4e24a3fbc1879f411ca8aed
msgid ":download:`create_template_postgis-1.5.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:559
#: ../../ref/contrib/gis/install/postgis.txt:134
# 9b813bb9538a4c38a5a853cc95ad04fe
# 990b27c3df504c8988ba257a42b0f32b
msgid "Debian/Ubuntu"
msgstr ""

#: ../../ref/contrib/gis/install.txt:559
#: ../../ref/contrib/gis/install/postgis.txt:134
# 5d82dc07cebd42c69754199a712670d8
# 0cbc1ca6db50448ba9c4c5f5dc2e9d0e
msgid ":download:`create_template_postgis-debian.sh`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:562
#: ../../ref/contrib/gis/install/postgis.txt:137
# 0e8f7627c0ea4db981a2505f532597e8
# f40745ea654f492b9f8d3d66def81aa0
msgid "Afterwards, you may create a spatial database by simply specifying ``template_postgis`` as the template to use (via the ``-T`` option)::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:569
#: ../../ref/contrib/gis/install/postgis.txt:144
# e1445992f9f640fd8fe32940696bc23c
# b1958e486dd04595a1eb71f0293908bf
msgid "While the ``createdb`` command does not require database super-user privileges, it must be executed by a database user that has permissions to create databases. You can create such a user with the following command::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:578
#: ../../ref/contrib/gis/install/spatialite.txt:188
# 263ff9a0f90d4b429e833d595f70183e
# 90bdeff119dd48e49f48bafe7123a0a6
msgid "Creating a spatial database for SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install.txt:580
#: ../../ref/contrib/gis/install/spatialite.txt:190
# 9915903ee5884c54837c678d65ce731a
# d97c2456e3934c7f8065b5f8ebfaf7ce
msgid "After you've installed SpatiaLite, you'll need to create a number of spatial metadata tables in your database in order to perform spatial queries."
msgstr ""

#: ../../ref/contrib/gis/install.txt:583
# ddc69f9341d243e1841cfd0ba9debe48
msgid "If you're using SpatiaLite 3.0 or newer, use the ``spatialite`` utility to call the ``InitSpatiaMetaData()`` function, like this::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:591
#: ../../ref/contrib/gis/install/spatialite.txt:201
# 597e5b114c8d43518af95c0361d6ddc0
# 26a749798f11474b89e81b5ed7a65370
msgid "You can safely ignore the error messages shown. When you've done this, you can skip the rest of this section."
msgstr ""

#: ../../ref/contrib/gis/install.txt:594
# d38c8e98dcc142868c2e80376e86f30f
msgid "If you're using a version of SpatiaLite older than 3.0, you'll need to download a database-initialization file and execute its SQL queries in your database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:597
# 6332ac07f7ee48998bd9131f162e8bcf
msgid "First, get it from the appropriate SpatiaLite Resources page ( http://www.gaia-gis.it/spatialite-2.3.1/resources.html for 2.3 or http://www.gaia-gis.it/spatialite-2.4.0/ for 2.4)::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:604
#: ../../ref/contrib/gis/install/spatialite.txt:212
# 2e874a922a1e4989912f7d202199f6b3
# 31e47d6c05b24961a314f0d6d87bcd3d
msgid "Then, use the ``spatialite`` command to initialize a spatial database::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:610
#: ../../ref/contrib/gis/install/spatialite.txt:218
# dffba5249e7b4d0b8dcc7074f1f59319
# 3f75f132fc9f4f239c6f3f0bb5a94798
msgid "The parameter ``geodjango.db`` is the *filename* of the SQLite database you want to use.  Use the same in the :setting:`DATABASES` ``\"name\"`` key inside your ``settings.py``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:615
#: ../../ref/contrib/gis/install/index.txt:96
# 38ef2dd36c4a4a9386ccb8250c44b065
# e4b716ec12e140c8afa04cb01957f5f0
msgid "Add ``django.contrib.gis`` to :setting:`INSTALLED_APPS`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:617
#: ../../ref/contrib/gis/install/index.txt:98
# ccb21a463019401da8101925487e4317
# cf68ea5887e64017854aea56d6e6e441
msgid "Like other Django contrib applications, you will *only* need to add :mod:`django.contrib.gis` to :setting:`INSTALLED_APPS` in your settings. This is the so that ``gis`` templates can be located -- if not done, then features such as the geographic admin or KML sitemaps will not function properly."
msgstr ""

#: ../../ref/contrib/gis/install.txt:625
#: ../../ref/contrib/gis/install/index.txt:106
# 818848d9d02c490086676fe9c613680c
# 4b2d6fdb36a14afe9c366433471f79d2
msgid "Add Google projection to ``spatial_ref_sys`` table"
msgstr ""

#: ../../ref/contrib/gis/install.txt:631
#: ../../ref/contrib/gis/install/index.txt:110
# 18f6840cf88c455d95626c28455398f8
# a874c48de2f84485971bc358d109c672
msgid "If you're running PostGIS 1.4 or above, you can skip this step. The entry is already included in the default ``spatial_ref_sys`` table."
msgstr ""

#: ../../ref/contrib/gis/install.txt:634
#: ../../ref/contrib/gis/install/index.txt:113
# ac30c303b7df416581c3dc95dfaa697a
# 7245eee90ca74f218afb97c953cd56e9
msgid "In order to conduct database transformations to the so-called \"Google\" projection (a spherical mercator projection used by Google Maps), an entry must be added to your spatial database's ``spatial_ref_sys`` table. Invoke the Django shell from your project and execute the ``add_srs_entry`` function:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:648
# 2acb71e1550f4b639dfb6b4e980dc459
msgid "In Django 1.1 the name of this function is ``add_postgis_srs``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:650
#: ../../ref/contrib/gis/install/index.txt:125
# 9e2df9ac0abb4bd2b6f736cc7a275b1d
# 3b86a4154d12434b899e19e991f2045d
msgid "This adds an entry for the 900913 SRID to the ``spatial_ref_sys`` (or equivalent) table, making it possible for the spatial database to transform coordinates in this projection.  You only need to execute this command *once* per spatial database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:657
#: ../../ref/contrib/gis/install/index.txt:132
# 67a0096a3e3a4d69b1fb8cbe1a199604
# c3deb1f429904edc9eedb775ffd899c9
msgid "If you can't find the solution to your problem here then participate in the community!  You can:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:660
#: ../../ref/contrib/gis/install/index.txt:135
# 417e6f6d70f14d828846645f9102927d
# 30e5bfd394234ee0a5b131974c6af8a1
msgid "Join the ``#geodjango`` IRC channel on FreeNode. Please be patient and polite -- while you may not get an immediate response, someone will attempt to answer your question as soon as they see it."
msgstr ""

#: ../../ref/contrib/gis/install.txt:663
#: ../../ref/contrib/gis/install/index.txt:138
# 36e7dbc9bb04437993affed47d7b695b
# d0d5428a7d614e4ea39d4d6e23111e67
msgid "Ask your question on the `GeoDjango`__ mailing list."
msgstr ""

#: ../../ref/contrib/gis/install.txt:664
#: ../../ref/contrib/gis/install/index.txt:139
# 4a0a0354563b412ab6ecc50227d4b7d7
# 7de38f31e71d446294ec2de5aa697333
msgid "File a ticket on the `Django trac`__ if you think there's a bug.  Make sure to provide a complete description of the problem, versions used, and specify the component as \"GIS\"."
msgstr ""

#: ../../ref/contrib/gis/install.txt:674
#: ../../ref/contrib/gis/install/index.txt:149
# 15a96ed1d5bd4d6c8350a7e0add3cb35
# 406047ab281c4f778dd431b1014d57a6
msgid "Library environment settings"
msgstr ""

#: ../../ref/contrib/gis/install.txt:676
#: ../../ref/contrib/gis/install/index.txt:151
# e7a8e120c66e42b48a32afeafce4343d
# 096257a4e06a423fb55f168e98b500d1
msgid "By far, the most common problem when installing GeoDjango is that the external shared libraries (e.g., for GEOS and GDAL) cannot be located. [#]_ Typically, the cause of this problem is that the operating system isn't aware of the directory where the libraries built from source were installed."
msgstr ""

#: ../../ref/contrib/gis/install.txt:681
#: ../../ref/contrib/gis/install/index.txt:156
# 73068753aef04a239d58798447ceb46a
# caa625810f5e4237a41568695a3884f2
msgid "In general, the library path may be set on a per-user basis by setting an environment variable, or by configuring the library path for the entire system."
msgstr ""

#: ../../ref/contrib/gis/install.txt:686
#: ../../ref/contrib/gis/install/index.txt:161
# 1445de45b8794a54bdd37323e9e5d435
# 1e08f77da35a4a0da8664925a014c353
msgid "``LD_LIBRARY_PATH`` environment variable"
msgstr ""

#: ../../ref/contrib/gis/install.txt:688
#: ../../ref/contrib/gis/install/index.txt:163
# f892c824b1d24d71ab94a32ffaa7ebcd
# e799992e642e45a08fa55fd8d6757ffa
msgid "A user may set this environment variable to customize the library paths they want to use.  The typical library directory for software built from source is ``/usr/local/lib``.  Thus, ``/usr/local/lib`` needs to be included in the ``LD_LIBRARY_PATH`` variable.  For example, the user could place the following in their bash profile::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:697
#: ../../ref/contrib/gis/install/index.txt:172
# 1274d17684bc4d97b128edaa64818a5f
# 5a6010b015f84111b73600296f77e214
msgid "Setting system library path"
msgstr ""

#: ../../ref/contrib/gis/install.txt:699
#: ../../ref/contrib/gis/install/index.txt:174
# 684c878b6cbe4c5ab3665eb34eb838c8
# ede6ac7fa7b740d2a534f21d6616080b
msgid "On GNU/Linux systems, there is typically a file in ``/etc/ld.so.conf``, which may include additional paths from files in another directory, such as ``/etc/ld.so.conf.d``. As the root user, add the custom library path (like ``/usr/local/lib``) on a new line in ``ld.so.conf``.  This is *one* example of how to do so::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:707
#: ../../ref/contrib/gis/install/index.txt:182
# 6bb180f571ff4a8e96ee20d960c0f56d
# 50bea07f946d44a4b31d7de305117f14
msgid "For OpenSolaris users, the system library path may be modified using the ``crle`` utility.  Run ``crle`` with no options to see the current configuration and use ``crle -l`` to set with the new library path.  Be *very* careful when modifying the system library path::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:717
#: ../../ref/contrib/gis/install/index.txt:192
# 4d51386442874b9f9db343e5d574ea6c
# e75d64fd1a08400fb8c606757c4600d8
msgid "Install ``binutils``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:719
#: ../../ref/contrib/gis/install/index.txt:194
# b6ac79fac32f464fbbf365f37fbb58af
# 2f24f1fee6dc45f9b5a6fa2cad6fef75
msgid "GeoDjango uses the ``find_library`` function (from the ``ctypes.util`` Python module) to discover libraries.  The ``find_library`` routine uses a program called ``objdump`` (part of the ``binutils`` package) to verify a shared library on GNU/Linux systems.  Thus, if ``binutils`` is not installed on your Linux system then Python's ctypes may not be able to find your library even if your library path is set correctly and geospatial libraries were built perfectly."
msgstr ""

#: ../../ref/contrib/gis/install.txt:726
#: ../../ref/contrib/gis/install/index.txt:201
# 18239aca2d9d4707b258e2edc8a0e7c3
# 1b8f1b0f1ea649cd8b13668dc5672264
msgid "The ``binutils`` package may be installed on Debian and Ubuntu systems using the following command::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:731
#: ../../ref/contrib/gis/install/index.txt:206
# e767feb8491e4ac796018998683d8dcd
# d33cd494be2746f393e566c88430ebfa
msgid "Similarly, on Red Hat and CentOS systems::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:736
#: ../../ref/contrib/gis/install/index.txt:211
# a43d21bc67ad4740848650cf3bf6e752
# 37e0e7444d164c958ef7a16f3b48122b
msgid "Platform-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install.txt:741
#: ../../ref/contrib/gis/install/index.txt:216
# 4b5c0aed26c34af8ae6a13392f221f4e
# 08869fc32be84c94b0057b1f58f88aba
msgid "Mac OS X"
msgstr ""

#: ../../ref/contrib/gis/install.txt:743
#: ../../ref/contrib/gis/install/index.txt:218
# 268f1d7861c84e36a55d9dbaf4a4e0db
# 9f1e70d3098a4f0e88fdc5268add6944
msgid "Because of the variety of packaging systems available for OS X, users have several different options for installing GeoDjango. These options are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:746
#: ../../ref/contrib/gis/install/index.txt:221
# 1e15046b57aa4ceda3ad79a21f51a800
# 33dd0c64dec042eca0322ee5455e5759
msgid ":ref:`homebrew`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:747
#: ../../ref/contrib/gis/install/index.txt:222
# 94c1790c7b304e5a85321ea77e3dce98
# 7cc498f31e384660970113082150a801
msgid ":ref:`kyngchaos`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:748
#: ../../ref/contrib/gis/install/index.txt:223
# 807959045d0c44129b34018c767fa1dc
# bb569860f2344f6aa0142964318bf9aa
msgid ":ref:`fink`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:749
#: ../../ref/contrib/gis/install/index.txt:224
# d92c52ec66224fb4a17b70c92bd093ec
# a3789f8bad1349589bcf92ea035ae3e9
msgid ":ref:`macports`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:750
#: ../../ref/contrib/gis/install/index.txt:225
# 43dec1c4ddd64ee791ae2d54144c43a2
# acff342f5c7a4263998c6a8cc3a1266b
msgid ":ref:`build_from_source`"
msgstr ""

#: ../../ref/contrib/gis/install.txt:754
#: ../../ref/contrib/gis/install/index.txt:229
# 6fff402ee00841cc82d8ca4d5e6242e3
# dc7e0a524f894512b5eb212f31a302f8
msgid "Currently, the easiest and recommended approach for installing GeoDjango on OS X is to use the KyngChaos packages."
msgstr ""

#: ../../ref/contrib/gis/install.txt:757
#: ../../ref/contrib/gis/install/index.txt:232
# 789f67ae96134f44ad219488b84d47c6
# 4b4b457ce51544b0928dc75aed69638f
msgid "This section also includes instructions for installing an upgraded version of :ref:`macosx_python` from packages provided by the Python Software Foundation, however, this is not required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:764
#: ../../ref/contrib/gis/install.txt:1174
#: ../../ref/contrib/gis/install/index.txt:239
#: ../../ref/contrib/gis/install/index.txt:400
# 97c981db41364cc3a482dc429bf98b50
# 1ba3aad25ab143868f9216b5a3a3d3dd
# 226b5963045e42a4b2f8a45969edcf8a
# 005921de3a5b427d8b24be6fa11c7324
msgid "Python"
msgstr ""

#: ../../ref/contrib/gis/install.txt:766
# e7920e7d22544bda9a16fcf1b7198495
msgid "Although OS X comes with Python installed, users can use framework installers (`2.5`__ and `2.6`__ are available) provided by the Python Software Foundation.  An advantage to using the installer is that OS X's Python will remain \"pristine\" for internal operating system use."
msgstr ""

#: ../../ref/contrib/gis/install.txt:777
#: ../../ref/contrib/gis/install/index.txt:252
# c54524e80e004ad1a4e83aee93edb628
# c88a72eba7f04358bf30d7645a1fa180
msgid "You will need to modify the ``PATH`` environment variable in your ``.profile`` file so that the new version of Python is used when ``python`` is entered at the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:786
#: ../../ref/contrib/gis/install/index.txt:261
# da2dd7a3b8064713bda5006c95434720
# ac5cd8d2b61247679daaee168f9b5eb0
msgid "Homebrew"
msgstr ""

#: ../../ref/contrib/gis/install.txt:788
#: ../../ref/contrib/gis/install/index.txt:263
# 492987a480ad45febdef24039464f9c8
# 2c0d288fe88d468a80acfe969d958198
msgid "`Homebrew`__ provides \"recipes\" for building binaries and packages from source. It provides recipes for the GeoDjango prerequisites on Macintosh computers running OS X. Because Homebrew still builds the software from source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:793
#: ../../ref/contrib/gis/install.txt:935
#: ../../ref/contrib/gis/install/index.txt:268
#: ../../ref/contrib/gis/install/index.txt:361
# dd5a858061bc44608bcd20c3715b0a9a
# c1bf014267934552abb2602f0983a08b
# 3bf983f6714e4990907a5804826a393b
# 46f1488e53794b7386ccc1334d13d97f
msgid "Summary::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:805
#: ../../ref/contrib/gis/install/index.txt:281
# 79f83fbe702a43d294bdc60b71720f28
# d781c6f2c3514a9dbaddc4f67dfd786c
msgid "KyngChaos packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:807
# 3afa8fecb5a64fc09cd35e0de374cb8d
msgid "William Kyngesburye provides a number of `geospatial library binary packages`__ that make it simple to get GeoDjango installed on OS X without compiling them from source.  However, the `Apple Developer Tools`_ are still necessary for compiling the Python database adapters :ref:`psycopg2_kyngchaos` (for PostGIS) and :ref:`pysqlite2_kyngchaos` (for SpatiaLite)."
msgstr ""

#: ../../ref/contrib/gis/install.txt:815
# 6b882f88e35a4e93a5d1947f114edd7c
msgid "SpatiaLite users should consult the :ref:`spatialite_kyngchaos` section after installing the packages for additional instructions."
msgstr ""

#: ../../ref/contrib/gis/install.txt:818
#: ../../ref/contrib/gis/install/index.txt:294
# e67175112d824140b43763e6b3684dfc
# 17cfcb081f9f4bebb322ed7bfd7ead09
msgid "Download the framework packages for:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:820
#: ../../ref/contrib/gis/install/index.txt:296
# f14fa8e0504d4328a4447f30d9ad4e2f
# 322d459e15994c55b953f5cbd3eda25e
msgid "UnixImageIO"
msgstr ""

#: ../../ref/contrib/gis/install.txt:821
#: ../../ref/contrib/gis/install/index.txt:297
# 3e9d768b4f5e42cbbda65e08cebcff6d
# d21cc587aefc40c399e8d1111124a902
msgid "PROJ"
msgstr ""

#: ../../ref/contrib/gis/install.txt:823
#: ../../ref/contrib/gis/install/index.txt:299
# 9c29ff3f5181491e837e298d0fe3db97
# 01a9dde7f1e74b5e83c8349e9cfe0a6c
msgid "SQLite3 (includes the SpatiaLite library)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:826
# 62286ba9d61d429fb4b7bf48c9c0b186
msgid "Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them.  Afterwards, you can also install the KyngChaos binary packages for `PostgreSQL and PostGIS`__."
msgstr ""

#: ../../ref/contrib/gis/install.txt:830
#: ../../ref/contrib/gis/install/index.txt:308
# 10beed3c677241c7b089b72f91ca32c5
# 0679e29e63884bbd9cb527d2b827cb26
msgid "After installing the binary packages, you'll want to add the following to your ``.profile`` to be able to run the package programs from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:845
# 1e1a611df2d14c28ae35f6945adb0cac
msgid "Use of these binaries requires Django 1.0.3 and above.  If you are using a previous version of Django (like 1.0.2), then you will have to add the following in your settings:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:857
#: ../../ref/contrib/gis/install.txt:1241
#: ../../ref/contrib/gis/install/index.txt:324
#: ../../ref/contrib/gis/install/index.txt:467
# 33214a781a73445dafc754d40ac8951e
# 3f22c79f3ecc41e59cfb2a99a6944e46
# 452078c1f3d04b3f9be4c6ef3073b7a5
# 5c619f31f76943ca9daf9fe12a7a86f8
msgid "psycopg2"
msgstr ""

#: ../../ref/contrib/gis/install.txt:859
#: ../../ref/contrib/gis/install/index.txt:326
# de41ae5c0ea74cecb8ffd405edcc9d69
# aed54a301aa44340a05f968f68d8e33d
msgid "After you've installed the KyngChaos binaries and modified your ``PATH``, as described above, ``psycopg2`` may be installed using the following command::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:866
#: ../../ref/contrib/gis/install/index.txt:333
# 6823f61d7c144e8e8653a085102eea3f
# 2b71e2d62e5f4cfc81b1d4973acb65c1
msgid "If you don't have ``pip``, follow the the :ref:`installation instructions <installing-official-release>` to install it."
msgstr ""

#: ../../ref/contrib/gis/install.txt:874
# cf613ee1d20e401ab8fbf3b87af54a23
msgid "Follow the :ref:`pysqlite2` source install instructions, however, when editing the ``setup.cfg`` use the following instead:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:891
#: ../../ref/contrib/gis/install/spatialite.txt:166
# fac4495a60054550869e8b8f82093c97
# c8b28b1b2d2c43b8ba0f5ac95adc909a
msgid "When :ref:`create_spatialite_db`, the ``spatialite`` program is required. However, instead of attempting to compile the SpatiaLite tools from source, download the `SpatiaLite Binaries`__ for OS X, and install ``spatialite`` in a location available in your ``PATH``.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:901
#: ../../ref/contrib/gis/install/spatialite.txt:176
# 1693d01126674d7b97c0dd9382058d7f
# 45d82bb84e7d4e96a1d25a90062ff293
msgid "Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, add the following to your ``settings.py``:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:913
#: ../../ref/contrib/gis/install/index.txt:339
# 1f389344f25c4314842f6fe5c8e76311
# 2b181dd0dee3438ca410e49cff74dbf1
msgid "Fink"
msgstr ""

#: ../../ref/contrib/gis/install.txt:915
#: ../../ref/contrib/gis/install/index.txt:341
# a39f1ef028bc4e349e8be8d16d70d3d1
# 3e93bb61a0f346cbaf01184c3421c954
msgid "`Kurt Schwehr`__ has been gracious enough to create GeoDjango packages for users of the `Fink`__ package system.  The following packages are available, depending on which version of Python you want to use:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:919
#: ../../ref/contrib/gis/install/index.txt:345
# 3c25b65200cc4e5bad026ff33d4e9acd
# dd0900287cd241c792613580b5e7eefe
msgid "``django-gis-py26``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:920
#: ../../ref/contrib/gis/install/index.txt:346
# 6052f873871b4662bca4f86247d0a297
# d336d58c36d045e797d1eb726baef43d
msgid "``django-gis-py25``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:921
#: ../../ref/contrib/gis/install/index.txt:347
# 5c1b31fd677b4fac8bc65cd7d497513c
# abb912fbcb834cb39c382900689d8ba3
msgid "``django-gis-py24``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:929
#: ../../ref/contrib/gis/install/index.txt:355
# 15d5923382ea410d8bd3cfa54a535261
# a2699e0e28824fd8a53e05a4a9d3ce76
msgid "MacPorts"
msgstr ""

#: ../../ref/contrib/gis/install.txt:931
#: ../../ref/contrib/gis/install/index.txt:357
# eb3a9a7192af4b14bc64db0c91a78e79
# 969be65eb2bd4b408dc13f1d267671dd
msgid "`MacPorts`__ may be used to install GeoDjango prerequisites on Macintosh computers running OS X.  Because MacPorts still builds the software from source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install.txt:946
#: ../../ref/contrib/gis/install/index.txt:372
# 3c288760303b42099f9b757872c153ce
# 15db3bcc5d874d3e82609c33251fd23e
msgid "You will also have to modify the ``PATH`` in your ``.profile`` so that the MacPorts programs are accessible from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:951
#: ../../ref/contrib/gis/install/index.txt:377
# fdcda0caa37948b0892e2d83c1caa777
# 1fa8f3ec71e7462694e953e83f739549
msgid "In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that the libraries can be found by Python::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:961
# 53372b59b67140c9b6f3af028dbfc0c5
msgid "Ubuntu & Debian GNU/Linux"
msgstr ""

#: ../../ref/contrib/gis/install.txt:965
# 081fa703b6454cdb8cf53255d7a6b081
msgid "The PostGIS SQL files are not placed in the PostgreSQL share directory in the Debian and Ubuntu packages. Instead, they're located in a special directory depending on the release. In this case, use the :download:`create_template_postgis-debian.sh` script"
msgstr ""

#: ../../ref/contrib/gis/install.txt:973
# 6675b240809d4876a8d43d16328d3169
msgid "Ubuntu"
msgstr ""

#: ../../ref/contrib/gis/install.txt:976
# 3ec482dddd1f44558242ce6b22421df0
msgid "11.10"
msgstr ""

#: ../../ref/contrib/gis/install.txt:978
# 5db7781b7afb4f9ca7075e0c65cf944b
msgid "In Ubuntu 11.10, PostgreSQL was upgraded to 9.1. The installation commands are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:988
# 4309699f695046e4a5b226b0deb26270
msgid "10.04 through 11.04"
msgstr ""

#: ../../ref/contrib/gis/install.txt:990
# d27d8eca8ecb465ca16325c49bff50b3
msgid "In Ubuntu 10.04, PostgreSQL was upgraded to 8.4 and GDAL was upgraded to 1.6. Ubuntu 10.04 uses PostGIS 1.4, while Ubuntu 10.10 uses PostGIS 1.5 (with geography support).  The installation commands are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1002
# c53d2953be3045e6a785e700917fbeb5
msgid "8.10"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1004
# 03e04d0a2e484543b1dd5158040c69b9
msgid "Use the synaptic package manager to install the following packages:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1011
# 7a8774d4c3834c6d95a5d3fc7ffb8f46
msgid "That's it!  For the curious, the required binary prerequisites packages are:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1013
#: ../../ref/contrib/gis/install.txt:1087
# 50f26c47ad9c4d838aaee12ee41c1180
# 9bb85535caed491f9ee8cac38ab223e8
msgid "``binutils``: for ctypes to find libraries"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1014
# 3d343e3280634236b350d4d8d92d6cf5
msgid "``postgresql-8.3``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1015
# 0734e0676c354ad6bfec0f3f76dc96f5
msgid "``postgresql-server-dev-8.3``: for ``pg_config``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1016
# dd6545fc95e74376a63f4c9024ecfebd
msgid "``postgresql-8.3-postgis``: for PostGIS 1.3.3"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1017
# c1aa89ecb905423aac8818d20edab5e1
msgid "``libgeos-3.0.0``, and ``libgeos-c1``: for GEOS 3.0.0"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1018
# cf4a63088375478081e084da398efd61
msgid "``libgdal1-1.5.0``: for GDAL 1.5.0 library"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1019
# f54cffcc442b450490f0d410dcddc747
msgid "``proj``: for PROJ 4.6.0 -- but no datum shifting files, see note below"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1020
#: ../../ref/contrib/gis/install.txt:1093
# 625833dc51ad44c983260551d0c61f9c
# a2a3c8f18f6542f5bb2612698c941f45
msgid "``python-psycopg2``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1022
#: ../../ref/contrib/gis/install/geolibs.txt:46
# b605104ff6b14db3abe09d5fbda91eb8
# b44df40afde2471cbffb5dcd2cd9b4b2
msgid "Optional packages to consider:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1024
#: ../../ref/contrib/gis/install/geolibs.txt:48
# 23d263521bcc410cb167d34290357bd1
# c6ec64f609764cb48e5fd1fb5f837fc0
msgid "``libgeoip1``: for :ref:`GeoIP <ref-geoip>` support"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1025
#: ../../ref/contrib/gis/install/geolibs.txt:49
# 07ac6cfad8684441866f93cd8fe6758e
# 25f45dbbca3e48e3860d75df3b0726f7
msgid "``gdal-bin``: for GDAL command line programs like ``ogr2ogr``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1026
#: ../../ref/contrib/gis/install/geolibs.txt:50
# dc5bbe6f1d7d4f2cad318b38d2a78e6a
# ecaf166f5ec54781a9b336f2f8316242
msgid "``python-gdal`` for GDAL's own Python bindings -- includes interfaces for raster manipulation"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1030
# b26c5e1fc2ee47bab899d406a4608a83
msgid "On this version of Ubuntu the ``proj`` package does not come with the datum shifting files installed, which will cause problems with the geographic admin because the ``null`` datum grid is not available for transforming geometries to the spherical mercator projection. A solution is to download the datum-shifting files, create the grid file, and install it yourself:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1046
# dab6dce98748449c80a19f8a8f2c9a84
msgid "Otherwise, the Ubuntu ``proj`` package is fine for general use as long as you do not plan on doing any database transformation of geometries to the Google projection (900913)."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1053
# 7be36d9cf56f424ba5aca8177179f4eb
msgid "8.04 and lower"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1055
# 5aa92c8a34834f46bd2e4321426ca4c1
msgid "The 8.04 (and lower) versions of Ubuntu use GEOS v2.2.3 in their binary packages, which is incompatible with GeoDjango.  Thus, do *not* use the binary packages for GEOS or PostGIS and build some prerequisites from source, per the instructions in this document; however, it is okay to use the PostgreSQL binary packages."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1060
# ac7b89bb4a204865a229c6b08f551cc3
msgid "For more details, please see the Debian instructions for :ref:`etch` below."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1065
# 3c4cc9ec368843f2a328ab71d7e6d16b
msgid "Debian"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1070
# c79467eb217b46578147be1a4ead91f4
msgid "4.0 (Etch)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1072
# f0901db6d3ad4035b354f7d5f81f7393
msgid "The situation here is the same as that of Ubuntu :ref:`heron` -- in other words, some packages must be built from source to work properly with GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1076
# c14a3a72b2944008a066a60325df8baf
msgid "Binary packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1077
# 350b0e001a7644a1a3dfdc78663080a1
msgid "The following command will install acceptable binary packages, as well as the development tools necessary to build the rest of the requirements:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1085
# 46799ad7f9ab44c4b21a58a2e464cf3b
msgid "Required package information:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1088
# 55ca4f2150a2490a8bb66f0942a6df64
msgid "``bzip2``: for decompressing the source packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1089
# 14a9ca9ec5594305a1bde75e35204ea8
msgid "``gcc``, ``g++``, ``make``: GNU developer tools used to compile the libraries"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1090
# ec7ce5098af846538e58dac13db0e492
msgid "``flex``: required to build PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1091
# 1d915aef0785464abbf312e0907c42a1
msgid "``postgresql-8.1``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1092
# e378cc2265d44a8bb870ffac543863ab
msgid "``postgresql-server-dev-8.1``: for ``pg_config``"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1095
# 814f3c2d320d4e38b7357fcb069c7249
msgid "Optional packages:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1097
# 18b55718305243b7b387899791d63499
msgid "``libgeoip``: for :ref:`GeoIP <ref-geoip>` support"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1100
# 4655c003997c4d6f84e06bfffb4743a8
msgid "Source packages"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1101
# 89e45078278c4827a93628329ded5c92
msgid "You will still have to install :ref:`geosbuild`, :ref:`proj4`, :ref:`postgis`, and :ref:`gdalbuild` from source.  Please follow the directions carefully."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1108
# 850ac6562901435d8f3431ca729d11b3
msgid "5.0 (Lenny)"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1110
# 7d8f739f6f2644808332fc1b70ceb95f
msgid "This version is comparable to Ubuntu :ref:`ibex`, so the command is very similar:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1119
# 750a4da5ce74434db73d94567b6bca96
msgid "This assumes that you are using PostgreSQL version 8.3. Else, replace ``8.3`` in the above command with the appropriate PostgreSQL version."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1124
# 065105c031a9473ba9d5bc470e61650e
msgid "Please read the note in the Ubuntu :ref:`ibex` install documentation about the ``proj`` package -- it also applies here because the package does not include the datum shifting files."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1131
# 9f90896b631c44d09f0aff0c85f0318c
msgid "Post-installation notes"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1133
# 5bef2002dc2e4e758609d910cdc5e719
msgid "If the PostgreSQL database cluster was not initiated after installing, then it can be created (and started) with the following command:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1140
# 362f66c3bc67465281c9216c8ef86f99
msgid "Afterwards, the ``/etc/init.d/postgresql-8.3`` script should be used to manage the starting and stopping of PostgreSQL."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1143
# e0dda21fd26549538a787ccb3a4ce2ff
msgid "In addition, the SQL files for PostGIS are placed in a different location on Debian 5.0 . Thus when :ref:`spatialdb_template` either:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1146
# c53455750d894f8a8ea529ca23df5e0c
msgid "Create a symbolic link to these files:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1153
# 6a2220c05e004e6c950eeb84bc930d04
msgid "If not running PostgreSQL 8.3, then  replace ``8.3`` in the command above with the correct version."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1156
# 1db4ef4fc9c04eb881e9038185c7cd76
msgid "Or use the :download:`create_template_postgis-debian.sh` to create the spatial database."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1161
#: ../../ref/contrib/gis/install/index.txt:387
#: ../../ref/contrib/gis/testing.txt:96
# 881c69debfb64fccbef717a1a960909c
# eaf29d1a5b8c400396a7b9dffb92a183
# 23874176eccb4418bf972a7d49c1fb2c
msgid "Windows"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1163
#: ../../ref/contrib/gis/install/index.txt:389
# df1bd21ec52841ffbedbb98a5c5c2fff
# 45ebc844dd64438b9397067b94b72f6b
msgid "Proceed through the following sections sequentially in order to install GeoDjango on Windows."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1168
#: ../../ref/contrib/gis/install/index.txt:394
# ca17c545b0574dffa7e61cb5e23c5d03
# f04d3d93d1704bbab02d01f1c3287943
msgid "These instructions assume that you are using 32-bit versions of all programs.  While 64-bit versions of Python and PostgreSQL 9.0 are available, 64-bit versions of spatial libraries, like GEOS and GDAL, are not yet provided by the :ref:`OSGeo4W` installer."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1176
#: ../../ref/contrib/gis/install/index.txt:402
# 265dedae41d64f76899e1ac5ec2db838
# a4128cac8081459f9b59f1afe4ef54c2
msgid "First, download the latest `Python 2.7 installer`__ from the Python Web site. Next, run the installer and keep the defaults -- for example, keep 'Install for all users' checked and the installation path set as ``C:\\Python27``."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1183
#: ../../ref/contrib/gis/install/index.txt:409
# 45fafe77bc1e42e89959b448a867e3e8
# ac5e5faae3ff44359359d577f9f56960
msgid "You may already have a version of Python installed in ``C:\\python`` as ESRI products sometimes install a copy there.  *You should still install a fresh version of Python 2.7.*"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1192
#: ../../ref/contrib/gis/install/index.txt:418
# fcf7dc4d3958454598d8f0473f560463
# 8438cb3282cc448e95c84f8771a2f623
msgid "First, download the latest `PostgreSQL 9.0 installer`__ from the `EnterpriseDB`__ Web site.  After downloading, simply run the installer, follow the on-screen directions, and keep the default options unless you know the consequences of changing them."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1199
#: ../../ref/contrib/gis/install/index.txt:425
# bc80fb196bc14d0096019e64501dc894
# 067f609446db4a9891820bf375d4807f
msgid "The PostgreSQL installer creates both a new Windows user to be the 'postgres service account' and a ``postgres`` database superuser You will be prompted once to set the password for both accounts -- make sure to remember it!"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1204
#: ../../ref/contrib/gis/install/index.txt:430
# 928a3c1ea59d4c89b497e99a6ca51c9d
# 601ea9cda3944981bb5fa5a099e47644
msgid "When the installer completes, it will ask to launch the Application Stack Builder (ASB) on exit -- keep this checked, as it is necessary to install :ref:`postgisasb`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1210
#: ../../ref/contrib/gis/install/index.txt:436
# 3da9912396324f1b9d2395d9e215f2ae
# cf9f2790c8bb4dffaa995bf15465f34d
msgid "If installed successfully, the PostgreSQL server will run in the background each time the system as started as a Windows service. A :menuselection:`PostgreSQL 9.0` start menu group will created and contains shortcuts for the ASB as well as the 'SQL Shell', which will launch a ``psql`` command window."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1224
#: ../../ref/contrib/gis/install/index.txt:450
# ab695d3193204729b92e14c6fa5024d6
# 7a4e127433084676bceee14bb1156107
msgid "From within the Application Stack Builder (to run outside of the installer, :menuselection:`Start --> Programs --> PostgreSQL 9.0`), select :menuselection:`PostgreSQL Database Server 9.0 on port 5432` from the drop down menu.  Next, expand the :menuselection:`Categories --> Spatial Extensions` menu tree and select :menuselection:`PostGIS 1.5 for PostgreSQL 9.0`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1230
#: ../../ref/contrib/gis/install/index.txt:456
# 16704431fb944d0e97dc9e59d2e036eb
# 89d466bcab2046b98c8b235789973064
msgid "After clicking next, you will be prompted to select your mirror, PostGIS will be downloaded, and the PostGIS installer will begin.  Select only the default options during install (e.g., do not uncheck the option to create a default PostGIS database)."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1237
#: ../../ref/contrib/gis/install/index.txt:463
# 333b5ce6ca654596920acefd58a69ac3
# 3c66de8781e748288f7bd5639ddd5743
msgid "You will be prompted to enter your ``postgres`` database superuser password in the 'Database Connection Information' dialog."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1243
#: ../../ref/contrib/gis/install/index.txt:469
# 5897d1f3957b46d59bd888acfd731804
# 0fc2595862b94acd8f48f5a2b392f286
msgid "The ``psycopg2`` Python module provides the interface between Python and the PostgreSQL database.  Download the latest `Windows installer`__ for your version of Python and PostgreSQL and run using the default settings. [#]_"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1252
#: ../../ref/contrib/gis/install/index.txt:478
# ec89548e5c4242afb387fba8077cff5b
# d4d8fb33a85f414691d834d5dbcdb114
msgid "OSGeo4W"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1254
#: ../../ref/contrib/gis/install/index.txt:480
# 5146f03573514540bb1786ed8d4b6888
# fe37f4412944476aada00f0bd2d7af68
msgid "The `OSGeo4W installer`_ makes it simple to install the PROJ.4, GDAL, and GEOS libraries required by GeoDjango.  First, download the `OSGeo4W installer`_, and run it.  Select :menuselection:`Express Web-GIS Install` and click next. In the 'Select Packages' list, ensure that GDAL is selected; MapServer and Apache are also enabled by default, but are not required by GeoDjango and may be unchecked safely.  After clicking next, the packages will be automatically downloaded and installed, after which you may exit the installer."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1266
#: ../../ref/contrib/gis/install/index.txt:492
# 3f4e478e01f74638a86baa455e41f46f
# 307890c0e87c4c79ac18e95b7c1d6c46
msgid "Modify Windows environment"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1268
#: ../../ref/contrib/gis/install/index.txt:494
# 888fbfaba7664728824c6fbf0a225d2d
# 79d9aaf998ab469fbbb4557012f2f496
msgid "In order to use GeoDjango, you will need to add your Python and OSGeo4W directories to your Windows system ``Path``, as well as create ``GDAL_DATA`` and ``PROJ_LIB`` environment variables.  The following set of commands, executable with ``cmd.exe``, will set this up:"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1284
#: ../../ref/contrib/gis/install/index.txt:510
# da2c8322242a491aaef95805647d3b06
# 608b8257fb7c422483354285aa066ee6
msgid "For your convenience, these commands are available in the executable batch script, :download:`geodjango_setup.bat`."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1289
#: ../../ref/contrib/gis/install/index.txt:515
# 72b400069fe143e09fbb9ae2307802ba
# f1d52ae0ab9e4afaaaf82ddaef85622c
msgid "Administrator privileges are required to execute these commands. To do this, right-click on :download:`geodjango_setup.bat` and select :menuselection:`Run as administrator`. You need to log out and log back in again for the settings to take effect."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1296
#: ../../ref/contrib/gis/install/index.txt:522
# bc1b5ba6827543d78189fa394f0b0321
# 1d56ee846570440e9c49e63bb979d00b
msgid "If you customized the Python or OSGeo4W installation directories, then you will need to modify the ``OSGEO4W_ROOT`` and/or ``PYTHON_ROOT`` variables accordingly."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1301
#: ../../ref/contrib/gis/install/index.txt:527
# cd2ef283f6ce4ab496d897e3c8d11dc8
# eec44e0023b44ef1a02bd76cb741338f
msgid "Install Django and set up database"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1303
# f34af51930f94adda43019c228893c90
msgid "Finally, :ref:`install Django <installing-official-release>` on your system. You do not need to create a spatial database template, as one named ``template_postgis`` is created for you when installing PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1307
#: ../../ref/contrib/gis/install/postgis.txt:168
# 93e3627ad9f749ab9ab3d7cf1bd3d4ba
# 8f536774cfe14d889b5ad6bb7581a3d6
msgid "To administer the database, you can either use the pgAdmin III program (:menuselection:`Start --> PostgreSQL 9.0 --> pgAdmin III`) or the SQL Shell (:menuselection:`Start --> PostgreSQL 9.0 --> SQL Shell`). For example, to create a ``geodjango`` spatial database and user, the following may be executed from the SQL Shell as the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install.txt:1317
# fae0fdc0dda44a1caca48f3a34b30391
msgid "The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ.4 string for the `Google projection (900913) <http://spatialreference.org/ref/epsg/900913/proj4>`_ requires the ``null`` grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1324
#: ../../ref/contrib/gis/install/geolibs.txt:279
# c7977442c950437cba3534127b8f2f68
# fa0b974de024438aa084a83a7b66530f
msgid "Specifically, GeoDjango provides support for the `OGR <http://gdal.org/ogr>`_ library, a component of GDAL."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1326
#: ../../ref/contrib/gis/install/geolibs.txt:281
# 08ea3f069b9540f294c63b76100cd8d0
# 657e267f453246ec9e19990b40ec8623
msgid "See `GDAL ticket #2382 <http://trac.osgeo.org/gdal/ticket/2382>`_."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1327
#: ../../ref/contrib/gis/install/index.txt:532
# e1e5a482dc274e849e777dcebbcc46e1
# 9d1cd46cea374d2ab024f4425129f590
msgid "GeoDjango uses the :func:`~ctypes.util.find_library` routine from :mod:`ctypes.util` to locate shared libraries."
msgstr ""

#: ../../ref/contrib/gis/install.txt:1329
#: ../../ref/contrib/gis/install/index.txt:534
# 566c20238a0c4baaae4ba441c71dcc33
# 277b87ad96a245eaae86ebf7b454df9f
msgid "The ``psycopg2`` Windows installers are packaged and maintained by `Jason Erickson <http://www.stickpeople.com/projects/python/win-psycopg/>`_."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:5
# f0f032da48104be195accde340c10a73
msgid "Installing Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
# 9f99dd558bd8425bbfd525fd9374ab8c
msgid "4.8, 4.7, 4.6, 4.5, 4.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
# 63824fab425546bf8545b21bbe157b5c
msgid "1.9, 1.8, 1.7, 1.6, 1.5"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:17
# 89085b20af044c10bd88cddcedfcee2b
msgid "2.0, 1.5, 1.4, 1.3"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:39
# 77dba3e021b2459382e1ac69c5879a8d
msgid "On Debian/Ubuntu, you are advised to install the following packages which will install, directly or by dependency, the required geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:52
# 04d5539deed549238c3a086a2fbe1aa8
msgid "Please also consult platform-specific instructions if you are on :ref:`macosx` or :ref:`windows`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:91
# 8aa982a5e65a4b8ab6267c92cd923025
msgid "First, download GEOS 3.3.5 from the refractions Web site and untar the source archive::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:142
# 229aa1ae3ede477d8d2f50fc5534f550
msgid "See also :ref:`My logs are filled with GEOS-related errors <geos-exceptions-in-logfile>`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:272
# 4026ab5050364c71b379da4499d694df
msgid "The datum shifting files are needed for converting data to and from certain projections. For example, the PROJ.4 string for the `Google projection (900913 or 3857) <http://spatialreference.org/ref/sr-org/6864/prj/>`_ requires the ``null`` grid file only included in the extra datum shifting files. It is easier to install the shifting files now, then to have debug a problem caused by their absence later."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:17
# 26b5135ea3324a99a58fbd041e5c95b1
msgid "Details for each of the requirements and installation instructions are provided in the sections below. In addition, platform-specific instructions are available for:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:26
# 30f4be86a55b4c11b21409b71ca7c964
msgid "Because GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren't available for your platform, installation from source may be required. When compiling the libraries from source, please follow the directions closely, especially if you're a beginner."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
# 3c6e11bdb7b74f1785453c6de5c1b3df
msgid "8.2+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:67
# c21300cf9a244bf4be6b10d90081a516
msgid "Requires SpatiaLite 2.3+, pysqlite2 2.5+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:70
# 9a05902d9c524130890e4efd9c1e6e87
msgid "See also `this comparison matrix`__ on the OSGeo Wiki for PostgreSQL/PostGIS/GEOS/GDAL possible combinations."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:87
# 8e57a5057a5648c7827f2208bd3b546f
msgid "Database installation"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:241
# 8d8c8fe4a6d8416b8abcd583d4b36660
msgid "Although OS X comes with Python installed, users can use framework installers (`2.6`__ and `2.7`__ are available) provided by the Python Software Foundation.  An advantage to using the installer is that OS X's Python will remain \"pristine\" for internal operating system use."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:283
# 9cd5eaa57d1949de9894a25b8e727945
msgid "William Kyngesburye provides a number of `geospatial library binary packages`__ that make it simple to get GeoDjango installed on OS X without compiling them from source.  However, the `Apple Developer Tools`_ are still necessary for compiling the Python database adapters :ref:`psycopg2_kyngchaos` (for PostGIS) and :ref:`pysqlite2` (for SpatiaLite)."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:291
# 97baed17a22147ae9324b197253bb21e
msgid "SpatiaLite users should consult the :ref:`spatialite_macosx` section after installing the packages for additional instructions."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:302
# 80fe010f57d345a6a4c0d9885a2cc279
msgid "Install the packages in the order they are listed above, as the GDAL and SQLite packages require the packages listed before them."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:305
# 6b053dd1ec934b75a6ae7ce0be6d28cb
msgid "Afterwards, you can also install the KyngChaos binary packages for `PostgreSQL and PostGIS`__."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:529
# 8914141a2fe741e38131e4647d21ecf2
msgid "Finally, :ref:`install Django <installing-official-release>` on your system."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:5
# 5b146a02a2ab4784b00b504fef5a8dab
msgid "Installing PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:7
# 7e519580c61046568f7dc3ac4d5d2147
msgid "`PostGIS`__ adds geographic object support to PostgreSQL, turning it into a spatial database. :ref:`geosbuild`, :ref:`proj4` and :ref:`gdalbuild` should be installed prior to building PostGIS. You might also need additional libraries, see `PostGIS requirements`_."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:20
# 75b6b957b57c41afac85a38ba369c4a1
msgid "On Debian/Ubuntu, you are advised to install the following packages: postgresql-x.x, postgresql-x.x-postgis, postgresql-server-dev-x.x, python-psycopg2 (x.x matching the PostgreSQL version you want to install). Please also consult platform-specific instructions if you are on :ref:`macosx` or :ref:`windows`."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:47
# e084ccc114f949db966fe8697d062f42
msgid "GeoDjango does not automatically create a spatial database.  Please consult the section on :ref:`spatialdb_template91` or :ref:`spatialdb_template_earlier` for more information."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:60
# fc0786e8f089480d9bd1a3b81e564a11
msgid "Creating a spatial database with PostGIS 2.0 and PostgreSQL 9.1"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:62
# 38341d9b185e4a829064d587e2c50949
msgid "PostGIS 2 includes an extension for Postgres 9.1 that can be used to enable spatial functionality::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:70
# 45b27749eaca4a9ea2a03d1f028378b7
msgid "No PostGIS topology functionalities are yet available from GeoDjango, so the creation of the ``postgis_topology`` extension is entirely optional."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:76
# f31d122722924893ab05182b81bcfa17
msgid "Creating a spatial database template for earlier versions"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:78
# b76e36c5aead47c791e6411c041f0b01
msgid "If you have an earlier version of PostGIS or PostgreSQL, the CREATE EXTENSION isn't available and you need to create the spatial database using the following instructions."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:100
# ae5595154cd249d8b67a6a362266ff55
msgid "To complicate matters, Debian/Ubuntu distributions have their own separate directory naming system that might change with time. In this case, use the :download:`create_template_postgis-debian.sh` script."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:151
# 6d5935ab3c8648b294bac82660c3fa5f
msgid "PostgreSQL's createdb fails"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:153
# bf2f132fca0347ac9d452622dae048b6
msgid "When the PostgreSQL cluster uses a non-UTF8 encoding, the :file:`create_template_postgis-*.sh` script will fail when executing ``createdb``::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:160
# 5b78a80ccc8142d3830c7a857c3d3d2e
msgid "The `current workaround`__ is to re-create the cluster using UTF8 (back up any databases before dropping the cluster)."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:166
# fb1fc63e10824af3aa5cdf45490afd9d
msgid "Managing the database"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:5
# b9306b0fa3394103b28787fb27fb14a0
msgid "Installing Spatialite"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:7
# 00980d121d4340bcb11d08cc6badefbe
msgid "`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-featured spatial database."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:10
# cab64202ca2f469f85bfb0ed09a3e48b
msgid "Check first if you can install Spatialite from system packages or binaries. For example, on Debian-based distributions, try to install the ``spatialite-bin`` package. For Mac OS X, follow the :ref:`specific instructions below<spatialite_macosx>`. For Windows, you may find binaries on `Gaia-SINS`__ home page. In any case, you should always be able to :ref:`install from source<spatialite_source>`."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:17
# 3dfdea7c98f44f5e9ecb9a59b29e4fcc
msgid "When you are done with the installation process, skip to :ref:`create_spatialite_db`."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:25
# 7d89c9c034a64ffcb6fec4608d12d536
msgid "Installing from source"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:27
# 30d01cb407a649dd9cc2527d7021d75d
msgid ":ref:`GEOS and PROJ.4<geospatial_libs>` should be installed prior to building SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:33
# b8675ebd63b446f0bfe75a6df20a4861
msgid "Check first if SQLite is compiled with the `R*Tree module`__. Run the sqlite3 command line interface and enter the following query::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:38
# de776d19527d4a12b58569cb03a654af
msgid "If you obtain an error, you will have to recompile SQLite from source. Otherwise, just skip this section."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:41
# 31dcbfa13fe64676844073a285a18cbd
msgid "To install from sources, download the latest amalgamation source archive from the `SQLite download page`__, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:64
# 5ea1502618e743bbb5b6e8f63e140af9
msgid "Get the latest SpatiaLite library source and tools bundle from the `download page`__::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:113
# 6dc98cf21c67413e9b8b5c4a523f6d11
msgid "If you are on Python 2.6, you will also have to compile pysqlite2, because ``SpatiaLite`` must be loaded as an external extension, and the required ``enable_load_extension`` method is only available in versions 2.5+ of pysqlite2. Thus, download pysqlite2 2.6, and untar::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:134
# 3e83f4b40fc34ddead2e4cc9e547ee90
msgid "or if you are on Mac OS X:"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:161
# 5a6f3f31942e4d26870c556d3b76b838
msgid "Mac OS X-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:193
# 186d45a7e48f48799208346611cce702
msgid "If you're using SpatiaLite 2.4 or newer, use the ``spatialite`` utility to call the ``InitSpatialMetaData()`` function, like this::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:204
# 379313f560d54e8a87934c16aeefa186
msgid "If you're using SpatiaLite 2.3, you'll need to download a database-initialization file and execute its SQL queries in your database."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:207
# a2b62b4ea38a43bfa46b1d9f87300743
msgid "First, get it from the `SpatiaLite Resources`__ page::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:5
# a49012a625ec4913b79a94fbbb5cd0f7
msgid "``LayerMapping`` data import utility"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:12
# e14ea374d76348b5b63b99b3661d8f19
msgid "The :class:`LayerMapping` class provides a way to map the contents of vector spatial data files (e.g. shapefiles) into GeoDjango models."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:15
# ba88f90d187a46158b7d6bbe1f310647
msgid "This utility grew out of the author's personal needs to eliminate the code repetition that went into pulling geometries and fields out of a vector layer, converting to another coordinate system (e.g. WGS84), and then inserting into a GeoDjango model."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:22
# d36bb866507b429e8795e7b14720c179
msgid "Use of :class:`LayerMapping` requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:26
# b2ca902472a94bb8b0ebd0f83ab62625
msgid "GIS data sources, like shapefiles, may be very large.  If you find that :class:`LayerMapping` is using too much memory, set :setting:`DEBUG` to ``False`` in your settings.  When :setting:`DEBUG` is set to ``True``, Django :ref:`automatically logs <faq-see-raw-sql-queries>` *every* SQL query -- thus, when SQL statements contain geometries, it is easy to consume more memory than is typical."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:36
# f33bef54368748ec998594c819c163f0
msgid "You need a GDAL-supported data source, like a shapefile (here we're using a simple polygon shapefile, ``test_poly.shp``, with three features)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:55
# 03d0b5f7cf0d4c8ca5e6b079a02140a3
msgid "Now we define our corresponding Django model (make sure to use ``syncdb``)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:66
# bf8d76fa68b54d84b352e3a47c3949b3
msgid "Use :class:`LayerMapping` to extract all the features and place them in the database::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:80
# 6ae9da9b6d0143ed86b09a1616cd2e16
msgid "Here, :class:`LayerMapping` just transformed the three geometries from the shapefile in their original spatial reference system (WGS84) to the spatial reference system of the GeoDjango model (NAD83).  If no spatial reference system is defined for the layer, use the ``source_srs`` keyword with a :class:`~django.contrib.gis.gdal.SpatialReference` object to specify one."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:87
# 54e9c4c7d0294cbda96e95ca64dfc9fa
msgid "``LayerMapping`` API"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:91
# 63687c92a6f04740b0adf0bc06c65c61
msgid "The following are the arguments and keywords that may be used during instantiation of ``LayerMapping`` objects."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:95
#: ../../ref/contrib/webdesign.txt:40
#: ../../ref/models/fields.txt:526
#: ../../ref/signals.txt:72
#: ../../ref/signals.txt:298
#: ../../ref/signals.txt:324
#: ../../ref/templates/builtins.txt:938
#: ../../ref/templates/builtins.txt:2271
# 9c19da6550574c3199354c7f96e1b4ef
# c7c16d004a244bdba37825b4f93a4902
# a0bee28494794b85b710e68940a0c78e
# b04b7deb221747e2947bc27256c09e30
# 2c0a5e403b164548a32f7c5f96351a05
# 29f059047ce44aed9b4a3749733861c2
# 7e97cf448448445fb2e00f1b083697d8
# 9a247adc1f8741e8b5c243a478b973b9
msgid "Argument"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:97
#: ../../ref/signals.txt:309
#: ../../ref/signals.txt:335
# 22d7b7f43a9e4eea85939a7b3e357327
# 8101099bc3594c5da061d7b22763f76d
# 8c0a083eb9dd49ed8911e85a4202583f
msgid "``model``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:97
# 61d8a37753f744b8bef2471283455887
msgid "The geographic model, *not* an instance."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:99
# 3ec59d7bd8ec4f6abcc4df2b03410273
msgid "``data_source``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:99
# f705607c8e774ed69e8da9be6e8e60d9
msgid "The path to the OGR-supported data source file (e.g., a shapefile).  Also accepts :class:`django.contrib.gis.gdal.DataSource` instances."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:103
#: ../../ref/contrib/gis/ogrinspect.txt:19
# 97bd10e2ae97407199906e2128b91696
# 658447bbfd2644129de4339b671eb60c
msgid "``mapping``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:103
# c31b971cd92745fdab2379b88d5f137d
msgid "A dictionary: keys are strings corresponding to the model field, and values correspond to string field names for the OGR feature, or if the model field is a geographic then it should correspond to the OGR geometry type, e.g., ``'POINT'``, ``'LINESTRING'``, ``'POLYGON'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:114
# c12ec00f3061470baead80f5ba50a67a
msgid "``layer``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:114
# 2b0a43b7d9124daca21eb9c36b99ec74
msgid "The index of the layer to use from the Data Source (defaults to 0)"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:117
# 167a803d97b84fc689331cca3d97192f
msgid "``source_srs``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:117
# f37b14499cbd487895644f35e9da9afb
msgid "Use this to specify the source SRS manually (for example, some shapefiles don't come with a '.prj' file).  An integer SRID, WKT or PROJ.4 strings, and :class:`django.contrib.gis.gdal.SpatialReference` objects are accepted."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:123
# 9b57c181cb5b4d2ebebb339b69c6396d
msgid "``encoding``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:123
# d935bc936b8b42ef9d8d9089e77abb35
msgid "Specifies the character set encoding of the strings in the OGR data source.  For example, ``'latin-1'``, ``'utf-8'``, and ``'cp437'`` are all valid encoding parameters."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:128
# c6d1c4f9bf06451d898f4ffe032131cc
msgid "``transaction_mode``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:128
# 0e5ea8e07545400f8bd3cf82a76b637e
msgid "May be ``'commit_on_success'`` (default) or ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:131
# cab8abf2020447d3bf9f6a960f57ec30
msgid "Setting this to False will disable coordinate transformations.  In other words, geometries will be inserted into the database unmodified from their original state in the data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:136
#: ../../ref/models/fields.txt:261
# 34acbf2e63434e81a46b85263193b894
# d7c580fff3ea46cb90f22f79d7c2f9e9
msgid "``unique``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:136
# 89872742e061451fa2a9c15718f433fe
msgid "Setting this to the name, or a tuple of names, from the given  model will create models unique only to the given name(s). Geometries will from each feature will be added into the collection associated with the unique model.  Forces the transaction mode to be ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:143
#: ../../ref/signals.txt:314
#: ../../ref/signals.txt:341
# 36dd1dfa1eca4cbd9601d2c7168be13e
# d6555b2dcee747dd95174b2aa4b8305d
# d22d3c54a2ca44299540a9c9116aede3
msgid "``using``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:143
# c592abadc44847a6883ce70385894c5a
msgid "New in version 1.2.  Sets the database to use when importing spatial data.  Default is ``'default'``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:148
# c594b8ef01ca4a6cb4693b5209188e3e
msgid "``save()`` Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:152
# df851edf992d4f169b1b24ff8fd12d93
msgid "The ``save()`` method also accepts keywords.  These keywords are used for controlling output logging, error handling, and for importing specific feature ranges."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:157
# eb1cbcf24e804bbcbe2bb2c90d67c82a
msgid "Save Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:159
# dcad1b703a3b411d8f35d46ed6b5b381
msgid "``fid_range``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:159
# cd10b5b4c89a4dbabc55affa6f590bbd
msgid "May be set with a slice or tuple of (begin, end) feature ID's to map from the data source.  In other words, this keyword enables the user to selectively import a subset range of features in the geographic data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:166
# 39aeb1164df24012897ce40b18e5f4c4
msgid "``progress``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:166
# 33a6678103904f1694d39b98e718a837
msgid "When this keyword is set, status information will be printed giving the number of features processed and successfully saved.  By default, progress information will be printed every 1000 features processed, however, this default may be overridden by setting this keyword with an integer for the desired interval."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:174
# ac71fe176b6e4d29a1fcb9eb78b9d862
msgid "``silent``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:174
# de236c3b35ae4f82a8d7a448dfd2e4ef
msgid "By default, non-fatal error notifications are printed to ``sys.stdout``, but this keyword may be set to disable these notifications."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:178
# 8a0364dfce5048c3809d132d4b85190b
msgid "``step``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:178
# f8986cf99bab4229967926c889b89a2e
msgid "If set with an integer, transactions will occur at every step interval. For example, if ``step=1000``, a commit would occur after the 1,000th feature, the 2,000th feature etc."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:184
# a3556d77844648e2b329a7b607add5a7
msgid "``stream``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:184
# 56acf55f7dfa4a65bd9556a802bc64b6
msgid "Status information will be written to this file handle.  Defaults to using ``sys.stdout``, but any object with a ``write`` method is supported."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:188
# e1915f9d8c8a4141819ac6e8e49a9fa9
msgid "``strict``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:188
# 5ea9f69c078e4ebf9b3209285d3e58e9
msgid "Execution of the model mapping will cease upon the first error encountered.  The default value (``False``) behavior is to attempt to continue."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:193
# 98e0c766c2f34ab0ad30894f6f99d31d
msgid "``verbose``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:193
# 6282d375850b4494807dbdc7f4bf7436
msgid "If set, information will be printed subsequent to each model save executed on the database."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:202
# 28ea7f4b254d42aa87c97fee61a43687
msgid "Running out of memory"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:204
# 3812c1a060da4272b9db7275f0c694f6
msgid "As noted in the warning at the top of this section, Django stores all SQL queries when ``DEBUG=True``.  Set ``DEBUG=False`` in your settings, and this should stop excessive memory use when running ``LayerMapping`` scripts."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:209
# f2cbfa726d2a4fada9f77959b781a1d5
msgid "MySQL: ``max_allowed_packet`` error"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:211
# 81e1e75e7e7943548d7f2fc7e660188b
msgid "If you encounter the following error when using ``LayerMapping`` and MySQL::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:215
# eaf98fc7344b4e44847d7077e745dc8a
msgid "Then the solution is to increase the value of the ``max_allowed_packet`` setting in your MySQL configuration.  For example, the default value may be something low like one megabyte -- the setting may be modified in MySQL's configuration file (``my.cnf``) in the ``[mysqld]`` section::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:5
# fa98e9d02a0d4611854b235131befae7
msgid "Measurement Objects"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:10
# c17cd4c4d943447f902047736ac82556
msgid "The :mod:`django.contrib.gis.measure` module contains objects that allow for convenient representation of distance and area units of measure. [#]_ Specifically, it implements two objects, :class:`Distance` and :class:`Area` -- both of which may be accessed via the :class:`D` and :class:`A` convenience aliases, respectively."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:19
# e3b791b2abd14b39a17fafe265d76e25
msgid ":class:`Distance` objects may be instantiated using a keyword argument indicating the context of the units.  In the example below, two different distance objects are instantiated in units of kilometers (``km``) and miles (``mi``)::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:31
# 5e72abc84ac94483a6e75507ef278dda
msgid "Conversions are easy, just access the preferred unit attribute to get a converted distance quantity::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:39
# 3ccc417d20634081997e8359ee7c3f84
msgid "Moreover, arithmetic operations may be performed between the distance objects::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:47
# 369ba773752e42ff972f26635ad21cd3
msgid "Two :class:`Distance` objects multiplied together will yield an :class:`Area` object, which uses squared units of measure::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:54
# 326d35a3db8e4fdaa3a6f682afcdffa9
msgid "To determine what the attribute abbreviation of a unit is, the ``unit_attname`` class method may be used::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:65
# 736e4e15f7a348c6a2cdafbf259b83f6
msgid "Supported units"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
# a3a4bc9cdf054d12b37b649b62f79b20
msgid "Unit Attribute"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
# ca430c2edce64ebd9c46c08839a70f27
msgid "Full name or alias(es)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
# 9a5945021d754d408c7f9b6eeee0dcf3
msgid "``km``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
# 3046db52a3854551acdda5076e725b10
msgid "Kilometre, Kilometer"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
# 4f7a708eb40140e0b723bd23a2b7f751
msgid "``mi``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
# bbf12a90fcc044fbac86fbc680aebccb
msgid "Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
# 8995bf095fee42e59605ece8ac828aa2
msgid "``m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
# 418b45fd7536488081e6f6ba710b5808
msgid "Meter, Metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
# de7f3fbf22f54b56aa38e5221c934466
msgid "``yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
# f77f2ba086e14331ad7a40f5d08fa989
msgid "Yard"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
# d2a6e69f594c45e3a5c455ca2fa7d76c
msgid "``ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
# 75812a713a4a4e8ab286a323e4491056
msgid "Foot, Foot (International)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
# 5aeb3d66bd97430b902b8efab37d983b
msgid "``survey_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
# 58bb571c5b08412f9f8bde8b4fc41f36
msgid "U.S. Foot, US survey foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
# 26de12c945734fdab0166a909aad3d27
msgid "``inch``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
# 306c1bc4dccc40a1b9e67e3a50c3c8c1
msgid "Inches"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
# 8bb010651be444dcb22a7cb17dfe272c
msgid "``cm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
# d07b9134878d4e588e8a0a5070923483
msgid "Centimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
# 406f57d68b2e4649a42cfc690b37d4d5
msgid "``mm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
# 16565b63430d41b28ee960b9f3faea23
msgid "Millimetre, Millimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
# b5945ee411ed4a6fa2987e7633e47a79
msgid "``um``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
# 04296b30319444a285b3ed4d5e906893
msgid "Micrometer, Micrometre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
# 2c9f537149ac43ad90795b0205a1311a
msgid "``british_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
# 92e275f08ae24f41b0712e50d5c36082
msgid "British foot (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
# 14c2f9e99ecf42d58d17c9167ff175b4
msgid "``british_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
# 64001d3f592747dbbbaee91504f01c07
msgid "British yard (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
# 1d78ca53edf643d5acdc5d13aff11fba
msgid "``british_chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
# b4db9775ea944b76b48b1e3e3b8bb03b
msgid "British chain (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
# 0657eb2654a64e83b7d233cd3dbb802d
msgid "``indian_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
# 7d488272aa0b4989a154384e73a7848b
msgid "Indian yard, Yard (Indian)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
# e5c77420656d4dc6b00dec3e143f5c9f
msgid "``sears_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
# 089b80b5d6474e5386af7f16a7e5fe0c
msgid "Yard (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
# c3d541f47617410782415c89ca602e68
msgid "``clarke_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
# af5460649a624eb3862b39c5b8cd3a15
msgid "Clarke's Foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
# d8705c940e2548b3b95794d9f2af591e
msgid "``chain``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
# dcfaf6da6f0c41ec86bf8ff4536d0060
msgid "Chain"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
# 57e2137961324b0da24dfbe76f588838
msgid "``chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
# 224ea1fccd084b689c792216c2d9b2e5
msgid "Chain (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
# b004d25fd45246cca40486bb02558add
msgid "``chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
# da5f71fceaae4dab8af623c0825949ce
msgid "Chain (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
# 09782071dd394cd3a709e613cd388baf
msgid "``british_chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
# 1611cb44b58642869311b756fd257bc6
msgid "British chain (Benoit 1895 B)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
# bc5babc2a3354ba0a07171e840a42716
msgid "``british_chain_sears_truncated``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
# 55b1ac03d9884aeeb0da061ef03aa0d2
msgid "British chain (Sears 1922 truncated)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
# fbea1abe3e2047aebf342e497406a6b3
msgid "``gold_coast_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
# 6257413988664c2098c4341325fd3bef
msgid "Gold Coast foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
#: ../../ref/contrib/syndication.txt:818
#: ../../ref/contrib/syndication.txt:846
# 14e373666d2e40d6ad3de4ac2e1b3a5d
# 5904e5b36830493ab7719aef75078472
# 9ef7999cf6e94833a5b49a6adae3c0d6
msgid "``link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
# 9d6ede2484d74a2c979db6dfb88e5da2
msgid "Link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
# 6c8571d632634600b1851ce5803007e1
msgid "``link_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
# 6df09f7e43f6468eb892b89d9fa3d5aa
msgid "Link (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
# e592ed10a825404a819bcc58c0c800e3
msgid "``link_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
# 469e687272a34dc4a21af9a6407c1379
msgid "Link (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
# 74882c235dcd47d88422f87f8fa35596
msgid "``clarke_link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
# baba46a63e184af3941014b24286d912
msgid "Clarke's link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
# ed0619fae31147df91e5fb4c8b243f71
msgid "``fathom``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
# c814fd8895314e8baec9d120c418f31e
msgid "Fathom"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
# 3c5f08fd53d246648a7e77a09b492b57
msgid "``rod``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
# d787573d63754f099fcd01f2132ff1ee
msgid "Rod"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
# ac44ac5ad5224c9685e982f8afa918ba
msgid "``nm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
# ede40160255c42d9bc963e8271afb220
msgid "Nautical Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:99
# a581986fe0b04511a76827e6fecad35a
msgid "``nm_uk``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:99
# 1695c709b2ec445bbf196a3aae9c638c
msgid "Nautical Mile (UK)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:100
# 3dfb3833f4794a5c98f7a475d744c4fb
msgid "``german_m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:100
# 81ccfe8e09f04f07a2ab5dcc37c515c4
msgid "German legal metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:105
# 52ecc27d8f7d42d0abb90b82f4c66709
msgid ":class:`Area` attributes are the same as :class:`Distance` attributes, except they are prefixed with ``sq_`` (area units are square in nature). For example, ``Area(sq_m=2)`` creates an :class:`Area` object representing two square meters."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:111
# fefafa9128af479089132fedeaf20e18
msgid "Measurement API"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:114
# 577d68d042fa48da95fa98127fcaadfe
msgid "``Distance``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:118
# 589037e3c477449fa2202d4abf93c725
msgid "To initialize a distance object, pass in a keyword corresponding to the desired :ref:`unit attribute name <supported_units>` set with desired value.  For example, the following creates a distance object representing 5 miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:127
# 34b6e27e510c47cd8a67b38ab0881f5d
msgid "Returns the distance value in units corresponding to the given unit attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:135
# 846970827a034a8f8b021e2e2f1610e5
msgid "Returns the distance unit attribute name for the given full unit name. For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:143
# 633d20a25c574a01b837c2f10c906da7
msgid "Alias for :class:`Distance` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:146
# efb80aba04c34b60839fdf2b0ba6c50f
msgid "``Area``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:150
# 7d45a9a0f87245f3a28acc8472136672
msgid "To initialize a distance object, pass in a keyword corresponding to the desired :ref:`unit attribute name <supported_units>` set with desired value.  For example, the following creates a distance object representing 5 square miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:159
# b2a889835edb41f7900d21c8f8b155c9
msgid "Returns the area value in units corresponding to the given unit attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:167
# b6b83ee0dce546f596b1031d1c8e4fb5
msgid "Returns the area unit attribute name for the given full unit name. For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:175
# 5f7bdfe18b624560ae843f874a773805
msgid "Alias for :class:`Area` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:178
# 159387ff3ed343c2a5a510b9e55683f6
msgid "`Robert Coup <http://koordinates.com/>`_ is the initial author of the measure objects, and was inspired by Brian Beck's work in `geopy <http://code.google.com/p/geopy/>`_ and Geoff Biggs' PhD work on dimensioned units for robotics."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:5
# b2462688854f4210b3d63241ca6eaee1
msgid "GeoDjango Model API"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:10
# c6fa5a14f0e942bb9c29c16d9b1f5253
msgid "This document explores the details of the GeoDjango Model API.  Throughout this section, we'll be using the following geographic model of a `ZIP code`__ as our example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:24
# 03c8c878ee8646f5865b6caec3269184
msgid "Geometry Field Types"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:26
# 7474fbe9559841a0a9d913936bc0430c
msgid "Each of the following geometry field types correspond with the OpenGIS Simple Features specification [#fnogc]_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:30
# bba1bcd5ffc24e50afaa2b2063fd24bc
msgid "``GeometryField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:35
# 9954385365a148c7ad11d8c142c0a2a6
msgid "``PointField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:40
# bd13ab8e3fab4aa2afb2a200c16cf1bf
msgid "``LineStringField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:45
# d7f12608f4b9401c95baa3757d5498da
msgid "``PolygonField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:50
# ce8c225479134223a2a038c6dfced713
msgid "``MultiPointField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:55
# 5706b52dfae541ca8e79644d717bfee3
msgid "``MultiLineStringField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:60
# abada388a62744559d1a42c71e864a44
msgid "``MultiPolygonField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:65
# 8b5a200da952425da6c696faf40035c0
msgid "``GeometryCollectionField``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:72
# 3f204a7da80544ac887de87dbdb0a5f7
msgid "Geometry Field Options"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:74
# 5424eb1032d2496ba06a95c2b4699d6f
msgid "In addition to the regular :ref:`common-model-field-options` available for Django model fields, geometry fields have the following additional options. All are optional."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:79
# 0cfacee741b6403488692ce2ea796efe
msgid "``srid``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:83
# c5297e8202554df88ed0aa6816e7b646
msgid "Sets the SRID [#fnogcsrid]_ (Spatial Reference System Identity) of the geometry field to the given value. Defaults to 4326 (also known as `WGS84`__, units are in degrees of longitude and latitude)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:92
# 28e6af8f6e64497b88eb805a6d0e2468
msgid "Selecting an SRID"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:94
# 216e8cb8ebd24a17a786217b1c7afd1d
msgid "Choosing an appropriate SRID for your model is an important decision that the developer should consider carefully.  The SRID is an integer specifier that corresponds to the projection system that will be used to interpret the data in the spatial database. [#fnsrid]_  Projection systems give the context to the coordinates that specify a location.  Although the details of `geodesy`__ are beyond the scope of this documentation, the general problem is that the earth is spherical and representations of the earth (e.g., paper maps, Web maps) are not."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:103
# 1ea9cd4f89c947d6ac6d7726885fc22a
msgid "Most people are familiar with using latitude and longitude to reference a location on the earth's surface.  However, latitude and longitude are angles, not distances. [#fnharvard]_  In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an *arc* of a `great circle`__. [#fnthematic]_  Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles).  Using a geographic coordinate system may introduce complications for the developer later on.  For example, PostGIS versions 1.4 and below do not have the capability to perform distance calculations between non-point geometries using geographic coordinate systems, e.g., constructing a query to  find all points within 5 miles of a county boundary stored as WGS84. [#fndist]_"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:116
# d9042df037624aabada077ba3f89a61d
msgid "Portions of the earth's surface may projected onto a two-dimensional, or Cartesian, plane.  Projected coordinate systems are especially convenient for region-specific applications, e.g., if you know that your database will only cover geometries in `North Kansas`__, then you may consider using projection system specific to that region.  Moreover, projected coordinate systems are defined in Cartesian units (such as meters or feet), easing distance calculations."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:126
# 366d19bb74c44282aa46503e13a2242c
msgid "If you wish to peform arbitrary distance queries using non-point geometries in WGS84, consider upgrading to PostGIS 1.5. For better performance, enable the :attr:`GeometryField.geography` keyword so that :ref:`geography database type <geography-type>` is used instead."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:132
# 28be2d3c94e64584849b61772981728b
msgid "Additional Resources:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:134
# e59bd3a6b01e44969d2b7bcbfd5bf7c1
msgid "`spatialreference.org`__: A Django-powered database of spatial reference systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:136
# fcb23c0b09344d5ba6f1860145875354
msgid "`The State Plane Coordinate System`__: A Web site covering the various projection systems used in the United States.  Much of the U.S. spatial data encountered will be in one of these coordinate systems rather than in a geographic coordinate system such as WGS84."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:148
# bbaca5062815468a9d7daec21c77d18a
msgid "``spatial_index``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:152
# a5d8159a70ae45c9a90c2e79d4fa644e
msgid "Defaults to ``True``.  Creates a spatial index for the given geometry field."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:157
# 25f5ddb4913e4732a8299eee59a7d925
msgid "This is different from the ``db_index`` field option because spatial indexes are created in a different manner than regular database indexes.  Specifically, spatial indexes are typically created using a variant of the R-Tree, while regular database indexes typically use B-Trees."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:164
# fae4fbf5023540d197d6700f914b30fa
msgid "``dim``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:168
# 42e3b7e9ed8e430abc6dec33dab0e13e
msgid "This option may be used for customizing the coordinate dimension of the geometry field.  By default, it is set to 2, for representing two-dimensional geometries.  For spatial backends that support it, it may be set to 3 for three-dimensonal support."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:175
# 51fced432bc340f297f827272d429c74
msgid "At this time 3D support requires that GEOS 3.1 be installed, and is limited only to the PostGIS spatial backend."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:179
# b924e053e94a46ea8b86b7e0e6a46244
msgid "``geography``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:183
# 1d0a711a43844b459d8719dcb1b7ffb3
msgid "If set to ``True``, this option will create a database column of type geography, rather than geometry.  Please refer to the :ref:`geography type <geography-type>` section below for more details."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:190
# c32f48fba5234c069529f26cdbdf0bc2
msgid "Geography support is limited only to PostGIS 1.5+, and will force the SRID to be 4326."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:196
# 6fb05f4c553d41e4afab3c607e99a2c8
msgid "Geography Type"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:198
# ef6393e16f1d4f948f2283dbeeb2f441
msgid "In PostGIS 1.5, the geography type was introduced -- it provides native support for spatial features represented with geographic coordinates (e.g., WGS84 longitude/latitude). [#fngeography]_ Unlike the plane used by a geometry type, the geography type uses a spherical representation of its data.  Distance and measurement operations performed on a geography column automatically employ great circle arc calculations and return linear units.  In other words, when ``ST_Distance`` is called on two geographies, a value in meters is returned (as opposed to degrees if called on a geometry column in WGS84)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:208
# ba54be9b6f964127b8f612a1ca6bc33b
msgid "Because geography calculations involve more mathematics, only a subset of the PostGIS spatial lookups are available for the geography type. Practically, this means that in addition to the :ref:`distance lookups <distance-lookups>` only the following additional :ref:`spatial lookups <spatial-lookups>` are available for geography columns:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:219
# 5e23fb5952954b44941172acaec78df3
msgid "For more information, the PostGIS documentation contains a helpful section on determining `when to use geography data type over geometry data type <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#PostGIS_GeographyVSGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:224
# 327272650891451bb1d94f76fe64c4e1
msgid "``GeoManager``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:229
# eb7bfc554cae4c9ebc984cb285bde420
msgid "In order to conduct geographic queries, each geographic model requires a ``GeoManager`` model manager.  This manager allows for the proper SQL construction for geographic queries; thus, without it, all geographic filters will fail.  It should also be noted that ``GeoManager`` is required even if the model does not have a geographic field itself, e.g., in the case of a ``ForeignKey`` relation to a model with a geographic field.  For example, if we had an ``Address`` model with a ``ForeignKey`` to our ``Zipcode`` model::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:249
# 2f59fd9e46c848cdb205f6dd2817e2ae
msgid "The geographic manager is needed to do spatial queries on related ``Zipcode`` objects, for example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:255
# 9d8db651bef64bf180addae2e230feaa
msgid "OpenGIS Consortium, Inc., `Simple Feature Specification For SQL <http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:256
# 8d97039394934548b8755401be5cb7e6
msgid "*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference Systems)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:257
# 2c880ca41a704dfb916949a5ca6c5dad
msgid "Typically, SRID integer corresponds to an EPSG (`European Petroleum Survey Group <http://www.epsg.org>`_) identifier.  However, it may also be associated with custom projections defined in spatial database's spatial reference systems table."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:258
# 4201bbbccf624522b7fdd26474983eb8
msgid "Harvard Graduate School of Design, `An Overview of Geodesy and Geographic Referencing Systems <http://www.gsd.harvard.edu/gis/manual/projections/fundamentals/>`_.  This is an excellent resource for an overview of principles relating to geographic and Cartesian coordinate systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:259
# 5e763cc0443c4a8a803a3981c4e42680
msgid "Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, *Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd edition), at Ch. 7.1.3."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:260
# 9a0606ed69a94a2b8b778f8b7610f270
msgid "This limitation does not apply to PostGIS 1.5.  It should be noted that even in previous versions of PostGIS, this isn't impossible using GeoDjango; you could for example, take a known point in a projected coordinate system, buffer it to the appropriate radius, and then perform an intersection operation with the buffer transformed to the geographic coordinate system."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:261
# 62f084b813a64c759ca5a6149bee81a5
msgid "Please refer to the `PostGIS Geography Type <http://postgis.refractions.net/documentation/manual-1.5/ch04.html#PostGIS_Geography>`_ documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:5
# 03bd4d97c9bf43c78c1b58c82c27d614
msgid "OGR Inspection"
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:13
# 877beb727a8343608996bccbea3208f7
msgid "``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:3
# f072a653f54247e79f688bc1d14aa6b9
msgid "Geographic Sitemaps"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:5
# 346c55b093f74cd89d3d8177ade5691f
msgid "Google's sitemap protocol used to include geospatial content support. [#]_ This included the addition of the ``<url>`` child element ``<geo:geo>``, which tells Google that the content located at the URL is geographic in nature. This is now obsolete."
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:14
# fcc4b560d1404cea898320836f6358d0
msgid "Reference"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:17
# b5ef4730f1cd4bd794745e1ed1c64687
msgid "``KMLSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:20
# ded4aef204f14f70b3296eeecf47fffd
msgid "``KMZSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:23
# 6daa9105ad784305b9a1b7b1317f53f1
msgid "``GeoRSSSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:26
# 6fa3da34383d40ea981b51e3fbcdba01
msgid "Google, Inc., `What is a Geo Sitemap? <http://support.google.com/webmasters/bin/answer.py?answer=94555>`_."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:3
# 3a1738bd481147508fc2a42a3e9d4f84
msgid "Testing GeoDjango apps"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:5
# b658e1840e7b4af9a764a04c069490a0
msgid "Included in this documentation are some additional notes and settings for :ref:`testing-postgis` and :ref:`testing-spatialite` users."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:18
# 2518f499dd4a440f84033c287281de41
msgid "The settings below have sensible defaults, and shouldn't require manual setting."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:23
# c20f00e8f6ce44f7a14f67256770313b
msgid "``POSTGIS_TEMPLATE``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:25
# cdbe604be5ec49c7adfc2fa7617d5a2a
msgid "This setting may be used to customize the name of the PostGIS template database to use. It automatically defaults to ``'template_postgis'`` (the same name used in the :ref:`installation documentation <spatialdb_template>`)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:33
# 4ce11c0a6d2242f6bac73db967f76dc7
msgid "``POSTGIS_VERSION``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:35
# f61d796afa8a4674aeae49b1b11b567c
msgid "When GeoDjango's spatial backend initializes on PostGIS, it has to perform a SQL query to determine the version in order to figure out what features are available. Advanced users wishing to prevent this additional query may set the version manually using a 3-tuple of integers specifying the major, minor, and subminor version numbers for PostGIS. For example, to configure for PostGIS 1.5.2 you would use::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:45
# 06ff0aa4e906487cb12ce647b5131501
msgid "Obtaining sufficient privileges"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:47
# 64a144188b874e669c6d124bc099de2c
msgid "Depending on your configuration, this section describes several methods to configure a database user with sufficient privileges to run tests for GeoDjango applications on PostgreSQL. If your :ref:`spatial database template <spatialdb_template>` was created like in the instructions, then your testing database user only needs to have the ability to create databases. In other configurations, you may be required to use a database superuser."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:56
# 1affb340cbd84af38dd41fe74708a9ab
msgid "Create database user"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:58
# d9f50888f48b47808bd376b632ca87f0
msgid "To make a database user with the ability to create databases, use the following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:63
# 1acc8232e1c44660b1e9854899c3e5d4
msgid "The ``-R -S`` flags indicate that we do not want the user to have the ability to create additional users (roles) or to be a superuser, respectively."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:66
# 4096fee5fc6a4259b942b0c9c45b383b
msgid "Alternatively, you may alter an existing user's role from the SQL shell (assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:72
# e3efc0271782472281daa4330e96c566
msgid "Create database superuser"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:74
# 82fa142afe0c421e8f7c7780b28440c2
msgid "This may be done at the time the user is created, for example::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:78
# aa6c7f2fade24f22aae6e0c13ba3f6f2
msgid "Or you may alter the user's role from the SQL shell (assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:85
# 660e86cc28994d368f2cf4674d66ad39
msgid "Create local PostgreSQL database"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:87
# 53ce1ac10e5d4649abdf2b795626034d
msgid "Initialize database: ``initdb -D /path/to/user/db``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:89
# 1e68e8cceff64699a2a8cc84282a1f65
msgid "If there's already a Postgres instance on the machine, it will need to use a different TCP port than 5432. Edit ``postgresql.conf`` (in ``/path/to/user/db``) to change the database port (e.g. ``port = 5433``)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:93
# 3093726de43742b99db6944681b23a19
msgid "Start this database ``pg_ctl -D /path/to/user/db start``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:98
# 37f0df58b32549b4bbc66bce8739400c
msgid "On Windows platforms the pgAdmin III utility may also be used as a simple way to add superuser privileges to your database user."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:101
# 235cf35b05c54f1f8d684de6b51e8701
msgid "By default, the PostGIS installer on Windows includes a template spatial database entitled ``template_postgis``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:109
# 97895a91aa1b442099cccf8ed176e11e
msgid "Make sure the necessary spatial tables are created in your test spatial database, as described in :ref:`create_spatialite_db`. Then just do this::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:120
# b134aa6e83694eab813329d3062b19c6
msgid "``SPATIALITE_SQL``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:122
# 5afe8663ad554e1c9d212176022ea84a
msgid "Only relevant when using a SpatiaLite version 2.3."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:124
# 36e7a228dca642468c3150cda43284b5
msgid "By default, the GeoDjango test runner looks for the :ref:`file containing the SpatiaLite dababase-initialization SQL code <create_spatialite_db>` in the same directory where it was invoked (by default the same directory where ``manage.py`` is located). To use a different location, add the following to your settings::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:135
# 855fa39cabf7423dba06654da72809d4
msgid "GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:137
# 19de9f65f1ee4db7ac6f0d279f9b96e2
msgid "GeoDjango's test suite may be run in one of two ways, either by itself or with the rest of :ref:`Django's unit tests <running-unit-tests>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:141
# 635e0e15d0cf40489a1a3311c8ac8f8a
msgid "Run only GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:143
# a9418d142cc0424b8eac4787c3f4fa9e
msgid "To run *only* the tests for GeoDjango, the :setting:`TEST_RUNNER` setting must be changed to use the :class:`~django.contrib.gis.tests.GeoDjangoTestSuiteRunner`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:152
# 7e0dbf418678466cb061c1848c4a663b
msgid "First, you'll need a bare-bones settings file, like below, that is customized with your spatial database name and user::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:165
# 11851e03545948a7bd54cf213197c9ed
msgid "Assuming the above is in a file called ``postgis.py`` that is in the the same directory as ``manage.py`` of your Django project, then you may run the tests with the following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:172
# fa6f6a0815674c9ebb6047821acf8606
msgid "Run with ``runtests.py``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:174
# a72c144dfeb54dd9808f3e763b3b7450
msgid "To have the GeoDjango tests executed when :ref:`running the Django test suite <running-unit-tests>` with ``runtests.py`` all of the databases in the settings file must be using one of the :ref:`spatial database backends <spatial-backends>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:181
# a5c841173e6c4f1f8a3c98c58e2be5b5
msgid "Do not change the :setting:`TEST_RUNNER` setting when running the GeoDjango tests with ``runtests.py``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:187
# 8259c677946b46ca8b40c7b3b6429372
msgid "The following is an example bare-bones settings file with spatial backends that can be used to run the entire Django test suite, including those in :mod:`django.contrib.gis`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:204
# 8a8447c812444160b66a78b255462ee0
msgid "Assuming the settings above were in a ``postgis.py`` file in the same directory as ``runtests.py``, then all Django and GeoDjango tests would be performed when executing the command::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:3
# 0b2903b3c00549dda40f2844edb34df1
msgid "GeoDjango Tutorial"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:8
# 7ffa91911dd643ec97acbe4530ff4a3d
msgid "GeoDjango is an included contrib module for Django that turns it into a world-class geographic Web framework.  GeoDjango strives to make it as simple as possible to create geographic Web applications, like location-based services. Its features include:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:13
# b2721c920f524e7fa90c9c51d7d5174a
msgid "Django model fields for `OGC`_ geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:14
# 4e63d2e74ae34cccae7ca4276750cbbc
msgid "Extensions to Django's ORM for querying and manipulating spatial data."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:15
# 6ed41bdce91746808337eac8945ad28f
msgid "Loosely-coupled, high-level Python interfaces for GIS geometry operations and data formats."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:17
# c1e32141a7574527b99bd859a7d1a3d7
msgid "Editing geometry fields from the admin."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:19
# 959ec0efc3444ab682a85eafc8f40b61
msgid "This tutorial assumes familiarity with Django; thus, if you're brand new to Django, please read through the :doc:`regular tutorial </intro/tutorial01>` to familiarize yourself with Django first."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:25
# 636b8b64a19446b788105c472b757919
msgid "GeoDjango has additional requirements beyond what Django requires -- please consult the :ref:`installation documentation <ref-gis-install>` for more details."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:29
# 070c33a8d2a64a578c1d3c54b9900cd1
msgid "This tutorial will guide you through the creation of a geographic web application for viewing the `world borders`_. [#]_ Some of the code used in this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ project. [#]_"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:36
# b3844ce59bc1427f8500b1bebcfb4a83
msgid "Proceed through the tutorial sections sequentially for step-by-step instructions."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:44
# 471a779cee484f758a1cca80ce5693f9
msgid "Setting Up"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:47
# a82f8bdfbac74ca98ff545e618c164a7
msgid "Create a Spatial Database"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:51
# 45eca06513674e84a057a83965cf35d1
msgid "MySQL and Oracle users can skip this section because spatial types are already built into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:54
# 199f153a37b34dae9898bab8fac5bccd
msgid "First, create a spatial database for your project."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:56
# 823aa7bec6274451ad0b0c2295b7d6e4
msgid "If you are using PostGIS, create the database from the :ref:`spatial database template <spatialdb_template>`:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:65
# 4b11866f24954a6aa5f285649cf3036b
msgid "This command must be issued by a database user with enough privileges to create a database.  To create a user with ``CREATE DATABASE`` privileges in PostgreSQL, use the following commands:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:75
# 44f3108ef1024f469db3f6c2c86dad5f
msgid "Replace ``geo`` with your Postgres database user's username. (In PostgreSQL, this user will also be an OS-level user.)"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:78
# 5826a5cef8a743de84755018aecb8acc
msgid "If you are using SQLite and SpatiaLite, consult the instructions on how to create a :ref:`SpatiaLite database <create_spatialite_db>`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:82
# 4daaa6fc6d244c759cd83401e8be260d
msgid "Create a New Project"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:84
# 5d37f037dc1d4f24b3b26786b8dae565
msgid "Use the standard ``django-admin.py`` script to create a project called ``geodjango``:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:91
# 8d359b4338c0456e9a876a95387b335c
msgid "This will initialize a new project. Now, create a ``world`` Django application within the ``geodjango`` project:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:100
# d3f72c128ad042c589ea5e313ea10a27
msgid "Configure ``settings.py``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:102
# e58b77ea674345669a1b9be26f1f507b
msgid "The ``geodjango`` project settings are stored in the ``geodjango/settings.py`` file. Edit the database connection settings to match your setup::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:113
# 9308acc201be440eaf1d0cd6805ffea2
msgid "In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (your newly created application)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:130
# 5cb309c82b2f446a8282a20ed2dd7a62
msgid "Geographic Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:135
# 4fe36197dc194760b20e8093eca29b2b
msgid "World Borders"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:137
# 314cd79a2d8b4780af137d9a55208698
msgid "The world borders data is available in this `zip file`__.  Create a ``data`` directory in the ``world`` application, download the world borders data, and unzip. On GNU/Linux platforms, use the following commands:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:149
# 17df6af0834045d08748c9836a0c0e22
msgid "The world borders ZIP file contains a set of data files collectively known as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  When unzipped, the world borders dataset includes files with the following extensions:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:154
# 55166cf329cf43c78f68eac7dfe8c868
msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:155
# 318f537754754b46b721f93256f9e20b
msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:156
# 677490d9f9f44e649f6133bff500ce7f
msgid "``.dbf``: Database file for holding non-geometric attribute data (e.g., integer and character fields)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:158
# 3b3533d4cd4644e6935961a67db49911
msgid "``.prj``: Contains the spatial reference information for the geographic data stored in the shapefile."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:165
# 88d9f29e88ed49408c3da02e9fe23334
msgid "Use ``ogrinfo`` to examine spatial data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:167
# 3683c20175174ec2a7ae5f9de44048f3
msgid "The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or other vector data sources:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:177
# c86e005a50a04e7f8017cfc0668b15ca
msgid "``ogrinfo`` tells us that the shapefile has one layer, and that this layer contains polygon data.  To find out more, we'll specify the layer name and use the ``-so`` option to get only the important summary information:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:209
# c997f762d85a484081b0a8bc86bc8269
msgid "This detailed summary information tells us the number of features in the layer (246), the geographic bounds of the data, the spatial reference system (\"SRS WKT\"), as well as type information for each attribute field. For example, ``FIPS: String (2.0)`` indicates that the ``FIPS`` character field has a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-point field that holds a maximum of 8 digits up to three decimal places."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:217
# ec919d58f58f42709a93476228f403ac
msgid "Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:220
# bd869af9e7254dc99068e94a19c387e1
msgid "Defining a Geographic Model"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:222
# 6f30b14fe43f409f84d398d43f8774f1
msgid "Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango model to represent this data::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:251
# 2ce448ceab3243e5a54db0a4b9d895eb
msgid "Please note two important things:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:253
# cae91ffc93f949a791cdc82fd59622d7
msgid "The ``models`` module is imported from :mod:`django.contrib.gis.db`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:254
# e10a842cdb3d4106a0d908eacf635fe7
msgid "You must override the model's default manager with :class:`~django.contrib.gis.db.models.GeoManager` to perform spatial queries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:257
# 7d8dddab1a0c44049ec226517274e23a
msgid "The default spatial reference system for geometry fields is WGS84 (meaning the `SRID`__ is 4326) -- in other words, the field coordinates are in longitude, latitude pairs in units of degrees.  To use a different coordinate system, set the SRID of the geometry field with the ``srid`` argument. Use an integer representing the coordinate system's EPSG code."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:266
# 7f3182e3b52d4581bf42cc57c7eaaa8f
msgid "Run ``syncdb``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:268
# adb31773c1394e65b5925cab50168b59
msgid "After defining your model, you need to sync it with the database. First, let's look at the SQL that will generate the table for the ``WorldBorder`` model::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:274
# 9eebe91f10994f5292ed44a7d7baf593
msgid "This command should produce the following output:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:299
# 118d0d87c7964785b4e2b71333c43ff5
msgid "If this looks correct, run ``syncdb`` to create this table in the database::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:305
# ad08330b3bb741298855251ab5c46013
msgid "The ``syncdb`` command may also prompt you to create an admin user. Either do so now, or later by running ``django-admin.py createsuperuser``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:309
# c6773a73071449c59eb76374db1cb925
msgid "Importing Spatial Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:311
# 8a0316f2ce1f4c4789e263f8e1a39f79
msgid "This section will show you how to import the world borders shapefile into the database via GeoDjango models using the :ref:`ref-layermapping`. There are many different ways to import data into a spatial database -- besides the tools included within GeoDjango, you may also use the following:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:317
# 88e638f803f64d068846e282c4faad92
msgid "`ogr2ogr`_: A command-line utility included with GDAL that can import many vector data formats into PostGIS, MySQL, and Oracle databases."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:319
# 2ee0d2d1905a4567957970d0c1dccea4
msgid "`shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles into PostGIS."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:328
# 0c7aa22554384c40baf39c20e7f0fce2
msgid "GDAL Interface"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:330
# c560a9e5af90469a97f231a9e79d2f5f
msgid "Earlier, you used ``ogrinfo`` to examine the contents of the world borders shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful OGR library that can work with all the vector data sources that OGR supports."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:334
# 29d6c47b27b545418b31e639d3176008
msgid "First, invoke the Django shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:340
# 9108c99b41b84a80b78e744501100a99
msgid "If you downloaded the :ref:`worldborders` data earlier in the tutorial, then you can determine its path using Python's built-in ``os`` module::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:349
# 73e558f7331648319c30be8f4e84e5a4
msgid "Now, open the world borders shapefile using GeoDjango's :class:`~django.contrib.gis.gdal.DataSource` interface::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:357
# 4a2b8a3200b54bbabc81403f7a9ce250
msgid "Data source objects can have different layers of geospatial features; however, shapefiles are only allowed to have one layer::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:366
# 6b5496123bb9475194e9f36cbbd0983a
msgid "You can see the layer's geometry type and how many features it contains::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:375
# 5d479720a4444e75824a817dc42befd1
msgid "Unfortunately, the shapefile data format does not allow for greater specificity with regards to geometry types.  This shapefile, like many others, actually includes ``MultiPolygon`` geometries, not Polygons. It's important to use a more general field type in models: a GeoDjango ``MultiPolygonField`` will accept a ``Polygon`` geometry, but a ``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This is why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:383
# adeb413c7dca4ed09e7fabbd552a4c9a
msgid "The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial reference system associated with it.  If it does, the ``srs`` attribute will return a :class:`~django.contrib.gis.gdal.SpatialReference` object::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:397
# d3173a57d91a4a90add9592645cfc199
msgid "This shapefile is in the popular WGS84 spatial reference system -- in other words, the data uses longitude, latitude pairs in units of degrees."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:401
# 9499fe5e8959421192926b1d474c043b
msgid "In addition, shapefiles also support attribute fields that may contain additional data.  Here are the fields on the World Borders layer:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:407
# 1be8604e72934cc8adf720d03c553d20
msgid "The following code will let you examine the OGR types (e.g. integer or string) associated with each of the fields:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:413
# 674e91b7e7d04024987156973e87d7fb
msgid "You can iterate over each feature in the layer and extract information from both the feature's geometry (accessed via the ``geom`` attribute) as well as the feature's attribute fields (whose **values** are accessed via ``get()`` method)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:426
# cce0e11bee704c45b9c84f53a3daa4a6
msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:431
# bcc1494e15a645ba8cff9df3fd6792b7
msgid "And individual features may be retrieved by their feature ID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:437
# 59e5b1151c4b4b96a3b0b7e15118357a
msgid "Boundary geometries may be exported as WKT and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:447
# 08fa6b2184c04fc0bdbaeadba277aa59
msgid "``LayerMapping``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:449
# bc9a162fabe94977a175e142c72e92cb
msgid "To import the data, use a LayerMapping in a Python script. Create a file called ``load.py`` inside the ``world`` application, with the following code::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:480
# 4846ef901c904968bd07f34e667131a6
msgid "A few notes about what's going on:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:482
# 20693ba1b4394730acf4d2d5ad5d9157
msgid "Each key in the ``world_mapping`` dictionary corresponds to a field in the ``WorldBorder`` model.  The value is the name of the shapefile field that data will be loaded from."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:485
# dc66e1378a4d4d86a3bcbb62befc3793
msgid "The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry type GeoDjango will import the field as.  Even simple polygons in the shapefile will automatically be converted into collections prior to insertion into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:489
# e14ce65da32b44bb84fe533dd3c11a3b
msgid "The path to the shapefile is not absolute -- in other words, if you move the ``world`` application (with ``data`` subdirectory) to a different location, the script will still work."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:492
# 5b761a34bcf4444dabc725c3a669cf8a
msgid "The ``transform`` keyword is set to ``False`` because the data in the shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:494
# a627763c38694fa389fdef2370241268
msgid "The ``encoding`` keyword is set to the character encoding of the string values in the shapefile. This ensures that string values are read and saved correctly from their original encoding system."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:498
# 4c50a77fc22c450d8d54ebd4fcc6ba82
msgid "Afterwards, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:504
# 49840354cbf74397ae785ac86f610eaa
msgid "Next, import the ``load`` module, call the ``run`` routine, and watch ``LayerMapping`` do the work::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:514
# 33495585c70c406384ed6ffc64262023
msgid "Try ``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:515
# 0305f0615411448485249b5bd737d8f1
msgid "Now that you've seen how to define geographic models and import data with the :ref:`ref-layermapping`, it's possible to further automate this process with use of the :djadmin:`ogrinspect` management command.  The :djadmin:`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and ``LayerMapping`` dictionary automatically."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:521
# 043981b6b8394388bd6f4b2f902126e4
msgid "The general usage of the command goes as follows:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:527
# 89d1944b2f2040e19b09929c0801c8fa
msgid "``data_source`` is the path to the GDAL-supported data source and ``model_name`` is the name to use for the model.  Command-line options may be used to further define how the model is generated."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:531
# 2e84cadcff9c4d67a37501b39b8683da
msgid "For example, the following command nearly reproduces the ``WorldBorder`` model and mapping dictionary created above, automatically:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:539
# 1b2fe9ea7aaf4a10a22f3c35f310eee8
msgid "A few notes about the command-line options given above:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:541
# f5e3a0cbd1494a03b0a57441da233a34
msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:542
# e97c1891710a4a108280357a06516291
msgid "The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:545
# 6cfdc368c2c640fca84d37825ef51635
msgid "The ``--multi`` option is specified so that the geographic field is a :class:`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:549
# 6e35d9e2f53d4222bb8ac81000c663b3
msgid "The command produces the following output, which may be copied directly into the ``models.py`` of a GeoDjango application::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:587
# 77497cd8fae6438b93fd00b77b403e0e
msgid "Spatial Queries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:591
# 73e04a1417d54863befc9d6181da332b
msgid "GeoDjango adds spatial lookups to the Django ORM.  For example, you can find the country in the ``WorldBorder`` table that contains a particular point.  First, fire up the management shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:599
# 6457ce48a00a4e83a403750bdad29756
msgid "Now, define a point of interest [#]_::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:603
# 538a4b353f1043f4968741308a2b5506
msgid "The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, 29.7245 degrees latitude.  The geometry is in a format known as Well Known Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [#]_  Import the ``WorldBorder`` model, and perform a ``contains`` lookup using the ``pnt_wkt`` as the parameter::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:614
# ebfe6cd19eb64330922dbd1e245ae13c
msgid "Here, you retrieved a ``GeoQuerySet`` with only one model: the border of the United States (exactly what you would expect)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:617
# 8e15e6efcc364f05b076c977fac85c66
msgid "Similarly, you may also use a :ref:`GEOS geometry object <ref-geos>`. Here, you can combine the ``intersects`` spatial lookup with the ``get`` method to retrieve only the ``WorldBorder`` instance for San Marino instead of a queryset::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:628
# e33101eb5260471ea3dde6059c474c09
msgid "The ``contains`` and ``intersects`` lookups are just a subset of the available queries -- the :ref:`ref-gis-db-api` documentation has more."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:632
# e604761a177640e6b78e55c219cbb800
msgid "Automatic Spatial Transformations"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:633
# 4660714f99584cdf8666e550d9c28c7d
msgid "When doing spatial queries, GeoDjango automatically transforms geometries if they're in a different coordinate system.  In the following example, coordinates will be expressed in `EPSG SRID 32140`__, a coordinate system specific to south Texas **only** and in units of **meters**, not degrees::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:642
# 9197ad5178ea40aaa7b645ef6e79e08a
msgid "Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of WKT that includes the SRID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:647
# 414848e3cb1f4a37864705994386c413
msgid "GeoDjango's ORM will automatically wrap geometry values in transformation SQL, allowing the developer to work at a higher level of abstraction::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:666
# aa73b0c3c1bd44488f184ec745f466f2
msgid "When using :doc:`raw queries </topics/db/sql>`, you should generally wrap your geometry fields with the ``asText()`` SQL function (or ``ST_AsText`` for PostGIS) so that the field value will be recognized by GEOS::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:672
# afbbbf3605a2424183649012ffc8ccfc
msgid "This is not absolutely required by PostGIS, but generally you should only use raw queries when you know exactly what you are doing."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:676
# efab0c62ea494a84aa0c85b601ea9f81
msgid "Lazy Geometries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:677
# ebffc378911f4010b4b027ba2b16a19c
msgid "GeoDjango loads geometries in a standardized textual representation.  When the geometry field is first accessed, GeoDjango creates a `GEOS geometry object <ref-geos>`, exposing powerful functionality, such as serialization properties for popular geospatial formats::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:692
# ea2d1c1f72254ba4b8dadf1a6c5f6a29
msgid "This includes access to all of the advanced geometric operations provided by the GEOS library::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:706
# 074700b4ba474dde8d6cb9957ae31d58
msgid "Putting your data on the map"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:709
# c841c897b40f41968297757b7668a720
msgid "Geographic Admin"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:711
# 59a81ec7632f40c1b793b05bbb8bf4d2
msgid "GeoDjango extends :doc:`Django's admin application </ref/contrib/admin/index>` with support for editing geometry fields."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:715
#: ../../ref/templates/api.txt:16
# f15dc9c25270411696d489c299219046
# d728575e212145229daaff85e6591b0e
msgid "Basics"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:717
# 824ff75dbd8047ce8770b48aef570b47
msgid "GeoDjango also supplements the Django admin by allowing users to create and modify geometries on a JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:720
# cc5bfb46144a465380675ad14bce54d0
msgid "Let's dive right in.  Create a file called ``admin.py`` inside the ``world`` application with the following code::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:728
# b35fd54e63ac4087b9bac27425ee2e02
msgid "Next, edit your ``urls.py`` in the ``geodjango`` application folder as follows::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:739
# 8e65112ca32348d9aa386570f02d5e7c
msgid "Start up the Django development server:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:745
# 8a852edafaf14266a0776be4d9c605f8
msgid "Finally, browse to ``http://localhost:8000/admin/``, and log in with the admin user created after running ``syncdb``.  Browse to any of the ``WorldBorder`` entries -- the borders may be edited by clicking on a polygon and dragging the vertexes to the desired position."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:760
# 817e988a6cf34baa940e42360ceb2897
msgid "With the :class:`~django.contrib.gis.admin.OSMGeoAdmin`, GeoDjango uses a `Open Street Map`_ layer in the admin. This provides more context (including street and thoroughfare details) than available with the :class:`~django.contrib.gis.admin.GeoModelAdmin` (which uses the `Vector Map Level 0`_ WMS dataset hosted at `OSGeo`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:766
# b6a72ff3b91640ff80b53f49f9cbead0
msgid "First, there are some important requirements:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:768
# 0da6a2c1e8464b9796a37715bb895b4d
msgid ":class:`~django.contrib.gis.admin.OSMGeoAdmin` requires that the :ref:`spherical mercator projection be added <addgoogleprojection>` to the ``spatial_ref_sys`` table (PostGIS 1.3 and below, only)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:771
# 17c288f32c5d4e59a7e1e46f15d9bef6
msgid "The PROJ.4 datum shifting files must be installed (see the :ref:`PROJ.4 installation instructions <proj4>` for more details)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:774
# f41c120b0ca74132bede4899b9a57a66
msgid "If you meet these requirements, then just substitute the ``OSMGeoAdmin`` option class in your ``admin.py`` file::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:781
# 9922a61b37704a70b90d0178cba33745
msgid "Special thanks to Bjørn Sandvik of `thematicmapping.org <http://thematicmapping.org>`_ for providing and maintaining this dataset."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:784
# 9093a4ed1fa2469597501e94d1cc5740
msgid "GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and Christopher Schmidt."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:786
# 36402fe7f6b64917bf5ccb33043848b3
msgid "This point is the `University of Houston Law Center <http://www.law.uh.edu/>`_."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:788
# 69d2384a15104f0292afc449f88850da
msgid "Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""

#: ../../ref/contrib/gis/utils.txt:5
# 0b2b84e8d5794d5dac35c90c5c9c1a9d
msgid "GeoDjango Utilities"
msgstr ""

#: ../../ref/contrib/gis/utils.txt:10
# a7276e3d9ffb4f7387110026633bd372
msgid "The :mod:`django.contrib.gis.utils` module contains various utilities that are useful in creating geospatial Web applications."
msgstr ""

#: ../../ref/contrib/humanize.txt:3
#: ../../ref/templates/builtins.txt:2326
# 18c260cbf0da4cd6b642123c8f89bcc2
# 5adc58a7579e410da0328754c4dbe0b6
msgid "django.contrib.humanize"
msgstr ""

#: ../../ref/contrib/humanize.txt:9
#: ../../ref/contrib/index.txt:122
# fef5e3fc674c4cedbf6c5fa2b1f131e7
# 8318a6786682470189e6b891bd17e650
msgid "A set of Django template filters useful for adding a \"human touch\" to data."
msgstr ""

#: ../../ref/contrib/humanize.txt:11
# 07e4b556777846dd8880da8d2473cf45
msgid "To activate these filters, add ``'django.contrib.humanize'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load humanize %}`` in a template, and you'll have access to the following filters."
msgstr ""

#: ../../ref/contrib/humanize.txt:19
# 967e91d07d0240048a9d0d4fb55f29f5
msgid "apnumber"
msgstr ""

#: ../../ref/contrib/humanize.txt:21
# f67c346f8dfc489487f893ba140881da
msgid "For numbers 1-9, returns the number spelled out. Otherwise, returns the number. This follows Associated Press style."
msgstr ""

#: ../../ref/contrib/humanize.txt:24
#: ../../ref/contrib/humanize.txt:39
#: ../../ref/contrib/humanize.txt:62
#: ../../ref/contrib/humanize.txt:134
#: ../../ref/contrib/webdesign.txt:51
#: ../../ref/django-admin.txt:1105
# bbb7c74c435147198def404ab33ca183
# c3001dff884f4d478468ae2222703460
# 83520f4d6f6943a8b9fa35315ba4efbd
# 257f1cfafbe7460086f73d58cf969d31
# b85bd7158fb147ae8b13b004c5ec82ce
# 3cd96f426a72443c90d99c279284afc3
msgid "Examples:"
msgstr ""

#: ../../ref/contrib/humanize.txt:26
# 5e156a48a516496389d36fbf7c9ea3ae
msgid "``1`` becomes ``one``."
msgstr ""

#: ../../ref/contrib/humanize.txt:27
# 8ded3d32929445b685160856315d3aea
msgid "``2`` becomes ``two``."
msgstr ""

#: ../../ref/contrib/humanize.txt:28
# 78e4835f70c1412696242465c13d10ec
msgid "``10`` becomes ``10``."
msgstr ""

#: ../../ref/contrib/humanize.txt:30
#: ../../ref/contrib/humanize.txt:52
#: ../../ref/contrib/humanize.txt:77
#: ../../ref/contrib/humanize.txt:140
# 206472bf7361490e8c6dc1bfb6124b30
# 39530e9d47874cf0a00386f084cb74de
# 721baa62975d468f915bc3e51aa1d576
# 81d9af232a0f46ff857aea376de6047b
msgid "You can pass in either an integer or a string representation of an integer."
msgstr ""

#: ../../ref/contrib/humanize.txt:35
# 8cb3c633604043b0af60bee48949677e
msgid "intcomma"
msgstr ""

#: ../../ref/contrib/humanize.txt:37
# 7cb4ae2564ff438d9178f8dda10f7c9f
msgid "Converts an integer to a string containing commas every three digits."
msgstr ""

#: ../../ref/contrib/humanize.txt:41
# 3573153b412743ac8eac3dce7ff55246
msgid "``4500`` becomes ``4,500``."
msgstr ""

#: ../../ref/contrib/humanize.txt:42
# 25be4a42c4b14e8ca73998e58e5aadd6
msgid "``45000`` becomes ``45,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:43
# 4dd60cd42fdc4d17a26b2e2a44f225c3
msgid "``450000`` becomes ``450,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:44
# a9e133068c0841d0bd397ecb2cbcf547
msgid "``4500000`` becomes ``4,500,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:46
#: ../../ref/contrib/humanize.txt:70
# 75c273f373264fcca7ab24d5e2b02c45
# 25786e8881fc4467a914532d352e74d9
msgid ":ref:`Format localization <format-localization>` will be respected if enabled, e.g. with the ``'de'`` language:"
msgstr ""

#: ../../ref/contrib/humanize.txt:49
# 1dee3f8c38fe491099c37612db5cf71f
msgid "``45000`` becomes ``'45.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:50
# 3c8e58375c4c42cab0b03c7ab9a1131f
msgid "``450000`` becomes ``'450.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:57
# d2680414ec604872bb848bb35e177b32
msgid "intword"
msgstr ""

#: ../../ref/contrib/humanize.txt:59
# 25c10f7fc61a4da2aebb2fcd38eb2086
msgid "Converts a large integer to a friendly text representation. Works best for numbers over 1 million."
msgstr ""

#: ../../ref/contrib/humanize.txt:64
# 33893d95f4044c6da0934317a95fe093
msgid "``1000000`` becomes ``1.0 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:65
# 00350bf2628c48e8a470fde8775e705f
msgid "``1200000`` becomes ``1.2 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:66
# 71dcd9ad1c1543a28714d170e962ed86
msgid "``1200000000`` becomes ``1.2 billion``."
msgstr ""

#: ../../ref/contrib/humanize.txt:68
# c50bd60679344219a81a03a1e8d116fb
msgid "Values up to 10^100 (Googol) are supported."
msgstr ""

#: ../../ref/contrib/humanize.txt:73
# 9d19b4088719407eb1c064059f5826ca
msgid "``1000000`` becomes ``'1,0 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:74
# 9cdfca6a0ce8498db40b9dbf769921d5
msgid "``1200000`` becomes ``'1,2 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:75
# 240b4ac144464d9484a50c16a5f33e79
msgid "``1200000000`` becomes ``'1,2 Milliarden'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:82
# 0b32b1f1190e413a8380d8425f3326d7
msgid "naturalday"
msgstr ""

#: ../../ref/contrib/humanize.txt:84
# 53e2dc2c1613467190425b9fdadedd2a
msgid "For dates that are the current day or within one day, return \"today\", \"tomorrow\" or \"yesterday\", as appropriate. Otherwise, format the date using the passed in format string."
msgstr ""

#: ../../ref/contrib/humanize.txt:88
# 2404893ba56c406b9c48b262725dbe00
msgid "**Argument:** Date formatting string as described in the :tfilter:`date` tag."
msgstr ""

#: ../../ref/contrib/humanize.txt:90
# da64eacc7dae4a29bd54352ffba8e536
msgid "Examples (when 'today' is 17 Feb 2007):"
msgstr ""

#: ../../ref/contrib/humanize.txt:92
# a3a944a863744a908fd1c8b16df57cfe
msgid "``16 Feb 2007`` becomes ``yesterday``."
msgstr ""

#: ../../ref/contrib/humanize.txt:93
# 36ea51de8d8c48c599d5df9332d3f1d6
msgid "``17 Feb 2007`` becomes ``today``."
msgstr ""

#: ../../ref/contrib/humanize.txt:94
# 48383d08acd44137b0e2bc60b87d601d
msgid "``18 Feb 2007`` becomes ``tomorrow``."
msgstr ""

#: ../../ref/contrib/humanize.txt:95
# 67e767aa18544d748d5e89cde069dafa
msgid "Any other day is formatted according to given argument or the :setting:`DATE_FORMAT` setting if no argument is given."
msgstr ""

#: ../../ref/contrib/humanize.txt:101
# 9648770ad69646a786cc00b06cbc1480
msgid "naturaltime"
msgstr ""

#: ../../ref/contrib/humanize.txt:105
# 49dcb8e2c9094939998a7d44340a156b
msgid "For datetime values, returns a string representing how many seconds, minutes or hours ago it was -- falling back to the :tfilter:`timesince` format if the value is more than a day old. In case the datetime value is in the future the return value will automatically use an appropriate phrase."
msgstr ""

#: ../../ref/contrib/humanize.txt:110
# 290636b881e1488b9e7f35c27391b8fb
msgid "Examples (when 'now' is 17 Feb 2007 16:30:00):"
msgstr ""

#: ../../ref/contrib/humanize.txt:112
# f0b05a3e692d4566a9f934b02f4661c9
msgid "``17 Feb 2007 16:30:00`` becomes ``now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:113
# fd15d65267bb4a7a8ea793fb4bae52cc
msgid "``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:114
# 8160da2d81084b34935008ec4e2df342
msgid "``17 Feb 2007 16:29:00`` becomes ``a minute ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:115
# ba43e857831a4568a6be5023845df99c
msgid "``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:116
# 9e3fccb75806491bbb0bbf2be2452356
msgid "``17 Feb 2007 15:30:29`` becomes ``an hour ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:117
# 0f0b5f58f4cd45da89df846948dce69e
msgid "``17 Feb 2007 13:31:29`` becomes ``2 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:118
# 7d4f77809e10470aa89994feea66c1f1
msgid "``16 Feb 2007 13:31:29`` becomes ``1 day, 3 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:119
# 98dd09b3a4194d93abac7b2609bccb4b
msgid "``17 Feb 2007 16:30:30`` becomes ``29 seconds from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:120
# b7c5c51cceb54a648d05ec0d0fd2b461
msgid "``17 Feb 2007 16:31:00`` becomes ``a minute from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:121
# cba2c40299784621ac5084678dca28d6
msgid "``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:122
# 02402e1c225e4317a56bb361e8b3575e
msgid "``17 Feb 2007 16:30:29`` becomes ``an hour from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:123
# 1dc2ff4ddd9f407fbdebd49f044c1e61
msgid "``17 Feb 2007 18:31:29`` becomes ``2 hours from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:124
# a5b3909f1d0d43ce879797e6fd049041
msgid "``18 Feb 2007 16:31:29`` becomes ``1 day from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:125
# 640f7baac28b4811ba522ece05a18e98
msgid "``26 Feb 2007 18:31:29`` becomes ``1 week, 2 days from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:130
# 6b3d8eef120f4d96871e5b8321fc6847
msgid "ordinal"
msgstr ""

#: ../../ref/contrib/humanize.txt:132
# d72896c5e6a74c878c980d256181c3b2
msgid "Converts an integer to its ordinal as a string."
msgstr ""

#: ../../ref/contrib/humanize.txt:136
# 4e86a280f8ff4df4b908aaa4ab6bb675
msgid "``1`` becomes ``1st``."
msgstr ""

#: ../../ref/contrib/humanize.txt:137
# 32f43fcc3ca34c63bc6af7aba0019fb7
msgid "``2`` becomes ``2nd``."
msgstr ""

#: ../../ref/contrib/humanize.txt:138
# 348ce5c268a24835b31113dafaf446e6
msgid "``3`` becomes ``3rd``."
msgstr ""

#: ../../ref/contrib/index.txt:3
# 6058afbf16be444fb99acad2573dcdac
msgid "``contrib`` packages"
msgstr ""

#: ../../ref/contrib/index.txt:5
# 74e558291fe947e4b13baa4cc8e15833
msgid "Django aims to follow Python's `\"batteries included\" philosophy`_. It ships with a variety of extra, optional tools that solve common Web-development problems."
msgstr ""

#: ../../ref/contrib/index.txt:9
# 56281950eb8b4f799b5c3e381a4dc594
msgid "This code lives in ``django/contrib`` in the Django distribution. This document gives a rundown of the packages in ``contrib``, along with any dependencies those packages have."
msgstr ""

#: ../../ref/contrib/index.txt:15
# e655ba6c1bf544d1beae63d365da0885
msgid "For most of these add-ons -- specifically, the add-ons that include either models or template tags -- you'll need to add the package name (e.g., ``'django.contrib.admin'``) to your :setting:`INSTALLED_APPS` setting and re-run ``manage.py syncdb``."
msgstr ""

#: ../../ref/contrib/index.txt:46
# dc80ab7ec73442929a87cb17e9bfb7db
msgid "admin"
msgstr ""

#: ../../ref/contrib/index.txt:48
# 676af764b2b44ac182064e5b546c79ac
msgid "The automatic Django administrative interface. For more information, see :doc:`Tutorial 2 </intro/tutorial02>` and the :doc:`admin documentation </ref/contrib/admin/index>`."
msgstr ""

#: ../../ref/contrib/index.txt:52
# 0c9d69a7405c4d8f9da71c89c4d3008f
msgid "Requires the auth_ and contenttypes_ contrib packages to be installed."
msgstr ""

#: ../../ref/contrib/index.txt:55
# 2d350005c96447a1aea1eaca7c246a65
msgid "auth"
msgstr ""

#: ../../ref/contrib/index.txt:57
# 5280fe151df446d79f7d786360974a44
msgid "Django's authentication framework."
msgstr ""

#: ../../ref/contrib/index.txt:62
# 711af87eb84643e59d1f8d48fd2fb0ac
msgid "comments"
msgstr ""

#: ../../ref/contrib/index.txt:64
# 6d74f7f3d82c470baec937171415b30e
msgid "A simple yet flexible comments system. See :doc:`/ref/contrib/comments/index`."
msgstr ""

#: ../../ref/contrib/index.txt:67
# ea0f186cfabf461784e883e76c8e5fda
msgid "contenttypes"
msgstr ""

#: ../../ref/contrib/index.txt:69
# 6b36fd2ae75841c48d55ee6c820abbc1
msgid "A light framework for hooking into \"types\" of content, where each installed Django model is a separate content type."
msgstr ""

#: ../../ref/contrib/index.txt:72
# 2755f779ff9d4cb0bcaece07033d47e9
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>`."
msgstr ""

#: ../../ref/contrib/index.txt:75
# 7c8bd48b63ec4415a4458564f433248e
msgid "csrf"
msgstr ""

#: ../../ref/contrib/index.txt:77
# c33e8d865d6b4df7bcffa2e7c90aa560
msgid "A middleware for preventing Cross Site Request Forgeries"
msgstr ""

#: ../../ref/contrib/index.txt:79
# a3f98400e41348fdba2f6408f34c8c03
msgid "See the :doc:`csrf documentation </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/contrib/index.txt:82
# c345a96a83824b4a9dfeb0f95a271513
msgid "flatpages"
msgstr ""

#: ../../ref/contrib/index.txt:84
# 1a4073a6376e4a419f85c29b79103d44
msgid "A framework for managing simple \"flat\" HTML content in a database."
msgstr ""

#: ../../ref/contrib/index.txt:86
# a88e7f3098804709aaefe9345fd5d22f
msgid "See the :doc:`flatpages documentation </ref/contrib/flatpages>`."
msgstr ""

#: ../../ref/contrib/index.txt:88
# c6840c21330f4af5b42680563565c751
msgid "Requires the sites_ contrib package to be installed as well."
msgstr ""

#: ../../ref/contrib/index.txt:91
# 570890bbdbbb49569715ce1b37a774b3
msgid "formtools"
msgstr ""

#: ../../ref/contrib/index.txt:93
# 29e38f2103e94bea8a6de9404dfd01d8
msgid "A set of high-level abstractions for Django forms (django.forms)."
msgstr ""

#: ../../ref/contrib/index.txt:96
# 10213ac39ea04003816428b640d80dab
msgid "django.contrib.formtools.preview"
msgstr ""

#: ../../ref/contrib/index.txt:98
# 9456b26f02884159a3c9c0abf9ee9ce0
msgid "An abstraction of the following workflow:"
msgstr ""

#: ../../ref/contrib/index.txt:102
# 109cdeea8ff646218ae3037d9f4ccd15
msgid "See the :doc:`form preview documentation </ref/contrib/formtools/form-preview>`."
msgstr ""

#: ../../ref/contrib/index.txt:105
# c068a46f504341d68c09eac573804b20
msgid "django.contrib.formtools.wizard"
msgstr ""

#: ../../ref/contrib/index.txt:107
# e2eaaf3c5b034ec68bed559196e1c1ea
msgid "Splits forms across multiple Web pages."
msgstr ""

#: ../../ref/contrib/index.txt:109
# 057948bf866c4b669d79201298494403
msgid "See the :doc:`form wizard documentation </ref/contrib/formtools/form-wizard>`."
msgstr ""

#: ../../ref/contrib/index.txt:112
# 05897a064a264be0b7b4f5b966c5af31
msgid "gis"
msgstr ""

#: ../../ref/contrib/index.txt:114
# c04af7fbe29c4d4c9c63443fc11a9586
msgid "A world-class geospatial framework built on top of Django, that enables storage, manipulation and display of spatial data."
msgstr ""

#: ../../ref/contrib/index.txt:117
# a2d82d5165a94689a4fb249e1fe762cf
msgid "See the :doc:`/ref/contrib/gis/index` documentation for more."
msgstr ""

#: ../../ref/contrib/index.txt:120
# fe0cb65b24ad493397c8f49676e8ca38
msgid "humanize"
msgstr ""

#: ../../ref/contrib/index.txt:124
# eb5e2fd9e1ce4092937b5e4351da72d2
msgid "See the :doc:`humanize documentation </ref/contrib/humanize>`."
msgstr ""

#: ../../ref/contrib/index.txt:127
# 243801dc918f42ab820da5cb6ff7b973
msgid "localflavor"
msgstr ""

#: ../../ref/contrib/index.txt:129
# 506d064fd813478e8e2b957e0404ef6f
msgid "A collection of various Django snippets that are useful only for a particular country or culture. For example, ``django.contrib.localflavor.us.forms`` contains a ``USZipCodeField`` that you can use to validate U.S. zip codes."
msgstr ""

#: ../../ref/contrib/index.txt:133
# 722387ce9e7a4490af13d79eb1d6267b
msgid "See the :doc:`localflavor documentation </ref/contrib/localflavor>`."
msgstr ""

#: ../../ref/contrib/index.txt:136
# e09939d892044740b188b7ad494a3c60
msgid "markup"
msgstr ""

#: ../../ref/contrib/index.txt:138
# 8257ea834b3547fdb3ddef4d44f39206
msgid "A collection of template filters that implement common markup languages"
msgstr ""

#: ../../ref/contrib/index.txt:140
#: ../../ref/templates/builtins.txt:2340
# fa6bb13f83c44342b40b227cddc6646f
# b697cba760434b3597b346a7c452a4da
msgid "See the :doc:`markup documentation </ref/contrib/markup>`."
msgstr ""

#: ../../ref/contrib/index.txt:143
# 3df06b11d6294b8496ce4838608fa469
msgid "messages"
msgstr ""

#: ../../ref/contrib/index.txt:145
# 4d59858abdd74852b25862399aba3105
msgid "A framework for storing and retrieving temporary cookie- or session-based messages"
msgstr ""

#: ../../ref/contrib/index.txt:148
# fabea1f48cd64132bf93f5d6b790f1dd
msgid "See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/contrib/index.txt:151
# d162f4bab3174069af0fe0c19b695610
msgid "redirects"
msgstr ""

#: ../../ref/contrib/index.txt:153
# 897dc6cc98344be4bcead3ae27e17414
msgid "A framework for managing redirects."
msgstr ""

#: ../../ref/contrib/index.txt:155
# d6f3531c5a0e4c1396c8aaa5effbe990
msgid "See the :doc:`redirects documentation </ref/contrib/redirects>`."
msgstr ""

#: ../../ref/contrib/index.txt:158
# bfedb82764164c81b5429bd65010af04
msgid "sessions"
msgstr ""

#: ../../ref/contrib/index.txt:160
# bd3b9bb6fa4840439e8f7e6c1eb44709
msgid "A framework for storing data in anonymous sessions."
msgstr ""

#: ../../ref/contrib/index.txt:162
# 8d54790b227a4f729d3409c48829641c
msgid "See the :doc:`sessions documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/contrib/index.txt:165
# 03f6d10827484e5d9213a4981275c379
msgid "sites"
msgstr ""

#: ../../ref/contrib/index.txt:167
# 2d34c065f7824c25a0c74507196b93fc
msgid "A light framework that lets you operate multiple Web sites off of the same database and Django installation. It gives you hooks for associating objects to one or more sites."
msgstr ""

#: ../../ref/contrib/index.txt:171
# 8129ebc45e7d4fe581110d2e738ae2ae
msgid "See the :doc:`sites documentation </ref/contrib/sites>`."
msgstr ""

#: ../../ref/contrib/index.txt:174
# 8c0611dcb2584babae5ca936e4189a95
msgid "sitemaps"
msgstr ""

#: ../../ref/contrib/index.txt:176
# 5686bc5cea814766a48a95d786c30edb
msgid "A framework for generating Google sitemap XML files."
msgstr ""

#: ../../ref/contrib/index.txt:178
# 77080d9a98784f74a2108ee657e98fcb
msgid "See the :doc:`sitemaps documentation </ref/contrib/sitemaps>`."
msgstr ""

#: ../../ref/contrib/index.txt:181
# 165cdc2237b94227ac23e094896b746e
msgid "syndication"
msgstr ""

#: ../../ref/contrib/index.txt:183
# 781c1dc642ee46ca89627d28528b85f1
msgid "A framework for generating syndication feeds, in RSS and Atom, quite easily."
msgstr ""

#: ../../ref/contrib/index.txt:185
# d6ead038d7ad4155bb5c342efd887efd
msgid "See the :doc:`syndication documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../ref/contrib/index.txt:188
# d6094be833e542dfacd799304c36a271
msgid "webdesign"
msgstr ""

#: ../../ref/contrib/index.txt:190
# 35adf6304da94aa28121ac86954d8eaa
msgid "Helpers and utilities targeted primarily at Web *designers* rather than Web *developers*."
msgstr ""

#: ../../ref/contrib/index.txt:193
# 09e92de9c6534ce49741ac75ac51a853
msgid "See the :doc:`Web design helpers documentation </ref/contrib/webdesign>`."
msgstr ""

#: ../../ref/contrib/index.txt:196
# b14cc3f302034908ac350fef8ff6476c
msgid "Other add-ons"
msgstr ""

#: ../../ref/contrib/index.txt:198
# dde39ed7f2a246c48e934a7f64e98acf
msgid "If you have an idea for functionality to include in ``contrib``, let us know! Code it up, and post it to the `django-users mailing list`_."
msgstr ""

#: ../../ref/contrib/localflavor.txt:3
# c8df6b3ea96240618c88ff2156564e1a
msgid "The \"local flavor\" add-ons"
msgstr ""

#: ../../ref/contrib/localflavor.txt:9
# 3c8420988a27424dbc4c4ecc9aee6655
msgid "Historically, Django has shipped with ``django.contrib.localflavor`` -- assorted pieces of code that are useful for particular countries or cultures. Starting with Django 1.5, we've started the process of moving the code to outside packages (i.e., packages distributed separately from Django), for easier maintenance and to trim the size of Django's codebase."
msgstr ""

#: ../../ref/contrib/localflavor.txt:15
# c58f66acd01044658ed51cf5a54c8beb
msgid "The localflavor packages are named ``django-localflavor-*``, where the asterisk is an `ISO 3166 country code`_. For example: ``django-localflavor-us`` is the localflavor package for the U.S.A."
msgstr ""

#: ../../ref/contrib/localflavor.txt:19
# 70d8da3358f240f7bf1b5197e4c68316
msgid "Most of these ``localflavor`` add-ons are country-specific fields for the :doc:`forms </topics/forms/index>` framework -- for example, a ``USStateField`` that knows how to validate U.S. state abbreviations and a ``FISocialSecurityNumber`` that knows how to validate Finnish social security numbers."
msgstr ""

#: ../../ref/contrib/localflavor.txt:25
# bc9b0720f5b14782b1cd1fb0313defb9
msgid "To use one of these localized components, just import the relevant subpackage. For example, here's how you can create a form with a field representing a French telephone number::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:35
# baba3911abd84e338080016132cc9cb2
msgid "For documentation on a given country's localflavor helpers, see its README file."
msgstr ""

#: ../../ref/contrib/localflavor.txt:41
# 68e3c547e1a7446e9c1921d671ab7a46
msgid "How to migrate"
msgstr ""

#: ../../ref/contrib/localflavor.txt:43
# 80c2059ee6ea4aa29ce18593d8ede866
msgid "If you've used the old ``django.contrib.localflavor`` package, follow these two easy steps to update your code:"
msgstr ""

#: ../../ref/contrib/localflavor.txt:46
# 123ae16762474fc68ee839918e585fc0
msgid "Install the appropriate third-party ``django-localflavor-*`` package(s). Go to https://github.com/django/ and find the package for your country."
msgstr ""

#: ../../ref/contrib/localflavor.txt:49
# 13cf288611a84c1c9018fa5541d8585e
msgid "Change your app's import statements to reference the new packages."
msgstr ""

#: ../../ref/contrib/localflavor.txt:51
# 53aa976cdd7d4583ac41ce973e9eee97
msgid "For example, change this::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:55
# 21c6d332621b426697760ad7854aebf4
msgid "...to this::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:59
# 109c7fff89e140aeb47a0b4b6513c678
msgid "The code in the new packages is the same (it was copied directly from Django), so you don't have to worry about backwards compatibility in terms of functionality. Only the imports have changed."
msgstr ""

#: ../../ref/contrib/localflavor.txt:64
# 12d6dc77dcdf43be80edfd04e0e869ed
msgid "Deprecation policy"
msgstr ""

#: ../../ref/contrib/localflavor.txt:66
# c2cec91108f34e958ca383de3db48c2d
msgid "In Django 1.5, importing from ``django.contrib.localflavor`` will result in a ``DeprecationWarning``. This means your code will still work, but you should change it as soon as possible."
msgstr ""

#: ../../ref/contrib/localflavor.txt:70
# ecee19c40ff44debb5db5fdddc7a8bb5
msgid "In Django 1.6, importing from ``django.contrib.localflavor`` will no longer work."
msgstr ""

#: ../../ref/contrib/localflavor.txt:74
# 445a543077024ddd9b6299ae600977fd
msgid "Supported countries"
msgstr ""

#: ../../ref/contrib/localflavor.txt:76
# 78a8685a534444a09be496584d5ad235
msgid "The following countries have django-localflavor- packages."
msgstr ""

#: ../../ref/contrib/localflavor.txt:78
# 899e7d4696c4447097b6c7e192982f10
msgid "Argentina: https://github.com/django/django-localflavor-ar"
msgstr ""

#: ../../ref/contrib/localflavor.txt:79
# 441a7a59528844c981469d99ce8a8d0d
msgid "Australia: https://github.com/django/django-localflavor-au"
msgstr ""

#: ../../ref/contrib/localflavor.txt:80
# 4c3d7653d16e41ad8398893f6135cbe7
msgid "Austria: https://github.com/django/django-localflavor-at"
msgstr ""

#: ../../ref/contrib/localflavor.txt:81
# f1de9fe27e9f4abca859fd45ebcab0a9
msgid "Belgium: https://github.com/django/django-localflavor-be"
msgstr ""

#: ../../ref/contrib/localflavor.txt:82
# f11b1f1589fd458fb9fdf8c887e00bbd
msgid "Brazil: https://github.com/django/django-localflavor-br"
msgstr ""

#: ../../ref/contrib/localflavor.txt:83
# e16eac1fbea7434a9166d51f7caf15c9
msgid "Canada: https://github.com/django/django-localflavor-ca"
msgstr ""

#: ../../ref/contrib/localflavor.txt:84
# 78110ab17e434788ab5cfb45254ae581
msgid "Chile: https://github.com/django/django-localflavor-cl"
msgstr ""

#: ../../ref/contrib/localflavor.txt:85
# c1b3d6e51f834b788fd73693d3b4baf1
msgid "China: https://github.com/django/django-localflavor-cn"
msgstr ""

#: ../../ref/contrib/localflavor.txt:86
# 6b3f1caec89646499b475e23f50c745c
msgid "Colombia: https://github.com/django/django-localflavor-co"
msgstr ""

#: ../../ref/contrib/localflavor.txt:87
# faef892964f84bd7a5bdca6f4638076d
msgid "Croatia: https://github.com/django/django-localflavor-cr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:88
# a607a7a286ad45fdbdd973f0cebcf84b
msgid "Czech Republic: https://github.com/django/django-localflavor-cz"
msgstr ""

#: ../../ref/contrib/localflavor.txt:89
# b4152063d46e4a5db04d7f560269d5cd
msgid "Ecuador: https://github.com/django/django-localflavor-ec"
msgstr ""

#: ../../ref/contrib/localflavor.txt:90
# de65fe9a22054db1aa5b8e541037ba63
msgid "Finland: https://github.com/django/django-localflavor-fi"
msgstr ""

#: ../../ref/contrib/localflavor.txt:91
# d3f9fee8a7514ae495c7d8fe9160f411
msgid "France: https://github.com/django/django-localflavor-fr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:92
# 856f5334ad054b27aece4696fb333936
msgid "Germany: https://github.com/django/django-localflavor-de"
msgstr ""

#: ../../ref/contrib/localflavor.txt:93
# 4147241002d948fcbf6dbd7a2a748b0a
msgid "Hong Kong: https://github.com/django/django-localflavor-hk"
msgstr ""

#: ../../ref/contrib/localflavor.txt:94
# cf515c1d55c54f13a9ed2466975ef9ed
msgid "Iceland: https://github.com/django/django-localflavor-is"
msgstr ""

#: ../../ref/contrib/localflavor.txt:95
# fd54315d187140ceac171aad48eb1d0e
msgid "India: https://github.com/django/django-localflavor-in"
msgstr ""

#: ../../ref/contrib/localflavor.txt:96
# a836d04fb771449893d5914ecc9637d9
msgid "Indonesia: https://github.com/django/django-localflavor-id"
msgstr ""

#: ../../ref/contrib/localflavor.txt:97
# c86f0f22a1f44580b88990e300e5ff9a
msgid "Ireland: https://github.com/django/django-localflavor-ie"
msgstr ""

#: ../../ref/contrib/localflavor.txt:98
# c100f5c6ce57426a8735f075a8f3de9e
msgid "Israel: https://github.com/django/django-localflavor-il"
msgstr ""

#: ../../ref/contrib/localflavor.txt:99
# 2add54ecf8e145c385cd605de82dd050
msgid "Italy: https://github.com/django/django-localflavor-it"
msgstr ""

#: ../../ref/contrib/localflavor.txt:100
# 819e50324aec47228f0d752548d08b57
msgid "Japan: https://github.com/django/django-localflavor-jp"
msgstr ""

#: ../../ref/contrib/localflavor.txt:101
# 14cfde168198414d85de49fd06b3da17
msgid "Kuwait: https://github.com/django/django-localflavor-kw"
msgstr ""

#: ../../ref/contrib/localflavor.txt:102
# a488cae03211438a9aa295dea3a70d21
msgid "Lithuania: https://github.com/simukis/django-localflavor-lt"
msgstr ""

#: ../../ref/contrib/localflavor.txt:103
# cfb9c0cb5bb4472591b23bc629c8debb
msgid "Macedonia: https://github.com/django/django-localflavor-mk"
msgstr ""

#: ../../ref/contrib/localflavor.txt:104
# 9a678a9d5d36496a80a9d366f8b7e01b
msgid "Mexico: https://github.com/django/django-localflavor-mx"
msgstr ""

#: ../../ref/contrib/localflavor.txt:105
# 875567b0d1ea4692b5a9ee1e62294033
msgid "The Netherlands: https://github.com/django/django-localflavor-nl"
msgstr ""

#: ../../ref/contrib/localflavor.txt:106
# 0a2e48ae98534eceab3e79a06458b339
msgid "Norway: https://github.com/django/django-localflavor-no"
msgstr ""

#: ../../ref/contrib/localflavor.txt:107
# c85ab2de31e943b892f09600abbc31ee
msgid "Peru: https://github.com/django/django-localflavor-pe"
msgstr ""

#: ../../ref/contrib/localflavor.txt:108
# ae79c10686a54937860537fadf4b5d8d
msgid "Poland: https://github.com/django/django-localflavor-pl"
msgstr ""

#: ../../ref/contrib/localflavor.txt:109
# 6ed6408204e74b23ad7c1b14ca4f13e5
msgid "Portugal: https://github.com/django/django-localflavor-pt"
msgstr ""

#: ../../ref/contrib/localflavor.txt:110
# f5469f9c120c46908658fff963469651
msgid "Paraguay: https://github.com/django/django-localflavor-py"
msgstr ""

#: ../../ref/contrib/localflavor.txt:111
# 5eb40b5ff3c24ffc9a1f5c85a761af23
msgid "Romania: https://github.com/django/django-localflavor-ro"
msgstr ""

#: ../../ref/contrib/localflavor.txt:112
# 1e3488bb425b4ce0b15dc86d55f34bcb
msgid "Russia: https://github.com/django/django-localflavor-ru"
msgstr ""

#: ../../ref/contrib/localflavor.txt:113
# dbd6abdad48945b28981e12215663f05
msgid "Slovakia: https://github.com/django/django-localflavor-sk"
msgstr ""

#: ../../ref/contrib/localflavor.txt:114
# dbab1779ea4f46e6bae650c5496937d3
msgid "Slovenia: https://github.com/django/django-localflavor-si"
msgstr ""

#: ../../ref/contrib/localflavor.txt:115
# 67c5a8bb9f1e423fbce9880762641cd9
msgid "South Africa: https://github.com/django/django-localflavor-za"
msgstr ""

#: ../../ref/contrib/localflavor.txt:116
# ae1322695b494a6398b7d53602f374b1
msgid "Spain: https://github.com/django/django-localflavor-es"
msgstr ""

#: ../../ref/contrib/localflavor.txt:117
# 49ef606990a04e45909483eff81870bf
msgid "Sweden: https://github.com/django/django-localflavor-se"
msgstr ""

#: ../../ref/contrib/localflavor.txt:118
# add23adf72324494bb8372d8e5d8d1e6
msgid "Switzerland: https://github.com/django/django-localflavor-ch"
msgstr ""

#: ../../ref/contrib/localflavor.txt:119
# 2353eeae69f44b8c8281bfa711b21f75
msgid "Turkey: https://github.com/django/django-localflavor-tr"
msgstr ""

#: ../../ref/contrib/localflavor.txt:120
# 04e02695803b469b86f2545b4854f6db
msgid "United Kingdom: https://github.com/django/django-localflavor-gb"
msgstr ""

#: ../../ref/contrib/localflavor.txt:121
# f81a04b7e1954277bb808df040e35027
msgid "United States of America: https://github.com/django/django-localflavor-us"
msgstr ""

#: ../../ref/contrib/localflavor.txt:122
# 3c8229e3360b4b0888e8ff9233cb170a
msgid "Uruguay: https://github.com/django/django-localflavor-uy"
msgstr ""

#: ../../ref/contrib/localflavor.txt:125
# 5a38977de21742aab4ea3235be02e97e
msgid "django.contrib.localflavor.generic"
msgstr ""

#: ../../ref/contrib/localflavor.txt:127
# 8b87831717ef4deca4ed8dfbefd349b3
msgid "The ``django.contrib.localflavor.generic`` package, which hasn't been removed from Django yet, contains useful code that is not specific to one particular country or culture. Currently, it defines date, datetime and split datetime input fields based on those from :doc:`forms </topics/forms/index>`, but with non-US default formats. Here's an example of how to use them::"
msgstr ""

#: ../../ref/contrib/localflavor.txt:140
# 3aa912d4fe354d71a834cbe09db31735
msgid "Internationalization of localflavor"
msgstr ""

#: ../../ref/contrib/localflavor.txt:142
# d8b2e7996cb74b69a1643c6f116c6668
msgid "Localflavor has its own catalog of translations, in the directory ``django/contrib/localflavor/locale``, and it's not loaded automatically like Django's general catalog in ``django/conf/locale``. If you want localflavor's texts to be translated, like form fields error messages, you must include :mod:`django.contrib.localflavor` in the :setting:`INSTALLED_APPS` setting, so the internationalization system can find the catalog, as explained in :ref:`how-django-discovers-translations`."
msgstr ""

#: ../../ref/contrib/markup.txt:3
#: ../../ref/templates/builtins.txt:2332
# 78fd14b969004461b6f75a91e88acc19
# a3cac5b61d904339945365f92823d3e2
msgid "django.contrib.markup"
msgstr ""

#: ../../ref/contrib/markup.txt:11
# 05e50a87424d48579486373eb24db4a8
msgid "Django provides template filters that implement the following markup languages:"
msgstr ""

#: ../../ref/contrib/markup.txt:14
# b1754c2c7e9b40de9e44187c0fc39718
msgid "``textile`` -- implements `Textile`_ -- requires `PyTextile`_"
msgstr ""

#: ../../ref/contrib/markup.txt:15
# e0d38308cc9f46949d9484471f985722
msgid "``markdown`` -- implements `Markdown`_ -- requires `Python-markdown`_ (>=2.1)"
msgstr ""

#: ../../ref/contrib/markup.txt:16
# cdbf7874b0784acaafda7c5fd7332f86
msgid "``restructuredtext`` -- implements `reST (reStructured Text)`_ -- requires `doc-utils`_"
msgstr ""

#: ../../ref/contrib/markup.txt:19
# 167e1e2b9f914fdaadf3550205a7c9ec
msgid "In each case, the filter expects formatted markup as a string and returns a string representing the marked-up text. For example, the ``textile`` filter converts text that is marked-up in Textile format to HTML."
msgstr ""

#: ../../ref/contrib/markup.txt:24
# da00f2fd661d411a9d731c5fbde9cf20
msgid "To activate these filters, add ``'django.contrib.markup'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load markup %}`` in a template, and you'll have access to these filters. For more documentation, read the source code in :file:`django/contrib/markup/templatetags/markup.py`."
msgstr ""

#: ../../ref/contrib/markup.txt:32
# c2426ac7617e413ca9b97fcfeda639be
msgid "The output of markup filters is marked \"safe\" and will not be escaped when rendered in a template. Always be careful to sanitize your inputs and make sure you are not leaving yourself vulnerable to cross-site scripting or other types of attacks."
msgstr ""

#: ../../ref/contrib/markup.txt:45
# 8ce65d6338c742c0aaeda43649287642
msgid "reStructured Text"
msgstr ""

#: ../../ref/contrib/markup.txt:47
# 90c6a2833fd1464f9fc8ef8c9d1701cd
msgid "When using the ``restructuredtext`` markup filter you can define a :setting:`RESTRUCTUREDTEXT_FILTER_SETTINGS` in your django settings to override the default writer settings. See the `restructuredtext writer settings`_ for details on what these settings are."
msgstr ""

#: ../../ref/contrib/markup.txt:54
# 97566b79b51d4d32854187310b3fb86d
msgid "reStructured Text has features that allow raw HTML to be included, and that allow arbitrary files to be included. These can lead to XSS vulnerabilities and leaking of private information. It is your responsibility to check the features of this library and configure appropriately to avoid this. See the `Deploying Docutils Securely <http://docutils.sourceforge.net/docs/howto/security.html>`_ documentation."
msgstr ""

#: ../../ref/contrib/markup.txt:64
#: ../../ref/templates/builtins.txt:2337
# 869f69552a394d93864e7c16e766a7e9
# 760d3c7b62cc40ed9b2d1d44421afcb4
msgid "Markdown"
msgstr ""

#: ../../ref/contrib/markup.txt:66
# 0e43602f47044e0185fc1cb3df67fbce
msgid "The Python Markdown library supports options named \"safe_mode\" and \"enable_attributes\". Both relate to the security of the output. To enable both options in tandem, the markdown filter supports the \"safe\" argument::"
msgstr ""

#: ../../ref/contrib/markup.txt:74
# 191ec7c205354e67ab00f4e4e21e0f48
msgid "Versions of the Python-Markdown library prior to 2.1 do not support the optional disabling of attributes. This is a security flaw. Therefore, ``django.contrib.markup`` has dropped support for versions of Python-Markdown < 2.1 in Django 1.5."
msgstr ""

#: ../../ref/contrib/messages.txt:3
# d638959e8c7a450380c61fcbe55f4655
msgid "The messages framework"
msgstr ""

#: ../../ref/contrib/messages.txt:8
# e602eae87f55475083a7a998eae9bd01
msgid "Quite commonly in web applications, you need to display a one-time notification message (also known as \"flash message\") to the user after processing a form or some other types of user input."
msgstr ""

#: ../../ref/contrib/messages.txt:12
# 5d0be20ccef4451e90c98c5cc5de5fa3
msgid "For this, Django provides full support for cookie- and session-based messaging, for both anonymous and authenticated users. The messages framework allows you to temporarily store messages in one request and retrieve them for display in a subsequent request (usually the next one). Every message is tagged with a specific ``level`` that determines its priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""

#: ../../ref/contrib/messages.txt:20
# bddfe04fd3c44a57a3cf4bdb600c070b
msgid "Enabling messages"
msgstr ""

#: ../../ref/contrib/messages.txt:22
# e033b8e60a2e4152b1a7c3b14aa21cfb
msgid "Messages are implemented through a :doc:`middleware </ref/middleware>` class and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""

#: ../../ref/contrib/messages.txt:25
# 008d73cd01ac426296bc1d1a8fa27526
msgid "The default ``settings.py`` created by ``django-admin.py startproject`` already contains all the settings required to enable message functionality:"
msgstr ""

#: ../../ref/contrib/messages.txt:28
# 0d1a94f6b19c4756bf910f68d0a7ea8e
msgid "``'django.contrib.messages'`` is in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/messages.txt:30
# 89b8cf0c4a3b4a4ab396672d5021ecea
msgid ":setting:`MIDDLEWARE_CLASSES` contains ``'django.contrib.sessions.middleware.SessionMiddleware'`` and ``'django.contrib.messages.middleware.MessageMiddleware'``."
msgstr ""

#: ../../ref/contrib/messages.txt:34
# 13fcde1a58154a6e9da5e9300b85272a
msgid "The default :ref:`storage backend <message-storage-backends>` relies on :doc:`sessions </topics/http/sessions>`. That's why ``SessionMiddleware`` must be enabled and appear before ``MessageMiddleware`` in :setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../ref/contrib/messages.txt:39
# 9eebca1dfe324c2b83b6d481097c3366
msgid ":setting:`TEMPLATE_CONTEXT_PROCESSORS`   contains ``'django.contrib.messages.context_processors.messages'``."
msgstr ""

#: ../../ref/contrib/messages.txt:42
# 1e160ba9de4642e8b31c5b3ca78ac707
msgid "If you don't want to use messages, you can remove ``'django.contrib.messages'`` from your :setting:`INSTALLED_APPS`, the ``MessageMiddleware`` line from :setting:`MIDDLEWARE_CLASSES`, and the ``messages`` context processor from :setting:`TEMPLATE_CONTEXT_PROCESSORS`."
msgstr ""

#: ../../ref/contrib/messages.txt:48
# 6f21a0c6feea49758bd8a0d7aa45e0f6
msgid "Configuring the message engine"
msgstr ""

#: ../../ref/contrib/messages.txt:53
# 52bc9d8c739b4e7397ee9bc4b24c90a0
msgid "Storage backends"
msgstr ""

#: ../../ref/contrib/messages.txt:55
# 3d4ee15d255f475c9cc463d16d0b2916
msgid "The messages framework can use different backends to store temporary messages."
msgstr ""

#: ../../ref/contrib/messages.txt:57
# d15a614de52844449672d1905c096698
msgid "Django provides three built-in storage classes:"
msgstr ""

#: ../../ref/contrib/messages.txt:61
# 2d9f6f82b7d04afd9d6d5bcc131cdbbd
msgid "This class stores all messages inside of the request's session. Therefore it requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:66
# 547e91f2ee584fb6868b22b69ba6a122
msgid "This class stores the message data in a cookie (signed with a secret hash to prevent manipulation) to persist notifications across requests. Old messages are dropped if the cookie data size would exceed 2048 bytes."
msgstr ""

#: ../../ref/contrib/messages.txt:72
# 7066223e6dd341498f5413e469409e52
msgid "This class first uses ``CookieStorage``, and falls back to using ``SessionStorage`` for the messages that could not fit in a single cookie. It also requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:76
# 5d29c3cd7d1f4f9fb037317399ead57e
msgid "This behavior avoids writing to the session whenever possible. It should provide the best performance in the general case."
msgstr ""

#: ../../ref/contrib/messages.txt:79
# dde4aa5013dc40a1bba21c2eeb77dd84
msgid ":class:`~django.contrib.messages.storage.fallback.FallbackStorage` is the default storage class. If it isn't suitable to your needs, you can select another storage class by setting `MESSAGE_STORAGE`_ to its full import path, for example::"
msgstr ""

#: ../../ref/contrib/messages.txt:86
# d1060e634e0342c6a507ea521a5a5968
msgid "To write your own storage class, subclass the ``BaseStorage`` class in ``django.contrib.messages.storage.base`` and implement the ``_get`` and ``_store`` methods."
msgstr ""

#: ../../ref/contrib/messages.txt:91
# 6627a0fe858d48cbb1dafbeb99502b96
msgid "Message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:93
# 0b02ec070a1342998a37729c2c799fe4
msgid "The messages framework is based on a configurable level architecture similar to that of the Python logging module. Message levels allow you to group messages by type so they can be filtered or displayed differently in views and templates."
msgstr ""

#: ../../ref/contrib/messages.txt:98
# 6c7786192a214c0d8419a747f7c27ead
msgid "The built-in levels, which can be imported from ``django.contrib.messages`` directly, are:"
msgstr ""

#: ../../ref/contrib/messages.txt:102
# 92c66550e70e4136a7baf2bcd7b8325b
msgid "Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:102
# 3541aee522364d149b4a9e1c298376cc
msgid "Purpose"
msgstr ""

#: ../../ref/contrib/messages.txt:104
#: ../../ref/contrib/messages.txt:131
#: ../../ref/contrib/messages.txt:209
# e2b94e1f54ed49f7857fd2ab8014531c
# df1de33be4684ea49d7b6cffb1fa9a36
# ab8136c561bd4486ba7e5439748a4a2b
msgid "``DEBUG``"
msgstr ""

#: ../../ref/contrib/messages.txt:104
# a0b221dd3e5b447f92afefebca0faf64
msgid "Development-related messages that will be ignored (or removed) in a production deployment"
msgstr ""

#: ../../ref/contrib/messages.txt:105
#: ../../ref/contrib/messages.txt:132
#: ../../ref/contrib/messages.txt:210
# 1f8361dc1f1a4edd9817703aeee0020a
# fc0ad9ee1b4346b6b788818138f71ac8
# 9b8bc91c9d694d97a6b1795b256ee422
msgid "``INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:105
# e6d0c378e3634378a43d7b4cced80349
msgid "Informational messages for the user"
msgstr ""

#: ../../ref/contrib/messages.txt:106
#: ../../ref/contrib/messages.txt:133
#: ../../ref/contrib/messages.txt:211
# 72c2e3b3b8fb4318b76edf9d18ce7b59
# 80695f7e551747aa952b671d44e536da
# 4c87cf71216245fe9e89321c0d6f9d7b
msgid "``SUCCESS``"
msgstr ""

#: ../../ref/contrib/messages.txt:106
# 020fe721c4634c0ba4e0fac7124c769c
msgid "An action was successful, e.g. \"Your profile was updated successfully\""
msgstr ""

#: ../../ref/contrib/messages.txt:107
#: ../../ref/contrib/messages.txt:134
#: ../../ref/contrib/messages.txt:212
# fba9767ce7234dd99cff45de8b1e7cd9
# 64286e248d1442fba52828debe0ec245
# 445592f5f6f043259572780659cc8ef4
msgid "``WARNING``"
msgstr ""

#: ../../ref/contrib/messages.txt:107
# 73b6db8357f445eea9f5c7d17afd13f7
msgid "A failure did not occur but may be imminent"
msgstr ""

#: ../../ref/contrib/messages.txt:108
#: ../../ref/contrib/messages.txt:135
#: ../../ref/contrib/messages.txt:213
# ec295f592b854377acf1e5b0caaeefcc
# 5e654ca352804bad80ff15d7ac356f69
# fab29ee37e6f44339b5579c079c55a2f
msgid "``ERROR``"
msgstr ""

#: ../../ref/contrib/messages.txt:108
# 944d24af4f0d4c4e940f3be4c1d4275b
msgid "An action was **not** successful or some other failure occurred"
msgstr ""

#: ../../ref/contrib/messages.txt:111
# 92ee0ff524d048829ae2f44460cea18f
msgid "The `MESSAGE_LEVEL`_ setting can be used to change the minimum recorded level (or it can be `changed per request`_). Attempts to add messages of a level less than this will be ignored."
msgstr ""

#: ../../ref/contrib/messages.txt:118
# 82a93190630e4f07b31fbacc7c77e568
msgid "Message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:120
# 9dd95448e8534a5db360bdb5bd11b4c3
msgid "Message tags are a string representation of the message level plus any extra tags that were added directly in the view (see `Adding extra message tags`_ below for more details). Tags are stored in a string and are separated by spaces. Typically, message tags are used as CSS classes to customize message style based on message type. By default, each level has a single tag that's a lowercase version of its own constant:"
msgstr ""

#: ../../ref/contrib/messages.txt:129
#: ../../ref/contrib/messages.txt:207
# e6220040c1b3401192519a6da34fcc5a
# 7dc1b3a8d9314f2fbd040428872764ab
msgid "Level Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:129
# 2bc4776ba5424a179922e33c217a619a
msgid "Tag"
msgstr ""

#: ../../ref/contrib/messages.txt:131
# 2bbcb200a0024076ac2b40df72f18058
msgid "``debug``"
msgstr ""

#: ../../ref/contrib/messages.txt:132
# a2b0e07b55b94976b7875c7087f4cf53
msgid "``info``"
msgstr ""

#: ../../ref/contrib/messages.txt:133
# 5f14c4d2d5914713b4df9b93071a270d
msgid "``success``"
msgstr ""

#: ../../ref/contrib/messages.txt:134
# 90c574c63b1f4e37acda71d736fb0773
msgid "``warning``"
msgstr ""

#: ../../ref/contrib/messages.txt:135
# d310e8cac9db4e8e81d63457a190671d
msgid "``error``"
msgstr ""

#: ../../ref/contrib/messages.txt:138
# 522f80e1b0e3404389057fd5db979b52
msgid "To change the default tags for a message level (either built-in or custom), set the `MESSAGE_TAGS`_ setting to a dictionary containing the levels you wish to change. As this extends the default tags, you only need to provide tags for the levels you wish to override::"
msgstr ""

#: ../../ref/contrib/messages.txt:150
# e50a6066a343437fbacbba36ac1698ac
msgid "Using messages in views and templates"
msgstr ""

#: ../../ref/contrib/messages.txt:153
# 0bcfc2e61ec84ef580e647415985cc3c
msgid "Adding a message"
msgstr ""

#: ../../ref/contrib/messages.txt:155
# a6205fb32ea14f4887f37dcee48a2365
msgid "To add a message, call::"
msgstr ""

#: ../../ref/contrib/messages.txt:160
# 3c0aef201c2f41e592df6a7fb0c9345c
msgid "Some shortcut methods provide a standard way to add messages with commonly used tags (which are usually represented as HTML classes for the message)::"
msgstr ""

#: ../../ref/contrib/messages.txt:170
# b5972f2ca16f4b269c6e2a7295fbe006
msgid "Displaying messages"
msgstr ""

#: ../../ref/contrib/messages.txt:172
# 4eeeb1ee5ccd4918a9264b03349384f4
msgid "In your template, use something like::"
msgstr ""

#: ../../ref/contrib/messages.txt:182
# 41ab922fa8af45ac9042af6acda06f04
msgid "If you're using the context processor, your template should be rendered with a ``RequestContext``. Otherwise, ensure ``messages`` is available to the template context."
msgstr ""

#: ../../ref/contrib/messages.txt:186
# 7e2c3af2273e44d588ae143214356eb9
msgid "Even if you know there is only just one message, you should still iterate over the ``messages`` sequence, because otherwise the message storage will not be cleared for the next request."
msgstr ""

#: ../../ref/contrib/messages.txt:191
# ccb2ca5be6c641f281a2be81d95c4431
msgid "Creating custom message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:193
# dcfc63a756d447f38b1e8f2c50e650cd
msgid "Messages levels are nothing more than integers, so you can define your own level constants and use them to create more customized user feedback, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:201
# 30f7865eb04e4ffb93f5644a75429a7f
msgid "When creating custom message levels you should be careful to avoid overloading existing levels. The values for the built-in levels are:"
msgstr ""

#: ../../ref/contrib/messages.txt:207
#: ../../ref/signals.txt:72
#: ../../ref/signals.txt:298
#: ../../ref/signals.txt:324
#: ../../ref/templates/builtins.txt:2271
# 94a400b5bb7a4434b155b065cfc8ed80
# ff5afdd10c79428588261e2ee280d06e
# b88603431a3143e4987c8fe1aa9e0472
# 04c65a8b51db475090753e02c62bc558
# cecbfe1499874024bf982b987ac52986
msgid "Value"
msgstr ""

#: ../../ref/contrib/messages.txt:209
# 2ab4555da3714da09172c69a43f77fa1
msgid "10"
msgstr ""

#: ../../ref/contrib/messages.txt:210
# bde3a6fb4601480f93b8c0618566b18d
msgid "20"
msgstr ""

#: ../../ref/contrib/messages.txt:211
# 692d4b371879436f9bd5bc0d6dfd16e0
msgid "25"
msgstr ""

#: ../../ref/contrib/messages.txt:212
# 8938e65a9048400a99e7628eeb8105c8
msgid "30"
msgstr ""

#: ../../ref/contrib/messages.txt:213
# 71f823bc6d9747099f9a3bca9547702f
msgid "40"
msgstr ""

#: ../../ref/contrib/messages.txt:216
# 0563647784d74269b000f2457873afa5
msgid "If you need to identify the custom levels in your HTML or CSS, you need to provide a mapping via the `MESSAGE_TAGS`_ setting."
msgstr ""

#: ../../ref/contrib/messages.txt:220
# 51b9da18ab974255a4c43930d99450ff
msgid "If you are creating a reusable application, it is recommended to use only the built-in `message levels`_ and not rely on any custom levels."
msgstr ""

#: ../../ref/contrib/messages.txt:224
# 942ba16507124e4d9a4279e4a9b14461
msgid "Changing the minimum recorded level per-request"
msgstr ""

#: ../../ref/contrib/messages.txt:226
# 4a52b5dab907413b9360d000aa66a72e
msgid "The minimum recorded level can be set per request via the ``set_level`` method::"
msgstr ""

#: ../../ref/contrib/messages.txt:243
# 61d992306554482e9c9218d230936540
msgid "Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr ""

#: ../../ref/contrib/messages.txt:248
# 9c5472615e9a4f668bf690c96eb13d1c
msgid "For more information on how the minimum recorded level functions, see `Message levels`_ above."
msgstr ""

#: ../../ref/contrib/messages.txt:252
# 5d9ed9849b5c4f43860c3d2f28d31654
msgid "Adding extra message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:254
# e32b3c7acc864f3380d0cc9c93c672f2
msgid "For more direct control over message tags, you can optionally provide a string containing extra tags to any of the add methods::"
msgstr ""

#: ../../ref/contrib/messages.txt:261
# a6a4c0993a2b47309a3248b9d34f1758
msgid "Extra tags are added before the default tag for that level and are space separated."
msgstr ""

#: ../../ref/contrib/messages.txt:265
# 163abc81be1647029a92bca430435b89
msgid "Failing silently when the message framework is disabled"
msgstr ""

#: ../../ref/contrib/messages.txt:267
# bce580c9f78f47b5a9f8bbf32ce83b27
msgid "If you're writing a reusable app (or other piece of code) and want to include messaging functionality, but don't want to require your users to enable it if they don't want to, you may pass an additional keyword argument ``fail_silently=True`` to any of the ``add_message`` family of methods. For example::"
msgstr ""

#: ../../ref/contrib/messages.txt:278
# d0cb38fa49e34ae69585fb3179a970be
msgid "Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would otherwise occur when the messages framework disabled and one attempts to use one of the ``add_message`` family of methods. It does not hide failures that may occur for other reasons."
msgstr ""

#: ../../ref/contrib/messages.txt:284
# 938ffc58902b4944b360245560c2e36d
msgid "Expiration of messages"
msgstr ""

#: ../../ref/contrib/messages.txt:286
# 5bd8e4708aaf4926a262e91a7d64dc40
msgid "The messages are marked to be cleared when the storage instance is iterated (and cleared when the response is processed)."
msgstr ""

#: ../../ref/contrib/messages.txt:289
# 2d49615943534ffb80a58938db0e4cc8
msgid "To avoid the messages being cleared, you can set the messages storage to ``False`` after iterating::"
msgstr ""

#: ../../ref/contrib/messages.txt:298
# 21f22379668f40c48dfc088795f67f4b
msgid "Behavior of parallel requests"
msgstr ""

#: ../../ref/contrib/messages.txt:300
# 9f68e2b2f42d481c80dca953c42753fc
msgid "Due to the way cookies (and hence sessions) work, **the behavior of any backends that make use of cookies or sessions is undefined when the same client makes multiple requests that set or get messages in parallel**. For example, if a client initiates a request that creates a message in one window (or tab) and then another that fetches any uniterated messages in another window, before the first window redirects, the message may appear in the second window instead of the first window where it may be expected."
msgstr ""

#: ../../ref/contrib/messages.txt:308
# b5a3fb52b4f6441bae7bff000f5500f4
msgid "In short, when multiple simultaneous requests from the same client are involved, messages are not guaranteed to be delivered to the same window that created them nor, in some cases, at all. Note that this is typically not a problem in most applications and will become a non-issue in HTML5, where each window/tab will have its own browsing context."
msgstr ""

#: ../../ref/contrib/messages.txt:317
# f95fd5c10c7546abb07b4fabae09f979
msgid "A few :doc:`Django settings </ref/settings>` give you control over message behavior:"
msgstr ""

#: ../../ref/contrib/messages.txt:321
#: ../../ref/settings.txt:1366
# f4b4c259b4c640a7b1a71e297ecd34fc
# 9dc1deb332934aa78fac2ddc89b385d9
msgid "MESSAGE_LEVEL"
msgstr ""

#: ../../ref/contrib/messages.txt:323
# ce4c94ef896547f1830e47ffbc9f3acd
msgid "Default: ``messages.INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:325
# f4a7cd5d8ba240049873396b7d11f56c
msgid "This sets the minimum message that will be saved in the message storage. See `Message levels`_ above for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:330
# 9e79ca87b6c048b09c733e598b108b7d
msgid "If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of the built-in constants, you must import the constants module directly to avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:337
#: ../../ref/contrib/messages.txt:379
# dfec8430de1d45789c688106ee76654b
# a62f9bf55323492eb4c374e092d1337c
msgid "If desired, you may specify the numeric values for the constants directly according to the values in the above :ref:`constants table <message-level-constants>`."
msgstr ""

#: ../../ref/contrib/messages.txt:342
#: ../../ref/settings.txt:1375
# f8131c4a6ee14863be2b5c0fab4c2ad6
# a03d82ad26ad4ae582a7155b79872951
msgid "MESSAGE_STORAGE"
msgstr ""

#: ../../ref/contrib/messages.txt:344
#: ../../ref/settings.txt:1377
# 7286b0306b594f18b7df4e7236bf8e2d
# 12d2b2ffd63c4e0ba623e99b69b7301d
msgid "Default: ``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:346
# e6e8f80857704f9b86818ded55e72d0a
msgid "Controls where Django stores message data. Valid values are:"
msgstr ""

#: ../../ref/contrib/messages.txt:348
# e9927febd48e43f494ebe8bad33e07f7
msgid "``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:349
# c071ef6962cd43308881bad1d8b546c4
msgid "``'django.contrib.messages.storage.session.SessionStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:350
# 249c35661e9345f5a4c74ea2641b9797
msgid "``'django.contrib.messages.storage.cookie.CookieStorage'``"
msgstr ""

#: ../../ref/contrib/messages.txt:352
# 6e99282fb1fb40b2a8c9f5595a58ef9c
msgid "See `Storage backends`_ for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:355
#: ../../ref/settings.txt:1383
# b9241add324b42a286ac095ea26a3220
# 140124be81834c15b35c2b5bd5b03bbf
msgid "MESSAGE_TAGS"
msgstr ""

#: ../../ref/contrib/messages.txt:357
#: ../../ref/contrib/staticfiles.txt:97
#: ../../ref/settings.txt:127
#: ../../ref/settings.txt:669
#: ../../ref/settings.txt:706
#: ../../ref/settings.txt:986
#: ../../ref/settings.txt:1385
#: ../../ref/settings.txt:1401
#: ../../ref/settings.txt:1881
#: ../../ref/settings.txt:1935
# 339f455194e14427a54c41de2f2bdf9d
# 9fa005e9a0df4b6a8ce962495299301f
# 8e2650c47ae44a10902b412be064d509
# a77ffc4db74646bb955125737eba681d
# 6f074efe2068457e9611488e7b29054c
# 9edf229f054140d4bdfdf839c9a9f1f0
# 8e0e457ef6474841a02ffa515b333e42
# 125670138b1f400cb7d679cad0bc33a0
# ce6ac65d80164183a89a80a2068cad06
# 0706a84fa5104d88889d746aba6b6d17
msgid "Default::"
msgstr ""

#: ../../ref/contrib/messages.txt:365
# 5836d2c86a054fff847bc0816dc8fafe
msgid "This sets the mapping of message level to message tag, which is typically rendered as a CSS class in HTML. If you specify a value, it will extend the default. This means you only have to specify those values which you need to override. See `Displaying messages`_ above for more details."
msgstr ""

#: ../../ref/contrib/messages.txt:372
# 184065e6c291433db4a8b8dcd553a5f4
msgid "If you override ``MESSAGE_TAGS`` in your settings file and rely on any of the built-in constants, you must import the ``constants`` module directly to avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:384
#: ../../ref/settings.txt:1644
# db1b9fbb3f8e4b57a77602f8330163dd
# 9698dc3a4a0e4b26a61240f37a343f97
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/contrib/messages.txt:388
# 82b68bac28c945d1801b05e37eb2debc
msgid "The storage backends that use cookies -- ``CookieStorage`` and ``FallbackStorage`` -- use the value of :setting:`SESSION_COOKIE_DOMAIN` in setting their cookies. See the :doc:`settings documentation </ref/settings>` for more information on how this works and why you might need to set it."
msgstr ""

#: ../../ref/contrib/redirects.txt:3
# 3afc8639a30c4a32b4519bb41a788116
msgid "The redirects app"
msgstr ""

#: ../../ref/contrib/redirects.txt:8
# 596e87bcb2ae4b08be968fd24fcba7c3
msgid "Django comes with an optional redirects application. It lets you store simple redirects in a database and handles the redirecting for you."
msgstr ""

#: ../../ref/contrib/redirects.txt:14
# e2e16d57d9b842b49bb71e5229031ddf
msgid "To install the redirects app, follow these steps:"
msgstr ""

#: ../../ref/contrib/redirects.txt:16
# 292f967cce984c8aa41a2a0cee2f9598
msgid "Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:18
# a6febdd30b2c4590b3e5a4987282207d
msgid "Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:25
# c1cbc7c5b07348418941ea0152c5fa4a
msgid "``manage.py syncdb`` creates a ``django_redirect`` table in your database. This is a simple lookup table with ``site_id``, ``old_path`` and ``new_path`` fields."
msgstr ""

#: ../../ref/contrib/redirects.txt:28
# 9807448044e74468af278312ad459f57
msgid "The ``RedirectFallbackMiddleware`` does all of the work. Each time any Django application raises a 404 error, this middleware checks the redirects database for the requested URL as a last resort. Specifically, it checks for a redirect with the given ``old_path`` with a site ID that corresponds to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:34
# a39c34ccf3134248a837400dd70862ef
msgid "If it finds a match, and ``new_path`` is not empty, it redirects to ``new_path``."
msgstr ""

#: ../../ref/contrib/redirects.txt:36
# 83b5e823bf7e4a61963f910fbb04fd4f
msgid "If it finds a match, and ``new_path`` is empty, it sends a 410 (\"Gone\") HTTP header and empty (content-less) response."
msgstr ""

#: ../../ref/contrib/redirects.txt:44
# 3b04baae95674eca996510c9712d5f9c
msgid "Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you can put ``RedirectFallbackMiddleware`` at the end of the list, because it's a last resort."
msgstr ""

#: ../../ref/contrib/redirects.txt:52
# 2bffcd9d1fe84f58a4caf769be1b245c
msgid "How to add, change and delete redirects"
msgstr ""

#: ../../ref/contrib/redirects.txt:57
# 24f4a5dacc60450cad63701e5edf00d9
msgid "If you've activated the automatic Django admin interface, you should see a \"Redirects\" section on the admin index page. Edit redirects as you edit any other object in the system."
msgstr ""

#: ../../ref/contrib/redirects.txt:66
# ae57ce82e8da447ab7a81b85a63aedb8
msgid "Redirects are represented by a standard :doc:`Django model </topics/db/models>`, which lives in `django/contrib/redirects/models.py`_. You can access redirect objects via the :doc:`Django database API </topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:3
# f62967ba0b3a48abaf5def83ae266b47
msgid "The sitemap framework"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:8
# 4c463cbdea2c49c781e2b5cbb12dd6b0
msgid "Django comes with a high-level sitemap-generating framework that makes creating sitemap_ XML files easy."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:16
# f29c34c55f0a4a0085072c09f7afd7c7
msgid "A sitemap is an XML file on your Web site that tells search-engine indexers how frequently your pages change and how \"important\" certain pages are in relation to other pages on your site. This information helps search engines index your site."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:21
# 9d77326ed7e64074a4c52fa11fa2d211
msgid "The Django sitemap framework automates the creation of this XML file by letting you express this information in Python code."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:24
# 5e72dbecad3742dfb301e8dccb71b2bf
msgid "It works much like Django's :doc:`syndication framework </ref/contrib/syndication>`. To create a sitemap, just write a :class:`~django.contrib.sitemaps.Sitemap` class and point to it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:32
# 99862ecda6e94c0e8e0f1a93e7feca54
msgid "To install the sitemap app, follow these steps:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:34
# ab5eb074f10045e4b47e719016bfd202
msgid "Add ``'django.contrib.sitemaps'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:37
# 722c527bc6ce40c09333db7d64304bd0
msgid "Make sure ``'django.template.loaders.app_directories.Loader'`` is in your :setting:`TEMPLATE_LOADERS` setting. It's in there by default, so you'll only need to change this if you've changed that setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:41
# 46a169252d8d431c827c04fc7b573a3f
msgid "Make sure you've installed the :mod:`sites framework <django.contrib.sites>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:44
# 7143789e78ec45409d763c563b0a21c3
msgid "(Note: The sitemap application doesn't install any database tables. The only reason it needs to go into :setting:`INSTALLED_APPS` is so that the :func:`~django.template.loaders.app_directories.Loader` template loader can find the default templates.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:50
# e89c84e252fa46fd9cdcefc52c0143af
msgid "Initialization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:52
# 4996138da71049d7bb34da522c272d60
msgid "To activate sitemap generation on your Django site, add this line to your :doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:57
# 5953374cf5ec47a68a50440dca894e81
msgid "This tells Django to build a sitemap when a client accesses :file:`/sitemap.xml`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:59
# 8599386c89f343458232b807c06f76a3
msgid "The name of the sitemap file is not important, but the location is. Search engines will only index links in your sitemap for the current URL level and below. For instance, if :file:`sitemap.xml` lives in your root directory, it may reference any URL in your site. However, if your sitemap lives at :file:`/content/sitemap.xml`, it may only reference URLs that begin with :file:`/content/`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:66
# d685d830f1d64eb1b216b441a407ff9f
msgid "The sitemap view takes an extra, required argument: ``{'sitemaps': sitemaps}``. ``sitemaps`` should be a dictionary that maps a short section label (e.g., ``blog`` or ``news``) to its :class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap`` or ``NewsSitemap``). It may also map to an *instance* of a :class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap(some_var)``)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:74
# 65be91bf5f06410ca6cd89b5156f03b9
msgid "Sitemap classes"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:76
# ff1888070227474183cf86bc4d400849
msgid "A :class:`~django.contrib.sitemaps.Sitemap` class is a simple Python class that represents a \"section\" of entries in your sitemap. For example, one :class:`~django.contrib.sitemaps.Sitemap` class could represent all the entries of your Weblog, while another could represent all of the events in your events calendar."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:82
# 6132829ef9de4334a0902fa8714ceb75
msgid "In the simplest case, all these sections get lumped together into one :file:`sitemap.xml`, but it's also possible to use the framework to generate a sitemap index that references individual sitemap files, one per section. (See `Creating a sitemap index`_ below.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:87
# 8d26ac40a56c4f41be779116d912b521
msgid ":class:`~django.contrib.sitemaps.Sitemap` classes must subclass ``django.contrib.sitemaps.Sitemap``. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:91
#: ../../ref/contrib/syndication.txt:50
# 664edc8ee9184b24874f1a63c23f7aeb
# e180f60a270849a7909334de3eb08099
msgid "A simple example"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:93
# 305743eb8cee49f7a03ba78864835733
msgid "Let's assume you have a blog system, with an ``Entry`` model, and you want your sitemap to include all the links to your individual blog entries. Here's how your sitemap class might look::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:110
#: ../../ref/contrib/syndication.txt:89
# 5a38ba269be84395af79e8a0c3aa8823
# 4681d95904584bff94f7ae520fd8ba5d
msgid "Note:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:112
# fe5d4d3384e34ccc8377400a8df88d5c
msgid ":attr:`~Sitemap.changefreq` and :attr:`~Sitemap.priority` are class attributes corresponding to ``<changefreq>`` and ``<priority>`` elements, respectively. They can be made callable as functions, as :attr:`~Sitemap.lastmod` was in the example."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:116
# ceb8bc1abfb5496aacebedb21b489a7a
msgid ":attr:`~Sitemap.items()` is simply a method that returns a list of objects. The objects returned will get passed to any callable methods corresponding to a sitemap property (:attr:`~Sitemap.location`, :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq`, and :attr:`~Sitemap.priority`)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:121
# 207ce09433b4407a8ee23963ef741eb9
msgid ":attr:`~Sitemap.lastmod` should return a Python ``datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:122
# 80570ed6a8f74d3c892b285a3d549148
msgid "There is no :attr:`~Sitemap.location` method in this example, but you can provide it in order to specify the URL for your object. By default, :attr:`~Sitemap.location()` calls ``get_absolute_url()`` on each object and returns the result."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:128
# 1971eb6db8f34c32825c4d96bff5b2b1
msgid "Sitemap class reference"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:132
# 47ef98cd6a63452d9a2da397282e0dfb
msgid "A ``Sitemap`` class can define the following methods/attributes:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:136
# ea0d86f11b1143aa90883dc70f9c5e16
msgid "**Required.** A method that returns a list of objects. The framework doesn't care what *type* of objects they are; all that matters is that these objects get passed to the :attr:`~Sitemap.location()`, :attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()` and :attr:`~Sitemap.priority()` methods."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:144
#: ../../ref/contrib/sitemaps.txt:169
#: ../../ref/contrib/sitemaps.txt:181
#: ../../ref/contrib/sitemaps.txt:201
# 815da12173d6450699aa527bc9fcfbca
# 9fc700d407fc41a88f6da18c3fda961d
# 5d01bd92a9ef480c9a73cffea7a3d710
# 8864dd66c9084a38944ec0b2af45f758
msgid "**Optional.** Either a method or attribute."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:146
# 153da09a5268455191de1a2b6dbba467
msgid "If it's a method, it should return the absolute path for a given object as returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:149
# bc694193dc534bdda9fda5cb4197485c
msgid "If it's an attribute, its value should be a string representing an absolute path to use for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:153
# 24f4d013155d46b6933505582d59d7b1
msgid "In both cases, \"absolute path\" means a URL that doesn't include the protocol or domain. Examples:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:156
# 8d34c9ad1af84ef6bdea229d7a63490e
msgid "Good: :file:`'/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:157
# 1ca8b18a6c394a50875c83d4287e9e8f
msgid "Bad: :file:`'example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:158
# 4ad4ce3c0fa94b69bcedc4f1182d09e7
msgid "Bad: :file:`'http://example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:160
# 7285d1e0cd284bec95f32d5198286de5
msgid "If :attr:`~Sitemap.location` isn't provided, the framework will call the ``get_absolute_url()`` method on each object as returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:164
# 8a5dd255430841d1a5e34bd09ac30b95
msgid "To specify a protocol other than ``'http'``, use :attr:`~Sitemap.protocol`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:171
# 4e24e52b28aa432dbbadb6e544aa2620
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's last-modified date/time, as a Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:175
# b1e6e81935e5429da9fea07c1c5ba996
msgid "If it's an attribute, its value should be a Python ``datetime.datetime`` object representing the last-modified date/time for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:183
# d5ce0581b8fe40dca7aa1f603af21430
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's change frequency, as a Python string."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:186
# 2d6390db8e774dbcbd127b34e729fae4
msgid "If it's an attribute, its value should be a string representing the change frequency of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:189
# 8e1e46896bab447e930a20cb35221d24
msgid "Possible values for :attr:`~Sitemap.changefreq`, whether you use a method or attribute, are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:191
# 30f7be6edf6d4885b4b192710fa0c78c
msgid "``'always'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:192
# 496815879e504c99822134977ea5c7bd
msgid "``'hourly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:193
# 418336845d09409e80401da879195863
msgid "``'daily'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:194
# 5b52fe8a1d8c4e9f8ba51704bf985fd0
msgid "``'weekly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:195
# 1b853793612245bc85ea6630c89d1691
msgid "``'monthly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:196
# 8d65a17bf9be460da694ad76d376d855
msgid "``'yearly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:197
# a2c492ba76434ad39c425e1ae6c5057c
msgid "``'never'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:203
# 0b54d920028b4bb6bcd6581dfb60dae5
msgid "If it's a method, it should take one argument -- an object as returned by :attr:`~Sitemap.items()` -- and return that object's priority, as either a string or float."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:206
# abc1534eeecf45eeb4a8924d31721004
msgid "If it's an attribute, its value should be either a string or float representing the priority of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:209
# cae77c2b34be47b586432900af920d11
msgid "Example values for :attr:`~Sitemap.priority`: ``0.4``, ``1.0``. The default priority of a page is ``0.5``. See the `sitemaps.org documentation`_ for more."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:218
# 267f65c9b3e6449687d3ff146ff584fd
msgid "**Optional.**"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:220
# a2f803f175274373bbcad9f5a68cfa06
msgid "This attribute defines the protocol (``'http'`` or ``'https'``) of the URLs in the sitemap. If it isn't set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is ``'http'``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:227
# 12d33afeb1354941b6621b52e442bb40
msgid "Shortcuts"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:229
# 0bc7b8488b914c21b214d81fad6f0226
msgid "The sitemap framework provides a couple convenience classes for common cases:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:233
# a5b86c704d8c46219859248e7ed560b3
msgid "The :class:`django.contrib.sitemaps.FlatPageSitemap` class looks at all publicly visible :mod:`flatpages <django.contrib.flatpages>` defined for the current :setting:`SITE_ID` (see the :mod:`sites documentation <django.contrib.sites>`) and creates an entry in the sitemap. These entries include only the :attr:`~Sitemap.location` attribute -- not :attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq` or :attr:`~Sitemap.priority`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:243
# 27166b4682ed45e188ded048ca5936b4
msgid "The :class:`django.contrib.sitemaps.GenericSitemap` class allows you to create a sitemap by passing it a dictionary which has to contain at least a :data:`queryset` entry. This queryset will be used to generate the items of the sitemap. It may also have a :data:`date_field` entry that specifies a date field for objects retrieved from the :data:`queryset`. This will be used for the :attr:`~Sitemap.lastmod` attribute in the generated sitemap. You may also pass :attr:`~Sitemap.priority` and :attr:`~Sitemap.changefreq` keyword arguments to the :class:`~django.contrib.sitemaps.GenericSitemap`  constructor to specify these attributes for all URLs."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:257
# 6523cd5ef2404a17a4ac428f8b5f0312
msgid "Here's an example of a :doc:`URLconf </topics/http/urls>` using both::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:284
# 97411ebba00548309b70e8774247c673
msgid "Creating a sitemap index"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:286
# 61f5a42fb5d246a38b4c682a3692209a
msgid "The sitemap framework also has the ability to create a sitemap index that references individual sitemap files, one per each section defined in your :data:`sitemaps` dictionary. The only differences in usage are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:290
# 6ea601c4ac4b48d6a29e262e59fede7f
msgid "You use two views in your URLconf: :func:`django.contrib.sitemaps.views.index` and :func:`django.contrib.sitemaps.views.sitemap`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:292
# f7b8c44fb22a4e94b2dc5ac8416e0e3b
msgid "The :func:`django.contrib.sitemaps.views.sitemap` view should take a :data:`section` keyword argument."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:295
# 628bf6d50c6947a9ba8e162153c2f0c9
msgid "Here's what the relevant URLconf lines would look like for the example above::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:302
# a498726d7d3640dc90b0e1f80223d202
msgid "This will automatically generate a :file:`sitemap.xml` file that references both :file:`sitemap-flatpages.xml` and :file:`sitemap-blog.xml`. The :class:`~django.contrib.sitemaps.Sitemap` classes and the :data:`sitemaps` dict don't change at all."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:307
# 7a8fc61b2ce748269072df2edb1be120
msgid "You should create an index file if one of your sitemaps has more than 50,000 URLs. In this case, Django will automatically paginate the sitemap, and the index will reflect that."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:313
# e3408d93cae34dcdaf620c42219f0ce9
msgid "If you're not using the vanilla sitemap view -- for example, if it's wrapped with a caching decorator -- you must name your sitemap view and pass ``sitemap_url_name`` to the index view::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:331
# c709051121264813a793f4382f6c37cb
msgid "Template customization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:333
# f65a15a547cf48e6ab2fd74ac6c63fbe
msgid "If you wish to use a different template for each sitemap or sitemap index available on your site, you may specify it by passing a ``template_name`` parameter to the ``sitemap`` and ``index`` views via the URLconf::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:357
# d88a7294481a49099424d198dc6005b1
msgid "Context variables"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:359
# da82b629eac042ff87ca31fbb4f0c617
msgid "When customizing the templates for the :func:`~django.contrib.sitemaps.views.index` and :func:`~django.contrib.sitemaps.views.sitemaps` views, you can rely on the following context variables."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:366
# 690e1c9dd519407ea65107bb5750850c
msgid "The variable :data:`sitemaps` is a list of absolute URLs to each of the sitemaps."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:369
# 87a76c362a8046b08c86d009cd6c7f1b
msgid "Sitemap"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:371
# 14659daf06e34f71adb903159e0db276
msgid "The variable :data:`urlset` is a list of URLs that should appear in the sitemap. Each URL exposes attributes as defined in the :class:`~django.contrib.sitemaps.Sitemap` class:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:375
# af720f9582a04806b2b18898514a52ce
msgid "``changefreq``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:376
# 6106c55667bc4ed9ad1de883ececdeb8
msgid "``item``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:377
# 378412311682488bae97c3dd52403d9b
msgid "``lastmod``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:378
# 91bc7a869ae2463a99ba610fd35a9039
msgid "``location``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:379
# a6b32033cfe342709c61eef574cdfc1c
msgid "``priority``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:383
# a0922e2536004a498e6d3b0026c80a0f
msgid "The ``item`` attribute has been added for each URL to allow more flexible customization of the templates, such as `Google news sitemaps`_. Assuming Sitemap's :attr:`~Sitemap.items()` would return a list of items with ``publication_data`` and a ``tags`` field something like this would generate a Google News compatible sitemap:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:414
# 6318a403e2114ff480f4fedb2707f51a
msgid "Pinging Google"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:416
# 40c07e3a6bbe4f2db4b24f497eb7c195
msgid "You may want to \"ping\" Google when your sitemap changes, to let it know to reindex your site. The sitemaps framework provides a function to do just that: :func:`django.contrib.sitemaps.ping_google()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:422
# e098249e0fc94298997ac90b4b8b09fb
msgid ":func:`ping_google` takes an optional argument, :data:`sitemap_url`, which should be the absolute path to your site's sitemap (e.g., :file:`'/sitemap.xml'`). If this argument isn't provided, :func:`ping_google` will attempt to figure out your sitemap by performing a reverse looking in your URLconf."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:428
# 24dd9459219941edaa449880eb266c43
msgid ":func:`ping_google` raises the exception :exc:`django.contrib.sitemaps.SitemapNotFound` if it cannot determine your sitemap URL."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:434
# 651cf2492fb94c479dfc879f5c124c0f
msgid "The :func:`ping_google` command only works if you have registered your site with `Google Webmaster Tools`_."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:439
# 50b291712ae9485da227a404b241c91b
msgid "One useful way to call :func:`ping_google` is from a model's ``save()`` method::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:455
# 43af8a0de98f40acb7080d27359d0458
msgid "A more efficient solution, however, would be to call :func:`ping_google` from a cron script, or some other scheduled task. The function makes an HTTP request to Google's servers, so you may not want to introduce that network overhead each time you call ``save()``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:461
# 885cba4df5784f49a64ee4294e161b21
msgid "Pinging Google via `manage.py`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:465
# b0c48ccaf0d64a8596e7d19ee1172ba9
msgid "Once the sitemaps application is added to your project, you may also ping Google using the ``ping_google`` management command::"
msgstr ""

#: ../../ref/contrib/sites.txt:3
# 53a294ea096f4055b82c8c96f551bcd5
msgid "The \"sites\" framework"
msgstr ""

#: ../../ref/contrib/sites.txt:11
# b1df04ce8dda493399228c50142b2a2b
msgid "Django comes with an optional \"sites\" framework. It's a hook for associating objects and functionality to particular Web sites, and it's a holding place for the domain names and \"verbose\" names of your Django-powered sites."
msgstr ""

#: ../../ref/contrib/sites.txt:15
# 9411f9cc2e63482085619ce047a6607e
msgid "Use it if your single Django installation powers more than one site and you need to differentiate between those sites in some way."
msgstr ""

#: ../../ref/contrib/sites.txt:18
# dc18acb20e9a4d1d8eff169b52af6841
msgid "The whole sites framework is based on a simple model:"
msgstr ""

#: ../../ref/contrib/sites.txt:22
# 345f92c2fb6547f98e70a0c3c0dbfd59
msgid "A model for storing the ``domain`` and ``name`` attributes of a Web site. The :setting:`SITE_ID` setting specifies the database ID of the :class:`~django.contrib.sites.models.Site` object associated with that particular settings file."
msgstr ""

#: ../../ref/contrib/sites.txt:29
# 52d4fee3cdc24529ba2150d1ae7affe8
msgid "The domain name associated with the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:33
# d77ca217a5d64c1fb096017d529a4fc0
msgid "A human-readable \"verbose\" name for the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:36
# 79015c47fe9c47149b8e5dfb8a889efd
msgid "How you use this is up to you, but Django uses it in a couple of ways automatically via simple conventions."
msgstr ""

#: ../../ref/contrib/sites.txt:40
# 8fce73973fa34b52b8fbac9e0b752b5c
msgid "Example usage"
msgstr ""

#: ../../ref/contrib/sites.txt:42
# 22edbbc43e5b4144967c2f0bf4d89671
msgid "Why would you use sites? It's best explained through examples."
msgstr ""

#: ../../ref/contrib/sites.txt:45
# c80c0219933a4021ada5d6a094c0985a
msgid "Associating content with multiple sites"
msgstr ""

#: ../../ref/contrib/sites.txt:47
# 69383f2b8a5641768539e60488351c7f
msgid "The Django-powered sites LJWorld.com_ and Lawrence.com_ are operated by the same news organization -- the Lawrence Journal-World newspaper in Lawrence, Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local entertainment. But sometimes editors want to publish an article on *both* sites."
msgstr ""

#: ../../ref/contrib/sites.txt:53
# 4f44cd345d68401cad0185978d9c9dc1
msgid "The brain-dead way of solving the problem would be to require site producers to publish the same story twice: once for LJWorld.com and again for Lawrence.com. But that's inefficient for site producers, and it's redundant to store multiple copies of the same story in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:58
# c893fe3d2e5546279234008723a08bed
msgid "The better solution is simple: Both sites use the same article database, and an article is associated with one or more sites. In Django model terminology, that's represented by a :class:`~django.db.models.ManyToManyField` in the ``Article`` model::"
msgstr ""

#: ../../ref/contrib/sites.txt:71
# 1c43d3c34f7947ce832a670b8667bd63
msgid "This accomplishes several things quite nicely:"
msgstr ""

#: ../../ref/contrib/sites.txt:73
# d47259495007431a94482bf12516fec4
msgid "It lets the site producers edit all content -- on both sites -- in a single interface (the Django admin)."
msgstr ""

#: ../../ref/contrib/sites.txt:76
# cf23c22a071545e587b8005907bb9a44
msgid "It means the same story doesn't have to be published twice in the database; it only has a single record in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:79
# 33d9e0cea20646bc87789980e47af9af
msgid "It lets the site developers use the same Django view code for both sites. The view code that displays a given story just checks to make sure the requested story is on the current site. It looks something like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:96
# 68e936f20cac46cda5f92dc6a6176e35
msgid "Associating content with a single site"
msgstr ""

#: ../../ref/contrib/sites.txt:98
# a61061d97db84f858df6568ee5f1c074
msgid "Similarly, you can associate a model to the :class:`~django.contrib.sites.models.Site` model in a many-to-one relationship, using :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/contrib/sites.txt:103
# fd06c484db38497db88144b8df1d0400
msgid "For example, if an article is only allowed on a single site, you'd use a model like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:114
# 8362a21ae4544aa0a54b6209245a4edb
msgid "This has the same benefits as described in the last section."
msgstr ""

#: ../../ref/contrib/sites.txt:119
# 461482e54cf446f4a3d8bf3537226edf
msgid "Hooking into the current site from views"
msgstr ""

#: ../../ref/contrib/sites.txt:121
# eed644b1f26a41e197a8c93bee058d81
msgid "You can use the sites framework in your Django views to do particular things based on the site in which the view is being called. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:135
# dae36304cf4641a1a19ee88985af06fa
msgid "Of course, it's ugly to hard-code the site IDs like that. This sort of hard-coding is best for hackish fixes that you need done quickly. The cleaner way of accomplishing the same thing is to check the current site's domain::"
msgstr ""

#: ../../ref/contrib/sites.txt:151
# d4626f12fde74526a33f84a72a408c60
msgid "This has also the advantage of checking if the sites framework is installed, and return a :class:`RequestSite` instance if it is not."
msgstr ""

#: ../../ref/contrib/sites.txt:154
# b39db87de1aa46bcb9681050a4479d0c
msgid "If you don't have access to the request object, you can use the ``get_current()`` method of the :class:`~django.contrib.sites.models.Site` model's manager. You should then ensure that your settings file does contain the :setting:`SITE_ID` setting. This example is equivalent to the previous one::"
msgstr ""

#: ../../ref/contrib/sites.txt:171
# 99c8ae3668d5400a93e7835c652d66a3
msgid "Getting the current domain for display"
msgstr ""

#: ../../ref/contrib/sites.txt:173
# da53ebf47c5244558ac059bac54da88d
msgid "LJWorld.com and Lawrence.com both have email alert functionality, which lets readers sign up to get notifications when news happens. It's pretty basic: A reader signs up on a Web form, and he immediately gets an email saying, \"Thanks for your subscription.\""
msgstr ""

#: ../../ref/contrib/sites.txt:178
# d94c928cac5a4076b8fb383535f26db9
msgid "It'd be inefficient and redundant to implement this signup-processing code twice, so the sites use the same code behind the scenes. But the \"thank you for signing up\" notice needs to be different for each site. By using :class:`~django.contrib.sites.models.Site` objects, we can abstract the \"thank you\" notice to use the values of the current site's :attr:`~django.contrib.sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""

#: ../../ref/contrib/sites.txt:186
# b8236b0ae4bb45a5b2af39ddb83a5dc6
msgid "Here's an example of what the form-handling view looks like::"
msgstr ""

#: ../../ref/contrib/sites.txt:203
# 2f09719a68f3478ebe6fa219afa6fe02
msgid "On Lawrence.com, this email has the subject line \"Thanks for subscribing to lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks for subscribing to LJWorld.com alerts.\" Same goes for the email's message body."
msgstr ""

#: ../../ref/contrib/sites.txt:207
# 0eb71e808f6a44f28291c760c03b4e6c
msgid "Note that an even more flexible (but more heavyweight) way of doing this would be to use Django's template system. Assuming Lawrence.com and LJWorld.com have different template directories (:setting:`TEMPLATE_DIRS`), you could simply farm out to the template system like so::"
msgstr ""

#: ../../ref/contrib/sites.txt:225
# accb096bf9854a68b32a0c8a5c8dc9a0
msgid "In this case, you'd have to create :file:`subject.txt` and :file:`message.txt` template files for both the LJWorld.com and Lawrence.com template directories. That gives you more flexibility, but it's also more complex."
msgstr ""

#: ../../ref/contrib/sites.txt:229
# 6ddf67297ceb4b02927ada88187677fa
msgid "It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""

#: ../../ref/contrib/sites.txt:233
# 53ec7dd760f2425ba108d593b3ca8802
msgid "Getting the current domain for full URLs"
msgstr ""

#: ../../ref/contrib/sites.txt:235
# 9801e7e1abf74b2da4911624d110a92c
msgid "Django's ``get_absolute_url()`` convention is nice for getting your objects' URL without the domain name, but in some cases you might want to display the full URL -- with ``http://`` and the domain and everything -- for an object. To do this, you can use the sites framework. A simple example::"
msgstr ""

#: ../../ref/contrib/sites.txt:251
# 13977df5e8d741d9840c96b5f0de61c5
msgid "Default site and ``syncdb``"
msgstr ""

#: ../../ref/contrib/sites.txt:253
# fb9384c1100e403caf398d315fcdf1ce
msgid "``django.contrib.sites`` registers a :data:`~django.db.models.signals.post_syncdb` signal handler which creates a default site named ``example.com`` with the domain ``example.com``. For example, this site will be created after Django creates the test database."
msgstr ""

#: ../../ref/contrib/sites.txt:259
# f793caa18f33470e9ce131eeee2379e4
msgid "Caching the current ``Site`` object"
msgstr ""

#: ../../ref/contrib/sites.txt:261
# c992d0a1149f4ab59a84335ba9267be6
msgid "As the current site is stored in the database, each call to ``Site.objects.get_current()`` could result in a database query. But Django is a little cleverer than that: on the first request, the current site is cached, and any subsequent call returns the cached data instead of hitting the database."
msgstr ""

#: ../../ref/contrib/sites.txt:266
# 0d41e4e49b284840a07e392def182d17
msgid "If for any reason you want to force a database query, you can tell Django to clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""

#: ../../ref/contrib/sites.txt:284
# 36b0a8bf72d948698e87c59f550d948d
msgid "The ``CurrentSiteManager``"
msgstr ""

#: ../../ref/contrib/sites.txt:288
# 5606c371bae747b2906e7766268e17c4
msgid "If :class:`~django.contrib.sites.models.Site` plays a key role in your application, consider using the helpful :class:`~django.contrib.sites.managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </topics/db/managers>` that automatically filters its queries to include only objects associated with the current :class:`~django.contrib.sites.models.Site`."
msgstr ""

#: ../../ref/contrib/sites.txt:295
# 5a68d015633b4249980db51fa0963f2d
msgid "Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it to your model explicitly. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:310
# de1ada207b5e4a708df14faa5594c253
msgid "With this model, ``Photo.objects.all()`` will return all ``Photo`` objects in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` objects associated with the current site, according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:314
# a0b50c4e40004a4fbc882c554231897e
msgid "Put another way, these two statements are equivalent::"
msgstr ""

#: ../../ref/contrib/sites.txt:319
# 88c4c326f8384cbca2234413c3e68e42
msgid "How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If you use a field named something other than ``site`` or ``sites`` to identify which :class:`~django.contrib.sites.models.Site` objects your object is related to, then you need to explicitly pass the custom field name as a parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on your model. The following model, which has a field called ``publish_on``, demonstrates this::"
msgstr ""

#: ../../ref/contrib/sites.txt:347
# 81c8179f534e47e889fd38f2c3e4286a
msgid "If you attempt to use :class:`~django.contrib.sites.managers.CurrentSiteManager` and pass a field name that doesn't exist, Django will raise a ``ValueError``."
msgstr ""

#: ../../ref/contrib/sites.txt:350
# d6e66beade9949899f8dba04b2403c4f
msgid "Finally, note that you'll probably want to keep a normal (non-site-specific) ``Manager`` on your model, even if you use :class:`~django.contrib.sites.managers.CurrentSiteManager`. As explained in the :doc:`manager documentation </topics/db/managers>`, if you define a manager manually, then Django won't create the automatic ``objects = models.Manager()`` manager for you. Also note that certain parts of Django -- namely, the Django admin site and generic views -- use whichever manager is defined *first* in the model, so if you want your admin site to have access to all objects (not just site-specific ones), put ``objects = models.Manager()`` in your model, before you define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""

#: ../../ref/contrib/sites.txt:363
# 20be7fb5d23f44acb5c73eda7301bec8
msgid "How Django uses the sites framework"
msgstr ""

#: ../../ref/contrib/sites.txt:365
# f28a563addd64a48920680d1f1fd3407
msgid "Although it's not required that you use the sites framework, it's strongly encouraged, because Django takes advantage of it in a few places. Even if your Django installation is powering only a single site, you should take the two seconds to create the site object with your ``domain`` and ``name``, and point to its ID in your :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:371
# 963d07d57a6e417e9078a7183ed36df1
msgid "Here's how Django uses the sites framework:"
msgstr ""

#: ../../ref/contrib/sites.txt:373
# fd8a3e428819413d9f0bd404bce89c04
msgid "In the :mod:`redirects framework <django.contrib.redirects>`, each redirect object is associated with a particular site. When Django searches for a redirect, it takes into account the current site."
msgstr ""

#: ../../ref/contrib/sites.txt:377
# c0e8f35dd4014991813bc5ec5aad1508
msgid "In the comments framework, each comment is associated with a particular site. When a comment is posted, its :class:`~django.contrib.sites.models.Site` is set to the current site, and when comments are listed via the appropriate template tag, only the comments for the current site are displayed."
msgstr ""

#: ../../ref/contrib/sites.txt:383
# 785c62fa91494d5b96533aa9934f6014
msgid "In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage is associated with a particular site. When a flatpage is created, you specify its :class:`~django.contrib.sites.models.Site`, and the :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the current site in retrieving flatpages to display."
msgstr ""

#: ../../ref/contrib/sites.txt:389
# ee3ec67242984a1fa155c5de7bf77961
msgid "In the :mod:`syndication framework <django.contrib.syndication>`, the templates for ``title`` and ``description`` automatically have access to a variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models.Site` object representing the current site. Also, the hook for providing item URLs will use the ``domain`` from the current :class:`~django.contrib.sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""

#: ../../ref/contrib/sites.txt:397
# 0e1db41790a14d549eb4dfca661a1ba7
msgid "In the :mod:`authentication framework <django.contrib.auth>`, the :func:`django.contrib.auth.views.login` view passes the current :class:`~django.contrib.sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""

#: ../../ref/contrib/sites.txt:402
# f5ed0fa9ad3947fb8bb9fe57793a0aa7
msgid "The shortcut view (``django.views.defaults.shortcut``) uses the domain of the current :class:`~django.contrib.sites.models.Site` object when calculating an object's URL."
msgstr ""

#: ../../ref/contrib/sites.txt:406
# 6ac35bb7bd284df29acc2b3630847899
msgid "In the admin framework, the \"view on site\" link uses the current :class:`~django.contrib.sites.models.Site` to work out the domain for the site that it will redirect to."
msgstr ""

#: ../../ref/contrib/sites.txt:413
# 9288e77691dc4ebab611db44d6ab5e4c
msgid "``RequestSite`` objects"
msgstr ""

#: ../../ref/contrib/sites.txt:417
# 0d823a8cdeca4a0a9f71249e61477b59
msgid "Some :doc:`django.contrib </ref/contrib/index>` applications take advantage of the sites framework but are architected in a way that doesn't *require* the sites framework to be installed in your database. (Some people don't want to, or just aren't *able* to install the extra database table that the sites framework requires.) For those cases, the framework provides a :class:`~django.contrib.sites.models.RequestSite` class, which can be used as a fallback when the database-backed sites framework is not available."
msgstr ""

#: ../../ref/contrib/sites.txt:427
# 9e38f3e06938493993128996ccab7a5d
msgid "A class that shares the primary interface of :class:`~django.contrib.sites.models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its data from a Django :class:`~django.http.HttpRequest` object rather than from a database."
msgstr ""

#: ../../ref/contrib/sites.txt:432
# dd365b2c08834978979279cb395d8b74
msgid "The ``save()`` and ``delete()`` methods raise ``NotImplementedError``."
msgstr ""

#: ../../ref/contrib/sites.txt:436
# 1fd4cb51454246da8b35d1537eb45853
msgid "Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django.http.HttpRequest.get_host`."
msgstr ""

#: ../../ref/contrib/sites.txt:440
# e9c86f56d91b4ab08df710b489e5475b
msgid "A :class:`~django.contrib.sites.models.RequestSite` object has a similar interface to a normal :class:`~django.contrib.sites.models.Site` object, except its :meth:`~django.contrib.sites.models.RequestSite.__init__()` method takes an :class:`~django.http.HttpRequest` object. It's able to deduce the ``domain`` and ``name`` by looking at the request's domain. It has ``save()`` and ``delete()`` methods to match the interface of :class:`~django.contrib.sites.models.Site`, but the methods raise ``NotImplementedError``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:3
# 87803fd4b2d74372bc6a5280ec03af93
msgid "The staticfiles app"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:8
# 6cefebca38a2429397992f54a78b69fd
msgid "``django.contrib.staticfiles`` collects static files from each of your applications (and any other places you specify) into a single location that can easily be served in production."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:14
# e7d7c3d1900a4c4c942641f9684e581f
msgid "For an introduction to the static files app and some usage examples, see :doc:`/howto/static-files`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:26
# 1693363a844a45af8b8f73232687221b
msgid "The following settings control the behavior of the staticfiles app."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:31
# 9d086fecd6ec4beda7cdf4f494576141
msgid "STATICFILES_DIRS"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:33
# 4e242b33680e4d0da544eaa47875912b
msgid "Default: ``[]``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:35
# 2a114fdf597d4e80a44761da5fece6a3
msgid "This setting defines the additional locations the staticfiles app will traverse if the :class:`FileSystemFinder` finder is enabled, e.g. if you use the :djadmin:`collectstatic` or :djadmin:`findstatic` management command or use the static file serving view."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:40
# 23a5efa2cdbc430fb800f5753deb1928
msgid "This should be set to a list or tuple of strings that contain full paths to your additional files directory(ies) e.g.::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:50
# 101ce480b7554ca7b8f8c9cbf90f0775
msgid "Prefixes (optional)"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:52
# 5c8c8b67b7c44000a1e7d7da932311b1
msgid "In case you want to refer to files in one of the locations with an additional namespace, you can **optionally** provide a prefix as ``(prefix, path)`` tuples, e.g.::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:61
# c278175435194942a6c9fc8388eedcc2
msgid "Example:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:63
# 2440c0589cfc416cb8f2e9eb5a0d6a49
msgid "Assuming you have :setting:`STATIC_URL` set ``'/static/'``, the :djadmin:`collectstatic` management command would collect the \"stats\" files in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:67
# 4d3514decd9948ff97214016f0150856
msgid "This would allow you to refer to the local file ``'/opt/webfiles/stats/polls_20101022.tar.gz'`` with ``'/static/downloads/polls_20101022.tar.gz'`` in your templates, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:78
# 1047fcb2271643bcaed3dc8bce2d9f45
msgid "STATICFILES_STORAGE"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:80
# 1174c3d6362049bfa8cad88945ed38f6
msgid "Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:82
# 349087799cd94077951b5e9095a5e02e
msgid "The file storage engine to use when collecting static files with the :djadmin:`collectstatic` management command."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:87
# 4457055190f242cab365724a967ee636
msgid "A ready-to-use instance of the storage backend defined in this setting can be found at ``django.contrib.staticfiles.storage.staticfiles_storage``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:90
# 3f44c46fbdcb40fbacad2d56e3f64461
msgid "For an example, see :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:95
# 8d519ca69a524c1c8d4feb9b79054114
msgid "STATICFILES_FINDERS"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:102
# dd1e493559fb4f37ae63599bd1c43e3e
msgid "The list of finder backends that know how to find static files in various locations."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:105
# 0ee17d65720c45fb84e8c71c758af19f
msgid "The default will find files stored in the :setting:`STATICFILES_DIRS` setting (using :class:`django.contrib.staticfiles.finders.FileSystemFinder`) and in a ``static`` subdirectory of each app (using :class:`django.contrib.staticfiles.finders.AppDirectoriesFinder`)"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:110
# 3f2fa10762834493afd1f486bcf66017
msgid "One finder is disabled by default: :class:`django.contrib.staticfiles.finders.DefaultStorageFinder`. If added to your :setting:`STATICFILES_FINDERS` setting, it will look for static files in the default file storage as defined by the :setting:`DEFAULT_FILE_STORAGE` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:118
# e4646687fd184d3aa84e62facbd86f53
msgid "When using the :class:`AppDirectoriesFinder` finder, make sure your apps can be found by staticfiles. Simply add the app to the :setting:`INSTALLED_APPS` setting of your site."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:122
# e791770430aa491a8837c5ef888cfcf6
msgid "Static file finders are currently considered a private interface, and this interface is thus undocumented."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:126
# 95167a6a2c1d49c1a206ad603870b25e
msgid "Management Commands"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:130
# 6c8e0a9b817b4d14ace7672b50ad63a4
msgid "``django.contrib.staticfiles`` exposes three management commands."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:133
#: ../../ref/django-admin.txt:1233
# 353aab3ef3f14106a7f6a83a99e2c69b
# eb1322d92ff14bd08a5b6a46c5ecb45b
msgid "collectstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:137
# 533c5c90459e4129b99be6bc30de3613
msgid "Collects the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:139
# ffd3b14bece04f20b78aa313a4c7f530
msgid "Duplicate file names are by default resolved in a similar way to how template resolution works: the file that is first found in one of the specified locations will be used. If you're confused, the :djadmin:`findstatic` command can help show you which files are found."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:144
# db69d493c2f24155abd311a5e243dcf9
msgid "Files are searched by using the :setting:`enabled finders <STATICFILES_FINDERS>`. The default is to look in all locations defined in :setting:`STATICFILES_DIRS` and in the ``'static'`` directory of apps specified by the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:151
# 290dad04625047fc9a95dd81eb8d10cc
msgid "The :djadmin:`collectstatic` management command calls the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the :setting:`STATICFILES_STORAGE` after each run and passes a list of paths that have been found by the management command. It also receives all command line options of :djadmin:`collectstatic`. This is used by the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` by default."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:159
# 5263d62845b745dd933a00e61b874da7
msgid "Some commonly used options are:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:163
# 60d2d068824f42fb9b2a1aa29ae48481
msgid "Do NOT prompt the user for input of any kind."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:168
# f883e41ac96941b198b45777b4e70619
msgid "Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:174
# a51a93439c7f4f2a849df2b34edb82cb
msgid "Do everything except modify the filesystem."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:181
# 51786e35fba143bc9cdef988491bfbd4
msgid "Clear the existing files before trying to copy or link the original file."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:186
# 0b6594ba370e4f008294f373f625bd76
msgid "Create a symbolic link to each file instead of copying."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:192
# 7fb9d6aded564d3994895a3c97b75a7a
msgid "Don't call the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method of the configured :setting:`STATICFILES_STORAGE` storage backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:198
# f998d84f9a114715b5d7dcf829d247fb
msgid "Don't ignore the common private glob-style patterns ``'CVS'``, ``'.*'`` and ``'*~'``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:201
# 562d535d6755493fae2625b4cc4d2484
msgid "For a full list of options, refer to the commands own help by running::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:206
#: ../../ref/django-admin.txt:1242
# 9ad1ff08d95e42f1ba21d624cc0db321
# 9256b2aa8845468abb11ba8e81bc7f4b
msgid "findstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:210
# 397ddb64ad7b451bb0452ac837fcd6a5
msgid "Searches for one or more relative paths with the enabled finders."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:219
# 91e0bbfb7a67435cab267d1c4f2c63bf
msgid "By default, all matching locations are found. To only return the first match for each relative path, use the ``--first`` option::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:225
# 3b43c1786e3144cd93b2f13e92ac1e7f
msgid "This is a debugging aid; it'll show you exactly which static file will be collected for a given path."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:231
# 87cdd12ba03a406e868377259862cb66
msgid "runserver"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:235
# da1d97b79e1e4391b58ecda5f93c4a68
msgid "Overrides the core :djadmin:`runserver` command if the ``staticfiles`` app is :setting:`installed<INSTALLED_APPS>` and adds automatic serving of static files and the following new options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:241
# 0df01b1eda5c4fa2917ebf0602b9b659
msgid "Use the ``--nostatic`` option to disable serving of static files with the :doc:`staticfiles </ref/contrib/staticfiles>` app entirely. This option is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:246
#: ../../ref/contrib/staticfiles.txt:260
#: ../../ref/django-admin.txt:113
#: ../../ref/django-admin.txt:406
#: ../../ref/django-admin.txt:415
#: ../../ref/django-admin.txt:425
#: ../../ref/django-admin.txt:442
#: ../../ref/django-admin.txt:453
#: ../../ref/django-admin.txt:593
#: ../../ref/django-admin.txt:655
#: ../../ref/django-admin.txt:673
#: ../../ref/django-admin.txt:1160
#: ../../ref/django-admin.txt:1258
#: ../../ref/django-admin.txt:1273
#: ../../ref/django-admin.txt:1287
#: ../../ref/django-admin.txt:1297
#: ../../ref/templates/builtins.txt:877
# 847d4f37e1e84e1e890a9e6ef69aba3c
# 4958c2c20bef401bb1ea4c5ef781ee0c
# a736eb7d42cb46db9b4c7054647dbe91
# f8bc3c5784b3427796ad67fc19b8a8a3
# 2f7abbf5e3754ed3abd117541575c2bb
# f49c12d324de413abc3da2cf9d5d23a9
# 612083cc747548c388be62657767db0f
# 3a6f3c4d4ecf449aaa45cf479920cdd8
# a36b2f73319a42ebb1b9db6cd6ddf5fe
# e74398daa7444319981afe802dad7c23
# dd73b742924f4d69b6b26d64f0ea0251
# a807dbeb66c04e8592fcaa41daaf5226
# 26e4c31346c943de8d409308b79a9c76
# cb21ccc92eab4380852fe83c0773da82
# 48adf111be2041ce80a4af4d0d20f23d
# 1f7d0aacbf644e8aaa7b2755ac7afc58
# b299d472f4b749979856fb508a7f2d8b
msgid "Example usage::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:252
# 7e0bd7edf1bb4808bd349a87ecf5cfc2
msgid "Use the ``--insecure`` option to force serving of static files with the :doc:`staticfiles </ref/contrib/staticfiles>` app even if the :setting:`DEBUG` setting is ``False``. By using this you acknowledge the fact that it's **grossly inefficient** and probably **insecure**. This is only intended for local development, should **never be used in production** and is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:265
# 81bdbd4f433c4090802d1366ab8223ec
msgid "Storages"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:268
# db832286df954b3aa2d5f40aab37f93e
msgid "StaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:272
# bb8490875bd44bce87a37493327735a1
msgid "A subclass of the :class:`~django.core.files.storage.FileSystemStorage` storage backend that uses the :setting:`STATIC_ROOT` setting as the base file system location and the :setting:`STATIC_URL` setting respectively as the base URL."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:281
# 49f6e623c23d4fabad57f0ed45680bc7
msgid "This method is called by the :djadmin:`collectstatic` management command after each run and gets passed the local storages and paths of found files as a dictionary, as well as the command line options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:285
# bb85c41747b3409db117f0603c84c33e
msgid "The :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` uses this behind the scenes to replace the paths with their hashed counterparts and update the cache appropriately."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:290
# 993ff56d739e4600ab62ebb8bf00cf02
msgid "CachedStaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:296
# 4702f70cbfd8406a90973697305f832c
msgid "A subclass of the :class:`~django.contrib.staticfiles.storage.StaticFilesStorage` storage backend which caches the files it saves by appending the MD5 hash of the file's content to the filename. For example, the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48.css``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:301
# 7bbb2c5769fe41bca0dda8e1671c51e1
msgid "The purpose of this storage is to keep serving the old files in case some pages still refer to those files, e.g. because they are cached by you or a 3rd party proxy server. Additionally, it's very helpful if you want to apply `far future Expires headers`_ to the deployed files to speed up the load time for subsequent page visits."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:307
# 45de2645307d4f83a0553f0aa47eb2a4
msgid "The storage backend automatically replaces the paths found in the saved files matching other saved files with the path of the cached copy (using the :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` method). The regular expressions used to find those paths (``django.contrib.staticfiles.storage.CachedStaticFilesStorage.cached_patterns``) by default cover the `@import`_ rule and `url()`_ statement of `Cascading Style Sheets`_. For example, the ``'css/styles.css'`` file with the content"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:320
# 45fe678a1adb4c49bad1f47090232afc
msgid "would be replaced by calling the :meth:`~django.core.files.storage.Storage.url` method of the ``CachedStaticFilesStorage`` storage backend, ultimatively saving a ``'css/styles.55e7cbb9ba48.css'`` file with the following content:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:330
# f012a43f884740b8bed0c95199343368
msgid "To enable the ``CachedStaticFilesStorage`` you have to make sure the following requirements are met:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:333
# 755769247a104a338a6fe7ebf3656051
msgid "the :setting:`STATICFILES_STORAGE` setting is set to ``'django.contrib.staticfiles.storage.CachedStaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:335
# 0e1fa41eee924baeabf73021db7ca674
msgid "the :setting:`DEBUG` setting is set to ``False``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:336
# 35bf0062bba34f719c950f3deaa40036
msgid "you use the ``staticfiles`` :ttag:`static<staticfiles-static>` template tag to refer to your static files in your templates"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:338
# bd546673a150423caec226d5df998fb1
msgid "you've collected all your static files by using the :djadmin:`collectstatic` management command"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:341
# 708e49852fca4dd1b443394cda1c7bd9
msgid "Since creating the MD5 hash can be a performance burden to your website during runtime, ``staticfiles`` will automatically try to cache the hashed name for each file path using Django's :doc:`caching framework</topics/cache>`. If you want to override certain options of the cache backend the storage uses, simply specify a custom entry in the :setting:`CACHES` setting named ``'staticfiles'``. It falls back to using the ``'default'`` cache backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:353
# b0793bb1291e47b88997b28ebe60bbf9
msgid "The method that is used when creating the hashed name of a file. Needs to return a hash for the given file name and content. By default it calculates a MD5 hash from the content's chunks as mentioned above."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:369
#: ../../ref/templates/builtins.txt:2349
#: ../../ref/templates/builtins.txt:2354
# f5c3d7e84b6446aaad7ca4165835a813
# ded784bd790c49cf940474a4c9fbf38a
# 86b3698b3ca046eaac097f873d788062
msgid "static"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:375
# 6c8b0a977d2146f5bf216ed6658f1604
msgid "Uses the configured :setting:`STATICFILES_STORAGE` storage to create the full URL for the given relative path, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:383
# 5fbdd2bb57a845ce983db5d249718bf3
msgid "The previous example is equal to calling the ``url`` method of an instance of :setting:`STATICFILES_STORAGE` with ``\"images/hi.jpg\"``. This is especially useful when using a non-local storage backend to deploy files as documented in :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:390
# 49f133f0a70a4c32b4d4c034aae1e1b3
msgid "If you'd like to retrieve a static URL without displaying it, you can use a slightly different call:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:400
# 841d2967179e476d91bf19cb0d8a95af
msgid "Other Helpers"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:402
# a70844ad768d4504bfb93509ac44d52a
msgid "There are a few other helpers outside of the :mod:`staticfiles <django.contrib.staticfiles>` app to work with static files:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:406
# 308c0faa1212431198188a37afea54ee
msgid "The :func:`django.core.context_processors.static` context processor which adds :setting:`STATIC_URL` to every template context rendered with :class:`~django.template.RequestContext` contexts."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:410
# ad1900b40cdd443ea807379438893b39
msgid "The builtin template tag :ttag:`static` which takes a path and urljoins it with the static prefix :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:413
# 15985cdb718a4a32ae72368f735ec997
msgid "The builtin template tag :ttag:`get_static_prefix` which populates a template variable with the static prefix :setting:`STATIC_URL` to be used as a variable or directly."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:417
# 442d84fbb4bc43c1856da1ba284ff04e
msgid "The similar template tag :ttag:`get_media_prefix` which works like :ttag:`get_static_prefix` but uses :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:423
# ade4cca38a094fa583787a30c5c0324a
msgid "Static file development view"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:429
# cede40e99bcb4a82a8e3f424b02e80c8
msgid "This view function serves static files in development."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:433
# 0e47cfcf270f4d8097d6e80776a587fb
msgid "This view will only work if :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:435
# 63fcd60196994664903281e94e7631af
msgid "That's because this view is **grossly inefficient** and probably **insecure**. This is only intended for local development, and should **never be used in production**."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:439
# 19e55bdf53d34b35b48fde794db8b7e2
msgid "This view is automatically enabled by :djadmin:`runserver` (with a :setting:`DEBUG` setting set to ``True``). To use the view with a different local development server, add the following snippet to the end of your primary URL configuration::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:451
# d77c9d784f1944baa749ab837bb5f7ad
msgid "Note, the beginning of the pattern (``r'^static/'``) should be your :setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:454
# 3cee59a9b5a74599b8600939e5828b1a
msgid "Since this is a bit finicky, there's also a helper function that'll do this for you:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:458
# a5bae6d49e6f4837930d5fe48eac75c7
msgid "This will return the proper URL pattern for serving static files to your already defined pattern list. Use it like this::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:469
# b063f74f52ed4de78f66a395cba945ee
msgid "This helper function will only work if :setting:`DEBUG` is ``True`` and your :setting:`STATIC_URL` setting is neither empty nor a full URL such as ``http://static.example.com/``."
msgstr ""

#: ../../ref/contrib/syndication.txt:3
# c4c42efdb02642bd8b7bde81d2beba2e
msgid "The syndication feed framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:9
# 832f1fe8c6364eddb2d94b7793248b3f
msgid "Django comes with a high-level syndication-feed-generating framework that makes creating RSS_ and Atom_ feeds easy."
msgstr ""

#: ../../ref/contrib/syndication.txt:12
# 3bccfcaccf554e15bde597341d6cf4b0
msgid "To create any syndication feed, all you have to do is write a short Python class. You can create as many feeds as you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:15
# 9eff683ee43340fba0dc2b3adfae27be
msgid "Django also comes with a lower-level feed-generating API. Use this if you want to generate feeds outside of a Web context, or in some other lower-level way."
msgstr ""

#: ../../ref/contrib/syndication.txt:23
# c67067db5c504a1a8f181359a35435d8
msgid "The high-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:28
# 140122fb16994fb8bbd5961d7a5df9e9
msgid "The high-level feed-generating framework is supplied by the :class:`~django.contrib.syndication.views.Feed` class. To create a feed, write a :class:`~django.contrib.syndication.views.Feed` class and point to an instance of it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:35
# a864cc70980f4467a29b6ef75e8c3e56
msgid "Feed classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:37
# 18a73cf01ef541b6a61c15ee45e87d97
msgid "A :class:`~django.contrib.syndication.views.Feed` class is a Python class that represents a syndication feed. A feed can be simple (e.g., a \"site news\" feed, or a basic feed displaying the latest entries of a blog) or more complex (e.g., a feed displaying all the blog entries in a particular category, where the category is variable)."
msgstr ""

#: ../../ref/contrib/syndication.txt:43
# a6dfda151772483599bda0c37571ef37
msgid "Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/syndication.txt:46
# 8815a814ef1f47d1a99491c6e5d0fa45
msgid "Instances of :class:`~django.contrib.syndication.views.Feed` classes are views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:52
# a040b831621c4e0ea697523fbcdf5ba1
msgid "This simple example, taken from `chicagocrime.org`_, describes a feed of the latest five news items::"
msgstr ""

#: ../../ref/contrib/syndication.txt:77
# 7278137c546444d9af8b64a3313e478c
msgid "To connect a URL to this feed, put an instance of the Feed object in your :doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:91
# ea5a91ca09d445cc99dbbf538db69023
msgid "The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr ""

#: ../../ref/contrib/syndication.txt:93
# d7be3c0490d448aeb72cf0f779e3014f
msgid "``title``, ``link`` and ``description`` correspond to the standard RSS ``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""

#: ../../ref/contrib/syndication.txt:97
# 7ebff83362df40bd8df27791a997aa8a
msgid "``items()`` is, simply, a method that returns a list of objects that should be included in the feed as ``<item>`` elements. Although this example returns ``NewsItem`` objects using Django's :doc:`object-relational mapper </ref/models/querysets>`, ``items()`` doesn't have to return model instances. Although you get a few bits of functionality \"for free\" by using Django models, ``items()`` can return any type of object you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:105
# a73df00b97be4cdbbef9111d825d9180
msgid "If you're creating an Atom feed, rather than an RSS feed, set the ``subtitle`` attribute instead of the ``description`` attribute. See `Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""

#: ../../ref/contrib/syndication.txt:109
# e8acc94289a04f72ae2b68a81719b2cc
msgid "One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, ``<link>`` and ``<description>``. We need to tell the framework what data to put into those elements."
msgstr ""

#: ../../ref/contrib/syndication.txt:113
# aece80a0b2b04f598738cbd7a75b3798
msgid "For the contents of ``<title>`` and ``<description>``, Django tries calling the methods ``item_title()`` and ``item_description()`` on the :class:`~django.contrib.syndication.views.Feed` class. They are passed a single parameter, ``item``, which is the object itself. These are optional; by default, the unicode representation of the object is used for both."
msgstr ""

#: ../../ref/contrib/syndication.txt:120
# 64b4c6e85943438d8e217095559f262b
msgid "If you want to do any special formatting for either the title or description, :doc:`Django templates </topics/templates>` can be used instead. Their paths can be specified with the ``title_template`` and ``description_template`` attributes on the :class:`~django.contrib.syndication.views.Feed` class. The templates are rendered for each item and are passed two template context variables:"
msgstr ""

#: ../../ref/contrib/syndication.txt:127
# 177a9b9a43f4411f9a13daeb4f7d1e93
msgid "``{{ obj }}`` -- The current object (one of whichever objects you returned in ``items()``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:130
# 275efe0a2ca44a209c93b4e8eb428f46
msgid "``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object representing the current site. This is useful for ``{{ site.domain }}`` or ``{{ site.name }}``. If you do *not* have the Django sites framework installed, this will be set to a :class:`django.contrib.sites.models.RequestSite` object. See the :ref:`RequestSite section of the sites framework documentation <requestsite-objects>` for more."
msgstr ""

#: ../../ref/contrib/syndication.txt:138
# 45271c2493814c8190d7701d7a5acd74
msgid "See `a complex example`_ below that uses a description template."
msgstr ""

#: ../../ref/contrib/syndication.txt:140
# ae42403848c64aeaab94f22f981b8be0
msgid "To specify the contents of ``<link>``, you have two options. For each item in ``items()``, Django first tries calling the ``item_link()`` method on the :class:`~django.contrib.syndication.views.Feed` class. In a similar way to the title and description, it is passed it a single parameter, ``item``. If that method doesn't exist, Django tries executing a ``get_absolute_url()`` method on that object. Both ``get_absolute_url()`` and ``item_link()`` should return the item's URL as a normal Python string. As with ``get_absolute_url()``, the result of ``item_link()`` will be included directly in the URL, so you are responsible for doing all necessary URL quoting and conversion to ASCII inside the method itself."
msgstr ""

#: ../../ref/contrib/syndication.txt:156
# d2bc22b3569e47b1b46bc912cc153d95
msgid "A complex example"
msgstr ""

#: ../../ref/contrib/syndication.txt:158
# 93a52343c912414b8b2203581ad71bc2
msgid "The framework also supports more complex feeds, via arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:160
# 11a5552a74324be7b903959028c4d605
msgid "For example, `chicagocrime.org`_ offers an RSS feed of recent crimes for every police beat in Chicago. It'd be silly to create a separate :class:`~django.contrib.syndication.views.Feed` class for each police beat; that would violate the :ref:`DRY principle <dry>` and would couple data to programming logic. Instead, the syndication framework lets you access the arguments passed from your :doc:`URLconf </topics/http/urls>` so feeds can output items based on information in the feed's URL."
msgstr ""

#: ../../ref/contrib/syndication.txt:168
# dc4d50c8f1b84d9aa48d0a693a6668eb
msgid "On chicagocrime.org, the police-beat feeds are accessible via URLs like this:"
msgstr ""

#: ../../ref/contrib/syndication.txt:170
# e7cda7539c1c4c5ab98bf33b1e20c838
msgid ":file:`/beats/613/rss/` -- Returns recent crimes for beat 613."
msgstr ""

#: ../../ref/contrib/syndication.txt:171
# 56fbe9c3313949e8b5db2bfcf9d29615
msgid ":file:`/beats/1424/rss/` -- Returns recent crimes for beat 1424."
msgstr ""

#: ../../ref/contrib/syndication.txt:173
# 09a85f2e8e1d45008db3e27d9f62e2fb
msgid "These can be matched with a :doc:`URLconf </topics/http/urls>` line such as::"
msgstr ""

#: ../../ref/contrib/syndication.txt:177
# 341b387c528e4985a3b6389c75f51148
msgid "Like a view, the arguments in the URL are passed to the ``get_object()`` method along with the request object."
msgstr ""

#: ../../ref/contrib/syndication.txt:180
# f4376708f92e448782cf6a824aa4a00c
msgid "Here's the code for these beat-specific feeds::"
msgstr ""

#: ../../ref/contrib/syndication.txt:203
# 09b6e5fb45b941adbc339db97f1f68bf
msgid "To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django uses the ``title()``, ``link()`` and ``description()`` methods. In the previous example, they were simple string class attributes, but this example illustrates that they can be either strings *or* methods. For each of ``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""

#: ../../ref/contrib/syndication.txt:210
# 3639f7e5cf984a51b1931c0c943d448d
msgid "First, it tries to call a method, passing the ``obj`` argument, where ``obj`` is the object returned by ``get_object()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:213
# 16a1a89967524a2ea42c6396cc732b2e
msgid "Failing that, it tries to call a method with no arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:215
# aa21705ac50d4f049650e0bfc6b1f1bc
msgid "Failing that, it uses the class attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:217
# 8db7397e12c74eb68e22ef2914946e28
msgid "Also note that ``items()`` also follows the same algorithm -- first, it tries ``items(obj)``, then ``items()``, then finally an ``items`` class attribute (which should be a list)."
msgstr ""

#: ../../ref/contrib/syndication.txt:221
# ecfc7c0caecb4b2a8f7e04d6d960ece5
msgid "We are using a template for the item descriptions. It can be very simple:"
msgstr ""

#: ../../ref/contrib/syndication.txt:227
# 9a9a64e59805427b99c5b9b74349dd8c
msgid "However, you are free to add formatting as desired."
msgstr ""

#: ../../ref/contrib/syndication.txt:229
# 4577076d83be4cb4a94a0a30649b0a0f
msgid "The ``ExampleFeed`` class below gives full documentation on methods and attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""

#: ../../ref/contrib/syndication.txt:233
# a43f947f4ea84569939ada59df640b88
msgid "Specifying the type of feed"
msgstr ""

#: ../../ref/contrib/syndication.txt:235
# 72255f5513fe45d7bf0737a52a6c2166
msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr ""

#: ../../ref/contrib/syndication.txt:237
# 947cf1f4c6d947abb6dc288a575b88c0
msgid "To change that, add a ``feed_type`` attribute to your :class:`~django.contrib.syndication.views.Feed` class, like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:245
# e27a2032e9b146578259c10c6f6639ea
msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr ""

#: ../../ref/contrib/syndication.txt:247
# dce94e9eb3274b4db8c24883143a077c
msgid "Currently available feed types are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:249
# aa04f657b40e47b4ba326513032b6215
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:250
# f269078348dc413483c60fbac35c5be6
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:251
# 8dcc546928cb41a6b9c5ccb404abc33d
msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:254
# 9f8e84da811a40b8a0ed60c540855b90
msgid "Enclosures"
msgstr ""

#: ../../ref/contrib/syndication.txt:256
# 5083e1bdba7b4c37bffe7574943874aa
msgid "To specify enclosures, such as those used in creating podcast feeds, use the ``item_enclosure_url``, ``item_enclosure_length`` and ``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below for usage examples."
msgstr ""

#: ../../ref/contrib/syndication.txt:262
# 3a6971d40e8548729fd2b0f3e9eef36b
msgid "Language"
msgstr ""

#: ../../ref/contrib/syndication.txt:264
# bae9d287419b4b5d8e5c867d143c7571
msgid "Feeds created by the syndication framework automatically include the appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). This comes directly from your :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:269
# 3e6655b588504aab9a375db7b9ded324
msgid "URLs"
msgstr ""

#: ../../ref/contrib/syndication.txt:271
# e469a777af5c42f89bc5e71887e0c9e0
msgid "The ``link`` method/attribute can return either an absolute path (e.g. :file:`\"/blog/\"`) or a URL with the fully-qualified domain and protocol (e.g. ``\"http://www.example.com/blog/\"``). If ``link`` doesn't return the domain, the syndication framework will insert the domain of the current site, according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:277
# 408e283717df4c21a18d7b06105257c3
msgid "Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current location. The syndication framework populates this automatically, using the domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:282
# 133e9bc8fbe64053a4eb8b0f69ae9698
msgid "Publishing Atom and RSS feeds in tandem"
msgstr ""

#: ../../ref/contrib/syndication.txt:284
# d39637b96ea64b519a90c272411c5d89
msgid "Some developers like to make available both Atom *and* RSS versions of their feeds. That's easy to do with Django: Just create a subclass of your :class:`~django.contrib.syndication.views.Feed` class and set the ``feed_type`` to something different. Then update your URLconf to add the extra versions."
msgstr ""

#: ../../ref/contrib/syndication.txt:290
# ba3e5141358240019cbafcc0e151841a
msgid "Here's a full example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:309
# 7a81d03c68554edab8ea107317c745d0
msgid "In this example, the RSS feed uses a ``description`` while the Atom feed uses a ``subtitle``. That's because Atom feeds don't provide for a feed-level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""

#: ../../ref/contrib/syndication.txt:313
# 54e159cebeb0486cb7e2f076cda33f57
msgid "If you provide a ``description`` in your :class:`~django.contrib.syndication.views.Feed` class, Django will *not* automatically put that into the ``subtitle`` element, because a subtitle and description are not necessarily the same thing. Instead, you should define a ``subtitle`` attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:319
# 774cb8cabca0444cbe91f43792121d72
msgid "In the above example, we simply set the Atom feed's ``subtitle`` to the RSS feed's ``description``, because it's quite short already."
msgstr ""

#: ../../ref/contrib/syndication.txt:322
# 377ca1621baa453eb9224fc38ce7a15a
msgid "And the accompanying URLconf::"
msgstr ""

#: ../../ref/contrib/syndication.txt:335
# c30c5b8abe634e0c92035774024f6435
msgid "Feed class reference"
msgstr ""

#: ../../ref/contrib/syndication.txt:339
# 1c9e110bd5a44e2db332e1f93c7c81a9
msgid "This example illustrates all possible attributes and methods for a :class:`~django.contrib.syndication.views.Feed` class::"
msgstr ""

#: ../../ref/contrib/syndication.txt:785
# a39ba39cc8594bdaa87388ed3ed8dd18
msgid "The low-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:787
# 7518839a26e24c0cb02f9bb45c6c788b
msgid "Behind the scenes, the high-level RSS framework uses a lower-level framework for generating feeds' XML. This framework lives in a single module: `django/utils/feedgenerator.py`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:791
# 58f9286ece4646f18cf826c8e5036eb2
msgid "You use this framework on your own, for lower-level feed generation. You can also create custom feed generator subclasses for use with the ``feed_type`` ``Feed`` option."
msgstr ""

#: ../../ref/contrib/syndication.txt:798
# bb7054a1569a4a1890a30ad2f79232c1
msgid "``SyndicationFeed`` classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:800
# 036a2fb80ad44798a74e4ce97f160d65
msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ""

#: ../../ref/contrib/syndication.txt:802
# 54a858cb9f1a4661b292227247d298b0
msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:804
# 7e130b1283a543d095c69d3740d88a9e
msgid "and several subclasses:"
msgstr ""

#: ../../ref/contrib/syndication.txt:806
# ceba1812312a4359bc622405e886f983
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:807
# e5aacd1406c2495c99cc4d4d856ee246
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:808
# 311f866b02a34259a4fdce73e0a29405
msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:810
# 4a7e9769a9f342f8946518fa93e8503e
msgid "Each of these three classes knows how to render a certain type of feed as XML. They share this interface:"
msgstr ""

#: ../../ref/contrib/syndication.txt:814
# 482ae292804e4b9d8be2518f0a76bdae
msgid "Initialize the feed with the given dictionary of metadata, which applies to the entire feed. Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:817
#: ../../ref/contrib/syndication.txt:845
# deb92078457b4064bbae6b13f0e8ba42
# 592c7ce6e28d44cdad2759e27ba0b1ab
msgid "``title``"
msgstr ""

#: ../../ref/contrib/syndication.txt:819
#: ../../ref/contrib/syndication.txt:847
# a488ee6fdc174abb89a93833bf1f7b88
# b6ef6288207e4f17b695740d817a3ec9
msgid "``description``"
msgstr ""

#: ../../ref/contrib/syndication.txt:821
# e440c2ba3a314442965d58a8310b03cc
msgid "There's also a bunch of other optional keywords:"
msgstr ""

#: ../../ref/contrib/syndication.txt:823
# 68cb6f3b549f4eafba17cfb858331f91
msgid "``language``"
msgstr ""

#: ../../ref/contrib/syndication.txt:824
#: ../../ref/contrib/syndication.txt:851
# a71db58c86e5490f9efd210d21057135
# b120fda64cd842c1ae2219e0cd372257
msgid "``author_email``"
msgstr ""

#: ../../ref/contrib/syndication.txt:825
#: ../../ref/contrib/syndication.txt:852
# 1e62e03b9ce74a4daf89371c0b0afc1b
# 78afe024701741f18e225607f9cc903f
msgid "``author_name``"
msgstr ""

#: ../../ref/contrib/syndication.txt:826
#: ../../ref/contrib/syndication.txt:853
# d0396074b11f4173ac0b20bced276164
# e79902e7872b49adab52e3980e88e4f3
msgid "``author_link``"
msgstr ""

#: ../../ref/contrib/syndication.txt:827
# f660a13775e640c58d7942062c24d4ca
msgid "``subtitle``"
msgstr ""

#: ../../ref/contrib/syndication.txt:828
#: ../../ref/contrib/syndication.txt:858
# 96074d39da2c4c2d9f97d260f1414f11
# 8d064cf513ae4437b0d497fcf16d724c
msgid "``categories``"
msgstr ""

#: ../../ref/contrib/syndication.txt:829
# 1c73f4ff6d00400fb54de1abbb1b0c82
msgid "``feed_url``"
msgstr ""

#: ../../ref/contrib/syndication.txt:830
# f0e552536a65409e887cdefb0cdb3dbe
msgid "``feed_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:831
# 619f8b9d0a074e66bc951ebf8e914759
msgid "``feed_guid``"
msgstr ""

#: ../../ref/contrib/syndication.txt:832
#: ../../ref/contrib/syndication.txt:860
# 32eb1000ea994f948e5afc22733246f4
# 44ddc57aa37d446b9c6aa6d373e8dabf
msgid "``ttl``"
msgstr ""

#: ../../ref/contrib/syndication.txt:834
# ae9550f810ef4333acec35efc5e8d396
msgid "Any extra keyword arguments you pass to ``__init__`` will be stored in ``self.feed`` for use with `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:837
#: ../../ref/utils.txt:358
# 78359388bc84495e96d3ae22939db210
# ac83073ee05f4ec5bf7a5ae3f708da61
msgid "All parameters should be Unicode objects, except ``categories``, which should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:841
# ea28e260f7324fe894f6b9bd68994b79
msgid "Add an item to the feed with the given parameters."
msgstr ""

#: ../../ref/contrib/syndication.txt:843
# 89d98fd939c6411bb587102c04864892
msgid "Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:849
# cf5178d1aa1b4d98afca69ace46ef95a
msgid "Optional keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:854
# 0947faec3c67476f924ca85b8da538dd
msgid "``pubdate``"
msgstr ""

#: ../../ref/contrib/syndication.txt:855
# 06755ae9ecc646c4b66d54f1b21980ba
msgid "``comments``"
msgstr ""

#: ../../ref/contrib/syndication.txt:856
# 37a2c551221e438e82d5c664c7d6f852
msgid "``unique_id``"
msgstr ""

#: ../../ref/contrib/syndication.txt:857
# 8009e92f0f274eedbc88b8f76212cb72
msgid "``enclosure``"
msgstr ""

#: ../../ref/contrib/syndication.txt:859
# 6375d31ba290412597c4088c40225e74
msgid "``item_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:862
# d57c25634eb74fad8eabf39733402820
msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:864
# e2e0c4f9766e42eb8d93a8509f349193
msgid "All parameters, if given, should be Unicode objects, except:"
msgstr ""

#: ../../ref/contrib/syndication.txt:866
# fe1ef10b4fb942989896419b5285f56d
msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

#: ../../ref/contrib/syndication.txt:867
# 1ae9764dd9de4f61965756ced03b1b02
msgid "``enclosure`` should be an instance of :class:`django.utils.feedgenerator.Enclosure`."
msgstr ""

#: ../../ref/contrib/syndication.txt:869
# bb026c1a773e4ff59aca218b62e99a8f
msgid "``categories`` should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:872
# 02ef1a824a874f74a2628c78e937877f
msgid "Outputs the feed in the given encoding to outfile, which is a file-like object."
msgstr ""

#: ../../ref/contrib/syndication.txt:875
# 32e4b881b2a34a97ae3011b73aa3e394
msgid "Returns the feed as a string in the given encoding."
msgstr ""

#: ../../ref/contrib/syndication.txt:877
# 459ebb4b84c94a328d98fde26d0e73bc
msgid "For example, to create an Atom 1.0 feed and print it to standard output::"
msgstr ""

#: ../../ref/contrib/syndication.txt:903
# fa07fae58038493cb202db1ad0d2f00a
msgid "Custom feed generators"
msgstr ""

#: ../../ref/contrib/syndication.txt:905
# 0d46915e33e149999ba9667e7a01fd8a
msgid "If you need to produce a custom feed format, you've got a couple of options."
msgstr ""

#: ../../ref/contrib/syndication.txt:907
# e4ff199bbdcd4ccabf897293cd2eead8
msgid "If the feed format is totally custom, you'll want to subclass ``SyndicationFeed`` and completely replace the ``write()`` and ``writeString()`` methods."
msgstr ""

#: ../../ref/contrib/syndication.txt:911
# 9a887627c53c437b9d1fd0ef9ed439f8
msgid "However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, Apple's `iTunes podcast format`_, etc.), you've got a better choice. These types of feeds typically add extra elements and/or attributes to the underlying format, and there are a set of methods that ``SyndicationFeed`` calls to get these extra attributes. Thus, you can subclass the appropriate feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these callbacks. They are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:922
# ed4cfad347df431b9ea58137176267a9
msgid "Return a ``dict`` of attributes to add to the root feed element (``feed``/``channel``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:926
# b511ff75a03341b5b8a5bffa1731661b
msgid "Callback to add elements inside the root feed element (``feed``/``channel``). ``handler`` is an :class:`~xml.sax.saxutils.XMLGenerator` from Python's built-in SAX library; you'll call methods on it to add to the XML document in process."
msgstr ""

#: ../../ref/contrib/syndication.txt:932
# 930ebf3f238c4779a8e5a4c234e4b4b2
msgid "Return a ``dict`` of attributes to add to each item (``item``/``entry``) element. The argument, ``item``, is a dictionary of all the data passed to ``SyndicationFeed.add_item()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:937
# 74f07276084e4b98adc88f4c54fcedfd
msgid "Callback to add elements to each item (``item``/``entry``) element. ``handler`` and ``item`` are as above."
msgstr ""

#: ../../ref/contrib/syndication.txt:942
# 1afbeec70a364318b4bcd949fb99cc84
msgid "If you override any of these methods, be sure to call the superclass methods since they add the required elements for each feed format."
msgstr ""

#: ../../ref/contrib/syndication.txt:945
# 2ccf4491263748098eb31753d170d37e
msgid "For example, you might start implementing an iTunes RSS feed generator like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:957
# b561e55d18ee418d85a93893271a3634
msgid "Obviously there's a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea."
msgstr ""

#: ../../ref/contrib/webdesign.txt:3
#: ../../ref/templates/builtins.txt:2343
# 132469e6077f4103a763462efdfc5666
# e777aa3e179b46a599e2e804f133c41c
msgid "django.contrib.webdesign"
msgstr ""

#: ../../ref/contrib/webdesign.txt:9
# 1084732c04bc4c30ac0bf1651a38afc5
msgid "The ``django.contrib.webdesign`` package, part of the :doc:`\"django.contrib\" add-ons </ref/contrib/index>`, provides various Django helpers that are particularly useful to Web *designers* (as opposed to developers)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:14
# ce3728e9f57e4ac6bf70ad9ac2663b05
msgid "At present, the package contains only a single template tag. If you have ideas for Web-designer-friendly functionality in Django, please :doc:`suggest them </internals/contributing/index>`."
msgstr ""

#: ../../ref/contrib/webdesign.txt:21
# 6c7a4539769b442881318660ee35c076
msgid "To use these template tags, add ``'django.contrib.webdesign'`` to your :setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load webdesign %}`` in a template to give your template access to the tags."
msgstr ""

#: ../../ref/contrib/webdesign.txt:27
# 9207944126a443ceb40c5f663a514c6e
msgid "lorem"
msgstr ""

#: ../../ref/contrib/webdesign.txt:29
# fb4b87bae5a54f93af8e9b62e4e7debf
msgid "Displays random \"lorem ipsum\" Latin text. This is useful for providing sample data in templates."
msgstr ""

#: ../../ref/contrib/webdesign.txt:36
# b5541f7dfa7e40b48ae16e5d4af9e5e1
msgid "The ``{% lorem %}`` tag can be used with zero, one, two or three arguments. The arguments are:"
msgstr ""

#: ../../ref/contrib/webdesign.txt:42
# 991353b3b87d481ca81e28b9cd86d4aa
msgid "``count``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:42
# 1db0b0caf7f84fae8921324b948416b8
msgid "A number (or variable) containing the number of paragraphs or words to generate (default is 1)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:44
# 6480987f8f1342bc8ea38da31bfc26f6
msgid "``method``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:44
# a5df25d5e58d4eb29d658b74b7bbf264
msgid "Either ``w`` for words, ``p`` for HTML paragraphs or ``b`` for plain-text paragraph blocks (default is ``b``)."
msgstr ""

#: ../../ref/contrib/webdesign.txt:46
# c66d8dd4650948d49829fb6efd05f320
msgid "``random``"
msgstr ""

#: ../../ref/contrib/webdesign.txt:46
# 613fe80f8e194a4293383ed45dc908c9
msgid "The word ``random``, which if given, does not use the common paragraph (\"Lorem ipsum dolor sit amet...\") when generating text."
msgstr ""

#: ../../ref/contrib/webdesign.txt:53
# 91756b4ab01a4ccf9fe889446d21b96c
msgid "``{% lorem %}`` will output the common \"lorem ipsum\" paragraph."
msgstr ""

#: ../../ref/contrib/webdesign.txt:54
# 59baa3984c974eaaba4489080082b55e
msgid "``{% lorem 3 p %}`` will output the common \"lorem ipsum\" paragraph and two random paragraphs each wrapped in HTML ``<p>`` tags."
msgstr ""

#: ../../ref/contrib/webdesign.txt:56
# 35d0156698864e0384e349efc1f38e38
msgid "``{% lorem 2 w random %}`` will output two random Latin words."
msgstr ""

#: ../../ref/databases.txt:3
# b87c3fc4e8bb41caa05e0378b9ffb350
msgid "Databases"
msgstr ""

#: ../../ref/databases.txt:5
# 6cc5540f8f644db2b75b2d02160cffd5
msgid "Django attempts to support as many features as possible on all database backends. However, not all database backends are alike, and we've had to make design decisions on which features to support and which assumptions we can make safely."
msgstr ""

#: ../../ref/databases.txt:10
# 66b1eeed3b8e44ff82252a71745fac1a
msgid "This file describes some of the features that might be relevant to Django usage. Of course, it is not intended as a replacement for server-specific documentation or reference manuals."
msgstr ""

#: ../../ref/databases.txt:17
# d50544c6b446452293c8e80d15879a78
msgid "PostgreSQL notes"
msgstr ""

#: ../../ref/databases.txt:21
# 5f1517943d2942e1a7ab098808c78003
msgid "Django supports PostgreSQL 8.2 and higher."
msgstr ""

#: ../../ref/databases.txt:24
# 517719f4b56747cd887d1dab0bfa472e
msgid "PostgreSQL 8.2 to 8.2.4"
msgstr ""

#: ../../ref/databases.txt:26
# d475f270f2124a08a9d7bb6a65e1edec
msgid "The implementation of the population statistics aggregates ``STDDEV_POP`` and ``VAR_POP`` that shipped with PostgreSQL 8.2 to 8.2.4 are `known to be faulty`_. Users of these releases of PostgreSQL are advised to upgrade to `Release 8.2.5`_ or later. Django will raise a ``NotImplementedError`` if you attempt to use the ``StdDev(sample=False)`` or ``Variance(sample=False)`` aggregate with a database backend that falls within the affected release range."
msgstr ""

#: ../../ref/databases.txt:37
# 8a1c63175aa94199b7d2bdc128221013
msgid "PostgreSQL connection settings"
msgstr ""

#: ../../ref/databases.txt:39
# 18238ed055ea489bb101388124f0057e
msgid "By default (empty :setting:`HOST`), the connection to the database is done through UNIX domain sockets ('local' lines in pg_hba.conf). If you want to connect through TCP sockets, set :setting:`HOST` to 'localhost' or '127.0.0.1' ('host' lines in pg_hba.conf). On Windows, you should always define :setting:`HOST`, as UNIX domain sockets are not available."
msgstr ""

#: ../../ref/databases.txt:46
# ab5f6409e1aa45ce8d8a2c53a820d518
msgid "Optimizing PostgreSQL's configuration"
msgstr ""

#: ../../ref/databases.txt:48
# 33f67f4558f4436994e5954f46bd433d
msgid "Django needs the following parameters for its database connections:"
msgstr ""

#: ../../ref/databases.txt:50
# 84bf62ed03d74cfdafde3aaadae8d0ce
msgid "``client_encoding``: ``'UTF8'``,"
msgstr ""

#: ../../ref/databases.txt:51
# 66f196d0d0dd4dbeafed4866e0ff169a
msgid "``default_transaction_isolation``: ``'read committed'``,"
msgstr ""

#: ../../ref/databases.txt:52
# 3ca96ef14b1d4f3a82861247626d05aa
msgid "``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of :setting:`TIME_ZONE` otherwise."
msgstr ""

#: ../../ref/databases.txt:55
# 5c98eb58518140b89568c5f953faf842
msgid "If these parameters already have the correct values, Django won't set them for every new connection, which improves performance slightly. You can configure them directly in :file:`postgresql.conf` or more conveniently per database user with `ALTER ROLE`_."
msgstr ""

#: ../../ref/databases.txt:60
# fa895677f2604169b5bfdc93df2b8665
msgid "Django will work just fine without this optimization, but each new connection will do some additional queries to set these parameters."
msgstr ""

#: ../../ref/databases.txt:66
# 7079f0239de74d509628671d29897d68
msgid "Transaction handling"
msgstr ""

#: ../../ref/databases.txt:68
# 2c0b3370d3c34dc6a1865146c8ee0780
msgid ":doc:`By default </topics/db/transactions>`, Django runs with an open transaction which it commits automatically when any built-in, data-altering model function is called. The PostgreSQL backends normally operate the same as any other Django backend in this respect."
msgstr ""

#: ../../ref/databases.txt:76
# 21af765dcfd64ce5bf950c28354e90bb
msgid "Autocommit mode"
msgstr ""

#: ../../ref/databases.txt:78
# cea63b5f5f78456fb7fd7187a06c870c
msgid "If your application is particularly read-heavy and doesn't make many database writes, the overhead of a constantly open transaction can sometimes be noticeable. For those situations, you can configure Django to use *\"autocommit\"* behavior for the connection, meaning that each database operation will normally be in its own transaction, rather than having the transaction extend over multiple operations. In this case, you can still manually start a transaction if you're doing something that requires consistency across multiple database operations. The autocommit behavior is enabled by setting the ``autocommit`` key in the :setting:`OPTIONS` part of your database configuration in :setting:`DATABASES`::"
msgstr ""

#: ../../ref/databases.txt:94
# 1eed7953d3ea47c5afbdb4638a8eda9e
msgid "In this configuration, Django still ensures that :ref:`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-update>` queries run inside a single transaction, so that either all the affected objects are changed or none of them are."
msgstr ""

#: ../../ref/databases.txt:101
# 449f08bc6f1c47baab67e153286040e2
msgid "This functionality is not the same as the :ref:`autocommit <topics-db-transactions-autocommit>` decorator. That decorator is a Django-level implementation that commits automatically after data changing operations. The feature enabled using the :setting:`OPTIONS` option provides autocommit behavior at the database adapter level. It commits after *every* operation."
msgstr ""

#: ../../ref/databases.txt:108
# a0af05a916a746acae5e70ca3b7a1646
msgid "If you are using this feature and performing an operation akin to delete or updating that requires multiple operations, you are strongly recommended to wrap you operations in manual transaction handling to ensure data consistency. You should also audit your existing code for any instances of this behavior before enabling this feature. It's faster, but it provides less automatic protection for multi-call operations."
msgstr ""

#: ../../ref/databases.txt:116
# 0a7dea580ddf4fdf9c783e86732efa89
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr ""

#: ../../ref/databases.txt:118
# e6d8347cdd194408ac6ff4bb3467826e
msgid "When specifying ``db_index=True`` on your model fields, Django typically outputs a single ``CREATE INDEX`` statement.  However, if the database type for the field is either ``varchar`` or ``text`` (e.g., used by ``CharField``, ``FileField``, and ``TextField``), then Django will create an additional index that uses an appropriate `PostgreSQL operator class`_ for the column.  The extra index is necessary to correctly perform lookups that use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and ``startswith`` lookup types."
msgstr ""

#: ../../ref/databases.txt:132
# 5ceb254dd0c9432586c8faba54aa2972
msgid "MySQL notes"
msgstr ""

#: ../../ref/databases.txt:135
# 7820f69f32904d8487d23863bcb7108d
msgid "Version support"
msgstr ""

#: ../../ref/databases.txt:137
# 66ba0b6cbd0d45d898b32ce0da1f0717
msgid "Django supports MySQL 5.0.3 and higher."
msgstr ""

#: ../../ref/databases.txt:139
# e500cd17619f4587a771e432ab15b9ad
msgid "`MySQL 5.0`_ adds the ``information_schema`` database, which contains detailed data on all database schema. Django's ``inspectdb`` feature uses it."
msgstr ""

#: ../../ref/databases.txt:145
# 70ce2df68e3d42e181b9f9c1efacde7d
msgid "Django expects the database to support Unicode (UTF-8 encoding) and delegates to it the task of enforcing transactions and referential integrity. It is important to be aware of the fact that the two latter ones aren't actually enforced by MySQL when using the MyISAM storage engine, see the next section."
msgstr ""

#: ../../ref/databases.txt:156
# 662ddf917bfb42f68a177e3d6dbaa4e7
msgid "Storage engines"
msgstr ""

#: ../../ref/databases.txt:158
# c6ba104a1d9c43eb8036db3c6f373c81
msgid "MySQL has several `storage engines`_ (previously called table types). You can change the default storage engine in the server configuration."
msgstr ""

#: ../../ref/databases.txt:161
# 805876e492be47b595740ae031e4df53
msgid "Until MySQL 5.5.4, the default engine was MyISAM_ [#]_. The main drawbacks of MyISAM are that it doesn't support transactions or enforce foreign-key constraints. On the plus side, it's currently the only engine that supports full-text indexing and searching."
msgstr ""

#: ../../ref/databases.txt:166
# 4d904737bc3a4c94bf1f9988f6904963
msgid "Since MySQL 5.5.5, the default storage engine is InnoDB_. This engine is fully transactional and supports foreign key references. It's probably the best choice at this point."
msgstr ""

#: ../../ref/databases.txt:170
# 9bd7bef99e8a4d34903dde7e7a51a8b9
msgid "If you upgrade an existing project to MySQL 5.5.5 and subsequently add some tables, ensure that your tables are using the same storage engine (i.e. MyISAM vs. InnoDB). Specifically, if tables that have a ``ForeignKey`` between them use different storage engines, you may see an error like the following when running ``syncdb``::"
msgstr ""

#: ../../ref/databases.txt:182
# 4a9bc9d9099943b69f873af90dfd11e7
msgid "In previous versions of Django, fixtures with forward references (i.e. relations to rows that have not yet been inserted into the database) would fail to load when using the InnoDB storage engine. This was due to the fact that InnoDB deviates from the SQL standard by checking foreign key constraints immediately instead of deferring the check until the transaction is committed. This problem has been resolved in Django 1.4. Fixture data is now loaded with foreign key checks turned off; foreign key checks are then re-enabled when the data has finished loading, at which point the entire table is checked for invalid foreign key references and an `IntegrityError` is raised if any are found."
msgstr ""

#: ../../ref/databases.txt:196
# 852bbf30a75d476d850b5bfb09e10efa
msgid "Unless this was changed by the packager of your MySQL package. We've had reports that the Windows Community Server installer sets up InnoDB as the default storage engine, for example."
msgstr ""

#: ../../ref/databases.txt:201
# 1f52a091ef5e45dd95670745a163d00d
msgid "MySQLdb"
msgstr ""

#: ../../ref/databases.txt:203
# 6d59b633169f44979720620521608825
msgid "`MySQLdb`_ is the Python interface to MySQL. Version 1.2.1p2 or later is required for full MySQL support in Django."
msgstr ""

#: ../../ref/databases.txt:207
# 8085f9163f91416781a6d7657b04f9e4
msgid "If you see ``ImportError: cannot import name ImmutableSet`` when trying to use Django, your MySQLdb installation may contain an outdated ``sets.py`` file that conflicts with the built-in module of the same name from Python 2.4 and later. To fix this, verify that you have installed MySQLdb version 1.2.1p2 or newer, then delete the ``sets.py`` file in the MySQLdb directory that was left by an earlier version."
msgstr ""

#: ../../ref/databases.txt:217
# 4a9e8f36f90f4aee911f27715b4accc7
msgid "Creating your database"
msgstr ""

#: ../../ref/databases.txt:219
# 421086dce23b463eb4983910e8e4d08d
msgid "You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

#: ../../ref/databases.txt:223
# 7ce451efa6744273921bdefa435dd6a3
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

#: ../../ref/databases.txt:230
# 11593a1b78b54c4888ff6534f817ad07
msgid "Collation settings"
msgstr ""

#: ../../ref/databases.txt:232
# 495c7062b3b44b44b768ddf3db1293f2
msgid "The collation setting for a column controls the order in which data is sorted as well as what strings compare as equal. It can be set on a database-wide level and also per-table and per-column. This is `documented thoroughly`_ in the MySQL documentation. In all cases, you set the collation by directly manipulating the database tables; Django doesn't provide a way to set this on the model definition."
msgstr ""

#: ../../ref/databases.txt:241
# d17b34003dba4d1eb7f32e34c6b6a03d
msgid "By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci_swedish`` collation. This results in all string equality comparisons being done in a *case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` into the same column, since they compare as equal (and, hence, non-unique) with the default collation."
msgstr ""

#: ../../ref/databases.txt:249
# 44c205e1c95b4c85b8b0e4a34d7cf379
msgid "In many cases, this default will not be a problem. However, if you really want case-sensitive comparisons on a particular column or table, you would change the column or table to use the ``utf8_bin`` collation. The main thing to be aware of in this case is that if you are using MySQLdb 1.2.2, the database backend in Django will then return bytestrings (instead of unicode strings) for any character fields it receive from the database. This is a strong variation from Django's normal practice of *always* returning unicode strings. It is up to you, the developer, to handle the fact that you will receive bytestrings if you configure your table(s) to use ``utf8_bin`` collation. Django itself should mostly work smoothly with such columns (except for the ``contrib.sessions`` ``Session`` and ``contrib.admin`` ``LogEntry`` tables described below), but your code must be prepared to call ``django.utils.encoding.smart_text()`` at times if it really wants to work with consistent data -- Django will not do this for you (the database backend layer and the model population layer are separated internally so the database layer doesn't know it needs to make this conversion in this one particular case)."
msgstr ""

#: ../../ref/databases.txt:266
# 753b4e45e943430691019f5d30a6f889
msgid "If you're using MySQLdb 1.2.1p2, Django's standard :class:`~django.db.models.CharField` class will return unicode strings even with ``utf8_bin`` collation. However, :class:`~django.db.models.TextField` fields will be returned as an ``array.array`` instance (from Python's standard ``array`` module). There isn't a lot Django can do about that, since, again, the information needed to make the necessary conversions isn't available when the data is read in from the database. This problem was `fixed in MySQLdb 1.2.2`_, so if you want to use :class:`~django.db.models.TextField` with ``utf8_bin`` collation, upgrading to version 1.2.2 and then dealing with the bytestrings (which shouldn't be too difficult) as described above is the recommended solution."
msgstr ""

#: ../../ref/databases.txt:278
# a5ae4cd0510c470bbdc3cdba2128e875
msgid "Should you decide to use ``utf8_bin`` collation for some of your tables with MySQLdb 1.2.1p2 or 1.2.2, you should still use ``utf8_collation_ci_swedish`` (the default) collation for the :class:`django.contrib.sessions.models.Session` table (usually called ``django_session``) and the :class:`django.contrib.admin.models.LogEntry` table (usually called ``django_admin_log``). Those are the two standard tables that use :class:`~django.db.models.TextField` internally."
msgstr ""

#: ../../ref/databases.txt:289
#: ../../ref/databases.txt:616
# 62599b6226ff4c7b8c9ee807651182e9
# 40caed141bdc4bdf94207de3804af108
msgid "Connecting to the database"
msgstr ""

#: ../../ref/databases.txt:291
# 51556cd75dbf46afb8376d6e7c7ab9b9
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

#: ../../ref/databases.txt:293
# 36fc6f93f588433aa488ebe1d66b52c6
msgid "Connection settings are used in this order:"
msgstr ""

#: ../../ref/databases.txt:295
# 7b1d8b0c91754917acf64f48ec7ceee2
msgid ":setting:`OPTIONS`."
msgstr ""

#: ../../ref/databases.txt:296
# 8172f318c7ff4ed98b0fb107b25b5ee5
msgid ":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :setting:`PORT`"
msgstr ""

#: ../../ref/databases.txt:298
# 584ab77a2f3448d0aaefc1acd4c4b77a
msgid "MySQL option files."
msgstr ""

#: ../../ref/databases.txt:300
# 15714009f9fd4ca1898a1a363b6bd720
msgid "In other words, if you set the name of the database in :setting:`OPTIONS`, this will take precedence over :setting:`NAME`, which would override anything in a `MySQL option file`_."
msgstr ""

#: ../../ref/databases.txt:304
# fefc72822828453488e908eceab431d6
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

#: ../../ref/databases.txt:324
# 6c1ef19d0f334bf7811f56464cdc7fcd
msgid "Several other MySQLdb connection options may be useful, such as ``ssl``, ``use_unicode``, ``init_command``, and ``sql_mode``. Consult the `MySQLdb documentation`_ for more details."
msgstr ""

#: ../../ref/databases.txt:332
# 00a31c67e57c492e9f72db35a051e924
msgid "Creating your tables"
msgstr ""

#: ../../ref/databases.txt:334
# 102540741cb44ed988835b75013c3e49
msgid "When Django generates the schema, it doesn't specify a storage engine, so tables will be created with whatever default storage engine your database server is configured for. The easiest solution is to set your database server's default storage engine to the desired engine."
msgstr ""

#: ../../ref/databases.txt:339
# 684629b910c7401ebb0c4250b81f8e5c
msgid "If you're using a hosting service and can't change your server's default storage engine, you have a couple of options."
msgstr ""

#: ../../ref/databases.txt:342
# a98c5555233a4e029859aa32ba057a95
msgid "After the tables are created, execute an ``ALTER TABLE`` statement to convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

#: ../../ref/databases.txt:347
# 71169ab3c2054baca34f4f885a79f512
msgid "This can be tedious if you have a lot of tables."
msgstr ""

#: ../../ref/databases.txt:349
# 31015f33ac0f4e59848dad1045de4fae
msgid "Another option is to use the ``init_command`` option for MySQLdb prior to creating your tables::"
msgstr ""

#: ../../ref/databases.txt:356
# 1ae951286fd945faa4ed477575c0f074
msgid "This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection."
msgstr ""

#: ../../ref/databases.txt:361
# d12455f136e54ae19ca1debaf7dfd700
msgid "Another method for changing the storage engine is described in AlterModelOnSyncDB_."
msgstr ""

#: ../../ref/databases.txt:367
#: ../../ref/models/options.txt:45
# 679abeda415f445882ac98fc6afd2609
# 98ff533063e841718a78ef168bd60962
msgid "Table names"
msgstr ""

#: ../../ref/databases.txt:369
# 80f14eaf02c14bb5b4fdf0553a3582b4
msgid "There are `known issues`_ in even the latest versions of MySQL that can cause the case of a table name to be altered when certain SQL statements are executed under certain conditions. It is recommended that you use lowercase table names, if possible, to avoid any problems that might arise from this behavior. Django uses lowercase table names when it auto-generates table names from models, so this is mainly a consideration if you are overriding the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""

#: ../../ref/databases.txt:380
# 60ea38a757404c3cab64e5ec071d34aa
msgid "Savepoints"
msgstr ""

#: ../../ref/databases.txt:382
# d4a6fa20c1b34f348e7895841e851c02
msgid "Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine <mysql-storage-engines>`) support database :ref:`savepoints <topics-db-transactions-savepoints>`, but this feature wasn't available in Django until version 1.4 when such supports was added."
msgstr ""

#: ../../ref/databases.txt:387
# a2004bb4575d44098d3aae9b73a1609c
msgid "If you use the MyISAM storage engine please be aware of the fact that you will receive database-generated errors if you try to use the :ref:`savepoint-related methods of the transactions API <topics-db-transactions-savepoints>`. The reason for this is that detecting the storage engine of a MySQL database/table is an expensive operation so it was decided it isn't worth to dynamically convert these methods in no-op's based in the results of such detection."
msgstr ""

#: ../../ref/databases.txt:395
# 501c1d8d4fa14cfcb096ea509c4c75db
msgid "Notes on specific fields"
msgstr ""

#: ../../ref/databases.txt:398
# dd7e29baf7a345e1b0401262fb6945af
msgid "Character fields"
msgstr ""

#: ../../ref/databases.txt:400
# 7fd35e54893240c1beaaf0ebd11ebb6e
msgid "Any fields that are stored with ``VARCHAR`` column types have their ``max_length`` restricted to 255 characters if you are using ``unique=True`` for the field. This affects :class:`~django.db.models.CharField`, :class:`~django.db.models.SlugField` and :class:`~django.db.models.CommaSeparatedIntegerField`."
msgstr ""

#: ../../ref/databases.txt:407
# 9340aecb74d14716818485ea0df735f1
msgid "DateTime fields"
msgstr ""

#: ../../ref/databases.txt:409
# 2af87e8c17f748f981ff5bc926188d6f
msgid "MySQL does not have a timezone-aware column type. If an attempt is made to store a timezone-aware ``time`` or ``datetime`` to a :class:`~django.db.models.TimeField` or :class:`~django.db.models.DateTimeField` respectively, a ``ValueError`` is raised rather than truncating data."
msgstr ""

#: ../../ref/databases.txt:414
# 7ac914d36e56424da8cf6b2f39bbef1b
msgid "MySQL does not store fractions of seconds. Fractions of seconds are truncated to zero when the time is stored."
msgstr ""

#: ../../ref/databases.txt:418
# 13a391a60a984f48a7055c95413059a1
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

#: ../../ref/databases.txt:420
# a0f4a988a69741a0b8da02bcf6b456b8
msgid "MySQL does not support the ``NOWAIT`` option to the ``SELECT ... FOR UPDATE`` statement. If ``select_for_update()`` is used with ``nowait=True`` then a ``DatabaseError`` will be raised."
msgstr ""

#: ../../ref/databases.txt:427
# dbd43b8ee50c48cdb2ec3c751c653208
msgid "SQLite notes"
msgstr ""

#: ../../ref/databases.txt:429
# 73fa453be5494cf18a2e891da57be862
msgid "SQLite_ provides an excellent development alternative for applications that are predominantly read-only or require a smaller installation footprint. As with all database servers, though, there are some differences that are specific to SQLite that you should be aware of."
msgstr ""

#: ../../ref/databases.txt:439
# ebee1644785a4c4bbe615489c228c839
msgid "Substring matching and case sensitivity"
msgstr ""

#: ../../ref/databases.txt:441
# daafceecede44d8d88aad8fd4919ce41
msgid "For all SQLite versions, there is some slightly counter-intuitive behavior when attempting to match some types of strings.  These are triggered when using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The behavior splits into two cases:"
msgstr ""

#: ../../ref/databases.txt:446
# 456c7cb23e4d479d9a37d2b6c894b3c7
msgid "1. For substring matching, all matches are done case-insensitively. That is a filter such as ``filter(name__contains=\"aa\")`` will match a name of ``\"Aabb\"``."
msgstr ""

#: ../../ref/databases.txt:449
# 89fdfb6e116442aab25a2cee45185cca
msgid "2. For strings containing characters outside the ASCII range, all exact string matches are performed case-sensitively, even when the case-insensitive options are passed into the query. So the :lookup:`iexact` filter will behave exactly the same as the :lookup:`exact` filter in these cases."
msgstr ""

#: ../../ref/databases.txt:454
# 17a3e8dd1d8641a7ace5dec4cd9b7712
msgid "Some possible workarounds for this are `documented at sqlite.org`_, but they aren't utilised by the default SQLite backend in Django, as incorporating them would be fairly difficult to do robustly. Thus, Django exposes the default SQLite behavior and you should be aware of this when doing case-insensitive or substring filtering."
msgstr ""

#: ../../ref/databases.txt:463
# 79eed255f86f4f25a7433b740c5dca1e
msgid "SQLite 3.3.6 or newer strongly recommended"
msgstr ""

#: ../../ref/databases.txt:465
# 15181793629241dd92faa98daa765a21
msgid "Versions of SQLite 3.3.5 and older contains the following bugs:"
msgstr ""

#: ../../ref/databases.txt:467
# ea28387f662b459e90cb2d6b81db9a52
msgid "A bug when `handling`_ ``ORDER BY`` parameters. This can cause problems when you use the ``select`` parameter for the ``extra()`` QuerySet method. The bug can be identified by the error message ``OperationalError: ORDER BY terms must not be non-integer constants``."
msgstr ""

#: ../../ref/databases.txt:472
# 678513ecd6a841919346ae77c444d6f0
msgid "A bug when handling `aggregation`_ together with DateFields and DecimalFields."
msgstr ""

#: ../../ref/databases.txt:478
# 7ff2c93795644fddb62f76e850291681
msgid "SQLite 3.3.6 was released in April 2006, so most current binary distributions for different platforms include newer version of SQLite usable from Python through either the ``pysqlite2`` or the ``sqlite3`` modules."
msgstr ""

#: ../../ref/databases.txt:483
# 691a51c66d4b496b8818819f953e8e66
msgid "Version 3.5.9"
msgstr ""

#: ../../ref/databases.txt:485
# 24acd625af384045a54fc8f082d9d4bd
msgid "The Ubuntu \"Intrepid Ibex\" (8.10) SQLite 3.5.9-3 package contains a bug that causes problems with the evaluation of query expressions. If you are using Ubuntu \"Intrepid Ibex\", you will need to update the package to version 3.5.9-3ubuntu1 or newer (recommended) or find an alternate source for SQLite packages, or install SQLite from source."
msgstr ""

#: ../../ref/databases.txt:491
# bc1a650d17cb475d9ae6b230c87f2b66
msgid "At one time, Debian Lenny shipped with the same malfunctioning SQLite 3.5.9-3 package. However the Debian project has subsequently issued updated versions of the SQLite package that correct these bugs. If you find you are getting unexpected results under Debian, ensure you have updated your SQLite package to 3.5.9-5 or later."
msgstr ""

#: ../../ref/databases.txt:497
# d861f5d014d4491385150328cc90f0c4
msgid "The problem does not appear to exist with other versions of SQLite packaged with other operating systems."
msgstr ""

#: ../../ref/databases.txt:501
# f9930e933f6c4993a78bdb0a535d6838
msgid "Version 3.6.2"
msgstr ""

#: ../../ref/databases.txt:503
# 8aaf0947db134e2eaec5b45387b5e67d
msgid "SQLite version 3.6.2 (released August 30, 2008) introduced a bug into ``SELECT DISTINCT`` handling that is triggered by, amongst other things, Django's ``DateQuerySet`` (returned by the ``dates()`` method on a queryset)."
msgstr ""

#: ../../ref/databases.txt:507
# 64effb6308f144cf8d0af4dc2d78f57c
msgid "You should avoid using this version of SQLite with Django. Either upgrade to 3.6.3 (released September 22, 2008) or later, or downgrade to an earlier version of SQLite."
msgstr ""

#: ../../ref/databases.txt:514
# a149ea2858934f68b2f76d4316e5d7aa
msgid "Using newer versions of the SQLite DB-API 2.0 driver"
msgstr ""

#: ../../ref/databases.txt:516
# afa0221f07734f1b851ad972e6bf2bf3
msgid "For versions of Python 2.5 or newer that include ``sqlite3`` in the standard library Django will now use a ``pysqlite2`` interface in preference to ``sqlite3`` if it finds one is available."
msgstr ""

#: ../../ref/databases.txt:520
# 7078dcfe7e8248dd93f8f633daaccfbd
msgid "This provides the ability to upgrade both the DB-API 2.0 interface or SQLite 3 itself to versions newer than the ones included with your particular Python binary distribution, if needed."
msgstr ""

#: ../../ref/databases.txt:525
# 74ba543b1aab4c7d86307f1555a7765e
msgid "\"Database is locked\" errors"
msgstr ""

#: ../../ref/databases.txt:527
# f008fee7ccc3438db285d556a0862944
msgid "SQLite is meant to be a lightweight database, and thus can't support a high level of concurrency. ``OperationalError: database is locked`` errors indicate that your application is experiencing more concurrency than ``sqlite`` can handle in default configuration. This error means that one thread or process has an exclusive lock on the database connection and another thread timed out waiting for the lock the be released."
msgstr ""

#: ../../ref/databases.txt:534
# f0af580146d94172b67e992494b98fa4
msgid "Python's SQLite wrapper has a default timeout value that determines how long the second thread is allowed to wait on the lock before it times out and raises the ``OperationalError: database is locked`` error."
msgstr ""

#: ../../ref/databases.txt:539
# fd8a2c9038d940d885fa41bfe23d21c9
msgid "If you're getting this error, you can solve it by:"
msgstr ""

#: ../../ref/databases.txt:541
# 526efa8c2de04c108e01645461024775
msgid "Switching to another database backend. At a certain point SQLite becomes too \"lite\" for real-world applications, and these sorts of concurrency errors indicate you've reached that point."
msgstr ""

#: ../../ref/databases.txt:545
# a73fed026da845a9b5816a350eda3478
msgid "Rewriting your code to reduce concurrency and ensure that database transactions are short-lived."
msgstr ""

#: ../../ref/databases.txt:548
# 5db9729a873640428f368d1279e9edd2
msgid "Increase the default timeout value by setting the ``timeout`` database option option::"
msgstr ""

#: ../../ref/databases.txt:557
# 00adecfd45d4473cb8c52b0820e1c07f
msgid "This will simply make SQLite wait a bit longer before throwing \"database is locked\" errors; it won't really do anything to solve them."
msgstr ""

#: ../../ref/databases.txt:561
# 0352fd1649f14269b458b36c42bf0de8
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

#: ../../ref/databases.txt:563
# a88b8aa621cb4d638f72c7c4f6aef88f
msgid "SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it will have no effect."
msgstr ""

#: ../../ref/databases.txt:569
# 0f298c1c8f1d492ca55fba475846d34e
msgid "Parameters not quoted in ``connection.queries``"
msgstr ""

#: ../../ref/databases.txt:571
# 822022f1e0844ca5bb95dfadf5624b43
msgid "``sqlite3`` does not provide a way to retrieve the SQL after quoting and substituting the parameters. Instead, the SQL in ``connection.queries`` is rebuilt with a simple string interpolation. It may be incorrect. Make sure you add quotes where necessary before copying a query into a SQLite shell."
msgstr ""

#: ../../ref/databases.txt:579
# 39d818ccb8a14d219ed47d447e424724
msgid "Oracle notes"
msgstr ""

#: ../../ref/databases.txt:581
# 2bc6df783ac04452a35fbc4e8e506d0a
msgid "Django supports `Oracle Database Server`_ versions 9i and higher. Oracle version 10g or later is required to use Django's ``regex`` and ``iregex`` query operators. You will also need at least version 4.3.1 of the `cx_Oracle`_ Python driver."
msgstr ""

#: ../../ref/databases.txt:586
# f802dd8bae7741ee8dfa7c342fa7d238
msgid "Note that due to a Unicode-corruption bug in ``cx_Oracle`` 5.0, that version of the driver should **not** be used with Django; ``cx_Oracle`` 5.0.1 resolved this issue, so if you'd like to use a more recent ``cx_Oracle``, use version 5.0.1."
msgstr ""

#: ../../ref/databases.txt:591
# 41f3e782ef9c429b9cdbc3e591c12b23
msgid "``cx_Oracle`` 5.0.1 or greater can optionally be compiled with the ``WITH_UNICODE`` environment variable.  This is recommended but not required."
msgstr ""

#: ../../ref/databases.txt:598
# 0b0858cfb3c64f3b9fdff3d61ce4575e
msgid "In order for the ``python manage.py syncdb`` command to work, your Oracle database user must have privileges to run the following commands:"
msgstr ""

#: ../../ref/databases.txt:601
# 4e32e938abc2489d94cf8f9446e3c445
msgid "CREATE TABLE"
msgstr ""

#: ../../ref/databases.txt:602
# 962c8bd7530241ca95ac87862e4e578a
msgid "CREATE SEQUENCE"
msgstr ""

#: ../../ref/databases.txt:603
# 34992e514cd146679698ff31afa68396
msgid "CREATE PROCEDURE"
msgstr ""

#: ../../ref/databases.txt:604
# 582849ad76d14f75ae32668fc3d59508
msgid "CREATE TRIGGER"
msgstr ""

#: ../../ref/databases.txt:606
# fa3b9270d03b4aa496a5ec95284feaab
msgid "To run Django's test suite, the user needs these *additional* privileges:"
msgstr ""

#: ../../ref/databases.txt:608
# 45a009cbaa424843bf17ed646a71a50e
msgid "CREATE USER"
msgstr ""

#: ../../ref/databases.txt:609
# 29f8d7444e3d41648db98edc5b07f92e
msgid "DROP USER"
msgstr ""

#: ../../ref/databases.txt:610
# 80087be8eed8411eb2549a37d7ccc5e8
msgid "CREATE TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:611
# 30f8519d663b4e2d855bfca55375b92b
msgid "DROP TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:612
# 9a92fa07014c4df99c63b1af96164b7b
msgid "CONNECT WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:613
# 9e1120ed4f584efcae07c0018c7ddce2
msgid "RESOURCE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:618
# 152765271dec4ae588cc572a116a055f
msgid "Your Django settings.py file should look something like this for Oracle::"
msgstr ""

#: ../../ref/databases.txt:632
# f0f75005ec22408fa9e363a3df3330da
msgid "If you don't use a ``tnsnames.ora`` file or a similar naming method that recognizes the SID (\"xe\" in this example), then fill in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""

#: ../../ref/databases.txt:647
# 17fe6765d8794e6094154ad7a90d36f6
msgid "You should supply both :setting:`HOST` and :setting:`PORT`, or leave both as empty strings."
msgstr ""

#: ../../ref/databases.txt:651
# 6f3bfb204cbd48a9955139edf1dd5600
msgid "Threaded option"
msgstr ""

#: ../../ref/databases.txt:653
# 8c3f51c1e1a04b1b942642d51aef48ca
msgid "If you plan to run Django in a multithreaded environment (e.g. Apache in Windows using the default MPM module), then you **must** set the ``threaded`` option of your Oracle database configuration to True::"
msgstr ""

#: ../../ref/databases.txt:661
# e61175be1c0c472599e9bbafb54449ec
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

#: ../../ref/databases.txt:664
# 16010ad03b7f40238969fdf2964a9520
msgid "INSERT ... RETURNING INTO"
msgstr ""

#: ../../ref/databases.txt:666
# 0bb055ec769f4818974b0ef7b7443afa
msgid "By default, the Oracle backend uses a ``RETURNING INTO`` clause to efficiently retrieve the value of an ``AutoField`` when inserting new rows.  This behavior may result in a ``DatabaseError`` in certain unusual setups, such as when inserting into a remote table, or into a view with an ``INSTEAD OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the ``use_returning_into`` option of the database configuration to False::"
msgstr ""

#: ../../ref/databases.txt:677
# abbb8dd4a28c4ea1b43551d3b055cf00
msgid "In this case, the Oracle backend will use a separate ``SELECT`` query to retrieve AutoField values."
msgstr ""

#: ../../ref/databases.txt:681
# 85022d7253e24ebb85b1518ca9a0d555
msgid "Naming issues"
msgstr ""

#: ../../ref/databases.txt:683
# bbe71dc078d6458db6e0ba0a3b2db5a4
msgid "Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value."
msgstr ""

#: ../../ref/databases.txt:687
# 6961a9ab9b3844a1a4342110512e1ba5
msgid "When running syncdb, an ``ORA-06552`` error may be encountered if certain Oracle keywords are used as the name of a model field or the value of a ``db_column`` option.  Django quotes all identifiers used in queries to prevent most such problems, but this error can still occur when an Oracle datatype is used as a column name.  In particular, take care to avoid using the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

#: ../../ref/databases.txt:696
# bd4dfa3ea4ee4b6f82d730138e6383e5
msgid "NULL and empty strings"
msgstr ""

#: ../../ref/databases.txt:698
# f6b4317dbf104b23b689c887acfb78a5
msgid "Django generally prefers to use the empty string ('') rather than NULL, but Oracle treats both identically. To get around this, the Oracle backend ignores an explicit ``null`` option on fields that have the empty string as a possible value and generates DDL as if ``null=True``. When fetching from the database, it is assumed that a ``NULL`` value in one of these fields really means the empty string, and the data is silently converted to reflect this assumption."
msgstr ""

#: ../../ref/databases.txt:707
# 02092918faef4c87b3abdff73a31671a
msgid "``TextField`` limitations"
msgstr ""

#: ../../ref/databases.txt:709
# 48658ec3d22248069cdc3be0f18df672
msgid "The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

#: ../../ref/databases.txt:712
# 1b8e69e600414b1b8ac83e5b55a12e91
msgid "LOB columns may not be used as primary keys."
msgstr ""

#: ../../ref/databases.txt:714
# eeca1229129d4ce79bfa387008cc913f
msgid "LOB columns may not be used in indexes."
msgstr ""

#: ../../ref/databases.txt:716
# 2419402c15534c0491e8fedf3a072e3f
msgid "LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that attempting to use the ``QuerySet.distinct`` method on a model that includes ``TextField`` columns will result in an error when run against Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction with ``distinct()`` to prevent ``TextField`` columns from being included in the ``SELECT DISTINCT`` list."
msgstr ""

#: ../../ref/databases.txt:726
# 09907b72acdb4f7cbacf4642cc8cf98f
msgid "Using a 3rd-party database backend"
msgstr ""

#: ../../ref/databases.txt:728
# fafce58efee44a499c5be2add232b68e
msgid "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../ref/databases.txt:731
# fe0be449d91c4df0869f3c2b9104face
msgid "`Sybase SQL Anywhere`_"
msgstr ""

#: ../../ref/databases.txt:732
# 35ef393055144e0381e114b54be3ca49
msgid "`IBM DB2`_"
msgstr ""

#: ../../ref/databases.txt:733
# 5113ffe208194d33b697b0a02c38027e
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

#: ../../ref/databases.txt:734
# 95e731eb505a4476a6e0e0852b173382
msgid "Firebird_"
msgstr ""

#: ../../ref/databases.txt:735
# a979bdc24fff47ac82fd95a7e84a056b
msgid "ODBC_"
msgstr ""

#: ../../ref/databases.txt:736
# c9a9c0a084224936b0f91f5a61ddd89f
msgid "ADSDB_"
msgstr ""

#: ../../ref/databases.txt:738
# 3c969a34b93b4276b8c0bda214f67aa5
msgid "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."
msgstr ""

#: ../../ref/django-admin.txt:3
# 4784997ee0b24c81a82ec8c2c5f39f87
msgid "django-admin.py and manage.py"
msgstr ""

#: ../../ref/django-admin.txt:5
# a98e4f0528e24793a173c3c5a6b8eb86
msgid "``django-admin.py`` is Django's command-line utility for administrative tasks. This document outlines all it can do."
msgstr ""

#: ../../ref/django-admin.txt:8
# 727d23883d704a1fa2519cc3f7cb68d3
msgid "In addition, ``manage.py`` is automatically created in each Django project. ``manage.py`` is a thin wrapper around ``django-admin.py`` that takes care of two things for you before delegating to ``django-admin.py``:"
msgstr ""

#: ../../ref/django-admin.txt:12
# 7b8cf212da0742d68d5602b7cb0fd384
msgid "It puts your project's package on ``sys.path``."
msgstr ""

#: ../../ref/django-admin.txt:14
# 93d6d31dcf914e58afeba0eb4075b87b
msgid "It sets the :envvar:`DJANGO_SETTINGS_MODULE` environment variable so that it points to your project's ``settings.py`` file."
msgstr ""

#: ../../ref/django-admin.txt:17
# 7959ff1256124d31bea68022302775f8
msgid "The ``django-admin.py`` script should be on your system path if you installed Django via its ``setup.py`` utility. If it's not on your path, you can find it in ``site-packages/django/bin`` within your Python installation. Consider symlinking it from some place on your path, such as ``/usr/local/bin``."
msgstr ""

#: ../../ref/django-admin.txt:22
# 055078e511174a81bba4bf41a2cc10d4
msgid "For Windows users, who do not have symlinking functionality available, you can copy ``django-admin.py`` to a location on your existing path or edit the ``PATH`` settings (under ``Settings - Control Panel - System - Advanced - Environment...``) to point to its installed location."
msgstr ""

#: ../../ref/django-admin.txt:27
# 16c842b0bd4b4517994636eaf8ba0a4d
msgid "Generally, when working on a single Django project, it's easier to use ``manage.py``. Use ``django-admin.py`` with ``DJANGO_SETTINGS_MODULE``, or the ``--settings`` command line option, if you need to switch between multiple Django settings files."
msgstr ""

#: ../../ref/django-admin.txt:32
# 28201694afc049d8a888743430d6985f
msgid "The command-line examples throughout this document use ``django-admin.py`` to be consistent, but any example can use ``manage.py`` just as well."
msgstr ""

#: ../../ref/django-admin.txt:43
# 69ea2d62276141eca05711332d61ea0e
msgid "``command`` should be one of the commands listed in this document. ``options``, which is optional, should be zero or more of the options available for the given command."
msgstr ""

#: ../../ref/django-admin.txt:48
# 7d9033770dfa4484a1f3b207cc7b296a
msgid "Getting runtime help"
msgstr ""

#: ../../ref/django-admin.txt:52
# 8a75d048b25e425cb7e22defc7431215
msgid "Run ``django-admin.py help`` to display usage information and a list of the commands provided by each application."
msgstr ""

#: ../../ref/django-admin.txt:55
# f19f985fd07c4a29bc0c370948eeb2ae
msgid "Run ``django-admin.py help --commands`` to display a list of all available commands."
msgstr ""

#: ../../ref/django-admin.txt:58
# e1102974932141c6abb2d8961bd17d4f
msgid "Run ``django-admin.py help <command>`` to display a description of the given command and a list of its available options."
msgstr ""

#: ../../ref/django-admin.txt:62
# c2411c9c02e849a095d9ffcbe5600651
msgid "App names"
msgstr ""

#: ../../ref/django-admin.txt:64
# 51a6038ca8764350898596e7555d69f2
msgid "Many commands take a list of \"app names.\" An \"app name\" is the basename of the package containing your models. For example, if your :setting:`INSTALLED_APPS` contains the string ``'mysite.blog'``, the app name is ``blog``."
msgstr ""

#: ../../ref/django-admin.txt:69
# d8118b146095440f96652d49b7c4c2df
msgid "Determining the version"
msgstr ""

#: ../../ref/django-admin.txt:73
# f2974e90bff74b868fc79726a6e6160d
msgid "Run ``django-admin.py version`` to display the current Django version."
msgstr ""

#: ../../ref/django-admin.txt:75
# af2f934afbac4162a4900d2dcafd4249
msgid "The output follows the schema described in :pep:`386`::"
msgstr ""

#: ../../ref/django-admin.txt:82
# 152d41c3be33447ca09ddea845042ba2
msgid "Displaying debug output"
msgstr ""

#: ../../ref/django-admin.txt:84
# 14cd42f6db3e48f2875fdbda49cf94fc
msgid "Use :djadminopt:`--verbosity` to specify the amount of notification and debug information that ``django-admin.py`` should print to the console. For more details, see the documentation for the :djadminopt:`--verbosity` option."
msgstr ""

#: ../../ref/django-admin.txt:89
# 34ddeff15d2e4b1dbe53149177410977
msgid "Available commands"
msgstr ""

#: ../../ref/django-admin.txt:92
# c94f5182a82e47b3b79e97ddea1dbaa3
msgid "cleanup"
msgstr ""

#: ../../ref/django-admin.txt:96
# 758f09810f704e9a94a5c09964d5c583
msgid "Can be run as a cronjob or directly to clean out old data from the database (only expired sessions at the moment)."
msgstr ""

#: ../../ref/django-admin.txt:103
# 6f203fae41e44171be9e631bd5a4790d
msgid "compilemessages"
msgstr ""

#: ../../ref/django-admin.txt:107
# ad355fcb56ba4e7ea2580152c425c473
msgid "Compiles .po files created with ``makemessages`` to .mo files for use with the builtin gettext support. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/django-admin.txt:110
# 579b90de111d4a179028a8738d9d39a1
msgid "Use the :djadminopt:`--locale` option to specify the locale to process. If not provided, all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:118
# 8b0ba4e19e4644c39bcb2c0705adecb9
msgid "createcachetable"
msgstr ""

#: ../../ref/django-admin.txt:122
# f878a5ec28934b5b839c489bcb262984
msgid "Creates a cache table named ``tablename`` for use with the database cache backend. See :doc:`/topics/cache` for more information."
msgstr ""

#: ../../ref/django-admin.txt:125
# 1deda890066a4b3ab62a866955fa6d16
msgid "The :djadminopt:`--database` option can be used to specify the database onto which the cachetable will be installed."
msgstr ""

#: ../../ref/django-admin.txt:129
# cbdf109cb8c1456795a883b4fe667730
msgid "dbshell"
msgstr ""

#: ../../ref/django-admin.txt:133
# 5b3089cd7fcf4213833eec9882f2f671
msgid "Runs the command-line client for the database engine specified in your ``ENGINE`` setting, with the connection parameters specified in your :setting:`USER`, :setting:`PASSWORD`, etc., settings."
msgstr ""

#: ../../ref/django-admin.txt:137
# bb55d0857d7448cf9bd6acc648d79ed4
msgid "For PostgreSQL, this runs the ``psql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:138
# 9af8bcf5b2be48cf9182e01427fde826
msgid "For MySQL, this runs the ``mysql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:139
# cf1047990d21494d8ecebacad4f77d03
msgid "For SQLite, this runs the ``sqlite3`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:141
# 098099d55e1748bda58a52f0c4b45435
msgid "This command assumes the programs are on your ``PATH`` so that a simple call to the program name (``psql``, ``mysql``, ``sqlite3``) will find the program in the right place. There's no way to specify the location of the program manually."
msgstr ""

#: ../../ref/django-admin.txt:146
# 080bc58c46ba470db6bab11b70eed441
msgid "The :djadminopt:`--database` option can be used to specify the database onto which to open a shell."
msgstr ""

#: ../../ref/django-admin.txt:150
# 4c39ab3eab3a4751b3cb5a34872038ea
msgid "diffsettings"
msgstr ""

#: ../../ref/django-admin.txt:154
# c86109cb66564130bfca894a6c9915bc
msgid "Displays differences between the current settings file and Django's default settings."
msgstr ""

#: ../../ref/django-admin.txt:157
# cd334098c2f9415a8b8392ef9ac437e4
msgid "Settings that don't appear in the defaults are followed by ``\"###\"``. For example, the default settings don't define :setting:`ROOT_URLCONF`, so :setting:`ROOT_URLCONF` is followed by ``\"###\"`` in the output of ``diffsettings``."
msgstr ""

#: ../../ref/django-admin.txt:162
# 83beb3d460244b9b9a53037fb0d40142
msgid "Note that Django's default settings live in ``django/conf/global_settings.py``, if you're ever curious to see the full list of defaults."
msgstr ""

#: ../../ref/django-admin.txt:166
# ab3ca76e1b164e38a5bdbec22524aee4
msgid "dumpdata <appname appname appname.Model ...>"
msgstr ""

#: ../../ref/django-admin.txt:170
# 633a6475c45c481085f3ce34a3cf0072
msgid "Outputs to standard output all data in the database associated with the named application(s)."
msgstr ""

#: ../../ref/django-admin.txt:173
# ee15b14f3a0442a38b16458798b9d2b4
msgid "If no application name is provided, all installed applications will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:175
# d0e5f1b45f5b4d77a9c45ec5834a8f25
msgid "The output of ``dumpdata`` can be used as input for ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:177
# 6f6cd4aae72b46fbb0410d2370fd343f
msgid "Note that ``dumpdata`` uses the default manager on the model for selecting the records to dump. If you're using a :ref:`custom manager <custom-managers>` as the default manager and it filters some of the available records, not all of the objects will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:182
# 46ca674b3b2c4d268b2c19722c7bcfc1
msgid "The :djadminopt:`--all` option may be provided to specify that ``dumpdata`` should use Django's base manager, dumping records which might otherwise be filtered or modified by a custom manager."
msgstr ""

#: ../../ref/django-admin.txt:188
# 8c34cb165c8344cea383309f8962140a
msgid "By default, ``dumpdata`` will format its output in JSON, but you can use the ``--format`` option to specify another format. Currently supported formats are listed in :ref:`serialization-formats`."
msgstr ""

#: ../../ref/django-admin.txt:194
# 3ba888fe494d4642a3f62ed779dafa74
msgid "By default, ``dumpdata`` will output all data on a single line. This isn't easy for humans to read, so you can use the ``--indent`` option to pretty-print the output with a number of indentation spaces."
msgstr ""

#: ../../ref/django-admin.txt:198
# b1d79fe3a338423ca3cce1049281300a
msgid "The :djadminopt:`--exclude` option may be provided to prevent specific applications or models (specified as in the form of ``appname.ModelName``) from being dumped. If you specify a model name to ``dumpdata``, the dumped output will be restricted to that model, rather than the entire application. You can also mix application names and model names."
msgstr ""

#: ../../ref/django-admin.txt:204
# 37ebf72ab87241e89992a9ca07cb60ba
msgid "The :djadminopt:`--database` option can be used to specify the database from which data will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:209
# 7d2e6999718849cb856910eb6b5a4afd
msgid "Use :ref:`natural keys <topics-serialization-natural-keys>` to represent any foreign key and many-to-many relationship with a model that provides a natural key definition. If you are dumping ``contrib.auth`` ``Permission`` objects or ``contrib.contenttypes`` ``ContentType`` objects, you should probably be using this flag."
msgstr ""

#: ../../ref/django-admin.txt:216
# 3961e28d61b040ce9225888bd52c94d4
msgid "flush"
msgstr ""

#: ../../ref/django-admin.txt:220
# 7e977426771c4bbeac800036bd5eb432
msgid "Returns the database to the state it was in immediately after :djadmin:`syncdb` was executed. This means that all data will be removed from the database, any post-synchronization handlers will be re-executed, and the ``initial_data`` fixture will be re-installed."
msgstr ""

#: ../../ref/django-admin.txt:225
#: ../../ref/django-admin.txt:1021
#: ../../ref/django-admin.txt:1120
# 2c86d1ac7e6048e0a399948e13f8add4
# 2c91ceb68d0a43d2b826ff90540d5443
# 035979a96430466ea59bc563dc3d2170
msgid "The :djadminopt:`--noinput` option may be provided to suppress all user prompts."
msgstr ""

#: ../../ref/django-admin.txt:228
# c336a1664a3d49789a5bb21628086234
msgid "The :djadminopt:`--database` option may be used to specify the database to flush."
msgstr ""

#: ../../ref/django-admin.txt:232
#: ../../ref/django-admin.txt:1028
# 3ca8dffc7b54416faf6badbc9a0d3cae
# d20671b88c1c496183d5cf5d4fe597ef
msgid "--no-initial-data"
msgstr ""

#: ../../ref/django-admin.txt:236
#: ../../ref/django-admin.txt:1032
# 6dfaa2b3783b4e41945239d5c8d788a5
# 0aba62f3c29247539fe8891651046383
msgid "Use ``--no-initial-data`` to avoid loading the initial_data fixture."
msgstr ""

#: ../../ref/django-admin.txt:244
# be3958ddb88e441784ce912421ccd91c
msgid "Introspects the database tables in the database pointed-to by the :setting:`NAME` setting and outputs a Django model module (a ``models.py`` file) to standard output."
msgstr ""

#: ../../ref/django-admin.txt:248
# b8a7ae2ecccb46a9b20a2d8981ed0d42
msgid "Use this if you have a legacy database with which you'd like to use Django. The script will inspect the database and create a model for each table within it."
msgstr ""

#: ../../ref/django-admin.txt:252
# 5fd34b3be39a4916a3fa08f324da36fb
msgid "As you might expect, the created models will have an attribute for every field in the table. Note that ``inspectdb`` has a few special cases in its field-name output:"
msgstr ""

#: ../../ref/django-admin.txt:256
# 5efd9a9977ad4071880b85381e6a02e6
msgid "If ``inspectdb`` cannot map a column's type to a model field type, it'll use ``TextField`` and will insert the Python comment ``'This field type is a guess.'`` next to the field in the generated model."
msgstr ""

#: ../../ref/django-admin.txt:261
# 4a71347e811a4e65b07566bef4b9a581
msgid "If the database column name is a Python reserved word (such as ``'pass'``, ``'class'`` or ``'for'``), ``inspectdb`` will append ``'_field'`` to the attribute name. For example, if a table has a column ``'for'``, the generated model will have a field ``'for_field'``, with the ``db_column`` attribute set to ``'for'``. ``inspectdb`` will insert the Python comment ``'Field renamed because it was a Python reserved word.'`` next to the field."
msgstr ""

#: ../../ref/django-admin.txt:270
# c1219174fb664bf98bb8cda7ec1c3303
msgid "This feature is meant as a shortcut, not as definitive model generation. After you run it, you'll want to look over the generated models yourself to make customizations. In particular, you'll need to rearrange models' order, so that models that refer to other models are ordered properly."
msgstr ""

#: ../../ref/django-admin.txt:275
# e9fddcf2d1c14d96b30dbf6068fc75ea
msgid "Primary keys are automatically introspected for PostgreSQL, MySQL and SQLite, in which case Django puts in the ``primary_key=True`` where needed."
msgstr ""

#: ../../ref/django-admin.txt:279
# 0e036ecd68aa47819ce1a748465b1b62
msgid "``inspectdb`` works with PostgreSQL, MySQL and SQLite. Foreign-key detection only works in PostgreSQL and with certain types of MySQL tables."
msgstr ""

#: ../../ref/django-admin.txt:282
# d31f4758272c4c9a8321788dc34350ec
msgid "The :djadminopt:`--database` option may be used to specify the database to introspect."
msgstr ""

#: ../../ref/django-admin.txt:286
# 8732f243f92e4bc8864bd5ebc29f853d
msgid "loaddata <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:290
# 5807faa02eb9489d868147eef932daa1
msgid "Searches for and loads the contents of the named fixture into the database."
msgstr ""

#: ../../ref/django-admin.txt:292
# 30a3103553c24d0e96f89b70ffcfc4a2
msgid "The :djadminopt:`--database` option can be used to specify the database onto which the data will be loaded."
msgstr ""

#: ../../ref/django-admin.txt:297
# 2223f4641bb34a6f8e619ccd5492d8da
msgid "The :djadminopt:`--ignorenonexistent` option can be used to ignore fields that may have been removed from models since the fixture was originally generated."
msgstr ""

#: ../../ref/django-admin.txt:301
# c0bcdab2a77740c9a670b0007f6b99e2
msgid "What's a \"fixture\"?"
msgstr ""

#: ../../ref/django-admin.txt:303
# ee57383698764066a4dd5f12d190e0d9
msgid "A *fixture* is a collection of files that contain the serialized contents of the database. Each fixture has a unique name, and the files that comprise the fixture can be distributed over multiple directories, in multiple applications."
msgstr ""

#: ../../ref/django-admin.txt:307
# ec1b6b787a7d46c3ae52f52cefdca152
msgid "Django will search in three locations for fixtures:"
msgstr ""

#: ../../ref/django-admin.txt:309
# 85188797c91f481294fb0f9d955cb8ce
msgid "In the ``fixtures`` directory of every installed application"
msgstr ""

#: ../../ref/django-admin.txt:310
# 620c80eac0784819adca14366c679028
msgid "In any directory named in the :setting:`FIXTURE_DIRS` setting"
msgstr ""

#: ../../ref/django-admin.txt:311
# 39221235bce04fc1927fe0bf14120b89
msgid "In the literal path named by the fixture"
msgstr ""

#: ../../ref/django-admin.txt:313
# c58b0bf01e804248aa5d589c4545109f
msgid "Django will load any and all fixtures it finds in these locations that match the provided fixture names."
msgstr ""

#: ../../ref/django-admin.txt:316
# 84c812f685fe495e81f2a6b90686f3f6
msgid "If the named fixture has a file extension, only fixtures of that type will be loaded. For example::"
msgstr ""

#: ../../ref/django-admin.txt:321
# d45655963c1c4d7c97ae39f6531a620d
msgid "would only load JSON fixtures called ``mydata``. The fixture extension must correspond to the registered name of a :ref:`serializer <serialization-formats>` (e.g., ``json`` or ``xml``)."
msgstr ""

#: ../../ref/django-admin.txt:325
# a514f7879f9b4428b3c1899772b05542
msgid "If you omit the extensions, Django will search all available fixture types for a matching fixture. For example::"
msgstr ""

#: ../../ref/django-admin.txt:330
# 6b9b6c5eaf5e4309b690134da3398af3
msgid "would look for any fixture of any fixture type called ``mydata``. If a fixture directory contained ``mydata.json``, that fixture would be loaded as a JSON fixture."
msgstr ""

#: ../../ref/django-admin.txt:334
# 53087948c58e460daafd737420d4ea2e
msgid "The fixtures that are named can include directory components. These directories will be included in the search path. For example::"
msgstr ""

#: ../../ref/django-admin.txt:339
# 2f16b1c7c833455e8d4c0719fb32f8a8
msgid "would search ``<appname>/fixtures/foo/bar/mydata.json`` for each installed application,  ``<dirname>/foo/bar/mydata.json`` for each directory in :setting:`FIXTURE_DIRS`, and the literal path ``foo/bar/mydata.json``."
msgstr ""

#: ../../ref/django-admin.txt:343
# fc7a1fc98e0944cfbc20bd3e31d8ea67
msgid "When fixture files are processed, the data is saved to the database as is. Model defined ``save`` methods and ``pre_save`` signals are not called."
msgstr ""

#: ../../ref/django-admin.txt:346
# febb6f6a3e02448399f725a91d763dd7
msgid "Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction."
msgstr ""

#: ../../ref/django-admin.txt:352
# ede6cd897f55411ba97bfc1e3a90ac36
msgid "The ``dumpdata`` command can be used to generate input for ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:355
# f5b175404efd45c5ab90d37088bb81d8
msgid "Compressed fixtures"
msgstr ""

#: ../../ref/django-admin.txt:357
# 8c9d5a53edb64e56a6a685d7045cc212
msgid "Fixtures may be compressed in ``zip``, ``gz``, or ``bz2`` format. For example::"
msgstr ""

#: ../../ref/django-admin.txt:361
# 51097bb0b3e2400a93880c34af2d61dd
msgid "would look for any of ``mydata.json``, ``mydata.json.zip``, ``mydata.json.gz``, or ``mydata.json.bz2``. The first file contained within a zip-compressed archive is used."
msgstr ""

#: ../../ref/django-admin.txt:365
# 888efcbb950a49268b357c50f396609f
msgid "Note that if two fixtures with the same name but different fixture type are discovered (for example, if ``mydata.json`` and ``mydata.xml.gz`` were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to ``loaddata`` will be removed from the database."
msgstr ""

#: ../../ref/django-admin.txt:373
# 58a24b1ca96e4fb38b396cadf1ea4ef0
msgid "The MyISAM storage engine of MySQL doesn't support transactions or constraints, so if you use MyISAM, you won't get validation of fixture data, or a rollback if multiple transaction files are found."
msgstr ""

#: ../../ref/django-admin.txt:378
# 12028020da4d47f681350abe6071c1ba
msgid "Database-specific fixtures"
msgstr ""

#: ../../ref/django-admin.txt:380
# c0737ef561b3428d9d50a3cf23548777
msgid "If you're in a multi-database setup, you might have fixture data that you want to load onto one database, but not onto another. In this situation, you can add database identifier into the names of your fixtures."
msgstr ""

#: ../../ref/django-admin.txt:384
# 212c1884d1844832a50b6014ad9e8b8e
msgid "For example, if your :setting:`DATABASES` setting has a 'master' database defined, name the fixture ``mydata.master.json`` or ``mydata.master.json.gz`` and the fixture will only be loaded when you specify you want to load data into the ``master`` database."
msgstr ""

#: ../../ref/django-admin.txt:390
# cd36dd460c134481b979ad075c2d132f
msgid "makemessages"
msgstr ""

#: ../../ref/django-admin.txt:394
# 86b62e98e60b455e9ad8276e74ca00db
msgid "Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for project and application) directory. After making changes to the messages files you need to compile them with ``compilemessages`` for use with the builtin gettext support. See the :ref:`i18n documentation <how-to-create-language-files>` for details."
msgstr ""

#: ../../ref/django-admin.txt:403
# 66308f0901834a659e006dbed741345d
msgid "Use the ``--all`` or ``-a`` option to update the message files for all available languages."
msgstr ""

#: ../../ref/django-admin.txt:412
# 9a1635592b21429e9311584a2cdf3b0b
msgid "Use the ``--extension`` or ``-e`` option to specify a list of file extensions to examine (default: \".html\", \".txt\")."
msgstr ""

#: ../../ref/django-admin.txt:419
# 8ef3228e919a460584aefbd17d8b9663
msgid "Separate multiple extensions with commas or use -e or --extension multiple times::"
msgstr ""

#: ../../ref/django-admin.txt:423
# d4ee00c131ce47429a570d484cc13baf
msgid "Use the :djadminopt:`--locale` option to specify the locale to process."
msgstr ""

#: ../../ref/django-admin.txt:431
# 749abd0c9bf146f2af8062e88224e756
msgid "Use the ``--domain`` or ``-d`` option to change the domain of the messages files. Currently supported:"
msgstr ""

#: ../../ref/django-admin.txt:434
# 21a9f40ebb094325801d3064c549ce2b
msgid "``django`` for all ``*.py``, ``*.html`` and ``*.txt`` files (default)"
msgstr ""

#: ../../ref/django-admin.txt:435
# 503d014f6ef943a8a16275edc6daeba2
msgid "``djangojs`` for ``*.js`` files"
msgstr ""

#: ../../ref/django-admin.txt:439
# d7228d5015c045d7a2b839386261d71e
msgid "Use the ``--symlinks`` or ``-s`` option to follow symlinks to directories when looking for new translation strings."
msgstr ""

#: ../../ref/django-admin.txt:448
# abc2049a0b114ccf8d610c731a370fff
msgid "Use the ``--ignore`` or ``-i`` option to ignore files or directories matching the given :mod:`glob`-style pattern. Use multiple times to ignore more."
msgstr ""

#: ../../ref/django-admin.txt:451
# f5e9f84812b343a1a8ef5d852e6dacff
msgid "These patterns are used by default: ``'CVS'``, ``'.*'``, ``'*~'``"
msgstr ""

#: ../../ref/django-admin.txt:459
# 41b4c837d0ab4ac0bc37dbe48d620ece
msgid "Use the ``--no-default-ignore`` option to disable the default values of :djadminopt:`--ignore`."
msgstr ""

#: ../../ref/django-admin.txt:464
# 5da159eb890548a5a71f935fccb14ac6
msgid "Use the ``--no-wrap`` option to disable breaking long message lines into several lines in language files."
msgstr ""

#: ../../ref/django-admin.txt:471
# 520600c7dee0413db52256b2f4931869
msgid "Use the ``--no-location`` option to not write '``#: filename:line``' comment lines in language files. Note that using this option makes it harder for technically skilled translators to understand each message's context."
msgstr ""

#: ../../ref/django-admin.txt:476
# 726b847c879b4d6990b442dfab629e0e
msgid "runfcgi [options]"
msgstr ""

#: ../../ref/django-admin.txt:480
# 08a62799ea864fa2a76023d28f652a65
msgid "Starts a set of FastCGI processes suitable for use with any Web server that supports the FastCGI protocol. See the :doc:`FastCGI deployment documentation </howto/deployment/fastcgi>` for details. Requires the Python FastCGI module from `flup`_."
msgstr ""

#: ../../ref/django-admin.txt:491
# b9505a4f9ee54d1b83b260107f47ac69
msgid "The options accepted by this command are passed to the FastCGI library and don't use the ``'--'`` prefix as is usual for other Django management commands."
msgstr ""

#: ../../ref/django-admin.txt:496
# 3400132d665948aebc54ac4e0360a416
msgid "``protocol=PROTOCOL``"
msgstr ""

#: ../../ref/django-admin.txt:498
# 8735d45f9d94436b9cf4528e067b235f
msgid "Protocol to use. *PROTOCOL* can be ``fcgi``, ``scgi``, ``ajp``, etc. (default is ``fcgi``)"
msgstr ""

#: ../../ref/django-admin.txt:503
# 5abe5a016556453b9ea68506d629c16f
msgid "``host=HOSTNAME``"
msgstr ""

#: ../../ref/django-admin.txt:505
# aea83432db7540e2aea480afcaba4017
msgid "Hostname to listen on."
msgstr ""

#: ../../ref/django-admin.txt:509
# 02573df0a04147b7be0438be346dde7d
msgid "``port=PORTNUM``"
msgstr ""

#: ../../ref/django-admin.txt:511
# 3b65a4c25a664c6c9b8e472803d2ca4e
msgid "Port to listen on."
msgstr ""

#: ../../ref/django-admin.txt:515
# 610388365077467482e9abbd66285cb0
msgid "``socket=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:517
# 3d0a9afeac6149eb95018c2f4b8c005f
msgid "UNIX socket to listen on."
msgstr ""

#: ../../ref/django-admin.txt:521
# 95d4372580294d03b0b1c4c0fb9883de
msgid "``method=IMPL``"
msgstr ""

#: ../../ref/django-admin.txt:523
# 31757493dcf54dd897d84fc53ce20143
msgid "Possible values: ``prefork`` or ``threaded`` (default ``prefork``)"
msgstr ""

#: ../../ref/django-admin.txt:527
# 92426e0fed97414ea2249fcbda3de27a
msgid "``maxrequests=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:529
# a85965770ac1409a96d86b04fbd7809f
msgid "Number of requests a child handles before it is killed and a new child is forked (0 means no limit)."
msgstr ""

#: ../../ref/django-admin.txt:534
# 843fb09db66f4aeea61d5c603fd3cf7b
msgid "``maxspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:536
# dd6db76e406e4139ad0ac1b81f71d11b
msgid "Max number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:540
# 602a11ac9fa34543936697167e6adcd5
msgid "``minspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:542
# 1decdf95190b4e53a690702364d01da9
msgid "Min number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:546
# 57abc252bee2469c8efa2182adad8b4b
msgid "``maxchildren=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:548
# 3a6f34591954463ea2fbfba444ecfc12
msgid "Hard limit number of processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:552
# 8a03606a475245e7bda54e33fed782a9
msgid "``daemonize=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:554
# 155f1129e924434ea9aa1439f86c514e
msgid "Whether to detach from terminal."
msgstr ""

#: ../../ref/django-admin.txt:558
# 16de41d59b4041aea48fa64bf2252d7a
msgid "``pidfile=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:560
# 5751a53f2f204cf088feac75b903fcbd
msgid "Write the spawned process-id to file *FILE*."
msgstr ""

#: ../../ref/django-admin.txt:564
# d4f1368a579447908357fc7c429a2563
msgid "``workdir=DIRECTORY``"
msgstr ""

#: ../../ref/django-admin.txt:566
# 5bc7d2abb1524ea0ab1d895df6376740
msgid "Change to directory *DIRECTORY* when daemonizing."
msgstr ""

#: ../../ref/django-admin.txt:570
# 360345fd021b4d3bbf4fdb5737e926b8
msgid "``debug=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:572
# a85a48f662724ac29907f959033e1c6a
msgid "Set to true to enable flup tracebacks."
msgstr ""

#: ../../ref/django-admin.txt:576
# b92540035b38422d862bc7734a6f487a
msgid "``outlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:578
# c2d18693bd3a431395f3a3b9d5e55559
msgid "Write stdout to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:582
# 6bab89ce9816443281d251c7e10b06b1
msgid "``errlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:584
# daaecd951cb24e89b9fe8f4e3d0f5515
msgid "Write stderr to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:588
# c969dcee9a944220abeb3f6d8e8ccd68
msgid "``umask=UMASK``"
msgstr ""

#: ../../ref/django-admin.txt:590
# 1fc37db9745449809fc4c6d44b925286
msgid "Umask to use when daemonizing. The value is interpeted as an octal number (default value is ``022``)."
msgstr ""

#: ../../ref/django-admin.txt:598
# 3e0a5feae30d441bb57bb02911893f25
msgid "Run a FastCGI server as a daemon and write the spawned PID in a file."
msgstr ""

#: ../../ref/django-admin.txt:601
# 228b10feab134c5db5e1847c17f2b633
msgid "runserver [port or address:port]"
msgstr ""

#: ../../ref/django-admin.txt:605
# 382a74417a0144f6814578c51c14de5c
msgid "Starts a lightweight development Web server on the local machine. By default, the server runs on port 8000 on the IP address ``127.0.0.1``. You can pass in an IP address and port number explicitly."
msgstr ""

#: ../../ref/django-admin.txt:609
# 8f4b8f70e9314cd091fa40ac2f89176a
msgid "If you run this script as a user with normal privileges (recommended), you might not have access to start a port on a low port number. Low port numbers are reserved for the superuser (root)."
msgstr ""

#: ../../ref/django-admin.txt:617
# 7dad843514e04394a669f9a0c38abe32
msgid "DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that's how it's gonna stay. We're in the business of making Web frameworks, not Web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)"
msgstr ""

#: ../../ref/django-admin.txt:623
# 2e4358f426d34ae0b1308b90d97f104c
msgid "The development server automatically reloads Python code for each request, as needed. You don't need to restart the server for code changes to take effect."
msgstr ""

#: ../../ref/django-admin.txt:626
# c32bf48f207847a79939b736e6ba1a81
msgid "When you start the server, and each time you change Python code while the server is running, the server will validate all of your installed models. (See the ``validate`` command below.) If the validator finds errors, it will print them to standard output, but it won't stop the server."
msgstr ""

#: ../../ref/django-admin.txt:631
# 91a726f0daa442838957cd664d666c22
msgid "You can run as many servers as you want, as long as they're on separate ports. Just execute ``django-admin.py runserver`` more than once."
msgstr ""

#: ../../ref/django-admin.txt:634
# bc746f8eab7c4d63ac4a337afd287157
msgid "Note that the default IP address, ``127.0.0.1``, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. ``192.168.2.1``) or ``0.0.0.0`` or ``::`` (with IPv6 enabled)."
msgstr ""

#: ../../ref/django-admin.txt:639
# d0bcd1570487402db3f7e76c111df2e6
msgid "You can provide an IPv6 address surrounded by brackets (e.g. ``[200a::1]:8000``). This will automatically enable IPv6 support."
msgstr ""

#: ../../ref/django-admin.txt:642
# 5e41abb921b54e8190d9569dd329fef9
msgid "A hostname containing ASCII-only characters can also be used."
msgstr ""

#: ../../ref/django-admin.txt:644
# 38d129f0c7974d028e79d67056bc814f
msgid "If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled (default in new projects) the :djadmin:`runserver` command will be overriden with its own :ref:`runserver<staticfiles-runserver>` command."
msgstr ""

#: ../../ref/django-admin.txt:650
# 61b5d65c7d02476d82ba60edadfa70b2
msgid "Use the ``--noreload`` option to disable the use of the auto-reloader. This means any Python code changes you make while the server is running will *not* take effect if the particular Python modules have already been loaded into memory."
msgstr ""

#: ../../ref/django-admin.txt:663
# 7b6b038441804764aee453fb80c6b8dc
msgid "Since version 1.4, the development server is multithreaded by default. Use the ``--nothreading`` option to disable the use of threading in the development server."
msgstr ""

#: ../../ref/django-admin.txt:669
# 565bb92061644ca496934f73248eed09
msgid "Use the ``--ipv6`` (or shorter ``-6``) option to tell Django to use IPv6 for the development server. This changes the default IP address from ``127.0.0.1`` to ``::1``."
msgstr ""

#: ../../ref/django-admin.txt:678
# 2411926ba40349bd9bfc9036af5b24b1
msgid "Examples of using different ports and addresses"
msgstr ""

#: ../../ref/django-admin.txt:680
# 18f11c2e07934b50939b46f370296c1d
msgid "Port 8000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:684
# 0cbddeb367b54688a916ba1d26c010d1
msgid "Port 8000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:688
# da8036a93f834f349357c39df482a162
msgid "Port 7000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:692
# 7137941805f5470a81d2cb6185ea7d5a
msgid "Port 7000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:696
# 8c0a85897cd247d18cc9423f268d3777
msgid "Port 8000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:700
# 3d8ba9901d284be99f7850dffb0ab347
msgid "Port 7000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:704
# bcb9ad2e0d764a948188bfeb37578feb
msgid "Port 7000 on IPv6 address ``2001:0db8:1234:5678::9``::"
msgstr ""

#: ../../ref/django-admin.txt:708
# 3caccd8503554f498eef282a5732eba6
msgid "Port 8000 on IPv4 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:712
# 913de6bfab164749a7452a60e7bed309
msgid "Port 8000 on IPv6 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:717
# ddaf86ac9a634b079b07fde7858f07d7
msgid "Serving static files with the development server"
msgstr ""

#: ../../ref/django-admin.txt:719
# be1deb32aeeb438dba80c1299e004945
msgid "By default, the development server doesn't serve any static files for your site (such as CSS files, images, things under :setting:`MEDIA_URL` and so forth). If you want to configure Django to serve static media, read :doc:`/howto/static-files`."
msgstr ""

#: ../../ref/django-admin.txt:724
# 890e57a617ff43849649d24eab41d95d
msgid "shell"
msgstr ""

#: ../../ref/django-admin.txt:728
# 732369356c8649fbb79ec7b6333bce49
msgid "Starts the Python interactive interpreter."
msgstr ""

#: ../../ref/django-admin.txt:730
# c9eaa5441df54d70a8c576b69b82509c
msgid "Django will use IPython_ or bpython_ if either is installed. If you have a rich shell installed but want to force use of the \"plain\" Python interpreter, use the ``--plain`` option, like so::"
msgstr ""

#: ../../ref/django-admin.txt:738
# 8547de962f1b4987be549ef8622e7813
msgid "If you would like to specify either IPython or bpython as your interpreter if you have both installed you can specify an alternative interpreter interface with the ``-i`` or ``--interface`` options like so:"
msgstr ""

#: ../../ref/django-admin.txt:742
# 042399b0d7d6487a8f2f110d19dcaec8
msgid "IPython::"
msgstr ""

#: ../../ref/django-admin.txt:748
# 1638913fbdd24769852186d47ccca5f4
msgid "bpython::"
msgstr ""

#: ../../ref/django-admin.txt:758
# 231e0ff4d9004c8cb2698532ce4681ee
msgid "sql <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:762
# 02a92e998bdf4ff8834c0779055b6ae8
msgid "Prints the CREATE TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:764
#: ../../ref/django-admin.txt:777
#: ../../ref/django-admin.txt:787
#: ../../ref/django-admin.txt:811
#: ../../ref/django-admin.txt:822
#: ../../ref/django-admin.txt:832
#: ../../ref/django-admin.txt:848
# 9fc3494ea9c644dd9ed4b03de3aef44a
# 3474c3df695f42bc910cd4f3222400e5
# 69cb70be86374ccb85d63a4aad93a16a
# b66ab9cf5a524f91afc161e37eae4f76
# 0459576dc1b342e7b3d4210fb4d6f390
# a2450754ea564004a9e9185305bbb4ca
# 371f0efd24de467abc5b61844d1df44c
msgid "The :djadminopt:`--database` option can be used to specify the database for which to print the SQL."
msgstr ""

#: ../../ref/django-admin.txt:768
# 218abd80374f4b2bb5a4bae7c3c24ada
msgid "sqlall <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:772
# 8e8d0b74e4c741488349ed31635da0c8
msgid "Prints the CREATE TABLE and initial-data SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:774
# f3b81f2db1fa44ec8b23aaca60eb2f94
msgid "Refer to the description of ``sqlcustom`` for an explanation of how to specify initial data."
msgstr ""

#: ../../ref/django-admin.txt:781
# d69695c3742d4b41980b25db6a37de51
msgid "sqlclear <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:785
# e0d0df6e4247450ba24aed680ab05e8d
msgid "Prints the DROP TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:791
# 4babd9b57163460bb1ce74078b02e376
msgid "sqlcustom <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:795
# 624e9ef13fb24a0ea5054ed450208245
msgid "Prints the custom SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:797
# 5294f459f8b2493f97bc507e20b0196e
msgid "For each model in each specified app, this command looks for the file ``<appname>/sql/<modelname>.sql``, where ``<appname>`` is the given app name and ``<modelname>`` is the model's name in lowercase. For example, if you have an app ``news`` that includes a ``Story`` model, ``sqlcustom`` will attempt to read a file ``news/sql/story.sql`` and append it to the output of this command."
msgstr ""

#: ../../ref/django-admin.txt:804
# 5bd7fb496732405b848c571aba11304d
msgid "Each of the SQL files, if given, is expected to contain valid SQL. The SQL files are piped directly into the database after all of the models' table-creation statements have been executed. Use this SQL hook to make any table modifications, or insert any SQL functions into the database."
msgstr ""

#: ../../ref/django-admin.txt:809
# 7d2d015924bd4fa8bb18c50730e88aa7
msgid "Note that the order in which the SQL files are processed is undefined."
msgstr ""

#: ../../ref/django-admin.txt:815
# 23e6216a2c31455584cf6e0c35eb8b01
msgid "sqlflush"
msgstr ""

#: ../../ref/django-admin.txt:819
# a9e4250e1c6f40dfbde2fcc846ddcd97
msgid "Prints the SQL statements that would be executed for the :djadmin:`flush` command."
msgstr ""

#: ../../ref/django-admin.txt:826
# d89f99044f2f4a9f8ca4b0c4ea44f6e9
msgid "sqlindexes <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:830
# e3b3ab58169b4f60a8cb08f3ca121f9f
msgid "Prints the CREATE INDEX SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:836
# e118f85160a64cd18b6906f0cda7e3c0
msgid "sqlsequencereset <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:840
# c5082b034e7a4e23bb95fd1886394183
msgid "Prints the SQL statements for resetting sequences for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:842
# 0f332671478c48c8a1d78c63c3d7a15f
msgid "Sequences are indexes used by some database engines to track the next available number for automatically incremented fields."
msgstr ""

#: ../../ref/django-admin.txt:845
# 73440254e67048e990f27cf706306b82
msgid "Use this command to generate SQL which will fix cases where a sequence is out of sync with its automatically incremented field data."
msgstr ""

#: ../../ref/django-admin.txt:852
# 9a6aeabd84bc41e085fe08c3591792db
msgid "startapp <appname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:856
# 665ba546878b4978b0d76782d657250e
msgid "Creates a Django app directory structure for the given app name in the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:861
# 3bc19b368ee34edb89167519703a4f3b
msgid "By default the directory created contains a ``models.py`` file and other app template files. (See the `source`_ for more details.) If only the app name is given, the app directory will be created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:866
# 38ffc06be9f342a199ab2ebeb62128e9
msgid "If the optional destination is provided, Django will use that existing directory rather than creating a new one. You can use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:877
# 9ba1436cb2314a09a4027011e175f116
msgid "With the ``--template`` option, you can use a custom app template by providing either the path to a directory with the app template file, or a path to a compressed file (``.tar.gz``, ``.tar.bz2``, ``.tgz``, ``.tbz``, ``.zip``) containing the app template files."
msgstr ""

#: ../../ref/django-admin.txt:882
# 8b790fc9810d4512a4c0dcdb200a7aff
msgid "For example, this would look for an app template in the given directory when creating the ``myapp`` app::"
msgstr ""

#: ../../ref/django-admin.txt:887
# 2188376ca9984a598abff1247e1845e9
msgid "Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed archives with the app template files, downloading and extracting them on the fly."
msgstr ""

#: ../../ref/django-admin.txt:891
#: ../../ref/django-admin.txt:966
# 0e1c941a1a7141c6b99727ff27a98278
# 1077001c78de4f55a3f1e7b36b59cad6
msgid "For example, taking advantage of Github's feature to expose repositories as zip files, you can use a URL like::"
msgstr ""

#: ../../ref/django-admin.txt:898
# e2aca52810cf4913889f7c307dee06cb
msgid "When Django copies the app template files, it also renders certain files through the template engine: the files whose extensions match the ``--extension`` option (``py`` by default) and the files whose names are passed with the ``--name`` option. The :class:`template context <django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:904
# 42ab23cba0214980bb714db025131f6c
msgid "Any option passed to the startapp command (among the command's supported options)"
msgstr ""

#: ../../ref/django-admin.txt:906
# 69f667f8fb1e47fa9a5b3605ad7a1a6a
msgid "``app_name`` -- the app name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:907
# 33a1ca113bf24693945046ab7a72c60c
msgid "``app_directory`` -- the full path of the newly created app"
msgstr ""

#: ../../ref/django-admin.txt:913
# e30575cbcfdc4500a9033b10df739a44
msgid "When the app template files are rendered with the Django template engine (by default all ``*.py`` files), Django will also replace all stray template variables contained. For example, if one of the Python files contains a docstring explaining a particular feature related to template rendering, it might result in an incorrect example."
msgstr ""

#: ../../ref/django-admin.txt:919
# ee59a7023469462182731c6feba977c5
msgid "To work around this problem, you can use the :ttag:`templatetag` templatetag to \"escape\" the various parts of the template syntax."
msgstr ""

#: ../../ref/django-admin.txt:925
# 4698a1c6b165463eaa4d720e11148e0b
msgid "startproject <projectname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:929
# e0276789bf9f46a0bfd7c4fcb1f453cf
msgid "Creates a Django project directory structure for the given project name in the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:934
# 893717b918464e088137a3faae2fc156
msgid "By default, the new directory contains ``manage.py`` and a project package (containing a ``settings.py`` and other files). See the `template source`_ for details."
msgstr ""

#: ../../ref/django-admin.txt:938
# 33ab6f08c6c6470496f749cc37f39979
msgid "If only the project name is given, both the project directory and project package will be named ``<projectname>`` and the project directory will be created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:942
# c2355738b6d346afa7922f23b7d795a3
msgid "If the optional destination is provided, Django will use that existing directory as the project directory, and create ``manage.py`` and the project package within it. Use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:952
# ae2357a5ff054e3e87f6ccc6013cf51f
msgid "As with the :djadmin:`startapp` command, the ``--template`` option lets you specify a directory, file path or URL of a custom project template. See the :djadmin:`startapp` documentation for details of supported project template formats."
msgstr ""

#: ../../ref/django-admin.txt:957
# 85e1df81c46746af8b4a6986930d794d
msgid "For example, this would look for a project template in the given directory when creating the ``myproject`` project::"
msgstr ""

#: ../../ref/django-admin.txt:962
# 09cf31547f0a47c984091760d8631afc
msgid "Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed archives with the project template files, downloading and extracting them on the fly."
msgstr ""

#: ../../ref/django-admin.txt:971
# 8505002f318947cea22a8badcebf427c
msgid "When Django copies the project template files, it also renders certain files through the template engine: the files whose extensions match the ``--extension`` option (``py`` by default) and the files whose names are passed with the ``--name`` option. The :class:`template context <django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:977
# e5d9922dbb594fd38741154c006c8f08
msgid "Any option passed to the startproject command"
msgstr ""

#: ../../ref/django-admin.txt:978
# 94a33a682f6d4fadb35c97f70fa20ec3
msgid "``project_name`` -- the project name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:979
# dd125c1569a349e2a1e5f5fbccd92af7
msgid "``project_directory`` -- the full path of the newly created project"
msgstr ""

#: ../../ref/django-admin.txt:980
# fb737334a8c14b7da2f2eb9107baa7da
msgid "``secret_key`` -- a random key for the :setting:`SECRET_KEY` setting"
msgstr ""

#: ../../ref/django-admin.txt:982
# 7ee4844ed7444606acb7f6d18db10d38
msgid "Please also see the :ref:`rendering warning <render_warning>` as mentioned for :djadmin:`startapp`."
msgstr ""

#: ../../ref/django-admin.txt:988
# 3b61fe6646aa4aa6ac7fcf99ee7b258d
msgid "syncdb"
msgstr ""

#: ../../ref/django-admin.txt:992
# 2b28a58733d34c72bac51be1490c0e44
msgid "Creates the database tables for all apps in :setting:`INSTALLED_APPS` whose tables have not already been created."
msgstr ""

#: ../../ref/django-admin.txt:995
# 450b93e98b5d4c1c8b3a718ce01a1fcd
msgid "Use this command when you've added new applications to your project and want to install them in the database. This includes any apps shipped with Django that might be in :setting:`INSTALLED_APPS` by default. When you start a new project, run this command to install the default apps."
msgstr ""

#: ../../ref/django-admin.txt:1002
# 6fc347506ef74a04abf814910966f2ff
msgid "``syncdb`` will only create tables for models which have not yet been installed. It will *never* issue ``ALTER TABLE`` statements to match changes made to a model class after installation. Changes to model classes and database schemas often involve some form of ambiguity and, in those cases, Django would have to guess at the correct changes to make. There is a risk that critical data would be lost in the process."
msgstr ""

#: ../../ref/django-admin.txt:1009
# e3e1db2f39c44bddbc8067d3a74ace71
msgid "If you have made changes to a model and wish to alter the database tables to match, use the ``sql`` command to display the new SQL structure and compare that to your existing table schema to work out the changes."
msgstr ""

#: ../../ref/django-admin.txt:1013
# bd297d79e8ea4377b61abf132199aba5
msgid "If you're installing the ``django.contrib.auth`` application, ``syncdb`` will give you the option of creating a superuser immediately."
msgstr ""

#: ../../ref/django-admin.txt:1016
# ad22f99a1a6b434bb6fc83b3674d97fd
msgid "``syncdb`` will also search for and install any fixture named ``initial_data`` with an appropriate extension (e.g. ``json`` or ``xml``). See the documentation for ``loaddata`` for details on the specification of fixture data files."
msgstr ""

#: ../../ref/django-admin.txt:1024
# eee651cb650b42f2aa42360717acb34b
msgid "The :djadminopt:`--database` option can be used to specify the database to synchronize."
msgstr ""

#: ../../ref/django-admin.txt:1035
# 66aa1fb6c5b04a2aade74102a5129ad1
msgid "test <app or test identifier>"
msgstr ""

#: ../../ref/django-admin.txt:1039
# e771b4dfa5634e5b9502df9cf1e8e4b0
msgid "Runs tests for all installed models. See :doc:`/topics/testing` for more information."
msgstr ""

#: ../../ref/django-admin.txt:1044
# 87699d8508b24a5c9056677a81a1c9da
msgid "The ``--failfast`` option can be used to stop running tests and report the failure immediately after a test fails."
msgstr ""

#: ../../ref/django-admin.txt:1050
# 56e735728d294dfab1cd55a8097b705b
msgid "The ``--testrunner`` option can be used to control the test runner class that is used to execute tests. If this value is provided, it overrides the value provided by the :setting:`TEST_RUNNER` setting."
msgstr ""

#: ../../ref/django-admin.txt:1057
# ab558859d1704f75b3a59dab52016bb9
msgid "The ``--liveserver`` option can be used to override the default address where the live server (used with :class:`~django.test.LiveServerTestCase`) is expected to run from. The default value is ``localhost:8081``."
msgstr ""

#: ../../ref/django-admin.txt:1062
# 7a53712dda9e42cab02e4c0f166d1ff3
msgid "testserver <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:1066
# 3c91e74bdf4347d6ac9874269378fa4f
msgid "Runs a Django development server (as in ``runserver``) using data from the given fixture(s)."
msgstr ""

#: ../../ref/django-admin.txt:1069
# 3404a788abb64d318f655a1b37c45e4a
msgid "For example, this command::"
msgstr ""

#: ../../ref/django-admin.txt:1073
# 944ce630e42a46cf847af4f0492f7868
msgid "...would perform the following steps:"
msgstr ""

#: ../../ref/django-admin.txt:1075
# 7e6982d56c224827b418c259cf0c42d9
msgid "Create a test database, as described in :doc:`/topics/testing`."
msgstr ""

#: ../../ref/django-admin.txt:1076
# 2986ab490e8f490d9f377f2dd3cb863c
msgid "Populate the test database with fixture data from the given fixtures. (For more on fixtures, see the documentation for ``loaddata`` above.)"
msgstr ""

#: ../../ref/django-admin.txt:1078
# 73fb318625f04d8ba12e7dc91089ff48
msgid "Runs the Django development server (as in ``runserver``), pointed at this newly created test database instead of your production database."
msgstr ""

#: ../../ref/django-admin.txt:1081
# 140675dbab0a4938b669e03023348b6e
msgid "This is useful in a number of ways:"
msgstr ""

#: ../../ref/django-admin.txt:1083
# 8e413b63d7064b3fbf1554f3ceea788d
msgid "When you're writing :doc:`unit tests </topics/testing>` of how your views act with certain fixture data, you can use ``testserver`` to interact with the views in a Web browser, manually."
msgstr ""

#: ../../ref/django-admin.txt:1087
# 481a353857a4443198a671355d4ba4ab
msgid "Let's say you're developing your Django application and have a \"pristine\" copy of a database that you'd like to interact with. You can dump your database to a fixture (using the ``dumpdata`` command, explained above), then use ``testserver`` to run your Web application with that data. With this arrangement, you have the flexibility of messing up your data in any way, knowing that whatever data changes you're making are only being made to a test database."
msgstr ""

#: ../../ref/django-admin.txt:1095
# f992b1ced94d4385beb7d4063b290795
msgid "Note that this server does *not* automatically detect changes to your Python source code (as ``runserver`` does). It does, however, detect changes to templates."
msgstr ""

#: ../../ref/django-admin.txt:1101
# 02643167a5b240f48d196a2e35d96cda
msgid "Use ``--addrport`` to specify a different port, or IP address and port, from the default of ``127.0.0.1:8000``. This value follows exactly the same format and serves exactly the same function as the argument to the ``runserver`` command."
msgstr ""

#: ../../ref/django-admin.txt:1107
# d60ac8095d2b4f5483d84f87c38e7243
msgid "To run the test server on port 7000 with ``fixture1`` and ``fixture2``::"
msgstr ""

#: ../../ref/django-admin.txt:1112
# c8c91fb4f9a845ba86c3afe6a6b0b455
msgid "(The above statements are equivalent. We include both of them to demonstrate that it doesn't matter whether the options come before or after the fixture arguments.)"
msgstr ""

#: ../../ref/django-admin.txt:1116
# dd4bdad859d9426e9542bc8273d01129
msgid "To run on 1.2.3.4:7000 with a ``test`` fixture::"
msgstr ""

#: ../../ref/django-admin.txt:1124
# acffb7a3c1494d76a5ec51c812a1a6c4
msgid "validate"
msgstr ""

#: ../../ref/django-admin.txt:1128
# 3b1fd0d7e93d4ca38d867f4aecc9c166
msgid "Validates all installed models (according to the :setting:`INSTALLED_APPS` setting) and prints validation errors to standard output."
msgstr ""

#: ../../ref/django-admin.txt:1132
# 126ca046854b4f9b8db1dd7bba09ad11
msgid "Commands provided by applications"
msgstr ""

#: ../../ref/django-admin.txt:1134
# cac38d901f9946a38265a3f702118904
msgid "Some commands are only available when the ``django.contrib`` application that :doc:`implements </howto/custom-management-commands>` them has been :setting:`enabled <INSTALLED_APPS>`. This section describes them grouped by their application."
msgstr ""

#: ../../ref/django-admin.txt:1143
# f4a5b2eaddef45209190e8fbfd190838
msgid "changepassword"
msgstr ""

#: ../../ref/django-admin.txt:1147
#: ../../ref/django-admin.txt:1169
# 343725b7cf974cc482bd5c765fb140d6
# 409aec50ccc44cb1bb7aa5402fba0d6f
msgid "This command is only available if Django's :doc:`authentication system </topics/auth>` (``django.contrib.auth``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1150
# c6d13fc3b7f14288a10d673e512239c8
msgid "Allows changing a user's password. It prompts you to enter twice the password of the user given as parameter. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current user."
msgstr ""

#: ../../ref/django-admin.txt:1157
# 23db948b8eb248fdb02533b5acd8d179
msgid "Use the ``--database`` option to specify the database to query for the user. If it's not supplied, Django will use the ``default`` database."
msgstr ""

#: ../../ref/django-admin.txt:1165
# b1b929316f0c4a7796174427c32ff07e
msgid "createsuperuser"
msgstr ""

#: ../../ref/django-admin.txt:1172
# af696a64aa7e4c0c895e7e65398d97f8
msgid "Creates a superuser account (a user who has all permissions). This is useful if you need to create an initial superuser account but did not do so during ``syncdb``, or if you need to programmatically generate superuser accounts for your site(s)."
msgstr ""

#: ../../ref/django-admin.txt:1177
# 316807459971486b8c97498c1e6229e4
msgid "When run interactively, this command will prompt for a password for the new superuser account. When run non-interactively, no password will be set, and the superuser account will not be able to log in until a password has been manually set for it."
msgstr ""

#: ../../ref/django-admin.txt:1185
# 66f19414208545df9f97e54f9297ad75
msgid "The username and email address for the new account can be supplied by using the ``--username`` and ``--email`` arguments on the command line. If either of those is not supplied, ``createsuperuser`` will prompt for it when running interactively."
msgstr ""

#: ../../ref/django-admin.txt:1192
# f33a67c4b2b54a9a805736de21806d77
msgid "Use the ``--database`` option to specify the database into which the superuser object will be saved."
msgstr ""

#: ../../ref/django-admin.txt:1196
# 048bcf0830c94548a198ee3f4a4b3885
msgid "``django.contrib.gis``"
msgstr ""

#: ../../ref/django-admin.txt:1199
# e69f7d309bb94f089acf2947b8fb788b
msgid "ogrinspect"
msgstr ""

#: ../../ref/django-admin.txt:1201
# d5ef8be8fc6d4537b25d8481fe3754df
msgid "This command is only available if :doc:`GeoDjango </ref/contrib/gis/index>` (``django.contrib.gis``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1204
# 8eebfd74e712470ea44b55542c9b9f88
msgid "Please refer to its :djadmin:`description <ogrinspect>` in the GeoDjango documentation."
msgstr ""

#: ../../ref/django-admin.txt:1208
# 2ae2014a9ed34a2ea8eae5b89124bdc4
msgid "``django.contrib.sessions``"
msgstr ""

#: ../../ref/django-admin.txt:1211
# e01be96539ed4113a4058368018c8de3
msgid "clearsessions"
msgstr ""

#: ../../ref/django-admin.txt:1215
# b20a88e7a7d6413a91c989f0d578f50a
msgid "Can be run as a cron job or directly to clean out expired sessions."
msgstr ""

#: ../../ref/django-admin.txt:1218
# 9a111667077141ca96d8b05315b9c4b6
msgid "``django.contrib.sitemaps``"
msgstr ""

#: ../../ref/django-admin.txt:1221
# 1fe758db631c41fd972c29b9b41e66db
msgid "ping_google"
msgstr ""

#: ../../ref/django-admin.txt:1223
# 3166e0c8aa984cc4bc6cb5b0656e52aa
msgid "This command is only available if the :doc:`Sitemaps framework </ref/contrib/sitemaps>` (``django.contrib.sitemaps``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1226
# 97d539a297834053a52222323cfb1051
msgid "Please refer to its :djadmin:`description <ping_google>` in the Sitemaps documentation."
msgstr ""

#: ../../ref/django-admin.txt:1230
# d635861af49d4987941a92bbb6d12b6c
msgid "``django.contrib.staticfiles``"
msgstr ""

#: ../../ref/django-admin.txt:1235
#: ../../ref/django-admin.txt:1244
# 05ea0af0560a441da2257f49c8dd0e74
# 08ead62f7abb4838995b001b6e6764d6
msgid "This command is only available if the :doc:`static files application </howto/static-files>` (``django.contrib.staticfiles``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1238
# 07b40ef2011f401b8f79f64a49f54889
msgid "Please refer to its :djadmin:`description <collectstatic>` in the :doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1247
# 3c5bf9b434a7446e9177dedaaca0f883
msgid "Please refer to its :djadmin:`description <findstatic>` in the :doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1251
# 594ae78ceb2845b1a8e5088ab7c0242e
msgid "Default options"
msgstr ""

#: ../../ref/django-admin.txt:1253
# 2fb676e507e34947a5d2932ee0aceaa4
msgid "Although some commands may allow their own custom options, every command allows for the following options:"
msgstr ""

#: ../../ref/django-admin.txt:1262
# e0e37213af72488b9a3a9ac2e782d5a1
msgid "Adds the given filesystem path to the Python `import search path`_. If this isn't provided, ``django-admin.py`` will use the ``PYTHONPATH`` environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1266
# b5163492abdb41f8bc191429edccc77b
msgid "Note that this option is unnecessary in ``manage.py``, because it takes care of setting the Python path for you."
msgstr ""

#: ../../ref/django-admin.txt:1277
# 67994d3290b34f7ba4ff6581a4e8b24c
msgid "Explicitly specifies the settings module to use. The settings module should be in Python package syntax, e.g. ``mysite.settings``. If this isn't provided, ``django-admin.py`` will use the ``DJANGO_SETTINGS_MODULE`` environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1282
# 799e834674e74f7eb00bf4902eef52ee
msgid "Note that this option is unnecessary in ``manage.py``, because it uses ``settings.py`` from the current project by default."
msgstr ""

#: ../../ref/django-admin.txt:1291
# c1432cc80cfd4725af73ac6bf09ec39f
msgid "By default, ``django-admin.py`` will show a simple error message whenever an error occurs. If you specify ``--traceback``, ``django-admin.py``  will output a full stack trace whenever an exception is raised."
msgstr ""

#: ../../ref/django-admin.txt:1301
# c3b05f71dd5a44dd8e9e1adf0ff97825
msgid "Use ``--verbosity`` to specify the amount of notification and debug information that ``django-admin.py`` should print to the console."
msgstr ""

#: ../../ref/django-admin.txt:1304
# 3cf77dbe3e43490188e5ecdc5dc7d5ab
msgid "``0`` means no output."
msgstr ""

#: ../../ref/django-admin.txt:1305
# 733bc5ebc067497f92a158fe220b80bb
msgid "``1`` means normal output (default)."
msgstr ""

#: ../../ref/django-admin.txt:1306
# 520861a07a9b41408f00315e7f3cbf61
msgid "``2`` means verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1307
# 1e2f0f03752e4084912c3e14b86cb8e6
msgid "``3`` means *very* verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1310
# 7ee5d1098f4c4626a31fc092a7478577
msgid "Common options"
msgstr ""

#: ../../ref/django-admin.txt:1312
# 22b80ad9ca064b79bc811377c8f4f850
msgid "The following options are not available on every command, but they are common to a number of commands."
msgstr ""

#: ../../ref/django-admin.txt:1317
# 7d94780d20444bcc952898460550d291
msgid "Used to specify the database on which a command will operate. If not specified, this option will default to an alias of ``default``."
msgstr ""

#: ../../ref/django-admin.txt:1320
# 856835264ed3469499b26585b23ec7f4
msgid "For example, to dump data from the database with the alias ``master``::"
msgstr ""

#: ../../ref/django-admin.txt:1326
# bcf08b6dd42649a78ac5fe6e2fe1a88a
msgid "Exclude a specific application from the applications whose contents is output. For example, to specifically exclude the `auth` application from the output of dumpdata, you would call::"
msgstr ""

#: ../../ref/django-admin.txt:1332
# a196ce72cfdd423eb750a8964772de9e
msgid "If you want to exclude multiple applications, use multiple ``--exclude`` directives::"
msgstr ""

#: ../../ref/django-admin.txt:1339
# 0de5a44d55ce466892b9402ede70f355
msgid "Use the ``--locale`` or ``-l`` option to specify the locale to process. If not provided all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:1344
# 335e0aca64cd4b1195f04a451e880955
msgid "Use the ``--noinput`` option to suppress all user prompting, such as \"Are you sure?\" confirmation messages. This is useful if ``django-admin.py`` is being executed as an unattended, automated script."
msgstr ""

#: ../../ref/django-admin.txt:1349
# 1814d0bd1f77490eaa83f4bd5ee7f53c
msgid "Extra niceties"
msgstr ""

#: ../../ref/django-admin.txt:1354
# c905dba5865445d48289a3e0e6e59cc2
msgid "Syntax coloring"
msgstr ""

#: ../../ref/django-admin.txt:1356
# 380320a398f14b8ba1510b06de90c77f
msgid "The ``django-admin.py`` / ``manage.py`` commands will use pretty color-coded output if your terminal supports ANSI-colored output. It won't use the color codes if you're piping the command's output to another program."
msgstr ""

#: ../../ref/django-admin.txt:1361
# ef51269370854c5fbbd6f5bb1d657b84
msgid "The colors used for syntax highlighting can be customized. Django ships with three color palettes:"
msgstr ""

#: ../../ref/django-admin.txt:1364
# 0be45768ed224e95abb9d0cf670fce51
msgid "``dark``, suited to terminals that show white text on a black background. This is the default palette."
msgstr ""

#: ../../ref/django-admin.txt:1367
# 43a0afea7f184667a1e865b8ed9b9874
msgid "``light``, suited to terminals that show black text on a white background."
msgstr ""

#: ../../ref/django-admin.txt:1370
# 4c8c9d3552df439db0395caef41e4126
msgid "``nocolor``, which disables syntax highlighting."
msgstr ""

#: ../../ref/django-admin.txt:1372
# e7f08f5e63394254afe7ca0bd7b4a293
msgid "You select a palette by setting a ``DJANGO_COLORS`` environment variable to specify the palette you want to use. For example, to specify the ``light`` palette under a Unix or OS/X BASH shell, you would run the following at a command prompt::"
msgstr ""

#: ../../ref/django-admin.txt:1379
# ff984ab9bc3b48468fff19c955e925e9
msgid "You can also customize the colors that are used. Django specifies a number of roles in which color is used:"
msgstr ""

#: ../../ref/django-admin.txt:1382
# bbc19a38fa124e8c82448abea80224fc
msgid "``error`` - A major error."
msgstr ""

#: ../../ref/django-admin.txt:1383
# 80dec86c227f4a2492952ad5b186d4e8
msgid "``notice`` - A minor error."
msgstr ""

#: ../../ref/django-admin.txt:1384
# 11646394799046b2ad8e5620864ff6e4
msgid "``sql_field`` - The name of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1385
# eee87b315dd74342a26b0c11ded4ee26
msgid "``sql_coltype`` - The type of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1386
# 41a8a0af6e7e4326b80d99a1070fab98
msgid "``sql_keyword`` - A SQL keyword."
msgstr ""

#: ../../ref/django-admin.txt:1387
# 82452cbabf2346bc82603b3dffc26a0b
msgid "``sql_table`` - The name of a model in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1388
# 47631c6b16ed4c0fbe7748868936e291
msgid "``http_info`` - A 1XX HTTP Informational server response."
msgstr ""

#: ../../ref/django-admin.txt:1389
# 38f64b419ff64edcb479564074f06cd4
msgid "``http_success`` - A 2XX HTTP Success server response."
msgstr ""

#: ../../ref/django-admin.txt:1390
# 869b5bc1046e426d82034b0673a03b01
msgid "``http_not_modified`` - A 304 HTTP Not Modified server response."
msgstr ""

#: ../../ref/django-admin.txt:1391
# 72f6a837eff34d05ad93327eec528e04
msgid "``http_redirect`` - A 3XX HTTP Redirect server response other than 304."
msgstr ""

#: ../../ref/django-admin.txt:1392
# 22a38a152a0446458e1833b5897b211d
msgid "``http_not_found`` - A 404 HTTP Not Found server response."
msgstr ""

#: ../../ref/django-admin.txt:1393
# 0317302c80d1424092b6aed362a1bf1a
msgid "``http_bad_request`` - A 4XX HTTP Bad Request server response other than 404."
msgstr ""

#: ../../ref/django-admin.txt:1394
# 1d68c3236da644b1ae8b1c3ffb40af4a
msgid "``http_server_error`` - A 5XX HTTP Server Error response."
msgstr ""

#: ../../ref/django-admin.txt:1396
# 482446b0db9d4d04a193834f98cd547f
msgid "Each of these roles can be assigned a specific foreground and background color, from the following list:"
msgstr ""

#: ../../ref/django-admin.txt:1399
# c8e2d8df7d934ea08d6f2a820960ad37
msgid "``black``"
msgstr ""

#: ../../ref/django-admin.txt:1400
# 823dad47619e4ec2b07f8ed94b1101fb
msgid "``red``"
msgstr ""

#: ../../ref/django-admin.txt:1401
# 544e4235f20e4757ac7f3980a4073cf8
msgid "``green``"
msgstr ""

#: ../../ref/django-admin.txt:1402
# d6951b17d2494755b2bffcf23c929896
msgid "``yellow``"
msgstr ""

#: ../../ref/django-admin.txt:1403
# d6a0df5b2a8a4b4189c0ced9f2f113bf
msgid "``blue``"
msgstr ""

#: ../../ref/django-admin.txt:1404
# ec9f135d4bd949fd9d4f362b67b01dca
msgid "``magenta``"
msgstr ""

#: ../../ref/django-admin.txt:1405
# 3293a7f3e43f4f11b8d3af254eedec4f
msgid "``cyan``"
msgstr ""

#: ../../ref/django-admin.txt:1406
# 43b02fe57a0e480598884b8afd6cf42b
msgid "``white``"
msgstr ""

#: ../../ref/django-admin.txt:1408
# 98915ee997af44279fe9b7d1f80ead9f
msgid "Each of these colors can then be modified by using the following display options:"
msgstr ""

#: ../../ref/django-admin.txt:1411
# 0acd34ad73344a66bfbf27a6cc2d60db
msgid "``bold``"
msgstr ""

#: ../../ref/django-admin.txt:1412
# 5247108b66bb4e1ead167f86bf76b56c
msgid "``underscore``"
msgstr ""

#: ../../ref/django-admin.txt:1413
# 318fefd681c44ed78d169650b085dbed
msgid "``blink``"
msgstr ""

#: ../../ref/django-admin.txt:1414
#: ../../ref/signals.txt:306
#: ../../ref/signals.txt:332
# 8516014f3e404fbe88c7d382dbc18250
# 3b4c9bfda6f847e29d47ca840b0f0f79
# 21fc013f00954a9c949ceaaa0c1874e6
msgid "``reverse``"
msgstr ""

#: ../../ref/django-admin.txt:1415
# f36581997c5f40b88f9fcddc438d85e7
msgid "``conceal``"
msgstr ""

#: ../../ref/django-admin.txt:1417
# 979ff4070157496e881a2a984d033f7a
msgid "A color specification follows one of the following patterns:"
msgstr ""

#: ../../ref/django-admin.txt:1419
# 1c00599c5d4740a1bc1399c4ced82bd0
msgid "``role=fg``"
msgstr ""

#: ../../ref/django-admin.txt:1420
# a6d1a82abee945eca8e381247b969d69
msgid "``role=fg/bg``"
msgstr ""

#: ../../ref/django-admin.txt:1421
# 3b95665c84f84e4f8459d2d9d9b970d8
msgid "``role=fg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1422
# acf49dd2aaed4b8ab738cd643f5d0c73
msgid "``role=fg/bg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1424
# 2729b1d61ef042929f8cceac3177303b
msgid "where ``role`` is the name of a valid color role, ``fg`` is the foreground color, ``bg`` is the background color and each ``option`` is one of the color modifying options. Multiple color specifications are then separated by semicolon. For example::"
msgstr ""

#: ../../ref/django-admin.txt:1431
# 62ee747a1f624c398b46642c02474a8f
msgid "would specify that errors be displayed using blinking yellow on blue, and notices displayed using magenta. All other color roles would be left uncolored."
msgstr ""

#: ../../ref/django-admin.txt:1435
# e349be74177c4355a164c1978d62d311
msgid "Colors can also be specified by extending a base palette. If you put a palette name in a color specification, all the colors implied by that palette will be loaded. So::"
msgstr ""

#: ../../ref/django-admin.txt:1441
# 569f04c161fe4e68815983ca2e441e90
msgid "would specify the use of all the colors in the light color palette, *except* for the colors for errors and notices which would be overridden as specified."
msgstr ""

#: ../../ref/django-admin.txt:1446
# 356df50e9a2b4c8099e040e1e2e88c1d
msgid "Bash completion"
msgstr ""

#: ../../ref/django-admin.txt:1448
# 0f33822ec4fd4015a5282d1a04b9b487
msgid "If you use the Bash shell, consider installing the Django bash completion script, which lives in ``extras/django_bash_completion`` in the Django distribution. It enables tab-completion of ``django-admin.py`` and ``manage.py`` commands, so you can, for instance..."
msgstr ""

#: ../../ref/django-admin.txt:1453
# 9b474d7c2a27422d874d4e64497e9361
msgid "Type ``django-admin.py``."
msgstr ""

#: ../../ref/django-admin.txt:1454
# 92f4bb8633964ffe81628aa1ebe7b08d
msgid "Press [TAB] to see all available options."
msgstr ""

#: ../../ref/django-admin.txt:1455
# 900db765002b40f286035f28c630dc81
msgid "Type ``sql``, then [TAB], to see all available options whose names start with ``sql``."
msgstr ""

#: ../../ref/django-admin.txt:1459
# bc83dc10f61b432f82fd5e0f30cae976
msgid "See :doc:`/howto/custom-management-commands` for how to add customized actions."
msgstr ""

#: ../../ref/django-admin.txt:1464
# 3fb36f6bf0f9494f9b094ca1e804dfbe
msgid "Running management commands from your code"
msgstr ""

#: ../../ref/django-admin.txt:1470
# e48f7f7c2f8a4a8eae7bddb4030aaf2c
msgid "To call a management command from code use ``call_command``."
msgstr ""

#: ../../ref/django-admin.txt:1473
# 6381a150a10440f39f15d7784e42398f
msgid "the name of the command to call."
msgstr ""

#: ../../ref/django-admin.txt:1476
# 163249d11cc64a5bb62dac4202c34083
msgid "a list of arguments accepted by the command."
msgstr ""

#: ../../ref/django-admin.txt:1479
# fe1adfe331ba4b50b64f67e5d816d1cf
msgid "named options accepted on the command-line."
msgstr ""

#: ../../ref/django-admin.txt:1481
#: ../../ref/models/querysets.txt:404
#: ../../ref/models/querysets.txt:576
#: ../../ref/models/querysets.txt:605
#: ../../ref/models/querysets.txt:1720
# 2afc3b97a58d43b9a17b75d64cd043b8
# 761ea6f430b745a1b8d7a911006580a5
# dc354787fb4b461fa08bd779078b3ec9
# 15773a0c5219401fbdb844484da2134e
# e701df89d7b9445db86c193b523651c2
msgid "Examples::"
msgstr ""

#: ../../ref/django-admin.txt:1488
# aa92cacaecb346fe98ecee8d5097747a
msgid "Output redirection"
msgstr ""

#: ../../ref/django-admin.txt:1490
# a33d3cf367b24b36b2c3654224fd77f0
msgid "Note that you can redirect standard output and error streams as all commands support the ``stdout`` and ``stderr`` options. For example, you could write::"
msgstr ""

#: ../../ref/exceptions.txt:3
# cf078582ad1543fb8955b28541b8129f
msgid "Django Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:6
# 9514233d1f5c4aca9204ed075c52ced9
msgid "Django raises some Django specific exceptions as well as many standard Python exceptions."
msgstr ""

#: ../../ref/exceptions.txt:10
# 172f3e0019ff49e19ec1f3807adc1ca7
msgid "Django-specific Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:16
# a1e8b621aee9444fa78c39f85f610567
msgid "ObjectDoesNotExist and DoesNotExist"
msgstr ""

#: ../../ref/exceptions.txt:20
# 25413f8dce8c420689275aaa9c0d2a0a
msgid "The :exc:`DoesNotExist` exception is raised when an object is not found for the given parameters of a query."
msgstr ""

#: ../../ref/exceptions.txt:23
# 852ee40759bf4a8b89321e795ce4ce0b
msgid ":exc:`ObjectDoesNotExist` is defined in :mod:`django.core.exceptions`. :exc:`DoesNotExist` is a subclass of the base :exc:`ObjectDoesNotExist` exception that is provided on every model class as a way of identifying the specific type of object that could not be found."
msgstr ""

#: ../../ref/exceptions.txt:28
# 617254db00ee4da08ac84674ea58f416
msgid "See :meth:`~django.db.models.query.QuerySet.get()` for further information on :exc:`ObjectDoesNotExist` and :exc:`DoesNotExist`."
msgstr ""

#: ../../ref/exceptions.txt:32
# 37dd1d912bb54dcab642f86bc1c7e359
msgid "MultipleObjectsReturned"
msgstr ""

#: ../../ref/exceptions.txt:35
# ba0dce218c71483296b7587d6e546289
msgid "The :exc:`MultipleObjectsReturned` exception is raised by a query if only one object is expected, but multiple objects are returned. A base version of this exception is provided in :mod:`django.core.exceptions`; each model class contains a subclassed version that can be used to identify the specific object type that has returned multiple objects."
msgstr ""

#: ../../ref/exceptions.txt:41
# 7536d3a142eb4d529e57697f52b1caa6
msgid "See :meth:`~django.db.models.query.QuerySet.get()` for further information."
msgstr ""

#: ../../ref/exceptions.txt:44
# f399c5c876e54ab798f0f27f796dc169
msgid "SuspiciousOperation"
msgstr ""

#: ../../ref/exceptions.txt:47
# 82688461a77f4410b75842d836d6d08e
msgid "The :exc:`SuspiciousOperation` exception is raised when a user has performed an operation that should be considered suspicious from a security perspective, such as tampering with a session cookie."
msgstr ""

#: ../../ref/exceptions.txt:52
# 17bfc815f7034fc1a3b5575b23b730c9
msgid "PermissionDenied"
msgstr ""

#: ../../ref/exceptions.txt:55
# 07e247847d864a629655b4306b8860fe
msgid "The :exc:`PermissionDenied` exception is raised when a user does not have permission to perform the action requested."
msgstr ""

#: ../../ref/exceptions.txt:59
# 49c30e2aeae349d6bf0fd19be3f3014b
msgid "ViewDoesNotExist"
msgstr ""

#: ../../ref/exceptions.txt:62
# d731e9b212fe4d70805a6eb95c669cd3
msgid "The :exc:`ViewDoesNotExist` exception is raised by :mod:`django.core.urlresolvers` when a requested view does not exist."
msgstr ""

#: ../../ref/exceptions.txt:66
# bd8f2a570f1d4862909d82b997b0254f
msgid "MiddlewareNotUsed"
msgstr ""

#: ../../ref/exceptions.txt:69
# 7a3c33e8d7fa4ee9aa7b0c8f952355ce
msgid "The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not used in the server configuration."
msgstr ""

#: ../../ref/exceptions.txt:73
# 9f530685740c4bbe96a1783b854f8e77
msgid "ImproperlyConfigured"
msgstr ""

#: ../../ref/exceptions.txt:76
# 74f854f8d906493b9d38c675e76dc919
msgid "The :exc:`ImproperlyConfigured` exception is raised when Django is somehow improperly configured -- for example, if a value in ``settings.py`` is incorrect or unparseable."
msgstr ""

#: ../../ref/exceptions.txt:81
# 4b79d5d9cfbf49d08055f58dba905b1b
msgid "FieldError"
msgstr ""

#: ../../ref/exceptions.txt:84
# a21e4ea719514340984d6c8724ef499d
msgid "The :exc:`FieldError` exception is raised when there is a problem with a model field. This can happen for several reasons:"
msgstr ""

#: ../../ref/exceptions.txt:87
# 5ba326550d9741d9a8f01f21f4e2da98
msgid "A field in a model clashes with a field of the same name from an abstract base class"
msgstr ""

#: ../../ref/exceptions.txt:89
# e038c9ac238247eea04a3580ee1833b3
msgid "An infinite loop is caused by ordering"
msgstr ""

#: ../../ref/exceptions.txt:90
# b737d9b28651448b87ec44918bf87708
msgid "A keyword cannot be parsed from the filter parameters"
msgstr ""

#: ../../ref/exceptions.txt:91
# 371871902913406a967dbc0bc765351e
msgid "A field cannot be determined from a keyword in the query parameters"
msgstr ""

#: ../../ref/exceptions.txt:93
# 29694c4cb1044acc9110e2e7ff61f229
msgid "A join is not permitted on the specified field"
msgstr ""

#: ../../ref/exceptions.txt:94
# 3149b4f8291742fe89e84654d121cb8f
msgid "A field name is invalid"
msgstr ""

#: ../../ref/exceptions.txt:95
# 9dadf56799ff48a2a29ff0f66ca14074
msgid "A query contains invalid order_by arguments"
msgstr ""

#: ../../ref/exceptions.txt:98
# 236da9b2ddd04668b9c55fe25c0ed19f
msgid "ValidationError"
msgstr ""

#: ../../ref/exceptions.txt:101
# 95e501b68f6448e7b4f01a80ce9b2f38
msgid "The :exc:`ValidationError` exception is raised when data fails form or model field validation. For more information about validation, see :doc:`Form and Field Validation </ref/forms/validation>`, :ref:`Model Field Validation <validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""

#: ../../ref/exceptions.txt:110
# e0dc24d17eaa441e8a964d8fa76fa136
msgid "NoReverseMatch"
msgstr ""

#: ../../ref/exceptions.txt:113
# b4931ceadd344b3692b7cee9c5362eee
msgid "The :exc:`NoReverseMatch` exception is raised by :mod:`django.core.urlresolvers` when a matching URL in your URLconf cannot be identified based on the parameters supplied."
msgstr ""

#: ../../ref/exceptions.txt:120
# aff0573643cb4483a57e856cc1048ebf
msgid "Database Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:122
# c761ee4ed5154d15b57645f7a88e109e
msgid "Django wraps the standard database exceptions :exc:`DatabaseError` and :exc:`IntegrityError` so that your Django code has a guaranteed common implementation of these classes. These database exceptions are provided in :mod:`django.db`."
msgstr ""

#: ../../ref/exceptions.txt:130
# 308a29e210ad4d6a840da06dac6a84e6
msgid "The Django wrappers for database exceptions behave exactly the same as the underlying database exceptions. See :pep:`249`, the Python Database API Specification v2.0, for further information."
msgstr ""

#: ../../ref/exceptions.txt:137
# 42738a59dbbb4debb06cb19c575ea619
msgid "Transaction Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:141
# 4286c498f6eb42fa8ad596ba42460f9d
msgid "The :exc:`TransactionManagementError` is raised for any and all problems related to database transactions. It is available from :mod:`django.db.transaction`."
msgstr ""

#: ../../ref/exceptions.txt:146
# 7fcc4b902e614f2cbb3e7e3da1903f2a
msgid "Python Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:148
# ba8744872e5744da9e811e2937bb6cc1
msgid "Django raises built-in Python exceptions when appropriate as well. See the Python documentation for further information on the built-in :mod:`exceptions`."
msgstr ""

#: ../../ref/files/file.txt:2
# d6e699bba23047e696cf2c659c85ec2a
msgid "The ``File`` object"
msgstr ""

#: ../../ref/files/file.txt:4
# ed14fe8da91649d0937789207fc9b175
msgid "The :mod:`django.core.files` module and its submodules contain built-in classes for basic file handling in Django."
msgstr ""

#: ../../ref/files/file.txt:10
# 260caf443522459697b93887b2158a8f
msgid "The ``File`` Class"
msgstr ""

#: ../../ref/files/file.txt:14
# 1122a5fbf36c4f96be0e8e7fb7e5c151
msgid "The :class:`File` is a thin wrapper around Python's built-in file object with some Django-specific additions. Internally, Django uses this class any time it needs to represent a file."
msgstr ""

#: ../../ref/files/file.txt:18
# 4deecc849ae5449693e85aa3058cd41f
msgid ":class:`File` objects have the following attributes and methods:"
msgstr ""

#: ../../ref/files/file.txt:22
# 232fdf66796a4a45a6fce0b58429ddcc
msgid "The name of file including the relative path from :setting:`MEDIA_ROOT`."
msgstr ""

#: ../../ref/files/file.txt:27
# b570e95782574431890d3bb786a3ef74
msgid "The size of the file in bytes."
msgstr ""

#: ../../ref/files/file.txt:31
# eb1923ebc2024ac0a7d5881d0481aa7c
msgid "The underlying Python ``file`` object passed to :class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/file.txt:36
# bc9ee605d0a341d6b91e8879ca704492
msgid "The read/write mode for the file."
msgstr ""

#: ../../ref/files/file.txt:40
# 514123a6be784c008eb87d5ef2bee1ac
msgid "Open or reopen the file (which by definition also does ``File.seek(0)``). The ``mode`` argument allows the same values as Python's standard ``open()``."
msgstr ""

#: ../../ref/files/file.txt:44
# 361ff9bddcd3456faece711d2c1076dd
msgid "When reopening a file, ``mode`` will override whatever mode the file was originally opened with; ``None`` means to reopen with the original mode."
msgstr ""

#: ../../ref/files/file.txt:50
# d461f92d8c544bd1b006d7656a836eab
msgid "Read content from the file. The optional ``size`` is the number of bytes to read; if not specified, the file will be read to the end."
msgstr ""

#: ../../ref/files/file.txt:55
# c06a97761a81487198fed271b75cf0f2
msgid "Iterate over the file yielding one line at a time."
msgstr ""

#: ../../ref/files/file.txt:59
# ebb2e0b5428c480398cba2e1e8f1d1b9
msgid "Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` defaults to 64 KB."
msgstr ""

#: ../../ref/files/file.txt:62
# 38ed95ac6f914bdabd49453c7f5bdf65
msgid "This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory."
msgstr ""

#: ../../ref/files/file.txt:67
# 7a54f7c4673d4ce784a42fec0d439088
msgid "Returns ``True`` if the file is large enough to require multiple chunks to access all of its content give some ``chunk_size``."
msgstr ""

#: ../../ref/files/file.txt:72
# 590f748e4038406c8b7a1c9fdc7b2d75
msgid "Writes the specified content string to the file. Depending on the storage system behind the scenes, this content might not be fully committed until ``close()`` is called on the file."
msgstr ""

#: ../../ref/files/file.txt:78
# 4c08736fdfde40fea9175b925dce014a
msgid "Close the file."
msgstr ""

#: ../../ref/files/file.txt:80
# d960bc5a21294219af6f1b43fbc6a59c
msgid "In addition to the listed methods, :class:`~django.core.files.File` exposes the following attributes and methods of the underlying ``file`` object: ``encoding``, ``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, ``readlines``, ``seek``, ``softspace``, ``tell``, ``truncate``, ``writelines``, ``xreadlines``."
msgstr ""

#: ../../ref/files/file.txt:89
# b78b2c4b80db41cfa796a8c6658e3b1b
msgid "The ``ContentFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:93
# 7ab3ac3c3ed746eca7b92ea3feb4519c
msgid "The ``ContentFile`` class inherits from :class:`~django.core.files.File`, but unlike :class:`~django.core.files.File` it operates on string content (bytes also supported), rather than an actual file. For example::"
msgstr ""

#: ../../ref/files/file.txt:110
# 8697d01ab5a24f30acb6efb65b5ae478
msgid "The ``ImageFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:114
# f214dbe785ce407fa911989d69139db6
msgid "Django provides a built-in class specifically for images. :class:`django.core.files.images.ImageFile` inherits all the attributes and methods of :class:`~django.core.files.File`, and additionally provides the following:"
msgstr ""

#: ../../ref/files/file.txt:121
# 2dce53c152b84766b8fdafdfe6a717ea
msgid "Width of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:125
# b3888c6ab00c43ceae4ea92ed8c8b58b
msgid "Height of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:130
# b45ffce8bc8f42e495babe32ee8fa4e2
msgid "Additional methods on files attached to objects"
msgstr ""

#: ../../ref/files/file.txt:132
# 8eca1d74fadb4ede9c3b6403546b0fba
msgid "Any :class:`File` that's associated with an object (as with ``Car.photo``, below) will also have a couple of extra methods:"
msgstr ""

#: ../../ref/files/file.txt:137
# 5d6b4eab1e1b4058920ccb64837184ed
msgid "Saves a new file with the file name and contents provided. This will not replace the existing file, but will create a new file and update the object to point to it. If ``save`` is ``True``, the model's ``save()`` method will be called once the file is saved. That is, these two lines::"
msgstr ""

#: ../../ref/files/file.txt:145
# 7bbb26e6976d46c5abc0672f43591fa8
msgid "are the same as this one line::"
msgstr ""

#: ../../ref/files/file.txt:149
# 554d0a2295bf403c8d1715ba7344cdcc
msgid "Note that the ``content`` argument must be an instance of either :class:`File` or of a subclass of :class:`File`, such as :class:`ContentFile`."
msgstr ""

#: ../../ref/files/file.txt:155
# 97dd504c96014249a231abe50cf4e6f2
msgid "Removes the file from the model instance and deletes the underlying file. If ``save`` is ``True``, the model's ``save()`` method will be called once the file is deleted."
msgstr ""

#: ../../ref/files/index.txt:3
# f3fbdb053bf848c5a28aeb75f3b948ef
msgid "File handling"
msgstr ""

#: ../../ref/files/storage.txt:2
# 063d29519cb7415fad4a716eab5a86e7
msgid "File storage API"
msgstr ""

#: ../../ref/files/storage.txt:7
# a960e0a51eda485f8cbb376bcc476011
msgid "Getting the current storage class"
msgstr ""

#: ../../ref/files/storage.txt:9
# 0cc7215f8f4241daa0398e922c76d5fe
msgid "Django provides two convenient ways to access the current storage class:"
msgstr ""

#: ../../ref/files/storage.txt:13
# a46dc4410ade4d4f9d44c3b4e61c5665
msgid ":class:`~django.core.files.storage.DefaultStorage` provides lazy access to the current default storage system as defined by :setting:`DEFAULT_FILE_STORAGE`. :class:`DefaultStorage` uses :func:`~django.core.files.storage.get_storage_class` internally."
msgstr ""

#: ../../ref/files/storage.txt:20
# 160cee249c00493899e8e82616ba69f6
msgid "Returns a class or module which implements the storage API."
msgstr ""

#: ../../ref/files/storage.txt:22
# beaa9d04a6b742c4b6f5f859e067a157
msgid "When called without the ``import_path`` parameter ``get_storage_class`` will return the current default storage system as defined by :setting:`DEFAULT_FILE_STORAGE`. If ``import_path`` is provided, ``get_storage_class`` will attempt to import the class or module from the given path and will return it if successful. An exception will be raised if the import is unsuccessful."
msgstr ""

#: ../../ref/files/storage.txt:30
# 355e8edf6b964434b2e23fa676ac2a69
msgid "The FileSystemStorage Class"
msgstr ""

#: ../../ref/files/storage.txt:34
# 6591a00ad1084d218f751fd579d227ec
msgid "The :class:`~django.core.files.storage.FileSystemStorage` class implements basic file storage on a local filesystem. It inherits from :class:`~django.core.files.storage.Storage` and provides implementations for all the public methods thereof."
msgstr ""

#: ../../ref/files/storage.txt:41
# bce3ca45436940aab3e46682b54adfe7
msgid "The :class:`FileSystemStorage.delete` method will not raise raise an exception if the given file name does not exist."
msgstr ""

#: ../../ref/files/storage.txt:45
# c833aac6da0942d995fb8bbce3b38e7f
msgid "The Storage Class"
msgstr ""

#: ../../ref/files/storage.txt:49
# 7c19b418ad8d4d7db4b9f3be15e41ba7
msgid "The :class:`~django.core.files.storage.Storage` class provides a standardized API for storing files, along with a set of default behaviors that all other storage systems can inherit or override as necessary."
msgstr ""

#: ../../ref/files/storage.txt:56
# 5cc14b8500984814884cdf637e90e107
msgid "Returns a ``datetime`` object containing the last accessed time of the file. For storage systems that aren't able to return the last accessed time this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:62
# e1055fc2f5d7486199fa895e62289b0c
msgid "Returns a ``datetime`` object containing the creation time of the file. For storage systems that aren't able to return the creation time this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:68
# 95826562c90e4739a9717c140fee8d28
msgid "Deletes the file referenced by ``name``. If deletion is not supported on the targest storage system this will raise ``NotImplementedError`` instead"
msgstr ""

#: ../../ref/files/storage.txt:74
# 6ffe30087d614f8a898b643de203aa37
msgid "Returns ``True`` if a file referenced by the given name already exists in the storage system, or ``False`` if the name is available for a new file."
msgstr ""

#: ../../ref/files/storage.txt:80
# 02b776e1299b4efd8c4b8beb843a48d3
msgid "Returns a filename based on the ``name`` parameter that's free and available for new content to be written to on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:87
# 7e72df98ae27458182bd72df1cfaf854
msgid "Returns a filename based on the ``name`` parameter that's suitable for use on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:92
# 94a49d737961436c89eddd92e465b402
msgid "Lists the contents of the specified path, returning a 2-tuple of lists; the first item being directories, the second item being files. For storage systems that aren't able to provide such a listing, this will raise a ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:99
# 14ddf6b697e149578bcd3e3222620526
msgid "Returns a ``datetime`` object containing the last modified time. For storage systems that aren't able to return the last modified time, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:105
# 8add94389c4642d98f6d30d6ad99de6a
msgid "Opens the file given by ``name``. Note that although the returned file is guaranteed to be a ``File`` object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned."
msgstr ""

#: ../../ref/files/storage.txt:112
# acc64b4804704a7bb458b3fc84fb8629
msgid "The local filesystem path where the file can be opened using Python's standard ``open()``. For storage systems that aren't accessible from the local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:118
# 11f493586fa54867a50ee7c4a399a59c
msgid "Saves a new file using the storage system, preferably with the name specified. If there already exists a file with this name ``name``, the storage system may modify the filename as necessary to get a unique name. The actual name of the stored file will be returned."
msgstr ""

#: ../../ref/files/storage.txt:123
# 839cfa312427420b92dcb573ec60f49e
msgid "The ``content`` argument must be an instance of :class:`django.core.files.File` or of a subclass of :class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/storage.txt:129
# aa6f2f10f1f141199a9b4e196a810610
msgid "Returns the total size, in bytes, of the file referenced by ``name``. For storage systems that aren't able to return the file size this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:135
# 8cf7436bed6843878a2588b942f084c1
msgid "Returns the URL where the contents of the file referenced by ``name`` can be accessed. For storage systems that don't support access by URL this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/forms/api.txt:3
# fb6eb5ee662d4c14a5c82924e2743caa
msgid "The Forms API"
msgstr ""

#: ../../ref/forms/api.txt:11
# 73bb98be0eeb4e33b2f51267f826725e
msgid "This document covers the gritty details of Django's forms API. You should read the :doc:`introduction to working with forms </topics/forms/index>` first."
msgstr ""

#: ../../ref/forms/api.txt:18
# a187e5cddb0b4a6e91f28f9e45f08196
msgid "Bound and unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:20
# 23a9e03ae9274b8c94d37ec8ce81f3f5
msgid "A :class:`Form` instance is either **bound** to a set of data, or **unbound**."
msgstr ""

#: ../../ref/forms/api.txt:22
# 81c748decdc44522984c917951242fb9
msgid "If it's **bound** to a set of data, it's capable of validating that data and rendering the form as HTML with the data displayed in the HTML."
msgstr ""

#: ../../ref/forms/api.txt:25
# 5d6e3c3a316a49759ef8090f39076a5d
msgid "If it's **unbound**, it cannot do validation (because there's no data to validate!), but it can still render the blank form as HTML."
msgstr ""

#: ../../ref/forms/api.txt:30
# 12bd784779f9466fa71f09e05e98e107
msgid "To create an unbound :class:`Form` instance, simply instantiate the class::"
msgstr ""

#: ../../ref/forms/api.txt:34
# 96d2dfcce4154b3b85869316e09a6093
msgid "To bind data to a form, pass the data as a dictionary as the first parameter to your :class:`Form` class constructor::"
msgstr ""

#: ../../ref/forms/api.txt:43
# e75bea22c1b5474fb51397a50f45133e
msgid "In this dictionary, the keys are the field names, which correspond to the attributes in your :class:`Form` class. The values are the data you're trying to validate. These will usually be strings, but there's no requirement that they be strings; the type of data you pass depends on the :class:`Field`, as we'll see in a moment."
msgstr ""

#: ../../ref/forms/api.txt:51
# a9b3525e3aff463caefe20ec3a72512c
msgid "If you need to distinguish between bound and unbound form instances at runtime, check the value of the form's :attr:`~Form.is_bound` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:61
# 5d9b5405b54e44cd8c86b8d0f0d4ad31
msgid "Note that passing an empty dictionary creates a *bound* form with empty data::"
msgstr ""

#: ../../ref/forms/api.txt:67
# 94935220079c4106b00302f1d9b5f2e3
msgid "If you have a bound :class:`Form` instance and want to change the data somehow, or if you want to bind an unbound :class:`Form` instance to some data, create another :class:`Form` instance. There is no way to change data in a :class:`Form` instance. Once a :class:`Form` instance has been created, you should consider its data immutable, whether it has data or not."
msgstr ""

#: ../../ref/forms/api.txt:74
# 35f5138545c541d49503e2d964cb67e1
msgid "Using forms to validate data"
msgstr ""

#: ../../ref/forms/api.txt:78
# 1950e634bf8c4603b65c4dec0b919ad3
msgid "The primary task of a :class:`Form` object is to validate data. With a bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run validation and return a boolean designating whether the data was valid::"
msgstr ""

#: ../../ref/forms/api.txt:90
# 6e829f1875d54d9390ea74537469f27a
msgid "Let's try with some invalid data. In this case, ``subject`` is blank (an error, because all fields are required by default) and ``sender`` is not a valid email address::"
msgstr ""

#: ../../ref/forms/api.txt:104
# 42c239ae986e43e1af698316e836c6dc
msgid "Access the :attr:`~Form.errors` attribute to get a dictionary of error messages::"
msgstr ""

#: ../../ref/forms/api.txt:110
# a0e9db9ed80745d39291fc52ddd0f0e9
msgid "In this dictionary, the keys are the field names, and the values are lists of Unicode strings representing the error messages. The error messages are stored in lists because a field can have multiple error messages."
msgstr ""

#: ../../ref/forms/api.txt:114
# 657cffe0fbd14750af39deb5c761a71b
msgid "You can access :attr:`~Form.errors` without having to call :meth:`~Form.is_valid` first. The form's data will be validated the first time either you call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""

#: ../../ref/forms/api.txt:118
# 4e84cf21869c4e54b65b0ac771e883bd
msgid "The validation routines will only get called once, regardless of how many times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This means that if validation has side effects, those side effects will only be triggered once."
msgstr ""

#: ../../ref/forms/api.txt:123
# 96ffef8752c24e7d8200c4babaf1c75d
msgid "Behavior of unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:125
# 097652e84fac4c79bbc68c73054a06b3
msgid "It's meaningless to validate a form with no data, but, for the record, here's what happens with unbound forms::"
msgstr ""

#: ../../ref/forms/api.txt:135
# 39e9d22ab55c437c9bbbc317ec38d759
msgid "Dynamic initial values"
msgstr ""

#: ../../ref/forms/api.txt:139
# b51ab674e507482d9f2d28291970071f
msgid "Use :attr:`~Form.initial` to declare the initial value of form fields at runtime. For example, you might want to fill in a ``username`` field with the username of the current session."
msgstr ""

#: ../../ref/forms/api.txt:143
# df5a81c16ce64ad09772d38caff29e07
msgid "To accomplish this, use the :attr:`~Form.initial` argument to a :class:`Form`. This argument, if given, should be a dictionary mapping field names to initial values. Only include the fields for which you're specifying an initial value; it's not necessary to include every field in your form. For example::"
msgstr ""

#: ../../ref/forms/api.txt:150
# 972a7c05fc8e4ba5afbd4f85230144f9
msgid "These values are only displayed for unbound forms, and they're not used as fallback values if a particular value isn't provided."
msgstr ""

#: ../../ref/forms/api.txt:153
# f7018454108a46029f62763b9bc4251a
msgid "Note that if a :class:`~django.forms.fields.Field` defines :attr:`~Form.initial` *and* you include ``initial`` when instantiating the ``Form``, then the latter ``initial`` will have precedence. In this example, ``initial`` is provided both at the field level and at the form instance level, and the latter gets precedence::"
msgstr ""

#: ../../ref/forms/api.txt:170
# bf01d47b70d84002aca1a0ec0efc0917
msgid "Accessing \"clean\" data"
msgstr ""

#: ../../ref/forms/api.txt:174
# bc279b114ecd4a2da4297d106444a3b5
msgid "Each field in a :class:`Form` class is responsible not only for validating data, but also for \"cleaning\" it -- normalizing it to a consistent format. This is a nice feature, because it allows data for a particular field to be input in a variety of ways, always resulting in consistent output."
msgstr ""

#: ../../ref/forms/api.txt:179
# a11d19e1f3a94f7581c1040b64fd2c20
msgid "For example, :class:`~django.forms.DateField` normalizes input into a Python ``datetime.date`` object. Regardless of whether you pass it a string in the format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other formats, ``DateField`` will always normalize it to a ``datetime.date`` object as long as it's valid."
msgstr ""

#: ../../ref/forms/api.txt:185
# 4b81af24436d43f991e49193af62c1d8
msgid "Once you've created a :class:`~Form` instance with a set of data and validated it, you can access the clean data via its ``cleaned_data`` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:198
# 9140eb443e894ccc94cd47a321285156
msgid "Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- always cleans the input into a Unicode string. We'll cover the encoding implications later in this document."
msgstr ""

#: ../../ref/forms/api.txt:202
# 5c392f001c664eb38d972aa346236edb
msgid "If your data does *not* validate, the ``cleaned_data`` dictionary contains only the valid fields::"
msgstr ""

#: ../../ref/forms/api.txt:217
# 82e9df4f8fbe4c8db69e19e2407f1bc4
msgid "Until Django 1.5, the ``cleaned_data`` attribute wasn't defined at all when the ``Form`` didn't validate."
msgstr ""

#: ../../ref/forms/api.txt:220
# b4f1f2cc5b9e492ba7f0c76c0b9fb810
msgid "``cleaned_data`` will always *only* contain a key for fields defined in the ``Form``, even if you pass extra data when you define the ``Form``. In this example, we pass a bunch of extra fields to the ``ContactForm`` constructor, but ``cleaned_data`` contains only the form's fields::"
msgstr ""

#: ../../ref/forms/api.txt:238
# c508c9a57196497ab14fff1804ce71fd
msgid "When the ``Form`` is valid, ``cleaned_data`` will include a key and value for *all* its fields, even if the data didn't include a value for some optional fields. In this example, the data dictionary doesn't include a value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an empty value::"
msgstr ""

#: ../../ref/forms/api.txt:254
# aef4094bf2934818b984fa3f7069c7ec
msgid "In this above example, the ``cleaned_data`` value for ``nick_name`` is set to an empty string, because ``nick_name`` is ``CharField``, and ``CharField``\\s treat empty values as an empty string. Each field type knows what its \"blank\" value is -- e.g., for ``DateField``, it's ``None`` instead of the empty string. For full details on each field's behavior in this case, see the \"Empty value\" note for each field in the \"Built-in ``Field`` classes\" section below."
msgstr ""

#: ../../ref/forms/api.txt:261
# f3420338b2894a4e81786698d1358aa2
msgid "You can write code to perform validation for particular form fields (based on their name) or for the form as a whole (considering combinations of various fields). More information about this is in :doc:`/ref/forms/validation`."
msgstr ""

#: ../../ref/forms/api.txt:266
# 9eaa7a2c24644d25bcda116299ea79bd
msgid "Outputting forms as HTML"
msgstr ""

#: ../../ref/forms/api.txt:268
# 8f2222bb75574e1a9231ad8b4cb6ab6d
msgid "The second task of a ``Form`` object is to render itself as HTML. To do so, simply ``print`` it::"
msgstr ""

#: ../../ref/forms/api.txt:278
# c9fc2ab5ab9d43279465c6d3ae5d0afe
msgid "If the form is bound to data, the HTML output will include that data appropriately. For example, if a field is represented by an ``<input type=\"text\">``, the data will be in the ``value`` attribute. If a field is represented by an ``<input type=\"checkbox\">``, then that HTML will include ``checked=\"checked\"`` if appropriate::"
msgstr ""

#: ../../ref/forms/api.txt:295
# 551810f7447c4674919fd2d3f633ad48
msgid "This default output is a two-column HTML table, with a ``<tr>`` for each field. Notice the following:"
msgstr ""

#: ../../ref/forms/api.txt:298
# 36a10678277c4ff3821d1e108b9ba37a
msgid "For flexibility, the output does *not* include the ``<table>`` and ``</table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags or an ``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""

#: ../../ref/forms/api.txt:302
# 0d410a1857cd49a5a42361454f33e83e
msgid "Each field type has a default HTML representation. ``CharField`` and ``EmailField`` are represented by an ``<input type=\"text\">``. ``BooleanField`` is represented by an ``<input type=\"checkbox\">``. Note these are merely sensible defaults; you can specify which HTML to use for a given field by using widgets, which we'll explain shortly."
msgstr ""

#: ../../ref/forms/api.txt:308
# eb302f33b4ed4cabb4f231185d8c6656
msgid "The HTML ``name`` for each tag is taken directly from its attribute name in the ``ContactForm`` class."
msgstr ""

#: ../../ref/forms/api.txt:311
# 7cda087d9a374330a9234a1664378154
msgid "The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and ``'Cc myself:'`` is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Again, note these are merely sensible defaults; you can also specify labels manually."
msgstr ""

#: ../../ref/forms/api.txt:316
# ace438257b374814a904cddbcb68fa1f
msgid "Each text label is surrounded in an HTML ``<label>`` tag, which points to the appropriate form field via its ``id``. Its ``id``, in turn, is generated by prepending ``'id_'`` to the field name. The ``id`` attributes and ``<label>`` tags are included in the output by default, to follow best practices, but you can change that behavior."
msgstr ""

#: ../../ref/forms/api.txt:322
# 21066946eb14417dae9426c458208cc3
msgid "Although ``<table>`` output is the default output style when you ``print`` a form, other output styles are available. Each style is available as a method on a form object, and each rendering method returns a Unicode object."
msgstr ""

#: ../../ref/forms/api.txt:327
# 15539dd3965440fe98ce0e87cb74ae15
msgid "``as_p()``"
msgstr ""

#: ../../ref/forms/api.txt:331
# 027158241f8742989f1dbdef8ed2d53e
msgid "``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` containing one field::"
msgstr ""

#: ../../ref/forms/api.txt:344
# aea9cece87d14f2487e6ce2863d7bf01
msgid "``as_ul()``"
msgstr ""

#: ../../ref/forms/api.txt:348
# 7135cd4bfd2a459d9e0746f798fca417
msgid "``as_ul()`` renders the form as a series of ``<li>`` tags, with each ``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</ul>``, so that you can specify any HTML attributes on the ``<ul>`` for flexibility::"
msgstr ""

#: ../../ref/forms/api.txt:363
# 39845cd6dcbf4f7c83b06991ed5039c4
msgid "``as_table()``"
msgstr ""

#: ../../ref/forms/api.txt:367
# c4fb088ad98247cc83267fc615d89b97
msgid "Finally, ``as_table()`` outputs the form as an HTML ``<table>``. This is exactly the same as ``print``. In fact, when you ``print`` a form object, it calls its ``as_table()`` method behind the scenes::"
msgstr ""

#: ../../ref/forms/api.txt:381
# 55521349500e4f0bb74a7f7d48a7cf5b
msgid "Styling required or erroneous form rows"
msgstr ""

#: ../../ref/forms/api.txt:383
# c3d2de59f64a475aaea9d05d13c5c92b
msgid "It's pretty common to style form rows and fields that are required or have errors. For example, you might want to present required form rows in bold and highlight errors in red."
msgstr ""

#: ../../ref/forms/api.txt:387
# 0c86255cb7aa489bb811c6ef139bd8ed
msgid "The :class:`Form` class has a couple of hooks you can use to add ``class`` attributes to required rows or to rows with errors: simply set the :attr:`Form.error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:398
# 91a51c64ccfa4afcb661a9f3a495e8f8
msgid "Once you've done that, rows will be given ``\"error\"`` and/or ``\"required\"`` classes, as needed. The HTML will look something like::"
msgstr ""

#: ../../ref/forms/api.txt:411
# baeba01e1432421487cb45c09b22b4f7
msgid "Configuring HTML ``<label>`` tags"
msgstr ""

#: ../../ref/forms/api.txt:413
# 0fcd2aaf99044a84b3422bd704e9de43
msgid "An HTML ``<label>`` tag designates which label text is associated with which form element. This small enhancement makes forms more usable and more accessible to assistive devices. It's always a good idea to use ``<label>`` tags."
msgstr ""

#: ../../ref/forms/api.txt:417
# dbeb56a586494ea2a61e23200debbe6c
msgid "By default, the form rendering methods include HTML ``id`` attributes on the form elements and corresponding ``<label>`` tags around the labels. The ``id`` attribute values are generated by prepending ``id_`` to the form field names. This behavior is configurable, though, if you want to change the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags entirely."
msgstr ""

#: ../../ref/forms/api.txt:423
# 9e99b0bc22cc4275985076a8ee8f15d3
msgid "Use the ``auto_id`` argument to the ``Form`` constructor to control the label and ``id`` behavior. This argument must be ``True``, ``False`` or a string."
msgstr ""

#: ../../ref/forms/api.txt:426
# afc9a54151474824a5a97d8dce8098b7
msgid "If ``auto_id`` is ``False``, then the form output will not include ``<label>`` tags nor ``id`` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:446
# 0e9a4e18ae724a16a08b8eb446792b3a
msgid "If ``auto_id`` is set to ``True``, then the form output *will* include ``<label>`` tags and will simply use the field name as its ``id`` for each form field::"
msgstr ""

#: ../../ref/forms/api.txt:467
# f62eeaa6433c462298c9e4fdd3ffd313
msgid "If ``auto_id`` is set to a string containing the format character ``'%s'``, then the form output will include ``<label>`` tags, and will generate ``id`` attributes based on the format string. For example, for a format string ``'field_%s'``, a field named ``subject`` will get the ``id`` value ``'field_subject'``. Continuing our example::"
msgstr ""

#: ../../ref/forms/api.txt:490
# d2ff8290e4284102849f6534ee5b029e
msgid "If ``auto_id`` is set to any other true value -- such as a string that doesn't include ``%s`` -- then the library will act as if ``auto_id`` is ``True``."
msgstr ""

#: ../../ref/forms/api.txt:493
# c4c40f4daa7b47d6a9fefb352c8de52f
msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr ""

#: ../../ref/forms/api.txt:495
# cbef76fa36ca4be780927050471048e5
msgid "Normally, a colon (``:``) will be appended after any label name when a form is rendered. It's possible to change the colon to another character, or omit it entirely, using the ``label_suffix`` parameter::"
msgstr ""

#: ../../ref/forms/api.txt:512
# c1e436075bfb4c8bb6508271a35760d9
msgid "Note that the label suffix is added only if the last character of the label isn't a punctuation character (``.``, ``!``, ``?`` or ``:``)"
msgstr ""

#: ../../ref/forms/api.txt:516
# c98ab9a828c242cfb0b31c0ecbed5805
msgid "Notes on field ordering"
msgstr ""

#: ../../ref/forms/api.txt:518
# 737ea858dff447c2b45edd06c5f66389
msgid "In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are displayed in the order in which you define them in your form class. For example, in the ``ContactForm`` example, the fields are defined in the order ``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML output, just change the order in which those fields are listed in the class."
msgstr ""

#: ../../ref/forms/api.txt:525
# c3cc4e24a9ce4cbd84e58ec7893120f2
msgid "How errors are displayed"
msgstr ""

#: ../../ref/forms/api.txt:527
# c5c6316678134d299caf3dada9438acf
msgid "If you render a bound ``Form`` object, the act of rendering will automatically run the form's validation if it hasn't already happened, and the HTML output will include the validation errors as a ``<ul class=\"errorlist\">`` near the field. The particular positioning of the error messages depends on the output method you're using::"
msgstr ""

#: ../../ref/forms/api.txt:557
# 47463fa220094de98316d9ab6d1bca5e
msgid "Customizing the error list format"
msgstr ""

#: ../../ref/forms/api.txt:559
# 85580f8d7da942dda2898ab570ebd361
msgid "By default, forms use ``django.forms.util.ErrorList`` to format validation errors. If you'd like to use an alternate class for displaying errors, you can pass that in at construction time::"
msgstr ""

#: ../../ref/forms/api.txt:580
# 964d40f83c0549e59fa1ca5650bc7939
msgid "More granular output"
msgstr ""

#: ../../ref/forms/api.txt:582
# b681dc55793a4874a028f2911a523a06
msgid "The ``as_p()``, ``as_ul()`` and ``as_table()`` methods are simply shortcuts for lazy developers -- they're not the only way a form object can be displayed."
msgstr ""

#: ../../ref/forms/api.txt:587
# fc91758cd41b49a6ab6aa0135c80f37d
msgid "Used to display HTML or access attributes for a single field of a :class:`Form` instance."
msgstr ""

#: ../../ref/forms/api.txt:590
# a39b378981dd414cb95aecc9417778a5
msgid "The :meth:`__unicode__` and :meth:`__str__` methods of this object displays the HTML for this field."
msgstr ""

#: ../../ref/forms/api.txt:593
# 5777dfc01ba24fceaaded085ce7bc9e3
msgid "To retrieve a single ``BoundField``, use dictionary lookup syntax on your form using the field's name as the key::"
msgstr ""

#: ../../ref/forms/api.txt:600
# 765b41f3f5a94ca88a6f3ceb2e5ab265
msgid "To retrieve all ``BoundField`` objects, iterate the form::"
msgstr ""

#: ../../ref/forms/api.txt:609
# 4079e5c6d3554a6cb934aacadfacc819
msgid "The field-specific output honors the form object's ``auto_id`` setting::"
msgstr ""

#: ../../ref/forms/api.txt:618
# e47a117a3bc34224943e8325a56968e5
msgid "For a field's list of errors, access the field's ``errors`` attribute."
msgstr ""

#: ../../ref/forms/api.txt:622
# 9a789e6b493d4590912d88a0d569b2e1
msgid "A list-like object that is displayed as an HTML ``<ul class=\"errorlist\">`` when printed::"
msgstr ""

#: ../../ref/forms/api.txt:642
# c13fa27c71364140b5962bd3c604c281
msgid "When you use Django's rendering shortcuts, CSS classes are used to indicate required form fields or fields that contain errors. If you're manually rendering a form, you can access these CSS classes using the ``css_classes`` method::"
msgstr ""

#: ../../ref/forms/api.txt:651
# eccb3e26781740428c5a701b7c993d15
msgid "If you want to provide some additional classes in addition to the error and required classes that may be required, you can provide those classes as an argument::"
msgstr ""

#: ../../ref/forms/api.txt:661
# 7dd58d1458784cadb0c14e34f6603e14
msgid "Use this method to render the raw value of this field as it would be rendered by a ``Widget``::"
msgstr ""

#: ../../ref/forms/api.txt:675
# 911e5bc30120446b9f5f588c1dc1641c
msgid "Binding uploaded files to a form"
msgstr ""

#: ../../ref/forms/api.txt:677
# 9ba0dbbe18f349c9b5ea4cce48471a55
msgid "Dealing with forms that have ``FileField`` and ``ImageField`` fields is a little more complicated than a normal form."
msgstr ""

#: ../../ref/forms/api.txt:680
# 96d23f4b30cb49bc9c9af46a7802fb08
msgid "Firstly, in order to upload files, you'll need to make sure that your ``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-data\"``::"
msgstr ""

#: ../../ref/forms/api.txt:686
# 68296758f70f4738b33442c9fb3921c2
msgid "Secondly, when you use the form, you need to bind the file data. File data is handled separately to normal form data, so when your form contains a ``FileField`` and ``ImageField``, you will need to specify a second argument when you bind your form. So if we extend our ContactForm to include an ``ImageField`` called ``mugshot``, we need to bind the file data containing the mugshot image::"
msgstr ""

#: ../../ref/forms/api.txt:702
# ec7da7b802674671897bb43a7a2895c1
msgid "In practice, you will usually specify ``request.FILES`` as the source of file data (just like you use ``request.POST`` as the source of form data)::"
msgstr ""

#: ../../ref/forms/api.txt:709
# 2627c73f55ce4d0da87f0d938de29bfb
msgid "Constructing an unbound form is the same as always -- just omit both form data *and* file data::"
msgstr ""

#: ../../ref/forms/api.txt:716
# dd591f7eb7464ebe98cb4f826a106722
msgid "Testing for multipart forms"
msgstr ""

#: ../../ref/forms/api.txt:718
# d04e7a7291cc44e98c4c6e1f840338af
msgid "If you're writing reusable views or templates, you may not know ahead of time whether your form is a multipart form or not. The ``is_multipart()`` method tells you whether the form requires multipart encoding for submission::"
msgstr ""

#: ../../ref/forms/api.txt:726
# fe2356cdfb4f4feab7f541201e5f0dcb
msgid "Here's an example of how you might use this in a template::"
msgstr ""

#: ../../ref/forms/api.txt:737
# b2fdd518d8774cb393ae04b0f3413cc1
msgid "Subclassing forms"
msgstr ""

#: ../../ref/forms/api.txt:739
# b506aa77202a4dba9b0f8c5d08a05afc
msgid "If you have multiple ``Form`` classes that share fields, you can use subclassing to remove redundancy."
msgstr ""

#: ../../ref/forms/api.txt:742
# a6c2876f38db444dbe8745c6a3243f39
msgid "When you subclass a custom ``Form`` class, the resulting subclass will include all fields of the parent class(es), followed by the fields you define in the subclass."
msgstr ""

#: ../../ref/forms/api.txt:746
# f92231e470f4433484b9f17dfccb638c
msgid "In this example, ``ContactFormWithPriority`` contains all the fields from ``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` fields are ordered first::"
msgstr ""

#: ../../ref/forms/api.txt:760
# 93543e7589034e3b812e97715150c101
msgid "It's possible to subclass multiple forms, treating forms as \"mix-ins.\" In this example, ``BeatleForm`` subclasses both ``PersonForm`` and ``InstrumentForm`` (in that order), and its field list includes the fields from the parent classes::"
msgstr ""

#: ../../ref/forms/api.txt:782
# af3df381478d405ebbc5d149325e3b75
msgid "Prefixes for forms"
msgstr ""

#: ../../ref/forms/api.txt:786
# 51b35ebe740c48d8be8906f928e733c5
msgid "You can put several Django forms inside one ``<form>`` tag. To give each ``Form`` its own namespace, use the ``prefix`` keyword argument::"
msgstr ""

#: ../../ref/forms/fields.txt:3
# fd94dbbc60d9402fa57756d360186ad9
msgid "Form fields"
msgstr ""

#: ../../ref/forms/fields.txt:12
# 53a95ccccff647d0b397ed389a93e502
msgid "When you create a ``Form`` class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks."
msgstr ""

#: ../../ref/forms/fields.txt:18
# aa9efb0e530b404b88760e4c123af80a
msgid "Although the primary way you'll use ``Field`` classes is in ``Form`` classes, you can also instantiate them and use them directly to get a better idea of how they work. Each ``Field`` instance has a ``clean()`` method, which takes a single argument and either raises a ``django.forms.ValidationError`` exception or returns the clean value::"
msgstr ""

#: ../../ref/forms/fields.txt:34
# 0c4869f51c424460820cd6c4b792988d
msgid "Core field arguments"
msgstr ""

#: ../../ref/forms/fields.txt:36
# 604ab752e41045a09492a57632a19c12
msgid "Each ``Field`` class constructor takes at least these arguments. Some ``Field`` classes take additional, field-specific arguments, but the following should *always* be accepted:"
msgstr ""

#: ../../ref/forms/fields.txt:41
# 0678abaaec9b42879b9b711a44aaf3f4
msgid "``required``"
msgstr ""

#: ../../ref/forms/fields.txt:45
# c7ca5bc4cc534e0991d77d090bb48cfc
msgid "By default, each ``Field`` class assumes the value is required, so if you pass an empty value -- either ``None`` or the empty string (``\"\"``) -- then ``clean()`` will raise a ``ValidationError`` exception::"
msgstr ""

#: ../../ref/forms/fields.txt:69
# ff9b05f6b63f4af4a74b91cfc67dcb4a
msgid "To specify that a field is *not* required, pass ``required=False`` to the ``Field`` constructor::"
msgstr ""

#: ../../ref/forms/fields.txt:86
# 78f73f4825a542d68b6972e54a606c7e
msgid "If a ``Field`` has ``required=False`` and you pass ``clean()`` an empty value, then ``clean()`` will return a *normalized* empty value rather than raising ``ValidationError``. For ``CharField``, this will be a Unicode empty string. For other ``Field`` classes, it might be ``None``. (This varies from field to field.)"
msgstr ""

#: ../../ref/forms/fields.txt:93
# 74939b3b7ab441349484eb66f359375d
msgid "``label``"
msgstr ""

#: ../../ref/forms/fields.txt:97
# b9641fcd31984efd8347ac5b18cdf6d7
msgid "The ``label`` argument lets you specify the \"human-friendly\" label for this field. This is used when the ``Field`` is displayed in a ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:100
# 2601b43a21984c7e802e59864c504060
msgid "As explained in \"Outputting forms as HTML\" above, the default label for a ``Field`` is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify ``label`` if that default behavior doesn't result in an adequate label."
msgstr ""

#: ../../ref/forms/fields.txt:105
# 631088370002498fa18c7ff04a56a845
msgid "Here's a full example ``Form`` that implements ``label`` for two of its fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:119
# 5a95d80a228f4318ad9a00a019faafa0
msgid "``initial``"
msgstr ""

#: ../../ref/forms/fields.txt:123
# dda28dbb347c4a87baa52ce3cc204619
msgid "The ``initial`` argument lets you specify the initial value to use when rendering this ``Field`` in an unbound ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:126
# 4a6f6a370dc14562b50bf423a0152e79
msgid "To specify dynamic initial data, see the :attr:`Form.initial` parameter."
msgstr ""

#: ../../ref/forms/fields.txt:128
# dfc00ecd15834f5082db2c8ba0c7fc5e
msgid "The use-case for this is when you want to display an \"empty\" form in which a field is initialized to a particular value. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:141
# a06b10013fea463292bd718022580078
msgid "You may be thinking, why not just pass a dictionary of the initial values as data when displaying the form? Well, if you do that, you'll trigger validation, and the HTML output will include any validation errors::"
msgstr ""

#: ../../ref/forms/fields.txt:156
# ec68db2aa0c3475da6c24e7c0e9632ca
msgid "This is why ``initial`` values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data."
msgstr ""

#: ../../ref/forms/fields.txt:159
# 9962f2058ca84687be32b1f4c2df6390
msgid "Also note that ``initial`` values are *not* used as \"fallback\" data in validation if a particular field's value is not given. ``initial`` values are *only* intended for initial form display::"
msgstr ""

#: ../../ref/forms/fields.txt:175
# b3acab3fa435492bb6ab27d85e536873
msgid "Instead of a constant, you can also pass any callable::"
msgstr ""

#: ../../ref/forms/fields.txt:183
# 36582004344c43e999b69f125d251f5b
msgid "The callable will be evaluated only when the unbound form is displayed, not when it is defined."
msgstr ""

#: ../../ref/forms/fields.txt:186
# cf0d2f457a15485dbeef32db9c5a066a
msgid "``widget``"
msgstr ""

#: ../../ref/forms/fields.txt:190
# cc861a0162b54f8d8bde2a9aac03dbf7
msgid "The ``widget`` argument lets you specify a ``Widget`` class to use when rendering this ``Field``. See :doc:`/ref/forms/widgets` for more information."
msgstr ""

#: ../../ref/forms/fields.txt:194
#: ../../ref/models/fields.txt:228
# f798ad52501c42e2bbe601816d13c1c3
# 480224f8ff894b47aa6bc72fe2535a08
msgid "``help_text``"
msgstr ""

#: ../../ref/forms/fields.txt:198
# b2b07f5761fa4511afd7a926ef8df247
msgid "The ``help_text`` argument lets you specify descriptive text for this ``Field``. If you provide ``help_text``, it will be displayed next to the ``Field`` when the ``Field`` is rendered by one of the convenience ``Form`` methods (e.g., ``as_ul()``)."
msgstr ""

#: ../../ref/forms/fields.txt:203
# 7c3f16534c914ee1959b9688a0026cb0
msgid "Here's a full example ``Form`` that implements ``help_text`` for two of its fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:229
#: ../../ref/models/fields.txt:215
# 54f13bdc89204471917d56d35efd9498
# cf8c5650295f4e7fa89f91f1db6ede84
msgid "``error_messages``"
msgstr ""

#: ../../ref/forms/fields.txt:233
# f2e8cc089470427fb9d769c15dbb8054
msgid "The ``error_messages`` argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override. For example, here is the default error message::"
msgstr ""

#: ../../ref/forms/fields.txt:243
# 9415e0d06b4d42dead6d055bd2e29f5e
msgid "And here is a custom error message::"
msgstr ""

#: ../../ref/forms/fields.txt:251
# 3f61f869d7a14c7bb3905006659cd484
msgid "In the `built-in Field classes`_ section below, each ``Field`` defines the error message keys it uses."
msgstr ""

#: ../../ref/forms/fields.txt:255
#: ../../ref/models/fields.txt:314
# b149f3ebed1940a8b75abe581db14736
# 4d934b1ec3f54623b6cf67835cec093d
msgid "``validators``"
msgstr ""

#: ../../ref/forms/fields.txt:259
# aa53612ae3d64daabdbc97d607f0b8fe
msgid "The ``validators`` argument lets you provide a list of validation functions for this field."
msgstr ""

#: ../../ref/forms/fields.txt:262
# a5cb98965b9b4fc2aa8808b7bd1efe7f
msgid "See the :doc:`validators documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/forms/fields.txt:265
# 8fc96d171fec468098495e706c0ef4a9
msgid "``localize``"
msgstr ""

#: ../../ref/forms/fields.txt:269
# b292cef036014038ba0fc13d3f383422
msgid "The ``localize`` argument enables the localization of form data, input as well as the rendered output."
msgstr ""

#: ../../ref/forms/fields.txt:272
# c604f369a1bc475ca46240c37a11effc
msgid "See the :ref:`format localization <format-localization>` documentation for more information."
msgstr ""

#: ../../ref/forms/fields.txt:278
# b66bfd44b8824bd78d04795d6705b16b
msgid "Built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:280
# 19f8be1b6ff64c3eaed9da614847bd2f
msgid "Naturally, the ``forms`` library comes with a set of ``Field`` classes that represent common validation needs. This section documents each built-in field."
msgstr ""

#: ../../ref/forms/fields.txt:283
# 4dc28b8a92864fb7980f28939dd375e5
msgid "For each field, we describe the default widget used if you don't specify ``widget``. We also specify the value returned when you provide an empty value (see the section on ``required`` above to understand what that means)."
msgstr ""

#: ../../ref/forms/fields.txt:288
#: ../../ref/models/fields.txt:349
# d2b50a3310994f689cd5bb8c636e6c84
# 6220a447ee6a41d8b6fb76630df8f08f
msgid "``BooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:292
# 3705bf4166e34b3396c835200808741e
msgid "Default widget: ``CheckboxInput``"
msgstr ""

#: ../../ref/forms/fields.txt:293
# b055c63476d14d93957eb7e7e796ffd8
msgid "Empty value: ``False``"
msgstr ""

#: ../../ref/forms/fields.txt:294
# 8c57c08df1a1423fb6dcd27e68675dc1
msgid "Normalizes to: A Python ``True`` or ``False`` value."
msgstr ""

#: ../../ref/forms/fields.txt:295
# 3827f8ab9ca74690a848c70e309e0160
msgid "Validates that the value is ``True`` (e.g. the check box is checked) if the field has ``required=True``."
msgstr ""

#: ../../ref/forms/fields.txt:297
# 06e12f6d042a451bb47f447f2d4e905c
msgid "Error message keys: ``required``"
msgstr ""

#: ../../ref/forms/fields.txt:301
# ae4ef67b2446441a8804b99f75751296
msgid "Since all ``Field`` subclasses have ``required=True`` by default, the validation condition here is important. If you want to include a boolean in your form that can be either ``True`` or ``False`` (e.g. a checked or unchecked checkbox), you must remember to pass in ``required=False`` when creating the ``BooleanField``."
msgstr ""

#: ../../ref/forms/fields.txt:308
#: ../../ref/models/fields.txt:362
# d66ed7b8fb5246ddbbaef34898a90830
# cc4db5572514470495f4a7b752d44964
msgid "``CharField``"
msgstr ""

#: ../../ref/forms/fields.txt:312
#: ../../ref/forms/fields.txt:457
#: ../../ref/forms/fields.txt:492
#: ../../ref/forms/fields.txt:583
#: ../../ref/forms/fields.txt:624
#: ../../ref/forms/fields.txt:647
#: ../../ref/forms/fields.txt:663
#: ../../ref/forms/fields.txt:744
#: ../../ref/forms/fields.txt:771
#: ../../ref/forms/fields.txt:786
#: ../../ref/forms/fields.txt:810
#: ../../ref/forms/fields.txt:832
#: ../../ref/forms/fields.txt:859
# c530c5528e7847018826cb8d4b89cb6f
# 1298dc432a584a00ab55ad7204f77ac5
# 4ad1634edefb488eb3f236aaeecad3b8
# 412918dd6bc94e638413eee1a9e21e8a
# 5151570d66114b5798a9875efec8c7ae
# 569dcd67a0a8417b905686667bcf0c38
# 1d1d86d4c00a4052979aa55d1719f7ab
# 69aa170e412e4fa4a6dba6abee113cd0
# 6105e03088a548e68a710adf251c10fd
# 77c5427fc9b84e949c227a9a6fdf8dff
# 34baf40f54f5463bacf0160efd729495
# dcfdab8a937f42c98fdda15a9b955a13
# bfad9d420f84459e8dd3a75797fa23f0
msgid "Default widget: ``TextInput``"
msgstr ""

#: ../../ref/forms/fields.txt:313
#: ../../ref/forms/fields.txt:333
#: ../../ref/forms/fields.txt:493
#: ../../ref/forms/fields.txt:648
#: ../../ref/forms/fields.txt:664
#: ../../ref/forms/fields.txt:745
#: ../../ref/forms/fields.txt:772
#: ../../ref/forms/fields.txt:811
#: ../../ref/forms/fields.txt:833
#: ../../ref/forms/fields.txt:860
# 66cb802c040d43b897ad6e768c00e137
# 3110bef0177a4d21aed895c8bf154a78
# 62dd8e015ce14d64a9198cfcf34ba630
# bcb91e347a8f4aaaa89a6be92b75581c
# b840b78722714276b06881c25b039dfc
# f09ab4f5dfdd463484e7d81e2749f2ea
# ba64abc23ccb464b9629ed4776ca6bbd
# 9aab911c77be4689ab29cbce07da2e27
# 708e2ba8983040139406182e07f5a623
# e2dc9c4b599941cbbf8b7eae926c0617
msgid "Empty value: ``''`` (an empty string)"
msgstr ""

#: ../../ref/forms/fields.txt:314
#: ../../ref/forms/fields.txt:334
#: ../../ref/forms/fields.txt:494
#: ../../ref/forms/fields.txt:649
#: ../../ref/forms/fields.txt:746
#: ../../ref/forms/fields.txt:773
#: ../../ref/forms/fields.txt:812
#: ../../ref/forms/fields.txt:834
# d831046345bc4cd7b747c6306e2a0027
# 348e7674233f410ba60df0ca39f47ae0
# 1019933c5d3c4d318df52df8bed08e77
# 6e4710b5c1b0448f948c95436b0c0181
# 6617ae38148f41bdbb8a15f82076c640
# b93ed5a200954efc9d56856532e05831
# 97f14afe05b840db88697806f9990f59
# 1d2dc06e9dd94631aa9cf14e48bae99a
msgid "Normalizes to: A Unicode object."
msgstr ""

#: ../../ref/forms/fields.txt:315
# 90dbd94fe4eb4feaa98239f9e72b7e4c
msgid "Validates ``max_length`` or ``min_length``, if they are provided. Otherwise, all inputs are valid."
msgstr ""

#: ../../ref/forms/fields.txt:317
# 4e39415011054540ba6958f202b8b4b0
msgid "Error message keys: ``required``, ``max_length``, ``min_length``"
msgstr ""

#: ../../ref/forms/fields.txt:319
# b49124a591b242a19a83fa5f740cfd6b
msgid "Has two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:324
# 239b6440b3744b79a7dc519fd71eb83d
msgid "If provided, these arguments ensure that the string is at most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:328
# 4dbb9fac17ed42b996f39cdbcffc276a
msgid "``ChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:332
#: ../../ref/forms/fields.txt:358
#: ../../ref/forms/fields.txt:536
#: ../../ref/forms/fields.txt:948
# a8d9dad7b0f242b688fa71e2f3fc70b5
# 2c70ab9d01a944e89ad7f023f461ccf7
# 575e517c6b1046fa979ae322ff0bfb9b
# 5405977c0e7f4b4f98ca93f6553aca90
msgid "Default widget: ``Select``"
msgstr ""

#: ../../ref/forms/fields.txt:335
# 4b5880872cd648c3ba0fd1f880d71bdf
msgid "Validates that the given value exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:336
#: ../../ref/forms/fields.txt:363
#: ../../ref/forms/fields.txt:540
#: ../../ref/forms/fields.txt:722
#: ../../ref/forms/fields.txt:952
# 7077bfc36982433eb04ae5d030d57c59
# 74ce013c477c44fdb364ff9fdf06087d
# 65541d9789d7490f8f8c2fa244fe4fd4
# bdec2e09fefc4b21894a282e65bf28f0
# da1a6f5e595c4fd19f2bfc0eb23a11b7
msgid "Error message keys: ``required``, ``invalid_choice``"
msgstr ""

#: ../../ref/forms/fields.txt:338
#: ../../ref/forms/fields.txt:703
#: ../../ref/forms/fields.txt:724
# aeb3c493adb140ceac5872ee65ec16bc
# 4c3f2a408813487a9bfcefbb3d030724
# 91d901fad7f3424ca027c93baebba301
msgid "The ``invalid_choice`` error message may contain ``%(value)s``, which will be replaced with the selected choice."
msgstr ""

#: ../../ref/forms/fields.txt:341
#: ../../ref/forms/fields.txt:839
#: ../../ref/forms/fields.txt:874
# f1803dd4428a48c5a8bf18b1582f792b
# 1cd51363f30c45fc8dc6334177f155aa
# 9445d06f22994dbfab7cb6dd316a42c8
msgid "Takes one extra required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:345
# 2c9ec9c7771d44f188cb92659d403521
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. This argument accepts the same formats as the ``choices`` argument to a model field. See the :ref:`model field reference documentation on choices <field-choices>` for more details."
msgstr ""

#: ../../ref/forms/fields.txt:351
# b1c873b67e1246ceac462e341fed2dc2
msgid "``TypedChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:355
# f223b9bc0014446f8429170e15ac7b53
msgid "Just like a :class:`ChoiceField`, except :class:`TypedChoiceField` takes two extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:359
#: ../../ref/forms/fields.txt:717
# c290a6d2742543f2bbd887ee08735c95
# 6b36047cabc94d4b87b3b62c658b78c6
msgid "Empty value: Whatever you've given as ``empty_value``"
msgstr ""

#: ../../ref/forms/fields.txt:360
# 589f6d97a9c842feb3d34ee94a706186
msgid "Normalizes to: A value of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:361
# d752d1c9ba084c12bd6eaceef9dada4f
msgid "Validates that the given value exists in the list of choices and can be coerced."
msgstr ""

#: ../../ref/forms/fields.txt:365
# da63f4d6dd1d46dab1eb46696d0259bc
msgid "Takes extra arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:369
# 5c219b7d5c53433d9cc95fd421697214
msgid "A function that takes one argument and returns a coerced value. Examples include the built-in ``int``, ``float``, ``bool`` and other types. Defaults to an identity function."
msgstr ""

#: ../../ref/forms/fields.txt:375
# 1b54a7d547f14a3fbb623f431c87c75f
msgid "The value to use to represent \"empty.\" Defaults to the empty string; ``None`` is another common choice here. Note that this value will not be coerced by the function given in the ``coerce`` argument, so choose it accordingly."
msgstr ""

#: ../../ref/forms/fields.txt:381
#: ../../ref/models/fields.txt:404
# a3af008ff9d942158115da87f79d7474
# dc5832e0483543fe9e49f7d7d27ba747
msgid "``DateField``"
msgstr ""

#: ../../ref/forms/fields.txt:385
# f0ac2aad9e2f4c5996ed24219520ceab
msgid "Default widget: ``DateInput``"
msgstr ""

#: ../../ref/forms/fields.txt:386
#: ../../ref/forms/fields.txt:425
#: ../../ref/forms/fields.txt:458
#: ../../ref/forms/fields.txt:509
#: ../../ref/forms/fields.txt:537
#: ../../ref/forms/fields.txt:584
#: ../../ref/forms/fields.txt:600
#: ../../ref/forms/fields.txt:625
#: ../../ref/forms/fields.txt:735
#: ../../ref/forms/fields.txt:787
#: ../../ref/forms/fields.txt:906
#: ../../ref/forms/fields.txt:949
# 4a2cb04f751b45e19aebc48b15bb4d0a
# 8b2474e0d1d14ec9b6b9f82d9c0e3851
# eb9114563e2d4a2d8b20be89421073e6
# 3b4b591c293d4349a9cf8ee4f9a60b43
# bc5e29c52f584252bd75d2864b84b8cb
# 79570830193c4a76ac026c27e3db4da9
# de9a889d4b5140fc97ef670aa28d6e57
# 210540dc270347e0a1be60a5a255d20b
# b2d92bcbc8a24312ae110c8316fccba0
# a6f7ac2e87494f339dbba7f9948f60d4
# d81c8d6683e847bca447856527369860
# 7bcfa9e937514f4f92de065bb8fd3fd9
msgid "Empty value: ``None``"
msgstr ""

#: ../../ref/forms/fields.txt:387
# d7e52f02afad4ce69090df319fd74814
msgid "Normalizes to: A Python ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:388
# d9f2994ed90f4a468ecfb16771c05b86
msgid "Validates that the given value is either a ``datetime.date``, ``datetime.datetime`` or string formatted in a particular date format."
msgstr ""

#: ../../ref/forms/fields.txt:390
#: ../../ref/forms/fields.txt:429
#: ../../ref/forms/fields.txt:497
#: ../../ref/forms/fields.txt:652
#: ../../ref/forms/fields.txt:668
#: ../../ref/forms/fields.txt:749
#: ../../ref/forms/fields.txt:791
#: ../../ref/forms/fields.txt:814
#: ../../ref/forms/fields.txt:837
#: ../../ref/forms/fields.txt:864
# d58dc5231f054ec0847ba4e2cb2fa6c0
# 66ac10b079d94f2da30c59799a87a5b7
# 12238614c7394698b9e396325648e181
# 54045ef3e9c04403abe20766ad4fbca2
# db84c26d4a844c0da0531ea19748a28e
# 5aa78ea911554126b21f2cd38315d2eb
# bfc24360dc03458ea403ff0ea1813931
# 2eb0573b569c46f9ab82387876d3da50
# 6e1b36fa032541639fdb6ef5ec225d98
# 86cdc55ca5654902ae9f8216b769dcf8
msgid "Error message keys: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:392
#: ../../ref/forms/fields.txt:431
#: ../../ref/forms/fields.txt:793
#: ../../ref/forms/widgets.txt:404
#: ../../ref/forms/widgets.txt:491
#: ../../ref/forms/widgets.txt:706
# a06194a9f0ae4895b43a2d5357a5bfaf
# ca45509a61bf402084f82a053dae3603
# 3e5c310eded74aa1bab53ef584556f76
# cd51842dea594af08dbcab96aee48f61
# c4a20e69d99f44bd8cbe91e3a82ef0a4
# 7414211ece6046b3b4a372c63fe11e27
msgid "Takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:396
#: ../../ref/forms/fields.txt:917
# abf52b5ac035407dab6d7216f39731c3
# c15992545dbc42cd95dbff28540164d1
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:399
#: ../../ref/forms/fields.txt:438
#: ../../ref/forms/fields.txt:800
# febdce9d96374ed8b81593d042f82fe7
# 2193b8df521b4a49b55047635ac1a942
# 9d7a8d306e0e46d6971d97d1abab6f76
msgid "If no ``input_formats`` argument is provided, the default input formats are::"
msgstr ""

#: ../../ref/forms/fields.txt:405
# 3ed723912e294e45bc3bfcef9505c9bd
msgid "Additionally, if you specify :setting:`USE_L10N=False<USE_L10N>` in your settings, the following will also be included in the default input formats::"
msgstr ""

#: ../../ref/forms/fields.txt:417
#: ../../ref/forms/fields.txt:450
# da0e404810c94cf4bcce07f6be2be8e8
# c4271f29593a4c3e8ee455d655dc5208
msgid "See also :ref:`format localization <format-localization>`."
msgstr ""

#: ../../ref/forms/fields.txt:420
#: ../../ref/models/fields.txt:434
# a7222658e27345edb1bfeadb2c5c0ce5
# f58a442fb016481aa65e2dcc1a228606
msgid "``DateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:424
# 282a8e4d50e44b9ab92707db45af01b5
msgid "Default widget: ``DateTimeInput``"
msgstr ""

#: ../../ref/forms/fields.txt:426
#: ../../ref/forms/fields.txt:907
# 7f92e2fd3d30488f8839bb2ed57e465e
# b437143b4b0a4be89cead4c3aa0e1c32
msgid "Normalizes to: A Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:427
# 3bdc4c3a2b674516bb0818292b85388d
msgid "Validates that the given value is either a ``datetime.datetime``, ``datetime.date`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:435
# 94d5d695e4c646dfa1af172a509d664a
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:453
#: ../../ref/models/fields.txt:446
# 15d0ef1e3d784f01af14fe49fa99a13a
# 750696760e2346a3929793d11bc6b987
msgid "``DecimalField``"
msgstr ""

#: ../../ref/forms/fields.txt:459
# 221fb4fb70f749cba2b73cc2c7c28f8d
msgid "Normalizes to: A Python ``decimal``."
msgstr ""

#: ../../ref/forms/fields.txt:460
# 81f3a39d70dc4172965c8df2bf2b550c
msgid "Validates that the given value is a decimal. Leading and trailing whitespace is ignored."
msgstr ""

#: ../../ref/forms/fields.txt:462
# 29af74c7afa345939e9ff5e347c82d36
msgid "Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``, ``max_digits``, ``max_decimal_places``, ``max_whole_digits``"
msgstr ""

#: ../../ref/forms/fields.txt:466
#: ../../ref/forms/fields.txt:632
# 846fcefca3564a08b155ea6f7f6bb8c5
# 8e1275e9b85f4f6581559078a8db23bb
msgid "The ``max_value`` and ``min_value`` error messages may contain ``%(limit_value)s``, which will be substituted by the appropriate limit."
msgstr ""

#: ../../ref/forms/fields.txt:469
# 3365477366094a9b8f83648d4f4a3627
msgid "Takes four optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:474
# 773538fb35824f738428947d58b33117
msgid "These control the range of values permitted in the field, and should be given as ``decimal.Decimal`` values."
msgstr ""

#: ../../ref/forms/fields.txt:479
# 9b70f524fb6a47caa4a4723a05fb1d56
msgid "The maximum number of digits (those before the decimal point plus those after the decimal point, with leading zeros stripped) permitted in the value."
msgstr ""

#: ../../ref/forms/fields.txt:485
# 4bc645108105455c8deb7ebe7098a6c3
msgid "The maximum number of decimal places permitted."
msgstr ""

#: ../../ref/forms/fields.txt:488
#: ../../ref/models/fields.txt:481
# ef27534f587e4a9cbc965dcac31c7bde
# 73c0d59922914f6cbb4f4218c0f5f427
msgid "``EmailField``"
msgstr ""

#: ../../ref/forms/fields.txt:495
# 3e81ef8d75c24317b676d9c8bdb2366e
msgid "Validates that the given value is a valid email address, using a moderately complex regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:499
# be491afb68ad45b4a7418ad5299b8655
msgid "Has two optional arguments for validation, ``max_length`` and ``min_length``. If provided, these arguments ensure that the string is at most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:504
#: ../../ref/models/fields.txt:497
# 4f0f05dc790346b8b40c166a7d2f2ab0
# 6016c3c0fc394dd98166a804613a8a3b
msgid "``FileField``"
msgstr ""

#: ../../ref/forms/fields.txt:508
#: ../../ref/forms/fields.txt:599
# bb50303623bf475285c278bad5988623
# 6601dea2e559440ca504b8d76424ccae
msgid "Default widget: ``ClearableFileInput``"
msgstr ""

#: ../../ref/forms/fields.txt:510
#: ../../ref/forms/fields.txt:601
# 9a8e1d282115416eb25527ec121aa9ee
# c4dd0891d30b432d8121382020880db5
msgid "Normalizes to: An ``UploadedFile`` object that wraps the file content and file name into a single object."
msgstr ""

#: ../../ref/forms/fields.txt:512
# ac619b036cf04aafb594c49eb24ae970
msgid "Can validate that non-empty file data has been bound to the form."
msgstr ""

#: ../../ref/forms/fields.txt:513
# 4f3e61a21c554224903ec8427fa4c680
msgid "Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, ``max_length``"
msgstr ""

#: ../../ref/forms/fields.txt:516
# ffe1aa3ba20446cb9a1d0341c77d017f
msgid "Has two optional arguments for validation, ``max_length`` and ``allow_empty_file``. If provided, these ensure that the file name is at most the given length, and that validation will succeed even if the file content is empty."
msgstr ""

#: ../../ref/forms/fields.txt:521
# 425ab722228e4658b775761f2ac3d183
msgid "To learn more about the ``UploadedFile`` object, see the :doc:`file uploads documentation </topics/http/file-uploads>`."
msgstr ""

#: ../../ref/forms/fields.txt:524
# 53dc82e804294ea6a777da0946a97064
msgid "When you use a ``FileField`` in a form, you must also remember to :ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:527
# 7aa6722b3b6e48d4a5589551e2938739
msgid "The ``max_length`` error refers to the length of the filename. In the error message for that key, ``%(max)d`` will be replaced with the maximum filename length and ``%(length)d`` will be replaced with the current filename length."
msgstr ""

#: ../../ref/forms/fields.txt:532
#: ../../ref/models/fields.txt:677
# 440e2ae257fc475280cb5f9f17b51f2a
# 70225c8415fa466d8e4b0998ab3c6a43
msgid "``FilePathField``"
msgstr ""

#: ../../ref/forms/fields.txt:538
# 5576d6e59b1447aa82c7a37d5dbd9643
msgid "Normalizes to: A unicode object"
msgstr ""

#: ../../ref/forms/fields.txt:539
# 0b4bd85947784f62acb7ab89d20ca211
msgid "Validates that the selected choice exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:542
# bee50b1668c84482bda312b41e9ffd52
msgid "The field allows choosing from files inside a certain directory. It takes three extra arguments; only ``path`` is required:"
msgstr ""

#: ../../ref/forms/fields.txt:547
# e68737e178ab428fa02a224f54ba435e
msgid "The absolute path to the directory whose contents you want listed. This directory must exist."
msgstr ""

#: ../../ref/forms/fields.txt:552
# c0dcdc2d2d2642709d25f963d7b5b03e
msgid "If ``False`` (the default) only the direct contents of ``path`` will be offered as choices. If ``True``, the directory will be descended into recursively and all descendants will be listed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:558
# d615b50fdff0447d8be28ee9be974798
msgid "A regular expression pattern; only files with names matching this expression will be allowed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:565
# 0062909d6b934e9daecbba083583f73c
msgid "Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies whether files in the specified location should be included.  Either this or :attr:`allow_folders` must be ``True``."
msgstr ""

#: ../../ref/forms/fields.txt:573
# a0ac3e943e9a44c8ab2fd0ae56c1c472
msgid "Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies whether folders in the specified location should be included.  Either this or :attr:`allow_files` must be ``True``."
msgstr ""

#: ../../ref/forms/fields.txt:579
#: ../../ref/models/fields.txt:735
# 061a605ae42249a1bd7b13b2820c4d11
# 7367df206889463ebe47ae3a527e708e
msgid "``FloatField``"
msgstr ""

#: ../../ref/forms/fields.txt:585
# 794888f7d15e44a69e4c5b53dedca466
msgid "Normalizes to: A Python float."
msgstr ""

#: ../../ref/forms/fields.txt:586
# 1ea2b1e92f204ada89b47a8a420eec89
msgid "Validates that the given value is an float. Leading and trailing whitespace is allowed, as in Python's ``float()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:588
#: ../../ref/forms/fields.txt:629
# d15b687204044c4f83cf4e647130654a
# 0b32ea5d22954e8ebda7717841572820
msgid "Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``"
msgstr ""

#: ../../ref/forms/fields.txt:591
# 8312c9e25fe54ae4b7682d0bd2eec576
msgid "Takes two optional arguments for validation, ``max_value`` and ``min_value``. These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:595
#: ../../ref/models/fields.txt:755
# 2e0004a973764d18965c6bd3fbd08859
# c1a6dc7fd540445c82af0e977bfb50a9
msgid "``ImageField``"
msgstr ""

#: ../../ref/forms/fields.txt:603
# 767e559caf6741efb2c0e938fff52f5a
msgid "Validates that file data has been bound to the form, and that the file is of an image format understood by PIL."
msgstr ""

#: ../../ref/forms/fields.txt:605
# cb558478fad24787998d61f57c31bb42
msgid "Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, ``invalid_image``"
msgstr ""

#: ../../ref/forms/fields.txt:608
# aa88339b8c6a46da99558c2e21458b2f
msgid "Using an ``ImageField`` requires that the `Python Imaging Library`_ (PIL) is installed and supports the image formats you use. If you encounter a ``corrupt image`` error when you upload an image, it usually means PIL doesn't understand its format. To fix this, install the appropriate library and reinstall PIL."
msgstr ""

#: ../../ref/forms/fields.txt:614
# 271ebe1f240f4d6e86baa4193fa905da
msgid "When you use an ``ImageField`` on a form, you must also remember to :ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:620
#: ../../ref/models/fields.txt:788
# 494be5248cea4f4ab42018d11b8586fb
# caa9edcce08742d2b97057d25f8a2556
msgid "``IntegerField``"
msgstr ""

#: ../../ref/forms/fields.txt:626
# 2ae8ec7f5c0b4463b1b08a12fa22b7fc
msgid "Normalizes to: A Python integer or long integer."
msgstr ""

#: ../../ref/forms/fields.txt:627
# bee9a0d6a3ee416a87dd366513749af6
msgid "Validates that the given value is an integer. Leading and trailing whitespace is allowed, as in Python's ``int()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:635
# 2e61b6f9983543f4a6f56901836ee679
msgid "Takes two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:640
# 90557d841dde4381b260380a7e802ddc
msgid "These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:643
#: ../../ref/models/fields.txt:796
# 287b01e3fe6d45f9ac8c4ab7d307a0b5
# ac84c1e551ef4fa2b9191fd14d8e0d43
msgid "``IPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:650
# c9b0be139f194c66bdfffbdd03fc8f9b
msgid "Validates that the given value is a valid IPv4 address, using a regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:655
#: ../../ref/models/fields.txt:804
# fd1409fe84b441738b752c1749ad6f74
# 3032e15be3684d81afe5c171ea6fc6a7
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:661
# 034cce0b2fdb40d4813f708ce22c3ded
msgid "A field containing either an IPv4 or an IPv6 address."
msgstr ""

#: ../../ref/forms/fields.txt:665
# 0c8ef32b678443e1a0144323273b751e
msgid "Normalizes to: A Unicode object. IPv6 addresses are normalized as described below."
msgstr ""

#: ../../ref/forms/fields.txt:667
# b1d60c05295e473695caf7d32b13307e
msgid "Validates that the given value is a valid IP address."
msgstr ""

#: ../../ref/forms/fields.txt:670
#: ../../ref/models/fields.txt:814
# 3d983fbaddbb4a6db0a24d08d0e7b80a
# 3eaa740411b44850870649e1673454ad
msgid "The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, including using the IPv4 format suggested in paragraph 3 of that section, like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All characters are converted to lowercase."
msgstr ""

#: ../../ref/forms/fields.txt:676
#: ../../ref/forms/fields.txt:913
# d55f37e1337d4cb6a26ca5a5d0303967
# a3c8e5fee2b34b85bf596f1608777e60
msgid "Takes two optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:680
# 006fccd4c46d4549ad30a36efb1bd31c
msgid "Limits valid inputs to the specified protocol. Accepted values are ``both`` (default), ``IPv4`` or ``IPv6``. Matching is case insensitive."
msgstr ""

#: ../../ref/forms/fields.txt:686
#: ../../ref/models/fields.txt:828
# 7ff0cabd3bb94912ab04ef6a2bc03823
# c4e48548efbc49998f982e5198c692c7
msgid "Unpacks IPv4 mapped addresses like ``::ffff:192.0.2.1``. If this option is enabled that address would be unpacked to ``192.0.2.1``. Default is disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""

#: ../../ref/forms/fields.txt:692
# 2571bdc59e944085a96f1cf26031d4ba
msgid "``MultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:696
#: ../../ref/forms/fields.txt:716
#: ../../ref/forms/fields.txt:1003
# 4d5da0d0b5834e59ae0c54ad7467fe7b
# 7b6e080d27074b609dfc296a9992b3e6
# 35ca90a3719b4cca880b901886a76533
msgid "Default widget: ``SelectMultiple``"
msgstr ""

#: ../../ref/forms/fields.txt:697
# 4e3c2a87123648e2985f8dd504371a49
msgid "Empty value: ``[]`` (an empty list)"
msgstr ""

#: ../../ref/forms/fields.txt:698
# 7ff28d404bc54ef29580db7a706b59b3
msgid "Normalizes to: A list of Unicode objects."
msgstr ""

#: ../../ref/forms/fields.txt:699
# b20040ecdc104cac917a4f91cd08af88
msgid "Validates that every value in the given list of values exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:701
# 54f18d5cb6bb4ece9b3ea8f74ea761a6
msgid "Error message keys: ``required``, ``invalid_choice``, ``invalid_list``"
msgstr ""

#: ../../ref/forms/fields.txt:706
# 9ce8f4a781f44b2a984276ef14b00062
msgid "Takes one extra required argument, ``choices``, as for ``ChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:709
# 3bf3b6c9693541cda7942a8a8e19ec08
msgid "``TypedMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:713
# ae259163ad6045fda37a679be737c783
msgid "Just like a :class:`MultipleChoiceField`, except :class:`TypedMultipleChoiceField` takes two extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:718
# 2f9ec6d144cd40bba8b0f253281cfff7
msgid "Normalizes to: A list of values of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:720
# af3126a915b7487bb86973e28c662ab8
msgid "Validates that the given values exists in the list of choices and can be coerced."
msgstr ""

#: ../../ref/forms/fields.txt:727
# 45150bc390744d08808744b9e791d47a
msgid "Takes two extra arguments, ``coerce`` and ``empty_value``, as for ``TypedChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:730
#: ../../ref/models/fields.txt:834
# 6dbd69a72a604561b2cc0cf753a564ba
# fd22f60f022344f2b29325717073329b
msgid "``NullBooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:734
# 6442cd1f8f5f4c5fa9ed672c13dba60d
msgid "Default widget: ``NullBooleanSelect``"
msgstr ""

#: ../../ref/forms/fields.txt:736
# 73132c16c326447792edcf0e8aa75efe
msgid "Normalizes to: A Python ``True``, ``False`` or ``None`` value."
msgstr ""

#: ../../ref/forms/fields.txt:737
# f3499157c5644dc6b0986f6a6c68aa96
msgid "Validates nothing (i.e., it never raises a ``ValidationError``)."
msgstr ""

#: ../../ref/forms/fields.txt:740
# e898737d55344cf1ac9ee22dd1d77390
msgid "``RegexField``"
msgstr ""

#: ../../ref/forms/fields.txt:747
# 7174836096e547208672928350bb8b8c
msgid "Validates that the given value matches against a certain regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:751
# 6105e9d4e3244192ba5634f54c401164
msgid "Takes one required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:755
# 167005868b8949abb901046911afd054
msgid "A regular expression specified either as a string or a compiled regular expression object."
msgstr ""

#: ../../ref/forms/fields.txt:758
# e69620a9d0484b3aac34bdc4e944fbc6
msgid "Also takes ``max_length`` and ``min_length``, which work just as they do for ``CharField``."
msgstr ""

#: ../../ref/forms/fields.txt:761
# 8818feba8c7349f7a45c3bd27c7e13cc
msgid "The optional argument ``error_message`` is also accepted for backwards compatibility. The preferred way to provide an error message is to use the ``error_messages`` argument, passing a dictionary with ``'invalid'`` as a key and the error message as the value."
msgstr ""

#: ../../ref/forms/fields.txt:767
#: ../../ref/models/fields.txt:859
# c583137e9eb841098c8d3d1795f3a58f
# b04baeb1a894460daf29076558ff11f3
msgid "``SlugField``"
msgstr ""

#: ../../ref/forms/fields.txt:774
# 2386192588754fb499378d645af64818
msgid "Validates that the given value contains only letters, numbers, underscores, and hyphens."
msgstr ""

#: ../../ref/forms/fields.txt:776
# 5342b2539c2f4e4092b13e6bb1a00c5c
msgid "Error messages: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:778
# e0eb158bcbb742589652fefc7d57bf30
msgid "This field is intended for use in representing a model :class:`~django.db.models.SlugField` in forms."
msgstr ""

#: ../../ref/forms/fields.txt:782
#: ../../ref/models/fields.txt:902
# b5d73aa823804a899fc87b826a4ba2fd
# c811d666437b41f8ae45141fda41618f
msgid "``TimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:788
# 6109601600e646dd89ae4ebfa478d555
msgid "Normalizes to: A Python ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:789
# 9ae2fce9680e4cb6918fdfab3a1e3a99
msgid "Validates that the given value is either a ``datetime.time`` or string formatted in a particular time format."
msgstr ""

#: ../../ref/forms/fields.txt:797
#: ../../ref/forms/fields.txt:925
# e4ce62da5cbf41d38d40a3f22b7aca5e
# 7fb24adc316f4251bed9fa618a03a95b
msgid "A list of formats used to attempt to convert a string to a valid ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:806
#: ../../ref/models/fields.txt:913
# c59c127220114844923a7c4f2ea1fbf5
# 7e00e4b0c339450b8bbe89fbe501c1aa
msgid "``URLField``"
msgstr ""

#: ../../ref/forms/fields.txt:813
# b12b9bb6ae1646b2ae75b0586453cf36
msgid "Validates that the given value is a valid URL."
msgstr ""

#: ../../ref/forms/fields.txt:816
# a57277dd3caf4fbdb311a1bae7473549
msgid "Takes the following optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:821
# 889ad44741ac4c03b3e9d1cf76dd3f0a
msgid "These are the same as ``CharField.max_length`` and ``CharField.min_length``."
msgstr ""

#: ../../ref/forms/fields.txt:825
# 77f0d8278ac345e1905da7cafd2a7e8b
msgid "Slightly complex built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:828
# 89d15567d28142f18e7b5cb0ab5b1bbe
msgid "``ComboField``"
msgstr ""

#: ../../ref/forms/fields.txt:835
# d8e50a2fc4ab47808f53ed981d8bbcc9
msgid "Validates that the given value against each of the fields specified as an argument to the ``ComboField``."
msgstr ""

#: ../../ref/forms/fields.txt:843
# c7d5dc89091f4b118e4e929e8bc869bc
msgid "The list of fields that should be used to validate the field's value (in the order in which they are provided)."
msgstr ""

#: ../../ref/forms/fields.txt:855
# 2754b58416d04cba88d06c386fde1567
msgid "``MultiValueField``"
msgstr ""

#: ../../ref/forms/fields.txt:861
# 5651d00f0df04ff5b1fdb6a1ffe79139
msgid "Normalizes to: the type returned by the ``compress`` method of the subclass."
msgstr ""

#: ../../ref/forms/fields.txt:862
# 3852ad8839784073ad00c7599e3bd601
msgid "Validates that the given value against each of the fields specified as an argument to the ``MultiValueField``."
msgstr ""

#: ../../ref/forms/fields.txt:866
# 5531bfada06847fa8a6fbce4c9dd4e3d
msgid "Aggregates the logic of multiple fields that together produce a single value."
msgstr ""

#: ../../ref/forms/fields.txt:869
# 82fde12f6e574522a658f580c891acaa
msgid "This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of :class:`MultiValueField` must not implement :meth:`~django.forms.Field.clean` but instead - implement :meth:`~MultiValueField.compress`."
msgstr ""

#: ../../ref/forms/fields.txt:878
# 81093209e3384be8b887d59023874dff
msgid "A tuple of fields whose values are cleaned and subsequently combined into a single value.  Each value of the field is cleaned by the corresponding field in ``fields`` -- the first value is cleaned by the first field, the second value is cleaned by the second field, etc. Once all fields are cleaned, the list of clean values is combined into a single value by :meth:`~MultiValueField.compress`."
msgstr ""

#: ../../ref/forms/fields.txt:887
# 96bef4e8ddf5441b8fdf7c312f17fc9a
msgid "Must be a subclass of :class:`django.forms.MultiWidget`. Default value is :class:`~django.forms.widgets.TextInput`, which probably is not very useful in this case."
msgstr ""

#: ../../ref/forms/fields.txt:893
# 8d3019a90ae340f9846b35bb6e027572
msgid "Takes a list of valid values and returns  a \"compressed\" version of those values -- in a single value. For example, :class:`SplitDateTimeField` is a subclass which combines a time field and a date field into a ``datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:898
# 0f0b4fe483714da1a0f469e654d5363c
msgid "This method must be implemented in the subclasses."
msgstr ""

#: ../../ref/forms/fields.txt:901
# 9454936b5de949f7b0550896ea80af72
msgid "``SplitDateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:905
# 4ab3d0fe9b2a477aac95fc015ceb79e3
msgid "Default widget: ``SplitDateTimeWidget``"
msgstr ""

#: ../../ref/forms/fields.txt:908
# 8855fbf66a834dd1baae25e89f9230b5
msgid "Validates that the given value is a ``datetime.datetime`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:910
# 64e8dafaa2a5428e979d391bf768a2b3
msgid "Error message keys: ``required``, ``invalid``, ``invalid_date``, ``invalid_time``"
msgstr ""

#: ../../ref/forms/fields.txt:920
# 6f991ab90b20460a982627c44be72c7d
msgid "If no ``input_date_formats`` argument is provided, the default input formats for ``DateField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:928
# cc442c57d17f45d0bf104234dacc3f5c
msgid "If no ``input_time_formats`` argument is provided, the default input formats for ``TimeField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:932
# efea601ba2a5475a894b49627347d871
msgid "Fields which handle relationships"
msgstr ""

#: ../../ref/forms/fields.txt:934
# 8cad550073d84ab2bff56b57c71ead78
msgid "Two fields are available for representing relationships between models: :class:`ModelChoiceField` and :class:`ModelMultipleChoiceField`.  Both of these fields require a single ``queryset`` parameter that is used to create the choices for the field.  Upon form validation, these fields will place either one model object (in the case of ``ModelChoiceField``) or multiple model objects (in the case of ``ModelMultipleChoiceField``) into the ``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/fields.txt:944
# d6d9901c427447f4bb64a665fa8096e9
msgid "``ModelChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:950
# a0bc4ff358b54757a7f75fd18ed55aad
msgid "Normalizes to: A model instance."
msgstr ""

#: ../../ref/forms/fields.txt:951
# 8f9f285f41ec4a92bd34745bb8913a1e
msgid "Validates that the given id exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:954
# 756cb96207384005a44f98f7ac10dfee
msgid "Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for ``ModelChoiceField`` becomes impractical when the number of entries increases. You should avoid using it for more than 100 items."
msgstr ""

#: ../../ref/forms/fields.txt:959
# 165e2f157ac94099a4a455a80d90e074
msgid "A single argument is required:"
msgstr ""

#: ../../ref/forms/fields.txt:963
#: ../../ref/forms/fields.txt:1022
# 691c9890f85a4cc39c8b8041d42ea1de
# 62aa89bdec584258a2d8b3448c1cec6b
msgid "A ``QuerySet`` of model objects from which the choices for the field will be derived, and which will be used to validate the user's selection."
msgstr ""

#: ../../ref/forms/fields.txt:967
# f4f9f9c3358743a38153f44201c0aea0
msgid "``ModelChoiceField`` also takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:971
# e8b4992186ae4d4587b72bc9bddffb6c
msgid "By default the ``<select>`` widget used by ``ModelChoiceField`` will have an empty choice at the top of the list. You can change the text of this label (which is ``\"---------\"`` by default) with the ``empty_label`` attribute, or you can disable the empty label entirely by setting ``empty_label`` to ``None``::"
msgstr ""

#: ../../ref/forms/fields.txt:983
# 8d92a3fc160b4620835032ed79c28d45
msgid "Note that if a ``ModelChoiceField`` is required and has a default initial value, no empty choice is created (regardless of the value of ``empty_label``)."
msgstr ""

#: ../../ref/forms/fields.txt:987
# 1ef1642b503c44cba8e4f9e179fa29e4
msgid "The ``__unicode__`` method of the model will be called to generate string representations of the objects for use in the field's choices; to provide customized representations, subclass ``ModelChoiceField`` and override ``label_from_instance``. This method will receive a model object, and should return a string suitable for representing it. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:999
# 6c4a3b7c532e44d5b7920e9860ecb2ef
msgid "``ModelMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:1004
# 6852cf8683f74ae1a1efd5790a76d2b9
msgid "Empty value: An empty ``QuerySet`` (self.queryset.none())"
msgstr ""

#: ../../ref/forms/fields.txt:1005
# eeac31d302964e92b468778533eff089
msgid "Normalizes to: A ``QuerySet`` of model instances."
msgstr ""

#: ../../ref/forms/fields.txt:1006
# 8bcea0e10c1e42c6857872cc6a2bd380
msgid "Validates that every id in the given list of values exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:1008
# 16488e226ae649abb07f175572976e84
msgid "Error message keys: ``required``, ``list``, ``invalid_choice``, ``invalid_pk_value``"
msgstr ""

#: ../../ref/forms/fields.txt:1015
# 76e2bf2add4241b8801e9e4bcd5c95df
msgid "Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with :class:`ModelChoiceField`, you can use ``label_from_instance`` to customize the object representations, and ``queryset`` is a required parameter:"
msgstr ""

#: ../../ref/forms/fields.txt:1027
# 24158cd1b15a452fae7ca14efa81a9ab
msgid "Creating custom fields"
msgstr ""

#: ../../ref/forms/fields.txt:1029
# 9179a68906b44ba0804a56ca15087375
msgid "If the built-in ``Field`` classes don't meet your needs, you can easily create custom ``Field`` classes. To do this, just create a subclass of ``django.forms.Field``. Its only requirements are that it implement a ``clean()`` method and that its ``__init__()`` method accept the core arguments mentioned above (``required``, ``label``, ``initial``, ``widget``, ``help_text``)."
msgstr ""

#: ../../ref/forms/index.txt:3
# 86860110ba174ca0848848e373b94d53
msgid "Forms"
msgstr ""

#: ../../ref/forms/index.txt:5
# d21ea48019ca44e5b3b619a05e7c9000
msgid "Detailed form API reference. For introductory material, see :doc:`/topics/forms/index`."
msgstr ""

#: ../../ref/forms/validation.txt:4
# c56a1aa062ba47c087ca11f0f1db5f51
msgid "Form and field validation"
msgstr ""

#: ../../ref/forms/validation.txt:6
# 53ee8ad6fe6946f09fc51e7c06eb4f87
msgid "Form validation happens when the data is cleaned. If you want to customize this process, there are various places you can change, each one serving a different purpose. Three types of cleaning methods are run during form processing. These are normally executed when you call the ``is_valid()`` method on a form. There are other things that can trigger cleaning and validation (accessing the ``errors`` attribute or calling ``full_clean()`` directly), but normally they won't be needed."
msgstr ""

#: ../../ref/forms/validation.txt:14
# e93eec5c45fe442787e9fe3eafb0552e
msgid "In general, any cleaning method can raise ``ValidationError`` if there is a problem with the data it is processing, passing the relevant error message to the ``ValidationError`` constructor. If no ``ValidationError`` is raised, the method should return the cleaned (normalized) data as a Python object."
msgstr ""

#: ../../ref/forms/validation.txt:19
# 79847c459ade4452bde7bcdf7ec08142
msgid "If you detect multiple errors during a cleaning method and wish to signal all of them to the form submitter, it is possible to pass a list of errors to the ``ValidationError`` constructor."
msgstr ""

#: ../../ref/forms/validation.txt:23
# 9090efe00e1a4d2b8167a23829e170ae
msgid "Most validation can be done using `validators`_ - simple helpers that can be reused easily. Validators are simple functions (or callables) that take a single argument and raise ``ValidationError`` on invalid input. Validators are run after the field's ``to_python`` and ``validate`` methods have been called."
msgstr ""

#: ../../ref/forms/validation.txt:28
# fbabc9fe81cd4405bfb12fda02ca72d9
msgid "Validation of a Form is split into several steps, which can be customized or overridden:"
msgstr ""

#: ../../ref/forms/validation.txt:31
# 0c8d942650e6410a93c69c682c2b313e
msgid "The ``to_python()`` method on a Field is the first step in every validation. It coerces the value to correct datatype and raises ``ValidationError`` if that is not possible. This method accepts the raw value from the widget and returns the converted value. For example, a FloatField will turn the data into a Python ``float`` or raise a ``ValidationError``."
msgstr ""

#: ../../ref/forms/validation.txt:38
# c51d71adaf954d3882066f5e5897ebbf
msgid "The ``validate()`` method on a Field handles field-specific validation that is not suitable for a validator, It takes a value that has been coerced to correct datatype and raises ``ValidationError`` on any error. This method does not return anything and shouldn't alter the value. You should override it to handle validation logic that you can't or don't want to put in a validator."
msgstr ""

#: ../../ref/forms/validation.txt:45
# 9d4df0b4db3948f1ab3a77a982e66881
msgid "The ``run_validators()`` method on a Field runs all of the field's validators and aggregates all the errors into a single ``ValidationError``. You shouldn't need to override this method."
msgstr ""

#: ../../ref/forms/validation.txt:49
# a0a5967615764c1ea105a2db68d17c2a
msgid "The ``clean()`` method on a Field subclass. This is responsible for running ``to_python``, ``validate`` and ``run_validators`` in the correct order and propagating their errors. If, at any time, any of the methods raise ``ValidationError``, the validation stops and that error is raised. This method returns the clean data, which is then inserted into the ``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/validation.txt:56
# c1e73be465cc4eb7b0c626af339ae716
msgid "The ``clean_<fieldname>()`` method in a form subclass -- where ``<fieldname>`` is replaced with the name of the form field attribute. This method does any cleaning that is specific to that particular attribute, unrelated to the type of field that it is. This method is not passed any parameters. You will need to look up the value of the field in ``self.cleaned_data`` and remember that it will be a Python object at this point, not the original string submitted in the form (it will be in ``cleaned_data`` because the general field ``clean()`` method, above, has already cleaned the data once)."
msgstr ""

#: ../../ref/forms/validation.txt:66
# c3148e9000a34980aaa7597b4c1e0956
msgid "For example, if you wanted to validate that the contents of a ``CharField`` called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the right place to do this. You don't need a specific field (it's just a ``CharField``), but you want a formfield-specific piece of validation and, possibly, cleaning/normalizing the data."
msgstr ""

#: ../../ref/forms/validation.txt:73
# cdeb69fb5b254f1ba329c5265b8145a7
msgid "This method should return the cleaned value obtained from cleaned_data, regardless of whether it changed anything or not."
msgstr ""

#: ../../ref/forms/validation.txt:76
# 1f6dfd52e2d04978a223a9a612fb77b2
msgid "The Form subclass's ``clean()`` method. This method can perform any validation that requires access to multiple fields from the form at once. This is where you might put in things to check that if field ``A`` is supplied, field ``B`` must contain a valid email address and the like. The data that this method returns is the final ``cleaned_data`` attribute for the form, so don't forget to return the full list of cleaned data if you override this method (by default, ``Form.clean()`` just returns ``self.cleaned_data``)."
msgstr ""

#: ../../ref/forms/validation.txt:85
# 35182641cb564386b7df22df6fd7c203
msgid "Note that any errors raised by your ``Form.clean()`` override will not be associated with any field in particular. They go into a special \"field\" (called ``__all__``), which you can access via the ``non_field_errors()`` method if you need to. If you want to attach errors to a specific field in the form, you will need to access the ``_errors`` attribute on the form, which is `described later`_."
msgstr ""

#: ../../ref/forms/validation.txt:92
# 4b215d50c1d746b7acc1e1e504eb4f5b
msgid "Also note that there are special considerations when overriding the ``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""

#: ../../ref/forms/validation.txt:97
# 62db41fe545c491b9b520d61044747d7
msgid "These methods are run in the order given above, one field at a time.  That is, for each field in the form (in the order they are declared in the form definition), the ``Field.clean()`` method (or its override) is run, then ``clean_<fieldname>()``. Finally, once those two methods are run for every field, the ``Form.clean()`` method, or its override, is executed."
msgstr ""

#: ../../ref/forms/validation.txt:103
# 60bfb593e1fb47a18ff99efdd935190a
msgid "Examples of each of these methods are provided below."
msgstr ""

#: ../../ref/forms/validation.txt:105
# 19646cd13b72423782f5691f578f9ed2
msgid "As mentioned, any of these methods can raise a ``ValidationError``. For any field, if the ``Field.clean()`` method raises a ``ValidationError``, any field-specific cleaning method is not called. However, the cleaning methods for all remaining fields are still executed."
msgstr ""

#: ../../ref/forms/validation.txt:110
# c52b3d9bd2b745a8995cea3cd67b9bac
msgid "The ``clean()`` method for the ``Form`` class or subclass is always run. If that method raises a ``ValidationError``, ``cleaned_data`` will be an empty dictionary."
msgstr ""

#: ../../ref/forms/validation.txt:114
# 97c2e07bdb1c43a0b8a7228c30c82dc0
msgid "The previous paragraph means that if you are overriding ``Form.clean()``, you should iterate through ``self.cleaned_data.items()``, possibly considering the ``_errors`` dictionary attribute on the form as well. In this way, you will already know which fields have passed their individual validation requirements."
msgstr ""

#: ../../ref/forms/validation.txt:122
# 628b0078c7cd4ae39a60b76ef02e4476
msgid "Form subclasses and modifying field errors"
msgstr ""

#: ../../ref/forms/validation.txt:124
# fab47b7587f84881a4fddd7bb55fac53
msgid "Sometimes, in a form's ``clean()`` method, you will want to add an error message to a particular field in the form. This won't always be appropriate and the more typical situation is to raise a ``ValidationError`` from ``Form.clean()``, which is turned into a form-wide error that is available through the ``Form.non_field_errors()`` method."
msgstr ""

#: ../../ref/forms/validation.txt:130
# 7805cd47b93a49698db9047d9f6bb4af
msgid "When you really do need to attach the error to a particular field, you should store (or amend) a key in the ``Form._errors`` attribute. This attribute is an instance of a ``django.forms.util.ErrorDict`` class. Essentially, though, it's just a dictionary. There is a key in the dictionary for each field in the form that has an error. Each value in the dictionary is a ``django.forms.util.ErrorList`` instance, which is a list that knows how to display itself in different ways. So you can treat ``_errors`` as a dictionary mapping field names to lists."
msgstr ""

#: ../../ref/forms/validation.txt:139
# 6114b8a7ad49487ea302de132645034f
msgid "If you want to add a new error to a particular field, you should check whether the key already exists in ``self._errors`` or not. If not, create a new entry for the given key, holding an empty ``ErrorList`` instance. In either case, you can then append your error message to the list for the field name in question and it will be displayed when the form is displayed."
msgstr ""

#: ../../ref/forms/validation.txt:145
# f72105d4d00b49f8a53356f9669a78dd
msgid "There is an example of modifying ``self._errors`` in the following section."
msgstr ""

#: ../../ref/forms/validation.txt:149
# 76a4bcb19622439b81ac75f5bba6be0a
msgid "You may be wondering why is this attribute called ``_errors`` and not ``errors``. Normal Python practice is to prefix a name with an underscore if it's not for external usage. In this case, you are subclassing the ``Form`` class, so you are essentially writing new internals. In effect, you are given permission to access some of the internals of ``Form``."
msgstr ""

#: ../../ref/forms/validation.txt:155
# fa96b827853b493fa87f84dbd033c21b
msgid "Of course, any code outside your form should never access ``_errors`` directly. The data is available to external code through the ``errors`` property, which populates ``_errors`` before returning it)."
msgstr ""

#: ../../ref/forms/validation.txt:159
# 3e8d0083626f47dd8fc7498192c9dd70
msgid "Another reason is purely historical: the attribute has been called ``_errors`` since the early days of the forms module and changing it now (particularly since ``errors`` is used for the read-only property name) would be inconvenient for a number of reasons. You can use whichever explanation makes you feel more comfortable. The result is the same."
msgstr ""

#: ../../ref/forms/validation.txt:166
# 8d7480566d7940f492bbb2230226ec81
msgid "Using validation in practice"
msgstr ""

#: ../../ref/forms/validation.txt:168
# 74893c9a69994aeaabfa13435dceef77
msgid "The previous sections explained how validation works in general for forms. Since it can sometimes be easier to put things into place by seeing each feature in use, here are a series of small examples that use each of the previous features."
msgstr ""

#: ../../ref/forms/validation.txt:176
# 215c47355d144153876e0405ebffe3e9
msgid "Using validators"
msgstr ""

#: ../../ref/forms/validation.txt:178
# 2a56b63e0baa49d3a6d96d37e059b884
msgid "Django's form (and model) fields support use of simple utility functions and classes known as validators. These can be passed to a field's constructor, via the field's ``validators`` argument, or defined on the Field class itself with the ``default_validators`` attribute."
msgstr ""

#: ../../ref/forms/validation.txt:183
# 7df6d3e31ea14e0586b33680a6d7b8e5
msgid "Simple validators can be used to validate values inside the field, let's have a look at Django's ``EmailField``::"
msgstr ""

#: ../../ref/forms/validation.txt:192
# 61bf04d5622a4ecaa044b298c47bbeb8
msgid "As you can see, ``EmailField`` is just a ``CharField`` with customized error message and a validator that validates email addresses. This can also be done on field definition so::"
msgstr ""

#: ../../ref/forms/validation.txt:198
# bb711422f3214ab69dc7aba3ccd5da84
msgid "is equivalent to::"
msgstr ""

#: ../../ref/forms/validation.txt:205
# 5ec5d2f94c3a43c59016a018bd6bb75e
msgid "Form field default cleaning"
msgstr ""

#: ../../ref/forms/validation.txt:207
# a0083c564b75441a9f33816a7010dffa
msgid "Let's firstly create a custom form field that validates its input is a string containing comma-separated email addresses. The full class looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:231
# 772d2087a73446e1b28f4f2f447a48ef
msgid "Every form that uses this field will have these methods run before anything else can be done with the field's data. This is cleaning that is specific to this type of field, regardless of how it is subsequently used."
msgstr ""

#: ../../ref/forms/validation.txt:235
# a229109d49ca43a4a34eafa906ecd88c
msgid "Let's create a simple ``ContactForm`` to demonstrate how you'd use this field::"
msgstr ""

#: ../../ref/forms/validation.txt:245
# bc51fd98da0c4a9fae2bd9ae8d736cc1
msgid "Simply use ``MultiEmailField`` like any other form field. When the ``is_valid()`` method is called on the form, the ``MultiEmailField.clean()`` method will be run as part of the cleaning process and it will, in turn, call the custom ``to_python()`` and ``validate()`` methods."
msgstr ""

#: ../../ref/forms/validation.txt:251
# 1fbdf8530458477097337ee3aa09b8ba
msgid "Cleaning a specific field attribute"
msgstr ""

#: ../../ref/forms/validation.txt:253
# e9b81396cee14b20b086bc2e66ba9f53
msgid "Continuing on from the previous example, suppose that in our ``ContactForm``, we want to make sure that the ``recipients`` field always contains the address ``\"fred@example.com\"``. This is validation that is specific to our form, so we don't want to put it into the general ``MultiEmailField`` class. Instead, we write a cleaning method that operates on the ``recipients`` field, like so::"
msgstr ""

#: ../../ref/forms/validation.txt:273
# 592eea92ed92454e9a7ab4ae349e47eb
msgid "Cleaning and validating fields that depend on each other"
msgstr ""

#: ../../ref/forms/validation.txt:275
# fc3daccbcb89487986ff50de20a9fbf0
msgid "Suppose we add another requirement to our contact form: if the ``cc_myself`` field is ``True``, the ``subject`` must contain the word ``\"help\"``. We are performing validation on more than one field at a time, so the form's ``clean()`` method is a good spot to do this. Notice that we are talking about the ``clean()`` method on the form here, whereas earlier we were writing a ``clean()`` method on a field. It's important to keep the field and form difference clear when working out where to validate things. Fields are single data points, forms are a collection of fields."
msgstr ""

#: ../../ref/forms/validation.txt:284
# 9911df7c68bb4dceb1627b3551cac98f
msgid "By the time the form's ``clean()`` method is called, all the individual field clean methods will have been run (the previous two sections), so ``self.cleaned_data`` will be populated with any data that has survived so far. So you also need to remember to allow for the fact that the fields you are wanting to validate might not have survived the initial individual field checks."
msgstr ""

#: ../../ref/forms/validation.txt:291
# 7b95cd5806784e5ca06ae2931baa70c0
msgid "There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a ``ValidationError`` from the ``clean()`` method. For example::"
msgstr ""

#: ../../ref/forms/validation.txt:314
# ce439212c1124ce6849be539c421d313
msgid "In this code, if the validation error is raised, the form will display an error message at the top of the form (normally) describing the problem."
msgstr ""

#: ../../ref/forms/validation.txt:317
# e84e6fc4250b41549a979fb14b807a77
msgid "Note that the call to ``super(ContactForm, self).clean()`` in the example code ensures that any validation logic in parent classes is maintained."
msgstr ""

#: ../../ref/forms/validation.txt:320
# cf47fb555549415a9b93aa51ee93dce0
msgid "The second approach might involve assigning the error message to one of the fields. In this case, let's assign an error message to both the \"subject\" and \"cc_myself\" rows in the form display. Be careful when doing this in practice, since it can lead to confusing form output. We're showing what is possible here and leaving it up to you and your designers to work out what works effectively in your particular situation. Our new code (replacing the previous sample) looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:352
# f01bf96dbc094c13b96f904c9bd58243
msgid "As you can see, this approach requires a bit more effort, not withstanding the extra design effort to create a sensible form display. The details are worth noting, however. Firstly, earlier we mentioned that you might need to check if the field name keys already exist in the ``_errors`` dictionary. In this case, since we know the fields exist in ``self.cleaned_data``, they must have been valid when cleaned as individual fields, so there will be no corresponding entries in ``_errors``."
msgstr ""

#: ../../ref/forms/validation.txt:360
# edc25c68cde04a9f9d6695607efecd7d
msgid "Secondly, once we have decided that the combined data in the two fields we are considering aren't valid, we must remember to remove them from the ``cleaned_data``."
msgstr ""

#: ../../ref/forms/validation.txt:366
# 3a5f549aef684941a8bb6329fae7a258
msgid "Django used to remove the ``cleaned_data`` attribute entirely if there were any errors in the form. Since version 1.5, ``cleaned_data`` is present even if the form doesn't validate, but it contains only field values that did validate."
msgstr ""

#: ../../ref/forms/widgets.txt:3
# 4b7083712ef94f14b1b8745647b288e0
msgid "Widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:10
# 21e4dcc40674474cb1f362afcc6ba3e5
msgid "A widget is Django's representation of a HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:16
# f207e86b63a844cdbc716ac0906ca1c5
msgid "Widgets should not be confused with the :doc:`form fields </ref/forms/fields>`. Form fields deal with the logic of input validation and are used directly in templates. Widgets deal with rendering of HTML form input elements on the web page and extraction of raw submitted data. However, widgets do need to be :ref:`assigned <widget-to-field>` to form fields."
msgstr ""

#: ../../ref/forms/widgets.txt:25
# 51401e688f4844dead20a9dfe99ed635
msgid "Specifying widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:27
# eec93601788e4bfe8227197f7478a853
msgid "Whenever you specify a field on a form, Django will use a default widget that is appropriate to the type of data that is to be displayed. To find which widget is used on which field, see the documentation about :ref:`built-in fields`."
msgstr ""

#: ../../ref/forms/widgets.txt:32
# fe049ccf805645419ea7d83b7e69c698
msgid "However, if you want to use a different widget for a field, you can just use the :attr:`~Field.widget` argument on the field definition. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:43
# e18311beb8fc4452ac7e28adfb543db4
msgid "This would specify a form with a comment that uses a larger :class:`Textarea` widget, rather than the default :class:`TextInput` widget."
msgstr ""

#: ../../ref/forms/widgets.txt:48
# ae290b7d6c8a4e0bad730fce1ccd6136
msgid "Setting arguments for widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:50
# 12823edfbd6d43cc9d9c7c39d11c7915
msgid "Many widgets have optional extra arguments; they can be set when defining the widget on the field. In the following example, the :attr:`~SelectDateWidget.years` attribute is set for a :class:`~django.forms.extras.widgets.SelectDateWidget`::"
msgstr ""

#: ../../ref/forms/widgets.txt:69
# 72a8410914a74e3babceb27d9ab90813
msgid "See the :ref:`built-in widgets` for more information about which widgets are available and which arguments they accept."
msgstr ""

#: ../../ref/forms/widgets.txt:74
# 08907e4cebe342caa0562d2cbb4f2daa
msgid "Widgets inheriting from the Select widget"
msgstr ""

#: ../../ref/forms/widgets.txt:76
# 0a3b893359854062a5f546388d7db96f
msgid "Widgets inheriting from the :class:`Select` widget deal with choices. They present the user with a list of options to choose from. The different widgets present this choice differently; the :class:`Select` widget itself uses a ``<select>`` HTML list representation, while :class:`RadioSelect` uses radio buttons."
msgstr ""

#: ../../ref/forms/widgets.txt:82
# 4b8f150140c347f691b7879ba24e57a5
msgid ":class:`Select` widgets are used by default on :class:`ChoiceField` fields. The choices displayed on the widget are inherited from the :class:`ChoiceField` and changing :attr:`ChoiceField.choices` will update :attr:`Select.choices`. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:100
# 89fd2ea326384218b2be55dd9c3706f0
msgid "Widgets which offer a :attr:`~Select.choices` attribute can however be used with fields which are not based on choice -- such as a :class:`CharField` -- but it is recommended to use a :class:`ChoiceField`-based field when the choices are inherent to the model and not just the representational widget."
msgstr ""

#: ../../ref/forms/widgets.txt:106
# 2e962caa05174a8d97c1f00bdf6edd4e
msgid "Customizing widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:108
# 22cbbd80f794400ba5f2bf86cffac9f7
msgid "When Django renders a widget as HTML, it only renders very minimal markup - Django doesn't add class names, or any other widget-specific attributes. This means, for example, that all :class:`TextInput` widgets will appear the same on your Web pages."
msgstr ""

#: ../../ref/forms/widgets.txt:113
# c29205bbb4814a778d12f31a41978e5f
msgid "There are two ways to customize widgets: :ref:`per widget instance <styling-widget-instances>` and :ref:`per widget class <styling-widget-classes>`."
msgstr ""

#: ../../ref/forms/widgets.txt:119
# c715a3d0012b4cd9997e7deb574197c7
msgid "Styling widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:121
# a5f25de77c2a41b4ac8f952138583b51
msgid "If you want to make one widget instance look different from another, you will need to specify additional attributes at the time when the widget object is instantiated and assigned to a form field (and perhaps add some rules to your CSS files)."
msgstr ""

#: ../../ref/forms/widgets.txt:126
# af562b7485d047dc9c64e0bf9c1fa555
msgid "For example, take the following simple form::"
msgstr ""

#: ../../ref/forms/widgets.txt:135
# dc0e1b2f6c464f3f87136602dda77a50
msgid "This form will include three default :class:`TextInput` widgets, with default rendering -- no CSS class, no extra attributes. This means that the input boxes provided for each widget will be rendered exactly the same::"
msgstr ""

#: ../../ref/forms/widgets.txt:145
# 8a1c431dbe4547738d32d1870da4d52e
msgid "On a real Web page, you probably don't want every widget to look the same. You might want a larger input element for the comment, and you might want the 'name' widget to have some special CSS class. It is also possible to specify the 'type' attribute to take advantage of the new HTML5 input types.  To do this, you use the :attr:`Widget.attrs` argument when creating the widget::"
msgstr ""

#: ../../ref/forms/widgets.txt:158
# 1e00b0c692a44b88a1a23a43427bd08c
msgid "Django will then include the extra attributes in the rendered output:"
msgstr ""

#: ../../ref/forms/widgets.txt:169
# e3e704689e0544929f89e888de28d6b3
msgid "Styling widget classes"
msgstr ""

#: ../../ref/forms/widgets.txt:171
# c042c5971bee4766931d1b2dfb2aadfc
msgid "With widgets, it is possible to add media (``css`` and ``javascript``) and more deeply customize their appearance and behavior."
msgstr ""

#: ../../ref/forms/widgets.txt:174
# 0b817c9e157e451ea26cc83f9f730b69
msgid "In a nutshell, you will need to subclass the widget and either :ref:`define a class \"Media\" <media-as-a-static-definition>` as a member of the subclass, or :ref:`create a property \"media\" <dynamic-property>`, returning an instance of that class."
msgstr ""

#: ../../ref/forms/widgets.txt:179
# b6d9968e9ba745fe9566dd942db0910f
msgid "These methods involve somewhat advanced Python programming and are described in detail in the :doc:`Form Media </topics/forms/media>` topic guide."
msgstr ""

#: ../../ref/forms/widgets.txt:185
# ab5c05647b174b5fa92f26c61596b05f
msgid "Base Widget classes"
msgstr ""

#: ../../ref/forms/widgets.txt:187
# b0fe414a824b42998a338b232a47a717
msgid "Base widget classes :class:`Widget` and :class:`MultiWidget` are subclassed by all the :ref:`built-in widgets <built-in widgets>` and may serve as a foundation for custom widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:193
# 038e4ab005a44636a455a3b70d95bce7
msgid "This abstract class cannot be rendered, but provides the basic attribute :attr:`~Widget.attrs`.  You may also implement or override the :meth:`~Widget.render()` method on custom widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:199
# 03b66e35b3ec4e99a25f3ff24b768527
msgid "A dictionary containing HTML attributes to be set on the rendered widget."
msgstr ""

#: ../../ref/forms/widgets.txt:210
# f051ead99ee54acda8258c101053b0a9
msgid "Returns HTML for the widget, as a Unicode string. This method must be implemented by the subclass, otherwise ``NotImplementedError`` will be raised."
msgstr ""

#: ../../ref/forms/widgets.txt:214
# efd76ba332184b0da820eb7628d9cb83
msgid "The 'value' given is not guaranteed to be valid input, therefore subclass implementations should program defensively."
msgstr ""

#: ../../ref/forms/widgets.txt:219
# cf33067ca6ac42688a142bc05e4777b1
msgid "Given a dictionary of data and this widget's name, returns the value of this widget. Returns ``None`` if a value wasn't provided."
msgstr ""

#: ../../ref/forms/widgets.txt:224
# 125ffa071b8843db863f0207b4cf6ebf
msgid "A widget that is composed of multiple widgets. :class:`~django.forms.widgets.MultiWidget` works hand in hand with the :class:`~django.forms.MultiValueField`."
msgstr ""

#: ../../ref/forms/widgets.txt:228
# 15595326d1c14e70832d1f48cbb7e8f2
msgid ":class:`MultiWidget` has one required argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:232
# 63024a5b266c4e8c8e8b09f57db0085c
msgid "An iterable containing the widgets needed."
msgstr ""

#: ../../ref/forms/widgets.txt:234
# e0384c57e35e47cea134ae27d106b3b5
msgid "And one required method:"
msgstr ""

#: ../../ref/forms/widgets.txt:238
# d58884651d074880a9907d795c58b521
msgid "This method takes a single \"compressed\" value from the field and returns a list of \"decompressed\" values. The input value can be assumed valid, but not necessarily non-empty."
msgstr ""

#: ../../ref/forms/widgets.txt:242
# 2db94ce1572b40de86a7c3cb8563d57b
msgid "This method **must be implemented** by the subclass, and since the value may be empty, the implementation must be defensive."
msgstr ""

#: ../../ref/forms/widgets.txt:245
# 6946cf5cdb4a490094df57637da42310
msgid "The rationale behind \"decompression\" is that it is necessary to \"split\" the combined value of the form field into the values for each widget."
msgstr ""

#: ../../ref/forms/widgets.txt:248
# bfeed8cea02d454e83448df2a3be9ba0
msgid "An example of this is how :class:`SplitDateTimeWidget` turns a :class:`datetime` value into a list with date and time split into two separate values::"
msgstr ""

#: ../../ref/forms/widgets.txt:263
# f73674fea5544b209fbf8fac2595375f
msgid "Note that :class:`~django.forms.MultiValueField` has a complementary method :meth:`~django.forms.MultiValueField.compress` with the opposite responsibility - to combine cleaned values of all member fields into one."
msgstr ""

#: ../../ref/forms/widgets.txt:268
# b1cc65d5f1da42e19b357afb1abf6594
msgid "Other methods that may be useful to override include:"
msgstr ""

#: ../../ref/forms/widgets.txt:272
# 6abfea7fa4c24b5aa82f67bfbd025f81
msgid "Argument ``value`` is handled differently in this method from the subclasses of :class:`~Widget` because it has to figure out how to split a single value for display in multiple widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:276
# a5056a9a43b845adaf9f655ef891d5f1
msgid "The ``value`` argument used when rendering can be one of two things:"
msgstr ""

#: ../../ref/forms/widgets.txt:278
# 73276093c0bf49e08ece3cceb7344a22
msgid "A ``list``."
msgstr ""

#: ../../ref/forms/widgets.txt:279
# 4b4a7030db9642f991af5eb4aba5d93e
msgid "A single value (e.g., a string) that is the \"compressed\" representation of a ``list`` of values."
msgstr ""

#: ../../ref/forms/widgets.txt:282
# 0867dc6e22a648c2b68c5910a0e7b878
msgid "If `value` is a list, output of :meth:`~MultiWidget.render` will be a concatenation of rendered child widgets. If `value` is not a list, it will be first processed by the method :meth:`~MultiWidget.decompress()` to create the list and then processed as above."
msgstr ""

#: ../../ref/forms/widgets.txt:287
# a2cbc801c33e42129b569f441389386f
msgid "In the second case -- i.e., if the value is *not* a list -- ``render()`` will first decompress the value into a ``list`` before rendering it. It does so by calling the ``decompress()`` method, which :class:`MultiWidget`'s subclasses must implement (see above)."
msgstr ""

#: ../../ref/forms/widgets.txt:292
# acfd85597afe44628924d72dce0475ed
msgid "When ``render()`` executes its HTML rendering, each value in the list is rendered with the corresponding widget -- the first value is rendered in the first widget, the second value is rendered in the second widget, etc."
msgstr ""

#: ../../ref/forms/widgets.txt:297
# 86ec64b8026b48fdad01929de2793a43
msgid "Unlike in the single value widgets, method :meth:`~MultiWidget.render` need not be implemented in the subclasses."
msgstr ""

#: ../../ref/forms/widgets.txt:302
# 94fef7e7f0c54a9892f8ce138de9d5ce
msgid "Given a list of rendered widgets (as strings), returns a Unicode string representing the HTML for the whole lot."
msgstr ""

#: ../../ref/forms/widgets.txt:305
# 7b905bc3ee06426c8bfb3c1d6dad0460
msgid "This hook allows you to format the HTML design of the widgets any way you'd like."
msgstr ""

#: ../../ref/forms/widgets.txt:308
# ae2be9303f974f61b460e39b8e6c2ddb
msgid "Here's an example widget which subclasses :class:`MultiWidget` to display a date with the day, month, and year in different select boxes. This widget is intended to be used with a :class:`~django.forms.DateField` rather than a :class:`~django.forms.MultiValueField`, thus we have implemented :meth:`~Widget.value_from_datadict`::"
msgstr ""

#: ../../ref/forms/widgets.txt:349
# 9a215f4259d446f198c4b5e7a9d52d17
msgid "The constructor creates several :class:`Select` widgets in a tuple. The ``super`` class uses this tuple to setup the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:352
# 395991f4ae9d4c69935ce553b9fbf632
msgid "The :meth:`~MultiWidget.format_output` method is fairly vanilla here (in fact, it's the same as what's been implemented as the default for ``MultiWidget``), but the idea is that you could add custom HTML between the widgets should you wish."
msgstr ""

#: ../../ref/forms/widgets.txt:357
# 39871f3198a7408b84ae06a96391b68b
msgid "The required method :meth:`~MultiWidget.decompress` breaks up a ``datetime.date`` value into the day, month, and year values corresponding to each widget. Note how the method handles the case where ``value`` is ``None``."
msgstr ""

#: ../../ref/forms/widgets.txt:362
# 42e416acb13045d295374aedbce399df
msgid "The default implementation of :meth:`~Widget.value_from_datadict` returns a list of values corresponding to each ``Widget``.  This is appropriate when using a ``MultiWidget`` with a :class:`~django.forms.MultiValueField`, but since we want to use this widget with a :class:`~django.forms.DateField` which takes a single value, we have overridden this method to combine the data of all the subwidgets into a ``datetime.date``. The method extracts data from the ``POST`` dictionary and constructs and validates the date. If it is valid, we return the string, otherwise, we return an empty string which will cause ``form.is_valid`` to return ``False``."
msgstr ""

#: ../../ref/forms/widgets.txt:375
# 82e9cce8d04b4a86b80b48d83b33158d
msgid "Built-in widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:377
# ac3a008540b54a9fbeee52b1e0842311
msgid "Django provides a representation of all the basic HTML widgets, plus some commonly used groups of widgets in the ``django.forms.widgets`` module, including :ref:`the input of text <text-widgets>`, :ref:`various checkboxes and selectors <selector-widgets>`, :ref:`uploading files <file-upload-widgets>`, and :ref:`handling of multi-valued input <composite-widgets>`."
msgstr ""

#: ../../ref/forms/widgets.txt:386
# 50494d745d0b4fa288865c5b319cf792
msgid "Widgets handling input of text"
msgstr ""

#: ../../ref/forms/widgets.txt:388
# 34fba9cce44d48fd8e3d9c050c434713
msgid "These widgets make use of the HTML elements ``input`` and ``textarea``."
msgstr ""

#: ../../ref/forms/widgets.txt:391
# fed4302cb2724ac68cd8df5b8a42fbaa
msgid "``TextInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:395
# b0def5d0db3241618aba51e00f80f3bb
msgid "Text input: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:398
# 098fd8c02df54b84a47f25ed3b5996c0
msgid "``PasswordInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:402
# e75f70e8612243ea8a3a406d05e2b600
msgid "Password input: ``<input type='password' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:408
# 16723e0689ed43849fc82ff158fa862f
msgid "Determines whether the widget will have a value filled in when the form is re-displayed after a validation error (default is ``False``)."
msgstr ""

#: ../../ref/forms/widgets.txt:412
# 50e12328c9584f11921a262bf22eee54
msgid "``HiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:416
# 8dd355f06a1a4e67992ff26f26b48d6b
msgid "Hidden input: ``<input type='hidden' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:418
# d40157ef594b46679ab340bfa55256d5
msgid "Note that there also is a :class:`MultipleHiddenInput` widget that encapsulates a set of hidden input elements."
msgstr ""

#: ../../ref/forms/widgets.txt:422
# f7b17c2a21344a9e90674dfd45fafb99
msgid "``DateInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:426
# 549aec1f626d4ea4a47039026e74aa89
msgid "Date input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:428
#: ../../ref/forms/widgets.txt:445
#: ../../ref/forms/widgets.txt:462
# 49f5228325034f0998de153612e52de5
# ff39196b8b1c4486ae3531ee87b3e662
# d808ebae86e0407aba06bd6988dce393
msgid "Takes same arguments as :class:`TextInput`, with one more optional argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:432
#: ../../ref/forms/widgets.txt:449
#: ../../ref/forms/widgets.txt:466
# fcbf7cd27a354fb6a9331d71c02e47ee
# 699ccce0a56d435fbd9ecc72e2159f81
# 3c55d45072cb4f5aa104aae0da228dbd
msgid "The format in which this field's initial value will be displayed."
msgstr ""

#: ../../ref/forms/widgets.txt:434
# e2de744cdd594505a0fd9c256bcff11f
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`DATE_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:439
# 3cef582dc91d4f768cb5720b8e9e05e4
msgid "``DateTimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:443
# 7e58fb3df9894a0cbcabb9bd39c6ff98
msgid "Date/time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:451
# af351d5ad0d5431ea675fbacb1602671
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`DATETIME_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:456
# b73b3691b2364100a4a47b7245250ad2
msgid "``TimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:460
# abb9ecaaf05e49e39617b5343f5c24d9
msgid "Time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:468
# 8347d17efe3844969da5ee466d651008
msgid "If no ``format`` argument is provided, the default format is the first format found in :setting:`TIME_INPUT_FORMATS` and respects :ref:`format-localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:473
# 088ec9a2e6c94f5087f72d1e01b1e900
msgid "``Textarea``"
msgstr ""

#: ../../ref/forms/widgets.txt:477
# 83e78752f3e845fc97f545adfda489ae
msgid "Text area: ``<textarea>...</textarea>``"
msgstr ""

#: ../../ref/forms/widgets.txt:482
# 3e4d5bac49f74989bf09f3e0202d1e6a
msgid "Selector and checkbox widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:485
# 3bbedee02c894ffd89cbc44542172c34
msgid "``CheckboxInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:489
# ba8aa9926a6e493b835fdbed7fe18e41
msgid "Checkbox: ``<input type='checkbox' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:495
# d2ed2508fc0d413a96a27d0264bcdacc
msgid "A callable that takes the value of the CheckBoxInput and returns ``True`` if the checkbox should be checked for that value."
msgstr ""

#: ../../ref/forms/widgets.txt:503
# 8072edf620f849d1804a876d86652c6c
msgid "``Select``"
msgstr ""

#: ../../ref/forms/widgets.txt:507
# 213f6aae0e764b6092ceaf7b5a352498
msgid "Select widget: ``<select><option ...>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:511
#: ../../ref/forms/widgets.txt:665
# d091f14a0e424e768a79f8f10893cffb
# db1a45aa5a6249d887aa34b99b24ac62
msgid "This attribute is optional when the field does not have a :attr:`~Field.choices` attribute. If it does, it will override anything you set here when the attribute is updated on the :class:`Field`."
msgstr ""

#: ../../ref/forms/widgets.txt:516
# b276b21d06444ed3995e6df5840ee05a
msgid "``NullBooleanSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:520
# fc4abdbabc9e46a2b224804de24c72bf
msgid "Select widget with options 'Unknown', 'Yes' and 'No'"
msgstr ""

#: ../../ref/forms/widgets.txt:523
# 054a8fb389a54eccbb2bf9444ed3cd4a
msgid "``SelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:527
# 1d1e13806c974da9b747b764aefd8a6e
msgid "Similar to :class:`Select`, but allows multiple selection: ``<select multiple='multiple'>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:531
# 4e1871653aab4c4ab64bd3405533bc37
msgid "``RadioSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:535
# 7ae170b0bcee47ae956a9735f814821d
msgid "Similar to :class:`Select`, but rendered as a list of radio buttons within ``<li>`` tags:"
msgstr ""

#: ../../ref/forms/widgets.txt:547
# a29368250b69444898aaff95c1dbc755
msgid "For more granular control over the generated markup, you can loop over the radio buttons in the template. Assuming a form ``myform`` with a field ``beatles`` that uses a ``RadioSelect`` as its widget:"
msgstr ""

#: ../../ref/forms/widgets.txt:559
# b986ca18254043d4b4700ebe2c8c6029
msgid "This would generate the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:576
# 37948ce78e234ddab05f4b6a5757d7ac
msgid "That included the ``<label>`` tags. To get more granular, you can use each radio button's ``tag`` and ``choice_label`` attributes. For example, this template..."
msgstr ""

#: ../../ref/forms/widgets.txt:588
# 6d1496b950d34e04892b169ab49f50c7
msgid "...will result in the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:609
# 1343c48b94154a4b813c15bb334bd708
msgid "If you decide not to loop over the radio buttons -- e.g., if your template simply includes ``{{ myform.beatles }}`` -- they'll be output in a ``<ul>`` with ``<li>`` tags, as above."
msgstr ""

#: ../../ref/forms/widgets.txt:613
# ec86088473a04add8d461f5b0a86610d
msgid "``CheckboxSelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:617
# 514955cc0f834b5780dbe7cfe3f6f7ab
msgid "Similar to :class:`SelectMultiple`, but rendered as a list of check buttons:"
msgstr ""

#: ../../ref/forms/widgets.txt:630
# 1d2a317a6e7a467fb760e720fdbe6c05
msgid "File upload widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:633
# 222b31cbe083430684649039e2b98150
msgid "``FileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:637
# f8863999020047c69e24325195635c70
msgid "File upload input: ``<input type='file' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:640
# 38706e15494744ac97b5afb5a8b7555f
msgid "``ClearableFileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:644
# b3f1f053ce6641e1b6048bd9fba49d2c
msgid "File upload input: ``<input type='file' ...>``, with an additional checkbox input to clear the field's value, if the field is not required and has initial data."
msgstr ""

#: ../../ref/forms/widgets.txt:651
# fe3af66b4cca408c932a1f1c8cb55565
msgid "Composite widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:654
# 5bc72aac905d4972b5fc0c47ad7e9fb2
msgid "``MultipleHiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:658
# 5bfb11e5bf9d4ef484c9e5db7f3200de
msgid "Multiple ``<input type='hidden' ...>`` widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:660
# 0c17681619c940b9909b4443d6416ec8
msgid "A widget that handles multiple hidden widgets for fields that have a list of values."
msgstr ""

#: ../../ref/forms/widgets.txt:670
# fcdae4abc6f64358844a2c0b9de8497c
msgid "``SplitDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:674
# 27a280dff51b4e6cb93a29fb366aa50b
msgid "Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput` for the date, and :class:`TimeInput` for the time."
msgstr ""

#: ../../ref/forms/widgets.txt:677
# c673d265afdc4732a0446e5f8667867b
msgid "``SplitDateTimeWidget`` has two optional attributes:"
msgstr ""

#: ../../ref/forms/widgets.txt:681
# ec1a4230b28c41898bd21fb17eb976ce
msgid "Similar to :attr:`DateInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:685
# 3538f0a319a84bc988250e5e93f9c674
msgid "Similar to :attr:`TimeInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:688
# 69d5d82b355d4994941a63e1a9d73f2d
msgid "``SplitHiddenDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:692
# 267f5ba3ca644c8b870becbb5ce52b5f
msgid "Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for both date and time."
msgstr ""

#: ../../ref/forms/widgets.txt:698
# 1d59f6fe73714f79929d70329a61189e
msgid "``SelectDateWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:702
# 11244dc74eb243af992ec0c2f6e32e00
msgid "Wrapper around three :class:`~django.forms.Select` widgets: one each for month, day, and year. Note that this widget lives in a separate file from the standard widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:710
# 36131be6c1874b9e8242451bcb10387d
msgid "An optional list/tuple of years to use in the \"year\" select box. The default is a list containing the current year and the next 9 years."
msgstr ""

#: ../../ref/generic-views.txt:10
# d30e84245d6342a7912adeb3fbd44e6a
msgid "From Django 1.3, function-based generic views have been deprecated in favor of a class-based approach, described in the class-based views :doc:`topic guide </topics/class-based-views>` and :doc:`detailed reference </ref/class-based-views>`."
msgstr ""

#: ../../ref/generic-views.txt:15
# b2d8b81d803a4f3b8504f2b5e526c8b7
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. In Django, the most common of these patterns have been abstracted into \"generic views\" that let you quickly provide common views of an object without actually needing to write any Python code."
msgstr ""

#: ../../ref/generic-views.txt:20
# 8d196046c7f040139380cea3dc5311a5
msgid "A general introduction to generic views can be found in the :doc:`topic guide </topics/generic-views>`."
msgstr ""

#: ../../ref/generic-views.txt:23
# 82c71c34619a4242afe28e19646003e1
msgid "This reference contains details of Django's built-in generic views, along with a list of all keyword arguments that a generic view expects. Remember that arguments may either come from the URL pattern or from the ``extra_context`` additional-information dictionary."
msgstr ""

#: ../../ref/generic-views.txt:35
# e83800577af64bcfbe8d617f8cda0bac
msgid "\"Simple\" generic views"
msgstr ""

#: ../../ref/generic-views.txt:37
# 599e8d29b7f44b0697834253cba82064
msgid "The ``django.views.generic.simple`` module contains simple views to handle a couple of common cases: rendering a template when no view logic is needed, and issuing a redirect."
msgstr ""

#: ../../ref/generic-views.txt:42
# 6d3302eee5b0418a9a7412e1af2c6af7
msgid "``django.views.generic.simple.direct_to_template``"
msgstr ""

#: ../../ref/generic-views.txt:44
#: ../../ref/generic-views.txt:81
#: ../../ref/generic-views.txt:162
#: ../../ref/generic-views.txt:243
#: ../../ref/generic-views.txt:328
#: ../../ref/generic-views.txt:421
#: ../../ref/generic-views.txt:493
#: ../../ref/generic-views.txt:583
#: ../../ref/generic-views.txt:592
#: ../../ref/generic-views.txt:695
#: ../../ref/generic-views.txt:807
#: ../../ref/generic-views.txt:880
#: ../../ref/generic-views.txt:954
#: ../../ref/generic-views.txt:1048
# ee195c84c3f743f9b895f169503021ae
# 1e9a0c199fc04e2d8ad55eeb9287bdee
# 7c9733569b4b4cf0b6722f9896f6c2fc
# d2f1cfe4089a4b1a8a8714fe3989c21c
# eec75bfed5f349e08185fdad394da961
# 08120c81c5a748b19d7991ed31d4342f
# daf12e8f3d784429b8971bf87943aefc
# 1245f8bd000b401eb1629ebde6c3bc13
# 7ff7ef91cb824c54ab5ba33d829101c7
# 00964422f6f14966b70e306d34377deb
# eacc2c2122b2447fa99e5973f8f114ed
# d934161fb16e488988fc8d6264dd3aae
# 611ebcb709b84ebda51ff9c79fad15fa
# 5197f79a80e2412fbd8b459a1e29013f
msgid "**Description:**"
msgstr ""

#: ../../ref/generic-views.txt:49
#: ../../ref/generic-views.txt:93
#: ../../ref/generic-views.txt:168
#: ../../ref/generic-views.txt:249
#: ../../ref/generic-views.txt:334
#: ../../ref/generic-views.txt:426
#: ../../ref/generic-views.txt:499
#: ../../ref/generic-views.txt:598
#: ../../ref/generic-views.txt:699
#: ../../ref/generic-views.txt:811
#: ../../ref/generic-views.txt:885
#: ../../ref/generic-views.txt:961
#: ../../ref/generic-views.txt:1055
# 792b3c53af4c48dea54a1f7b5922e66f
# b0e219e73d9748e7bb1b4c8e1bb92e49
# 6e7c08615f0142cba48e0b8deb57929b
# df997c96083948de908dd49d7d4b68f5
# 3c05879334b64f898c3852c46818f32d
# 06047b3963e84b1c940ee17bf1a8c6ce
# d58cb66b747c47688198c99f807a40cf
# cd9afd7bc3b54bd8907bf5f5eedbce52
# 2deaeea2aaea4ddd8ac0e6f69f7b4612
# 9c29192d9bce431e8f512c8881cba394
# 2140f96ef3fa428ebd1fef01972f5d17
# cfd53a2796614016ae5174efb310b7b8
# 5115b6c1c8a7456e93e938a753b14186
msgid "**Required arguments:**"
msgstr ""

#: ../../ref/generic-views.txt:51
# a3646d47b83c4f5d802e480646d2f2f7
msgid "``template``: The full name of a template to use."
msgstr ""

#: ../../ref/generic-views.txt:53
#: ../../ref/generic-views.txt:98
#: ../../ref/generic-views.txt:176
#: ../../ref/generic-views.txt:259
#: ../../ref/generic-views.txt:347
#: ../../ref/generic-views.txt:439
#: ../../ref/generic-views.txt:515
#: ../../ref/generic-views.txt:623
#: ../../ref/generic-views.txt:703
#: ../../ref/generic-views.txt:824
#: ../../ref/generic-views.txt:897
#: ../../ref/generic-views.txt:982
#: ../../ref/generic-views.txt:1072
# fc30856698204194b8322262e47eb6d9
# 45e3b846e995449f9d57d2af3ba2244f
# b01f95eb368b4e91adfa1e1e1979fbc3
# 5912ce25d9844db3a49b1f7bc9013d95
# 6b0d14537032480ab127a1d5b6dbde4f
# 2fd3612eb2b94d8d88e50d2d71b4f909
# e8ccdb1f6e164e50ba62959fe1cf5f76
# 4b0661c5c4b643ec8585e9b12e52f195
# c35bf27243cb4e77a8573e8ba9672c77
# de4219d59f694a42baf26c06a52b36ab
# cbaef8f7b47249ea8d43baf471508165
# f79a2dc10d744445a214beda15927038
# db21ce8efdb540ee884cc9242b5c4d68
msgid "**Optional arguments:**"
msgstr ""

#: ../../ref/generic-views.txt:55
#: ../../ref/generic-views.txt:187
#: ../../ref/generic-views.txt:267
#: ../../ref/generic-views.txt:361
#: ../../ref/generic-views.txt:447
#: ../../ref/generic-views.txt:532
#: ../../ref/generic-views.txt:649
#: ../../ref/generic-views.txt:720
#: ../../ref/generic-views.txt:841
#: ../../ref/generic-views.txt:920
#: ../../ref/generic-views.txt:1006
#: ../../ref/generic-views.txt:1089
# ddbec1b65c51490ea06bc3c43039726e
# a5d86e900c9c4050b5700c23edd7cef3
# ec697e330c9546ba9fe55f7c4c2c26c3
# ba19608a626347fcb2e770424117693c
# 1d4b63e8c5414f93bcc9c8fca079f754
# 457f11d1181f465da330ae2b8eb1ef1c
# e41c8d123c6f4ec39dc3fc42af48befc
# 8631fbe5b02446a9afb909b966b4ae00
# 3bac8c82aae34e25b6316c19ce1e26a6
# f3c56212d93e4f2bb6a320697a05a3be
# 897f3ff1ed0a4bd5914661950e37f62c
# 1bb91117d2294f0e996aa3382335a6ea
msgid "``extra_context``: A dictionary of values to add to the template context. By default, this is an empty dictionary. If a value in the dictionary is callable, the generic view will call it just before rendering the template."
msgstr ""

#: ../../ref/generic-views.txt:60
#: ../../ref/generic-views.txt:200
#: ../../ref/generic-views.txt:292
#: ../../ref/generic-views.txt:379
#: ../../ref/generic-views.txt:465
#: ../../ref/generic-views.txt:550
#: ../../ref/generic-views.txt:660
#: ../../ref/generic-views.txt:738
#: ../../ref/generic-views.txt:852
# 992f1d986f8948cbbd4a9b8f6fecb6cd
# 2ad3015e890548a08f82452054d2df3a
# 44c1b6f011e04d3da1f29c0329acff93
# 2beb9ed0efb54361b8157111792a1570
# ae99f5be75b14945b44d61ddfb67e6c8
# 3b9d961125ce44ff8ff4de3b3f1ff0f1
# dcb7d7ba6276489799d2cd59328b03b8
# 7b4f41aa052046079f384865360fe51b
# 1f48c79e1749495cae21b4b623a54252
msgid "``mimetype``: The MIME type to use for the resulting document. Defaults to the value of the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

#: ../../ref/generic-views.txt:63
#: ../../ref/generic-views.txt:113
# f1716c8abd2d48dc96987501f5e3209e
# 59b0131fa7454ec988733fc40c13590b
msgid "**Example:**"
msgstr ""

#: ../../ref/generic-views.txt:65
# ace9c68d63e9464582b980b3a4b575c0
msgid "Given the following URL patterns::"
msgstr ""

#: ../../ref/generic-views.txt:74
# 3f9cbf2a29e04b7a82df7355e6560333
msgid "... a request to ``/foo/`` would render the template ``foo_index.html``, and a request to ``/foo/15/`` would render the ``foo_detail.html`` with a context variable ``{{ params.id }}`` that is set to ``15``."
msgstr ""

#: ../../ref/generic-views.txt:79
# 81d494b6ab7b43d39fc1c0de4ac82795
msgid "``django.views.generic.simple.redirect_to``"
msgstr ""

#: ../../ref/generic-views.txt:95
# 8be29e163a5b43d7b2ca7d8feed5a67e
msgid "``url``: The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP error."
msgstr ""

#: ../../ref/generic-views.txt:100
# 79c55b19eb4c47449d299cbb5f34ec0f
msgid "``permanent``: Whether the redirect should be permanent. The only difference here is the HTTP status code returned. If ``True``, then the redirect will use status code 301. If ``False``, then the redirect will use status code 302. By default, ``permanent`` is ``True``."
msgstr ""

#: ../../ref/generic-views.txt:105
# c87309306ea541e698bb9596886d8998
msgid "``query_string``: Whether to pass along the GET query string to the new location. If ``True``, then the query string is appended to the URL. If ``False``, then the query string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:115
# f6f13343972f4f7fa4df488b8e6c0273
msgid "This example issues a permanent redirect (HTTP status code 301) from ``/foo/<id>/`` to ``/bar/<id>/``::"
msgstr ""

#: ../../ref/generic-views.txt:124
# 2795d775fd404775927e632d7a77d65d
msgid "This example issues a non-permanent redirect (HTTP status code 302) from ``/foo/<id>/`` to ``/bar/<id>/``::"
msgstr ""

#: ../../ref/generic-views.txt:133
# 5d6d2d819b4e4fe8882cb97b87f7edad
msgid "This example returns a 410 HTTP error for requests to ``/bar/``::"
msgstr ""

#: ../../ref/generic-views.txt:141
# acccfc346d38437d89bf6807042b1691
msgid "This example shows how ``\"%\"`` characters must be written in the URL in order to avoid confusion with Python's string formatting markers. If the redirect string is written as ``\"%7Ejacob/\"`` (with only a single ``%``), an exception would be raised::"
msgstr ""

#: ../../ref/generic-views.txt:154
# 61c9282bef444c3fa360ed517a3dfc3e
msgid "Date-based generic views"
msgstr ""

#: ../../ref/generic-views.txt:156
# 95cc92e996cd4e618c3ec6310aec2da3
msgid "Date-based generic views (in the module ``django.views.generic.date_based``) are views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/generic-views.txt:160
# 0f15145471eb4b2b823891d580827f0b
msgid "``django.views.generic.date_based.archive_index``"
msgstr ""

#: ../../ref/generic-views.txt:170
#: ../../ref/generic-views.txt:253
#: ../../ref/generic-views.txt:341
#: ../../ref/generic-views.txt:433
#: ../../ref/generic-views.txt:509
# 37fe8fb5d16f4650914dd1de0522b641
# 1cbabeb53fb6409ea4863fb58b16eec1
# c443916be2f64a3f87f0eef4fa9d61b7
# bb41b6cf88644568b6ca190da0fc465f
# 8204ae147f3e44acb2620000563c9123
msgid "``queryset``: A ``QuerySet`` of objects for which the archive serves."
msgstr ""

#: ../../ref/generic-views.txt:172
#: ../../ref/generic-views.txt:255
#: ../../ref/generic-views.txt:343
#: ../../ref/generic-views.txt:435
#: ../../ref/generic-views.txt:511
# 244b89bd30cf4b32af35b6adb4b00cf0
# f67c472cb29f48b6a8a15c0dd28bdb21
# 396cf4e49ae641549e97a0a7f9a5f3e2
# 943bf9ef1782433cb2a6ec346123449a
# 8a544ce252274940acd531f9ec83d71c
msgid "``date_field``: The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the date-based archive should use to determine the objects on the page."
msgstr ""

#: ../../ref/generic-views.txt:178
# 71e9503f9e794e7e894de885007b7404
msgid "``num_latest``: The number of latest objects to send to the template context. By default, it's 15."
msgstr ""

#: ../../ref/generic-views.txt:181
#: ../../ref/generic-views.txt:261
#: ../../ref/generic-views.txt:355
#: ../../ref/generic-views.txt:441
#: ../../ref/generic-views.txt:526
#: ../../ref/generic-views.txt:634
#: ../../ref/generic-views.txt:714
#: ../../ref/generic-views.txt:826
#: ../../ref/generic-views.txt:914
#: ../../ref/generic-views.txt:1000
#: ../../ref/generic-views.txt:1083
# bcef52ec8b424d13b32db10cab69ee91
# 445e350b15a0424d93112c61fdacb5e1
# ce7aaff865144d2681030095e9b07ab3
# 272c99fcb945460093d5fa9a7343cfc8
# 8886fc20d9cc471c838db469f1c3aa1f
# 30d13c7f20e14bcf94598c1f695836cd
# aa07b701efde4543af8588a44924b4ea
# f1111e2c7bb641c5be7dfb1e79d86324
# 96bfa5f8d7d1459caa101550cc271b0c
# 76c0b5e060374506aef325d3e85ac716
# e7f0a45a5c6e4a07a9366c9002b89faf
msgid "``template_name``: The full name of a template to use in rendering the page. This lets you override the default template name (see below)."
msgstr ""

#: ../../ref/generic-views.txt:184
#: ../../ref/generic-views.txt:264
#: ../../ref/generic-views.txt:358
#: ../../ref/generic-views.txt:444
#: ../../ref/generic-views.txt:529
#: ../../ref/generic-views.txt:646
#: ../../ref/generic-views.txt:717
#: ../../ref/generic-views.txt:838
#: ../../ref/generic-views.txt:917
#: ../../ref/generic-views.txt:1003
#: ../../ref/generic-views.txt:1086
# 54cf897196294690ac9ba4d83d625521
# 72becf0703c44069bbb6f1eafc441507
# 92ec363506214db793b60f5289d58024
# cf52af0d195d42aeb3c92e53d3d94c23
# 593de81e243c464b9c7b41ab027719b8
# 882efbefcd1e4d5ebd05bea8bb250fcc
# 58082e2dfbf34f999629b796c39a1249
# ee62d59aaa5747ccbe65ad659a60595b
# 8537b124df2043b0be8913ef89b908dd
# 908ebd14635340b997074b0a71e481de
# c2ddaec7251d4f609fd75ddf2b96f8f9
msgid "``template_loader``: The template loader to use when loading the template. By default, it's ``django.template.loader``."
msgstr ""

#: ../../ref/generic-views.txt:192
#: ../../ref/generic-views.txt:452
#: ../../ref/generic-views.txt:725
# e237587930374e6b9f5e98682d7d2011
# e5c24bf302674467ac37a468af54604c
# 841bdf869be543c4bfdf98c01fb7caa5
msgid "``allow_empty``: A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``True``."
msgstr ""

#: ../../ref/generic-views.txt:197
#: ../../ref/generic-views.txt:277
#: ../../ref/generic-views.txt:371
#: ../../ref/generic-views.txt:457
#: ../../ref/generic-views.txt:542
#: ../../ref/generic-views.txt:654
#: ../../ref/generic-views.txt:730
#: ../../ref/generic-views.txt:846
#: ../../ref/generic-views.txt:925
#: ../../ref/generic-views.txt:1011
#: ../../ref/generic-views.txt:1094
# e8d9a404730943548ab03d56be33b0aa
# a299ffa4a4bd4b01af734e62993d47d6
# 864836083a6a43989ce2d3cbea91941f
# 7504e7b42af84cf19a3fd93f2a0fca64
# 200ff6a935c540d2843dfc1a6c0368f5
# 29bd1d247d8d4e7e90b75cdf44d186a6
# 23f768b85d1c45e9b154f6c0016ef740
# ea62136e9b534d91b1c53689f05978b2
# b50ef62070f743cd8f132e4fcdb700bb
# 2c4ee148908b4b58bc58fffa6fae4eb9
# 1266dbd1a4244fe8a64c906660a387ac
msgid "``context_processors``: A list of template-context processors to apply to the view's template."
msgstr ""

#: ../../ref/generic-views.txt:203
#: ../../ref/generic-views.txt:295
#: ../../ref/generic-views.txt:382
#: ../../ref/generic-views.txt:468
#: ../../ref/generic-views.txt:553
#: ../../ref/generic-views.txt:663
# 4085e7b48bc843e0954f123410fa6424
# 1e882d7e025643a680084f4e7052f654
# b5e98d7fa7f74f2f81ff682cecefb1f2
# f4e7be72b26542b69bc5b43ba631fc49
# 4a38c0c7bffa485abea0c9cf331a4d7a
# 12ba6caed7394912859866a0a6d09a27
msgid "``allow_future``: A boolean specifying whether to include \"future\" objects on this page, where \"future\" means objects in which the field specified in ``date_field`` is greater than the current date/time. By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:208
# c38c8233de314ae09685580d59f3a61e
msgid "``template_object_name``: Designates the name of the template variable to use in the template context. By default, this is ``'latest'``."
msgstr ""

#: ../../ref/generic-views.txt:211
#: ../../ref/generic-views.txt:300
#: ../../ref/generic-views.txt:387
#: ../../ref/generic-views.txt:473
#: ../../ref/generic-views.txt:558
#: ../../ref/generic-views.txt:668
#: ../../ref/generic-views.txt:741
#: ../../ref/generic-views.txt:855
#: ../../ref/generic-views.txt:928
#: ../../ref/generic-views.txt:1017
#: ../../ref/generic-views.txt:1100
# c412293fafb942a9a42ede44796a9ab3
# 097de20b7510403789953ed9bf4d9d67
# 9812e4d0d6344bff9ea74a6bd6de7caf
# 0472717cac80417abaa3fe0052450e0d
# 2beee0465fb44518bb588179e93cdccb
# a1f5a2c626304552b25bc680db00fc21
# 6845874660514a8e91b5d420c08f7df9
# a73cd1019b674386818b456f2766d762
# f7e6a33259ed471da3d667dce670c3b8
# 85c65c3c841d40e0bd45f312e7d09fc7
# 9c6d02d252be4ec199eec773f6f7aa0a
msgid "**Template name:**"
msgstr ""

#: ../../ref/generic-views.txt:213
# 7a87951897eb461dabae43f3c8c08af5
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive.html`` by default, where:"
msgstr ""

#: ../../ref/generic-views.txt:216
# dede6637458945f3b28920c7a9171376
msgid "``<model_name>`` is your model's name in all lowercase. For a model ``StaffMember``, that'd be ``staffmember``."
msgstr ""

#: ../../ref/generic-views.txt:219
# f0db8aad19d3416783c2fc01a055b96c
msgid "``<app_label>`` is the right-most part of the full Python path to your model's app. For example, if your model lives in ``apps/blog/models.py``, that'd be ``blog``."
msgstr ""

#: ../../ref/generic-views.txt:223
#: ../../ref/generic-views.txt:305
#: ../../ref/generic-views.txt:392
#: ../../ref/generic-views.txt:478
#: ../../ref/generic-views.txt:563
#: ../../ref/generic-views.txt:673
#: ../../ref/generic-views.txt:746
#: ../../ref/generic-views.txt:860
#: ../../ref/generic-views.txt:933
#: ../../ref/generic-views.txt:1022
#: ../../ref/generic-views.txt:1105
# 315b6c900ba0499092c3b5efa4be63b2
# 18cecd1a98d446c3862441d3f46cd1a2
# a417e10e03704fae97721c32f9cad651
# d5d072f48f2e49cda44aca11886b2445
# 0dad646807e945efa2f80e863400381b
# c4393c2e8a2043dea78dcb241fe218c1
# 414cbb46832b4b8f814dd732a1e40f5b
# ae814b8765f3408d97d44a2e478d5375
# cd7041a228414bb9bb91dc13a9cf2902
# 32545dd81c934786927862bb8a14d439
# 6d999797d8fa4a869f820f4237479a18
msgid "**Template context:**"
msgstr ""

#: ../../ref/generic-views.txt:225
#: ../../ref/generic-views.txt:307
#: ../../ref/generic-views.txt:397
#: ../../ref/generic-views.txt:480
#: ../../ref/generic-views.txt:565
#: ../../ref/generic-views.txt:675
#: ../../ref/generic-views.txt:748
#: ../../ref/generic-views.txt:862
#: ../../ref/generic-views.txt:935
#: ../../ref/generic-views.txt:1024
#: ../../ref/generic-views.txt:1107
# fd969efdfde645d09611f7c281ce93fc
# e45eb26f315c4f8d9202e2ffb2d8c0ba
# 4d9e4e7fc0454df0baf6be7c3481e48f
# 8774fc2c5be641e888270f91150026ca
# 74d312482637476397a9990a1e2e0729
# d8166760dae54ca4ac0c086c5d181206
# a1987ff0b4f44426aac0d412b9065d33
# 652343b51c184c1f97dc2cf0b2c57f51
# b5090e78d8a2490d9b51ba1f2186513b
# 23ccacb09baa46b08aaa1bdc69a64771
# 49eb5f00cae84d568b6b509ef4b38ad8
msgid "In addition to ``extra_context``, the template's context will be:"
msgstr ""

#: ../../ref/generic-views.txt:227
# 08cbc7e596ba4e0588e182b98ee19c0d
msgid "``date_list``: A ``DateQuerySet`` object containing all years that have have objects available according to ``queryset``, represented as ``datetime.datetime`` objects. These are ordered in reverse. This is equivalent to ``queryset.dates(date_field, 'year')[::-1]``."
msgstr ""

#: ../../ref/generic-views.txt:232
# 256672c8c45d4fb992622d82a34dbc71
msgid "``latest``: The ``num_latest`` objects in the system, ordered descending by ``date_field``. For example, if ``num_latest`` is ``10``, then ``latest`` will be a list of the latest 10 objects in ``queryset``."
msgstr ""

#: ../../ref/generic-views.txt:236
# 59a428e700904909b2024cf86ffd9a0e
msgid "This variable's name depends on the ``template_object_name`` parameter, which is ``'latest'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/generic-views.txt:241
# e4e2ac6f39594ebd9a4a242c75788245
msgid "``django.views.generic.date_based.archive_year``"
msgstr ""

#: ../../ref/generic-views.txt:251
# 7b6778a3163046f49cd4e6fade055cf5
msgid "``year``: The four-digit year for which the archive serves."
msgstr ""

#: ../../ref/generic-views.txt:272
#: ../../ref/generic-views.txt:366
#: ../../ref/generic-views.txt:537
# 53673295404a4d1691c81188b7117e62
# 27315d60232d4bbcb23adf9e9de1ecee
# e7760d219f5b47eea305296e3349cda9
msgid "``allow_empty``: A boolean specifying whether to display the page if no objects are available. If this is ``False`` and no objects are available, the view will raise a 404 instead of displaying an empty page. By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:280
#: ../../ref/generic-views.txt:374
#: ../../ref/generic-views.txt:460
#: ../../ref/generic-views.txt:545
#: ../../ref/generic-views.txt:733
# d9c75c8c5b88485a9add9ee22d033f02
# 2b707202bfab4abca6e1f8d239f477cf
# 227acb058a1c4b5d9689594f8bd4d184
# 0cd0f551e1f54a77906e32fd08126cd9
# 85f737ccfa524549bd023f59aef8b474
msgid "``template_object_name``:  Designates the name of the template variable to use in the template context. By default, this is ``'object'``. The view will append ``'_list'`` to the value of this parameter in determining the variable's name."
msgstr ""

#: ../../ref/generic-views.txt:285
# d338ee93283348cb89bfa45eedb8399e
msgid "``make_object_list``: A boolean specifying whether to retrieve the full list of objects for this year and pass those to the template. If ``True``, this list of objects will be made available to the template as ``object_list``. (The name ``object_list`` may be different; see the docs for ``object_list`` in the \"Template context\" section below.) By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:302
# eff9f1ff5dfc4938830c9f75e4427484
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_year.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:309
# c6b81231cf194acd9fc5446ee8597a9b
msgid "``date_list``: A ``DateQuerySet`` object containing all months that have have objects available according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/generic-views.txt:315
# d2422a40b2794aa6926c240c78a5e17f
msgid "``object_list``: If the ``make_object_list`` parameter is ``True``, this will be set to a list of objects available for the given year, ordered by the date field. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:322
# 0dc6a1e3237a4917958aa42fb1561036
msgid "If ``make_object_list`` is ``False``, ``object_list`` will be passed to the template as an empty list."
msgstr ""

#: ../../ref/generic-views.txt:326
# 8f42ecb69577420eb90d363f63da9bd2
msgid "``django.views.generic.date_based.archive_month``"
msgstr ""

#: ../../ref/generic-views.txt:336
#: ../../ref/generic-views.txt:428
#: ../../ref/generic-views.txt:501
# 0385f7765470487da4a6594a0723379a
# 4aa18717b75343a0a32bac0ea508570f
# 3d88f869dd01457dab8df81fc55b511e
msgid "``year``: The four-digit year for which the archive serves (a string)."
msgstr ""

#: ../../ref/generic-views.txt:338
#: ../../ref/generic-views.txt:503
# 899c801272c34c8396de9f240f6164b2
# 3c0f85f0b695475db54fe0bd105dcb7b
msgid "``month``: The month for which the archive serves, formatted according to the ``month_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:349
#: ../../ref/generic-views.txt:517
#: ../../ref/generic-views.txt:625
# 602703be7b6f4f96b54c025851846d5e
# 48ec1628d590452e91a73d6d0b2d1732
# f3a5994fcd594ed186c8fde824b9be6e
msgid "``month_format``: A format string that regulates what format the ``month`` parameter uses. This should be in the syntax accepted by Python's :func:`~time.strftime`. It's set to ``\"%b\"`` by default, which is a three-letter month abbreviation. To change it to use numbers, use ``\"%m\"``."
msgstr ""

#: ../../ref/generic-views.txt:389
# 405a1322836846458c8b2a2dfdb06597
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_month.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:399
# 5a4b0cfafb5044dfb19b022b8230c3ec
msgid "``date_list``: A ``DateQuerySet`` object containing all days that have have objects available in the given month, according to ``queryset``, represented as ``datetime.datetime`` objects, in ascending order."
msgstr ""

#: ../../ref/generic-views.txt:413
# 8409732ab4e1478e9b6cd187b8e1184b
msgid "``object_list``: A list of objects available for the given month. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:419
# df8e4694cd684741a7dd9ea1c8156d15
msgid "``django.views.generic.date_based.archive_week``"
msgstr ""

#: ../../ref/generic-views.txt:430
# bd7e81acfb3947e1879054a1f597c278
msgid "``week``: The week of the year for which the archive serves (a string). Weeks start with Sunday."
msgstr ""

#: ../../ref/generic-views.txt:475
# dec4393c2bb54720ac1b215e8664dced
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_week.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:485
# 390754caeed54ed3ae4345c026e3dd14
msgid "``object_list``: A list of objects available for the given week. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:491
# 5f741083f16f4e98a7f9447b1addea84
msgid "``django.views.generic.date_based.archive_day``"
msgstr ""

#: ../../ref/generic-views.txt:506
# 66e94c798fdc465499565b0c50c2a40b
msgid "``day``: The day for which the archive serves, formatted according to the ``day_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:523
#: ../../ref/generic-views.txt:631
# b6e6baeb770b466da2e0ca194909bfbf
# 9c7cf4302aaa4d08b58064ef44d3b27e
msgid "``day_format``: Like ``month_format``, but for the ``day`` parameter. It defaults to ``\"%d\"`` (day of the month as a decimal number, 01-31)."
msgstr ""

#: ../../ref/generic-views.txt:560
# 3a4260473a0d4a01ac7a589b2534d252
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_archive_day.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:575
# 9b7ef1e5e66f4faa824948c41f35bdff
msgid "``object_list``: A list of objects available for the given day. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:581
# a0641d76710041ceaf4f9a42eebac3a8
msgid "``django.views.generic.date_based.archive_today``"
msgstr ""

#: ../../ref/generic-views.txt:585
# c983d1f06223452ea125cb5f7accbfa1
msgid "A day archive page showing all objects for *today*. This is exactly the same as ``archive_day``, except the ``year``/``month``/``day`` arguments are not used, and today's date is used instead."
msgstr ""

#: ../../ref/generic-views.txt:590
# 1552f28801d54200ac5ab55955dd54e0
msgid "``django.views.generic.date_based.object_detail``"
msgstr ""

#: ../../ref/generic-views.txt:600
# 91c7f95dd90c452ebb19e8ddffa1c1dc
msgid "``year``: The object's four-digit year (a string)."
msgstr ""

#: ../../ref/generic-views.txt:602
# 4b7e690852b4471588faafd728de09ba
msgid "``month``: The object's month , formatted according to the ``month_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:605
# ee30fc95dfd543659dbdcf9a40fb5da4
msgid "``day``: The object's day , formatted according to the ``day_format`` argument."
msgstr ""

#: ../../ref/generic-views.txt:608
#: ../../ref/generic-views.txt:813
# bb80dc401b6a421b9158ac787b291281
# 84292727ca6341aa885bbc50ac72d025
msgid "``queryset``: A ``QuerySet`` that contains the object."
msgstr ""

#: ../../ref/generic-views.txt:610
# 12841dcba3fb4f2792b11f2ba059d7bd
msgid "``date_field``: The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s model that the generic view should use to look up the object according to ``year``, ``month`` and ``day``."
msgstr ""

#: ../../ref/generic-views.txt:614
#: ../../ref/generic-views.txt:815
#: ../../ref/generic-views.txt:973
#: ../../ref/generic-views.txt:1060
# aac18c58d2fb4381b6f9621049b0db8b
# c562cc73e81e43c6ba6b3004aece1176
# b56f34475614469faa7358561fed7591
# 279604fd39dd474c9ff4dc921728e92e
msgid "Either ``object_id`` or (``slug`` *and* ``slug_field``) is required."
msgstr ""

#: ../../ref/generic-views.txt:616
#: ../../ref/generic-views.txt:817
#: ../../ref/generic-views.txt:975
#: ../../ref/generic-views.txt:1062
# 8cd179e6c3b44467a88164d5f0caa25b
# 7711f841eeba487bb8b6d32831b5f60c
# 976f73e118bf4b4098fa6cbbb644688e
# e9546f9781954265b5721a398cd5a95f
msgid "If you provide ``object_id``, it should be the value of the primary-key field for the object being displayed on this page."
msgstr ""

#: ../../ref/generic-views.txt:619
#: ../../ref/generic-views.txt:820
#: ../../ref/generic-views.txt:978
#: ../../ref/generic-views.txt:1065
# 8288cff20bb64bc9866272448617cdca
# f87ebfb5757c4cf0b103f5145b709676
# b0dd97dcde0646728ec429040cfe690e
# 54cdd44406104ae5a30d0bf1806d2ae7
msgid "Otherwise, ``slug`` should be the slug of the given object, and ``slug_field`` should be the name of the slug field in the ``QuerySet``'s model. By default, ``slug_field`` is ``'slug'``."
msgstr ""

#: ../../ref/generic-views.txt:637
#: ../../ref/generic-views.txt:829
# 3559ad1c41f544129388a3b7cde33f32
# 4d56028a4dd3416e9e4d37808d713279
msgid "``template_name_field``: The name of a field on the object whose value is the template name to use. This lets you store template names in the data. In other words, if your object has a field ``'the_template'`` that contains a string ``'foo.html'``, and you set ``template_name_field`` to ``'the_template'``, then the generic view for this object will use the template ``'foo.html'``."
msgstr ""

#: ../../ref/generic-views.txt:644
#: ../../ref/generic-views.txt:836
# 58d71638962b43d887ea38c895be3030
# 4c1cc7cb499445adaa60d9407e9ff47d
msgid "It's a bit of a brain-bender, but it's useful in some cases."
msgstr ""

#: ../../ref/generic-views.txt:657
#: ../../ref/generic-views.txt:849
#: ../../ref/generic-views.txt:1014
#: ../../ref/generic-views.txt:1097
# 47fd2177dd2b445b874232233adafdbf
# fa011206e243477c8991c52dd69c0054
# df0c0f158187482d98c7d6c383ebb731
# 6ae064254c744cb19274c08bff8e86d8
msgid "``template_object_name``:  Designates the name of the template variable to use in the template context. By default, this is ``'object'``."
msgstr ""

#: ../../ref/generic-views.txt:670
#: ../../ref/generic-views.txt:857
# 0fd81ba61bda4810a4187e745fabf1b6
# c59ee352709f4321a4c61663bd513cc6
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_detail.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:677
#: ../../ref/generic-views.txt:864
# 63292744804349a59687bbf8821ca6dc
# b06e060b2f2e4d16b84fcd7be9974e96
msgid "``object``: The object. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/generic-views.txt:685
# 35bfe15d58524b829c862cae46259c5e
msgid "List/detail generic views"
msgstr ""

#: ../../ref/generic-views.txt:687
# 5152549aa29d4cb3bcdecc7a4a3b7866
msgid "The list-detail generic-view framework (in the ``django.views.generic.list_detail`` module) is similar to the date-based one, except the former simply has two views: a list of objects and an individual object page."
msgstr ""

#: ../../ref/generic-views.txt:693
# 0fd37591c51146878d051457e99791da
msgid "``django.views.generic.list_detail.object_list``"
msgstr ""

#: ../../ref/generic-views.txt:701
# 41ef5481548e420882b969213a7ad50b
msgid "``queryset``: A ``QuerySet`` that represents the objects."
msgstr ""

#: ../../ref/generic-views.txt:705
# 151f430f0c214f13bc7909eb5454b020
msgid "``paginate_by``: An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with ``paginate_by`` objects per page. The view will expect either a ``page`` query string parameter (via ``GET``) or a ``page`` variable specified in the URLconf. See `Notes on pagination`_ below."
msgstr ""

#: ../../ref/generic-views.txt:711
# 227a0e3ed64546dc907d1fe5c16f7316
msgid "``page``: The current page number, as an integer, or the string ``'last'``. This is 1-based. See `Notes on pagination`_ below."
msgstr ""

#: ../../ref/generic-views.txt:743
# 17ff98403a45408ab52d65d18f78b956
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_list.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:750
# 7dcd9ab2143347349ed02ce76dcb08d7
msgid "``object_list``: The list of objects. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo_list``."
msgstr ""

#: ../../ref/generic-views.txt:755
# c0af99323b23400a8c566e30a34e2b3e
msgid "``is_paginated``: A boolean representing whether the results are paginated. Specifically, this is set to ``False`` if the number of available objects is less than or equal to ``paginate_by``."
msgstr ""

#: ../../ref/generic-views.txt:759
# eab5276dd88348e3855ca26de35c2166
msgid "If the results are paginated, the context will contain these extra variables:"
msgstr ""

#: ../../ref/generic-views.txt:761
# a00ad9121a26447eb15e6ea17ed49918
msgid "``paginator``: An instance of ``django.core.paginator.Paginator``."
msgstr ""

#: ../../ref/generic-views.txt:763
# 9d1f3e6fc3884e5b84ed138ca83252b4
msgid "``page_obj``: An instance of ``django.core.paginator.Page``."
msgstr ""

#: ../../ref/generic-views.txt:766
# 746126d11a6346e391f979dccf6adf92
msgid "Notes on pagination"
msgstr ""

#: ../../ref/generic-views.txt:768
# c2392af248314967bcbe9b15130ed1d7
msgid "If ``paginate_by`` is specified, Django will paginate the results. You can specify the page number in the URL in one of two ways:"
msgstr ""

#: ../../ref/generic-views.txt:781
# 0c07242fdc794697bf50458eb7b79919
msgid "To loop over all the available page numbers, use the ``page_range`` variable. You can iterate over the list provided by ``page_range`` to create a link to every page of results."
msgstr ""

#: ../../ref/generic-views.txt:803
# e74c0ab3327445ddac7f7eb344a39d27
msgid "``django.views.generic.list_detail.object_detail``"
msgstr ""

#: ../../ref/generic-views.txt:872
# b2b8f97dc44a4332a68fcf735c4c2739
msgid "Create/update/delete generic views"
msgstr ""

#: ../../ref/generic-views.txt:874
# d51b51bcfffb48799f7f28816d9bc8c8
msgid "The ``django.views.generic.create_update`` module contains a set of functions for creating, editing and deleting objects."
msgstr ""

#: ../../ref/generic-views.txt:878
# bc0b4829eae944fd8e230afa02f894ac
msgid "``django.views.generic.create_update.create_object``"
msgstr ""

#: ../../ref/generic-views.txt:882
# 865e86b45d364cc281bf9d4b4cf6dec1
msgid "A page that displays a form for creating an object, redisplaying the form with validation errors (if there are any) and saving the object."
msgstr ""

#: ../../ref/generic-views.txt:887
#: ../../ref/generic-views.txt:963
# 31bcdeada2cd42798dd10c481e97277f
# 839a8ffcef1349159b2d8a9528d899ca
msgid "Either ``form_class`` or ``model`` is required."
msgstr ""

#: ../../ref/generic-views.txt:889
#: ../../ref/generic-views.txt:965
# 977fbd35a10443859f0dda953f56f0db
# a3c4352a1f0c407e95fdbff048996289
msgid "If you provide ``form_class``, it should be a ``django.forms.ModelForm`` subclass. Use this argument when you need to customize the model's form. See the :doc:`ModelForm docs </topics/forms/modelforms>` for more information."
msgstr ""

#: ../../ref/generic-views.txt:894
#: ../../ref/generic-views.txt:970
# 3226356c105c435296df9b4f94d02ff9
# 67bd5ff403f443f2b68b23eade147b17
msgid "Otherwise, ``model`` should be a Django model class and the form used will be a standard ``ModelForm`` for ``model``."
msgstr ""

#: ../../ref/generic-views.txt:899
#: ../../ref/generic-views.txt:984
# 45775ce961464bb2b65f31dd1a768849
# bc38f62a1f354a1b835332d502084de3
msgid "``post_save_redirect``: A URL to which the view will redirect after saving the object. By default, it's ``object.get_absolute_url()``."
msgstr ""

#: ../../ref/generic-views.txt:902
#: ../../ref/generic-views.txt:987
# a2fb3d2e09584a15b107dc99621ba25e
# 038db1655f0b4a569e7139f610133577
msgid "``post_save_redirect`` may contain dictionary string formatting, which will be interpolated against the object's field attributes. For example, you could use ``post_save_redirect=\"/polls/%(slug)s/\"``."
msgstr ""

#: ../../ref/generic-views.txt:906
#: ../../ref/generic-views.txt:991
#: ../../ref/generic-views.txt:1074
# 67a90185dc9141b19724dc0890d0eff2
# 9757f5d68b584dfdb4195850b34ca67d
# ad3f00bc74184d4b963019facb504988
msgid "``login_required``: A boolean that designates whether a user must be logged in, in order to see the page and save changes. This hooks into the Django :doc:`authentication system </topics/auth>`. By default, this is ``False``."
msgstr ""

#: ../../ref/generic-views.txt:911
# 73fa7d5a6a3e4cd7a54bd51714165dd2
msgid "If this is ``True``, and a non-logged-in user attempts to visit this page or save the form, Django will redirect the request to ``/accounts/login/``."
msgstr ""

#: ../../ref/generic-views.txt:930
#: ../../ref/generic-views.txt:1019
# dc8c50693aac4e928cd2eed27bc8d23c
# 288106c30f014de0b99c13c1e57c8f7c
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_form.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:937
# 6cfa49dbdf4c4c7392c7fd9430402689
msgid "``form``: A ``django.forms.ModelForm`` instance representing the form for creating the object. This lets you refer to form fields easily in the template system."
msgstr ""

#: ../../ref/generic-views.txt:941
#: ../../ref/generic-views.txt:1030
# ad2c04448a954e72b5f1b1f73bbb1c71
# e67857c0c50a46e08418e0be37620bc0
msgid "For example, if the model has two fields, ``name`` and ``address``::"
msgstr ""

#: ../../ref/generic-views.txt:948
#: ../../ref/generic-views.txt:1037
# c842f4c8a50f470d91ceacf985c0368b
# 4d3c262311f24847aa915ca7bc594d85
msgid "See the :doc:`forms documentation </topics/forms/index>` for more information about using ``Form`` objects in templates."
msgstr ""

#: ../../ref/generic-views.txt:952
# 6bfec608eed3411cb5e2187c48101dd4
msgid "``django.views.generic.create_update.update_object``"
msgstr ""

#: ../../ref/generic-views.txt:956
# e9bc25a3f31c430aae7bff7c3bbf5f24
msgid "A page that displays a form for editing an existing object, redisplaying the form with validation errors (if there are any) and saving changes to the object. This uses a form automatically generated from the object's model class."
msgstr ""

#: ../../ref/generic-views.txt:996
#: ../../ref/generic-views.txt:1079
# fc19c1b5b67e4dbe8e200b525e8abee1
# afd1e010b2f24b7cacafe97f2ff7d910
msgid "If this is ``True``, and a non-logged-in user attempts to visit this page or save the form, Django will redirect to :setting:`LOGIN_URL` (which defaults to ``/accounts/login/``)."
msgstr ""

#: ../../ref/generic-views.txt:1026
# 1fab73a92950434b811ba7d041d7403f
msgid "``form``: A ``django.forms.ModelForm`` instance representing the form for editing the object. This lets you refer to form fields easily in the template system."
msgstr ""

#: ../../ref/generic-views.txt:1040
# fb587e2277bd470fb22a93a15ea1975b
msgid "``object``: The original object being edited. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/generic-views.txt:1046
# 9ecf6f359c9d49b79338acf265e8a650
msgid "``django.views.generic.create_update.delete_object``"
msgstr ""

#: ../../ref/generic-views.txt:1057
# 71ca52e484134f44a7d3ccef680a6d9b
msgid "``model``: The Django model class of the object that the form will delete."
msgstr ""

#: ../../ref/generic-views.txt:1069
# 1cb001aab96d4288b3bdc97d597d5375
msgid "``post_delete_redirect``: A URL to which the view will redirect after deleting the object."
msgstr ""

#: ../../ref/generic-views.txt:1102
# 7e46f49c1ebc457fa1d196c4d7929d29
msgid "If ``template_name`` isn't specified, this view will use the template ``<app_label>/<model_name>_confirm_delete.html`` by default."
msgstr ""

#: ../../ref/generic-views.txt:1109
# 9cd9aa497d8c4b54814628f78c035fd1
msgid "``object``: The original object that's about to be deleted. This variable's name depends on the ``template_object_name`` parameter, which is ``'object'`` by default. If ``template_object_name`` is ``'foo'``, this variable's name will be ``foo``."
msgstr ""

#: ../../ref/middleware.txt:3
# 3164f4b788ba43ff9a56f8c5f9405d5b
msgid "Middleware"
msgstr ""

#: ../../ref/middleware.txt:8
# 90faf49e2aa147b0b058bbaf02e22d2f
msgid "This document explains all middleware components that come with Django. For information on how to use them and how to write your own middleware, see the :doc:`middleware usage guide </topics/http/middleware>`."
msgstr ""

#: ../../ref/middleware.txt:13
# d3d9d3481dea4bd48fc02b5305214936
msgid "Available middleware"
msgstr ""

#: ../../ref/middleware.txt:16
# 158bfff40b374b64916c9813bc77d86a
msgid "Cache middleware"
msgstr ""

#: ../../ref/middleware.txt:25
# b1ba36e86a9a43c892f18728981ebb8f
msgid "Enable the site-wide cache. If these are enabled, each Django-powered page will be cached for as long as the :setting:`CACHE_MIDDLEWARE_SECONDS` setting defines. See the :doc:`cache documentation </topics/cache>`."
msgstr ""

#: ../../ref/middleware.txt:30
# c51c73ed05f44a19bf0ab31bc83d7612
msgid "\"Common\" middleware"
msgstr ""

#: ../../ref/middleware.txt:37
# 51ee4d9e1c0a45bd84d24dcf99ca4066
msgid "Adds a few conveniences for perfectionists:"
msgstr ""

#: ../../ref/middleware.txt:39
# 09aa3e344cda40c395b369729305db5c
msgid "Forbids access to user agents in the :setting:`DISALLOWED_USER_AGENTS` setting, which should be a list of strings."
msgstr ""

#: ../../ref/middleware.txt:42
# baa1b3d3238545aab3d05ad1cf5ba0dd
msgid "Performs URL rewriting based on the :setting:`APPEND_SLASH` and :setting:`PREPEND_WWW` settings."
msgstr ""

#: ../../ref/middleware.txt:45
# c15bbb8e881a4d51b1ef720d48c4254b
msgid "If :setting:`APPEND_SLASH` is ``True`` and the initial URL doesn't end with a slash, and it is not found in the URLconf, then a new URL is formed by appending a slash at the end. If this new URL is found in the URLconf, then Django redirects the request to this new URL. Otherwise, the initial URL is processed as usual."
msgstr ""

#: ../../ref/middleware.txt:51
# 735649850a9d4204a8268cbaab48499c
msgid "For example, ``foo.com/bar`` will be redirected to ``foo.com/bar/`` if you don't have a valid URL pattern for ``foo.com/bar`` but *do* have a valid pattern for ``foo.com/bar/``."
msgstr ""

#: ../../ref/middleware.txt:55
# b3784c09655a4c4a8a423ccf0485d4a9
msgid "If :setting:`PREPEND_WWW` is ``True``, URLs that lack a leading \"www.\" will be redirected to the same URL with a leading \"www.\""
msgstr ""

#: ../../ref/middleware.txt:58
# 49369aa3277a4fb491a6afc2cf88927d
msgid "Both of these options are meant to normalize URLs. The philosophy is that each URL should exist in one, and only one, place. Technically a URL ``foo.com/bar`` is distinct from ``foo.com/bar/`` -- a search-engine indexer would treat them as separate URLs -- so it's best practice to normalize URLs."
msgstr ""

#: ../../ref/middleware.txt:64
# 497002b2a99d49f4ae0b5128ac28308d
msgid "Sends broken link notification emails to :setting:`MANAGERS` if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True``."
msgstr ""

#: ../../ref/middleware.txt:67
# 499f539431e34498a43c9a44ac2c9890
msgid "Handles ETags based on the :setting:`USE_ETAGS` setting. If :setting:`USE_ETAGS` is set to ``True``, Django will calculate an ETag for each request by MD5-hashing the page content, and it'll take care of sending ``Not Modified`` responses, if appropriate."
msgstr ""

#: ../../ref/middleware.txt:73
# 13bbe5136c024e70823a5d7e35f11bb0
msgid "View metadata middleware"
msgstr ""

#: ../../ref/middleware.txt:80
# 4bd0a230f4ed4482927ca77c3986bd17
msgid "Sends custom ``X-View`` HTTP headers to HEAD requests that come from IP addresses defined in the :setting:`INTERNAL_IPS` setting. This is used by Django's :doc:`automatic documentation system </ref/contrib/admin/admindocs>`. Depends on :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`."
msgstr ""

#: ../../ref/middleware.txt:86
# 7b57f9695a194134b8faab62fe3e1dd1
msgid "GZip middleware"
msgstr ""

#: ../../ref/middleware.txt:93
# 1186d67a3cce4aafa8c0e8b089fa505c
msgid "Compresses content for browsers that understand GZip compression (all modern browsers)."
msgstr ""

#: ../../ref/middleware.txt:96
# d0bb0c649d2449368dec76602f8d41fb
msgid "This middleware should be placed before any other middleware that need to read or write the response body so that compression happens afterward."
msgstr ""

#: ../../ref/middleware.txt:99
# 3a7703d4e95b4ffeb39ff5428546c116
msgid "It will NOT compress content if any of the following are true:"
msgstr ""

#: ../../ref/middleware.txt:101
# 8cba14b5d82d476f8e5b221918bbf27b
msgid "The content body is less than 200 bytes long."
msgstr ""

#: ../../ref/middleware.txt:103
# 61ff771f029840e48d09fb1dfdb0e7fd
msgid "The response has already set the ``Content-Encoding`` header."
msgstr ""

#: ../../ref/middleware.txt:105
# 42102f87c4264583ba7fc5d1213bd254
msgid "The request (the browser) hasn't sent an ``Accept-Encoding`` header containing ``gzip``."
msgstr ""

#: ../../ref/middleware.txt:108
# 5ba9126b7ed14deda6fb36f6e9bbd78f
msgid "The request is from Internet Explorer and the ``Content-Type`` header contains ``javascript`` or starts with anything other than ``text/``. We do this to avoid a bug in early versions of IE that caused decompression not to be performed on certain content types."
msgstr ""

#: ../../ref/middleware.txt:113
# 999a31283e194102a9b00af86d71f025
msgid "You can apply GZip compression to individual views using the :func:`~django.views.decorators.http.gzip_page()` decorator."
msgstr ""

#: ../../ref/middleware.txt:117
# 51fe8e70124044c58f1f6379061b265e
msgid "Conditional GET middleware"
msgstr ""

#: ../../ref/middleware.txt:124
# a86cfbcce7704c4ca7be3e7e2931056f
msgid "Handles conditional GET operations. If the response has a ``ETag`` or ``Last-Modified`` header, and the request has ``If-None-Match`` or ``If-Modified-Since``, the response is replaced by an :class:`~django.http.HttpNotModified`."
msgstr ""

#: ../../ref/middleware.txt:129
# 8fc91f03636249b68c3a00c4d64c2de4
msgid "Also sets the ``Date`` and ``Content-Length`` response-headers."
msgstr ""

#: ../../ref/middleware.txt:132
# 3581431c66634ecda1fdb552b5788df4
msgid "Reverse proxy middleware"
msgstr ""

#: ../../ref/middleware.txt:136
# d65bf9d2c7a14b03b1dfa2402a72c47f
msgid "This middleware was removed in Django 1.1. See :ref:`the release notes <removed-setremoteaddrfromforwardedfor-middleware>` for details."
msgstr ""

#: ../../ref/middleware.txt:140
# 6a0f60eb13c54f6797638f0b9629616d
msgid "Locale middleware"
msgstr ""

#: ../../ref/middleware.txt:147
# 043c1914a036412398a0a6292ab0291f
msgid "Enables language selection based on data from the request. It customizes content for each user. See the :doc:`internationalization documentation </topics/i18n/translation>`."
msgstr ""

#: ../../ref/middleware.txt:152
# cb06c424e02f44b4bd476958a260c13a
msgid "Message middleware"
msgstr ""

#: ../../ref/middleware.txt:159
# a4162a9aac364b8eb2fddd6f83249501
msgid "Enables cookie- and session-based message support. See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/middleware.txt:163
# b872c822f19346d0b16bbb7373eeb4e5
msgid "Session middleware"
msgstr ""

#: ../../ref/middleware.txt:170
# fbe38ba40b114e1d97e90a671ef9b591
msgid "Enables session support. See the :doc:`session documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/middleware.txt:174
# cbd076dc3f26431889f15e58a4ec83bf
msgid "Authentication middleware"
msgstr ""

#: ../../ref/middleware.txt:181
# e0eb75395763417e9b975a1d5abea862
msgid "Adds the ``user`` attribute, representing the currently-logged-in user, to every incoming ``HttpRequest`` object. See :doc:`Authentication in Web requests </topics/auth>`."
msgstr ""

#: ../../ref/middleware.txt:186
# c9d9760451b9490990e8c2bc17ceed7a
msgid "CSRF protection middleware"
msgstr ""

#: ../../ref/middleware.txt:194
# c45fd622f5ae482d94f63589e3a3ed86
msgid "Adds protection against Cross Site Request Forgeries by adding hidden form fields to POST forms and checking requests for the correct value. See the :doc:`Cross Site Request Forgery protection documentation </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/middleware.txt:199
# 38930325d9334105b1cf44d5e04e29fa
msgid "Transaction middleware"
msgstr ""

#: ../../ref/middleware.txt:206
# 74c0c0f8e4794942af3151c802a36702
msgid "Binds commit and rollback of the default database to the request/response phase. If a view function runs successfully, a commit is done. If it fails with an exception, a rollback is done."
msgstr ""

#: ../../ref/middleware.txt:210
# a6370bbf33be4d589596da3af95c217f
msgid "The order of this middleware in the stack is important: middleware modules running outside of it run with commit-on-save - the default Django behavior. Middleware modules running inside it (coming later in the stack) will be under the same transaction control as the view functions."
msgstr ""

#: ../../ref/middleware.txt:215
# e8b1d3c7a2c34eabad073151db39a1c6
msgid "See the :doc:`transaction management documentation </topics/db/transactions>`."
msgstr ""

#: ../../ref/middleware.txt:218
# f8e4c48157a1495799e2842f3be05712
msgid "X-Frame-Options middleware"
msgstr ""

#: ../../ref/middleware.txt:228
# da8f5adca7b34065b3d76f1e014c6986
msgid "Simple :doc:`clickjacking protection via the X-Frame-Options header </ref/clickjacking/>`."
msgstr ""

#: ../../ref/models/fields.txt:3
# cfe07e291ba84b058b70223960e6571c
msgid "Model field reference"
msgstr ""

#: ../../ref/models/fields.txt:10
# da71e1bcc2134c3fb6bd69cfa7fd870b
msgid "This document contains all the gory details about all the `field options`_ and `field types`_ Django's got to offer."
msgstr ""

#: ../../ref/models/fields.txt:15
# 333a78c34cb9467a8e14cbae2340e981
msgid "If the built-in fields don't do the trick, you can try :mod:`django.contrib.localflavor`, which contains assorted pieces of code that are useful for particular countries or cultures. Also, you can easily :doc:`write your own custom model fields </howto/custom-model-fields>`."
msgstr ""

#: ../../ref/models/fields.txt:22
# b1277f83094541eb8a040d3b56db8be1
msgid "Technically, these models are defined in :mod:`django.db.models.fields`, but for convenience they're imported into :mod:`django.db.models`; the standard convention is to use ``from django.db import models`` and refer to fields as ``models.<Foo>Field``."
msgstr ""

#: ../../ref/models/fields.txt:30
# 2254d08c98ae4cea90f1701a801625a7
msgid "Field options"
msgstr ""

#: ../../ref/models/fields.txt:32
# 4f95de659ffe4ef296b1be9dc011f1f1
msgid "The following arguments are available to all field types. All are optional."
msgstr ""

#: ../../ref/models/fields.txt:35
# 80ace6508e404816abca9433748f83c4
msgid "``null``"
msgstr ""

#: ../../ref/models/fields.txt:39
# a670e74b6db54a63ab17d59ade629887
msgid "If ``True``, Django will store empty values as ``NULL`` in the database. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:42
# 7d5e8c7e02eb487c854ac73f38be93d0
msgid "Note that empty string values will always get stored as empty strings, not as ``NULL``. Only use ``null=True`` for non-string fields such as integers, booleans and dates. For both types of fields, you will also need to set ``blank=True`` if you wish to permit empty values in forms, as the :attr:`~Field.null` parameter only affects database storage (see :attr:`~Field.blank`)."
msgstr ""

#: ../../ref/models/fields.txt:49
# 80ed7fdc96fb4b93995ae157a60ac01d
msgid "Avoid using :attr:`~Field.null` on string-based fields such as :class:`CharField` and :class:`TextField` unless you have an excellent reason. If a string-based field has ``null=True``, that means it has two possible values for \"no data\": ``NULL``, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" Django convention is to use the empty string, not ``NULL``."
msgstr ""

#: ../../ref/models/fields.txt:58
# 14e9883f355b4ff8ae334f0370f00a08
msgid "When using the Oracle database backend, the value ``NULL`` will be stored to denote the empty string regardless of this attribute."
msgstr ""

#: ../../ref/models/fields.txt:61
# 1206bc8f6471428daf653d6d4883ca92
msgid "If you want to accept :attr:`~Field.null` values with :class:`BooleanField`, use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:65
# 8500aab5773848ffa4fef3828187cd5c
msgid "``blank``"
msgstr ""

#: ../../ref/models/fields.txt:69
# a27b512e735b4d8b906ab39bed33cb3c
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:71
# 696d0505b6f54ba78bd85b685c8d3a78
msgid "Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is purely database-related, whereas :attr:`~Field.blank` is validation-related. If a field has ``blank=True``, form validation will allow entry of an empty value. If a field has ``blank=False``, the field will be required."
msgstr ""

#: ../../ref/models/fields.txt:79
# a35aee7fd6254bb09bd4027ec64ed678
msgid "``choices``"
msgstr ""

#: ../../ref/models/fields.txt:83
# e3853fd00fde4241ac5df96979232309
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. If this is given, the default form widget will be a select box with these choices instead of the standard text field."
msgstr ""

#: ../../ref/models/fields.txt:87
# 7fe4c9e44cce46d596699b062169b9ed
msgid "The first element in each tuple is the actual value to be stored, and the second element is the human-readable name. For example::"
msgstr ""

#: ../../ref/models/fields.txt:97
# dbf79e1dcfb54c43b39b6f480097cbf3
msgid "Generally, it's best to define choices inside a model class, and to define a suitably-named constant for each value::"
msgstr ""

#: ../../ref/models/fields.txt:118
# e10b0cdfe42e42689fae628eede17ace
msgid "Though you can define a choices list outside of a model class and then refer to it, defining the choices and names for each choice inside the model class keeps all of that information with the class that uses it, and makes the choices easy to reference (e.g, ``Student.SOPHOMORE`` will work anywhere that the ``Student`` model has been imported)."
msgstr ""

#: ../../ref/models/fields.txt:124
# b7b320d56cf346af87f1b29175d39f70
msgid "You can also collect your available choices into named groups that can be used for organizational purposes::"
msgstr ""

#: ../../ref/models/fields.txt:141
# 398f5d22f50c4fecad213daa36e064fa
msgid "The first element in each tuple is the name to apply to the group. The second element is an iterable of 2-tuples, with each 2-tuple containing a value and a human-readable name for an option. Grouped options may be combined with ungrouped options within a single list (such as the `unknown` option in this example)."
msgstr ""

#: ../../ref/models/fields.txt:147
# 6155887c6b5a4eaa87f556e5640314f0
msgid "For each model field that has :attr:`~Field.choices` set, Django will add a method to retrieve the human-readable name for the field's current value. See :meth:`~django.db.models.Model.get_FOO_display` in the database API documentation."
msgstr ""

#: ../../ref/models/fields.txt:152
# 68e1b8f1ee074b1c99afdfcd1f956a26
msgid "Finally, note that choices can be any iterable object -- not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking :attr:`~Field.choices` to be dynamic, you're probably better off using a proper database table with a :class:`ForeignKey`. :attr:`~Field.choices` is meant for static data that doesn't change much, if ever."
msgstr ""

#: ../../ref/models/fields.txt:159
# 15cafeba40df4a77a5d2354b98d78daa
msgid "``db_column``"
msgstr ""

#: ../../ref/models/fields.txt:163
# 3c81298c67e64315ba8d77bce9e0819c
msgid "The name of the database column to use for this field. If this isn't given, Django will use the field's name."
msgstr ""

#: ../../ref/models/fields.txt:166
# b3629591952c42f09ae9e8af5742bce8
msgid "If your database column name is an SQL reserved word, or contains characters that aren't allowed in Python variable names -- notably, the hyphen -- that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/fields.txt:172
# 1f1cbd1178b543b8a0b42905cb4d8c06
msgid "``db_index``"
msgstr ""

#: ../../ref/models/fields.txt:176
# 023a717c777b47a382d6d66fa7f58f97
msgid "If ``True``, :djadmin:`django-admin.py sqlindexes <sqlindexes>` will output a ``CREATE INDEX`` statement for this field."
msgstr ""

#: ../../ref/models/fields.txt:180
#: ../../ref/models/options.txt:72
# 90d2203bb5924d5299e0390d66883515
# 82fa48ea831c4e2e84abd9121b0a8207
msgid "``db_tablespace``"
msgstr ""

#: ../../ref/models/fields.txt:184
# 2e533f7c32b24b3f9c59055265edc36c
msgid "The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for this field's index, if this field is indexed. The default is the project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:`~Options.db_tablespace` of the model, if any. If the backend doesn't support tablespaces for indexes, this option is ignored."
msgstr ""

#: ../../ref/models/fields.txt:191
# 675155db71aa4657b3259e9ceb7b26a7
msgid "``default``"
msgstr ""

#: ../../ref/models/fields.txt:195
# d48bf9efc2b342ed81bfcb5f1306f329
msgid "The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created."
msgstr ""

#: ../../ref/models/fields.txt:198
# 84cf16d3ccf041f199b03d1ad88c7feb
msgid "The default cannot be a mutable object (model instance, list, set, etc.), as a reference to the same instance of that object would be used as the default value in all new model instances. Instead, wrap the desired default in a callable.  For example, if you had a custom ``JSONField`` and wanted to specify a dictionary as the default, use a ``lambda`` as follows::"
msgstr ""

#: ../../ref/models/fields.txt:207
# 5ad18a8cf83d4f08b4ac86dd7d0e7ebd
msgid "``editable``"
msgstr ""

#: ../../ref/models/fields.txt:211
# ed64e140680a48c79b0f2d92f30da9cc
msgid "If ``False``, the field will not be displayed in the admin or any other :class:`~django.forms.ModelForm`. Default is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:219
# 9d9e8a96875344038a63751ed704610f
msgid "The ``error_messages`` argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override."
msgstr ""

#: ../../ref/models/fields.txt:223
# 1ce3bf55b5a6431fb1e64b2d270b8e4f
msgid "Error message keys include ``null``, ``blank``, ``invalid``, ``invalid_choice``, and ``unique``. Additional error message keys are specified for each field in the `Field types`_ section below."
msgstr ""

#: ../../ref/models/fields.txt:232
# c3a6920cde824df6aa00b3eeb9e7e80d
msgid "Extra \"help\" text to be displayed with the form widget. It's useful for documentation even if your field isn't used on a form."
msgstr ""

#: ../../ref/models/fields.txt:235
# 2bf0f35738664090a72e2f384083529d
msgid "Note that this value is *not* HTML-escaped in automatically-generated forms. This lets you include HTML in :attr:`~Field.help_text` if you so desire. For example::"
msgstr ""

#: ../../ref/models/fields.txt:241
# ec34db162e424be5a9c8f79548f3e868
msgid "Alternatively you can use plain text and ``django.utils.html.escape()`` to escape any HTML special characters."
msgstr ""

#: ../../ref/models/fields.txt:245
# 3e826338a99b412dacb01212df5f3ad3
msgid "``primary_key``"
msgstr ""

#: ../../ref/models/fields.txt:249
# 3b5b6d145c35495f9633a5f41af20300
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../ref/models/fields.txt:251
# 0b58facdb2de4f1da4051bea32f7a81c
msgid "If you don't specify ``primary_key=True`` for any fields in your model, Django will automatically add an :class:`IntegerField` to hold the primary key, so you don't need to set ``primary_key=True`` on any of your fields unless you want to override the default primary-key behavior. For more, see :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:257
# 4a62d773b4024f86a9a1533bf40453b6
msgid "``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""

#: ../../ref/models/fields.txt:265
# 7f801a79266747e3a53e744461e61069
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../ref/models/fields.txt:267
# 7bb1e49dbe194027bd5a2337b0279d71
msgid "This is enforced at the database level and by model validation. If you try to save a model with a duplicate value in a :attr:`~Field.unique` field, a :exc:`django.db.IntegrityError` will be raised by the model's :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/models/fields.txt:272
# 7925ae14d6f549ccaf82d172e06d6663
msgid "This option is valid on all field types except :class:`ManyToManyField` and :class:`FileField`."
msgstr ""

#: ../../ref/models/fields.txt:276
# a579db7c391c40bbbe102671df5c1315
msgid "``unique_for_date``"
msgstr ""

#: ../../ref/models/fields.txt:280
# 88bd58db60b94245a495f3eed79101a9
msgid "Set this to the name of a :class:`DateField` or :class:`DateTimeField` to require that this field be unique for the value of the date field."
msgstr ""

#: ../../ref/models/fields.txt:283
# 8dfc6c3c1c2047bfb2e1dcac4a2647c0
msgid "For example, if you have a field ``title`` that has ``unique_for_date=\"pub_date\"``, then Django wouldn't allow the entry of two records with the same ``title`` and ``pub_date``."
msgstr ""

#: ../../ref/models/fields.txt:287
# c5b68bfa2e024324ab1ede109addcd4d
msgid "This is enforced by model validation but not at the database level."
msgstr ""

#: ../../ref/models/fields.txt:290
# db9e5aa8568843fb852bfd99d030b74f
msgid "``unique_for_month``"
msgstr ""

#: ../../ref/models/fields.txt:294
# 0c6b28ec5f3f4c6aa36d298d9ce46d56
msgid "Like :attr:`~Field.unique_for_date`, but requires the field to be unique with respect to the month."
msgstr ""

#: ../../ref/models/fields.txt:298
# 18c07ee036ec48ada2d326b0bfbd84f9
msgid "``unique_for_year``"
msgstr ""

#: ../../ref/models/fields.txt:302
# 352e0140b3844910925f03f1d75604a9
msgid "Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""

#: ../../ref/models/fields.txt:305
#: ../../ref/models/options.txt:280
# 1f52b2c29ac74d0088ef1e1993bbdb59
# 61ffcff6c4ab473aba0805e0e6f81792
msgid "``verbose_name``"
msgstr ""

#: ../../ref/models/fields.txt:309
# ea355b38a8144245bdf6098c24e53f4b
msgid "A human-readable name for the field. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""

#: ../../ref/models/fields.txt:318
# 039572e8135a42a294af9b93273b3a29
msgid "A list of validators to run for this field. See the :doc:`validators documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/models/fields.txt:324
# d3b0f7acc13e4b36ad6ce1d7a016023f
msgid "Field types"
msgstr ""

#: ../../ref/models/fields.txt:329
# d3040c1a067a4bfe948437312308c543
msgid "``AutoField``"
msgstr ""

#: ../../ref/models/fields.txt:333
# 889a0a1d51144e48a4fe127ffa5d0120
msgid "An :class:`IntegerField` that automatically increments according to available IDs. You usually won't need to use this directly; a primary key field will automatically be added to your model if you don't specify otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:339
# f3395405a8c94f8398ee64e44047411b
msgid "``BigIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:343
# 04eac690ebb74cb0bd832f3aff88c28d
msgid "A 64 bit integer, much like an :class:`IntegerField` except that it is guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807. The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:353
# dd49b4b47ee74653a5a667716f92b71b
msgid "A true/false field."
msgstr ""

#: ../../ref/models/fields.txt:355
# 55bac97bfe144189994990ae6202abd1
msgid "The default form widget for this field is a :class:`~django.forms.CheckboxInput`."
msgstr ""

#: ../../ref/models/fields.txt:358
# 94df9e17ee0c4abbacb7c723bd7fccdd
msgid "If you need to accept :attr:`~Field.null` values then use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:366
# c7b3b341f6234d3188dc1daf684a19cb
msgid "A string field, for small- to large-sized strings."
msgstr ""

#: ../../ref/models/fields.txt:368
# 22e23d26c6544a938ea8c114f0c3aeaf
msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""

#: ../../ref/models/fields.txt:370
#: ../../ref/models/fields.txt:472
#: ../../ref/models/fields.txt:741
#: ../../ref/models/fields.txt:919
# 405362fc0d3644c6b3c3bf746a937e7a
# 6a9e3ba3b0b24762952b7944c77cae9c
# bb467aea0308420cafee74ad8f8a22db
# 1ddbbfcffca54823b411e839a647827b
msgid "The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:372
# 13ac9ba631744b65974205c7a3b4e7eb
msgid ":class:`CharField` has one extra required argument:"
msgstr ""

#: ../../ref/models/fields.txt:376
# 9f176c9d883747f9a15b3b1ce6d8e3c6
msgid "The maximum length (in characters) of the field. The max_length is enforced at the database level and in Django's validation."
msgstr ""

#: ../../ref/models/fields.txt:381
# bb78027eb9c94898b03ab9b48811ea4f
msgid "If you are writing an application that must be portable to multiple database backends, you should be aware that there are restrictions on ``max_length`` for some backends. Refer to the :doc:`database backend notes </ref/databases>` for details."
msgstr ""

#: ../../ref/models/fields.txt:388
# fb00108cc7a2405c91de3e638aed73c8
msgid "If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin`` collation (which is *not* the default), there are some issues to be aware of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:395
# fa032da932e847ba98c23029c7ef5a17
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:399
# d6b2c07894004ad6b56c8eda355e26db
msgid "A field of integers separated by commas. As in :class:`CharField`, the :attr:`~CharField.max_length` argument is required and the note about database portability mentioned there should be heeded."
msgstr ""

#: ../../ref/models/fields.txt:408
# fdb648ab412b47f9820897490be6c9d1
msgid "A date, represented in Python by a ``datetime.date`` instance. Has a few extra, optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:413
# 5e536e74e0b74deab373ea16834f518f
msgid "Automatically set the field to now every time the object is saved. Useful for \"last-modified\" timestamps. Note that the current date is *always* used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:419
# 6b0bb908c2c34a79bf00e91a1f923396
msgid "Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is *always* used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:423
# 08f5400b5a8443abbf8112bc9d0f2564
msgid "The default form widget for this field is a :class:`~django.forms.TextInput`. The admin adds a JavaScript calendar, and a shortcut for \"Today\". Includes an additional ``invalid_date`` error message key."
msgstr ""

#: ../../ref/models/fields.txt:429
# 5ed1d3f1f51b4f75afe4866aae752db5
msgid "As currently implemented, setting ``auto_now`` or ``auto_now_add`` to ``True`` will cause the field to have ``editable=False`` and ``blank=True`` set."
msgstr ""

#: ../../ref/models/fields.txt:438
# ec6ff1e15fa848f18a4c4d2f3785c8ab
msgid "A date and time, represented in Python by a ``datetime.datetime`` instance. Takes the same extra arguments as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:441
# 1c4a945015ff491dad742456700abc1c
msgid "The default form widget for this field is a single :class:`~django.forms.TextInput`. The admin uses two separate :class:`~django.forms.TextInput` widgets with JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:450
# 1530aa1c0f2b4c1dbe2a7ac6278b46de
msgid "A fixed-precision decimal number, represented in Python by a :class:`~decimal.Decimal` instance. Has two **required** arguments:"
msgstr ""

#: ../../ref/models/fields.txt:455
# 47d38f5984054d44acda861c56f13880
msgid "The maximum number of digits allowed in the number. Note that this number must be greater than or equal to ``decimal_places``, if it exists."
msgstr ""

#: ../../ref/models/fields.txt:460
# bbcab9bed0ba4defbb1533fd7f0a33db
msgid "The number of decimal places to store with the number."
msgstr ""

#: ../../ref/models/fields.txt:462
# f1e659fea36247548fc1e505b0bae897
msgid "For example, to store numbers up to 999 with a resolution of 2 decimal places, you'd use::"
msgstr ""

#: ../../ref/models/fields.txt:467
# a4862a885a5c4ed3b808210e61c60dab
msgid "And to store numbers up to approximately one billion with a resolution of 10 decimal places::"
msgstr ""

#: ../../ref/models/fields.txt:476
# e0a99b8de5ec4417879fce03cbed897c
msgid "For more information about the differences between the :class:`FloatField` and :class:`DecimalField` classes, please see :ref:`FloatField vs. DecimalField <floatfield_vs_decimalfield>`."
msgstr ""

#: ../../ref/models/fields.txt:485
# 7a41715850ae4010978a79a2a38d53aa
msgid "A :class:`CharField` that checks that the value is a valid email address."
msgstr ""

#: ../../ref/models/fields.txt:489
# 0410f6c33aaf47cdaaf1246da54d3bee
msgid "The default 75 character ``max_length`` is not capable of storing all possible RFC3696/5321-compliant email addresses. In order to store all possible valid email addresses, a ``max_length`` of 254 is required. The default ``max_length`` of 75 exists for historical reasons. The default has not been changed in order to maintain backwards compatibility with existing uses of :class:`EmailField`."
msgstr ""

#: ../../ref/models/fields.txt:501
# 94f1238111fe4bf8be08b3d22c22cf21
msgid "A file-upload field."
msgstr ""

#: ../../ref/models/fields.txt:504
# 74a5a3e69bcd4c69aa7c0366ddca4c5c
msgid "The ``primary_key`` and ``unique`` arguments are not supported, and will raise a ``TypeError`` if used."
msgstr ""

#: ../../ref/models/fields.txt:507
# a8d6529417b64ab7a9ed202704cf87d7
msgid "Has one **required** argument:"
msgstr ""

#: ../../ref/models/fields.txt:511
# 981541c70091430a8de5fbeecbe1162a
msgid "A local filesystem path that will be appended to your :setting:`MEDIA_ROOT` setting to determine the value of the :attr:`~django.core.files.File.url` attribute."
msgstr ""

#: ../../ref/models/fields.txt:515
# 23c339f8775849f19a7dee7dca424864
msgid "This path may contain :func:`~time.strftime` formatting, which will be replaced by the date/time of the file upload (so that uploaded files don't fill up the given directory)."
msgstr ""

#: ../../ref/models/fields.txt:519
# e5c29d1b296348af966c175b12453a1c
msgid "This may also be a callable, such as a function, which will be called to obtain the upload path, including the filename. This callable must be able to accept two arguments, and return a Unix-style path (with forward slashes) to be passed along to the storage system. The two arguments that will be passed are:"
msgstr ""

#: ../../ref/models/fields.txt:528
#: ../../ref/signals.txt:302
#: ../../ref/signals.txt:328
# 6a45d019eb864c7b94babb1c236db435
# d7726d50628f40b2ac9b23d9156359ed
# fe5105f253184647853d1ee1ef4ee042
msgid "``instance``"
msgstr ""

#: ../../ref/models/fields.txt:528
# d3115b036be64e9aa016873b9a8961cb
msgid "An instance of the model where the ``FileField`` is defined. More specifically, this is the particular instance where the current file is being attached."
msgstr ""

#: ../../ref/models/fields.txt:533
# 161dd279ec724971b09443515566247b
msgid "In most cases, this object will not have been saved to the database yet, so if it uses the default ``AutoField``, *it might not yet have a value for its primary key field*."
msgstr ""

#: ../../ref/models/fields.txt:538
# 5e4c5ab53e844554aedcbd22a59a79a1
msgid "``filename``"
msgstr ""

#: ../../ref/models/fields.txt:538
# c181ab0e5ddb4f6db377a8a247578a29
msgid "The filename that was originally given to the file. This may or may not be taken into account when determining the final destination path."
msgstr ""

#: ../../ref/models/fields.txt:543
# c50a96ea00b94902a8276d18db89afd3
msgid "Also has one optional argument:"
msgstr ""

#: ../../ref/models/fields.txt:547
# 5b5a9bbcdede4dbea9ebd6fffc5d1219
msgid "Optional. A storage object, which handles the storage and retrieval of your files. See :doc:`/topics/files` for details on how to provide this object."
msgstr ""

#: ../../ref/models/fields.txt:550
# 9f574f0c171d4c1b8012b670e1ee8257
msgid "The default form widget for this field is a :class:`~django.forms.widgets.FileInput`."
msgstr ""

#: ../../ref/models/fields.txt:553
# dff9040f78714dc1b61ba5d679561a98
msgid "Using a :class:`FileField` or an :class:`ImageField` (see below) in a model takes a few steps:"
msgstr ""

#: ../../ref/models/fields.txt:556
# 8c907b6b65f347b194bf319a414f0579
msgid "In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the full path to a directory where you'd like Django to store uploaded files. (For performance, these files are not stored in the database.) Define :setting:`MEDIA_URL` as the base public URL of that directory. Make sure that this directory is writable by the Web server's user account."
msgstr ""

#: ../../ref/models/fields.txt:562
# a773512acc7d436cb779020cbbde0417
msgid "Add the :class:`FileField` or :class:`ImageField` to your model, making sure to define the :attr:`~FileField.upload_to` option to tell Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload files."
msgstr ""

#: ../../ref/models/fields.txt:566
# d7bd72a8a2244a238f8dc91f3d2d7044
msgid "All that will be stored in your database is a path to the file (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:`~django.core.files.File.url` function provided by Django. For example, if your :class:`ImageField` is called ``mug_shot``, you can get the absolute path to your image in a template with ``{{ object.mug_shot.url }}``."
msgstr ""

#: ../../ref/models/fields.txt:573
# 285f2d23d0ad4180b9cac9b2fd9e0921
msgid "For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""

#: ../../ref/models/fields.txt:580
# 6dd09ddbd6544ce8890fb48e543c3347
msgid "If you wanted to retrieve the uploaded file's on-disk filename, or the file's size, you could use the :attr:`~django.core.files.File.name` and :attr:`~django.core.files.File.size` attributes respectively; for more information on the available attributes and methods, see the :class:`~django.core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""

#: ../../ref/models/fields.txt:588
# a8a579610cff4fdc94c399351cf9236a
msgid "The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved."
msgstr ""

#: ../../ref/models/fields.txt:592
# c0cc24d64a644f26b63eaaebc5cd8cec
msgid "The uploaded file's relative URL can be obtained using the :attr:`~django.db.models.fields.FileField.url` attribute. Internally, this calls the :meth:`~django.core.files.storage.Storage.url` method of the underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""

#: ../../ref/models/fields.txt:599
# 1ec8f5ed29fe4ed98465bcaa78b988a4
msgid "Note that whenever you deal with uploaded files, you should pay close attention to where you're uploading them and what type of files they are, to avoid security holes. *Validate all uploaded files* so that you're sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that's within your Web server's document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don't allow that."
msgstr ""

#: ../../ref/models/fields.txt:607
# ca1b817964094305bc4b3e7266494e5d
msgid "Also note that even an uploaded HTML file, since it can be executed by the browser (though not by the server), can pose security threats that are equivalent to XSS or CSRF attacks."
msgstr ""

#: ../../ref/models/fields.txt:611
# 0b37c820797b488fae088146e7e5cf4a
msgid "By default, :class:`FileField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:616
# 472868d4b3c040ecadbf5bc137637754
msgid "FileField and FieldFile"
msgstr ""

#: ../../ref/models/fields.txt:618
# 6c653bff7ccf4f9f952c1b597fbd7437
msgid "When you access a :class:`FileField` on a model, you are given an instance of :class:`FieldFile` as a proxy for accessing the underlying file. This class has several methods that can be used to interact with file data:"
msgstr ""

#: ../../ref/models/fields.txt:624
# dd057402d0e24e1fb4c40c31dae2262d
msgid "Behaves like the standard Python ``open()`` method and opens the file associated with this instance in the mode specified by ``mode``."
msgstr ""

#: ../../ref/models/fields.txt:629
# 9c89005670464a13be91146e89f2d985
msgid "Behaves like the standard Python ``file.close()`` method and closes the file associated with this instance."
msgstr ""

#: ../../ref/models/fields.txt:634
# bdfc41f6a3da498aaa1f758e4371d086
msgid "This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with :class:`FileField` instances on your model, the ``save()`` method is used to persist that file data."
msgstr ""

#: ../../ref/models/fields.txt:640
# 697f4a802b094a9a92e2100ae8c61844
msgid "Takes two required arguments: ``name`` which is the name of the file, and ``content`` which is an object containing the file's contents.  The optional ``save`` argument controls whether or not the instance is saved after the file has been altered. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:645
# 60c0bf92e2db4df0b6720f36e1eb00e0
msgid "Note that the ``content`` argument should be an instance of :class:`django.core.files.File`, not Python's built-in file object. You can construct a :class:`~django.core.files.File` from an existing Python file object like this::"
msgstr ""

#: ../../ref/models/fields.txt:655
# e3ff2403466340a7ae5fe0f42c9b6c36
msgid "Or you can construct one from a Python string like this::"
msgstr ""

#: ../../ref/models/fields.txt:660
# 478cd39777974119aac9e52a4ac26325
msgid "For more information, see :doc:`/topics/files`."
msgstr ""

#: ../../ref/models/fields.txt:664
# 050b4b005bf3492cb149629bbf2b9f02
msgid "Deletes the file associated with this instance and clears all attributes on the field. Note: This method will close the file if it happens to be open when ``delete()`` is called."
msgstr ""

#: ../../ref/models/fields.txt:668
# 2dbf3ee3a164441d80361d5d7417b2ab
msgid "The optional ``save`` argument controls whether or not the instance is saved after the file has been deleted. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:671
# b6e362380c2c47e9a94b4000af4a0625
msgid "Note that when a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you'll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../ref/models/fields.txt:681
# e224b239f5594308a628e8fe463a9c4d
msgid "A :class:`CharField` whose choices are limited to the filenames in a certain directory on the filesystem. Has three special arguments, of which the first is **required**:"
msgstr ""

#: ../../ref/models/fields.txt:687
# 30b2e1a55a764eb8bf2adf7337c200f1
msgid "Required. The absolute filesystem path to a directory from which this :class:`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""

#: ../../ref/models/fields.txt:692
# 89d62c81c4c1483988cf79495899f71d
msgid "Optional. A regular expression, as a string, that :class:`FilePathField` will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.png``."
msgstr ""

#: ../../ref/models/fields.txt:699
# 9d0854223bb447af9f7cad2f5964a655
msgid "Optional. Either ``True`` or ``False``. Default is ``False``. Specifies whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""

#: ../../ref/models/fields.txt:706
# 6dbb8c45914b4873942cbe83244ca7c3
msgid "Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies whether files in the specified location should be included.  Either this or :attr:`~FilePathField.allow_folders` must be ``True``."
msgstr ""

#: ../../ref/models/fields.txt:714
# 845bc5fc7d7e49ed8897c75bbf1b9e8b
msgid "Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies whether folders in the specified location should be included.  Either this or :attr:`~FilePathField.allow_files` must be ``True``."
msgstr ""

#: ../../ref/models/fields.txt:719
# d2e5f1eca9da4304bc90cdb081d447e7
msgid "Of course, these arguments can be used together."
msgstr ""

#: ../../ref/models/fields.txt:721
# 4549eb3c61f248e585b86493cb5d8f56
msgid "The one potential gotcha is that :attr:`~FilePathField.match` applies to the base filename, not the full path. So, this example::"
msgstr ""

#: ../../ref/models/fields.txt:726
# 595373df4dc04928823fb573d113f6a5
msgid "...will match ``/home/images/foo.png`` but not ``/home/images/foo/bar.png`` because the :attr:`~FilePathField.match` applies to the base filename (``foo.png`` and ``bar.png``)."
msgstr ""

#: ../../ref/models/fields.txt:730
# dd3ebc951dec4b9ba7b09c628ed901a0
msgid "By default, :class:`FilePathField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:739
# 300cd9166172486a86b31070542dce86
msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr ""

#: ../../ref/models/fields.txt:747
# ca4eb9e3936b4be9a05a3c93f33e5cbb
msgid "The :class:`FloatField` class is sometimes mixed up with the :class:`DecimalField` class. Although they both represent real numbers, they represent those numbers differently. ``FloatField`` uses Python's ``float`` type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For information on the difference between the two, see Python's documentation for the :mod:`decimal` module."
msgstr ""

#: ../../ref/models/fields.txt:759
# bb39993c6b014e8ab871ffb4e0ff149f
msgid "Inherits all attributes and methods from :class:`FileField`, but also validates that the uploaded object is a valid image."
msgstr ""

#: ../../ref/models/fields.txt:762
# 6f6dbaaf20dd4155bb5e174f93038da7
msgid "In addition to the special attributes that are available for :class:`FileField`, an :class:`ImageField` also has :attr:`~django.core.files.File.height` and :attr:`~django.core.files.File.width` attributes."
msgstr ""

#: ../../ref/models/fields.txt:766
# ad699a3169604cedbeeb582f1bc512ff
msgid "To facilitate querying on those attributes, :class:`ImageField` has two extra optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:771
# ef4a737789354dc987716a062e83b689
msgid "Name of a model field which will be auto-populated with the height of the image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:776
# 96c5cc89449542618b507f7677cd4a87
msgid "Name of a model field which will be auto-populated with the width of the image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:779
# b8cbd0730e984396b2d9326d0f4c6fbf
msgid "Requires the `Python Imaging Library`_."
msgstr ""

#: ../../ref/models/fields.txt:783
# 820efcdce4fa4cd186c7b42dc294357b
msgid "By default, :class:`ImageField` instances are created as ``varchar(100)`` columns in your database. As with other fields, you can change the maximum length using the :attr:`~CharField.max_length` argument."
msgstr ""

#: ../../ref/models/fields.txt:792
# 924432f433f84109ad1a15fb76e29c9b
msgid "An integer. The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:800
# 6e606f0346e94ad09f4d7abc2a412449
msgid "An IP address, in string format (e.g. \"192.0.2.30\"). The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:810
# ae23769da1464395aed5ab9c0aeadf15
msgid "An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or ``2a02:42fe::4``). The default form widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:822
# b26961bcc5744aafa5d2211ed7325582
msgid "Limits valid inputs to the specified protocol. Accepted values are ``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""

#: ../../ref/models/fields.txt:838
# 2139ec4455a443b9856b7148a264c028
msgid "Like a :class:`BooleanField`, but allows ``NULL`` as one of the options. Use this instead of a :class:`BooleanField` with ``null=True``. The default form widget for this field is a :class:`~django.forms.NullBooleanSelect`."
msgstr ""

#: ../../ref/models/fields.txt:843
# 88b15cb7ea9b43cf96b6e2512d2f982e
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:847
# 8be1000bfe4b408399f0f097ac626f85
msgid "Like an :class:`IntegerField`, but must be either positive or zero (`0`). The value `0` is accepted for backward compatibility reasons."
msgstr ""

#: ../../ref/models/fields.txt:851
# 69e9c71a302243f58336d16312f23f48
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:855
# 5471e037516d47d5abd5c2277bf5f19b
msgid "Like a :class:`PositiveIntegerField`, but only allows values under a certain (database-dependent) point."
msgstr ""

#: ../../ref/models/fields.txt:863
# 798c3e2dc0a94f7bbc9d2f64a71efa14
msgid ":term:`Slug` is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They're generally used in URLs."
msgstr ""

#: ../../ref/models/fields.txt:867
# d13e04d313ae489bb93e353a6120ab34
msgid "Like a CharField, you can specify :attr:`~CharField.max_length` (read the note about database portability and :attr:`~CharField.max_length` in that section, too). If :attr:`~CharField.max_length` is not specified, Django will use a default length of 50."
msgstr ""

#: ../../ref/models/fields.txt:872
# 156dd1a68e8340258a82cbac72b01340
msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:874
# 30bb4d4c6e5246f5971296a78acecb6c
msgid "It is often useful to automatically prepopulate a SlugField based on the value of some other value.  You can do this automatically in the admin using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""

#: ../../ref/models/fields.txt:879
# 78d5d9a4c6094727908287d8af5ff9af
msgid "``SmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:883
# 1c5c6a3b3cfb4c4592d415fc1288d3a1
msgid "Like an :class:`IntegerField`, but only allows values under a certain (database-dependent) point."
msgstr ""

#: ../../ref/models/fields.txt:887
# 66d50494125c4770a09e8175281ecf00
msgid "``TextField``"
msgstr ""

#: ../../ref/models/fields.txt:891
# 53e0f91ed2f14ea59048bac2e3a10235
msgid "A large text field. The default form widget for this field is a :class:`~django.forms.Textarea`."
msgstr ""

#: ../../ref/models/fields.txt:896
# 32337b6ab5f6498f9d3589a99ca6ab2b
msgid "If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin`` collation (which is *not* the default), there are some issues to be aware of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:906
# 66b7c51cb2c4442581c2021c5e0f5d93
msgid "A time, represented in Python by a ``datetime.time`` instance. Accepts the same auto-population options as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:909
# 01592335b0ab4abf88c19eb1e069c539
msgid "The default form widget for this field is a :class:`~django.forms.TextInput`. The admin adds some JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:917
# 531da5beb2cc40609449b49925c7e54b
msgid "A :class:`CharField` for a URL."
msgstr ""

#: ../../ref/models/fields.txt:921
# 2e52c1834f044734a9455c9a824fc5b1
msgid "Like all :class:`CharField` subclasses, :class:`URLField` takes the optional :attr:`~CharField.max_length`argument. If you don't specify :attr:`~CharField.max_length`, a default of 200 is used."
msgstr ""

#: ../../ref/models/fields.txt:927
# 762f703bbd9a47829f2a06dfae125027
msgid "The current value of the field will be displayed as a clickable link above the input widget."
msgstr ""

#: ../../ref/models/fields.txt:932
# af6921f0d4d5418aa38306d770ecbfa4
msgid "Relationship fields"
msgstr ""

#: ../../ref/models/fields.txt:939
# 591e0feb7d4840638ed1f18fcffe0c48
msgid "Django also defines a set of fields that represent relations."
msgstr ""

#: ../../ref/models/fields.txt:944
# 465cb4a378ba4a7093f639b0bc4c91b8
msgid "``ForeignKey``"
msgstr ""

#: ../../ref/models/fields.txt:948
# 151c365e9cf44f69aeaa9f9e677f05e1
msgid "A many-to-one relationship. Requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../ref/models/fields.txt:953
# 05b4e522220048338746e0dabda1bbca
msgid "To create a recursive relationship -- an object that has a many-to-one relationship with itself -- use ``models.ForeignKey('self')``."
msgstr ""

#: ../../ref/models/fields.txt:958
# 961532eb4f1c437fb1f57b7ef7a0f889
msgid "If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself::"
msgstr ""

#: ../../ref/models/fields.txt:968
# f70e1c30b1e44090a0bfa47e91f6ac8b
msgid "To refer to models defined in another application, you can explicitly specify a model with the full application label. For example, if the ``Manufacturer`` model above is defined in another application called ``production``, you'd need to use::"
msgstr ""

#: ../../ref/models/fields.txt:976
# 6546a7e7c8b241e79001695f13a7ec6c
msgid "This sort of reference can be useful when resolving circular import dependencies between two applications."
msgstr ""

#: ../../ref/models/fields.txt:979
# 0619c7ef933f4147a05ceae563e6d9dd
msgid "A database index is automatically created on the ``ForeignKey``. You can disable this by setting :attr:`~Field.db_index` to ``False``.  You may want to avoid the overhead of an index if you are creating a foreign key for consistency rather than joins, or if you will be creating an alternative index like a partial or multiple column index."
msgstr ""

#: ../../ref/models/fields.txt:986
#: ../../ref/models/fields.txt:1102
# c003be049d41420d9eea00914c318c1e
# ace9f5713f4e4a87901aea811da44d9f
msgid "Database Representation"
msgstr ""

#: ../../ref/models/fields.txt:988
# a3eddb155d5f4a48a8fe3976d403ba27
msgid "Behind the scenes, Django appends ``\"_id\"`` to the field name to create its database column name. In the above example, the database table for the ``Car`` model will have a ``manufacturer_id`` column. (You can change this explicitly by specifying :attr:`~Field.db_column`) However, your code should never have to deal with the database column name, unless you write custom SQL. You'll always deal with the field names of your model object."
msgstr ""

#: ../../ref/models/fields.txt:998
#: ../../ref/models/fields.txt:1116
# d6f9b450637a47bc86d03d4f95ad4e36
# d025cc2fc4514ce296e23e079855a1ed
msgid "Arguments"
msgstr ""

#: ../../ref/models/fields.txt:1000
# c02c4aee44bd41eebaf9a275e9cf00e2
msgid ":class:`ForeignKey` accepts an extra set of arguments -- all optional -- that define the details of how the relation works."
msgstr ""

#: ../../ref/models/fields.txt:1005
# b0498f6c6b1a450b8079ca4dda047cb3
msgid "A dictionary of lookup arguments and values (see :doc:`/topics/db/queries`) that limit the available admin or ModelForm choices for this object. Use this with functions from the Python ``datetime`` module to limit choices of objects by date. For example::"
msgstr ""

#: ../../ref/models/fields.txt:1012
# c2f750b74bc148f2914b82dab3ba1ee6
msgid "only allows the choice of related objects with a ``pub_date`` before the current date to be chosen."
msgstr ""

#: ../../ref/models/fields.txt:1015
# 9aa2c1962fd149788b8a3eb680694690
msgid "Instead of a dictionary this can also be a :class:`~django.db.models.Q` object for more :ref:`complex queries <complex-lookups-with-q>`. However, if ``limit_choices_to`` is a :class:`~django.db.models.Q` object then it will only have an effect on the choices available in the admin when the field is not listed in ``raw_id_fields`` in the ``ModelAdmin`` for the model."
msgstr ""

#: ../../ref/models/fields.txt:1023
# 9ff538609d744508851109c8b4db94c5
msgid "The name to use for the relation from the related object back to this one. See the :ref:`related objects documentation <backwards-related-objects>` for a full explanation and example. Note that you must set this value when defining relations on :ref:`abstract models <abstract-base-classes>`; and when you do so :ref:`some special syntax <abstract-related-name>` is available."
msgstr ""

#: ../../ref/models/fields.txt:1030
# c876f1101a8f450f89be2c6c791520f4
msgid "If you'd prefer Django not to create a backwards relation, set ``related_name`` to ``'+'`` or end it with ``'+'``. For example, this will ensure that the ``User`` model won't have a backwards relation to this model::"
msgstr ""

#: ../../ref/models/fields.txt:1039
# 2de9d6d1e4224dc28500ba5d922e66ba
msgid "The field on the related object that the relation is to. By default, Django uses the primary key of the related object."
msgstr ""

#: ../../ref/models/fields.txt:1044
# 51bd5e316b49496998274a5d489eeee8
msgid "When an object referenced by a :class:`ForeignKey` is deleted, Django by default emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` and also deletes the object containing the ``ForeignKey``. This behavior can be overridden by specifying the :attr:`on_delete` argument. For example, if you have a nullable :class:`ForeignKey` and you want it to be set null when the referenced object is deleted::"
msgstr ""

#: ../../ref/models/fields.txt:1053
# e25ddccae2874eb39c5377bddc1fe89d
msgid "The possible values for :attr:`on_delete` are found in :mod:`django.db.models`:"
msgstr ""

#: ../../ref/models/fields.txt:1056
# 572ff6d4d24e43e086b43cf209b06bfb
msgid ":attr:`~django.db.models.CASCADE`: Cascade deletes; the default."
msgstr ""

#: ../../ref/models/fields.txt:1058
# fc287391b24d437d8a205d741fe46e72
msgid ":attr:`~django.db.models.PROTECT`: Prevent deletion of the referenced object by raising :exc:`django.db.models.ProtectedError`, a subclass of :exc:`django.db.IntegrityError`."
msgstr ""

#: ../../ref/models/fields.txt:1062
# 78fee4550db848be849d6cfeaf06f3b2
msgid ":attr:`~django.db.models.SET_NULL`: Set the :class:`ForeignKey` null; this is only possible if :attr:`null` is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:1065
# 776c503459164021aa0519cf814aa3a1
msgid ":attr:`~django.db.models.SET_DEFAULT`: Set the :class:`ForeignKey` to its default value; a default for the :class:`ForeignKey` must be set."
msgstr ""

#: ../../ref/models/fields.txt:1068
# a5251e554b334906bde8c727083744c0
msgid ":func:`~django.db.models.SET()`: Set the :class:`ForeignKey` to the value passed to :func:`~django.db.models.SET()`, or if a callable is passed in, the result of calling it. In most cases, passing a callable will be necessary to avoid executing queries at the time your models.py is imported::"
msgstr ""

#: ../../ref/models/fields.txt:1080
# 39346aebd5ef40889cf9e69bebd001ac
msgid ":attr:`~django.db.models.DO_NOTHING`: Take no action. If your database backend enforces referential integrity, this will cause an :exc:`~django.db.IntegrityError` unless you manually add a SQL ``ON DELETE`` constraint to the database field (perhaps using :ref:`initial sql<initial-sql>`)."
msgstr ""

#: ../../ref/models/fields.txt:1089
# d580ac419ea24436921347db90d83657
msgid "``ManyToManyField``"
msgstr ""

#: ../../ref/models/fields.txt:1093
# 53831117b2ee45318d636568dcbce969
msgid "A many-to-many relationship. Requires a positional argument: the class to which the model is related. This works exactly the same as it does for :class:`ForeignKey`, including all the options regarding :ref:`recursive <recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1098
# 598f4ce1fbe646a493014284cec95806
msgid "Related objects can be added, removed, or created with the field's :class:`~django.db.models.fields.related.RelatedManager`."
msgstr ""

#: ../../ref/models/fields.txt:1104
# 8242770b1dc34321b4db2caff0c83919
msgid "Behind the scenes, Django creates an intermediary join table to represent the many-to-many relationship. By default, this table name is generated using the name of the many-to-many field and the name of the table for the model that contains it. Since some databases don't support table names above a certain length, these table names will be automatically truncated to 64 characters and a uniqueness hash will be used. This means you might see table names like ``author_books_9cdf4``; this is perfectly normal.  You can manually provide the name of the join table using the :attr:`~ManyToManyField.db_table` option."
msgstr ""

#: ../../ref/models/fields.txt:1118
# 7894afa5116b429994110a70e3368dff
msgid ":class:`ManyToManyField` accepts an extra set of arguments -- all optional -- that control how the relationship functions."
msgstr ""

#: ../../ref/models/fields.txt:1123
# e5983ae86589451384ec026b11778ad0
msgid "Same as :attr:`ForeignKey.related_name`."
msgstr ""

#: ../../ref/models/fields.txt:1125
# 6a9d8eaed61146e2bebc374176bd2c1a
msgid "If you have more than one ``ManyToManyField`` pointing to the same model and want to suppress the backwards relations, set each ``related_name`` to a unique value ending with ``'+'``::"
msgstr ""

#: ../../ref/models/fields.txt:1134
# 4cb02913e90749d987fa6d58d42b6c07
msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr ""

#: ../../ref/models/fields.txt:1136
# 13eafc764ea842ca8b2e598ecfc92885
msgid "``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a custom intermediate table specified using the :attr:`~ManyToManyField.through` parameter."
msgstr ""

#: ../../ref/models/fields.txt:1142
# 1fe4c5e7e37a4f57a83b6be9889fe1b3
msgid "Only used in the definition of ManyToManyFields on self. Consider the following model::"
msgstr ""

#: ../../ref/models/fields.txt:1148
# 8b7586bc034140599a211c96ef7c41db
msgid "When Django processes this model, it identifies that it has a :class:`ManyToManyField` on itself, and as a result, it doesn't add a ``person_set`` attribute to the ``Person`` class. Instead, the :class:`ManyToManyField` is assumed to be symmetrical -- that is, if I am your friend, then you are my friend."
msgstr ""

#: ../../ref/models/fields.txt:1154
# 31ea214b72494866a6578ca33fe65ac9
msgid "If you do not want symmetry in many-to-many relationships with ``self``, set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force Django to add the descriptor for the reverse relationship, allowing :class:`ManyToManyField` relationships to be non-symmetrical."
msgstr ""

#: ../../ref/models/fields.txt:1161
# 6dcae98324e34226ad898f074d4ba23a
msgid "Django will automatically generate a table to manage many-to-many relationships. However, if you want to manually specify the intermediary table, you can use the :attr:`~ManyToManyField.through` option to specify the Django model that represents the intermediate table that you want to use."
msgstr ""

#: ../../ref/models/fields.txt:1167
# a4502d6093eb47afa7afed3867068af1
msgid "The most common use for this option is when you want to associate :ref:`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""

#: ../../ref/models/fields.txt:1173
# 1a449157d7734c6b9a99186be58cbb61
msgid "The name of the table to create for storing the many-to-many data. If this is not provided, Django will assume a default name based upon the names of: the table for the model defining the relationship and the name of the field itself."
msgstr ""

#: ../../ref/models/fields.txt:1181
# 2e02cbdd559148d293ecbfc5273ab5c0
msgid "``OneToOneField``"
msgstr ""

#: ../../ref/models/fields.txt:1185
# bc4f074b99724af58597735c4a7b7f2e
msgid "A one-to-one relationship. Conceptually, this is similar to a :class:`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" side of the relation will directly return a single object."
msgstr ""

#: ../../ref/models/fields.txt:1189
# 5e16cd2a4f344bc88de3a5a4de2fb2f4
msgid "This is most useful as the primary key of a model which \"extends\" another model in some way; :ref:`multi-table-inheritance` is implemented by adding an implicit one-to-one relation from the child model to the parent model, for example."
msgstr ""

#: ../../ref/models/fields.txt:1194
# a6f15f8db7254bb992a25b591806f3d1
msgid "One positional argument is required: the class to which the model will be related. This works exactly the same as it does for :class:`ForeignKey`, including all the options regarding :ref:`recursive <recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1201
# 3a6cc0dbcd584330bd8c24273e6b5eae
msgid "Additionally, ``OneToOneField`` accepts all of the extra arguments accepted by :class:`ForeignKey`, plus one extra argument:"
msgstr ""

#: ../../ref/models/fields.txt:1206
# 9c1542e799b141f9ad8c0ddd1da9a5f7
msgid "When ``True`` and used in a model which inherits from another (concrete) model, indicates that this field should be used as the link back to the parent class, rather than the extra ``OneToOneField`` which would normally be implicitly created by subclassing."
msgstr ""

#: ../../ref/models/index.txt:5
# 34f44b83aa8b4626b22e5e54696d6dd9
msgid "Model API reference. For introductory material, see :doc:`/topics/db/models`."
msgstr ""

#: ../../ref/models/instances.txt:3
# 93e7fc7451f94fc3870e8690cd6059d2
msgid "Model instance reference"
msgstr ""

#: ../../ref/models/instances.txt:7
# c080a46d7f91480c8a210a011ca4b38c
msgid "This document describes the details of the ``Model`` API. It builds on the material presented in the :doc:`model </topics/db/models>` and :doc:`database query </topics/db/queries>` guides, so you'll probably want to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/instances.txt:12
#: ../../ref/models/querysets.txt:12
# 5cced7dbe5c5467f84482a6e40d374e7
# e4eac62b65434e7bb5663dad251344d5
msgid "Throughout this reference we'll use the :ref:`example Weblog models <queryset-model-example>` presented in the :doc:`database query guide </topics/db/queries>`."
msgstr ""

#: ../../ref/models/instances.txt:17
# a1bf15b638ec4ef880fe2b7b2cef4e77
msgid "Creating objects"
msgstr ""

#: ../../ref/models/instances.txt:19
# a31fb29f63d64ae4bc141cc8d3a33892
msgid "To create a new instance of a model, just instantiate it like any other Python class:"
msgstr ""

#: ../../ref/models/instances.txt:24
# 556d82466acf4b2daf5c492cb9b3adfa
msgid "The keyword arguments are simply the names of the fields you've defined on your model. Note that instantiating a model in no way touches your database; for that, you need to :meth:`~Model.save()`."
msgstr ""

#: ../../ref/models/instances.txt:30
# cb554a0b69444db6a8dbb2616ee2f71f
msgid "You may be tempted to customize the model by overriding the ``__init__`` method. If you do so, however, take care not to change the calling signature as any change may prevent the model instance from being saved. Rather than overriding ``__init__``, try using one of these approaches:"
msgstr ""

#: ../../ref/models/instances.txt:35
# 8ebf0a5ff329498290994ceda818b75b
msgid "Add a classmethod on the model class::"
msgstr ""

#: ../../ref/models/instances.txt:48
# c1d375200a7e4bfbbb89932470b63ef6
msgid "Add a method on a custom manager (usually preferred)::"
msgstr ""

#: ../../ref/models/instances.txt:66
# 495c43e069a64ad39426611856660657
msgid "Validating objects"
msgstr ""

#: ../../ref/models/instances.txt:68
# 854df5085a92410eae07ae13ea6df5bb
msgid "There are three steps involved in validating a model:"
msgstr ""

#: ../../ref/models/instances.txt:70
# 798b011c68414bd5bfc3ae10e9f02f96
msgid "Validate the model fields - :meth:`Model.clean_fields()`"
msgstr ""

#: ../../ref/models/instances.txt:71
# f2fb6167c32b4571ae8301c466f0f2e7
msgid "Validate the model as a whole - :meth:`Model.clean()`"
msgstr ""

#: ../../ref/models/instances.txt:72
# 4512f369cd314895825b166b7843195a
msgid "Validate the field uniqueness - :meth:`Model.validate_unique()`"
msgstr ""

#: ../../ref/models/instances.txt:74
# d36dc58b5bcd47498efc642380cf224a
msgid "All three steps are performed when you call a model's :meth:`~Model.full_clean()` method."
msgstr ""

#: ../../ref/models/instances.txt:77
# 87f2fabe24a142d4b8a60333b5ac8ab4
msgid "When you use a :class:`~django.forms.ModelForm`, the call to :meth:`~django.forms.Form.is_valid()` will perform these validation steps for all the fields that are included on the form. See the :doc:`ModelForm documentation </topics/forms/modelforms>` for more information. You should only need to call a model's :meth:`~Model.full_clean()` method if you plan to handle validation errors yourself, or if you have excluded fields from the :class:`~django.forms.ModelForm` that require validation."
msgstr ""

#: ../../ref/models/instances.txt:87
# e99e38acfb704ae0ade245c9295b2d94
msgid "This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and :meth:`Model.validate_unique()`, in that order and raises a :exc:`~django.core.exceptions.ValidationError` that has a ``message_dict`` attribute containing errors from all three stages."
msgstr ""

#: ../../ref/models/instances.txt:92
# d4c8519a3e114bafaa51a0db393be431
msgid "The optional ``exclude`` argument can be used to provide a list of field names that can be excluded from validation and cleaning. :class:`~django.forms.ModelForm` uses this argument to exclude fields that aren't present on your form from being validated since any errors raised could not be corrected by the user."
msgstr ""

#: ../../ref/models/instances.txt:98
# e33df51ffc7a425e883fdcb923050e81
msgid "Note that ``full_clean()`` will *not* be called automatically when you call your model's :meth:`~Model.save()` method, nor as a result of :class:`~django.forms.ModelForm` validation. In the case of :class:`~django.forms.ModelForm` validation, :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and :meth:`Model.validate_unique()` are all called individually."
msgstr ""

#: ../../ref/models/instances.txt:105
# a2782cbdc90d45ecac16a6f36a342d49
msgid "You'll need to call ``full_clean`` manually when you want to run one-step model validation for your own manually created models. For example::"
msgstr ""

#: ../../ref/models/instances.txt:115
# 2120aac931744c6f8828e09a9501df45
msgid "The first step ``full_clean()`` performs is to clean each individual field."
msgstr ""

#: ../../ref/models/instances.txt:119
# f76ca6debac2421495d4ba711ba07b70
msgid "This method will validate all fields on your model. The optional ``exclude`` argument lets you provide a list of field names to exclude from validation. It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:124
# 07cd2d13a1254523869afbc272eeebe2
msgid "The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. This method should be overridden to perform custom validation on your model."
msgstr ""

#: ../../ref/models/instances.txt:129
# 68f1901315c241e1895721453c4c495a
msgid "This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field::"
msgstr ""

#: ../../ref/models/instances.txt:143
# e685beb24b2b44579ad450b959dd6e82
msgid "Any :exc:`~django.core.exceptions.ValidationError` exceptions raised by ``Model.clean()`` will be stored in a special key error dictionary key, ``NON_FIELD_ERRORS``, that is used for errors that are tied to the entire model instead of to a specific field::"
msgstr ""

#: ../../ref/models/instances.txt:154
# 2c1f76c3998049539bd51143563929d3
msgid "Finally, ``full_clean()`` will check any unique constraints on your model."
msgstr ""

#: ../../ref/models/instances.txt:158
# 05fee429921f4e1894017b2830e3a968
msgid "This method is similar to :meth:`~Model.clean_fields`, but validates all uniqueness constraints on your model instead of individual field values. The optional ``exclude`` argument allows you to provide a list of field names to exclude from validation. It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:164
# 3596363af1bd41d0a4dcf6509a5b75f1
msgid "Note that if you provide an ``exclude`` argument to ``validate_unique()``, any :attr:`~django.db.models.Options.unique_together` constraint involving one of the fields you provided will not be checked."
msgstr ""

#: ../../ref/models/instances.txt:170
# 0832f22a79dc4090b0aa964b5b0c2125
msgid "Saving objects"
msgstr ""

#: ../../ref/models/instances.txt:172
# b3ab087f8eea4d68b549e88bd54a4433
msgid "To save an object back to the database, call ``save()``:"
msgstr ""

#: ../../ref/models/instances.txt:176
# ba9c08f3c98d4a8c8d0c7d8b757d5268
msgid "If you want customized saving behavior, you can override this ``save()`` method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:179
# a1b35403a65c40fb9c33436bd12fdb02
msgid "The model save process also has some subtleties; see the sections below."
msgstr ""

#: ../../ref/models/instances.txt:182
# 08887f5ae83d4ac2aa68841e3eea3a99
msgid "Auto-incrementing primary keys"
msgstr ""

#: ../../ref/models/instances.txt:184
# 8a36fafeed19441c9d11aa5e5310fdaf
msgid "If a model has an :class:`~django.db.models.AutoField` — an auto-incrementing primary key — then that auto-incremented value will be calculated and saved as an attribute on your object the first time you call ``save()``::"
msgstr ""

#: ../../ref/models/instances.txt:193
# 3ec3b628aa7d4f7eb01a44683d5ab545
msgid "There's no way to tell what the value of an ID will be before you call ``save()``, because that value is calculated by your database, not by Django."
msgstr ""

#: ../../ref/models/instances.txt:196
# 24733f0f030c4ceea27fff492da55f8c
msgid "For convenience, each model has an :class:`~django.db.models.AutoField` named ``id`` by default unless you explicitly specify ``primary_key=True`` on a field in your model. See the documentation for :class:`~django.db.models.AutoField` for more details."
msgstr ""

#: ../../ref/models/instances.txt:202
# 55a540c43f1d474495c71f6789ef9781
msgid "The ``pk`` property"
msgstr ""

#: ../../ref/models/instances.txt:206
# 01f1462c73c1498183040d692e7332e6
msgid "Regardless of whether you define a primary key field yourself, or let Django supply one for you, each model will have a property called ``pk``. It behaves like a normal attribute on the model, but is actually an alias for whichever attribute is the primary key field for the model. You can read and set this value, just as you would for any other attribute, and it will update the correct field in the model."
msgstr ""

#: ../../ref/models/instances.txt:214
# 96b87dd2566f47dfa3d1c9ed4d8ed795
msgid "Explicitly specifying auto-primary-key values"
msgstr ""

#: ../../ref/models/instances.txt:216
# f8c28d7bfd6349b7a71d345477e695c5
msgid "If a model has an :class:`~django.db.models.AutoField` but you want to define a new object's ID explicitly when saving, just define it explicitly before saving, rather than relying on the auto-assignment of the ID::"
msgstr ""

#: ../../ref/models/instances.txt:225
# 3345239803b144eab3a000234392e3d5
msgid "If you assign auto-primary-key values manually, make sure not to use an already-existing primary-key value! If you create a new object with an explicit primary-key value that already exists in the database, Django will assume you're changing the existing record rather than creating a new one."
msgstr ""

#: ../../ref/models/instances.txt:230
# be3cff908a5b4733b120939910931e74
msgid "Given the above ``'Cheddar Talk'`` blog example, this example would override the previous record in the database::"
msgstr ""

#: ../../ref/models/instances.txt:236
# 4b3943806e4f4402a23f2fca98a72873
msgid "See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this happens."
msgstr ""

#: ../../ref/models/instances.txt:239
# 22a9f82c779741328454117c5a50c5ed
msgid "Explicitly specifying auto-primary-key values is mostly useful for bulk-saving objects, when you're confident you won't have primary-key collision."
msgstr ""

#: ../../ref/models/instances.txt:243
# dcfa24b162c341b99434c4f41cda92b6
msgid "What happens when you save?"
msgstr ""

#: ../../ref/models/instances.txt:245
# 04a0057cf5e04634923c2bcbd67495eb
msgid "When you save an object, Django performs the following steps:"
msgstr ""

#: ../../ref/models/instances.txt:247
# a30e1f257d1c436fb09ec15ac984622a
msgid "**Emit a pre-save signal.** The :doc:`signal </ref/signals>` :attr:`django.db.models.signals.pre_save` is sent, allowing any functions listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:252
# f5bf844935fa40de981a210a8609ccbd
msgid "**Pre-process the data.** Each field on the object is asked to perform any automated data modification that the field may need to perform."
msgstr ""

#: ../../ref/models/instances.txt:256
# ab3862120a5044bb987a61cec4c0552e
msgid "Most fields do *no* pre-processing — the field data is kept as-is. Pre-processing is only used on fields that have special behavior.  For example, if your model has a :class:`~django.db.models.DateField` with ``auto_now=True``, the pre-save phase will alter the data in the object to ensure that the date field contains the current date stamp. (Our documentation doesn't yet include a list of all the fields with this \"special behavior.\")"
msgstr ""

#: ../../ref/models/instances.txt:264
# a33c9c06fc3b40cdb19c8631a99fe1d6
msgid "**Prepare the data for the database.** Each field is asked to provide its current value in a data type that can be written to the database."
msgstr ""

#: ../../ref/models/instances.txt:267
# 0c07e746a14b4639badbff5d64144a2b
msgid "Most fields require *no* data preparation. Simple data types, such as integers and strings, are 'ready to write' as a Python object. However, more complex data types often require some modification."
msgstr ""

#: ../../ref/models/instances.txt:271
# d94471f3b9b5415abe1f1463fcd8b82f
msgid "For example, :class:`~django.db.models.DateField` fields use a Python ``datetime`` object to store data. Databases don't store ``datetime`` objects, so the field value must be converted into an ISO-compliant date string for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:276
# 8c8fa65891ac45f591110fec0fbfc344
msgid "**Insert the data into the database.** The pre-processed, prepared data is then composed into an SQL statement for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:280
# 11379ecab435484da6dedbf2a30282d9
msgid "**Emit a post-save signal.** The signal :attr:`django.db.models.signals.post_save` is sent, allowing any functions listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:286
# 3f227457e72d4b89843c74dc0cadb600
msgid "How Django knows to UPDATE vs. INSERT"
msgstr ""

#: ../../ref/models/instances.txt:288
# f88b05f821cc46459bf821811ef20714
msgid "You may have noticed Django database objects use the same ``save()`` method for creating and changing objects. Django abstracts the need to use ``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call ``save()``, Django follows this algorithm:"
msgstr ""

#: ../../ref/models/instances.txt:293
# ee7c2800242e47ffb19a6205c548abc2
msgid "If the object's primary key attribute is set to a value that evaluates to ``True`` (i.e., a value other than ``None`` or the empty string), Django executes a ``SELECT`` query to determine whether a record with the given primary key already exists."
msgstr ""

#: ../../ref/models/instances.txt:297
# 9f440f15f7584ecbae9ce985fcb9b788
msgid "If the record with the given primary key does already exist, Django executes an ``UPDATE`` query."
msgstr ""

#: ../../ref/models/instances.txt:299
# ff933d6be966422f963b796981f4faa2
msgid "If the object's primary key attribute is *not* set, or if it's set but a record doesn't exist, Django executes an ``INSERT``."
msgstr ""

#: ../../ref/models/instances.txt:302
# e628242ac32a4a3392982ab627700cc4
msgid "The one gotcha here is that you should be careful not to specify a primary-key value explicitly when saving new objects, if you cannot guarantee the primary-key value is unused. For more on this nuance, see `Explicitly specifying auto-primary-key values`_ above and `Forcing an INSERT or UPDATE`_ below."
msgstr ""

#: ../../ref/models/instances.txt:310
# 41d932bbfeb549c78b4f200b15adfd9f
msgid "Forcing an INSERT or UPDATE"
msgstr ""

#: ../../ref/models/instances.txt:312
# b29d6b8f230342f3ae9ac7c44ad22dcd
msgid "In some rare circumstances, it's necessary to be able to force the :meth:`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a new row. In these cases you can pass the ``force_insert=True`` or ``force_update=True`` parameters to the :meth:`~Model.save()` method. Obviously, passing both parameters is an error: you cannot both insert *and* update at the same time!"
msgstr ""

#: ../../ref/models/instances.txt:320
# e8fc32e0c6a74116bde05f540550edb3
msgid "It should be very rare that you'll need to use these parameters. Django will almost always do the right thing and trying to override that will lead to errors that are difficult to track down. This feature is for advanced use only."
msgstr ""

#: ../../ref/models/instances.txt:325
# 7e8343bfc11b4ffea4fbc66c89e00824
msgid "Using ``update_fields`` will force an update similarly to ``force_update``."
msgstr ""

#: ../../ref/models/instances.txt:328
# 4a2bedf691164356a5ba0d21a3462b7c
msgid "Updating attributes based on existing fields"
msgstr ""

#: ../../ref/models/instances.txt:330
# c09b4793c6134a188bbc21c1f35cdff1
msgid "Sometimes you'll need to perform a simple arithmetic task on a field, such as incrementing or decrementing the current value. The obvious way to achieve this is to do something like::"
msgstr ""

#: ../../ref/models/instances.txt:338
# a1d46f26ec374237afa9adb989873980
msgid "If the old ``number_sold`` value retrieved from the database was 10, then the value of 11 will be written back to the database."
msgstr ""

#: ../../ref/models/instances.txt:341
# d68d1266c72f4fae9403e70235ddefbd
msgid "This sequence has a standard update problem in that it contains a race condition. If another thread of execution has already saved an updated value after the current thread retrieved the old value, the current thread will only save the old value plus one, rather than the new (current) value plus one."
msgstr ""

#: ../../ref/models/instances.txt:346
# 619193cedac9403384c8a7e751407f72
msgid "The process can be made robust and slightly faster by expressing the update relative to the original field value, rather than as an explicit assignment of a new value. Django provides :ref:`F() expressions <query-expressions>` for performing this kind of relative update. Using ``F()`` expressions, the previous example is expressed as::"
msgstr ""

#: ../../ref/models/instances.txt:357
# ccf1a8e3fa6f445b9be0a097261a9af1
msgid "This approach doesn't use the initial value from the database. Instead, it makes the database do the update based on whatever value is current at the time that the :meth:`~Model.save()` is executed."
msgstr ""

#: ../../ref/models/instances.txt:361
# cf821f44034c4c03a2e3dfb6f8a8518e
msgid "Once the object has been saved, you must reload the object in order to access the actual value that was applied to the updated field::"
msgstr ""

#: ../../ref/models/instances.txt:368
# 514da4a6b22e4183942296181c79e516
msgid "For more details, see the documentation on :ref:`F() expressions <query-expressions>` and their :ref:`use in update queries <topics-db-queries-update>`."
msgstr ""

#: ../../ref/models/instances.txt:373
# 29d6295d04da4569a6b9270b3c8a3b94
msgid "Specifying which fields to save"
msgstr ""

#: ../../ref/models/instances.txt:377
# 6eb0487f27b442919a1c80d8b0b59b09
msgid "If ``save()`` is passed a list of field names in keyword argument ``update_fields``, only the fields named in that list will be updated. This may be desirable if you want to update just one or a few fields on an object. There will be a slight performance benefit from preventing all of the model fields from being updated in the database. For example::"
msgstr ""

#: ../../ref/models/instances.txt:386
# 23e05efdb19744e3b8f35fb24a1df9bc
msgid "The ``update_fields`` argument can be any iterable containing strings. An empty ``update_fields`` iterable will skip the save. A value of None will perform an update on all fields."
msgstr ""

#: ../../ref/models/instances.txt:390
# 6c62d2c1c332446fba3e219c96a0a13d
msgid "Specifying ``update_fields`` will force an update."
msgstr ""

#: ../../ref/models/instances.txt:392
# d86c19ef59464cb587f52732728581f1
msgid "When saving a model fetched through deferred model loading (:meth:`~django.db.models.query.QuerySet.only()` or :meth:`~django.db.models.query.QuerySet.defer()`) only the fields loaded from the DB will get updated. In effect there is an automatic ``update_fields`` in this case. If you assign or change any deferred field value, the field will be added to the updated fields."
msgstr ""

#: ../../ref/models/instances.txt:400
# e496ab9220404f65bbdeab10c62afc32
msgid "Deleting objects"
msgstr ""

#: ../../ref/models/instances.txt:404
# d972674998f9437a90f0cc1d9c87bcfa
msgid "Issues a SQL ``DELETE`` for the object. This only deletes the object in the database; the Python instance will still exist and will still have data in its fields."
msgstr ""

#: ../../ref/models/instances.txt:408
# 36fbc31788ff49cc9fffc1dfcb24392b
msgid "For more details, including how to delete objects in bulk, see :ref:`topics-db-queries-delete`."
msgstr ""

#: ../../ref/models/instances.txt:411
# 7124e6686af844c3a7c9ed17a570aefe
msgid "If you want customized deletion behavior, you can override the ``delete()`` method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:417
# 7f63d52b354f42caba6f47d9dc3b70aa
msgid "Other model instance methods"
msgstr ""

#: ../../ref/models/instances.txt:419
# c19f66232c234cab89d659dd3773134f
msgid "A few object methods have special purposes."
msgstr ""

#: ../../ref/models/instances.txt:422
# f1173094a9ec47b6993e0e9fb8035c83
msgid "``__unicode__``"
msgstr ""

#: ../../ref/models/instances.txt:426
# 527446b7e0164e228445eed81d6c4df7
msgid "The ``__unicode__()`` method is called whenever you call ``unicode()`` on an object. Django uses ``unicode(obj)`` (or the related function, :meth:`str(obj) <Model.__str__>`) in a number of places. Most notably, to display an object in the Django admin site and as the value inserted into a template when it displays an object. Thus, you should always return a nice, human-readable representation of the model from the ``__unicode__()`` method."
msgstr ""

#: ../../ref/models/instances.txt:442
# 6944c218179e460c8322ced60d992793
msgid "If you define a ``__unicode__()`` method on your model and not a :meth:`~Model.__str__()` method, Django will automatically provide you with a :meth:`~Model.__str__()` that calls ``__unicode__()`` and then converts the result correctly to a UTF-8 encoded string object. This is recommended development practice: define only ``__unicode__()`` and let Django take care of the conversion to string objects when required."
msgstr ""

#: ../../ref/models/instances.txt:450
# 07677b919d0245bd85c458c34c863d7b
msgid "``__str__``"
msgstr ""

#: ../../ref/models/instances.txt:454
# df3b7229dc08437cb9a3882fe443734b
msgid "The ``__str__()`` method is called whenever you call ``str()`` on an object. The main use for this method directly inside Django is when the ``repr()`` output of a model is displayed anywhere (for example, in debugging output). Thus, you should return a nice, human-readable string for the object's ``__str__()``.  It isn't required to put ``__str__()`` methods everywhere if you have sensible :meth:`~Model.__unicode__()` methods."
msgstr ""

#: ../../ref/models/instances.txt:458
# 1cf78a8350dc4c0fadd44367d6ece6f5
msgid "The previous :meth:`~Model.__unicode__()` example could be similarly written using ``__str__()`` like this::"
msgstr ""

#: ../../ref/models/instances.txt:471
# 45e289a8bb2d4915bc2c0792e77cdc01
msgid "``get_absolute_url``"
msgstr ""

#: ../../ref/models/instances.txt:475
# aa7592e425eb48a68a11ffab0cb85c57
msgid "Define a ``get_absolute_url()`` method to tell Django how to calculate the canonical URL for an object. To callers, this method should appear to return a string that can be used to refer to the object over HTTP."
msgstr ""

#: ../../ref/models/instances.txt:484
# 1549fc3a9d8442f79d8a4928eaf1ecb1
msgid "(Whilst this code is correct and simple, it may not be the most portable way to write this kind of method. The :func:`~django.core.urlresolvers.reverse` function is usually the best approach.)"
msgstr ""

#: ../../ref/models/instances.txt:493
# 37f4043e85b44b6bb47d52f50867c6a2
msgid "One place Django uses ``get_absolute_url()`` is in the admin app. If an object defines this method, the object-editing page will have a \"View on site\" link that will jump you directly to the object's public view, as given by ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:498
# 127654c754784372a9271e2fd47d1f8e
msgid "Similarly, a couple of other bits of Django, such as the :doc:`syndication feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when it is defined. If it makes sense for your model's instances to each have a unique URL, you should define ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:503
# 9346ad14bd27470fb1a39c0c6e186b09
msgid "It's good practice to use ``get_absolute_url()`` in templates, instead of hard-coding your objects' URLs. For example, this template code is bad:"
msgstr ""

#: ../../ref/models/instances.txt:511
# 197d8ef315424c8cb9ce1645908991b8
msgid "This template code is much better:"
msgstr ""

#: ../../ref/models/instances.txt:517
# 9cce6521c93945e08f62eac178ace042
msgid "The logic here is that if you change the URL structure of your objects, even for something simple such as correcting a spelling error, you don't want to have to track down every place that the URL might be created. Specify it once, in ``get_absolute_url()`` and have all your other code call that one place."
msgstr ""

#: ../../ref/models/instances.txt:523
# 5f9b0df9d62a4423b55870378de32e7e
msgid "The string you return from ``get_absolute_url()`` **must** contain only ASCII characters (required by the URI specfication, :rfc:`2396`) and be URL-encoded, if necessary."
msgstr ""

#: ../../ref/models/instances.txt:527
# 456a1442794f46c4b7d71f2a751969a8
msgid "Code and templates calling ``get_absolute_url()`` should be able to use the result directly without any further processing. You may wish to use the ``django.utils.encoding.iri_to_uri()`` function to help with this if you are using unicode strings containing characters outside the ASCII range at all."
msgstr ""

#: ../../ref/models/instances.txt:534
# 90756f7dfd76471f8b2376b1a4c8cc7e
msgid "The ``permalink`` decorator"
msgstr ""

#: ../../ref/models/instances.txt:538
# 12eb643f6fdd4805b4b719eb0beb3cfa
msgid "The ``permalink`` decorator is no longer recommended. You should use :func:`~django.core.urlresolvers.reverse` in the body of your ``get_absolute_url`` method instead."
msgstr ""

#: ../../ref/models/instances.txt:542
# 88cdb831f8334109b622cfc2080d53ab
msgid "In early versions of Django, there wasn't an easy way to use URLs defined in URLconf file inside :meth:`~django.db.models.Model.get_absolute_url`. That meant you would need to define the URL both in URLConf and :meth:`~django.db.models.Model.get_absolute_url`. The ``permalink`` decorator was added to overcome this DRY principle violation. However, since the introduction of :func:`~django.core.urlresolvers.reverse` there is no reason to use ``permalink`` any more."
msgstr ""

#: ../../ref/models/instances.txt:552
# 6e690e21150846bcac46cd451f7a83cc
msgid "This decorator takes the name of a URL pattern (either a view name or a URL pattern name) and a list of position or keyword arguments and uses the URLconf patterns to construct the correct, full URL. It returns a string for the correct URL, with all parameters substituted in the correct positions."
msgstr ""

#: ../../ref/models/instances.txt:557
# 043477d7eaa04e4990662f1374ab3f48
msgid "The ``permalink`` decorator is a Python-level equivalent to the :ttag:`url` template tag and a high-level wrapper for the :func:`~django.core.urlresolvers.reverse` function."
msgstr ""

#: ../../ref/models/instances.txt:561
# e0d454da644e4b98bae116c04ce3752a
msgid "An example should make it clear how to use ``permalink()``. Suppose your URLconf contains a line such as::"
msgstr ""

#: ../../ref/models/instances.txt:566
# bffddccaad764bc2bac1d60232067a7d
msgid "...your model could have a :meth:`~django.db.models.Model.get_absolute_url` method that looked like this::"
msgstr ""

#: ../../ref/models/instances.txt:575
# c2594b3601c0473f9d04d9c2a47bf66d
msgid "Similarly, if you had a URLconf entry that looked like::"
msgstr ""

#: ../../ref/models/instances.txt:579
# 5a9e7d2f74d64aae852642177fc7dfa9
msgid "...you could reference this using ``permalink()`` as follows::"
msgstr ""

#: ../../ref/models/instances.txt:588
# 39b9efe00e0a4353bd8e7957d2097dd2
msgid "Notice that we specify an empty sequence for the second parameter in this case, because we only want to pass keyword parameters, not positional ones."
msgstr ""

#: ../../ref/models/instances.txt:591
# 276806f77e5a448294e2cc2e2340cfea
msgid "In this way, you're associating the model's absolute path with the view that is used to display it, without repeating the view's URL information anywhere. You can still use the :meth:`~django.db.models.Model.get_absolute_url()` method in templates, as before."
msgstr ""

#: ../../ref/models/instances.txt:596
# a125c6e8b2fc4429ad5fce2a832db375
msgid "In some cases, such as the use of generic views or the re-use of custom views for multiple models, specifying the view function may confuse the reverse URL matcher (because multiple patterns point to the same view). For that case, Django has :ref:`named URL patterns <naming-url-patterns>`. Using a named URL pattern, it's possible to give a name to a pattern, and then reference the name rather than the view function. A named URL pattern is defined by replacing the pattern tuple by a call to the ``url`` function)::"
msgstr ""

#: ../../ref/models/instances.txt:608
# 71a668e846e343cca4fa8213437cd925
msgid "...and then using that name to perform the reverse URL resolution instead of the view name::"
msgstr ""

#: ../../ref/models/instances.txt:617
# 2bab447c4b7c45ea9e5b4dbaef9ce571
msgid "More details on named URL patterns are in the :doc:`URL dispatch documentation </topics/http/urls>`."
msgstr ""

#: ../../ref/models/instances.txt:621
# 8f2ed6785f0f4e6c9d3394a991a64cb7
msgid "Extra instance methods"
msgstr ""

#: ../../ref/models/instances.txt:623
# 2f95bfaa87894cb2b06d390d27543dc8
msgid "In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model object might have some of the following methods:"
msgstr ""

#: ../../ref/models/instances.txt:628
# d9c4bdb633b04f8d967b22e17bff37d4
msgid "For every field that has :attr:`~django.db.models.Field.choices` set, the object will have a ``get_FOO_display()`` method, where ``FOO`` is the name of the field. This method returns the \"human-readable\" value of the field."
msgstr ""

#: ../../ref/models/instances.txt:657
# bd339530b0154a93a92e4770aa6f93cd
msgid "For every :class:`~django.db.models.DateField` and :class:`~django.db.models.DateTimeField` that does not have :attr:`null=True <django.db.models.Field.null>`, the object will have ``get_next_by_FOO()`` and ``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the field. This returns the next and previous object with respect to the date field, raising a :exc:`~django.db.DoesNotExist` exception when appropriate."
msgstr ""

#: ../../ref/models/instances.txt:664
# a8f2bb0ac1b1406a959f6a199462ba96
msgid "Both methods accept optional keyword arguments, which should be in the format described in :ref:`Field lookups <field-lookups>`."
msgstr ""

#: ../../ref/models/instances.txt:667
# 9d40dff741eb4f848bdcc3088ca4108f
msgid "Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects."
msgstr ""

#: ../../ref/models/options.txt:3
# 34d753bf40cb46b78fd5aa80134acfa4
msgid "Model ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:5
# c5be1d84ce764045bdab757630110e65
msgid "This document explains all the possible :ref:`metadata options <meta-options>` that you can give your model in its internal ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:10
# 5f88382fbe694e84a0d43298ba76f106
msgid "Available ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:15
# 1de41a3f39ea41d0aa5689484499d269
msgid "``abstract``"
msgstr ""

#: ../../ref/models/options.txt:19
# 73ba472275494c188d2d554443f8ad77
msgid "If ``abstract = True``, this model will be an :ref:`abstract base class <abstract-base-classes>`."
msgstr ""

#: ../../ref/models/options.txt:27
# 422730cbcd6e40f0913739db45d2c05e
msgid "If a model exists outside of the standard :file:`models.py` (for instance, if the app's models are in submodules of ``myapp.models``), the model must define which app it is part of::"
msgstr ""

#: ../../ref/models/options.txt:34
# 4d6784dd111e41a498f6efea8bbd5a67
msgid "``db_table``"
msgstr ""

#: ../../ref/models/options.txt:38
# 8725d8071a4f4a8c9892939b147cc34a
msgid "The name of the database table to use for the model::"
msgstr ""

#: ../../ref/models/options.txt:47
# bdf8be8fe2164780afb71d2d3bc324d4
msgid "To save you time, Django automatically derives the name of the database table from the name of your model class and the app that contains it. A model's database table name is constructed by joining the model's \"app label\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- to the model's class name, with an underscore between them."
msgstr ""

#: ../../ref/models/options.txt:53
# 516afae3b43d4aa085ff91cd68c87034
msgid "For example, if you have an app ``bookstore`` (as created by ``manage.py startapp bookstore``), a model defined as ``class Book`` will have a database table named ``bookstore_book``."
msgstr ""

#: ../../ref/models/options.txt:57
# a2e406ddd5384d099035a028a96cb07c
msgid "To override the database table name, use the ``db_table`` parameter in ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:60
# 88202e32f657452fb7c14cfc15a7f9ec
msgid "If your database table name is an SQL reserved word, or contains characters that aren't allowed in Python variable names -- notably, the hyphen -- that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/options.txt:66
# 1607169c5016473ab6eef176f6dd7b6c
msgid "It is strongly advised that you use lowercase table names when you override the table name via ``db_table``, particularly if you are using the MySQL backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""

#: ../../ref/models/options.txt:76
# 6a348d94543743299ba39d7f151d38ed
msgid "The name of the :doc:`database tablespace </topics/db/tablespaces>` to use for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` setting, if set. If the backend doesn't support tablespaces, this option is ignored."
msgstr ""

#: ../../ref/models/options.txt:82
# 96ce9b2b168e47fab0dca2bb65a3f909
msgid "``get_latest_by``"
msgstr ""

#: ../../ref/models/options.txt:86
# 08660787fb5b4f8ebcdad5a6bed54b65
msgid "The name of an orderable field in the model, typically a :class:`DateField`, :class:`DateTimeField`, or :class:`IntegerField`. This specifies the default field to use in your model :class:`Manager`'s :class:`~QuerySet.latest` method."
msgstr ""

#: ../../ref/models/options.txt:95
# c7734055a40d4ae2a833ce306038a487
msgid "See the docs for :meth:`~django.db.models.query.QuerySet.latest` for more."
msgstr ""

#: ../../ref/models/options.txt:98
# 29e74e33dade42d5ac89f1278efebb82
msgid "``managed``"
msgstr ""

#: ../../ref/models/options.txt:102
# 1eeddf48141049058184268b8de511be
msgid "Defaults to ``True``, meaning Django will create the appropriate database tables in :djadmin:`syncdb` and remove them as part of a :djadmin:`reset` management command. That is, Django *manages* the database tables' lifecycles."
msgstr ""

#: ../../ref/models/options.txt:107
# 22568700b0bb48e29aa92fb30a4b6a0f
msgid "If ``False``, no database table creation or deletion operations will be performed for this model. This is useful if the model represents an existing table or a database view that has been created by some other means. This is the *only* difference when ``managed=False``. All other aspects of model handling are exactly the same as normal. This includes"
msgstr ""

#: ../../ref/models/options.txt:113
# 8b788d98b7e94d009d3cbe96cba23c05
msgid "Adding an automatic primary key field to the model if you don't declare it.  To avoid confusion for later code readers, it's recommended to specify all the columns from the database table you are modeling when using unmanaged models."
msgstr ""

#: ../../ref/models/options.txt:118
# e4cdffc97fb64a5690b332ea4892eb31
msgid "If a model with ``managed=False`` contains a :class:`~django.db.models.ManyToManyField` that points to another unmanaged model, then the intermediate table for the many-to-many join will also not be created. However, the intermediary table between one managed and one unmanaged model *will* be created."
msgstr ""

#: ../../ref/models/options.txt:124
# 5c325b6a248140939a346aea337bcf8c
msgid "If you need to change this default behavior, create the intermediary table as an explicit model (with ``managed`` set as needed) and use the :attr:`ManyToManyField.through` attribute to make the relation use your custom model."
msgstr ""

#: ../../ref/models/options.txt:129
# 6096524819da465faaa8418f91d19ced
msgid "For tests involving models with ``managed=False``, it's up to you to ensure the correct tables are created as part of the test setup."
msgstr ""

#: ../../ref/models/options.txt:132
# d336195c6b4c48e0a009546683f25e59
msgid "If you're interested in changing the Python-level behavior of a model class, you *could* use ``managed=False`` and create a copy of an existing model. However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""

#: ../../ref/models/options.txt:137
# 9576a1c59c4249d7ba75277599f40223
msgid "``order_with_respect_to``"
msgstr ""

#: ../../ref/models/options.txt:141
# b472cd2854f04ba59db368a3fdc05216
msgid "Marks this object as \"orderable\" with respect to the given field. This is almost always used with related objects to allow them to be ordered with respect to a parent object. For example, if an ``Answer`` relates to a ``Question`` object, and a question has more than one answer, and the order of answers matters, you'd do this::"
msgstr ""

#: ../../ref/models/options.txt:154
# ec6ff13349744f2bb4f739053e3478da
msgid "When ``order_with_respect_to`` is set, two additional methods are provided to retrieve and to set the order of the related objects: ``get_RELATED_order()`` and ``set_RELATED_order()``, where ``RELATED`` is the lowercased model name. For example, assuming that a ``Question`` object has multiple related ``Answer`` objects, the list returned contains the primary keys of the related ``Answer`` objects::"
msgstr ""

#: ../../ref/models/options.txt:165
# 8cfb1952310e4a4aa38405294c5d9e61
msgid "The order of a ``Question`` object's related ``Answer`` objects can be set by passing in a list of ``Answer`` primary keys::"
msgstr ""

#: ../../ref/models/options.txt:170
# 2d57f49382614accab40c13d74586e78
msgid "The related objects also get two methods, ``get_next_in_order()`` and ``get_previous_in_order()``, which can be used to access those objects in their proper order. Assuming the ``Answer`` objects are ordered by ``id``::"
msgstr ""

#: ../../ref/models/options.txt:182
# 9c49d6261f854da1a782d06906f7155d
msgid "``order_with_respect_to`` adds an additional field/database column named ``_order``, so be sure to handle that as you would any other change to your models if you add or change ``order_with_respect_to`` after your initial :djadmin:`syncdb`."
msgstr ""

#: ../../ref/models/options.txt:188
# 8edd129fe0e147d1bda9db80cf2c57ee
msgid "``ordering``"
msgstr ""

#: ../../ref/models/options.txt:192
# bca089be576d4382918d40fd2bfeb74a
msgid "The default ordering for the object, for use when obtaining lists of objects::"
msgstr ""

#: ../../ref/models/options.txt:196
# 67d997b6e80d486ebed09e7a5af8a3e6
msgid "This is a tuple or list of strings. Each string is a field name with an optional \"-\" prefix, which indicates descending order. Fields without a leading \"-\" will be ordered ascending. Use the string \"?\" to order randomly."
msgstr ""

#: ../../ref/models/options.txt:200
# 6fa8af5549194b9ba5d55089c7c912c9
msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:204
# 0d11fccd5a3147a79d1f21c008b1f274
msgid "To order by ``pub_date`` descending, use this::"
msgstr ""

#: ../../ref/models/options.txt:208
# d65b891b6480469ca25268bba20071c3
msgid "To order by ``pub_date`` descending, then by ``author`` ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:217
# 400b637ff091431e8b84df59dca97098
msgid "``permissions``"
msgstr ""

#: ../../ref/models/options.txt:221
# 54a3c67eb2d1411884728b657e495aac
msgid "Extra permissions to enter into the permissions table when creating this object. Add, delete and change permissions are automatically created for each object that has ``admin`` set. This example specifies an extra permission, ``can_deliver_pizzas``::"
msgstr ""

#: ../../ref/models/options.txt:228
# aae0d8ff12ac4ec3b2c04b1741b3eeac
msgid "This is a list or tuple of 2-tuples in the format ``(permission_code, human_readable_permission_name)``."
msgstr ""

#: ../../ref/models/options.txt:232
# 3207a29eed904eb4bd76980d4b080067
msgid "``proxy``"
msgstr ""

#: ../../ref/models/options.txt:236
# 6276c256538a4468b7ba42bd0562fb3f
msgid "If ``proxy = True``, a model which subclasses another model will be treated as a :ref:`proxy model <proxy-models>`."
msgstr ""

#: ../../ref/models/options.txt:240
# 93898671f3b140fe8b60bf9f470bdfee
msgid "``unique_together``"
msgstr ""

#: ../../ref/models/options.txt:244
# 08e15f828d384efc8a491adbc277e367
msgid "Sets of field names that, taken together, must be unique::"
msgstr ""

#: ../../ref/models/options.txt:248
# df73b4110ec641f49210384455783b0b
msgid "This is a tuple of tuples that must be unique when considered together. It's used in the Django admin and is enforced at the database level (i.e., the appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE`` statement)."
msgstr ""

#: ../../ref/models/options.txt:253
# 8a2f150c29fb46e59841c3b29dc1020a
msgid "For convenience, unique_together can be a single tuple when dealing with a single set of fields::"
msgstr ""

#: ../../ref/models/options.txt:258
# 48fed30dfd9943e4a836fb3ceec4c33d
msgid "A :class:`~django.db.models.ManyToManyField` cannot be included in unique_together. (It's not clear what that would even mean!) If you need to validate uniqueness related to a :class:`~django.db.models.ManyToManyField`, try using a signal or an explicit :attr:`through <ManyToManyField.through>` model."
msgstr ""

#: ../../ref/models/options.txt:264
# 837c7d9f47c04c32a9ec8051005dbf08
msgid "``index_together``"
msgstr ""

#: ../../ref/models/options.txt:270
# 50e7d67476c246609fc63c0e401c8739
msgid "Sets of field names that, taken together, are indexed::"
msgstr ""

#: ../../ref/models/options.txt:276
# ea98a1408d7e4f0bb630fd4e8040ed00
msgid "This list of fields will be indexed together (i.e. the appropriate ``CREATE INDEX`` statement will be issued.)"
msgstr ""

#: ../../ref/models/options.txt:284
# b7fff2ad0358452a86d2ddcb551f014d
msgid "A human-readable name for the object, singular::"
msgstr ""

#: ../../ref/models/options.txt:288
# 649434f0f4c94b68b5768eb5be0552ca
msgid "If this isn't given, Django will use a munged version of the class name: ``CamelCase`` becomes ``camel case``."
msgstr ""

#: ../../ref/models/options.txt:292
# 6b31926d88974735bbf7487d614f2880
msgid "``verbose_name_plural``"
msgstr ""

#: ../../ref/models/options.txt:296
# 18c94a8bf0064841a1f0950674dac00c
msgid "The plural name for the object::"
msgstr ""

#: ../../ref/models/options.txt:300
# 9a369d8bdb34482d950e8a05b4a7d090
msgid "If this isn't given, Django will use :attr:`~Options.verbose_name` + ``\"s\"``."
msgstr ""

#: ../../ref/models/querysets.txt:3
# b76777136cdf4a51a4bb4c7b76634aa6
msgid "QuerySet API reference"
msgstr ""

#: ../../ref/models/querysets.txt:7
# 4e10511fa06e4d04b95425aa21158e47
msgid "This document describes the details of the ``QuerySet`` API. It builds on the material presented in the :doc:`model </topics/db/models>` and :doc:`database query </topics/db/queries>` guides, so you'll probably want to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/querysets.txt:19
# 48a9ccfb20d14ccbba84d70d0fd856d6
msgid "When QuerySets are evaluated"
msgstr ""

#: ../../ref/models/querysets.txt:21
# bdded259116b4536bf133cc546345789
msgid "Internally, a ``QuerySet`` can be constructed, filtered, sliced, and generally passed around without actually hitting the database. No database activity actually occurs until you do something to evaluate the queryset."
msgstr ""

#: ../../ref/models/querysets.txt:25
# 3a6f8a2c01a345d6907941fba5b01c2f
msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr ""

#: ../../ref/models/querysets.txt:27
# de382b621efe4ce99bb8e4061313576d
msgid "**Iteration.** A ``QuerySet`` is iterable, and it executes its database query the first time you iterate over it. For example, this will print the headline of all entries in the database::"
msgstr ""

#: ../../ref/models/querysets.txt:34
# e9ac709c9b274e16b22bd7ca4df0e30e
msgid "Note: Don't use this if all you want to do is determine if at least one result exists. It's more efficient to use :meth:`~QuerySet.exists`."
msgstr ""

#: ../../ref/models/querysets.txt:37
# 33fa4fde6e4b4bf099ea5b18fbe70dc8
msgid "**Slicing.** As explained in :ref:`limiting-querysets`, a ``QuerySet`` can be sliced, using Python's array-slicing syntax. Slicing an unevaluated ``QuerySet`` usually returns another unevaluated ``QuerySet``, but Django will execute the database query if you use the \"step\" parameter of slice syntax, and will return a list. Slicing a ``QuerySet`` that has been evaluated (partially or fully) also returns a list."
msgstr ""

#: ../../ref/models/querysets.txt:44
# e9e21e43d0234fddb1214a26ceff69f4
msgid "**Pickling/Caching.** See the following section for details of what is involved when `pickling QuerySets`_. The important thing for the purposes of this section is that the results are read from the database."
msgstr ""

#: ../../ref/models/querysets.txt:48
# e5e2998d61e44a609656711911e84366
msgid "**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This is for convenience in the Python interactive interpreter, so you can immediately see your results when using the API interactively."
msgstr ""

#: ../../ref/models/querysets.txt:52
# 45ac4948eb5c4a508e1c0f0657cc12b9
msgid "**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, as you might expect, returns the length of the result list."
msgstr ""

#: ../../ref/models/querysets.txt:55
# 19d1056507054262a9537936c624ec7c
msgid "Note: *Don't* use ``len()`` on ``QuerySet``\\s if all you want to do is determine the number of records in the set. It's much more efficient to handle a count at the database level, using SQL's ``SELECT COUNT(*)``, and Django provides a ``count()`` method for precisely this reason. See ``count()`` below."
msgstr ""

#: ../../ref/models/querysets.txt:61
# e6fe25056b3247c99a1e09e66c196e53
msgid "**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:66
# 75be291f10de4b2d9f387865e9d6b402
msgid "Be warned, though, that this could have a large memory overhead, because Django will load each element of the list into memory. In contrast, iterating over a ``QuerySet`` will take advantage of your database to load data and instantiate objects only as you need them."
msgstr ""

#: ../../ref/models/querysets.txt:71
# ccb7a85285de47a8bff74e924765af7e
msgid "**bool().** Testing a ``QuerySet`` in a boolean context, such as using ``bool()``, ``or``, ``and`` or an ``if`` statement, will cause the query to be executed. If there is at least one result, the ``QuerySet`` is ``True``, otherwise ``False``. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:79
# 3b14f28e08d1444f89b2a8b4ef190bf8
msgid "Note: *Don't* use this if all you want to do is determine if at least one result exists, and don't need the actual objects. It's more efficient to use :meth:`~QuerySet.exists` (see below)."
msgstr ""

#: ../../ref/models/querysets.txt:86
# 22b304c251bd433a86ca8a2fdebc97e5
msgid "Pickling QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:88
# f8107a18d004499198e6e91993648804
msgid "If you :mod:`pickle` a ``QuerySet``, this will force all the results to be loaded into memory prior to pickling. Pickling is usually used as a precursor to caching and when the cached queryset is reloaded, you want the results to already be present and ready for use (reading from the database can take some time, defeating the purpose of caching). This means that when you unpickle a ``QuerySet``, it contains the results at the moment it was pickled, rather than the results that are currently in the database."
msgstr ""

#: ../../ref/models/querysets.txt:96
# e79a2b9bde234f789a9df144376e432d
msgid "If you only want to pickle the necessary information to recreate the ``QuerySet`` from the database at a later time, pickle the ``query`` attribute of the ``QuerySet``. You can then recreate the original ``QuerySet`` (without any results loaded) using some code like this::"
msgstr ""

#: ../../ref/models/querysets.txt:106
# cf45c385b309457baa03f5530a3923b3
msgid "The ``query`` attribute is an opaque object. It represents the internals of the query construction and is not part of the public API. However, it is safe (and fully supported) to pickle and unpickle the attribute's contents as described here."
msgstr ""

#: ../../ref/models/querysets.txt:113
# d17197dbb03a43769a4fd6951c7fab30
msgid "Pickles of QuerySets are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy."
msgstr ""

#: ../../ref/models/querysets.txt:122
# c1bf7fa92fe34414b83d5f04b521e31d
msgid "QuerySet API"
msgstr ""

#: ../../ref/models/querysets.txt:124
# 1659afd00f3d4c50a2665b61e62c0a1d
msgid "Though you usually won't create one manually — you'll go through a :class:`~django.db.models.Manager` — here's the formal declaration of a ``QuerySet``:"
msgstr ""

#: ../../ref/models/querysets.txt:130
# 6492b277a2ba4728a18ff7313c6f3bd3
msgid "Usually when you'll interact with a ``QuerySet`` you'll use it by :ref:`chaining filters <chaining-filters>`. To make this work, most ``QuerySet`` methods return new querysets. These methods are covered in detail later in this section."
msgstr ""

#: ../../ref/models/querysets.txt:135
# a6751109f8904888a4852c9368b6123e
msgid "The ``QuerySet`` class has two public attributes you can use for introspection:"
msgstr ""

#: ../../ref/models/querysets.txt:140
# 709df05c72854cc08f7325e5e31d3cfc
msgid "``True`` if the ``QuerySet`` is ordered — i.e. has an :meth:`order_by()` clause or a default ordering on the model. ``False`` otherwise."
msgstr ""

#: ../../ref/models/querysets.txt:146
# 30038544aac6476a9a4c274ac2107198
msgid "The database that will be used if this query is executed now."
msgstr ""

#: ../../ref/models/querysets.txt:150
# dd777dc9358646f096cde59ad382c351
msgid "The ``query`` parameter to :class:`QuerySet` exists so that specialized query subclasses such as :class:`~django.contrib.gis.db.models.GeoQuerySet` can reconstruct internal query state. The value of the parameter is an opaque representation of that query state and is not part of a public API. To put it simply: if you need to ask, you don't need to use it."
msgstr ""

#: ../../ref/models/querysets.txt:160
# ba18dcc1403f4badb2578f308eaebe3f
msgid "Methods that return new QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:162
# 2a4c181d4d7e46c191330473716e5d88
msgid "Django provides a range of ``QuerySet`` refinement methods that modify either the types of results returned by the ``QuerySet`` or the way its SQL query is executed."
msgstr ""

#: ../../ref/models/querysets.txt:167
#: ../../ref/templates/builtins.txt:216
# 7cef3ca747d64a37b1d85d11a5199552
# 66860ce7da6e456595accb5967c3e88d
msgid "filter"
msgstr ""

#: ../../ref/models/querysets.txt:171
# 91251221aaf641ef8180b585bf38b831
msgid "Returns a new ``QuerySet`` containing objects that match the given lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:174
# 568727c1673b485ea61f0d7dae70f95b
msgid "The lookup parameters (``**kwargs``) should be in the format described in `Field lookups`_ below. Multiple parameters are joined via ``AND`` in the underlying SQL statement."
msgstr ""

#: ../../ref/models/querysets.txt:179
# 5b500fb460754597bf7482c5e2f670b9
msgid "exclude"
msgstr ""

#: ../../ref/models/querysets.txt:183
# 01e08bf41c394f21bbdd28423fdb3718
msgid "Returns a new ``QuerySet`` containing objects that do *not* match the given lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:186
# ed62fa7104b443dc84d2af887e0babf6
msgid "The lookup parameters (``**kwargs``) should be in the format described in `Field lookups`_ below. Multiple parameters are joined via ``AND`` in the underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""

#: ../../ref/models/querysets.txt:190
# fa58829829ce423fbade00e62cc06d11
msgid "This example excludes all entries whose ``pub_date`` is later than 2005-1-3 AND whose ``headline`` is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:195
#: ../../ref/models/querysets.txt:205
# 6c97760b4e0c42e78de1a0572aa8928e
# 494c7deb5abe4a37b0d7159c7e6dcb91
msgid "In SQL terms, that evaluates to::"
msgstr ""

#: ../../ref/models/querysets.txt:200
# 1f518be5eb554264ab74644bc05e415e
msgid "This example excludes all entries whose ``pub_date`` is later than 2005-1-3 OR whose headline is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:211
# 96020adbe4a445c1a45d64c2208387af
msgid "Note the second example is more restrictive."
msgstr ""

#: ../../ref/models/querysets.txt:214
# c5670b46253944b0a7a52b01f79af709
msgid "annotate"
msgstr ""

#: ../../ref/models/querysets.txt:218
# 32339b9111a6481db9c98c775928269b
msgid "Annotates each object in the ``QuerySet`` with the provided list of aggregate values (averages, sums, etc) that have been computed over the objects that are related to the objects in the ``QuerySet``. Each argument to ``annotate()`` is an annotation that will be added to each object in the ``QuerySet`` that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:224
#: ../../ref/models/querysets.txt:1506
# 6b0031fe02004b73b36180e6acd519fd
# 29e09c3e6bb449c8be97092b0848c99c
msgid "The aggregation functions that are provided by Django are described in `Aggregation Functions`_ below."
msgstr ""

#: ../../ref/models/querysets.txt:227
# d7319061b79e43308def409ea80caabb
msgid "Annotations specified using keyword arguments will use the keyword as the alias for the annotation. Anonymous arguments will have an alias generated for them based upon the name of the aggregate function and the model field that is being aggregated."
msgstr ""

#: ../../ref/models/querysets.txt:232
# 2bcb2d26632045979d907f8cb0ba7edf
msgid "For example, if you were manipulating a list of blogs, you may want to determine how many entries have been made in each blog::"
msgstr ""

#: ../../ref/models/querysets.txt:243
# d75d6d0ee6384f64b3f49be75a96f71b
msgid "The ``Blog`` model doesn't define an ``entry__count`` attribute by itself, but by using a keyword argument to specify the aggregate function, you can control the name of the annotation::"
msgstr ""

#: ../../ref/models/querysets.txt:252
#: ../../ref/models/querysets.txt:1526
# 1eec5e442d9b41f892e509e417f46e69
# 987ccc6352f04800beb778202429e861
msgid "For an in-depth discussion of aggregation, see :doc:`the topic guide on Aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:256
# af693e10885140e9a291c7f7b9b47e50
msgid "order_by"
msgstr ""

#: ../../ref/models/querysets.txt:260
# 92ac691c5e514d77b0bc084e38b7a432
msgid "By default, results returned by a ``QuerySet`` are ordered by the ordering tuple given by the ``ordering`` option in the model's ``Meta``. You can override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""

#: ../../ref/models/querysets.txt:268
# b7d4a5e75fdb4b9ea9e2941682333246
msgid "The result above will be ordered by ``pub_date`` descending, then by ``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` indicates *descending* order. Ascending order is implied. To order randomly, use ``\"?\"``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:275
# 1be78b230eb74151991a1e49faeb2259
msgid "Note: ``order_by('?')`` queries may be expensive and slow, depending on the database backend you're using."
msgstr ""

#: ../../ref/models/querysets.txt:278
# af9a3679807b4e7fb1e00097e6b3f0df
msgid "To order by a field in a different model, use the same syntax as when you are querying across model relations. That is, the name of the field, followed by a double underscore (``__``), followed by the name of the field in the new model, and so on for as many models as you want to join. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:285
# ce4816e070844e60a8cf74cc334608b7
msgid "If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model (or order by the related model's primary key if there is no :attr:`Meta.ordering <django.db.models.Options.ordering>` specified. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:292
# cd22cace09db45d88421c3f6b35e711e
msgid "...is identical to::"
msgstr ""

#: ../../ref/models/querysets.txt:296
# 5e898aba474842219837cef8827c5f09
msgid "...since the ``Blog`` model has no default ordering specified."
msgstr ""

#: ../../ref/models/querysets.txt:298
# ac065aebe4fe46f1bd7535f0b21e5e95
msgid "Be cautious when ordering by fields in related models if you are also using :meth:`distinct()`. See the note in :meth:`distinct` for an explanation of how related model ordering can change the expected results."
msgstr ""

#: ../../ref/models/querysets.txt:302
# badbbc2d983a4c5b8f7bd963b2dcf3aa
msgid "It is permissible to specify a multi-valued field to order the results by (for example, a :class:`~django.db.models.ManyToManyField` field). Normally this won't be a sensible thing to do and it's really an advanced usage feature. However, if you know that your queryset's filtering or available data implies that there will only be one ordering piece of data for each of the main items you are selecting, the ordering may well be exactly what you want to do. Use ordering on multi-valued fields with care and make sure the results are what you expect."
msgstr ""

#: ../../ref/models/querysets.txt:311
# 6b5ae0843ddf40a4b14c15b513472ecd
msgid "There's no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them."
msgstr ""

#: ../../ref/models/querysets.txt:315
# eb0f7590595c4085a8b580fc7dfb3f74
msgid "If you don't want any ordering to be applied to a query, not even the default ordering, call :meth:`order_by()` with no parameters."
msgstr ""

#: ../../ref/models/querysets.txt:318
# 82b51d6412994cee8645fef224c935d3
msgid "You can tell if a query is ordered or not by checking the :attr:`.QuerySet.ordered` attribute, which will be ``True`` if the ``QuerySet`` has been ordered in any way."
msgstr ""

#: ../../ref/models/querysets.txt:323
# 44f412b9955d48928c7a96fd12dc8adf
msgid "reverse"
msgstr ""

#: ../../ref/models/querysets.txt:327
# 5e7d45251f3e460b955796691b3e2ffb
msgid "Use the ``reverse()`` method to reverse the order in which a queryset's elements are returned. Calling ``reverse()`` a second time restores the ordering back to the normal direction."
msgstr ""

#: ../../ref/models/querysets.txt:331
# bfc1bc22e3a8403ebf85bdbc9e178ae3
msgid "To retrieve the ''last'' five items in a queryset, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:335
# e14eb5f307574099a38f03ebdfd7aa14
msgid "Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at ``seq[-5:]``, we would see the fifth-last item first. Django doesn't support that mode of access (slicing from the end), because it's not possible to do it efficiently in SQL."
msgstr ""

#: ../../ref/models/querysets.txt:342
# 4f62cb95c2f64773b946c6b1d8413fc2
msgid "Also, note that ``reverse()`` should generally only be called on a ``QuerySet`` which has a defined ordering (e.g., when querying against a model which defines a default ordering, or when using :meth:`order_by()`). If no such ordering is defined for a given ``QuerySet``, calling ``reverse()`` on it has no real effect (the ordering was undefined prior to calling ``reverse()``, and will remain undefined afterward)."
msgstr ""

#: ../../ref/models/querysets.txt:350
# 45918d8f1d8849fa8db5690958488098
msgid "distinct"
msgstr ""

#: ../../ref/models/querysets.txt:354
# 9ab9b4ecc0434300ba20758747115831
msgid "Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. This eliminates duplicate rows from the query results."
msgstr ""

#: ../../ref/models/querysets.txt:357
# 2c7643012ecf41b181b74a999ab55970
msgid "By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, this is rarely a problem, because simple queries such as ``Blog.objects.all()`` don't introduce the possibility of duplicate result rows. However, if your query spans multiple tables, it's possible to get duplicate results when a ``QuerySet`` is evaluated. That's when you'd use ``distinct()``."
msgstr ""

#: ../../ref/models/querysets.txt:364
# 6d33e4e175a34cc3a0c3009f87f18d9e
msgid "Any fields used in an :meth:`order_by` call are included in the SQL ``SELECT`` columns. This can sometimes lead to unexpected results when used in conjunction with ``distinct()``. If you order by fields from a related model, those fields will be added to the selected columns and they may make otherwise duplicate rows appear to be distinct. Since the extra columns don't appear in the returned results (they are only there to support ordering), it sometimes looks like non-distinct results are being returned."
msgstr ""

#: ../../ref/models/querysets.txt:372
# 04c2e4571dc54e18ae7762014bd6b017
msgid "Similarly, if you use a :meth:`values()` query to restrict the columns selected, the columns used in any :meth:`order_by()` (or default model ordering) will still be involved and may affect uniqueness of the results."
msgstr ""

#: ../../ref/models/querysets.txt:376
# 5c0c87c7a42344fa82cb44541ff23fc5
msgid "The moral here is that if you are using ``distinct()`` be careful about ordering by related models. Similarly, when using ``distinct()`` and :meth:`values()` together, be careful when ordering by fields not in the :meth:`values()` call."
msgstr ""

#: ../../ref/models/querysets.txt:383
# 2b424a6650c64f6c9538b130d122b2a6
msgid "As of Django 1.4, you can pass positional arguments (``*fields``) in order to specify the names of fields to which the ``DISTINCT`` should apply. This translates to a ``SELECT DISTINCT ON`` SQL query."
msgstr ""

#: ../../ref/models/querysets.txt:387
# 20a678dbd401473eaf72012477ac6aac
msgid "Here's the difference. For a normal ``distinct()`` call, the database compares *each* field in each row when determining which rows are distinct. For a ``distinct()`` call with specified field names, the database will only compare the specified field names."
msgstr ""

#: ../../ref/models/querysets.txt:393
# 7076e01daae241628ebf1b0204daa6a4
msgid "This ability to specify field names is only available in PostgreSQL."
msgstr ""

#: ../../ref/models/querysets.txt:396
# 917a5c57d7be49f99232ae972e2aae15
msgid "When you specify field names, you *must* provide an ``order_by()`` in the QuerySet, and the fields in ``order_by()`` must start with the fields in ``distinct()``, in the same order."
msgstr ""

#: ../../ref/models/querysets.txt:400
# b94c57ae4b104b8e9878e257298d9e15
msgid "For example, ``SELECT DISTINCT ON (a)`` gives you the first row for each value in column ``a``. If you don't specify an order, you'll get some arbitrary row."
msgstr ""

#: ../../ref/models/querysets.txt:425
# 34307e2babad471eadf9ce166bb45d10
msgid "values"
msgstr ""

#: ../../ref/models/querysets.txt:429
# 698f7f57e15a436f91514e422c7d7176
msgid "Returns a ``ValuesQuerySet`` — a ``QuerySet`` subclass that returns dictionaries when used as an iterable, rather than model-instance objects."
msgstr ""

#: ../../ref/models/querysets.txt:432
# f0315272363143c1a2735b13834022b8
msgid "Each of those dictionaries represents an object, with the keys corresponding to the attribute names of model objects."
msgstr ""

#: ../../ref/models/querysets.txt:435
# 1f449684bd9e4f7b9a5beac43cb22ed8
msgid "This example compares the dictionaries of ``values()`` with the normal model objects::"
msgstr ""

#: ../../ref/models/querysets.txt:446
# 83c4a7506a7144d7aeb87f6db136a7cd
msgid "The ``values()`` method takes optional positional arguments, ``*fields``, which specify field names to which the ``SELECT`` should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify. If you don't specify the fields, each dictionary will contain a key and value for every field in the database table."
msgstr ""

#: ../../ref/models/querysets.txt:459
# 875b376eede94dc082a0cc46fd738258
msgid "A few subtleties that are worth mentioning:"
msgstr ""

#: ../../ref/models/querysets.txt:461
# e0b90d346e6b420a8f68de3bac76f2d2
msgid "If you have a field called ``foo`` that is a :class:`~django.db.models.ForeignKey`, the default ``values()`` call will return a dictionary key called ``foo_id``, since this is the name of the hidden model attribute that stores the actual value (the ``foo`` attribute refers to the related model). When you are calling ``values()`` and passing in field names, you can pass in either ``foo`` or ``foo_id`` and you will get back the same thing (the dictionary key will match the field name you passed in)."
msgstr ""

#: ../../ref/models/querysets.txt:481
# 7e0d403beef64622b81e027b17a97cdf
msgid "When using ``values()`` together with :meth:`distinct()`, be aware that ordering can affect the results. See the note in :meth:`distinct` for details."
msgstr ""

#: ../../ref/models/querysets.txt:485
# 7e871b3695534c93bdd0959b45e0e137
msgid "If you use a ``values()`` clause after an :meth:`extra()` call, any fields defined by a ``select`` argument in the :meth:`extra()` must be explicitly included in the ``values()`` call. Any :meth:`extra()` call made after a ``values()`` call will have its extra selected fields ignored."
msgstr ""

#: ../../ref/models/querysets.txt:491
# 596f578591ed4e539a2bfd4e0b0e18db
msgid "A ``ValuesQuerySet`` is useful when you know you're only going to need values from a small number of the available fields and you won't need the functionality of a model instance object. It's more efficient to select only the fields you need to use."
msgstr ""

#: ../../ref/models/querysets.txt:496
# ae5254518a4c4117951f29f66319151e
msgid "Finally, note a ``ValuesQuerySet`` is a subclass of ``QuerySet``, so it has all methods of ``QuerySet``. You can call ``filter()`` on it, or ``order_by()``, or whatever. Yes, that means these two calls are identical::"
msgstr ""

#: ../../ref/models/querysets.txt:503
# 44a79fc67ccb4960a8d1c7cf95931c14
msgid "The people who made Django prefer to put all the SQL-affecting methods first, followed (optionally) by any output-affecting methods (such as ``values()``), but it doesn't really matter. This is your chance to really flaunt your individualism."
msgstr ""

#: ../../ref/models/querysets.txt:508
# fedba2aacaef4cbe9b59e53ec2fd1d8c
msgid "You can also refer to fields on related models with reverse relations through ``OneToOneField``, ``ForeignKey`` and ``ManyToManyField`` attributes::"
msgstr ""

#: ../../ref/models/querysets.txt:517
# e42ab0da97624f67b08ae527c6374651
msgid "Because :class:`~django.db.models.ManyToManyField` attributes and reverse relations can have multiple related rows, including these can have a multiplier effect on the size of your result set. This will be especially pronounced if you include multiple such fields in your ``values()`` query, in which case all possible combinations will be returned."
msgstr ""

#: ../../ref/models/querysets.txt:524
# 0acc27f682b1439fb065c7caa8ba4be0
msgid "values_list"
msgstr ""

#: ../../ref/models/querysets.txt:528
# 9f11eb2f8249451db2b2a5be2413b8f0
msgid "This is similar to ``values()`` except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field passed into the ``values_list()`` call — so the first item is the first field, etc. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:536
# e4af89d40d414c3289decf3c57fa09c8
msgid "If you only pass in a single field, you can also pass in the ``flat`` parameter. If ``True``, this will mean the returned results are single values, rather than one-tuples. An example should make the difference clearer::"
msgstr ""

#: ../../ref/models/querysets.txt:546
# d0fcb8d6a68148ada66f4423f2a6bd2c
msgid "It is an error to pass in ``flat`` when there is more than one field."
msgstr ""

#: ../../ref/models/querysets.txt:548
# f666f0cf7d074ffa87cb40ea73c8d920
msgid "If you don't pass any values to ``values_list()``, it will return all the fields in the model, in the order they were declared."
msgstr ""

#: ../../ref/models/querysets.txt:552
# 041aef2b3fc54d0db90bf0f54556c766
msgid "dates"
msgstr ""

#: ../../ref/models/querysets.txt:556
# cd61416547cd45c292c0b70d7dcbff56
msgid "Returns a ``DateQuerySet`` — a ``QuerySet`` that evaluates to a list of ``datetime.datetime`` objects representing all available dates of a particular kind within the contents of the ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:560
# c0f01493fe5f45c0b5b7a226f4222e96
msgid "``field`` should be the name of a ``DateField`` or ``DateTimeField`` of your model."
msgstr ""

#: ../../ref/models/querysets.txt:563
# 27a5737a33f04d2a90adad1f0d8cbbe4
msgid "``kind`` should be either ``\"year\"``, ``\"month\"`` or ``\"day\"``. Each ``datetime.datetime`` object in the result list is \"truncated\" to the given ``type``."
msgstr ""

#: ../../ref/models/querysets.txt:567
# 277a235368b440158de6d012360531df
msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:568
# 0de3720c619a46f08b244c9915b099c0
msgid "``\"month\"`` returns a list of all distinct year/month values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:570
# 0bb9403b26cf408097d78be66c5f79ff
msgid "``\"day\"`` returns a list of all distinct year/month/day values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:573
# d00e218cf893447aa2e816fa487792f7
msgid "``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or ``'DESC'``. This specifies how to order the results."
msgstr ""

#: ../../ref/models/querysets.txt:591
# 1dc7ad69caaf46e091b63030a507fbce
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled, Django uses UTC in the database connection, which means the aggregation is performed in UTC. This is a known limitation of the current implementation."
msgstr ""

#: ../../ref/models/querysets.txt:596
# 8997f3b6dc9647b4817ff3938d1433eb
msgid "none"
msgstr ""

#: ../../ref/models/querysets.txt:600
# 76bfddb4bf76464fbb564d6e5f8a10c1
msgid "Returns an ``EmptyQuerySet`` — a ``QuerySet`` subclass that always evaluates to an empty list. This can be used in cases where you know that you should return an empty result set and your caller is expecting a ``QuerySet`` object (instead of returning an empty list, for example.)"
msgstr ""

#: ../../ref/models/querysets.txt:611
# 4d970feedfbc460f978d9a9dd6572695
msgid "all"
msgstr ""

#: ../../ref/models/querysets.txt:615
# 51359fa9b34d40398f25982027f09f1e
msgid "Returns a *copy* of the current ``QuerySet`` (or ``QuerySet`` subclass).  This can be useful in situations where you might want to pass in either a model manager or a ``QuerySet`` and do further filtering on the result. After calling ``all()`` on either object, you'll definitely have a ``QuerySet`` to work with."
msgstr ""

#: ../../ref/models/querysets.txt:621
# 5fc3b55c13384f299b1c1b21ea7d0769
msgid "select_related"
msgstr ""

#: ../../ref/models/querysets.txt:625
# 1c8412011124491094ef50c493f7bee1
msgid "Returns a ``QuerySet`` that will automatically \"follow\" foreign-key relationships, selecting that additional related-object data when it executes its query. This is a performance booster which results in (sometimes much) larger queries but means later use of foreign-key relationships won't require database queries."
msgstr ""

#: ../../ref/models/querysets.txt:631
# 23a6b9582b554bbba75773d12da14cfa
msgid "The following examples illustrate the difference between plain lookups and ``select_related()`` lookups. Here's standard lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:640
# ea4c63e8f7e74826a6647cd259446334
msgid "And here's ``select_related`` lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:649
# 4fde9a27315a45dfa67cf09e38de52ed
msgid "``select_related()`` follows foreign keys as far as possible. If you have the following models::"
msgstr ""

#: ../../ref/models/querysets.txt:664
# 75a91fec54014c2e97598860d57e7254
msgid "...then a call to ``Book.objects.select_related().get(id=4)`` will cache the related ``Person`` *and* the related ``City``::"
msgstr ""

#: ../../ref/models/querysets.txt:675
# 5618a134e17247039c8f1b0176e5c8c8
msgid "Note that, by default, ``select_related()`` does not follow foreign keys that have ``null=True``."
msgstr ""

#: ../../ref/models/querysets.txt:678
# 3a9dd24d8c6c45a7bcd57efbc14bc41c
msgid "Usually, using ``select_related()`` can vastly improve performance because your app can avoid many database calls. However, there are times you are only interested in specific related models, or have deeply nested sets of relationships, and in these cases ``select_related()`` can be optimized by explicitly passing the related field names you are interested in. Only the specified relations will be followed."
msgstr ""

#: ../../ref/models/querysets.txt:685
# 796f81d678804766a3f63e0355c21732
msgid "You can even do this for models that are more than one relation away by separating the field names with double underscores, just as for filters. For example, if you have this model::"
msgstr ""

#: ../../ref/models/querysets.txt:699
# 967ac6418fe940a6a68517153665161e
msgid "...and you only needed to work with the ``room`` and ``subject`` attributes, you could write this::"
msgstr ""

#: ../../ref/models/querysets.txt:704
# 7349941a1b0a40f2b3cbb50167092b66
msgid "This is also valid::"
msgstr ""

#: ../../ref/models/querysets.txt:708
# 0b31109577204540bb0da02ec31cee49
msgid "...and would also pull in the ``building`` relation."
msgstr ""

#: ../../ref/models/querysets.txt:710
# ebcab2e2714f450abb862f19ff1e4c76
msgid "You can refer to any :class:`~django.db.models.ForeignKey` or :class:`~django.db.models.OneToOneField` relation in the list of fields passed to ``select_related()``. This includes foreign keys that have ``null=True`` (which are omitted in a no-parameter ``select_related()`` call). It's an error to use both a list of fields and the ``depth`` parameter in the same ``select_related()`` call; they are conflicting options."
msgstr ""

#: ../../ref/models/querysets.txt:717
# 4c95775a16d943cc830edca10032ee0b
msgid "You can also refer to the reverse direction of a :class:`~django.db.models.OneToOneField` in the list of fields passed to ``select_related`` — that is, you can traverse a :class:`~django.db.models.OneToOneField` back to the object on which the field is defined. Instead of specifying the field name, use the :attr:`related_name <django.db.models.ForeignKey.related_name>` for the field on the related object."
msgstr ""

#: ../../ref/models/querysets.txt:729
# 13811569632c40369b796219515784d2
msgid "A depth limit of relationships to follow can also be specified::"
msgstr ""

#: ../../ref/models/querysets.txt:735
# a9450c3f26614ec4bf4dfa6af63fd12b
msgid "A :class:`~django.db.models.OneToOneField` is not traversed in the reverse direction if you are performing a depth-based ``select_related()`` call."
msgstr ""

#: ../../ref/models/querysets.txt:739
# 0fe6c3a9caed4ff79d32697c5da36db6
msgid "prefetch_related"
msgstr ""

#: ../../ref/models/querysets.txt:745
# dbaab01aa62442c1925a6b61e1b8e11a
msgid "Returns a ``QuerySet`` that will automatically retrieve, in a single batch, related objects for each of the specified lookups."
msgstr ""

#: ../../ref/models/querysets.txt:748
# 04d94f665f2843af997ddf3490c8b53a
msgid "This has a similar purpose to ``select_related``, in that both are designed to stop the deluge of database queries that is caused by accessing related objects, but the strategy is quite different."
msgstr ""

#: ../../ref/models/querysets.txt:752
# 7bcef85f81dc49d5a5ba5bef97b16fad
msgid "``select_related`` works by creating a SQL join and including the fields of the related object in the SELECT statement. For this reason, ``select_related`` gets the related objects in the same database query. However, to avoid the much larger result set that would result from joining across a 'many' relationship, ``select_related`` is limited to single-valued relationships - foreign key and one-to-one."
msgstr ""

#: ../../ref/models/querysets.txt:759
# a33b53afdddd45ba825309ba3731d34e
msgid "``prefetch_related``, on the other hand, does a separate lookup for each relationship, and does the 'joining' in Python. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using ``select_related``, in addition to the foreign key and one-to-one relationships that are supported by ``select_related``. It also supports prefetching of :class:`~django.contrib.contenttypes.generic.GenericRelation` and :class:`~django.contrib.contenttypes.generic.GenericForeignKey`."
msgstr ""

#: ../../ref/models/querysets.txt:767
# bb491e1638bc4f77a5e4068f9d99b5a5
msgid "For example, suppose you have these models::"
msgstr ""

#: ../../ref/models/querysets.txt:780
# a65358fd24174b29ab19e03cf36f8bb1
msgid "and run this code::"
msgstr ""

#: ../../ref/models/querysets.txt:785
# a4967a63bb9a4579a6b81ff45f8f6256
msgid "The problem with this code is that it will run a query on the Toppings table for **every** item in the Pizza ``QuerySet``.  Using ``prefetch_related``, this can be reduced to two:"
msgstr ""

#: ../../ref/models/querysets.txt:791
# fc2e0c58182041408bbe97d639b4b204
msgid "All the relevant toppings will be fetched in a single query, and used to make ``QuerySets`` that have a pre-filled cache of the relevant results. These ``QuerySets`` are then used in the ``self.toppings.all()`` calls."
msgstr ""

#: ../../ref/models/querysets.txt:795
# bd3855aba5ad41babf9ae644940f864b
msgid "The additional queries are executed after the QuerySet has begun to be evaluated and the primary query has been executed. Note that the result cache of the primary QuerySet and all specified related objects will then be fully loaded into memory, which is often avoided in other cases - even after a query has been executed in the database, QuerySet normally tries to make uses of chunking between the database to avoid loading all objects into memory before you need them."
msgstr ""

#: ../../ref/models/querysets.txt:803
# 90b8ae96ff5b4357aa80768d9ea494ee
msgid "Also remember that, as always with QuerySets, any subsequent chained methods which imply a different database query will ignore previously cached results, and retrieve data using a fresh database query. So, if you write the following:"
msgstr ""

#: ../../ref/models/querysets.txt:810
# 08f3a8ad1c0844e1bdaa3fb6c17fa962
msgid "...then the fact that ``pizza.toppings.all()`` has been prefetched will not help you - in fact it hurts performance, since you have done a database query that you haven't used. So use this feature with caution!"
msgstr ""

#: ../../ref/models/querysets.txt:814
# fc3d0b39f4ad43d8b3b95fee745fc556
msgid "You can also use the normal join syntax to do related fields of related fields. Suppose we have an additional model to the example above::"
msgstr ""

#: ../../ref/models/querysets.txt:821
# 5f1a62c9c3dd4b88a0a69c3f3106e63f
msgid "The following are all legal:"
msgstr ""

#: ../../ref/models/querysets.txt:825
# d728b3de997c44dd817d7cb0bf22b093
msgid "This will prefetch all pizzas belonging to restaurants, and all toppings belonging to those pizzas. This will result in a total of 3 database queries - one for the restaurants, one for the pizzas, and one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:831
# a9376ab7f10444699423d6b049110a82
msgid "This will fetch the best pizza and all the toppings for the best pizza for each restaurant. This will be done in 3 database queries - one for the restaurants, one for the 'best pizzas', and one for one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:835
# 33822759ba2f474eaa5d4da01be17056
msgid "Of course, the ``best_pizza`` relationship could also be fetched using ``select_related`` to reduce the query count to 2:"
msgstr ""

#: ../../ref/models/querysets.txt:840
# 52eafff5897547198dea7afe22fdc3d2
msgid "Since the prefetch is executed after the main query (which includes the joins needed by ``select_related``), it is able to detect that the ``best_pizza`` objects have already been fetched, and it will skip fetching them again."
msgstr ""

#: ../../ref/models/querysets.txt:844
# 3df38e5096cb4b718ad0173b86bffe02
msgid "Chaining ``prefetch_related`` calls will accumulate the lookups that are prefetched. To clear any ``prefetch_related`` behavior, pass `None` as a parameter::"
msgstr ""

#: ../../ref/models/querysets.txt:850
# eae806191bb44ae7864be15d0e6bb7c5
msgid "One difference to note when using ``prefetch_related`` is that objects created by a query can be shared between the different objects that they are related to i.e. a single Python model instance can appear at more than one point in the tree of objects that are returned. This will normally happen with foreign key relationships. Typically this behavior will not be a problem, and will in fact save both memory and CPU time."
msgstr ""

#: ../../ref/models/querysets.txt:857
# 6381cd8a8a62477e9f8651726319ab9c
msgid "While ``prefetch_related`` supports prefetching ``GenericForeignKey`` relationships, the number of queries will depend on the data. Since a ``GenericForeignKey`` can reference data in multiple tables, one query per table referenced is needed, rather than one query for all the items. There could be additional queries on the ``ContentType`` table if the relevant rows have not already been fetched."
msgstr ""

#: ../../ref/models/querysets.txt:864
# 28dc3d9a6d2d48b48b02de36e6256ff1
msgid "``prefetch_related`` in most cases will be implemented using a SQL query that uses the 'IN' operator. This means that for a large QuerySet a large 'IN' clause could be generated, which, depending on the database, might have performance problems of its own when it comes to parsing or executing the SQL query. Always profile for your use case!"
msgstr ""

#: ../../ref/models/querysets.txt:870
# b093883c213e4909ae3b235b7dab6ba9
msgid "Note that if you use ``iterator()`` to run the query, ``prefetch_related()`` calls will be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:874
# 4763ffcd13ed4e80ab3c6a97442b7c98
msgid "extra"
msgstr ""

#: ../../ref/models/querysets.txt:878
# 7a7f382d8e3545a9aa8d0fabb13b722c
msgid "Sometimes, the Django query syntax by itself can't easily express a complex ``WHERE`` clause. For these edge cases, Django provides the ``extra()`` ``QuerySet`` modifier — a hook for injecting specific clauses into the SQL generated by a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:883
# 39b0c0fe26434ae4970176a05c217807
msgid "By definition, these extra lookups may not be portable to different database engines (because you're explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible."
msgstr ""

#: ../../ref/models/querysets.txt:887
# 10093cfcad7d4f14977b5fb24a887d0e
msgid "Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None of the arguments is required, but you should use at least one of them."
msgstr ""

#: ../../ref/models/querysets.txt:890
# 14bec1fe757d48fb981ea87fb810d1b6
msgid "``select``"
msgstr ""

#: ../../ref/models/querysets.txt:892
# efbd4825b07b4219a6390fc49f6ebc4c
msgid "The ``select`` argument lets you put extra fields in the ``SELECT`` clause.  It should be a dictionary mapping attribute names to SQL clauses to use to calculate that attribute."
msgstr ""

#: ../../ref/models/querysets.txt:900
# c2b30c2e532546e9a6175c3066d6b133
msgid "As a result, each ``Entry`` object will have an extra attribute, ``is_recent``, a boolean representing whether the entry's ``pub_date`` is greater than Jan. 1, 2006."
msgstr ""

#: ../../ref/models/querysets.txt:904
# e6aab5995fab4bc6a63e698686a7c87a
msgid "Django inserts the given SQL snippet directly into the ``SELECT`` statement, so the resulting SQL of the above example would be something like::"
msgstr ""

#: ../../ref/models/querysets.txt:912
# 0ae424d02883492aa7471c1a0bae8179
msgid "The next example is more advanced; it does a subquery to give each resulting ``Blog`` object an ``entry_count`` attribute, an integer count of associated ``Entry`` objects::"
msgstr ""

#: ../../ref/models/querysets.txt:922
# 688a6290259942c99bb8333686453805
msgid "In this particular case, we're exploiting the fact that the query will already contain the ``blog_blog`` table in its ``FROM`` clause."
msgstr ""

#: ../../ref/models/querysets.txt:925
# 6cefabdbb68f4f63a0112ab313b97846
msgid "The resulting SQL of the above example would be::"
msgstr ""

#: ../../ref/models/querysets.txt:930
# e8495fa0074e49c0859644b86549d586
msgid "Note that the parentheses required by most database engines around subqueries are not required in Django's ``select`` clauses. Also note that some database backends, such as some MySQL versions, don't support subqueries."
msgstr ""

#: ../../ref/models/querysets.txt:935
# 28ee05eed6e340cb9c161295a952f3ca
msgid "In some rare cases, you might wish to pass parameters to the SQL fragments in ``extra(select=...)``. For this purpose, use the ``select_params`` parameter. Since ``select_params`` is a sequence and the ``select`` attribute is a dictionary, some care is required so that the parameters are matched up correctly with the extra select pieces. In this situation, you should use a :class:`django.utils.datastructures.SortedDict` for the ``select`` value, not just a normal Python dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:944
# b82316ec47f1490fa637c07e5ab4b372
msgid "This will work, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:950
# 76cbe90c931f487e99d3cd2a430abdbc
msgid "The only thing to be careful about when using select parameters in ``extra()`` is to avoid using the substring ``\"%%s\"`` (that's *two* percent characters before the ``s``) in the select strings. Django's tracking of parameters looks for ``%s`` and an escaped ``%`` character like this isn't detected. That will lead to incorrect results."
msgstr ""

#: ../../ref/models/querysets.txt:956
# e3334483fca4404ab06acdef4f6010f1
msgid "``where`` / ``tables``"
msgstr ""

#: ../../ref/models/querysets.txt:958
# b7e60cedd9f945df86fd9e957e782669
msgid "You can define explicit SQL ``WHERE`` clauses — perhaps to perform non-explicit joins — by using ``where``. You can manually add tables to the SQL ``FROM`` clause by using ``tables``."
msgstr ""

#: ../../ref/models/querysets.txt:962
# a16aebc3a13a43ffb1dbdc594cae8db5
msgid "``where`` and ``tables`` both take a list of strings. All ``where`` parameters are \"AND\"ed to any other search criteria."
msgstr ""

#: ../../ref/models/querysets.txt:969
# 9620701f0c9044528cc7f54cc7dafa7b
msgid "...translates (roughly) into the following SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:973
# d0e1d7424c00400a92217764149a5a05
msgid "Be careful when using the ``tables`` parameter if you're specifying tables that are already used in the query. When you add extra tables via the ``tables`` parameter, Django assumes you want that table included an extra time, if it is already included. That creates a problem, since the table name will then be given an alias. If a table appears multiple times in an SQL statement, the second and subsequent occurrences must use aliases so the database can tell them apart. If you're referring to the extra table you added in the extra ``where`` parameter this is going to cause errors."
msgstr ""

#: ../../ref/models/querysets.txt:983
# 8a22311cc6bf42b5a66eeda00545e2cf
msgid "Normally you'll only be adding extra tables that don't already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn't possible, put your ``extra()`` call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your ``where`` addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change."
msgstr ""

#: ../../ref/models/querysets.txt:994
# 907b1af8e3e6462786e6130aa88f5bec
msgid "``order_by``"
msgstr ""

#: ../../ref/models/querysets.txt:996
# c8ab9ebb317743b4a33b8ce595c6f28a
msgid "If you need to order the resulting queryset using some of the new fields or tables you have included via ``extra()`` use the ``order_by`` parameter to ``extra()`` and pass in a sequence of strings. These strings should either be model fields (as in the normal :meth:`order_by()` method on querysets), of the form ``table_name.column_name`` or an alias for a column that you specified in the ``select`` parameter to ``extra()``."
msgstr ""

#: ../../ref/models/querysets.txt:1009
# e2ebbf7ba9c64959a6738645b5019cc4
msgid "This would sort all the items for which ``is_recent`` is true to the front of the result set (``True`` sorts before ``False`` in a descending ordering)."
msgstr ""

#: ../../ref/models/querysets.txt:1013
# 7975556c68c341ce8db65fc4bfa884f2
msgid "This shows, by the way, that you can make multiple calls to ``extra()`` and it will behave as you expect (adding new constraints each time)."
msgstr ""

#: ../../ref/models/querysets.txt:1016
# 43ac8aa38d464b498d2c0ab83421da34
msgid "``params``"
msgstr ""

#: ../../ref/models/querysets.txt:1018
# 8f646f47caa1402184012a3f69a41250
msgid "The ``where`` parameter described above may use standard Python database string placeholders — ``'%s'`` to indicate parameters the database engine should automatically quote. The ``params`` argument is a list of any extra parameters to be substituted."
msgstr ""

#: ../../ref/models/querysets.txt:1027
# 3af4829e53204a5ca4f35deb5d25a5de
msgid "Always use ``params`` instead of embedding values directly into ``where`` because ``params`` will ensure values are quoted correctly according to your particular backend. For example, quotes will be escaped correctly."
msgstr ""

#: ../../ref/models/querysets.txt:1032
# 3fe80e9832e245b5a26b841c999a663c
msgid "Bad::"
msgstr ""

#: ../../ref/models/querysets.txt:1036
# 4872ba97abc7414ebc77aa01306d2f9c
msgid "Good::"
msgstr ""

#: ../../ref/models/querysets.txt:1041
# 3be0bce155b54a9f9ef9450514e4a5a9
msgid "defer"
msgstr ""

#: ../../ref/models/querysets.txt:1045
# eadba51c9bff4268a91222bcce85eef8
msgid "In some complex data-modeling situations, your models might contain a lot of fields, some of which could contain a lot of data (for example, text fields), or require expensive processing to convert them to Python objects. If you are using the results of a queryset in some situation where you don't know if you need those particular fields when you initially fetch the data, you can tell Django not to retrieve them from the database."
msgstr ""

#: ../../ref/models/querysets.txt:1052
# 1e369b7a64c646c88de0ca51d93ed848
msgid "This is done by passing the names of the fields to not load to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1056
# 02e9192b6e1b40028116bd458667a405
msgid "A queryset that has deferred fields will still return model instances. Each deferred field will be retrieved from the database if you access that field (one at a time, not all the deferred fields at once)."
msgstr ""

#: ../../ref/models/querysets.txt:1060
# 2b7a6f9258e845f8a61b2c8219133b57
msgid "You can make multiple calls to ``defer()``. Each call adds new fields to the deferred set::"
msgstr ""

#: ../../ref/models/querysets.txt:1066
# 764065c2614b4082a394c9cbc96026fa
msgid "The order in which fields are added to the deferred set does not matter. Calling ``defer()`` with a field name that has already been deferred is harmless (the field will still be deferred)."
msgstr ""

#: ../../ref/models/querysets.txt:1070
# 63610a12ca4449709fd7d14388bcb83e
msgid "You can defer loading of fields in related models (if the related models are loading via :meth:`select_related()`) by using the standard double-underscore notation to separate related fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1076
# 515583224b1e4e83a1308243f65c3c01
msgid "If you want to clear the set of deferred fields, pass ``None`` as a parameter to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1084
# 58f1028e4a714c009bf72d5372052a71
msgid "Some fields in a model won't be deferred, even if you ask for them. You can never defer the loading of the primary key. If you are using :meth:`select_related()` to retrieve related models, you shouldn't defer the loading of the field that connects from the primary model to the related one, doing so will result in an error."
msgstr ""

#: ../../ref/models/querysets.txt:1092
# 93508cb670aa4998b8ff22e4d19e1495
msgid "The ``defer()`` method (and its cousin, :meth:`only()`, below) are only for advanced use-cases. They provide an optimization for when you have analyzed your queries closely and understand *exactly* what information you need and have measured that the difference between returning the fields you need and the full set of fields for the model will be significant."
msgstr ""

#: ../../ref/models/querysets.txt:1098
# 4a5169b0994e4b63b1fcba9818d8cd08
msgid "Even if you think you are in the advanced use-case situation, **only use defer() when you cannot, at queryset load time, determine if you will need the extra fields or not**. If you are frequently loading and using a particular subset of your data, the best choice you can make is to normalize your models and put the non-loaded data into a separate model (and database table). If the columns *must* stay in the one table for some reason, create a model with ``Meta.managed = False`` (see the :attr:`managed attribute <django.db.models.Options.managed>` documentation) containing just the fields you normally need to load and use that where you might otherwise call ``defer()``. This makes your code more explicit to the reader, is slightly faster and consumes a little less memory in the Python process."
msgstr ""

#: ../../ref/models/querysets.txt:1115
#: ../../ref/models/querysets.txt:1167
# 9a70ee5e0ede47a3bd74217ee2a1f35a
# a5e34c31f186416d9883e17b75f2f52d
msgid "When calling :meth:`~Model.save()` for instances with deferred fields, only the loaded fields will be saved. See :meth:`~Model.save()` for more details."
msgstr ""

#: ../../ref/models/querysets.txt:1121
# 7eff3cf888884002897c9e3f898e4d68
msgid "only"
msgstr ""

#: ../../ref/models/querysets.txt:1125
# 3cf383fa6afc411ebb2a20a109d6af15
msgid "The ``only()`` method is more or less the opposite of :meth:`defer()`. You call it with the fields that should *not* be deferred when retrieving a model.  If you have a model where almost all the fields need to be deferred, using ``only()`` to specify the complementary set of fields can result in simpler code."
msgstr ""

#: ../../ref/models/querysets.txt:1131
# 6b36cf91ae874a93b3d8ec59f6c6b503
msgid "Suppose you have a model with fields ``name``, ``age`` and ``biography``. The following two querysets are the same, in terms of deferred fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1137
# 9a81ba5c5c614402b09fe0fc6778e324
msgid "Whenever you call ``only()`` it *replaces* the set of fields to load immediately. The method's name is mnemonic: **only** those fields are loaded immediately; the remainder are deferred. Thus, successive calls to ``only()`` result in only the final fields being considered::"
msgstr ""

#: ../../ref/models/querysets.txt:1145
# 898526f14e284bdb95eb22e2be203b11
msgid "Since ``defer()`` acts incrementally (adding fields to the deferred list), you can combine calls to ``only()`` and ``defer()`` and things will behave logically::"
msgstr ""

#: ../../ref/models/querysets.txt:1158
# 39ee92a04007478688fdcda21a4c5395
msgid "All of the cautions in the note for the :meth:`defer` documentation apply to ``only()`` as well. Use it cautiously and only after exhausting your other options. Also note that using :meth:`only` and omitting a field requested using :meth:`select_related` is an error as well."
msgstr ""

#: ../../ref/models/querysets.txt:1172
# 874e46e8124545e1a352234d2e7c341d
msgid "using"
msgstr ""

#: ../../ref/models/querysets.txt:1176
# 71c3c42d9f524917a921059c21b61bb7
msgid "This method is for controlling which database the ``QuerySet`` will be evaluated against if you are using more than one database.  The only argument this method takes is the alias of a database, as defined in :setting:`DATABASES`."
msgstr ""

#: ../../ref/models/querysets.txt:1190
# ca05294c04384655b907e8a2100b879c
msgid "select_for_update"
msgstr ""

#: ../../ref/models/querysets.txt:1196
# 4fd071af7c1c4dec8aab182f0e6316ef
msgid "Returns a queryset that will lock rows until the end of the transaction, generating a ``SELECT ... FOR UPDATE`` SQL statement on supported databases."
msgstr ""

#: ../../ref/models/querysets.txt:1203
# 7309426109ae4a718227865d2df4b34e
msgid "All matched entries will be locked until the end of the transaction block, meaning that other transactions will be prevented from changing or acquiring locks on them."
msgstr ""

#: ../../ref/models/querysets.txt:1207
# 568efd976ff943b9833f71c122b1fcc0
msgid "Usually, if another transaction has already acquired a lock on one of the selected rows, the query will block until the lock is released. If this is not the behavior you want, call ``select_for_update(nowait=True)``. This will make the call non-blocking. If a conflicting lock is already acquired by another transaction, :exc:`~django.db.DatabaseError` will be raised when the queryset is evaluated."
msgstr ""

#: ../../ref/models/querysets.txt:1214
# 8419645928964218a81725262f1059ce
msgid "Note that using ``select_for_update()`` will cause the current transaction to be considered dirty, if under transaction management. This is to ensure that Django issues a ``COMMIT`` or ``ROLLBACK``, releasing any locks held by the ``SELECT FOR UPDATE``."
msgstr ""

#: ../../ref/models/querysets.txt:1219
# d86cf38a51c143999b68d5a5352cb703
msgid "Currently, the ``postgresql_psycopg2``, ``oracle``, and ``mysql`` database backends support ``select_for_update()``. However, MySQL has no support for the ``nowait`` argument. Obviously, users of external third-party backends should check with their backend's documentation for specifics in those cases."
msgstr ""

#: ../../ref/models/querysets.txt:1224
# b30ae666839c48049d0252691ce3cffe
msgid "Passing ``nowait=True`` to ``select_for_update`` using database backends that do not support ``nowait``, such as MySQL, will cause a :exc:`~django.db.DatabaseError` to be raised. This is in order to prevent code unexpectedly blocking."
msgstr ""

#: ../../ref/models/querysets.txt:1229
# 1f7ebf1e2aaa42b9a02004ed2c7a2ab6
msgid "Using ``select_for_update`` on backends which do not support ``SELECT ... FOR UPDATE`` (such as SQLite) will have no effect."
msgstr ""

#: ../../ref/models/querysets.txt:1233
# afcfd6c6539641568e7267b45d198144
msgid "Methods that do not return QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:1235
# 8f824b3ad89a40128856ac1bb36b1286
msgid "The following ``QuerySet`` methods evaluate the ``QuerySet`` and return something *other than* a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:1238
# e44eaba353b34c3aa991ef33b802106e
msgid "These methods do not use a cache (see :ref:`caching-and-querysets`). Rather, they query the database each time they're called."
msgstr ""

#: ../../ref/models/querysets.txt:1242
# 7ffcf16f659c4d148cab3d011cb1de2c
msgid "get"
msgstr ""

#: ../../ref/models/querysets.txt:1246
# c4d0744cb71747c1b0d5eefe3aed24a4
msgid "Returns the object matching the given lookup parameters, which should be in the format described in `Field lookups`_."
msgstr ""

#: ../../ref/models/querysets.txt:1249
# 84786f22436d409d8c1893e1e21c044e
msgid "``get()`` raises :exc:`~django.core.exceptions.MultipleObjectsReturned` if more than one object was found. The :exc:`~django.core.excpetions.MultipleObjectsReturned` exception is an attribute of the model class."
msgstr ""

#: ../../ref/models/querysets.txt:1254
# 43b0dbe0ee3f4a73a387b661f7a69584
msgid "``get()`` raises a :exc:`~django.core.exceptions.DoesNotExist` exception if an object wasn't found for the given parameters. This exception is also an attribute of the model class. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1260
# 8ee0ca7170f944379addb30834c18786
msgid "The :exc:`~django.core.exceptions.DoesNotExist` exception inherits from :exc:`django.core.exceptions.ObjectDoesNotExist`, so you can target multiple :exc:`~django.core.exceptions.DoesNotExist` exceptions. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1272
# 5a816e279ca9453288b6711c5882f528
msgid "create"
msgstr ""

#: ../../ref/models/querysets.txt:1276
# 0563d45572e744a4b5540f399746ace7
msgid "A convenience method for creating an object and saving it all in one step.  Thus::"
msgstr ""

#: ../../ref/models/querysets.txt:1280
# bfb3e1920e4f416d984e6af0ce666fee
msgid "and::"
msgstr ""

#: ../../ref/models/querysets.txt:1285
# aaffd2990ed743d0adb8379e2b794eda
msgid "are equivalent."
msgstr ""

#: ../../ref/models/querysets.txt:1287
# a5dac26617a2470ba3f4f5b934b753b9
msgid "The :ref:`force_insert <ref-models-force-insert>` parameter is documented elsewhere, but all it means is that a new object will always be created. Normally you won't need to worry about this. However, if your model contains a manual primary key value that you set and if that value already exists in the database, a call to ``create()`` will fail with an :exc:`~django.db.IntegrityError` since primary keys must be unique. Be prepared to handle the exception if you are using manual primary keys."
msgstr ""

#: ../../ref/models/querysets.txt:1296
# d3a16650ae4941b8bc0eca7d6fa22e3e
msgid "get_or_create"
msgstr ""

#: ../../ref/models/querysets.txt:1300
# 46d46b280ca14977bfff1a9e11eec874
msgid "A convenience method for looking up an object with the given kwargs, creating one if necessary."
msgstr ""

#: ../../ref/models/querysets.txt:1303
# e058418191ce440c87f89e4eeb30b6e9
msgid "Returns a tuple of ``(object, created)``, where ``object`` is the retrieved or created object and ``created`` is a boolean specifying whether a new object was created."
msgstr ""

#: ../../ref/models/querysets.txt:1307
# 7c22fa474f844570908d82fc14f77502
msgid "This is meant as a shortcut to boilerplatish code and is mostly useful for data-import scripts. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1316
# bfd5a7777e6a42e9a26969a38944cb4f
msgid "This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using ``get_or_create()`` like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1322
# 9f5bc7bc0d8a4c5ab9eb51b759208cc0
msgid "Any keyword arguments passed to ``get_or_create()`` — *except* an optional one called ``defaults`` — will be used in a :meth:`get()` call. If an object is found, ``get_or_create()`` returns a tuple of that object and ``False``. If multiple objects are found, ``get_or_create`` raises :exc:`~django.core.exceptions.MultipleObjectsReturned`. If an object is *not* found, ``get_or_create()`` will instantiate and save a new object, returning a tuple of the new object and ``True``. The new object will be created roughly according to this algorithm::"
msgstr ""

#: ../../ref/models/querysets.txt:1337
# 66e83789bef844348381a928cb0a6f28
msgid "In English, that means start with any non-``'defaults'`` keyword argument that doesn't contain a double underscore (which would indicate a non-exact lookup). Then add the contents of ``defaults``, overriding any keys if necessary, and use the result as the keyword arguments to the model class. As hinted at above, this is a simplification of the algorithm that is used, but it contains all the pertinent details. The internal implementation has some more error-checking than this and handles some extra edge-conditions; if you're interested, read the code."
msgstr ""

#: ../../ref/models/querysets.txt:1346
# a6a219fbc6ff403ba0cbfd9d094c4ae5
msgid "If you have a field named ``defaults`` and want to use it as an exact lookup in ``get_or_create()``, just use ``'defaults__exact'``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1351
# dcd751d5435e4065a1eca373bfd65e5d
msgid "The ``get_or_create()`` method has similar error behavior to :meth:`create()` when you're using manually specified primary keys. If an object needs to be created and the key already exists in the database, an :exc:`~django.db.IntegrityError` will be raised."
msgstr ""

#: ../../ref/models/querysets.txt:1356
# 1a1aaa22ee744220a336b7f105f842d0
msgid "Finally, a word on using ``get_or_create()`` in Django views. As mentioned earlier, ``get_or_create()`` is mostly useful in scripts that need to parse data and create new records if existing ones aren't available. But if you need to use ``get_or_create()`` in a view, please make sure to use it only in ``POST`` requests unless you have a good reason not to. ``GET`` requests shouldn't have any effect on data; use ``POST`` whenever a request to a page has a side effect on your data. For more, see `Safe methods`_ in the HTTP spec."
msgstr ""

#: ../../ref/models/querysets.txt:1367
# 094353f5a7014d4a91f6b27333220072
msgid "bulk_create"
msgstr ""

#: ../../ref/models/querysets.txt:1373
# 6186b130997d45879d1a8796c9ce2da4
msgid "This method inserts the provided list of objects into the database in an efficient manner (generally only 1 query, no matter how many objects there are)::"
msgstr ""

#: ../../ref/models/querysets.txt:1383
# 237a7bf9e22a4f4ea45fea1ca9ca0fd8
msgid "This has a number of caveats though:"
msgstr ""

#: ../../ref/models/querysets.txt:1385
# 352671d56dfd40f9b01c3a320dbd07f2
msgid "The model's ``save()`` method will not be called, and the ``pre_save`` and ``post_save`` signals will not be sent."
msgstr ""

#: ../../ref/models/querysets.txt:1387
# c6830980f33144828a3412f705dd9382
msgid "It does not work with child models in a multi-table inheritance scenario."
msgstr ""

#: ../../ref/models/querysets.txt:1388
# c6c498ff0f7b48c5aed52c10223bcfd5
msgid "If the model's primary key is an :class:`~django.db.models.AutoField` it does not retrieve and set the primary key attribute, as ``save()`` does."
msgstr ""

#: ../../ref/models/querysets.txt:1391
# 4b630a861fd443ab93dfd2ef0949569a
msgid "The ``batch_size`` parameter controls how many objects are created in single query. The default is to create all objects in one batch, except for SQLite where the default is such that at maximum 999 variables per query is used."
msgstr ""

#: ../../ref/models/querysets.txt:1399
# 6636a18f667342e38e9e171b0cbf8629
msgid "count"
msgstr ""

#: ../../ref/models/querysets.txt:1403
# 80afa768c3dd49a7b9b222c3fb1e5d00
msgid "Returns an integer representing the number of objects in the database matching the ``QuerySet``. The ``count()`` method never raises exceptions."
msgstr ""

#: ../../ref/models/querysets.txt:1414
# de6ca6fdb3fe45e0a4b0dd23357591fc
msgid "A ``count()`` call performs a ``SELECT COUNT(*)`` behind the scenes, so you should always use ``count()`` rather than loading all of the record into Python objects and calling ``len()`` on the result (unless you need to load the objects into memory anyway, in which case ``len()`` will be faster)."
msgstr ""

#: ../../ref/models/querysets.txt:1419
# 6859a100f8a94297bcd4860999cc10c4
msgid "Depending on which database you're using (e.g. PostgreSQL vs. MySQL), ``count()`` may return a long integer instead of a normal Python integer. This is an underlying implementation quirk that shouldn't pose any real-world problems."
msgstr ""

#: ../../ref/models/querysets.txt:1425
# bc51e22046b84f83abadba025544038a
msgid "in_bulk"
msgstr ""

#: ../../ref/models/querysets.txt:1429
# e902939e883040e7812fbe59db7d3923
msgid "Takes a list of primary-key values and returns a dictionary mapping each primary-key value to an instance of the object with the given ID."
msgstr ""

#: ../../ref/models/querysets.txt:1441
# b1689e2a4acd4c008a6b6f6623c9b530
msgid "If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:1444
# 55920ff0487c4e33aef42971ebf935f9
msgid "iterator"
msgstr ""

#: ../../ref/models/querysets.txt:1448
# 1ed63feeaff44096a1a744ea303492f6
msgid "Evaluates the ``QuerySet`` (by performing the query) and returns an iterator (see :pep:`234`) over the results. A ``QuerySet`` typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, ``iterator()`` will read results directly, without doing any caching at the ``QuerySet`` level (internally, the default iterator calls ``iterator()`` and caches the return value). For a ``QuerySet`` which returns a large number of objects that you only need to access once, this can results in better performance and a significant reduction in memory."
msgstr ""

#: ../../ref/models/querysets.txt:1457
# 94787dfd4b9347f0a6ba9fcb0ff79498
msgid "Note that using ``iterator()`` on a ``QuerySet`` which has already been evaluated will force it to evaluate again, repeating the query."
msgstr ""

#: ../../ref/models/querysets.txt:1460
# 661a4e40d278489880a21cc7f9ed80a5
msgid "Also, use of ``iterator()`` causes previous ``prefetch_related()`` calls to be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:1465
# d9e1d453366c49e8a991160da4d8bb4a
msgid "Some Python database drivers like ``psycopg2`` perform caching if using client side cursors (instantiated with ``connection.cursor()`` and what Django's ORM uses). Using ``iterator()`` does not affect caching at the database driver level. To disable this caching, look at `server side cursors`_."
msgstr ""

#: ../../ref/models/querysets.txt:1474
# 1dbeb10a201b4b5d9d791566e0aa98de
msgid "latest"
msgstr ""

#: ../../ref/models/querysets.txt:1478
# 9213cd1c8de44522bc6f98e782a4147f
msgid "Returns the latest object in the table, by date, using the ``field_name`` provided as the date field."
msgstr ""

#: ../../ref/models/querysets.txt:1481
# a83a6a87e7394462b3f5bbeb323e28bb
msgid "This example returns the latest ``Entry`` in the table, according to the ``pub_date`` field::"
msgstr ""

#: ../../ref/models/querysets.txt:1486
# 351df4b7d57f488380b3352e6b76f7c8
msgid "If your model's :ref:`Meta <meta-options>` specifies :attr:`~django.db.models.Options.get_latest_by`, you can leave off the ``field_name`` argument to ``latest()``. Django will use the field specified in :attr:`~django.db.models.Options.get_latest_by` by default."
msgstr ""

#: ../../ref/models/querysets.txt:1491
# db658cb1f168448693dc16051c2f4ab6
msgid "Like :meth:`get()`, ``latest()`` raises :exc:`~django.core.exceptions.DoesNotExist` if there is no object with the given parameters."
msgstr ""

#: ../../ref/models/querysets.txt:1495
# 81971ecc4a53444c8ef670b2e7f8c04e
msgid "Note ``latest()`` exists purely for convenience and readability."
msgstr ""

#: ../../ref/models/querysets.txt:1498
# fe4ec91b684c47908e1037f723af7f3a
msgid "aggregate"
msgstr ""

#: ../../ref/models/querysets.txt:1502
# e496363584cf474a9ec38287936fca26
msgid "Returns a dictionary of aggregate values (averages, sums, etc) calculated over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value that will be included in the dictionary that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:1509
# 2dbfcac8a82b460ca11a024102ace9a3
msgid "Aggregates specified using keyword arguments will use the keyword as the name for the annotation. Anonymous arguments will have a name generated for them based upon the name of the aggregate function and the model field that is being aggregated."
msgstr ""

#: ../../ref/models/querysets.txt:1514
# 186b032433e7439082fc254540b98fa7
msgid "For example, when you are working with blog entries, you may want to know the number of authors that have contributed blog entries::"
msgstr ""

#: ../../ref/models/querysets.txt:1520
# af5eef4e079e47f7899d0a28782f7fc6
msgid "By using a keyword argument to specify the aggregate function, you can control the name of the aggregation value that is returned::"
msgstr ""

#: ../../ref/models/querysets.txt:1530
# d4c33f5052294d2bb49dfee3c58cb8fb
msgid "exists"
msgstr ""

#: ../../ref/models/querysets.txt:1534
# 354c5294035642889794083086f9be72
msgid "Returns ``True`` if the :class:`.QuerySet` contains any results, and ``False`` if not. This tries to perform the query in the simplest and fastest way possible, but it *does* execute nearly the same query as a normal :class:`.QuerySet` query."
msgstr ""

#: ../../ref/models/querysets.txt:1539
# 7cdb6d9dcb3b48ee98b6a92539ea16b8
msgid ":meth:`~.QuerySet.exists` is useful for searches relating to both object membership in a :class:`.QuerySet` and to the existence of any objects in a :class:`.QuerySet`, particularly in the context of a large :class:`.QuerySet`."
msgstr ""

#: ../../ref/models/querysets.txt:1543
# 1cd11423d48347c9b1825983f9f5bcc0
msgid "The most efficient method of finding whether a model with a unique field (e.g. ``primary_key``) is a member of a :class:`.QuerySet` is::"
msgstr ""

#: ../../ref/models/querysets.txt:1550
# a16c3d5706984e55a9e040039f5d01e6
msgid "Which will be faster than the following which requires evaluating and iterating through the entire queryset::"
msgstr ""

#: ../../ref/models/querysets.txt:1556
# 91b645aae98f45799430e2f3a4b62699
msgid "And to find whether a queryset contains any items::"
msgstr ""

#: ../../ref/models/querysets.txt:1561
# 77caa067c8684b6993b1297009cdd231
msgid "Which will be faster than::"
msgstr ""

#: ../../ref/models/querysets.txt:1566
# 64ed2c56b0224ba38ca54577d37a03da
msgid "... but not by a large degree (hence needing a large queryset for efficiency gains)."
msgstr ""

#: ../../ref/models/querysets.txt:1569
# 47a32bb3cf114a5facaca5795e588902
msgid "Additionally, if a ``some_query_set`` has not yet been evaluated, but you know that it will be at some point, then using ``some_query_set.exists()`` will do more overall work (one query for the existence check plus an extra one to later retrieve the results) than simply using ``bool(some_query_set)``, which retrieves the results and then checks if any were returned."
msgstr ""

#: ../../ref/models/querysets.txt:1576
# 184d9352d0dd41d5bdf5c2d9ec72cfbe
msgid "update"
msgstr ""

#: ../../ref/models/querysets.txt:1580
# e7d06bd9671f422f960d1ed0c03bc6db
msgid "Performs an SQL update query for the specified fields, and returns the number of rows matched (which may not be equal to the number of rows updated if some rows already have the new value)."
msgstr ""

#: ../../ref/models/querysets.txt:1584
# b906db5f37ba492a80ba5baf175bda68
msgid "For example, to turn comments off for all blog entries published in 2010, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:1589
# 2ec7c0d251b744668ce52147afab619b
msgid "(This assumes your ``Entry`` model has fields ``pub_date`` and ``comments_on``.)"
msgstr ""

#: ../../ref/models/querysets.txt:1591
# 53bbf72df732494ebe67d04adab61797
msgid "You can update multiple fields — there's no limit on how many. For example, here we update the ``comments_on`` and ``headline`` fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1596
# 58090f7f285c482d8bb6b284e49efd80
msgid "The ``update()`` method is applied instantly, and the only restriction on the :class:`.QuerySet` that is updated is that it can only update columns in the model's main table, not on related models. You can't do this, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:1602
# 3498306b34494d7290298822c2ed6a57
msgid "Filtering based on related fields is still possible, though::"
msgstr ""

#: ../../ref/models/querysets.txt:1606
# e4020fd44d9748a9a9c7528e93169882
msgid "You cannot call ``update()`` on a :class:`.QuerySet` that has had a slice taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:1609
# 086010aad5714e5c8f26725085e08417
msgid "The ``update()`` method returns the number of affected rows::"
msgstr ""

#: ../../ref/models/querysets.txt:1620
# 820e3fa0d138488b92d42f9113f5aa45
msgid "If you're just updating a record and don't need to do anything with the model object, the most efficient approach is to call ``update()``, rather than loading the model object into memory. For example, instead of doing this::"
msgstr ""

#: ../../ref/models/querysets.txt:1628
# 52c221020fac427eb1bd25179745bb17
msgid "...do this::"
msgstr ""

#: ../../ref/models/querysets.txt:1632
# 514acdfbe3bf43adb7e65749e70dc40e
msgid "Using ``update()`` also prevents a race condition wherein something might change in your database in the short period of time between loading the object and calling ``save()``."
msgstr ""

#: ../../ref/models/querysets.txt:1636
# 8a1a967b2c634e2f88c2246e142bb969
msgid "Finally, realize that ``update()`` does an update at the SQL level and, thus, does not call any ``save()`` methods on your models, nor does it emit the :attr:`~django.db.models.signals.pre_save` or :attr:`~django.db.models.signals.post_save` signals (which are a consequence of calling :meth:`Model.save() <~django.db.models.Model.save()>`). If you want to update a bunch of records for a model that has a custom :meth:`~django.db.models.Model.save()` method, loop over them and call :meth:`~django.db.models.Model.save()`, like this::"
msgstr ""

#: ../../ref/models/querysets.txt:1650
# 5e38b473bf97499dacf822d58c18838a
msgid "delete"
msgstr ""

#: ../../ref/models/querysets.txt:1654
# a9e619bbd476425b90831d1deb393232
msgid "Performs an SQL delete query on all rows in the :class:`.QuerySet`. The ``delete()`` is applied instantly. You cannot call ``delete()`` on a :class:`.QuerySet` that has had a slice taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:1659
# 68cc1d41e5a1441b96a70898dbd7d516
msgid "For example, to delete all the entries in a particular blog::"
msgstr ""

#: ../../ref/models/querysets.txt:1666
# 96f5bc26240a4574a42c4d4493e8b995
msgid "By default, Django's :class:`~django.db.models.ForeignKey` emulates the SQL constraint ``ON DELETE CASCADE`` — in other words, any objects with foreign keys pointing at the objects to be deleted will be deleted along with them. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1675
# cbddd514473948f19ead76d616be900b
msgid "This cascade behavior is customizable via the :attr:`~django.db.models.ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/models/querysets.txt:1679
# 36e2f22706984c0c847729b9dcebffe4
msgid "The ``delete()`` method does a bulk delete and does not call any ``delete()`` methods on your models. It does, however, emit the :data:`~django.db.models.signals.pre_delete` and :data:`~django.db.models.signals.post_delete` signals for all deleted objects (including cascaded deletions)."
msgstr ""

#: ../../ref/models/querysets.txt:1688
# fa64c960e17e4a6c8127b89fc574dc5c
msgid "Django needs to fetch objects into memory to send signals and handle cascades. However, if there are no cascades and no signals, then Django may take a fast-path and delete objects without fetching into memory. For large deletes this can result in significantly reduced memory usage. The amount of executed queries can be reduced, too."
msgstr ""

#: ../../ref/models/querysets.txt:1694
# 63ee9eeff7524e3e98432b2fc0fb27eb
msgid "ForeignKeys which are set to :attr:`~django.db.models.ForeignKey.on_delete` DO_NOTHING do not prevent taking the fast-path in deletion."
msgstr ""

#: ../../ref/models/querysets.txt:1697
# a181acd209304b5494bc936b910fc789
msgid "Note that the queries generated in object deletion is an implementation detail subject to change."
msgstr ""

#: ../../ref/models/querysets.txt:1703
# 63aa2bcd7fce4c9798947104f4c6e498
msgid "Field lookups"
msgstr ""

#: ../../ref/models/querysets.txt:1705
# 24780a076db64ab49b4228e46140d365
msgid "Field lookups are how you specify the meat of an SQL ``WHERE`` clause. They're specified as keyword arguments to the ``QuerySet`` methods :meth:`filter()`, :meth:`exclude()` and :meth:`get()`."
msgstr ""

#: ../../ref/models/querysets.txt:1709
# 4662a0134f0744d9bd86de16a7e24d62
msgid "For an introduction, see :ref:`models and database queries documentation <field-lookups-intro>`."
msgstr ""

#: ../../ref/models/querysets.txt:1715
# f8f3ba9f79944146bf9855fbb025f26e
msgid "exact"
msgstr ""

#: ../../ref/models/querysets.txt:1717
# 26bd2208c01a49b296fc732904a70587
msgid "Exact match. If the value provided for comparison is ``None``, it will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""

#: ../../ref/models/querysets.txt:1725
#: ../../ref/models/querysets.txt:2153
#: ../../ref/models/querysets.txt:2177
# 4004b9a06176492ebe71545e2320e75f
# 4762cea729a9462795e2864b39d0eef0
# a94c1a0c48f04a6bb4538743678c4c57
msgid "SQL equivalents::"
msgstr ""

#: ../../ref/models/querysets.txt:1732
# 99474cd7d3854e1c9a99bdd33d90dc23
msgid "In MySQL, a database table's \"collation\" setting determines whether ``exact`` comparisons are case-sensitive. This is a database setting, *not* a Django setting. It's possible to configure your MySQL tables to use case-sensitive comparisons, but some trade-offs are involved. For more information about this, see the :ref:`collation section <mysql-collation>` in the :doc:`databases </ref/databases>` documentation."
msgstr ""

#: ../../ref/models/querysets.txt:1742
# da17a8eb82f242dc83cd80a540698568
msgid "iexact"
msgstr ""

#: ../../ref/models/querysets.txt:1744
# f64c106fcc254c569abb4fb0d3715c45
msgid "Case-insensitive exact match."
msgstr ""

#: ../../ref/models/querysets.txt:1750
#: ../../ref/models/querysets.txt:1775
#: ../../ref/models/querysets.txt:1800
#: ../../ref/models/querysets.txt:1821
#: ../../ref/models/querysets.txt:1878
#: ../../ref/models/querysets.txt:1914
#: ../../ref/models/querysets.txt:1932
#: ../../ref/models/querysets.txt:1953
#: ../../ref/models/querysets.txt:1974
#: ../../ref/models/querysets.txt:1997
#: ../../ref/models/querysets.txt:2026
#: ../../ref/models/querysets.txt:2044
#: ../../ref/models/querysets.txt:2061
#: ../../ref/models/querysets.txt:2110
#: ../../ref/models/querysets.txt:2126
# be267af960984cd5ac6bbed38e113db5
# c9d00be3597a42778031c19e1e174555
# f6ef588925ea496f92581af98598e157
# ab4fb3830cc24e2a8b08e3887e5e7d68
# aef1a6d7a7a144aea151aa44646c8941
# 5e02d544e7394e4e986ec8d84f8c5d1f
# e99a1458cf0549bf86279c0a8276804d
# 74228edeff8948a49f20f52dfa4cf800
# 73806dc99b814df9929a98c0b34d34e5
# 3dcd2b3a57a64f468b3d1b3562a9498d
# 4234b232837c45019f7e18598707c78e
# d3fb1ca16d5e417080695619cb4f52d2
# 8d783b85b35e495c8dbb3f662f94c9a3
# de158e28e54045b4a9a3c10300f579f5
# 2aeaf8c4a79f480a8e6889c79399c026
msgid "SQL equivalent::"
msgstr ""

#: ../../ref/models/querysets.txt:1754
# 40a83c75e68d485da713bc8cf1dc9fc0
msgid "Note this will match ``'Beatles Blog'``, ``'beatles blog'``, ``'BeAtLes BLoG'``, etc."
msgstr ""

#: ../../ref/models/querysets.txt:1759
# dc70e73668c24366a39ab581a91f6d72
msgid "When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind the :ref:`database note <sqlite-string-matching>` about string comparisons. SQLite does not do case-insensitive matching for Unicode strings."
msgstr ""

#: ../../ref/models/querysets.txt:1769
# ae85924dc70f4ee5be82d1ac3fa47dd3
msgid "Case-sensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:1779
# 53fec279e49841faab2a46c49e4b9dbe
msgid "Note this will match the headline ``'Lennon honored today'`` but not ``'lennon honored today'``."
msgstr ""

#: ../../ref/models/querysets.txt:1784
# 489180772f8547899b8c3477afce4db8
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts like ``icontains`` for SQLite. See the :ref:`database note <sqlite-string-matching>` for more information."
msgstr ""

#: ../../ref/models/querysets.txt:1792
# c8ea9c4b20f245068aa8ef7c1b0a5852
msgid "icontains"
msgstr ""

#: ../../ref/models/querysets.txt:1794
# 14c198b3e49c4705a0502060ea487566
msgid "Case-insensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:1806
#: ../../ref/models/querysets.txt:1938
#: ../../ref/models/querysets.txt:1980
# afd77eb6c6db4e7fbfc5435a0159a153
# 14fc60c0bdac4a1eb3f61a185a91518c
# 7a61a0a5e4834a59961d6ecad89b580e
msgid "When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind the :ref:`database note <sqlite-string-matching>` about string comparisons."
msgstr ""

#: ../../ref/models/querysets.txt:1813
# ff928316a1014ed28a84740710beb37d
msgid "in"
msgstr ""

#: ../../ref/models/querysets.txt:1815
# fa407f09f1cc49a99b85651bc8f7b2d4
msgid "In a given list."
msgstr ""

#: ../../ref/models/querysets.txt:1825
# 504f0da06546459dbb4ead12226fa368
msgid "You can also use a queryset to dynamically evaluate the list of values instead of providing a list of literal values::"
msgstr ""

#: ../../ref/models/querysets.txt:1831
# 6adc19a102a34c0da9cb066f2dfd37c7
msgid "This queryset will be evaluated as subselect statement::"
msgstr ""

#: ../../ref/models/querysets.txt:1835
# 5ceea6d0f95242299ab313e82452e77e
msgid "If you pass in a ``ValuesQuerySet`` or ``ValuesListQuerySet`` (the result of calling ``values()`` or ``values_list()`` on a queryset) as the value to an ``__in`` lookup, you need to ensure you are only extracting one field in the result. For example, this will work (filtering on the blog names)::"
msgstr ""

#: ../../ref/models/querysets.txt:1843
# 6423b58562594cdd8759dd89c69924e9
msgid "This example will raise an exception, since the inner query is trying to extract two field values, where only one is expected::"
msgstr ""

#: ../../ref/models/querysets.txt:1852
# fe4b9e3908c54296ba46966c23f2257f
msgid "Be cautious about using nested queries and understand your database server's performance characteristics (if in doubt, benchmark!). Some database backends, most notably MySQL, don't optimize nested queries very well. It is more efficient, in those cases, to extract a list of values and then pass that into the second query. That is, execute two queries instead of one::"
msgstr ""

#: ../../ref/models/querysets.txt:1863
# e0982e6263624e20bf4f35f4b9450e84
msgid "Note the ``list()`` call around the Blog ``QuerySet`` to force execution of the first query. Without it, a nested query would be executed, because :ref:`querysets-are-lazy`."
msgstr ""

#: ../../ref/models/querysets.txt:1870
# 09472d192c6843de9e2684280d58163d
msgid "gt"
msgstr ""

#: ../../ref/models/querysets.txt:1872
# 2b004ca3fa774ac0b048eecc9d65ccd9
msgid "Greater than."
msgstr ""

#: ../../ref/models/querysets.txt:1885
# a14abb89c82b4f2e8ba4fa7a6ddce45a
msgid "gte"
msgstr ""

#: ../../ref/models/querysets.txt:1887
# a446cdb29d9c4d2d9d16c13fc2252f1c
msgid "Greater than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:1892
# b210f8e708854fc897f8a02f99a278a8
msgid "lt"
msgstr ""

#: ../../ref/models/querysets.txt:1894
# 16bede461a4744288534355181d61275
msgid "Less than."
msgstr ""

#: ../../ref/models/querysets.txt:1899
# 709ba74c49cb40ddb24708ac81989ead
msgid "lte"
msgstr ""

#: ../../ref/models/querysets.txt:1901
# c4350e21b9684ac5afa545facdc42a09
msgid "Less than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:1906
# ed3a14a5df97481aba8a9eede55dadc3
msgid "startswith"
msgstr ""

#: ../../ref/models/querysets.txt:1908
# 5746af9f0337400c8747f72a19dc8012
msgid "Case-sensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:1918
# b913d95cbaad4f43bda782b4d3788a66
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` acts like ``istartswith`` for SQLite."
msgstr ""

#: ../../ref/models/querysets.txt:1924
# e01139ab68234c38bdc013efece614b8
msgid "istartswith"
msgstr ""

#: ../../ref/models/querysets.txt:1926
# 06e7a86dac1c40589485b63c4ea650ec
msgid "Case-insensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:1945
# c53502cdf0d94799966332cb9fa8dfd7
msgid "endswith"
msgstr ""

#: ../../ref/models/querysets.txt:1947
# c118b6526cd64ef1a637ef4fd3160f4e
msgid "Case-sensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:1959
# 3ee301d44427410d8d0f195ef64ce240
msgid "SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts like ``iendswith`` for SQLite. Refer to the :ref:`database note <sqlite-string-matching>` documentation for more."
msgstr ""

#: ../../ref/models/querysets.txt:1966
# 329bc104d1c64725b8730815c8fb5205
msgid "iendswith"
msgstr ""

#: ../../ref/models/querysets.txt:1968
# c9552a0b5e0d42a9b4e028552db52adc
msgid "Case-insensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:1987
# abbdb65321114f73b92b247fae2865f8
msgid "range"
msgstr ""

#: ../../ref/models/querysets.txt:1989
# 4151b5da60314eb3ac403a4582a54b42
msgid "Range test (inclusive)."
msgstr ""

#: ../../ref/models/querysets.txt:2001
# e439961c9e344bf498188ca76bf9446c
msgid "You can use ``range`` anywhere you can use ``BETWEEN`` in SQL — for dates, numbers and even characters."
msgstr ""

#: ../../ref/models/querysets.txt:2006
# 4a19f20628514eba993bd475b9936b37
msgid "Filtering a ``DateTimeField`` with dates won't include items on the last day, because the bounds are interpreted as \"0am on the given date\". If ``pub_date`` was a ``DateTimeField``, the above expression would be turned into this SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:2013
# b7acbf4e3bf840788040a949ecf56708
msgid "Generally speaking, you can't mix dates and datetimes."
msgstr ""

#: ../../ref/models/querysets.txt:2018
# e9136cceb2654e18b72362245ff14a25
msgid "year"
msgstr ""

#: ../../ref/models/querysets.txt:2020
# b0d55f031e794e8188bdff0125b9c893
msgid "For date/datetime fields, exact year match. Takes a four-digit year."
msgstr ""

#: ../../ref/models/querysets.txt:2030
#: ../../ref/models/querysets.txt:2048
#: ../../ref/models/querysets.txt:2065
# b4c8500e3e764c08af1ad6450da9505f
# eb655109b0c04af69b797722f6313ea7
# 25b5ba30eca24e15ae33bf4605dacc34
msgid "(The exact SQL syntax varies for each database engine.)"
msgstr ""

#: ../../ref/models/querysets.txt:2035
# 1fa74caf53a046369614c597008e1a36
msgid "month"
msgstr ""

#: ../../ref/models/querysets.txt:2037
# 15c3ad8fbcfc477d91e8617306b354e2
msgid "For date and datetime fields, an exact month match. Takes an integer 1 (January) through 12 (December)."
msgstr ""

#: ../../ref/models/querysets.txt:2053
# 60e0692462854cc395e2c979e295fe63
msgid "day"
msgstr ""

#: ../../ref/models/querysets.txt:2055
# ff2bb64b494b41ca82c22b923a2ef6c9
msgid "For date and datetime fields, an exact day match."
msgstr ""

#: ../../ref/models/querysets.txt:2067
# 6a8016a6da044676b71ae895468040e9
msgid "Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc."
msgstr ""

#: ../../ref/models/querysets.txt:2073
# 6cf62b67cda946d48c3ce56d1ed959b6
msgid "week_day"
msgstr ""

#: ../../ref/models/querysets.txt:2075
# e4de12c456d245e4932d311fbb1967ef
msgid "For date and datetime fields, a 'day of the week' match."
msgstr ""

#: ../../ref/models/querysets.txt:2077
# 9668c24b3a9146a6ab380bb9d4ea1a9c
msgid "Takes an integer value representing the day of week from 1 (Sunday) to 7 (Saturday)."
msgstr ""

#: ../../ref/models/querysets.txt:2084
# 1dfc84680dfc49a384d53c5285ebb3bf
msgid "(No equivalent SQL code fragment is included for this lookup because implementation of the relevant query varies among different database engines.)"
msgstr ""

#: ../../ref/models/querysets.txt:2087
# 854c3c9a277046819e29f224d630c2df
msgid "Note this will match any record with a ``pub_date`` that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday."
msgstr ""

#: ../../ref/models/querysets.txt:2093
# 84bc8f75eba343d8b11119d5623a7d32
msgid "When :doc:`time zone support </topics/i18n/timezones>` is enabled, Django uses UTC in the database connection, which means the ``year``, ``month``, ``day`` and ``week_day`` lookups are performed in UTC. This is a known limitation of the current implementation."
msgstr ""

#: ../../ref/models/querysets.txt:2101
# 24eab4771fc04c3bbb8d94b0e9f92b2a
msgid "isnull"
msgstr ""

#: ../../ref/models/querysets.txt:2103
# 6e93beafd0464f589c8c4381b53c0885
msgid "Takes either ``True`` or ``False``, which correspond to SQL queries of ``IS NULL`` and ``IS NOT NULL``, respectively."
msgstr ""

#: ../../ref/models/querysets.txt:2117
# fe31533d461c4067a462d3513bd99e89
msgid "search"
msgstr ""

#: ../../ref/models/querysets.txt:2119
# 5ce7f6e6784c4a338d6b21bdffebb73a
msgid "A boolean full-text search, taking advantage of full-text indexing. This is like :lookup:`contains` but is significantly faster due to full-text indexing."
msgstr ""

#: ../../ref/models/querysets.txt:2130
# dc2eecf9f4a24f95b64aa1eabb623e07
msgid "Note this is only available in MySQL and requires direct manipulation of the database to add the full-text index. By default Django uses BOOLEAN MODE for full text searches. See the `MySQL documentation`_ for additional details."
msgstr ""

#: ../../ref/models/querysets.txt:2140
# 7165fb4e63b240f2ab876d8eed5ccde4
msgid "regex"
msgstr ""

#: ../../ref/models/querysets.txt:2142
# b5b23d94b7d3401cb3a8a4c0e1e39eac
msgid "Case-sensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2144
# b1485f27028247b687c15df1d2e13c16
msgid "The regular expression syntax is that of the database backend in use. In the case of SQLite, which has no built in regular expression support, this feature is provided by a (Python) user-defined REGEXP function, and the regular expression syntax is therefore that of Python's ``re`` module."
msgstr ""

#: ../../ref/models/querysets.txt:2163
# be99dfc36d514e899a1de6036c6f04e6
msgid "Using raw strings (e.g., ``r'foo'`` instead of ``'foo'``) for passing in the regular expression syntax is recommended."
msgstr ""

#: ../../ref/models/querysets.txt:2169
# 6af4c390a3bf46d3aa7ac533de5116c0
msgid "iregex"
msgstr ""

#: ../../ref/models/querysets.txt:2171
# 6f72cfe71d0a463da3f8a2c25757a52a
msgid "Case-insensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2190
# 4c694fe714004f44bd8f257323daa857
msgid "Aggregation functions"
msgstr ""

#: ../../ref/models/querysets.txt:2194
# 25f82d73b2c9414c961556b783811e71
msgid "Django provides the following aggregation functions in the ``django.db.models`` module. For details on how to use these aggregate functions, see :doc:`the topic guide on aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:2200
# 11e75a8a830a4112bb48ec1489d1754f
msgid "Avg"
msgstr ""

#: ../../ref/models/querysets.txt:2204
# 7bfff5c866a240129334de8623e41241
msgid "Returns the mean value of the given field, which must be numeric."
msgstr ""

#: ../../ref/models/querysets.txt:2206
# 47fe37deaee3465f861b3010d6b073ae
msgid "Default alias: ``<field>__avg``"
msgstr ""

#: ../../ref/models/querysets.txt:2207
#: ../../ref/models/querysets.txt:2255
#: ../../ref/models/querysets.txt:2289
# 984c3554f3b04c35808ffec183a5c180
# f47b56937f9747d49995bc08743984c8
# 843671acab214ea39980ebe58b403948
msgid "Return type: ``float``"
msgstr ""

#: ../../ref/models/querysets.txt:2210
# b0918c406ae143c5a8cf874eca0f2ed0
msgid "Count"
msgstr ""

#: ../../ref/models/querysets.txt:2214
# 90339bf663be48bc996b20ccb6fbfc1f
msgid "Returns the number of objects that are related through the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2216
# 68552d2b5ca845c7afd62c59ab311158
msgid "Default alias: ``<field>__count``"
msgstr ""

#: ../../ref/models/querysets.txt:2217
# bfcf2867e1ba4806b30ba0f11311324b
msgid "Return type: ``int``"
msgstr ""

#: ../../ref/models/querysets.txt:2219
#: ../../ref/models/querysets.txt:2257
#: ../../ref/models/querysets.txt:2291
# 233319ac6b76425e87c01b80625215ee
# 00708452325e4fe384d78f33f9d1f69a
# 2d12b90742e64ae1b5616c9864c5a969
msgid "Has one optional argument:"
msgstr ""

#: ../../ref/models/querysets.txt:2223
# ca0b89f129c34ea78e00cd1dfb45a7e5
msgid "If ``distinct=True``, the count will only include unique instances. This is the SQL equivalent of ``COUNT(DISTINCT <field>)``. The default value is ``False``."
msgstr ""

#: ../../ref/models/querysets.txt:2228
# 38c44882bf14494985af0bf0748ffe12
msgid "Max"
msgstr ""

#: ../../ref/models/querysets.txt:2232
# 06ed2f7be2cc4c9dafaab01655ba6a98
msgid "Returns the maximum value of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2234
# b396aa67da174565bbb9472fc7d5d1fb
msgid "Default alias: ``<field>__max``"
msgstr ""

#: ../../ref/models/querysets.txt:2235
#: ../../ref/models/querysets.txt:2245
#: ../../ref/models/querysets.txt:2279
# de9f57003c9e42dca8af7a9b90f7b0ac
# 15494600a041441db474e4f79c015b85
# d5ebec0ed0fa4b8688aa8f468fdcc98e
msgid "Return type: same as input field"
msgstr ""

#: ../../ref/models/querysets.txt:2238
# 4d487dc2ee004725b17712e1336bcbbd
msgid "Min"
msgstr ""

#: ../../ref/models/querysets.txt:2242
# 7293091bdf514053bbbf02b91c2d2647
msgid "Returns the minimum value of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2244
# 2a35265c710249cc98174902a0beb424
msgid "Default alias: ``<field>__min``"
msgstr ""

#: ../../ref/models/querysets.txt:2248
# aaef0f72f14d40e6acd1817db1381128
msgid "StdDev"
msgstr ""

#: ../../ref/models/querysets.txt:2252
# b2e538aa981f4ac292f2a94eba486dfd
msgid "Returns the standard deviation of the data in the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2254
# 067b2ab2522346539923159f0532a5b5
msgid "Default alias: ``<field>__stddev``"
msgstr ""

#: ../../ref/models/querysets.txt:2261
# 4696ec28ce1e490cbc48a537684d5d22
msgid "By default, ``StdDev`` returns the population standard deviation. However, if ``sample=True``, the return value will be the sample standard deviation."
msgstr ""

#: ../../ref/models/querysets.txt:2266
# 96335744017d4876b2ee1abf0a705a5f
msgid "SQLite doesn't provide ``StdDev`` out of the box. An implementation is available as an extension module for SQLite. Consult the `SQlite documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/querysets.txt:2272
# 8f311a9d974e4af09da77666b57f8557
msgid "Sum"
msgstr ""

#: ../../ref/models/querysets.txt:2276
# 48eca28fd89c4d7bb527b3ac36c0cc84
msgid "Computes the sum of all values of the given field."
msgstr ""

#: ../../ref/models/querysets.txt:2278
# 76bbf21608594101a5bcae081cc66dc7
msgid "Default alias: ``<field>__sum``"
msgstr ""

#: ../../ref/models/querysets.txt:2282
# 2572053e29eb47228f7a78ee85b911af
msgid "Variance"
msgstr ""

#: ../../ref/models/querysets.txt:2286
# 4c06fd632caa4e61b3d449f306491e9e
msgid "Returns the variance of the data in the provided field."
msgstr ""

#: ../../ref/models/querysets.txt:2288
# 4a636319f29946b0b14bab3b2f68e2f3
msgid "Default alias: ``<field>__variance``"
msgstr ""

#: ../../ref/models/querysets.txt:2295
# d1cf3ec37b8341feb29401aaa5adef33
msgid "By default, ``Variance`` returns the population variance. However, if ``sample=True``, the return value will be the sample variance."
msgstr ""

#: ../../ref/models/querysets.txt:2300
# dbaa1136d2f94e1ba59ae3f5e18ce45b
msgid "SQLite doesn't provide ``Variance`` out of the box. An implementation is available as an extension module for SQLite. Consult the `SQlite documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/relations.txt:3
# 7fa61bdb0f29492c941880ba0bbbabe9
msgid "Related objects reference"
msgstr ""

#: ../../ref/models/relations.txt:9
# 082a99ca56904502a65e7b0bc69ac0d9
msgid "A \"related manager\" is a manager used in a one-to-many or many-to-many related context. This happens in two cases:"
msgstr ""

#: ../../ref/models/relations.txt:12
# 5751150d27c34879b443b47116407dbc
msgid "The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That is::"
msgstr ""

#: ../../ref/models/relations.txt:21
# 5f1cb45eb7e54f40a25ced4eb8faf2cd
msgid "In the above example, the methods below will be available on the manager ``reporter.article_set``."
msgstr ""

#: ../../ref/models/relations.txt:24
# fc2329f391da4c3188ffe1501dc4925e
msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation::"
msgstr ""

#: ../../ref/models/relations.txt:32
# 6dbcb31ccaed4b0c85874228a08b0525
msgid "In this example, the methods below will be available both on ``topping.pizza_set`` and on ``pizza.toppings``."
msgstr ""

#: ../../ref/models/relations.txt:35
# ac4b96bdba6f41d8b10feb61aee275bf
msgid "These related managers have some extra methods:"
msgstr ""

#: ../../ref/models/relations.txt:39
# 0a498130e4ea4769a778f961161e6e4d
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../ref/models/relations.txt:49
# 16d0aae7fd304b36a5a5140dbe57eb48
msgid "Creates a new object, saves it and puts it in the related object set. Returns the newly created object::"
msgstr ""

#: ../../ref/models/relations.txt:61
# cb7c3c3c1d98460d807e1e7c89e830e9
msgid "This is equivalent to (but much simpler than)::"
msgstr ""

#: ../../ref/models/relations.txt:72
# 97845709e50549f0acbe4d2a6c11e45c
msgid "Note that there's no need to specify the keyword argument of the model that defines the relationship. In the above example, we don't pass the parameter ``blog`` to ``create()``. Django figures out that the new ``Entry`` object's ``blog`` field should be set to ``b``."
msgstr ""

#: ../../ref/models/relations.txt:79
# 1b326d10292d470dba28c7274d1319bc
msgid "Removes the specified model objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:85
# 810e7e232d3146b9a629acc411d4c6b8
msgid "In order to prevent database inconsistency, this method only exists on :class:`~django.db.models.ForeignKey` objects where ``null=True``. If the related field can't be set to ``None`` (``NULL``), then an object can't be removed from a relation without being added to another. In the above example, removing ``e`` from ``b.entry_set()`` is equivalent to doing ``e.blog = None``, and because the ``blog`` :class:`~django.db.models.ForeignKey` doesn't have ``null=True``, this is invalid."
msgstr ""

#: ../../ref/models/relations.txt:96
# 51a301fd368440d8b2c6883d9952f7b1
msgid "Removes all objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:101
# 72aa8ff931fa49b0a364f136f501096e
msgid "Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""

#: ../../ref/models/relations.txt:104
# 5f5a2d697a0c41f7925b1795dab0909b
msgid "Just like ``remove()``, ``clear()`` is only available on :class:`~django.db.models.ForeignKey`\\s where ``null=True``."
msgstr ""

#: ../../ref/request-response.txt:3
# 9f55cf02358c44eca2e9fc5051a4af2f
msgid "Request and response objects"
msgstr ""

#: ../../ref/request-response.txt:9
# 26df683597f34e0fbf7fc77362bd2a92
msgid "Quick overview"
msgstr ""

#: ../../ref/request-response.txt:11
# 39f40a9a6e2c4229ba997baecc7f52a2
msgid "Django uses request and response objects to pass state through the system."
msgstr ""

#: ../../ref/request-response.txt:13
# 64f6cbb4dab74ccea1f7f2568c3d8274
msgid "When a page is requested, Django creates an :class:`HttpRequest` object that contains metadata about the request. Then Django loads the appropriate view, passing the :class:`HttpRequest` as the first argument to the view function. Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""

#: ../../ref/request-response.txt:18
# ad15ef77fa224dfe921bd3a59badbc48
msgid "This document explains the APIs for :class:`HttpRequest` and :class:`HttpResponse` objects, which are defined in the :mod:`django.http` module."
msgstr ""

#: ../../ref/request-response.txt:23
# 167be9c96ff24248b4f85cf8c7a59b72
msgid "HttpRequest objects"
msgstr ""

#: ../../ref/request-response.txt:30
#: ../../ref/request-response.txt:345
#: ../../ref/request-response.txt:621
#: ../../ref/request-response.txt:850
#: ../../ref/template-response.txt:30
# bcd4710e47e747d4ba2ffa144bba619e
# a31b80976d414b93ad57f2f0bd74115f
# 320e1a488d80411abfeb8dca80d9e2bb
# 108974799244433186cfdcbab0d78ab7
# 0433be54b8f24f69b1b56e09f7c715bc
msgid "Attributes"
msgstr ""

#: ../../ref/request-response.txt:32
# f8a59492b37a45c7a406c74eb115746c
msgid "All attributes should be considered read-only, unless stated otherwise below. ``session`` is a notable exception."
msgstr ""

#: ../../ref/request-response.txt:39
# ae97038b74714932814c21532ed256e6
msgid "Before Django 1.4, ``HttpRequest.body`` was named ``HttpRequest.raw_post_data``."
msgstr ""

#: ../../ref/request-response.txt:42
# 1a006a0ad62f4e6185b2282bd84818b0
msgid "The raw HTTP request body as a byte string. This is useful for processing data in different ways than conventional HTML forms: binary images, XML payload etc. For processing conventional form data, use ``HttpRequest.POST``."
msgstr ""

#: ../../ref/request-response.txt:46
# 673c7dd749b84406a6e8804ce56fe1f5
msgid "You can also read from an HttpRequest using a file-like interface. See :meth:`HttpRequest.read()`."
msgstr ""

#: ../../ref/request-response.txt:51
# 10993903c8b84758a70ad26bd4cd427c
msgid "A string representing the full path to the requested page, not including the domain."
msgstr ""

#: ../../ref/request-response.txt:54
# f5f7f41a7f7a4bd4af4704a9c0f793a0
msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr ""

#: ../../ref/request-response.txt:58
# 517dc251d6e2462babcf29d3242e286b
msgid "Under some Web server configurations, the portion of the URL after the host name is split up into a script prefix portion and a path info portion. The ``path_info`` attribute always contains the path info portion of the path, no matter what Web server is being used. Using this instead of attr:`~HttpRequest.path` can make your code much easier to move between test and deployment servers."
msgstr ""

#: ../../ref/request-response.txt:65
# ac1748812fe64157973ea9af5108b8ff
msgid "For example, if the ``WSGIScriptAlias`` for your application is set to ``\"/minfo\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` and ``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""

#: ../../ref/request-response.txt:71
# 08ec9bb90d164e0ea2dffcfa8dc04780
msgid "A string representing the HTTP method used in the request. This is guaranteed to be uppercase. Example::"
msgstr ""

#: ../../ref/request-response.txt:81
# 9a74e487ad4346a79d9e65d5d5a69825
msgid "A string representing the current encoding used to decode form submission data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is used). You can write to this attribute to change the encoding used when accessing the form data. Any subsequent attribute accesses (such as reading from ``GET`` or ``POST``) will use the new ``encoding`` value.  Useful if you know the form data is not in the :setting:`DEFAULT_CHARSET` encoding."
msgstr ""

#: ../../ref/request-response.txt:90
# f3bb53a69e7841f28161de3736ddb863
msgid "A dictionary-like object containing all given HTTP GET parameters. See the :class:`QueryDict` documentation below."
msgstr ""

#: ../../ref/request-response.txt:95
# 5b3cb3d7a9bb4838bc3f09dc23c0a604
msgid "A dictionary-like object containing all given HTTP POST parameters, providing that the request contains form data. See the :class:`QueryDict` documentation below. If you need to access raw or non-form data posted in the request, access this through the :attr:`HttpRequest.body` attribute instead."
msgstr ""

#: ../../ref/request-response.txt:104
# 1f4167309eff411a9ff0c00e434daccd
msgid "It's possible that a request can come in via POST with an empty ``POST`` dictionary -- if, say, a form is requested via the POST HTTP method but does not include form data. Therefore, you shouldn't use ``if request.POST`` to check for use of the POST method; instead, use ``if request.method == \"POST\"`` (see above)."
msgstr ""

#: ../../ref/request-response.txt:110
# c2965c58f9bb43cab6a39d53f4b67f5b
msgid "Note: ``POST`` does *not* include file-upload information. See ``FILES``."
msgstr ""

#: ../../ref/request-response.txt:114
# 238c8314b264448bb4aa397a40256e8a
msgid "For convenience, a dictionary-like object that searches ``POST`` first, then ``GET``. Inspired by PHP's ``$_REQUEST``."
msgstr ""

#: ../../ref/request-response.txt:117
# 553efa591aa4466db385b81530ede8f3
msgid "For example, if ``GET = {\"name\": \"john\"}`` and ``POST = {\"age\": '34'}``, ``REQUEST[\"name\"]`` would be ``\"john\"``, and ``REQUEST[\"age\"]`` would be ``\"34\"``."
msgstr ""

#: ../../ref/request-response.txt:121
# d4a19d1138404d96a97ab53928f6d6ca
msgid "It's strongly suggested that you use ``GET`` and ``POST`` instead of ``REQUEST``, because the former are more explicit."
msgstr ""

#: ../../ref/request-response.txt:126
# 7c9e64d233524db795b8a80a1bc65a88
msgid "A standard Python dictionary containing all cookies. Keys and values are strings."
msgstr ""

#: ../../ref/request-response.txt:131
# f17268e682d2424b8e45a7a46b059cc0
msgid "A dictionary-like object containing all uploaded files. Each key in ``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\" />``. Each value in ``FILES`` is an :class:`UploadedFile` as described below."
msgstr ""

#: ../../ref/request-response.txt:135
# e13ed8fbc69247d99faee0c81782387f
msgid "See :doc:`/topics/files` for more information."
msgstr ""

#: ../../ref/request-response.txt:137
# 12345e12cae74bec8a48332003aab93b
msgid "Note that ``FILES`` will only contain data if the request method was POST and the ``<form>`` that posted to the request had ``enctype=\"multipart/form-data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""

#: ../../ref/request-response.txt:144
# 71ad66a286f94584815396ffc7ac8da3
msgid "A standard Python dictionary containing all available HTTP headers. Available headers depend on the client and server, but here are some examples:"
msgstr ""

#: ../../ref/request-response.txt:148
# 4c507bc7de4e469f8636d4afdf9c0d61
msgid "``CONTENT_LENGTH`` -- the length of the request body (as a string)."
msgstr ""

#: ../../ref/request-response.txt:149
# 80ce6aa33e944d9895556c50405b96a3
msgid "``CONTENT_TYPE`` -- the MIME type of the request body."
msgstr ""

#: ../../ref/request-response.txt:150
# ae2e15dcda2948c19101551217d6d066
msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr ""

#: ../../ref/request-response.txt:151
# 6d272f6409944c3fbbd256a577124904
msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr ""

#: ../../ref/request-response.txt:152
# f48c8bcf7f6e44f3b15090fb8fa3c257
msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr ""

#: ../../ref/request-response.txt:153
# c63da5c6b8834bea83aa9a248d3487d8
msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr ""

#: ../../ref/request-response.txt:154
# 92723b8602b047d29859b9bf47cbc63c
msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr ""

#: ../../ref/request-response.txt:155
# d69b958ae2334a979664d6cba19b31db
msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr ""

#: ../../ref/request-response.txt:156
# 3038c72059ae48da941abbd1dc8627f9
msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr ""

#: ../../ref/request-response.txt:157
# aba2a83a2c284263a587c9130b0e4406
msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr ""

#: ../../ref/request-response.txt:158
# 4ad04543f8aa4465aeb139f16278109d
msgid "``REMOTE_USER`` -- The user authenticated by the Web server, if any."
msgstr ""

#: ../../ref/request-response.txt:159
# 513dc445a7e64e658c4ef393a825afad
msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr ""

#: ../../ref/request-response.txt:160
# 4bc5584485ee4039a545780afb697d14
msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr ""

#: ../../ref/request-response.txt:161
# 8cb6cbb26b4d4b8c91245093123ff4b9
msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr ""

#: ../../ref/request-response.txt:163
# 26636f33938f409d9e49a4196564efe4
msgid "With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given above, any HTTP headers in the request are converted to ``META`` keys by converting all characters to uppercase, replacing any hyphens with underscores and adding an ``HTTP_`` prefix to the name. So, for example, a header called ``X-Bender`` would be mapped to the ``META`` key ``HTTP_X_BENDER``."
msgstr ""

#: ../../ref/request-response.txt:172
# 8f8608ea20ba499fb26e9822d509faf6
msgid "A ``django.contrib.auth.models.User`` object representing the currently logged-in user. If the user isn't currently logged in, ``user`` will be set to an instance of ``django.contrib.auth.models.AnonymousUser``. You can tell them apart with ``is_authenticated()``, like so::"
msgstr ""

#: ../../ref/request-response.txt:182
# 2ffcbe85f59c4ee38e531ec3b3e7143b
msgid "``user`` is only available if your Django installation has the ``AuthenticationMiddleware`` activated. For more, see :doc:`/topics/auth`."
msgstr ""

#: ../../ref/request-response.txt:188
# 763e34f2ecbf4c318a238498ef300026
msgid "A readable-and-writable, dictionary-like object that represents the current session. This is only available if your Django installation has session support activated. See the :doc:`session documentation </topics/http/sessions>` for full details."
msgstr ""

#: ../../ref/request-response.txt:195
# 71aad89d945f4118b55c55d9e972d569
msgid "Not defined by Django itself, but will be read if other code (e.g., a custom middleware class) sets it. When present, this will be used as the root URLconf for the current request, overriding the :setting:`ROOT_URLCONF` setting. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/request-response.txt:204
# 4ddb2e3219734bde8d55cd58efa7ab28
msgid "An instance of :class:`~django.core.urlresolvers.ResolverMatch` representing the resolved url. This attribute is only set after url resolving took place, which means it's available in all views but not in middleware methods which are executed before url resolving takes place (like ``process_request``, you can use ``process_view`` instead)."
msgstr ""

#: ../../ref/request-response.txt:212
#: ../../ref/request-response.txt:356
#: ../../ref/request-response.txt:384
#: ../../ref/request-response.txt:640
#: ../../ref/template-response.txt:57
#: ../../ref/template-response.txt:146
# 35b37a74f2104bfbb60a808319d65d3e
# e8fe9b224ef64ab2b45f8c392d537fda
# 2944e02ac04c4bc392deb2f5a804731c
# efc10973a97e482196d817f22ba6dcf8
# fed6489273944cb883881852a18b98eb
# 01c145437e5d4ec99a3c5b974e991491
msgid "Methods"
msgstr ""

#: ../../ref/request-response.txt:216
# 663dd8d2cc1748eeb1d8a4e141982b93
msgid "Returns the originating host of the request using information from the ``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed in :pep:`3333`."
msgstr ""

#: ../../ref/request-response.txt:222
# 6abaed735b4c4160985ddd313eb23ba3
msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr ""

#: ../../ref/request-response.txt:224
# da41ea107c8a43c89f13f752588623a4
msgid "The :meth:`~HttpRequest.get_host()` method fails when the host is behind multiple proxies. One solution is to use middleware to rewrite the proxy headers, as in the following example::"
msgstr ""

#: ../../ref/request-response.txt:246
# 3341cd7464cd4f16bfa5fc517a85f66f
msgid "This middleware should be positioned before any other middleware that relies on the value of :meth:`~HttpRequest.get_host()` -- for instance, :class:`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware.csrf.CsrfViewMiddleware`."
msgstr ""

#: ../../ref/request-response.txt:253
# a376fb9aecf94c1cbadc532b4393d6c9
msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr ""

#: ../../ref/request-response.txt:255
# 870ed9317bb241628f97d6c289e09f4c
msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:259
# 05dc178a3b1847c3bd56ac37d3c75eb6
msgid "Returns the absolute URI form of ``location``. If no location is provided, the location will be set to ``request.get_full_path()``."
msgstr ""

#: ../../ref/request-response.txt:262
# f0917d992ff847f6a45502db53199411
msgid "If the location is already an absolute URI, it will not be altered. Otherwise the absolute URI is built using the server variables available in this request."
msgstr ""

#: ../../ref/request-response.txt:266
# ee11d2b7f29c4d7eb73f07f41a901eb6
msgid "Example: ``\"http://example.com/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:272
# a5d3638fffb149fb90f217002ae935f3
msgid "Returns a cookie value for a signed cookie, or raises a :class:`~django.core.signing.BadSignature` exception if the signature is no longer valid. If you provide the ``default`` argument the exception will be suppressed and that default value will be returned instead."
msgstr ""

#: ../../ref/request-response.txt:277
# 434084cc60af48f8b654034ce2119833
msgid "The optional ``salt`` argument can be used to provide extra protection against brute force attacks on your secret key. If supplied, the ``max_age`` argument will be checked against the signed timestamp attached to the cookie value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""

#: ../../ref/request-response.txt:303
# 0b6e208a21c144be876c3eb6dcff1df9
msgid "See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""

#: ../../ref/request-response.txt:307
# c01f5273717a4715a49d1be59bd4c855
msgid "Returns ``True`` if the request is secure; that is, if it was made with HTTPS."
msgstr ""

#: ../../ref/request-response.txt:312
# bd316619e7ac4def9e4e0f5d3cd90c5c
msgid "Returns ``True`` if the request was made via an ``XMLHttpRequest``, by checking the ``HTTP_X_REQUESTED_WITH`` header for the string ``'XMLHttpRequest'``. Most modern JavaScript libraries send this header. If you write your own XMLHttpRequest call (on the browser side), you'll have to set this header manually if you want ``is_ajax()`` to work."
msgstr ""

#: ../../ref/request-response.txt:324
# 98112e3cf3244da686b304fd9a8f5392
msgid "Methods implementing a file-like interface for reading from an HttpRequest instance. This makes it possible to consume an incoming request in a streaming fashion. A common use-case would be to process a big XML payload with iterative parser without constructing a whole XML tree in memory."
msgstr ""

#: ../../ref/request-response.txt:330
# c624228c598045b09d2c6e3cf8dea654
msgid "Given this standard interface, an HttpRequest instance can be passed directly to an XML parser such as ElementTree::"
msgstr ""

#: ../../ref/request-response.txt:339
# 74f99afdca70448387e73f7590a3f0b0
msgid "UploadedFile objects"
msgstr ""

#: ../../ref/request-response.txt:349
# 9a6f3d18d6ea4f778b069637bd34f71e
msgid "The name of the uploaded file."
msgstr ""

#: ../../ref/request-response.txt:353
# 01c4794030854baea74137b9a1eb67e5
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../ref/request-response.txt:360
# 3889ae0f212f4cbb87d7de13de278058
msgid "Returns a generator that yields sequential chunks of data."
msgstr ""

#: ../../ref/request-response.txt:364
# 680503e49de643ac8ba681acb17ac047
msgid "Read a number of bytes from the file."
msgstr ""

#: ../../ref/request-response.txt:369
# e579698781a840aa9985f2d925a5a140
msgid "QueryDict objects"
msgstr ""

#: ../../ref/request-response.txt:373
# 4376e5cea6e44baf83ac42a7a1d2a66a
msgid "In an :class:`HttpRequest` object, the ``GET`` and ``POST`` attributes are instances of ``django.http.QueryDict``. :class:`QueryDict` is a dictionary-like class customized to deal with multiple values for the same key. This is necessary because some HTML form elements, notably ``<select multiple=\"multiple\">``, pass multiple values for the same key."
msgstr ""

#: ../../ref/request-response.txt:379
# 8a58dc47ef7145b698a37b282681c48b
msgid "``QueryDict`` instances are immutable, unless you create a ``copy()`` of them. That means you can't change attributes of ``request.POST`` and ``request.GET`` directly."
msgstr ""

#: ../../ref/request-response.txt:386
# ac7a68c506bb45dfb8b9aa71477b7777
msgid ":class:`QueryDict` implements all the standard dictionary methods, because it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""

#: ../../ref/request-response.txt:391
# 468afd955ffb4a2dbc09b847906e638f
msgid "Returns the value for the given key. If the key has more than one value, ``__getitem__()`` returns the last value. Raises ``django.utils.datastructures.MultiValueDictKeyError`` if the key does not exist. (This is a subclass of Python's standard ``KeyError``, so you can stick to catching ``KeyError``.)"
msgstr ""

#: ../../ref/request-response.txt:399
# edfc0f769b23465a847acfb7619b1bb5
msgid "Sets the given key to ``[value]`` (a Python list whose single element is ``value``). Note that this, as other dictionary functions that have side effects, can only be called on a mutable ``QueryDict`` (one that was created via ``copy()``)."
msgstr ""

#: ../../ref/request-response.txt:406
# 76e931575cd344f08c55941abe411efe
msgid "Returns ``True`` if the given key is set. This lets you do, e.g., ``if \"foo\" in request.GET``."
msgstr ""

#: ../../ref/request-response.txt:411
# 2fb7d03cac304b20bf8980c01b570954
msgid "Uses the same logic as ``__getitem__()`` above, with a hook for returning a default value if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:416
# 0f4cf07535b7404691ce4242d3e418e0
msgid "Just like the standard dictionary ``setdefault()`` method, except it uses ``__setitem__()`` internally."
msgstr ""

#: ../../ref/request-response.txt:421
# d1d1b2d41d6e46968f4bc2839f06746f
msgid "Takes either a ``QueryDict`` or standard dictionary. Just like the standard dictionary ``update()`` method, except it *appends* to the current dictionary items rather than replacing them. For example::"
msgstr ""

#: ../../ref/request-response.txt:435
# 1e201c603e854f5086e3b0ac675fd8f3
msgid "Just like the standard dictionary ``items()`` method, except this uses the same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:444
# 9fc313b9589f46c891fc742efbd4940d
msgid "Just like the standard dictionary ``iteritems()`` method. Like :meth:`QueryDict.items()` this uses the same last-value logic as :meth:`QueryDict.__getitem__()`."
msgstr ""

#: ../../ref/request-response.txt:450
# 23a7e78e289b433b99d8b1b83a2474e3
msgid "Like :meth:`QueryDict.iteritems()` except it includes all values, as a list, for each member of the dictionary."
msgstr ""

#: ../../ref/request-response.txt:455
# de5b6aaffa4b49f9bbbfc38bb293f5f1
msgid "Just like the standard dictionary ``values()`` method, except this uses the same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:464
# 016963999d8d45b8a7c5bec9847b6937
msgid "Just like :meth:`QueryDict.values()`, except an iterator."
msgstr ""

#: ../../ref/request-response.txt:466
# 7a1bb92b5dee47d3a11a18cce6235377
msgid "In addition, ``QueryDict`` has the following methods:"
msgstr ""

#: ../../ref/request-response.txt:470
# 245f1a3c86204bcbb091feddf977c0c8
msgid "Returns a copy of the object, using ``copy.deepcopy()`` from the Python standard library. The copy will be mutable -- that is, you can change its values."
msgstr ""

#: ../../ref/request-response.txt:476
# 4e43a5049a3942de89a6403e4befeb19
msgid "Returns the data with the requested key, as a Python list. Returns an empty list if the key doesn't exist and no default value was provided. It's guaranteed to return a list of some sort unless the default value was no list."
msgstr ""

#: ../../ref/request-response.txt:486
# 8b497a15d59248b2adb44bd7a54c081a
msgid "Sets the given key to ``list_`` (unlike ``__setitem__()``)."
msgstr ""

#: ../../ref/request-response.txt:490
# 402dc34d8fe24596b13419ad7a8d35e6
msgid "Appends an item to the internal list associated with key."
msgstr ""

#: ../../ref/request-response.txt:494
# 434ac29648c54ad3bccbc2dc76761eaa
msgid "Just like ``setdefault``, except it takes a list of values instead of a single value."
msgstr ""

#: ../../ref/request-response.txt:499
# c88aea17e0624f5ca41320961abdd614
msgid "Like :meth:`items()`, except it includes all values, as a list, for each member of the dictionary. For example::"
msgstr ""

#: ../../ref/request-response.txt:510
# 6be07a647423471898520a563c916999
msgid "Returns ``dict`` representation of ``QueryDict``. For every (key, list) pair in ``QueryDict``, ``dict`` will have (key, item), where item is one element of the list, using same logic as :meth:`QueryDict.__getitem__()`::"
msgstr ""

#: ../../ref/request-response.txt:520
# b60b8af74b574baea141c8e7bb81f4b0
msgid "Returns a string of the data in query-string format. Example::"
msgstr ""

#: ../../ref/request-response.txt:526
# d901f0f41b5742e6aa1742b04d9df07d
msgid "Optionally, urlencode can be passed characters which do not require encoding. For example::"
msgstr ""

#: ../../ref/request-response.txt:535
# 9ebc7e9dd9a74e47acc587101af29a9b
msgid "HttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:539
# cf61eb0c09804125aa27f82f7d27d225
msgid "In contrast to :class:`HttpRequest` objects, which are created automatically by Django, :class:`HttpResponse` objects are your responsibility. Each view you write is responsible for instantiating, populating and returning an :class:`HttpResponse`."
msgstr ""

#: ../../ref/request-response.txt:544
# 79f1f9e5a5074ed3b0a1eaa38c8f147a
msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ""

#: ../../ref/request-response.txt:550
# af27fe468dc54c60ae9eb02d07d4a4d9
msgid "Passing strings"
msgstr ""

#: ../../ref/request-response.txt:552
# 04b8d28251754d5ab0594e9d04cf9e3d
msgid "Typical usage is to pass the contents of the page, as a string, to the :class:`HttpResponse` constructor::"
msgstr ""

#: ../../ref/request-response.txt:559
# b18d2fddfa7f4a51869a47dd97865f32
msgid "But if you want to add content incrementally, you can use ``response`` as a file-like object::"
msgstr ""

#: ../../ref/request-response.txt:567
# c9ec8b46b9f84711b319292a3d07e3ee
msgid "Passing iterators"
msgstr ""

#: ../../ref/request-response.txt:569
# 1d7fdd83f4524ef08232891d8cc6b7ad
msgid "Finally, you can pass ``HttpResponse`` an iterator rather than strings. If you use this technique, the iterator should return strings."
msgstr ""

#: ../../ref/request-response.txt:572
# 28e0c9819b99403895f6930ef8ade9a1
msgid "Passing an iterator as content to :class:`HttpResponse` creates a streaming response if (and only if) no middleware accesses the :attr:`HttpResponse.content` attribute before the response is returned."
msgstr ""

#: ../../ref/request-response.txt:578
# c848718ce72941a9a65099c0fbd97cc7
msgid "This technique is fragile and was deprecated in Django 1.5. If you need the response to be streamed from the iterator to the client, you should use the :class:`StreamingHttpResponse` class instead."
msgstr ""

#: ../../ref/request-response.txt:582
# 402c07b5e3e5478b851fff001860475e
msgid "As of Django 1.7, when :class:`HttpResponse` is instantiated with an iterator, it will consume it immediately, store the response content as a string, and discard the iterator."
msgstr ""

#: ../../ref/request-response.txt:588
# 9feab4bbc55f4b70b1a46022aae85a4d
msgid "You can now use :class:`HttpResponse` as a file-like object even if it was instantiated with an iterator. Django will consume and save the content of the iterator on first access."
msgstr ""

#: ../../ref/request-response.txt:593
# e7077c1b5f8e40858ae127220f1a04d3
msgid "Setting headers"
msgstr ""

#: ../../ref/request-response.txt:595
# e8fd09047e004ba6a344eb6b6e7de536
msgid "To set or remove a header in your response, treat it like a dictionary::"
msgstr ""

#: ../../ref/request-response.txt:601
# 0b1e55198f364421ad97358d4c54bc18
msgid "Note that unlike a dictionary, ``del`` doesn't raise ``KeyError`` if the header doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:604
# da9f92d1c0cc4e85bdd061fa05ae9b92
msgid "HTTP headers cannot contain newlines. An attempt to set a header containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""

#: ../../ref/request-response.txt:608
# 6258a5170f41413e8a447e9e832d5b6d
msgid "Telling the browser to treat the response as a file attachment"
msgstr ""

#: ../../ref/request-response.txt:610
# 6716804cd64d438aa9a32c1fc37a707f
msgid "To tell the browser to treat the response as a file attachment, use the ``content_type`` argument and set the ``Content-Disposition`` header. For example, this is how you might return a Microsoft Excel spreadsheet::"
msgstr ""

#: ../../ref/request-response.txt:617
# a4feb66786514894a6338c45b810ee34
msgid "There's nothing Django-specific about the ``Content-Disposition`` header, but it's easy to forget the syntax, so we've included it here."
msgstr ""

#: ../../ref/request-response.txt:625
# 69266c2470f44855b215cd29932fd03f
msgid "A string representing the content, encoded from a Unicode object if necessary."
msgstr ""

#: ../../ref/request-response.txt:630
#: ../../ref/request-response.txt:858
# f2e14dc4d72944b9b40110e941595625
# 8dd5ca2daa7f4fc1ba74af7dc699de2a
msgid "The `HTTP Status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:634
# 4b1172e8ec714af288e1d1c6cca776fb
msgid "This is always ``False``."
msgstr ""

#: ../../ref/request-response.txt:636
# b8ced57d56754ef9b60824751f55c686
msgid "This attribute exists so middleware can treat streaming responses differently from regular responses."
msgstr ""

#: ../../ref/request-response.txt:644
# 7d463ea581bb496593540d56bfc34719
msgid "Instantiates an ``HttpResponse`` object with the given page content and content type."
msgstr ""

#: ../../ref/request-response.txt:647
# 5a5b5398bcf64d7b8c5bb51100ed7496
msgid "``content`` should be an iterator or a string. If it's an iterator, it should return strings, and those strings will be joined together to form the content of the response. If it is not an iterator or a string, it will be converted to a string when accessed."
msgstr ""

#: ../../ref/request-response.txt:653
# 11eb0773fc3a44cf8f515972e232b827
msgid "``content_type`` is the MIME type optionally completed by a character set encoding and is used to fill the HTTP ``Content-Type`` header. If not specified, it is formed by the :setting:`DEFAULT_CONTENT_TYPE` and :setting:`DEFAULT_CHARSET` settings, by default: \"`text/html; charset=utf-8`\"."
msgstr ""

#: ../../ref/request-response.txt:658
# df5ef5d8cf86452ea5d53113549af03b
msgid "Historically, this parameter was called ``mimetype`` (now deprecated)."
msgstr ""

#: ../../ref/request-response.txt:660
# a3508890cd8846f58e482ae61084b0b2
msgid "``status`` is the `HTTP Status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:665
# 2aa88a65e39f4155a50aa2e6c6848465
msgid "Sets the given header name to the given value. Both ``header`` and ``value`` should be strings."
msgstr ""

#: ../../ref/request-response.txt:670
# d7529cce235446169c2f861389a6c518
msgid "Deletes the header with the given name. Fails silently if the header doesn't exist. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:675
# f92880fceea54c6ab418fe65a9ea47c5
msgid "Returns the value for the given header name. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:679
# d462462bad14463389c5e86d72df1f01
msgid "Returns ``True`` or ``False`` based on a case-insensitive check for a header with the given name."
msgstr ""

#: ../../ref/request-response.txt:684
# c220fc75c30645059feba10aa5bbb98b
msgid "Sets a cookie. The parameters are the same as in the :class:`Cookie.Morsel` object in the Python standard library."
msgstr ""

#: ../../ref/request-response.txt:687
# 241412aeedf849e280294ae5068fedf0
msgid "``max_age`` should be a number of seconds, or ``None`` (default) if the cookie should last only as long as the client's browser session. If ``expires`` is not specified, it will be calculated."
msgstr ""

#: ../../ref/request-response.txt:690
# 63a12df73ff44cb1a6f143cc20e1130b
msgid "``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a ``datetime`` object, the ``max_age`` will be calculated."
msgstr ""

#: ../../ref/request-response.txt:694
# 6eb49262adda44e28afa77781c1e4544
msgid "Use ``domain`` if you want to set a cross-domain cookie. For example, ``domain=\".lawrence.com\"`` will set a cookie that is readable by the domains www.lawrence.com, blogs.lawrence.com and calendars.lawrence.com. Otherwise, a cookie will only be readable by the domain that set it."
msgstr ""

#: ../../ref/request-response.txt:699
# 4caac527eeb34e81aa63a6480c482c0a
msgid "Use ``httponly=True`` if you want to prevent client-side JavaScript from having access to the cookie."
msgstr ""

#: ../../ref/request-response.txt:702
#: ../../ref/settings.txt:1663
# 14810d444e874fc88a6d88e305581960
# e9ded8cbe2f044dd9d1dfaf1dc9be39d
msgid "HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not part of the :rfc:`2109` standard for cookies, and it isn't honored consistently by all browsers. However, when it is honored, it can be a useful way to mitigate the risk of client side script accessing the protected cookie data."
msgstr ""

#: ../../ref/request-response.txt:715
# a3d32556d4c749e8818c26071776837c
msgid "Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </topics/signing>` the cookie before setting it. Use in conjunction with :meth:`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument for added key strength, but you will need to remember to pass it to the corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""

#: ../../ref/request-response.txt:724
# c09eab72b3294b8eacc41071e16dcba9
msgid "Deletes the cookie with the given key. Fails silently if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:727
# bf00fb78fec546eeb94b325c89627205
msgid "Due to the way cookies work, ``path`` and ``domain`` should be the same values you used in ``set_cookie()`` -- otherwise the cookie may not be deleted."
msgstr ""

#: ../../ref/request-response.txt:733
#: ../../ref/request-response.txt:737
#: ../../ref/request-response.txt:741
# 73f4a356080f40b1b8cfea321da57a8a
# 514a125ca6ac4f829091d77310a78829
# 9927e21227634886b9969eb6082d7b7b
msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr ""

#: ../../ref/request-response.txt:749
# e0496026864541129622f464ed279315
msgid "HttpResponse subclasses"
msgstr ""

#: ../../ref/request-response.txt:751
# e15dc006765243e3a0980be34f5f0e4a
msgid "Django includes a number of ``HttpResponse`` subclasses that handle different types of HTTP responses. Like ``HttpResponse``, these subclasses live in :mod:`django.http`."
msgstr ""

#: ../../ref/request-response.txt:757
# 72fc9837f3124bc89751b2a7d7536411
msgid "The first argument to the constructor is required -- the path to redirect to. This can be a fully qualified URL (e.g. ``'http://www.yahoo.com/search/'``) or an absolute path with no domain (e.g. ``'/search/'``). See :class:`HttpResponse` for other optional constructor arguments. Note that this returns an HTTP status code 302."
msgstr ""

#: ../../ref/request-response.txt:765
# 4c91b31318214c8a931ff8c1249de5eb
msgid "Like :class:`HttpResponseRedirect`, but it returns a permanent redirect (HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""

#: ../../ref/request-response.txt:770
# 077b1b2a62754ed1ac1910b817493530
msgid "The constructor doesn't take any arguments and no content should be added to this response. Use this to designate that a page hasn't been modified since the user's last request (status code 304)."
msgstr ""

#: ../../ref/request-response.txt:776
# ede0519f3ad94cfea3eb394d1eae572e
msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr ""

#: ../../ref/request-response.txt:780
# 330398508f8c42b5bd70ddd3ac44f360
msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr ""

#: ../../ref/request-response.txt:784
# 0bbbed9ba9584fcfb5005718a6debfe7
msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr ""

#: ../../ref/request-response.txt:788
# 854a9b1d6ff14d7b87f240494b49e453
msgid "Like :class:`HttpResponse`, but uses a 405 status code. The first argument to the constructor is required: a list of permitted methods (e.g. ``['GET', 'POST']``)."
msgstr ""

#: ../../ref/request-response.txt:794
# da246f9ddc174b1282f1ba0c7e277059
msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr ""

#: ../../ref/request-response.txt:798
# a313e23f989943a08fdd4b300ae789be
msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr ""

#: ../../ref/request-response.txt:802
# e3c127b4985e41e3b072683596117b4f
msgid "If a custom subclass of :class:`HttpResponse` implements a ``render`` method, Django will treat it as emulating a :class:`~django.template.response.SimpleTemplateResponse`, and the ``render`` method must itself return a valid response object."
msgstr ""

#: ../../ref/request-response.txt:808
# 6446b77c4c0348fb814b876ab14e59cc
msgid "StreamingHttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:814
# 503bcaadcfa04de2afb38f76562fe25c
msgid "The :class:`StreamingHttpResponse` class is used to stream a response from Django to the browser. You might want to do this if generating the response takes too long or uses too much memory. For instance, it's useful for generating large CSV files."
msgstr ""

#: ../../ref/request-response.txt:821
# 24962c4e6f14444091ee82604de2c50f
msgid "Django is designed for short-lived requests. Streaming responses will tie a worker process and keep a database connection idle in transaction for the entire duration of the response. This may result in poor performance."
msgstr ""

#: ../../ref/request-response.txt:825
# b8e58d40b0a84fefa11e119bc1f7d337
msgid "Generally speaking, you should perform expensive tasks outside of the request-response cycle, rather than resorting to a streamed response."
msgstr ""

#: ../../ref/request-response.txt:828
# 65884ae4cf4348ceaa980ceb46a9645a
msgid "The :class:`StreamingHttpResponse` is not a subclass of :class:`HttpResponse`, because it features a slightly different API. However, it is almost identical, with the following notable differences:"
msgstr ""

#: ../../ref/request-response.txt:832
# dad9c9621ced422a940cd6c3669cfe15
msgid "It should be given an iterator that yields strings as content."
msgstr ""

#: ../../ref/request-response.txt:834
# 70d4909491d7421ab637549e7b9b5d88
msgid "You cannot access its content, except by iterating the response object itself. This should only occur when the response is returned to the client."
msgstr ""

#: ../../ref/request-response.txt:837
# 11c2a5f4408d4b24a38dd24e95e92048
msgid "It has no ``content`` attribute. Instead, it has a :attr:`~StreamingHttpResponse.streaming_content` attribute."
msgstr ""

#: ../../ref/request-response.txt:840
# 732da02fef9d44668d4fb4bb73acf192
msgid "You cannot use the file-like object ``tell()`` or ``write()`` methods. Doing so will raise an exception."
msgstr ""

#: ../../ref/request-response.txt:843
# 42978549056648058e01f8ff0d1468e4
msgid ":class:`StreamingHttpResponse` should only be used in situations where it is absolutely required that the whole content isn't iterated before transferring the data to the client. Because the content can't be accessed, many middlewares can't function normally. For example the ``ETag`` and ``Content- Length`` headers can't be generated for streaming responses."
msgstr ""

#: ../../ref/request-response.txt:854
# f8457cb209354c38ad08aac572eec00d
msgid "An iterator of strings representing the content."
msgstr ""

#: ../../ref/request-response.txt:862
# 6093119d37e1484a8598242238bfbcfd
msgid "This is always ``True``."
msgstr ""

#: ../../ref/settings.txt:11
# 6774f3076c7d4bf5ace2c61097a5e433
msgid "Be careful when you override settings, especially when the default value is a non-empty tuple or dictionary, such as :setting:`MIDDLEWARE_CLASSES` and :setting:`TEMPLATE_CONTEXT_PROCESSORS`. Make sure you keep the components required by the features of Django you wish to use."
msgstr ""

#: ../../ref/settings.txt:17
# 8146c3182e434c759e7661cf2e75093c
msgid "Available settings"
msgstr ""

#: ../../ref/settings.txt:19
# 9eafb43d26664fa0a1545fde8ffa9e2f
msgid "Here's a full list of all available settings, in alphabetical order, and their default values."
msgstr ""

#: ../../ref/settings.txt:25
# 77403b52daf94e35818d2305e00c2b52
msgid "ABSOLUTE_URL_OVERRIDES"
msgstr ""

#: ../../ref/settings.txt:27
#: ../../ref/settings.txt:374
#: ../../ref/settings.txt:455
# b86c91fda81f42ecbe79014fa2c7c89a
# e4382b7132b64223b4948f031241cc34
# 7f600e1d889046fabbddd6e2eac7f6e1
msgid "Default: ``{}`` (Empty dictionary)"
msgstr ""

#: ../../ref/settings.txt:29
# ca248ef4db724941b23cb747efbc52dd
msgid "A dictionary mapping ``\"app_label.model_name\"`` strings to functions that take a model object and return its URL. This is a way of overriding ``get_absolute_url()`` methods on a per-installation basis. Example::"
msgstr ""

#: ../../ref/settings.txt:38
# a8fd4acfa55848d2a4002512b368e710
msgid "Note that the model name used in this setting should be all lower-case, regardless of the case of the actual model class name."
msgstr ""

#: ../../ref/settings.txt:44
# 74a5bd0400d14b3abe11f105aecb376f
msgid "ADMIN_FOR"
msgstr ""

#: ../../ref/settings.txt:46
#: ../../ref/settings.txt:59
#: ../../ref/settings.txt:76
#: ../../ref/settings.txt:879
#: ../../ref/settings.txt:1062
#: ../../ref/settings.txt:1136
#: ../../ref/settings.txt:1156
#: ../../ref/settings.txt:1235
#: ../../ref/settings.txt:1333
#: ../../ref/settings.txt:1477
#: ../../ref/settings.txt:1921
# 24bb35f62d014fa0bf4a94181229af6f
# 3a918d21456e456d89a14a0b572bad56
# 9d724219574144dba5f86b3166eb0560
# 36d6ef95b44a4a8daed2d1ff25ec7bc5
# 8077e2a6bcf14699bffc18271d1cdba0
# cc60d24c29f04b4c8fbf3743457dfaf1
# fd0ba4f5f5564582aa8b9c33b2fbebd5
# ffa9a03735bd465893e89495c88b50d6
# 5e1ce46e055e477c86e507a5384a754c
# 2052af776a4e4749a57b80f0aa76ee0f
# 879e0624773445439cae79eb49cd47e9
msgid "Default: ``()`` (Empty tuple)"
msgstr ""

#: ../../ref/settings.txt:48
# 4836a012b11d4f969e9c8199eeaf4263
msgid "Used for admin-site settings modules, this should be a tuple of settings modules (in the format ``'foo.bar.baz'``) for which this site is an admin."
msgstr ""

#: ../../ref/settings.txt:51
# 4bd1e4dc6944419687d9f2ff2743e6eb
msgid "The admin site uses this in its automatically-introspected documentation of models, views and template tags."
msgstr ""

#: ../../ref/settings.txt:57
# e78a7f5f452347d6b4c87e9298655a96
msgid "ADMINS"
msgstr ""

#: ../../ref/settings.txt:61
# 1807b68b2fd74834832228fc11686fa6
msgid "A tuple that lists people who get code error notifications. When ``DEBUG=False`` and a view raises an exception, Django will email these people with the full exception information. Each member of the tuple should be a tuple of (Full name, email address). Example::"
msgstr ""

#: ../../ref/settings.txt:68
# 120d42d1faac479c97dcf8a88d43a06c
msgid "Note that Django will email *all* of these people whenever an error happens. See :doc:`/howto/error-reporting` for more information."
msgstr ""

#: ../../ref/settings.txt:74
# 3e5ae622bd6f492fab31e6e4331cf491
msgid "ALLOWED_INCLUDE_ROOTS"
msgstr ""

#: ../../ref/settings.txt:78
# 5b0bc1aac5434fbca5aa512a52e2514a
msgid "A tuple of strings representing allowed prefixes for the ``{% ssi %}`` template tag. This is a security measure, so that template authors can't access files that they shouldn't be accessing."
msgstr ""

#: ../../ref/settings.txt:82
# c54bc60a608c4be2a2f47fe51578bc26
msgid "For example, if :setting:`ALLOWED_INCLUDE_ROOTS` is ``('/home/html', '/var/www')``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% ssi /etc/passwd %}`` wouldn't."
msgstr ""

#: ../../ref/settings.txt:89
# ba2f332d27dd4790a9f8bd87190d76aa
msgid "APPEND_SLASH"
msgstr ""

#: ../../ref/settings.txt:91
#: ../../ref/settings.txt:570
#: ../../ref/settings.txt:594
#: ../../ref/settings.txt:1657
#: ../../ref/settings.txt:2087
# 842a7e604022405e97d81560b0914d86
# b54d10140aec4e7aa4fcb5d7d629c94e
# ee8903a327424d10b87878a22015f803
# c06fa5684a6b4efa85867207a9c1976a
# 989b87407c9c47308099a6b3bc7ca136
msgid "Default: ``True``"
msgstr ""

#: ../../ref/settings.txt:93
# ea8e6a922adc45bd88064562877ae810
msgid "When set to ``True``, if the request URL does not match any of the patterns in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to the same URL with a slash appended. Note that the redirect may cause any data submitted in a POST request to be lost."
msgstr ""

#: ../../ref/settings.txt:98
# 97c38c835b59438d8c734698e3de34b9
msgid "The :setting:`APPEND_SLASH` setting is only used if :class:`~django.middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/middleware`). See also :setting:`PREPEND_WWW`."
msgstr ""

#: ../../ref/settings.txt:105
# 1b5ebc5742f540bd9a170f9ffab8e46a
msgid "AUTHENTICATION_BACKENDS"
msgstr ""

#: ../../ref/settings.txt:107
# ac20f052e9a74e208c4b7fbfa34f5efd
msgid "Default: ``('django.contrib.auth.backends.ModelBackend',)``"
msgstr ""

#: ../../ref/settings.txt:109
# 188473b53480496282ed3da4896c73e4
msgid "A tuple of authentication backend classes (as strings) to use when attempting to authenticate a user. See the :doc:`authentication backends documentation </ref/authbackends>` for details."
msgstr ""

#: ../../ref/settings.txt:116
# 7789d518e57d4a4a96c2a8fe591dadb8
msgid "AUTH_USER_MODEL"
msgstr ""

#: ../../ref/settings.txt:118
# 351561a030c14082b0eb4241cb975bfe
msgid "Default: 'auth.User'"
msgstr ""

#: ../../ref/settings.txt:120
# acc97fc0cf7941e0b4e26aceff954545
msgid "The model to use to represent a User. See :ref:`auth-custom-user`."
msgstr ""

#: ../../ref/settings.txt:125
# f545ed6657934b069a40df452d981a3f
msgid "CACHES"
msgstr ""

#: ../../ref/settings.txt:135
# 1def4b195b8540e59ebf2856c1216f8c
msgid "A dictionary containing the settings for all caches to be used with Django. It is a nested dictionary whose contents maps cache aliases to a dictionary containing the options for an individual cache."
msgstr ""

#: ../../ref/settings.txt:139
# 6f5cec914a084c2cb51180449b5ad66e
msgid "The :setting:`CACHES` setting must configure a ``default`` cache; any number of additional caches may also be specified. If you are using a cache backend other than the local memory cache, or you need to define multiple caches, other options will be required. The following cache options are available."
msgstr ""

#: ../../ref/settings.txt:148
# baabc039eb5c48b68b890cdbd0ceea2f
msgid "BACKEND"
msgstr ""

#: ../../ref/settings.txt:150
#: ../../ref/settings.txt:189
#: ../../ref/settings.txt:201
#: ../../ref/settings.txt:278
#: ../../ref/settings.txt:401
#: ../../ref/settings.txt:421
#: ../../ref/settings.txt:444
#: ../../ref/settings.txt:469
#: ../../ref/settings.txt:478
#: ../../ref/settings.txt:488
#: ../../ref/settings.txt:859
#: ../../ref/settings.txt:869
#: ../../ref/settings.txt:921
#: ../../ref/settings.txt:935
#: ../../ref/settings.txt:1343
#: ../../ref/settings.txt:1357
#: ../../ref/settings.txt:1513
#: ../../ref/settings.txt:1831
#: ../../ref/settings.txt:1951
# 0ebb76ec13534744849c7b6c6f8c30be
# f5b96287ef954f199c99038e758ad273
# 4d8d21bc5a5c41ce8515df84ceae4796
# 04ca7086afd54f728ca815bdfbdd9856
# dc0540bb71044a12a8052104fdc5fbdf
# 07d89f19b95f462fab6b33825452a8f4
# baa4a688f9ce471881675d18b4b21a66
# bf62c049464748d8a3dd80fa75a5c203
# e5cb62ba79174afcb1ea33d3b357125f
# bd376ddb997d467992dec7aa4c03f1a4
# 36e89b745c5645dcbc4d552f74bf5592
# 0d0109aa970741349e35c48e9d0c2334
# 5939a8d050364fba8fdd34faeddeedc4
# e29c880dcad948daaee4453c9bd6698b
# 240db4999c0344f0baf69ffd69b53302
# 0a1458ba8f5a476cb1473985cebfa503
# aa6666268de045d3ac929346604a5742
# dfb9d6fe863e42f28c6d831226d65a36
# 19a7a16341e348089400091158a127f4
msgid "Default: ``''`` (Empty string)"
msgstr ""

#: ../../ref/settings.txt:152
# ba2282930ca34e10a47c26ab13a7fec5
msgid "The cache backend to use. The built-in cache backends are:"
msgstr ""

#: ../../ref/settings.txt:154
# eb6e12cc0e274f8cb1fd9796c3e0c4c9
msgid "``'django.core.cache.backends.db.DatabaseCache'``"
msgstr ""

#: ../../ref/settings.txt:155
# 67dadfb9a6ae474d8a20fb83b6332076
msgid "``'django.core.cache.backends.dummy.DummyCache'``"
msgstr ""

#: ../../ref/settings.txt:156
# ee2b9cb302df4227adb169a65f14393b
msgid "``'django.core.cache.backends.filebased.FileBasedCache'``"
msgstr ""

#: ../../ref/settings.txt:157
# af5c06b82eff47e08e25e3d5c1f28946
msgid "``'django.core.cache.backends.locmem.LocMemCache'``"
msgstr ""

#: ../../ref/settings.txt:158
# c09b90e28ca549c9a15ef763a7d580c2
msgid "``'django.core.cache.backends.memcached.MemcachedCache'``"
msgstr ""

#: ../../ref/settings.txt:159
# 2025347c485a4a3b86bfd777341c455e
msgid "``'django.core.cache.backends.memcached.PyLibMCCache'``"
msgstr ""

#: ../../ref/settings.txt:161
# da4e160cd2794c3b86a87b16a7f1debd
msgid "You can use a cache backend that doesn't ship with Django by setting :setting:`BACKEND <CACHE-BACKEND>` to a fully-qualified path of a cache backend class (i.e. ``mypackage.backends.whatever.WhateverCache``). Writing a whole new cache backend from scratch is left as an exercise to the reader; see the other backends for examples."
msgstr ""

#: ../../ref/settings.txt:170
# 0295614c8ac5488698958ed7e08fac4f
msgid "KEY_FUNCTION"
msgstr ""

#: ../../ref/settings.txt:172
# 5a8d2080152e401e946290bafd9a469f
msgid "A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key. The default implementation is equivalent to the function::"
msgstr ""

#: ../../ref/settings.txt:179
# ff4d92c533ba4762adbc306b238cb206
msgid "You may use any key function you want, as long as it has the same argument signature."
msgstr ""

#: ../../ref/settings.txt:182
# 175d8df4854b46558d9e9142ce654432
msgid "See the :ref:`cache documentation <cache_key_transformation>` for more information."
msgstr ""

#: ../../ref/settings.txt:187
# a1f78f25618f494ea9b3f25da91d33fc
msgid "KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:191
# 0e1095a327fa4c7a853b6526e2752f62
msgid "A string that will be automatically included (prepended by default) to all cache keys used by the Django server."
msgstr ""

#: ../../ref/settings.txt:194
# 958bced1510d4250965e8904a5abb905
msgid "See the :ref:`cache documentation <cache_key_prefixing>` for more information."
msgstr ""

#: ../../ref/settings.txt:199
# 33e3b1404959453980c8cbb87692a38a
msgid "LOCATION"
msgstr ""

#: ../../ref/settings.txt:203
# 17109d935c9a47398fc7b40d9b04b3ed
msgid "The location of the cache to use. This might be the directory for a file system cache, a host and port for a memcache server, or simply an identifying name for a local memory cache. e.g.::"
msgstr ""

#: ../../ref/settings.txt:217
#: ../../ref/settings.txt:453
# 99a3e5c6dcd7494bab6f765da9b3b57f
# 430b9b04d89242828ea4e81946d8bd94
msgid "OPTIONS"
msgstr ""

#: ../../ref/settings.txt:219
# 80f9e39cf8754c81847de1df44587224
msgid "Default: None"
msgstr ""

#: ../../ref/settings.txt:221
# 3efa162e820747e899216b0b906a2d09
msgid "Extra parameters to pass to the cache backend. Available parameters vary depending on your cache backend."
msgstr ""

#: ../../ref/settings.txt:224
# 6b88d3812de146b290afa98b9bedcca7
msgid "Some information on available parameters can be found in the :doc:`Cache Backends </topics/cache>` documentation. For more information, consult your backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:231
# b5d78ebe2404406386b8e30d319e6f18
msgid "TIMEOUT"
msgstr ""

#: ../../ref/settings.txt:233
# 95d7309544444356b708d5034bc2726e
msgid "Default: 300"
msgstr ""

#: ../../ref/settings.txt:235
# 05c6dd49403f4c65b3fb2af396333755
msgid "The number of seconds before a cache entry is considered stale."
msgstr ""

#: ../../ref/settings.txt:240
# a2e2005848bd405a9c2fb41e1e263184
msgid "VERSION"
msgstr ""

#: ../../ref/settings.txt:242
# cdc700c9223541a0a2006a56fe908ad8
msgid "Default: ``1``"
msgstr ""

#: ../../ref/settings.txt:244
# efcb188a762242669e6ba4e0d1d42dfb
msgid "The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../ref/settings.txt:246
# c8a41fbe399044fbb8b681af06425c20
msgid "See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../ref/settings.txt:251
# 598b17c9e7ea45e2830b94709f814f8f
msgid "CACHE_MIDDLEWARE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:253
#: ../../ref/settings.txt:1704
# 3db393a7820748f8b0a14f50ff200950
# be87b56334a44c3883b2aacae8ca84e7
msgid "Default: ``default``"
msgstr ""

#: ../../ref/settings.txt:255
# 08a73e459c504b398991725f29eef021
msgid "The cache connection to use for the cache middleware."
msgstr ""

#: ../../ref/settings.txt:260
# 4f98900b0e6f4960808c4eee9984b457
msgid "CACHE_MIDDLEWARE_ANONYMOUS_ONLY"
msgstr ""

#: ../../ref/settings.txt:264
# 9100f6d4394b4839b8b48a0b81dd29d7
msgid "If the value of this setting is ``True``, only anonymous requests (i.e., not those made by a logged-in user) will be cached.  Otherwise, the middleware caches every page that doesn't have GET or POST parameters."
msgstr ""

#: ../../ref/settings.txt:268
# 2967ed2256f34c818f3bf4a59d081049
msgid "If you set the value of this setting to ``True``, you should make sure you've activated ``AuthenticationMiddleware``."
msgstr ""

#: ../../ref/settings.txt:271
#: ../../ref/settings.txt:282
#: ../../ref/settings.txt:294
# 76e078e3fb844a36918929f3a43020ff
# 89515df1f57442b0afaaac0ce2422550
# 210e8460d63244318fc92474f6c7644d
msgid "See :doc:`/topics/cache`."
msgstr ""

#: ../../ref/settings.txt:276
# 88132347f8f1442984e5a49f490be023
msgid "CACHE_MIDDLEWARE_KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:280
# 17fbcc29a28b47b7aa8afd4ea737bae0
msgid "The cache key prefix that the cache middleware should use."
msgstr ""

#: ../../ref/settings.txt:287
# bbb31cc36a4d427186f3b4575ae472c2
msgid "CACHE_MIDDLEWARE_SECONDS"
msgstr ""

#: ../../ref/settings.txt:289
# 0d01ee254c614b2db3f8adee3e86a1e2
msgid "Default: ``600``"
msgstr ""

#: ../../ref/settings.txt:291
# 20db8b17a81543ea8a11cab3ed3325af
msgid "The default number of seconds to cache a page when the caching middleware or ``cache_page()`` decorator is used."
msgstr ""

#: ../../ref/settings.txt:303
# a4438572448d4c89b51edef345b563b6
msgid "The domain to be used when setting the CSRF cookie.  This can be useful for easily allowing cross-subdomain requests to be excluded from the normal cross site request forgery protection.  It should be set to a string such as ``\".example.com\"`` to allow a POST request from a form on one subdomain to be accepted by accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/settings.txt:309
# e5c082b8293744528cc23b75cf9a866c
msgid "Please note that the presence of this setting does not imply that Django's CSRF protection is safe from cross-subdomain attacks by default - please see the :ref:`CSRF limitations <csrf-limitations>` section."
msgstr ""

#: ../../ref/settings.txt:320
# c1059834ab654542b4a3ffe7c6f6b9cb
msgid "The name of the cookie to use for the CSRF authentication token. This can be whatever you want.  See :doc:`/ref/contrib/csrf`."
msgstr ""

#: ../../ref/settings.txt:364
# b4eca316982e4e7ab41d9c97fbce1db9
msgid "where ``reason`` is a short message (intended for developers or logging, not for end users) indicating the reason the request was rejected.  See :doc:`/ref/contrib/csrf`."
msgstr ""

#: ../../ref/settings.txt:372
# bea76548cf644d62a0736550dfe161c6
msgid "DATABASES"
msgstr ""

#: ../../ref/settings.txt:376
# 011417a1dc8f40099828aef145aea355
msgid "A dictionary containing the settings for all databases to be used with Django. It is a nested dictionary whose contents maps database aliases to a dictionary containing the options for an individual database."
msgstr ""

#: ../../ref/settings.txt:380
# d50eb6a9146c4b0c8e05cc60f7a2c055
msgid "The :setting:`DATABASES` setting must configure a ``default`` database; any number of additional databases may also be specified."
msgstr ""

#: ../../ref/settings.txt:383
# 65c2514fd8784444beb26b80f1e55a75
msgid "The simplest possible settings file is for a single-database setup using SQLite. This can be configured using the following::"
msgstr ""

#: ../../ref/settings.txt:393
# dc1bda9c5dc44d42ac68eec42a53ed37
msgid "For other database backends, or more complex SQLite configurations, other options will be required. The following inner options are available."
msgstr ""

#: ../../ref/settings.txt:399
# 43ed3462311747b89cdcc8023552b2cd
msgid "ENGINE"
msgstr ""

#: ../../ref/settings.txt:403
# 7ac1fc23d9ad4c77928af7298d8226f0
msgid "The database backend to use. The built-in database backends are:"
msgstr ""

#: ../../ref/settings.txt:405
# ff386fe035fb4efeacf0c2fc952020ea
msgid "``'django.db.backends.postgresql_psycopg2'``"
msgstr ""

#: ../../ref/settings.txt:406
# 6dda4a695041484081d63928789c6a8c
msgid "``'django.db.backends.mysql'``"
msgstr ""

#: ../../ref/settings.txt:407
# 15fbe75bcada4edb93013a90f3a0f1d2
msgid "``'django.db.backends.sqlite3'``"
msgstr ""

#: ../../ref/settings.txt:408
# 3c797db2bb87493d83f1772e91471768
msgid "``'django.db.backends.oracle'``"
msgstr ""

#: ../../ref/settings.txt:410
# 7f8d60cc761e4bbb8ab0f78ddc6314fb
msgid "You can use a database backend that doesn't ship with Django by setting ``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``). Writing a whole new database backend from scratch is left as an exercise to the reader; see the other backends for examples."
msgstr ""

#: ../../ref/settings.txt:419
# 6fbaf434036048b6aff62d68839ba2c4
msgid "HOST"
msgstr ""

#: ../../ref/settings.txt:423
# d16d628b23bc48979886dc8ab723012b
msgid "Which host to use when connecting to the database. An empty string means localhost. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:426
# 342f9ba3a51542439b152b25baa95604
msgid "If this value starts with a forward slash (``'/'``) and you're using MySQL, MySQL will connect via a Unix socket to the specified socket. For example::"
msgstr ""

#: ../../ref/settings.txt:431
# 66bf377e04934d18b7f3b5186351289c
msgid "If you're using MySQL and this value *doesn't* start with a forward slash, then this value is assumed to be the host."
msgstr ""

#: ../../ref/settings.txt:434
# fd70af9a3e5145f1bb24c062487a2945
msgid "If you're using PostgreSQL, an empty string means to use a Unix domain socket for the connection, rather than a network connection to localhost. If you explicitly need to use a TCP/IP connection on the local machine with PostgreSQL, specify ``localhost`` here."
msgstr ""

#: ../../ref/settings.txt:442
# b4cf3fdace624e928848d3f8f12c7466
msgid "NAME"
msgstr ""

#: ../../ref/settings.txt:446
# 5e6392e34e6e4144aa7cb66f98fc4f93
msgid "The name of the database to use. For SQLite, it's the full path to the database file. When specifying the path, always use forward slashes, even on Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

#: ../../ref/settings.txt:457
# a80afd6105bd4fe7a9154745d7207a2f
msgid "Extra parameters to use when connecting to the database. Available parameters vary depending on your database backend."
msgstr ""

#: ../../ref/settings.txt:460
# 10cee4c6f6f6477d8031c54e004fbb82
msgid "Some information on available parameters can be found in the :doc:`Database Backends </ref/databases>` documentation. For more information, consult your backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:467
# d86dea6cff344a9fa9d0dbbfe5bc34e9
msgid "PASSWORD"
msgstr ""

#: ../../ref/settings.txt:471
# 71fdabedd74749518711cfe7620c1729
msgid "The password to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:476
# cb43fc84ce384e1889876b8528557e18
msgid "PORT"
msgstr ""

#: ../../ref/settings.txt:480
# 33387d1f0ec5449bb799de4b39955e42
msgid "The port to use when connecting to the database. An empty string means the default port. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:486
# 9087504bc8dc41dcae39bb6df8e37e5c
msgid "USER"
msgstr ""

#: ../../ref/settings.txt:490
# 2cda3ad040da4c7a93167ab7b37e09f1
msgid "The username to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:495
# 83f3e4025d034cae933a8cd1164eeff2
msgid "TEST_CHARSET"
msgstr ""

#: ../../ref/settings.txt:499
# 42eb5145a682492cb63feda694229c67
msgid "The character set encoding used to create the test database. The value of this string is passed directly through to the database, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:503
# 82b898a60eb54535a0e894b0d291e032
msgid "Supported for the PostgreSQL_ (``postgresql_psycopg2``) and MySQL_ (``mysql``) backends."
msgstr ""

#: ../../ref/settings.txt:512
# 5181ca3e425c4139a67989c636556955
msgid "TEST_COLLATION"
msgstr ""

#: ../../ref/settings.txt:516
# 528b6ad9ef5c4f58b515ec13949a8a14
msgid "The collation order to use when creating the test database. This value is passed directly to the backend, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:519
# fb7a8b354d074043a8d75203ebdefafc
msgid "Only supported for the ``mysql`` backend (see the `MySQL manual`_ for details)."
msgstr ""

#: ../../ref/settings.txt:526
# 0f533d7d668f4d71b3aff27fd24a8a96
msgid "TEST_DEPENDENCIES"
msgstr ""

#: ../../ref/settings.txt:528
# f58daa326bb6461d9c4b09ef0ca4cc7a
msgid "Default: ``['default']``, for all databases other than ``default``, which has no dependencies."
msgstr ""

#: ../../ref/settings.txt:531
# 2c48985a1f554eb2a0b0d941d18f7519
msgid "The creation-order dependencies of the database. See the documentation on :ref:`controlling the creation order of test databases <topics-testing-creation-dependencies>` for details."
msgstr ""

#: ../../ref/settings.txt:538
# 5feed53e039044958e9b31d014f08540
msgid "TEST_MIRROR"
msgstr ""

#: ../../ref/settings.txt:542
# 007b30dabd6a4590b630789f62dd267d
msgid "The alias of the database that this database should mirror during testing."
msgstr ""

#: ../../ref/settings.txt:545
# 0c60ef9e44fc4712ab96ddc9c9d90b91
msgid "This setting exists to allow for testing of master/slave configurations of multiple databases. See the documentation on :ref:`testing master/slave configurations <topics-testing-masterslave>` for details."
msgstr ""

#: ../../ref/settings.txt:553
# 4e12d3972667450e898094cc49cfcb6f
msgid "TEST_NAME"
msgstr ""

#: ../../ref/settings.txt:557
# df44c25b4de843dcaf5a12815c06f2e7
msgid "The name of database to use when running the test suite."
msgstr ""

#: ../../ref/settings.txt:559
# 0962a23815094f11995dc5f19e40fd5c
msgid "If the default value (``None``) is used with the SQLite database engine, the tests will use a memory resident database. For all other database engines the test database will use the name ``'test_' + DATABASE_NAME``."
msgstr ""

#: ../../ref/settings.txt:563
# ee7c813a288c46b2824240bbfcad3441
msgid "See :doc:`/topics/testing`."
msgstr ""

#: ../../ref/settings.txt:568
# a2236964b6d049ae868e952bbd37aa51
msgid "TEST_CREATE"
msgstr ""

#: ../../ref/settings.txt:572
#: ../../ref/settings.txt:584
#: ../../ref/settings.txt:596
#: ../../ref/settings.txt:608
#: ../../ref/settings.txt:620
#: ../../ref/settings.txt:632
# 7b39fdfeb4024987960f5863cf47caec
# 9cb668100efa4e1a8ee5ac668634029c
# 183629fb3dba41e3808baff44e490423
# 4a71bc9392d44f3e9c92f223ba29c9b5
# 70ac5d8bb0fb4be8b253e3fd56adc978
# 5fef6b30175948ba9ca84a95e97bc352
msgid "This is an Oracle-specific setting."
msgstr ""

#: ../../ref/settings.txt:574
# 251e0bc9919844a794baf57db3907ab7
msgid "If it is set to ``False``, the test tablespaces won't be automatically created at the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:580
# e2a13fd266c344f0a9497e033c81e7fc
msgid "TEST_USER"
msgstr ""

#: ../../ref/settings.txt:586
# b0d59a13504247b49eefec5b998cb329
msgid "The username to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use ``'test_' + USER``."
msgstr ""

#: ../../ref/settings.txt:592
# b30bad883c604e689c28650b8e274f23
msgid "TEST_USER_CREATE"
msgstr ""

#: ../../ref/settings.txt:598
# 76048597f3a04c8cb1459ce360c89728
msgid "If it is set to ``False``, the test user won't be automatically created at the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:604
# 4fc6901f26744147b9988625311b07be
msgid "TEST_PASSWD"
msgstr ""

#: ../../ref/settings.txt:610
# 621c0a808d9047a9892424a8c9fd8601
msgid "The password to use when connecting to the Oracle database that will be used when running tests. If not provided, Django will use a hardcoded default value."
msgstr ""

#: ../../ref/settings.txt:616
# 9c04b1322e8c4302802ad5fb9bb930cf
msgid "TEST_TBLSPACE"
msgstr ""

#: ../../ref/settings.txt:622
# 0f3f12fbc7e24f89b351c3442b86d47c
msgid "The name of the tablespace that will be used when running tests. If not provided, Django will use ``'test_' + NAME``."
msgstr ""

#: ../../ref/settings.txt:628
# bce714e857f140e583a2473faacfab7b
msgid "TEST_TBLSPACE_TMP"
msgstr ""

#: ../../ref/settings.txt:634
# d15205e0e43d495b8cd16fa67249bf19
msgid "The name of the temporary tablespace that will be used when running tests. If not provided, Django will use ``'test_' + NAME + '_temp'``."
msgstr ""

#: ../../ref/settings.txt:640
# f0aa2a7936ee47fab13388bfa6083280
msgid "DATABASE_ROUTERS"
msgstr ""

#: ../../ref/settings.txt:642
# 278c35a80d3a4b3faacb591ec500116a
msgid "Default: ``[]`` (Empty list)"
msgstr ""

#: ../../ref/settings.txt:644
# 119c7aa8db58402da3c0c32627ecc6c9
msgid "The list of routers that will be used to determine which database to use when performing a database queries."
msgstr ""

#: ../../ref/settings.txt:647
# e850cd82602b476082ee3dfd0081b51d
msgid "See the documentation on :ref:`automatic database routing in multi database configurations <topics-db-multi-db-routing>`."
msgstr ""

#: ../../ref/settings.txt:653
# 50fc8a3d19d84de59f15520c1e008918
msgid "DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:655
# c4708b618d3341f3ae2e001dccb85866
msgid "Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)"
msgstr ""

#: ../../ref/settings.txt:657
# cd4103d8b8954cca95368384d63c46a1
msgid "The default formatting to use for displaying date fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:662
# 822f18d7987e45f6b8cdd074c3454705
msgid "See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:667
# 0fb17fe6eea84745ae1ec3042805cbcb
msgid "DATE_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:675
# 69d2b87d550d487daaebdced376298f3
msgid "A tuple of formats that will be accepted when inputting data on a date field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:680
#: ../../ref/settings.txt:717
#: ../../ref/settings.txt:2011
# a6c4e3a79a0045169bec45a047ffb691
# 9cb2c7e1dd284a3b819efafe61ae4443
# 05c1b0dc22f0441e9d25b3f4c493f02e
msgid "When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:683
# d29ec9556a64483cb3767320b712363e
msgid "See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:690
# 7992b12f8b5c42b5bd17447e357fb460
msgid "DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:692
# 800f1836e5cf44cbb04be90cfc34349a
msgid "Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:694
# f3864ee0dfcb41168aeeb191c6089505
msgid "The default formatting to use for displaying datetime fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:699
# 9a7552697b504316b0e492efd9c79bee
msgid "See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:704
# 910cc4753f524089b9216b7b63714981
msgid "DATETIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:712
# 3ed2a69723f34f1d985ba4021c568272
msgid "A tuple of formats that will be accepted when inputting data on a datetime field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:720
# c34cb375a5bf4e458d18871196c28aae
msgid "See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:727
# 2e4484c1a27f453a944b014e91aaa125
msgid "DEBUG"
msgstr ""

#: ../../ref/settings.txt:731
# 48d076a08a0b4996b0cb44cadb191663
msgid "A boolean that turns on/off debug mode."
msgstr ""

#: ../../ref/settings.txt:733
# 78dedd1a6c6940ab9c8b88d005dd19be
msgid "Never deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:735
# f575677201724e58844a5360a3ff6e4a
msgid "Did you catch that? NEVER deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:738
# d0a8bedcf1e64810a202462e73941d67
msgid "One of the main features of debug mode is the display of detailed error pages. If your app raises an exception when :setting:`DEBUG` is ``True``, Django will display a detailed traceback, including a lot of metadata about your environment, such as all the currently defined Django settings (from ``settings.py``)."
msgstr ""

#: ../../ref/settings.txt:744
# 2e36d0cc51bf4f3e83356dc18801bf13
msgid "As a security measure, Django will *not* include settings that might be sensitive (or offensive), such as :setting:`SECRET_KEY` or :setting:`PROFANITIES_LIST`. Specifically, it will exclude any setting whose name includes any of the following:"
msgstr ""

#: ../../ref/settings.txt:749
# 4d447a611d664bfd8beaed11db874bd7
msgid "API"
msgstr ""

#: ../../ref/settings.txt:750
# 95cd90b8324a4b8da6df2f7aefe5c747
msgid "KEY"
msgstr ""

#: ../../ref/settings.txt:751
# 9ba615d3385d452aabc6920c88f01dcb
msgid "PASS"
msgstr ""

#: ../../ref/settings.txt:752
#: ../../ref/settings.txt:1475
# 7940ddd2c1cf4457a3e183131a05d358
# 3428db3bc3c3490db88c260f7e61e458
msgid "PROFANITIES_LIST"
msgstr ""

#: ../../ref/settings.txt:753
# a4441372fabe44afb307fda4b1e948d9
msgid "SECRET"
msgstr ""

#: ../../ref/settings.txt:754
# 6cc4681be4554345a4929e7e7d406573
msgid "SIGNATURE"
msgstr ""

#: ../../ref/settings.txt:755
# b83b8816e4a4481eb104230460b626aa
msgid "TOKEN"
msgstr ""

#: ../../ref/settings.txt:762
# c6d79578c1e04b8295b18ef4a4b346a5
msgid "Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD, just as ``'TOKEN'`` will also match TOKENIZED and so on."
msgstr ""

#: ../../ref/settings.txt:765
# dcd8c10a06194281bd914a5b86a5791b
msgid "Still, note that there are always going to be sections of your debug output that are inappropriate for public consumption. File paths, configuration options and the like all give attackers extra information about your server."
msgstr ""

#: ../../ref/settings.txt:769
# e5a63f66922e486f877df0fb7e17868a
msgid "It is also important to remember that when running with :setting:`DEBUG` turned on, Django will remember every SQL query it executes. This is useful when you're debugging, but it'll rapidly consume memory on a production server."
msgstr ""

#: ../../ref/settings.txt:776
# a036aeda9e514123bef155399c4e52a7
msgid "DEBUG_PROPAGATE_EXCEPTIONS"
msgstr ""

#: ../../ref/settings.txt:780
# 7b1efd87e0d049d9a2be66214f4b19f0
msgid "If set to True, Django's normal exception handling of view functions will be suppressed, and exceptions will propagate upwards.  This can be useful for some test setups, and should never be used on a live site."
msgstr ""

#: ../../ref/settings.txt:788
# f08b82d9de3c473ab19a81dea627557a
msgid "DECIMAL_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:790
# e7e9abde71e2435ca2bf58dedc0e9652
msgid "Default: ``'.'`` (Dot)"
msgstr ""

#: ../../ref/settings.txt:792
# 0c0bd1f981f34c5caf4c722d3e5bc1c7
msgid "Default decimal separator used when formatting decimal numbers."
msgstr ""

#: ../../ref/settings.txt:794
#: ../../ref/settings.txt:1445
#: ../../ref/settings.txt:1979
# 5d2594dffa95400c925e676c958228b2
# 51da30294d1041d5a922b860ca70a189
# 1b349119ec024201ba39506e525d4a6a
msgid "Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:797
# ff4beddf0a64458ea90bd7f1f71d50d2
msgid "See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:804
# 8512b05400314416acfa4bc681aaf9fb
msgid "DEFAULT_CHARSET"
msgstr ""

#: ../../ref/settings.txt:806
#: ../../ref/settings.txt:976
# 0d475d39d22d4a6887bbcbb869f424a2
# c3d67d89c378469d9c8e378fa8e03493
msgid "Default: ``'utf-8'``"
msgstr ""

#: ../../ref/settings.txt:808
# ef94286be84941be8131bde261d0f631
msgid "Default charset to use for all ``HttpResponse`` objects, if a MIME type isn't manually specified. Used with :setting:`DEFAULT_CONTENT_TYPE` to construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:815
# 27606433a6b849a68227bd6ffd0798b5
msgid "DEFAULT_CONTENT_TYPE"
msgstr ""

#: ../../ref/settings.txt:817
# 0451fdaaa5854474a90d615d7787185c
msgid "Default: ``'text/html'``"
msgstr ""

#: ../../ref/settings.txt:819
# 90de354bed434a408f1149eda04d920d
msgid "Default content type to use for all ``HttpResponse`` objects, if a MIME type isn't manually specified. Used with :setting:`DEFAULT_CHARSET` to construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:826
# ea6be8fe6ede4e17b39d863bdbaab441
msgid "DEFAULT_EXCEPTION_REPORTER_FILTER"
msgstr ""

#: ../../ref/settings.txt:828
# 0496af1319524e5f95d295a93660dc39
msgid "Default: :class:`django.views.debug.SafeExceptionReporterFilter`"
msgstr ""

#: ../../ref/settings.txt:830
# dd3d935a18b843efbecdfc4e1ff2b76d
msgid "Default exception reporter filter class to be used if none has been assigned to the :class:`HttpRequest` instance yet. See :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../ref/settings.txt:837
# a8c858b80a6341c6aa9e43de0be25c5b
msgid "DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../ref/settings.txt:839
# 0a8560ffa66441c5b19a4480f4833a65
msgid "Default: :class:`django.core.files.storage.FileSystemStorage`"
msgstr ""

#: ../../ref/settings.txt:841
# bf2af12166aa455cba9d3f471588e25e
msgid "Default file storage class to be used for any file-related operations that don't specify a particular storage system. See :doc:`/topics/files`."
msgstr ""

#: ../../ref/settings.txt:847
# d07db9d4a8594fa6a223062fc9ef1ffc
msgid "DEFAULT_FROM_EMAIL"
msgstr ""

#: ../../ref/settings.txt:849
# 271e7e1b9e9a42e3beb9e88a3160e9fe
msgid "Default: ``'webmaster@localhost'``"
msgstr ""

#: ../../ref/settings.txt:851
# 734d5eb0b41a47f8a989dac63efa37ad
msgid "Default email address to use for various automated correspondence from the site manager(s)."
msgstr ""

#: ../../ref/settings.txt:857
# 44518c85b96f431cbd904c8ad727e926
msgid "DEFAULT_INDEX_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:861
# c45419091b3d4b53887285252e58a8b5
msgid "Default tablespace to use for indexes on fields that don't specify one, if the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:867
# 665cb4a1134144f2ac8dd0f88d8878ce
msgid "DEFAULT_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:871
# 60990427a6d04dcf92d03b3d0eb92d2b
msgid "Default tablespace to use for models that don't specify one, if the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:877
# f6d6694cd817425ab5b09d944903677e
msgid "DISALLOWED_USER_AGENTS"
msgstr ""

#: ../../ref/settings.txt:881
# 811c3ead08804d369d8b17e6311797a8
msgid "List of compiled regular expression objects representing User-Agent strings that are not allowed to visit any page, systemwide. Use this for bad robots/crawlers. This is only used if ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:889
# f1f288abb78e49a58a2becd63b972f1c
msgid "EMAIL_BACKEND"
msgstr ""

#: ../../ref/settings.txt:891
# c292d9d53462479b9574b26bfaabf9d6
msgid "Default: ``'django.core.mail.backends.smtp.EmailBackend'``"
msgstr ""

#: ../../ref/settings.txt:893
# 65e1e80595fc4e68ac93a65be0b7854a
msgid "The backend to use for sending emails. For the list of available backends see :doc:`/topics/email`."
msgstr ""

#: ../../ref/settings.txt:899
# 440e9aa9bedd4f80ae75f94912f1e9eb
msgid "EMAIL_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:901
#: ../../ref/settings.txt:1501
#: ../../ref/settings.txt:1816
#: ../../ref/settings.txt:2225
# d522776afcab4beda309097ebe726a13
# 7d9f2cc204a542bcaf03b97c5a129d1f
# 7ddb1de5f70549c49017a9459fbc15bd
# e42c0bbd72894891bc695a9086129f31
msgid "Default: Not defined"
msgstr ""

#: ../../ref/settings.txt:903
# 31395c2604914bac95a61f7f98bbe17c
msgid "The directory used by the ``file`` email backend to store output files."
msgstr ""

#: ../../ref/settings.txt:908
# 088e0fcbed4d4acabee03e5645e5f90f
msgid "EMAIL_HOST"
msgstr ""

#: ../../ref/settings.txt:910
# 92948feb2042483f9d0505c1e9065530
msgid "Default: ``'localhost'``"
msgstr ""

#: ../../ref/settings.txt:912
# 6a6d955e74c6440abaa4fdd2b5a94631
msgid "The host to use for sending email."
msgstr ""

#: ../../ref/settings.txt:914
# 3c7d67c49b6147cfb98b24c47955f43e
msgid "See also :setting:`EMAIL_PORT`."
msgstr ""

#: ../../ref/settings.txt:919
# 0e1d318543e744feb50f5715805158be
msgid "EMAIL_HOST_PASSWORD"
msgstr ""

#: ../../ref/settings.txt:923
# 7fc37668898f4a4394e24ad48d04192f
msgid "Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This setting is used in conjunction with :setting:`EMAIL_HOST_USER` when authenticating to the SMTP server. If either of these settings is empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:928
# 68acfe03725444afabcb69c38b6a247f
msgid "See also :setting:`EMAIL_HOST_USER`."
msgstr ""

#: ../../ref/settings.txt:933
# befa219d79814fe7b04237a604e4005e
msgid "EMAIL_HOST_USER"
msgstr ""

#: ../../ref/settings.txt:937
# efb834be06ae4b1ba5ff95645aa362d9
msgid "Username to use for the SMTP server defined in :setting:`EMAIL_HOST`. If empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:940
# cf32e73de69542f48fc01fae2122ef12
msgid "See also :setting:`EMAIL_HOST_PASSWORD`."
msgstr ""

#: ../../ref/settings.txt:945
# c39beb2f60f64895bcfd05360190cc50
msgid "EMAIL_PORT"
msgstr ""

#: ../../ref/settings.txt:947
# a3b2d219a4a24804a21b19011829c76a
msgid "Default: ``25``"
msgstr ""

#: ../../ref/settings.txt:949
# fbc0dbbd295441cc8cb9b6eda120327c
msgid "Port to use for the SMTP server defined in :setting:`EMAIL_HOST`."
msgstr ""

#: ../../ref/settings.txt:954
# 7009a68a95dc42d0af32daee58064464
msgid "EMAIL_SUBJECT_PREFIX"
msgstr ""

#: ../../ref/settings.txt:956
# 9ef364f3256642d3944db348fabaf1e8
msgid "Default: ``'[Django] '``"
msgstr ""

#: ../../ref/settings.txt:958
# a516c469bbd64070a31d2f210f627ab5
msgid "Subject-line prefix for email messages sent with ``django.core.mail.mail_admins`` or ``django.core.mail.mail_managers``. You'll probably want to include the trailing space."
msgstr ""

#: ../../ref/settings.txt:965
# 7eccf6d0e5d74c378a2a3f95c592b20e
msgid "EMAIL_USE_TLS"
msgstr ""

#: ../../ref/settings.txt:969
# 7140cf153eb845a7b0587fd8ec7eed3d
msgid "Whether to use a TLS (secure) connection when talking to the SMTP server."
msgstr ""

#: ../../ref/settings.txt:974
# 5431c136c9dc4818b4c3422ed6d49c72
msgid "FILE_CHARSET"
msgstr ""

#: ../../ref/settings.txt:978
# 79849242a3244ec9a6112d0c20aa4530
msgid "The character encoding used to decode any files read from disk. This includes template files and initial SQL data files."
msgstr ""

#: ../../ref/settings.txt:984
# b8ec5e4a576249c7a6f71e83cbf48ebb
msgid "FILE_UPLOAD_HANDLERS"
msgstr ""

#: ../../ref/settings.txt:991
# 0a37438daa8e48b2acfbe8e982ebd611
msgid "A tuple of handlers to use for uploading. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:996
# 58e5adcf08884c50a4bbb4b21f34810b
msgid "FILE_UPLOAD_MAX_MEMORY_SIZE"
msgstr ""

#: ../../ref/settings.txt:998
# 8a72600e8ca54af48892a4f8b36c99f1
msgid "Default: ``2621440`` (i.e. 2.5 MB)."
msgstr ""

#: ../../ref/settings.txt:1000
# 680cb6f133324b0696d7ad1e54eef732
msgid "The maximum size (in bytes) that an upload will be before it gets streamed to the file system. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1006
# ed14bd2ecebd412fb62061131a82d1c7
msgid "FILE_UPLOAD_PERMISSIONS"
msgstr ""

#: ../../ref/settings.txt:1010
# e9529634434b492790924908152164ce
msgid "The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more information about what these modes mean, see the documentation for :func:`os.chmod`."
msgstr ""

#: ../../ref/settings.txt:1014
# c9e92e40f835458eb36a07fd71467699
msgid "If this isn't given or is ``None``, you'll get operating-system dependent behavior. On most platforms, temporary files will have a mode of ``0600``, and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../ref/settings.txt:1021
# 7b867b44f58a4560b30c864d9796c9a7
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../ref/settings.txt:1023
# f1ecc280e42d4aeda9edc3113dfd7f1a
msgid "If you're not familiar with file modes, please note that the leading ``0`` is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use ``644``, you'll get totally incorrect behavior."
msgstr ""

#: ../../ref/settings.txt:1032
# 389be0a0e7bc40a7a2dd05bd8211374a
msgid "FILE_UPLOAD_TEMP_DIR"
msgstr ""

#: ../../ref/settings.txt:1036
# 6b4eba2066a948f4b6b39208232703b4
msgid "The directory to store data temporarily while uploading files. If ``None``, Django will use the standard temporary directory for the operating system. For example, this will default to '/tmp' on \\*nix-style operating systems."
msgstr ""

#: ../../ref/settings.txt:1040
# e66e6d0cd4ac464fb7aebcf6112ab1a6
msgid "See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1045
# 57903be48acc42ee9078c06bdffbfa89
msgid "FIRST_DAY_OF_WEEK"
msgstr ""

#: ../../ref/settings.txt:1047
# f36bd60c1aaf413893bc37e0175f29ea
msgid "Default: ``0`` (Sunday)"
msgstr ""

#: ../../ref/settings.txt:1049
# 9b113a349b10461f9a7b0ebed425e4d5
msgid "Number representing the first day of the week. This is especially useful when displaying a calendar. This value is only used when not using format internationalization, or when a format cannot be found for the current locale."
msgstr ""

#: ../../ref/settings.txt:1054
# 7a41e75ff3f442c5928aaf25908ab004
msgid "The value must be an integer from 0 to 6, where 0 means Sunday, 1 means Monday and so on."
msgstr ""

#: ../../ref/settings.txt:1060
# 4bbfc87d808f4df9a2a9f65d86da4c2a
msgid "FIXTURE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1064
# 1c58f1681db84f0fad4fc9e983ecbfab
msgid "List of directories searched for fixture files, in addition to the ``fixtures`` directory of each application, in search order."
msgstr ""

#: ../../ref/settings.txt:1067
#: ../../ref/settings.txt:1926
#: ../../ref/templates/api.txt:554
# 5341e0e01506449cadc1005a15accd59
# 21610a75a61943a1999d127c70d106ef
# bfe7ff4dd6bb496d99366a14ddebb68b
msgid "Note that these paths should use Unix-style forward slashes, even on Windows."
msgstr ""

#: ../../ref/settings.txt:1069
# 3a551bd7e3b846eb9da8dc86e07329b3
msgid "See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`."
msgstr ""

#: ../../ref/settings.txt:1072
# 5f0b2b9c69a24066a5a5d0d0da58bd17
msgid "FORCE_SCRIPT_NAME"
msgstr ""

#: ../../ref/settings.txt:1076
# b07e9b2192e0440aaa7d61f119b73278
msgid "If not ``None``, this will be used as the value of the ``SCRIPT_NAME`` environment variable in any HTTP request. This setting can be used to override the server-provided value of ``SCRIPT_NAME``, which may be a rewritten version of the preferred value or not supplied at all."
msgstr ""

#: ../../ref/settings.txt:1084
# 09b06956a0b2477fa44c6d40fc909cd0
msgid "FORMAT_MODULE_PATH"
msgstr ""

#: ../../ref/settings.txt:1088
# 87c90f69575f48b096c9903f9af5878d
msgid "A full Python path to a Python package that contains format definitions for project locales. If not ``None``, Django will check for a ``formats.py`` file, under the directory named as the current locale, and will use the formats defined on this file."
msgstr ""

#: ../../ref/settings.txt:1093
# 41800f0e5f5f48bfbc59cb67a04f1eeb
msgid "For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``, and current language is ``en`` (English), Django will expect a directory tree like::"
msgstr ""

#: ../../ref/settings.txt:1104
# 8862be1db21544c9ac17f1896b30848c
msgid "Available formats are :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`YEAR_MONTH_FORMAT`, :setting:`MONTH_DAY_FORMAT`, :setting:`SHORT_DATE_FORMAT`, :setting:`SHORT_DATETIME_FORMAT`, :setting:`FIRST_DAY_OF_WEEK`, :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :setting:`NUMBER_GROUPING`."
msgstr ""

#: ../../ref/settings.txt:1114
# cf414e13561a4980915e1ecb0fd4a6e3
msgid "IGNORABLE_404_URLS"
msgstr ""

#: ../../ref/settings.txt:1118
# a74f8432705a4bb59aff8f8f3a9c4f26
msgid "Default: ``()``"
msgstr ""

#: ../../ref/settings.txt:1120
# f18a01914c3942f6ad05faf809b8eeba
msgid "List of compiled regular expression objects describing URLs that should be ignored when reporting HTTP 404 errors via email (see :doc:`/howto/error-reporting`). Regular expressions are matched against :meth:`request's full paths <django.http.HttpRequest.get_full_path>` (including query string, if any). Use this if your site does not provide a commonly requested file such as ``favicon.ico`` or ``robots.txt``, or if it gets hammered by script kiddies."
msgstr ""

#: ../../ref/settings.txt:1128
# 0656b265186a4c73b10bc88dc3c5e0f6
msgid "This is only used if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True`` and ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:1134
# 36e4fa6867bb4d9e880170eca65c1851
msgid "INSTALLED_APPS"
msgstr ""

#: ../../ref/settings.txt:1138
# f260742a006840418326d1ae82cfa5d1
msgid "A tuple of strings designating all applications that are enabled in this Django installation. Each string should be a full Python path to a Python package that contains a Django application, as created by :djadmin:`django-admin.py startapp <startapp>`."
msgstr ""

#: ../../ref/settings.txt:1145
# e8d560d785614885b74c86aed5a6412a
msgid "The application names (that is, the final dotted part of the path to the module containing ``models.py``) defined in :setting:`INSTALLED_APPS` *must* be unique. For example, you can't include both ``django.contrib.auth`` and ``myproject.auth`` in INSTALLED_APPS."
msgstr ""

#: ../../ref/settings.txt:1154
# 6de8861a81fb49978afce9463a0691f5
msgid "INTERNAL_IPS"
msgstr ""

#: ../../ref/settings.txt:1158
# 8cde9d5b96754e56ab4ad7e0f5716125
msgid "A tuple of IP addresses, as strings, that:"
msgstr ""

#: ../../ref/settings.txt:1160
# 59352c8f7bd64605be9fe1b9314a8a91
msgid "See debug comments, when :setting:`DEBUG` is ``True``"
msgstr ""

#: ../../ref/settings.txt:1161
# f7d19fbc444d46698817fde38b1a0e1b
msgid "Receive X headers if the ``XViewMiddleware`` is installed (see :doc:`/topics/http/middleware`)"
msgstr ""

#: ../../ref/settings.txt:1167
# 1b80f94cdde84fbeb4d5ee8f7fe6082a
msgid "LANGUAGE_CODE"
msgstr ""

#: ../../ref/settings.txt:1169
# 9cb5a9cd0f1246f4bdae202bca0e6a01
msgid "Default: ``'en-us'``"
msgstr ""

#: ../../ref/settings.txt:1171
# c0867c7c9e384c8c89de92aa18bf03c7
msgid "A string representing the language code for this installation. This should be in standard :term:`language format<language code>`. For example, U.S. English is ``\"en-us\"``. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1178
# 715408b9d0634492b6fe2faeae61dfb5
msgid "LANGUAGE_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1180
# 279ab30775004afdbae2df34fb670f0c
msgid "Default: ``'django_language'``"
msgstr ""

#: ../../ref/settings.txt:1182
# b34a3b411f734905837a483a54cec8e8
msgid "The name of the cookie to use for the language cookie. This can be whatever you want (but should be different from :setting:`SESSION_COOKIE_NAME`). See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1189
# fd24fd227309405b9ad8824d0db14d02
msgid "LANGUAGES"
msgstr ""

#: ../../ref/settings.txt:1191
# 2e1f004dc1624b65941455f32f03e2ac
msgid "Default: A tuple of all available languages. This list is continually growing and including a copy here would inevitably become rapidly out of date. You can see the current list of translated languages by looking in ``django/conf/global_settings.py`` (or view the `online source`_)."
msgstr ""

#: ../../ref/settings.txt:1198
# 5bf4f18adc00449b80a606f2f1a5f360
msgid "The list is a tuple of two-tuples in the format ``(language code, language name)``, the ``language code`` part should be a :term:`language name<language code>` -- for example, ``('ja', 'Japanese')``. This specifies which languages are available for language selection. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1204
# 8ad45c6d68954516bc31921f732f103d
msgid "Generally, the default value should suffice. Only set this setting if you want to restrict language selection to a subset of the Django-provided languages."
msgstr ""

#: ../../ref/settings.txt:1207
# fdb66900ebad43259889fe75e975e915
msgid "If you define a custom :setting:`LANGUAGES` setting, it's OK to mark the languages as translation strings (as in the default value referred to above) -- but use a \"dummy\" ``gettext()`` function, not the one in ``django.utils.translation``. You should *never* import ``django.utils.translation`` from within your settings file, because that module in itself depends on the settings, and that would cause a circular import."
msgstr ""

#: ../../ref/settings.txt:1215
# 5bc5b52408b84947a91cd1d94e0e4171
msgid "The solution is to use a \"dummy\" ``gettext()`` function. Here's a sample settings file::"
msgstr ""

#: ../../ref/settings.txt:1225
# a6d34df95f0b4b809d392269a7d14fe2
msgid "With this arrangement, ``django-admin.py makemessages`` will still find and mark these strings for translation, but the translation won't happen at runtime -- so you'll have to remember to wrap the languages in the *real* ``gettext()`` in any code that uses :setting:`LANGUAGES` at runtime."
msgstr ""

#: ../../ref/settings.txt:1233
# b8298710975c421bbf04352893811a4a
msgid "LOCALE_PATHS"
msgstr ""

#: ../../ref/settings.txt:1237
# 94210a2f861545bc9f108960cdfadc5d
msgid "A tuple of directories where Django looks for translation files. See :ref:`how-django-discovers-translations`."
msgstr ""

#: ../../ref/settings.txt:1247
# 7ea496ccbe014e9c8fe32a28efd75a7a
msgid "Django will look within each of these paths for the ``<locale_code>/LC_MESSAGES`` directories containing the actual translation files."
msgstr ""

#: ../../ref/settings.txt:1253
# 7233e8e71ab642fdaad2c266db0acf5b
msgid "LOGGING"
msgstr ""

#: ../../ref/settings.txt:1255
# 4634e48b24aa4c77a35cc159e72245a6
msgid "Default: A logging configuration dictionary."
msgstr ""

#: ../../ref/settings.txt:1257
# f960341618c64fc78e937051855fdeee
msgid "A data structure containing configuration information. The contents of this data structure will be passed as the argument to the configuration method described in :setting:`LOGGING_CONFIG`."
msgstr ""

#: ../../ref/settings.txt:1261
# ac04b8eb239d4f278bdb191dbbbacb9e
msgid "The default logging configuration passes HTTP 500 server errors to an email log handler; all other log messages are given to a NullHandler."
msgstr ""

#: ../../ref/settings.txt:1267
# 2d2443a5d63146569e56d6d2fa570d16
msgid "LOGGING_CONFIG"
msgstr ""

#: ../../ref/settings.txt:1269
# 54cb5088284b44f5922b8cf504c3583f
msgid "Default: ``'django.utils.log.dictConfig'``"
msgstr ""

#: ../../ref/settings.txt:1271
# 6e8607c384f44b9181b57a43aa59527d
msgid "A path to a callable that will be used to configure logging in the Django project. Points at a instance of Python's `dictConfig`_ configuration method by default."
msgstr ""

#: ../../ref/settings.txt:1275
# 5d6308c9bb7c404d8313c2f28d8789c4
msgid "If you set :setting:`LOGGING_CONFIG` to ``None``, the logging configuration process will be skipped."
msgstr ""

#: ../../ref/settings.txt:1283
# cda6dedc2ef347b582686080084e1808
msgid "LOGIN_REDIRECT_URL"
msgstr ""

#: ../../ref/settings.txt:1285
# 5b85a537893d4b938626201d0129f17d
msgid "Default: ``'/accounts/profile/'``"
msgstr ""

#: ../../ref/settings.txt:1287
# cf9b702e810f42d6ac55e075da7edd19
msgid "The URL where requests are redirected after login when the ``contrib.auth.login`` view gets no ``next`` parameter."
msgstr ""

#: ../../ref/settings.txt:1290
# 8097c26a05de43c589eb6787b5d6b4e2
msgid "This is used by the :func:`~django.contrib.auth.decorators.login_required` decorator, for example."
msgstr ""

#: ../../ref/settings.txt:1295
#: ../../ref/settings.txt:1313
# 9c0621cd86d547908004f0757a180926
# 3bb96e47145944a49e0e8a341b0a4c19
msgid "This setting now also accepts view function names and :ref:`named URL patterns <naming-url-patterns>` which can be used to reduce configuration duplication since you no longer have to define the URL in two places (``settings`` and URLconf). For backward compatibility reasons the default remains unchanged."
msgstr ""

#: ../../ref/settings.txt:1304
# aeb55cb4e96c4103923387b9f9de92bb
msgid "LOGIN_URL"
msgstr ""

#: ../../ref/settings.txt:1306
# 6f53d38f3db94bdc8b3111bff5e305d7
msgid "Default: ``'/accounts/login/'``"
msgstr ""

#: ../../ref/settings.txt:1308
# f144379638b94f159a35667b71c7e05d
msgid "The URL where requests are redirected for login, especially when using the :func:`~django.contrib.auth.decorators.login_required` decorator."
msgstr ""

#: ../../ref/settings.txt:1322
# fbe34eb3dfd44d3ea9d9b144d94bf489
msgid "LOGOUT_URL"
msgstr ""

#: ../../ref/settings.txt:1324
# c17490d1eec54dce8e80474dc96cb40e
msgid "Default: ``'/accounts/logout/'``"
msgstr ""

#: ../../ref/settings.txt:1326
# 4b73002c649c49bbb9d0481fc25849b9
msgid "LOGIN_URL counterpart."
msgstr ""

#: ../../ref/settings.txt:1331
# 8c2daea45d504fd68778e009a40a3088
msgid "MANAGERS"
msgstr ""

#: ../../ref/settings.txt:1335
# 8244831e719f46ae9ae7aa3c9dff93b1
msgid "A tuple in the same format as :setting:`ADMINS` that specifies who should get broken-link notifications when :setting:`SEND_BROKEN_LINK_EMAILS` is ``True``."
msgstr ""

#: ../../ref/settings.txt:1341
# 392f45ffa1b0453abd4059c09755544e
msgid "MEDIA_ROOT"
msgstr ""

#: ../../ref/settings.txt:1345
# 41d1dd09fe3d4998bb470c90f2b8bfb5
msgid "Absolute filesystem path to the directory that will hold :doc:`user-uploaded files </topics/files>`."
msgstr ""

#: ../../ref/settings.txt:1348
# 15579fae1e0f46c7b4342fa6c9316b4f
msgid "Example: ``\"/var/www/example.com/media/\"``"
msgstr ""

#: ../../ref/settings.txt:1350
# 20d18b03280844c1a32a71189f821b92
msgid "See also :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/settings.txt:1355
# c015321f14c64ef1b4bd575165aed559
msgid "MEDIA_URL"
msgstr ""

#: ../../ref/settings.txt:1359
# b724a65a7fa34fa8b6b077221d945928
msgid "URL that handles the media served from :setting:`MEDIA_ROOT`, used for :doc:`managing stored files </topics/files>`. It must end in a slash if set to a non-empty value."
msgstr ""

#: ../../ref/settings.txt:1363
# b817f29646f14bd28fad8ba068f21e52
msgid "Example: ``\"http://media.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1368
# 630c3abcc4d942f5af21c1c2267311b1
msgid "Default: `messages.INFO`"
msgstr ""

#: ../../ref/settings.txt:1370
# 242e3b0fb704450b8908f67d2ff2567c
msgid "Sets the minimum message level that will be recorded by the messages framework. See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1379
# d4950051f7f34360be8dbc8912bbc520
msgid "Controls where Django stores message data.  See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1393
# 6797bf4b233b451d8e79e09016447f78
msgid "Sets the mapping of message levels to message tags. See the :doc:`messages documentation </ref/contrib/messages>` for more details."
msgstr ""

#: ../../ref/settings.txt:1399
# 620896901d7a492caa5228fe9d403b84
msgid "MIDDLEWARE_CLASSES"
msgstr ""

#: ../../ref/settings.txt:1409
# 29a0166269dd4fd09ea12478383c6bbc
msgid "A tuple of middleware classes to use. See :doc:`/topics/http/middleware`."
msgstr ""

#: ../../ref/settings.txt:1414
# 2dfd9e6748ee4900a57b2a7c9536e14d
msgid "MONTH_DAY_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1416
# 46c9fac294ab43fbb37d1c2b3b867fb7
msgid "Default: ``'F j'``"
msgstr ""

#: ../../ref/settings.txt:1418
# 7f21410a53774a628efad9210b40f9d3
msgid "The default formatting to use for date fields on Django admin change-list pages -- and, possibly, by other parts of the system -- in cases when only the month and day are displayed."
msgstr ""

#: ../../ref/settings.txt:1422
# b4a3c11cc9084f4ba83b0fbc331252e5
msgid "For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given day displays the day and month. Different locales have different formats. For example, U.S. English would say \"January 1,\" whereas Spanish might say \"1 Enero.\""
msgstr ""

#: ../../ref/settings.txt:1427
# c46d3a09c55843e8ba0e48f50667ec61
msgid "See :tfilter:`allowed date format strings <date>`. See also :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`YEAR_MONTH_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1434
# 7c8ce37367ea4381b66b12a2bdee9eb1
msgid "NUMBER_GROUPING"
msgstr ""

#: ../../ref/settings.txt:1436
# bad256538c7b46839056a7e5fc7ba6d2
msgid "Default: ``0``"
msgstr ""

#: ../../ref/settings.txt:1438
# 6a44c5c61d40445099d1fa7b22a2632d
msgid "Number of digits grouped together on the integer part of a number."
msgstr ""

#: ../../ref/settings.txt:1440
# fba488fd4dad4a61804a26186925c598
msgid "Common use is to display a thousand separator. If this setting is ``0``, then no grouping will be applied to the number. If this setting is greater than ``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator between those groups."
msgstr ""

#: ../../ref/settings.txt:1448
# 64a840ccc48f49cf9ff9b521051e57b0
msgid "See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:1454
# 5f717c1bba0d47f8a7f4a5bd68618d04
msgid "PASSWORD_RESET_TIMEOUT_DAYS"
msgstr ""

#: ../../ref/settings.txt:1456
# b0687e8131ca4d16826d72a71d05b83f
msgid "Default: ``3``"
msgstr ""

#: ../../ref/settings.txt:1458
# 26bd68f170374550a38f7179c0b9c24e
msgid "The number of days a password reset link is valid for. Used by the :mod:`django.contrib.auth` password reset mechanism."
msgstr ""

#: ../../ref/settings.txt:1464
# e1a4e46521a44a73ac6a2348c3c71b46
msgid "PREPEND_WWW"
msgstr ""

#: ../../ref/settings.txt:1468
# cfaaa017681a475aa4e9c748df886da7
msgid "Whether to prepend the \"www.\" subdomain to URLs that don't have it. This is only used if :class:`~django.middleware.common.CommonMiddleware` is installed (see :doc:`/topics/http/middleware`). See also :setting:`APPEND_SLASH`."
msgstr ""

#: ../../ref/settings.txt:1479
# e28950b95d8044689c9460427c560cc0
msgid "A tuple of profanities, as strings, that will be forbidden in comments when :setting:`COMMENTS_ALLOW_PROFANITIES` is ``False``."
msgstr ""

#: ../../ref/settings.txt:1485
# d085eb8b8e0b4e459a6bfbbae93b3d7c
msgid "RESTRUCTUREDTEXT_FILTER_SETTINGS"
msgstr ""

#: ../../ref/settings.txt:1487
# 7b4b7066eb3c4398978b5ac7af8320b0
msgid "Default: ``{}``"
msgstr ""

#: ../../ref/settings.txt:1489
# 9e4e36b78ab74866a63df9830b0f0b7c
msgid "A dictionary containing settings for the ``restructuredtext`` markup filter from the :doc:`django.contrib.markup application </ref/contrib/markup>`. They override the default writer settings. See the Docutils restructuredtext `writer settings docs`_ for details."
msgstr ""

#: ../../ref/settings.txt:1499
# a7716a0bed4c4137aec845bb7a52f0c7
msgid "ROOT_URLCONF"
msgstr ""

#: ../../ref/settings.txt:1503
# 897ef548edc54922ade79ad31ed442d8
msgid "A string representing the full Python import path to your root URLconf. For example: ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis by setting the attribute ``urlconf`` on the incoming ``HttpRequest`` object. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/settings.txt:1511
# 7b976294438845cc96460454aec14d26
msgid "SECRET_KEY"
msgstr ""

#: ../../ref/settings.txt:1515
# baa07f8ff77a4df68874848a2d975f8e
msgid "A secret key for a particular Django installation. This is used to provide :doc:`cryptographic signing </topics/signing>`, and should be set to a unique, unpredictable value."
msgstr ""

#: ../../ref/settings.txt:1519
# 6eae88eef02b4d59b74da265aff90201
msgid ":djadmin:`django-admin.py startproject <startproject>` automatically adds a randomly-generated ``SECRET_KEY`` to each new project."
msgstr ""

#: ../../ref/settings.txt:1524
# f58e93460b3c476491ff3c10589f9e75
msgid "**Keep this value secret.**"
msgstr ""

#: ../../ref/settings.txt:1526
# 504db4b29667461eae4640e9bacc43d0
msgid "Running Django with a known :setting:`SECRET_KEY` defeats many of Django's security protections, and can lead to privilege escalation and remote code execution vulnerabilities."
msgstr ""

#: ../../ref/settings.txt:1536
# e5af4ff2eb8043a586a8c20d4add7381
msgid "SECURE_PROXY_SSL_HEADER"
msgstr ""

#: ../../ref/settings.txt:1542
# 9c3dc7101a414c3ba2ecc9ced43163b8
msgid "A tuple representing a HTTP header/value combination that signifies a request is secure. This controls the behavior of the request object's ``is_secure()`` method."
msgstr ""

#: ../../ref/settings.txt:1546
# 86c500443eb94eafac6c0dc2fcacb194
msgid "This takes some explanation. By default, ``is_secure()`` is able to determine whether a request is secure by looking at whether the requested URL uses \"https://\". This is important for Django's CSRF protection, and may be used by your own code or third-party apps."
msgstr ""

#: ../../ref/settings.txt:1551
# af7c9fc664cb4b2ab228c15c7efb4f3b
msgid "If your Django app is behind a proxy, though, the proxy may be \"swallowing\" the fact that a request is HTTPS, using a non-HTTPS connection between the proxy and Django. In this case, ``is_secure()`` would always return ``False`` -- even for requests that were made via HTTPS by the end user."
msgstr ""

#: ../../ref/settings.txt:1556
# ec189daa21904c53923c2360dd98f987
msgid "In this situation, you'll want to configure your proxy to set a custom HTTP header that tells Django whether the request came in via HTTPS, and you'll want to set ``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look for."
msgstr ""

#: ../../ref/settings.txt:1561
# bc34a55651694d7bbf9c42cf5e89de4b
msgid "You'll need to set a tuple with two elements -- the name of the header to look for and the required value. For example::"
msgstr ""

#: ../../ref/settings.txt:1566
# e62952d45bc1479ea6b6df054e250074
msgid "Here, we're telling Django that we trust the ``X-Forwarded-Proto`` header that comes from our proxy, and any time its value is ``'https'``, then the request is guaranteed to be secure (i.e., it originally came in via HTTPS). Obviously, you should *only* set this setting if you control your proxy or have some other guarantee that it sets/strips this header appropriately."
msgstr ""

#: ../../ref/settings.txt:1572
# 22edede4bfda478fa200f76b7b58cacb
msgid "Note that the header needs to be in the format as used by ``request.META`` -- all caps and likely starting with ``HTTP_``. (Remember, Django automatically adds ``'HTTP_'`` to the start of x-header names before making the header available in ``request.META``.)"
msgstr ""

#: ../../ref/settings.txt:1579
# 223133362270410faa85e18229dcd58a
msgid "**You will probably open security holes in your site if you set this without knowing what you're doing. And if you fail to set it when you should. Seriously.**"
msgstr ""

#: ../../ref/settings.txt:1583
# b5f6eab29ffc486b9f5eb5303ce15ea7
msgid "Make sure ALL of the following are true before setting this (assuming the values from the example above):"
msgstr ""

#: ../../ref/settings.txt:1586
# f9f9449f2c634fdfbcc87c50699f13d2
msgid "Your Django app is behind a proxy."
msgstr ""

#: ../../ref/settings.txt:1587
# 888e86e774284762a477c37d2d507296
msgid "Your proxy strips the ``X-Forwarded-Proto`` header from all incoming requests. In other words, if end users include that header in their requests, the proxy will discard it."
msgstr ""

#: ../../ref/settings.txt:1590
# d0757fb4e563432e94525398da0befbe
msgid "Your proxy sets the ``X-Forwarded-Proto`` header and sends it to Django, but only for requests that originally come in via HTTPS."
msgstr ""

#: ../../ref/settings.txt:1593
# 42a0c1f3911848e58083687491bfb074
msgid "If any of those are not true, you should keep this setting set to ``None`` and find another way of determining HTTPS, perhaps via custom middleware."
msgstr ""

#: ../../ref/settings.txt:1599
# 62c744b468184c6dabd8d45bc234cedb
msgid "SEND_BROKEN_LINK_EMAILS"
msgstr ""

#: ../../ref/settings.txt:1603
# 5f2c14587ae8425b831adbe5a69613d9
msgid "Whether to send an email to the :setting:`MANAGERS` each time somebody visits a Django-powered page that is 404ed with a non-empty referer (i.e., a broken link). This is only used if ``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`). See also :setting:`IGNORABLE_404_URLS` and :doc:`/howto/error-reporting`."
msgstr ""

#: ../../ref/settings.txt:1612
# 22166e71c8dc4bb9bf6520eb1e712966
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../ref/settings.txt:1614
# 39ff9b38cb2a43a687b4a52107fb9652
msgid "Default: Not defined."
msgstr ""

#: ../../ref/settings.txt:1616
# 7f2c3a7278634a18bd31dc79d08b70dd
msgid "A dictionary of modules containing serializer definitions (provided as strings), keyed by a string identifier for that serialization type. For example, to define a YAML serializer, use::"
msgstr ""

#: ../../ref/settings.txt:1625
# 30470d752a19455fbfdb6472fc58baca
msgid "SERVER_EMAIL"
msgstr ""

#: ../../ref/settings.txt:1627
# 927ad4b8d03d420aad5f457f3a10c16b
msgid "Default: ``'root@localhost'``"
msgstr ""

#: ../../ref/settings.txt:1629
# dd3412d90f324eb4b774aff9e4f72298
msgid "The email address that error messages come from, such as those sent to :setting:`ADMINS` and :setting:`MANAGERS`."
msgstr ""

#: ../../ref/settings.txt:1635
# 3399181b2c9e469d80e8caf6604b8974
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../ref/settings.txt:1637
# 0deb55b506ea4b1fb19f513501cd3d3f
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../ref/settings.txt:1639
# 42d49f0a65cc46edb834db2b97fbc0bf
msgid "The age of session cookies, in seconds. See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1648
# b621d43c3406409e8365adce8e13dc18
msgid "The domain to use for session cookies. Set this to a string such as ``\".example.com\"`` for cross-domain cookies, or use ``None`` for a standard domain cookie. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1655
# 8d2baca090f5439a91502147f7dbc225
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../ref/settings.txt:1659
# 7b9ddba1792a46f4b36ce800d6216a48
msgid "Whether to use HTTPOnly flag on the session cookie. If this is set to ``True``, client-side JavaScript will not to be able to access the session cookie."
msgstr ""

#: ../../ref/settings.txt:1677
# 0fa714c152cb43bbb1d615bef0b3d27e
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1679
# 5f5a06110d164f1f9b564818271e510d
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../ref/settings.txt:1681
# 3512915fdc8b47a68446c9826a33be01
msgid "The name of the cookie to use for sessions. This can be whatever you want (but should be different from :setting:`LANGUAGE_COOKIE_NAME`). See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1688
# 8f4593c71d334697a40e0c1cbf1c3a23
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../ref/settings.txt:1692
# 4666539e1b444db6889e34437ae9c8d9
msgid "The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path."
msgstr ""

#: ../../ref/settings.txt:1695
# 4d65fef6e2d34b22b96f960f98e3a769
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie."
msgstr ""

#: ../../ref/settings.txt:1702
# 4fd40a2d12d041248282c08015fcfd2d
msgid "SESSION_CACHE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:1706
# eae024c4cad0420e9884b5cdcd309fc3
msgid "If you're using :ref:`cache-based session storage <cached-sessions-backend>`, this selects the cache to use."
msgstr ""

#: ../../ref/settings.txt:1712
# 77cba4678225416fafeb5dbb02adafab
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../ref/settings.txt:1716
# 92a0f30f1dfe43c6bf46d6aba92f125b
msgid "Whether to use a secure cookie for the session cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1724
# bb1166ee40af40ff9776fca5a452dba3
msgid "SESSION_ENGINE"
msgstr ""

#: ../../ref/settings.txt:1726
# c663bd438b984346915529daf2df0b38
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../ref/settings.txt:1728
# 25ab0a5800284c329c47c53e73769ddb
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

#: ../../ref/settings.txt:1730
# c2577b15bdc94dcc91515587f97cc91d
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../ref/settings.txt:1731
# 3ea3ea9542ce4fb595d652b1c2865c77
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../ref/settings.txt:1732
# f54c6d9f309748489256e55c6a131ddf
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../ref/settings.txt:1733
# b529c5e1101b4527a97f76114545c881
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../ref/settings.txt:1734
# b1a9d67593a340df99c4150511117ecb
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../ref/settings.txt:1736
# 52055315f3a345f9943da1add00cf530
msgid "See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1741
# a8821757b6594bfb90e7954be1ae2f50
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../ref/settings.txt:1745
# 0ba7dd1fc38044f5b0ba1bccb8ad715c
msgid "Whether to expire the session when the user closes his or her browser. See the :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1751
# fc4160d7d65a42029693a56af3b79039
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:1755
# f445b0f6c3ab4b0791dee6444baf4f25
msgid "If you're using file-based session storage, this sets the directory in which Django will store session data. See :doc:`/topics/http/sessions`. When the default value (``None``) is used, Django will use the standard temporary directory for the system."
msgstr ""

#: ../../ref/settings.txt:1763
# ee8cb99ce64f49efbb1b496787ad4af5
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../ref/settings.txt:1767
# 6aa48b515d0948d2a18de681aadf8709
msgid "Whether to save the session data on every request. See :doc:`/topics/http/sessions`."
msgstr ""

#: ../../ref/settings.txt:1773
# dbb42f159c0c4032b0c4b7dc6331332c
msgid "SHORT_DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1775
# 8d2453025b35453ebac5293ac76d6ef1
msgid "Default: ``m/d/Y`` (e.g. ``12/31/2003``)"
msgstr ""

#: ../../ref/settings.txt:1777
# 622f5196eb854ea49a4e05f9775200a0
msgid "An available formatting that can be used for displaying date fields on templates. Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding locale-dictated format has higher precedence and will be applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1782
# 7157cd7df60a4c98bb50fdd540a022c4
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1787
# 1df7007bef2e4779985aaee7e168895c
msgid "SHORT_DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1789
# 046d3bdd23a4457ea58ef42b8e86bfe2
msgid "Default: ``m/d/Y P`` (e.g. ``12/31/2003 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:1791
# f4392081fba440e8851b144cce106082
msgid "An available formatting that can be used for displaying datetime fields on templates. Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding locale-dictated format has higher precedence and will be applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1796
# 834826a2590e4588b88caa1a3cae8f77
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1801
# 3f7d7e50beb74a6ebf4c18168d4948af
msgid "SIGNING_BACKEND"
msgstr ""

#: ../../ref/settings.txt:1805
# ca4c68f3fc7f4929b57f784fad7f2365
msgid "Default: 'django.core.signing.TimestampSigner'"
msgstr ""

#: ../../ref/settings.txt:1807
# 846ad28860a844a882dfcccf9288d3f8
msgid "The backend used for signing cookies and other data."
msgstr ""

#: ../../ref/settings.txt:1809
# 644737fe430d445dbcdf2c1a8b1df8b2
msgid "See also the :doc:`/topics/signing` documentation."
msgstr ""

#: ../../ref/settings.txt:1814
# 0a480df618dc43e8b19e9407ac5332a6
msgid "SITE_ID"
msgstr ""

#: ../../ref/settings.txt:1818
# c9d3363b61da49e3a84c562ddc0e920d
msgid "The ID, as an integer, of the current site in the ``django_site`` database table. This is used so that application data can hook into specific site(s) and a single database can manage content for multiple sites."
msgstr ""

#: ../../ref/settings.txt:1822
# 3554d30f6eb244fb9e776a8f19c85a33
msgid "See :doc:`/ref/contrib/sites`."
msgstr ""

#: ../../ref/settings.txt:1829
# 017d060e383b49c1b1660116b749bcef
msgid "STATIC_ROOT"
msgstr ""

#: ../../ref/settings.txt:1833
# 2c6f93e67a6d4273ac37af76089b7fa3
msgid "The absolute path to the directory where :djadmin:`collectstatic` will collect static files for deployment."
msgstr ""

#: ../../ref/settings.txt:1836
# e2dee6b24ecd41449524e77f48188b4e
msgid "Example: ``\"/var/www/example.com/static/\"``"
msgstr ""

#: ../../ref/settings.txt:1838
# 80eecff284ec4d778efe4b01e268644a
msgid "If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled (default) the :djadmin:`collectstatic` management command will collect static files into this directory. See the howto on :doc:`managing static files</howto/static-files>` for more details about usage."
msgstr ""

#: ../../ref/settings.txt:1845
# 2b343de81dc9485f8389ba53761d2429
msgid "This should be an (initially empty) destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is **not** a place to store your static files permanently. You should do that in directories that will be found by :doc:`staticfiles</ref/contrib/staticfiles>`'s :setting:`finders<STATICFILES_FINDERS>`, which by default, are ``'static/'`` app sub-directories and any directories you include in :setting:`STATICFILES_DIRS`)."
msgstr ""

#: ../../ref/settings.txt:1854
# 00a650fc7e53442887d72f7106bcdbe2
msgid "See :doc:`staticfiles reference</ref/contrib/staticfiles>` and :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/settings.txt:1860
# f5557e024002471ea56ba6600983ef01
msgid "STATIC_URL"
msgstr ""

#: ../../ref/settings.txt:1864
# f9e3ec8e6e264c93b5f2e2730ba32393
msgid "URL to use when referring to static files located in :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:1866
# 8231cc9b374f42e3b04e083b471121d5
msgid "Example: ``\"/static/\"`` or ``\"http://static.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1868
# 9fabc9628ec3495888267be5cd9d4c1d
msgid "If not ``None``, this will be used as the base path for :ref:`media definitions<form-media-paths>` and the :doc:`staticfiles app</ref/contrib/staticfiles>`."
msgstr ""

#: ../../ref/settings.txt:1872
# d07a4d7645db4749983101a68a7e017f
msgid "It must end in a slash if set to a non-empty value."
msgstr ""

#: ../../ref/settings.txt:1874
# 134092435d5e4e81990d336fd2f19b92
msgid "See :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:1879
# a64b7a6d4f92448e99d43b3314c95185
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

#: ../../ref/settings.txt:1891
# 1bc388afe9c445628be7877f320d0bdf
msgid "A tuple of callables that are used to populate the context in ``RequestContext``. These callables take a request object as their argument and return a dictionary of items to be merged into the context."
msgstr ""

#: ../../ref/settings.txt:1902
# 79f4cb98c90c4260ac8807db2f5d10e1
msgid "TEMPLATE_DEBUG"
msgstr ""

#: ../../ref/settings.txt:1906
# 0dad1c33a72f46fea752c7c709ed5db5
msgid "A boolean that turns on/off template debug mode. If this is ``True``, the fancy error page will display a detailed report for any exception raised during template rendering. This report contains the relevant snippet of the template, with the appropriate line highlighted."
msgstr ""

#: ../../ref/settings.txt:1911
# e5ae1569152e453dbc661d230547d0aa
msgid "Note that Django only displays fancy error pages if :setting:`DEBUG` is ``True``, so you'll want to set that to take advantage of this setting."
msgstr ""

#: ../../ref/settings.txt:1914
# 81cd9a3cb01c42538798f4e6322b6b05
msgid "See also :setting:`DEBUG`."
msgstr ""

#: ../../ref/settings.txt:1919
# 695371c5819043d1b8327e757a9fe586
msgid "TEMPLATE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1923
# 22d8cf821e1344368559378a8f07d1ba
msgid "List of locations of the template source files searched by :class:`django.template.loaders.filesystem.Loader`, in search order."
msgstr ""

#: ../../ref/settings.txt:1928
# e67e5c8d1e7d4f96a56030403fdc8b22
msgid "See :doc:`/topics/templates`."
msgstr ""

#: ../../ref/settings.txt:1933
# 53973d279b4943529284323d8394f2e1
msgid "TEMPLATE_LOADERS"
msgstr ""

#: ../../ref/settings.txt:1940
# 9ec73ae778df483fa2b94917b5f99b83
msgid "A tuple of template loader classes, specified as strings. Each ``Loader`` class knows how to import templates from a particular source. Optionally, a tuple can be used instead of a string. The first item in the tuple should be the ``Loader``'s module, subsequent items are passed to the ``Loader`` during initialization. See :doc:`/ref/templates/api`."
msgstr ""

#: ../../ref/settings.txt:1949
# 82b99f9c132c4fd4b7d270a971a30597
msgid "TEMPLATE_STRING_IF_INVALID"
msgstr ""

#: ../../ref/settings.txt:1953
# b2a96a7e50ac4be086e85f3c2d2c8620
msgid "Output, as a string, that the template system should use for invalid (e.g. misspelled) variables. See :ref:`invalid-template-variables`.."
msgstr ""

#: ../../ref/settings.txt:1959
# 492212f94c0e4849aa49c11a3333d561
msgid "TEST_RUNNER"
msgstr ""

#: ../../ref/settings.txt:1961
# fddad18267c44f5d8b271847e910c458
msgid "Default: ``'django.test.simple.DjangoTestSuiteRunner'``"
msgstr ""

#: ../../ref/settings.txt:1963
# 24d6a8ce81f74c85a8c270e34e4a01e8
msgid "The name of the class to use for starting the test suite. See :doc:`/topics/testing`."
msgstr ""

#: ../../ref/settings.txt:1971
# 1141c278555945bca0a309d2eb70d75e
msgid "THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:1973
# ab10834330cb4949aa4c9c60227e257a
msgid "Default: ``,`` (Comma)"
msgstr ""

#: ../../ref/settings.txt:1975
# db54b8b169a44f018a484d88bbb12a0c
msgid "Default thousand separator used when formatting numbers. This setting is used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and :setting:`NUMBER_GROUPING` is greater than ``0``."
msgstr ""

#: ../../ref/settings.txt:1982
# 80d30ac8c1da43f5987f28790589e3fe
msgid "See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and :setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:1988
# 4a098b4fa8ed4452bc2c7e937af377d0
msgid "TIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1990
# a16065b6052f4f9cbe3a3b8b689f4d75
msgid "Default: ``'P'`` (e.g. ``4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:1992
# 073cf9e6e59c465a8400aebd075ed117
msgid "The default formatting to use for displaying time fields in any part of the system. Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated format has higher precedence and will be applied instead. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1997
# 2c0148550e9641f6a948413901acb6cc
msgid "See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2002
# 6f854b6f136348acbda474000a4e904d
msgid "TIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:2004
# 6c060444b16f411f93e8f266d7e0686d
msgid "Default: ``('%H:%M:%S', '%H:%M')``"
msgstr ""

#: ../../ref/settings.txt:2006
# ce79066a43274fbeb0afc69b1e8d1e8a
msgid "A tuple of formats that will be accepted when inputting data on a time field. Formats will be tried in order, using the first valid one. Note that these format strings use Python's datetime_ module syntax, not the format strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:2014
# ebdcdf43df2a4b4a95912ddd4e6b3ba2
msgid "See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:2021
# cd03377a42f747479275376c7a2a3ea5
msgid "TIME_ZONE"
msgstr ""

#: ../../ref/settings.txt:2023
# a1fbd1b87d3541a6a3c217b6bd3200e3
msgid "Default: ``'America/Chicago'``"
msgstr ""

#: ../../ref/settings.txt:2028
# e1bc12911ae0420ead4ee6a21821aa0e
msgid "A string representing the time zone for this installation, or ``None``. `See available choices`_. (Note that list of available choices lists more than one on the same line; you'll want to use just one of the choices for a given time zone. For instance, one line says ``'Europe/London GB GB-Eire'``, but you should use the first bit of that -- ``'Europe/London'`` -- as your :setting:`TIME_ZONE` setting.)"
msgstr ""

#: ../../ref/settings.txt:2035
# 94cb5cd14e3445878bdb1d4deea80876
msgid "Note that this isn't necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting."
msgstr ""

#: ../../ref/settings.txt:2039
# 7e99d6156a0844aeaa1f2bbe7b768917
msgid "When :setting:`USE_TZ` is ``False``, this is the time zone in which Django will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the default time zone that Django will use to display datetimes in templates and to interpret datetimes entered in forms."
msgstr ""

#: ../../ref/settings.txt:2044
# 066c37e5f7b0493dab433af9862c9798
msgid "Django sets the ``os.environ['TZ']`` variable to the time zone you specify in the :setting:`TIME_ZONE` setting. Thus, all your views and models will automatically operate in this time zone. However, Django won't set the ``TZ`` environment variable under the following conditions:"
msgstr ""

#: ../../ref/settings.txt:2049
# 8172d8a87e0244c3a5d3a73b79412e22
msgid "If you're using the manual configuration option as described in :ref:`manually configuring settings <settings-without-django-settings-module>`, or"
msgstr ""

#: ../../ref/settings.txt:2053
# 1d92ca788d8c4e608229c1368f2727fe
msgid "If you specify ``TIME_ZONE = None``. This will cause Django to fall back to using the system timezone. However, this is discouraged when :setting:`USE_TZ = True <USE_TZ>`, because it makes conversions between local time and UTC less reliable."
msgstr ""

#: ../../ref/settings.txt:2058
# ecb436a391b143a6bd9462b14aa3910b
msgid "If Django doesn't set the ``TZ`` environment variable, it's up to you to ensure your processes are running in the correct environment."
msgstr ""

#: ../../ref/settings.txt:2062
# 30903d27993940069b0802b8039a33cc
msgid "Django cannot reliably use alternate time zones in a Windows environment. If you're running Django on Windows, :setting:`TIME_ZONE` must be set to match the system time zone."
msgstr ""

#: ../../ref/settings.txt:2073
# 62fb31c20f644c13b8b9a0c48f71a82a
msgid "USE_ETAGS"
msgstr ""

#: ../../ref/settings.txt:2077
# 7d337ebc7d8c4a7b8a0daed1ba4b4db3
msgid "A boolean that specifies whether to output the \"Etag\" header. This saves bandwidth but slows down performance. This is used by the ``CommonMiddleware`` (see :doc:`/topics/http/middleware`) and in the``Cache Framework`` (see :doc:`/topics/cache`)."
msgstr ""

#: ../../ref/settings.txt:2085
# 923106074b714c5995478f33b0f4bd7c
msgid "USE_I18N"
msgstr ""

#: ../../ref/settings.txt:2089
# 689719d7bd8a4d2eb3805ea543ad36bd
msgid "A boolean that specifies whether Django's translation system should be enabled. This provides an easy way to turn it off, for performance. If this is set to ``False``, Django will make some optimizations so as not to load the translation machinery."
msgstr ""

#: ../../ref/settings.txt:2094
# a7f4c630bbe94975b1f47dab4f224a30
msgid "See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and :setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2099
# f7e6b7a410894096bc2abb5d6342b7ba
msgid "USE_L10N"
msgstr ""

#: ../../ref/settings.txt:2103
# 7fd9814cbc1e4431852915d4e790615d
msgid "A boolean that specifies if localized formatting of data will be enabled by default or not. If this is set to ``True``, e.g. Django will display numbers and dates using the format of the current locale."
msgstr ""

#: ../../ref/settings.txt:2107
# 5978ee1b96bc4aa08ddcdbb770484e78
msgid "See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and :setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2111
# e7dd2ddc7dfb45ee8020ae94ffc1914e
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``USE_L10N = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2117
# 5be18bf92681455a906f00796ce88b84
msgid "USE_THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2121
# b440df389fd7419b88d308da9c3f3cf2
msgid "A boolean that specifies whether to display numbers using a thousand separator. When :setting:`USE_L10N` is set to ``True`` and if this is also set to ``True``, Django will use the values of :setting:`THOUSAND_SEPARATOR` and :setting:`NUMBER_GROUPING` to format numbers."
msgstr ""

#: ../../ref/settings.txt:2126
# 60a7884bff3e4a26b7debca3ca9ca241
msgid "See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and :setting:`THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2132
# 93e0c6f623f548efbab4ba7653a78a7d
msgid "USE_TZ"
msgstr ""

#: ../../ref/settings.txt:2138
# 58a949aef65644049573dbc14c2e5edf
msgid "A boolean that specifies if datetimes will be timezone-aware by default or not. If this is set to ``True``, Django will use timezone-aware datetimes internally. Otherwise, Django will use naive datetimes in local time."
msgstr ""

#: ../../ref/settings.txt:2142
# 94c621ebf02348f5bd9e1edafae50a3e
msgid "See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`."
msgstr ""

#: ../../ref/settings.txt:2146
# 14c8cd67be1b4f33960d7b7da488d7b4
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``USE_TZ = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2153
# 3e881f88cf194132944d2468456a6b8d
msgid "USE_X_FORWARDED_HOST"
msgstr ""

#: ../../ref/settings.txt:2157
# 630fbd0280c94040bb0db198b373b31a
msgid "A boolean that specifies whether to use the X-Forwarded-Host header in preference to the Host header. This should only be enabled if a proxy which sets this header is in use."
msgstr ""

#: ../../ref/settings.txt:2164
# 0b03a4b002314ab3abb161e86da7c4e9
msgid "WSGI_APPLICATION"
msgstr ""

#: ../../ref/settings.txt:2170
# 5d2c18cb3b6e419d95f6c2737c8bd71f
msgid "The full Python path of the WSGI application object that Django's built-in servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin.py startproject <startproject>` management command will create a simple ``wsgi.py`` file with an ``application`` callable in it, and point this setting to that ``application``."
msgstr ""

#: ../../ref/settings.txt:2176
# 7b022445446749daa129fed780c57060
msgid "If not set, the return value of :func:`django.core.wsgi.get_wsgi_application` will be used. In this case, the behavior of :djadmin:`runserver` will be identical to previous Django versions."
msgstr ""

#: ../../ref/settings.txt:2183
# f73c714f4b9d47e29ec3b02306e48167
msgid "YEAR_MONTH_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2185
# 02c1c3c0924546f9bf7c02707a80474e
msgid "Default: ``'F Y'``"
msgstr ""

#: ../../ref/settings.txt:2187
# 47e646b2dbf84d47bc460fadbb8d217f
msgid "The default formatting to use for date fields on Django admin change-list pages -- and, possibly, by other parts of the system -- in cases when only the year and month are displayed."
msgstr ""

#: ../../ref/settings.txt:2191
# 595b9d6b6fe24d58bcde8dc5176d7667
msgid "For example, when a Django admin change-list page is being filtered by a date drilldown, the header for a given month displays the month and the year. Different locales have different formats. For example, U.S. English would say \"January 2006,\" whereas another locale might say \"2006/January.\""
msgstr ""

#: ../../ref/settings.txt:2196
# 38ed0cde053247199e344365b3bb484d
msgid "See :tfilter:`allowed date format strings <date>`. See also :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`MONTH_DAY_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2203
# 3c19bdf65455486b958ba5d426e2306c
msgid "X_FRAME_OPTIONS"
msgstr ""

#: ../../ref/settings.txt:2205
# fb9bfebbacde4f1db56406401fd2db26
msgid "Default: ``'SAMEORIGIN'``"
msgstr ""

#: ../../ref/settings.txt:2207
# e8c57ed20c424b8da94bdd59918226c6
msgid "The default value for the X-Frame-Options header used by :class:`~django.middleware.clickjacking.XFrameOptionsMiddleware`. See the :doc:`clickjacking protection </ref/clickjacking/>` documentation."
msgstr ""

#: ../../ref/settings.txt:2212
# 5d3e4d27129743c4b42de46586d48413
msgid "Deprecated settings"
msgstr ""

#: ../../ref/settings.txt:2217
# f611f26140654a368700538691e7e0fd
msgid "AUTH_PROFILE_MODULE"
msgstr ""

#: ../../ref/settings.txt:2227
# f7faf70c407f47bfb3b2766c26d71938
msgid "The site-specific user profile model used by this site. See :ref:`auth-profiles`."
msgstr ""

#: ../../ref/settings.txt:2233
# 14cf7fdbc00a4bf78f37f20597be585a
msgid "IGNORABLE_404_ENDS"
msgstr ""

#: ../../ref/settings.txt:2241
# 5949be9c382e481fba51cf61f12e59dd
msgid "IGNORABLE_404_STARTS"
msgstr ""

#: ../../ref/settings.txt:2249
# 5fe89465dd1346c4b70ef3e593873d42
msgid "URL_VALIDATOR_USER_AGENT"
msgstr ""

#: ../../ref/signals.txt:3
# 79c9013798cd46f0b493f56a60531113
msgid "Signals"
msgstr ""

#: ../../ref/signals.txt:5
# 9362b2c158964bcc94da4cf85ca279ee
msgid "A list of all the signals that Django sends."
msgstr ""

#: ../../ref/signals.txt:9
# a7a1bb7082a94265b3d017865f683806
msgid "See the documentation on the :doc:`signal dispatcher </topics/signals>` for information regarding how to register for and receive signals."
msgstr ""

#: ../../ref/signals.txt:12
# 650ca53080ef4c959c08c011cb1858fa
msgid "The :doc:`comment framework </ref/contrib/comments/index>` sends a :doc:`set of comment-related signals </ref/contrib/comments/signals>`."
msgstr ""

#: ../../ref/signals.txt:15
# f15b19a65dd743b5b4ca34e0cc7344a3
msgid "The :doc:`authentication framework </topics/auth>` sends :ref:`signals when a user is logged in / out <topics-auth-signals>`."
msgstr ""

#: ../../ref/signals.txt:19
# e69992db58d24368b46db54f9365f662
msgid "Model signals"
msgstr ""

#: ../../ref/signals.txt:24
# 68e7886bb2c14261861da0151fa0dee2
msgid "The :mod:`django.db.models.signals` module defines a set of signals sent by the module system."
msgstr ""

#: ../../ref/signals.txt:29
# d9247944b0454e9b880ee63b8a3320a1
msgid "Many of these signals are sent by various model methods like :meth:`~django.db.models.Model.__init__` or :meth:`~django.db.models.Model.save` that you can overwrite in your own code."
msgstr ""

#: ../../ref/signals.txt:34
# 012622dedc034213818fb70f15bdc385
msgid "If you override these methods on your model, you must call the parent class' methods for this signals to be sent."
msgstr ""

#: ../../ref/signals.txt:37
# 8eba4109d1dd49bcb0b0762ec9d9470b
msgid "Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected.  To prevent this, pass ``weak=False`` when you call the signal's :meth:`~django.dispatch.Signal.connect`."
msgstr ""

#: ../../ref/signals.txt:42
# c8c8e409cd9349268641cadf08085864
msgid "pre_init"
msgstr ""

#: ../../ref/signals.txt:49
# 92ee9ccadae0403ea40e5612aa09155f
msgid "Whenever you instantiate a Django model, this signal is sent at the beginning of the model's :meth:`~django.db.models.Model.__init__` method."
msgstr ""

#: ../../ref/signals.txt:55
# f353c1056671481aa22bea57b9f8679d
msgid "The model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:58
# 41139ded7bcd41a5bedab0677b4e1ae1
msgid "A list of positional arguments passed to :meth:`~django.db.models.Model.__init__`:"
msgstr ""

#: ../../ref/signals.txt:62
# cb8b1cb9d2024538984b43666fc4a794
msgid "A dictionary of keyword arguments passed to :meth:`~django.db.models.Model.__init__`:."
msgstr ""

#: ../../ref/signals.txt:65
# bcd98e5fd91848d08ad908d197efd90d
msgid "For example, the :doc:`tutorial </intro/tutorial01>` has this line::"
msgstr ""

#: ../../ref/signals.txt:69
# e91ebfcfe81247e599bcccea998dd204
msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr ""

#: ../../ref/signals.txt:74
#: ../../ref/signals.txt:300
#: ../../ref/signals.txt:326
# aede9f2810da4d5ba8165abaf3bdc00c
# cd9507ccd85248f1a8cf330b4be7477b
# e1e5c26c3d2c4032aba787b508a744dc
msgid "``sender``"
msgstr ""

#: ../../ref/signals.txt:74
# f0e1a2c59c13406c939aa94f512684d3
msgid "``Poll`` (the class itself)"
msgstr ""

#: ../../ref/signals.txt:76
# 7891bdda3e16424bb7357c3b8275fff1
msgid "``args``"
msgstr ""

#: ../../ref/signals.txt:76
# 6e6826b95e064b7d8457e14890ed8c21
msgid "``[]`` (an empty list because there were no positional arguments passed to ``__init__``.)"
msgstr ""

#: ../../ref/signals.txt:79
# 0edc5b3e947441348e15b0bffa85ff3c
msgid "``kwargs``"
msgstr ""

#: ../../ref/signals.txt:79
# 07b8170d71394aaca724cd7f4a3af4f9
msgid "``{'question': \"What's up?\", 'pub_date': datetime.now()}``"
msgstr ""

#: ../../ref/signals.txt:83
# 8c72ff012bdb4dee891ba56e4d1c10d6
msgid "post_init"
msgstr ""

#: ../../ref/signals.txt:88
# 9a5c318d6bef46b88a3e0b340f27f2d4
msgid "Like pre_init, but this one is sent when the :meth:`~django.db.models.Model.__init__`: method finishes."
msgstr ""

#: ../../ref/signals.txt:93
# 45604d335272418587276fab41472813
msgid "As above: the model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:96
# 5600846bb4ca4ae29537363ec054c1ee
msgid "The actual instance of the model that's just been created."
msgstr ""

#: ../../ref/signals.txt:99
# d4d89059d61740ea9aedfd41357447b5
msgid "pre_save"
msgstr ""

#: ../../ref/signals.txt:104
# fe5fafa69ac149d192f7db29b0ea81fc
msgid "This is sent at the beginning of a model's :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:110
#: ../../ref/signals.txt:142
#: ../../ref/signals.txt:177
#: ../../ref/signals.txt:198
# a2985249e2e246deb4b729f98fa332e2
# 5f5ead941b9e4fb388d478eeb5e35e56
# fbda715e03c64c15829c6086111a58d6
# d9e03263f56d4e5aa0e2e4c76a08da4d
msgid "The model class."
msgstr ""

#: ../../ref/signals.txt:113
#: ../../ref/signals.txt:145
# 414bb06f7b9f4f62baf3b4b0cf49bcf6
# ce29004497da41d292d127cff8954961
msgid "The actual instance being saved."
msgstr ""

#: ../../ref/signals.txt:116
#: ../../ref/signals.txt:151
# af3ab1ae9caa49268b9be64252439fab
# 1ca92f292c6e4ea39cbc64f375e5772d
msgid "A boolean; ``True`` if the model is saved exactly as presented (i.e. when loading a fixture). One should not query/modify other records in the database as the database might not be in a consistent state yet."
msgstr ""

#: ../../ref/signals.txt:122
#: ../../ref/signals.txt:157
#: ../../ref/signals.txt:183
#: ../../ref/signals.txt:207
#: ../../ref/signals.txt:267
# e3839f94c97e4eb09981c1bd1d8dd3c6
# 6cd302d2da3f430da240e943333f762d
# 1bd0817622dc4890a9a81fca0e37c19f
# fe20cad2b164453d8227f6ef896c3811
# a5d4009d0902486ebd3332eb6fa897be
msgid "The database alias being used."
msgstr ""

#: ../../ref/signals.txt:127
#: ../../ref/signals.txt:162
# a2ee0b7e685843ed94ed87d836c15924
# cc8d19699aab426f9bd37a7a53590f2d
msgid "The set of fields to update explicitly specified in the ``save()`` method. ``None`` if this argument was not used in the ``save()`` call."
msgstr ""

#: ../../ref/signals.txt:131
# 1254cc52f61a444ba6212c59c00dc827
msgid "post_save"
msgstr ""

#: ../../ref/signals.txt:136
# a9fcc6325fa14c2684bef3b115d53c0b
msgid "Like :data:`pre_save`, but sent at the end of the :meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:148
# 4556259442cb479ab3f0892301f30016
msgid "A boolean; ``True`` if a new record was created."
msgstr ""

#: ../../ref/signals.txt:166
# 8e407612809340e19d0fb6071af7ff63
msgid "pre_delete"
msgstr ""

#: ../../ref/signals.txt:171
# e848aae526d04282b1c2ab1ca022e884
msgid "Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:180
#: ../../ref/signals.txt:201
# 9a342401330542b5a27df6d6e7dc05ee
# 1a56d61111904f5e857e13740484ea13
msgid "The actual instance being deleted."
msgstr ""

#: ../../ref/signals.txt:186
# 27958026dcc946aa97ebf14dd283231d
msgid "post_delete"
msgstr ""

#: ../../ref/signals.txt:191
# 549c23bd5c274494b9c175ff0215a56e
msgid "Like :data:`pre_delete`, but sent at the end of a model's :meth:`~django.db.models.Model.delete` method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:203
# 6aaa05609ac04d6793eb0ca4b19baf12
msgid "Note that the object will no longer be in the database, so be very careful what you do with this instance."
msgstr ""

#: ../../ref/signals.txt:210
# 52255b6694d8445e9beec97ae5465fa5
msgid "m2m_changed"
msgstr ""

#: ../../ref/signals.txt:215
# 60b4de16b2c54e49a2a81d0ec4856be8
msgid "Sent when a :class:`ManyToManyField` is changed on a model instance. Strictly speaking, this is not a model signal since it is sent by the :class:`ManyToManyField`, but since it complements the :data:`pre_save`/:data:`post_save` and :data:`pre_delete`/:data:`post_delete` when it comes to tracking changes to models, it is included here."
msgstr ""

#: ../../ref/signals.txt:224
# ebb8622290d84e4095ca4bb604c97657
msgid "The intermediate model class describing the :class:`ManyToManyField`. This class is automatically created when a many-to-many field is defined; you can access it using the ``through`` attribute on the many-to-many field."
msgstr ""

#: ../../ref/signals.txt:230
# e950fd7071ca42bfacdf6bf4e63b103c
msgid "The instance whose many-to-many relation is updated. This can be an instance of the ``sender``, or of the class the :class:`ManyToManyField` is related to."
msgstr ""

#: ../../ref/signals.txt:235
# b087a6fd68f14beea2726eb263e3db57
msgid "A string indicating the type of update that is done on the relation. This can be one of the following:"
msgstr ""

#: ../../ref/signals.txt:239
# f85f9375a0ca44acbecda4e25fecd786
msgid "Sent *before* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:241
# a4b8016c0a344fee948c1674d0ec4e69
msgid "Sent *after* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:243
# fc39108520a140d9a2ae8d51ac39da69
msgid "Sent *before* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:245
# bab8f1b0b50746948eebe72ec4fc4a1f
msgid "Sent *after* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:247
# b86314f124694504a282699d0473f170
msgid "Sent *before* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:249
# 6455975a6739491c998cec3aa5a7bae2
msgid "Sent *after* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:252
# dcfd5c9abbb2492f8cb73554151aec6f
msgid "Indicates which side of the relation is updated (i.e., if it is the forward or reverse relation that is being modified)."
msgstr ""

#: ../../ref/signals.txt:256
# 06ea7213fed74c929a6a93c24b3bab1f
msgid "The class of the objects that are added to, removed from or cleared from the relation."
msgstr ""

#: ../../ref/signals.txt:260
# 332743c1b58249acb79a377013ac0596
msgid "For the ``pre_add``, ``post_add``, ``pre_remove`` and ``post_remove`` actions, this is a list of primary key values that have been added to or removed from the relation."
msgstr ""

#: ../../ref/signals.txt:264
# c0b4eb7871484d5b80fa49fd7c7a8bc4
msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr ""

#: ../../ref/signals.txt:269
# 6d97859add114388b44c12733884f215
msgid "For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled like this::"
msgstr ""

#: ../../ref/signals.txt:280
# 0661af92ec524aceb540ed2b27dee09f
msgid "If we connected a handler like this::"
msgstr ""

#: ../../ref/signals.txt:288
# f5db0704213149b4aa30de8d8cd97174
msgid "and then did something like this::"
msgstr ""

#: ../../ref/signals.txt:294
# 06ba433b3c694f689467a25676b5f8fc
msgid "the arguments sent to a :data:`m2m_changed` handler (``topppings_changed`` in the example above) would be:"
msgstr ""

#: ../../ref/signals.txt:300
#: ../../ref/signals.txt:326
# 12a237756e5f4d62b61843aafc7490f9
# be38d696a7b64c09a7d0c6a8a8f74347
msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr ""

#: ../../ref/signals.txt:302
# 04afad2fd1a0466495eb3bf74b77076f
msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:304
#: ../../ref/signals.txt:330
# 622044d62aa44997a0cd2f9806cb698b
# f12669bc38fa44ad8847372ed374761d
msgid "``action``"
msgstr ""

#: ../../ref/signals.txt:304
# e52ce772cf954ecb87243512534196d3
msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr ""

#: ../../ref/signals.txt:306
# a8d04e9f4ea54a448da488f069c3e8f8
msgid "``False`` (``Pizza`` contains the :class:`ManyToManyField`, so this call modifies the forward relation)"
msgstr ""

#: ../../ref/signals.txt:309
# 3f298f2def51446ea03c9d69c88e2432
msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr ""

#: ../../ref/signals.txt:312
#: ../../ref/signals.txt:338
# 8295411cb5bd4604b5fd1fe2ef7e1a4a
# ea4fb1c0087245a784e4726f6ff62f9c
msgid "``pk_set``"
msgstr ""

#: ../../ref/signals.txt:312
# 6e9a1de448134720b2afdb67d15bbc7b
msgid "``[t.id]`` (since only ``Topping t`` was added to the relation)"
msgstr ""

#: ../../ref/signals.txt:314
#: ../../ref/signals.txt:341
# 844decc343cb4ca5934859d1486f59a8
# 6670c935362c4b4a8fa627e2fa5b02ba
msgid "``\"default\"`` (since the default router sends writes here)"
msgstr ""

#: ../../ref/signals.txt:317
# b949ba295159435bbcc326d6d0dcdd61
msgid "And if we would then do something like this::"
msgstr ""

#: ../../ref/signals.txt:321
# 0cc35448afc741a5a3df37015e29c353
msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr ""

#: ../../ref/signals.txt:328
# 6acd5896b0544c92af25490b3c01b701
msgid "``t`` (the ``Topping`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:330
# f850cf828b494f1ea1fd9348da709a01
msgid "``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr ""

#: ../../ref/signals.txt:332
# 48d9f8db4061447ca3c9ca4c0adc2521
msgid "``True`` (``Pizza`` contains the :class:`ManyToManyField`, so this call modifies the reverse relation)"
msgstr ""

#: ../../ref/signals.txt:335
# 5cb646048dda410d81ff4bd52ad78714
msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr ""

#: ../../ref/signals.txt:338
# d3f95f769bec4f398bec19476d2c3a1c
msgid "``[p.id]`` (since only ``Pizza p`` was removed from the relation)"
msgstr ""

#: ../../ref/signals.txt:345
# 803287337d0a49f580bb32bd6abe3169
msgid "class_prepared"
msgstr ""

#: ../../ref/signals.txt:350
# f2e259ffd3594d43acf8aec35e350e6b
msgid "Sent whenever a model class has been \"prepared\" -- that is, once model has been defined and registered with Django's model system. Django uses this signal internally; it's not generally used in third-party applications."
msgstr ""

#: ../../ref/signals.txt:354
# c97d0b78ef394209a730fb52675c2839
msgid "Arguments that are sent with this signal:"
msgstr ""

#: ../../ref/signals.txt:357
# 4caf9005644b4d33a342baca65a8bc1d
msgid "The model class which was just prepared."
msgstr ""

#: ../../ref/signals.txt:360
# a7040af2eaa546bf8928b17eaa5a0db5
msgid "Management signals"
msgstr ""

#: ../../ref/signals.txt:362
# ef7e60b7d7504f57a94a3ed1d775cff4
msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ""

#: ../../ref/signals.txt:365
# f353ac2755284e6fb83b9978ea5ba92d
msgid "post_syncdb"
msgstr ""

#: ../../ref/signals.txt:370
# fcce1f02cf5348468fdd597c959c1e17
msgid "Sent by the :djadmin:`syncdb` command after it installs an application, and the :djadmin:`flush` command."
msgstr ""

#: ../../ref/signals.txt:373
# 2b5bf38dd0f9417fa75389f9c5873459
msgid "Any handlers that listen to this signal need to be written in a particular place: a ``management`` module in one of your :setting:`INSTALLED_APPS`. If handlers are registered anywhere else they may not be loaded by :djadmin:`syncdb`. It is important that handlers of this signal perform idempotent changes (e.g. no database alterations) as this may cause the :djadmin:`flush` management command to fail if it also ran during the :djadmin:`syncdb` command."
msgstr ""

#: ../../ref/signals.txt:384
# d6dfa6b50fb443bdb1e347f4faa2cba2
msgid "The ``models`` module that was just installed. That is, if :djadmin:`syncdb` just installed an app called ``\"foo.bar.myapp\"``, ``sender`` will be the ``foo.bar.myapp.models`` module."
msgstr ""

#: ../../ref/signals.txt:389
# 31b440a18e354b74bf178ea858af0963
msgid "Same as ``sender``."
msgstr ""

#: ../../ref/signals.txt:392
# c21b9af92e9b4684971fe157da5171c0
msgid "A list of the model classes from any app which :djadmin:`syncdb` has created so far."
msgstr ""

#: ../../ref/signals.txt:396
# 84f1f4bfea0a44a8b3b465a9a965527d
msgid "Indicates how much information manage.py is printing on screen. See the :djadminopt:`--verbosity` flag for details."
msgstr ""

#: ../../ref/signals.txt:399
# 1d0bf925571f4f36a3988f215179a22c
msgid "Functions which listen for :data:`post_syncdb` should adjust what they output to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:403
# 07be7f85cac64c7b9859c23932d50945
msgid "If ``interactive`` is ``True``, it's safe to prompt the user to input things on the command line. If ``interactive`` is ``False``, functions which listen for this signal should not try to prompt for anything."
msgstr ""

#: ../../ref/signals.txt:407
# 1e13867183444e708ca1faf778fa7b9f
msgid "For example, the :mod:`django.contrib.auth` app only prompts to create a superuser when ``interactive`` is ``True``."
msgstr ""

#: ../../ref/signals.txt:410
# 8d4240e824194ed087330525afe1d6f3
msgid "For example, ``yourapp/management/__init__.py`` could be written like::"
msgstr ""

#: ../../ref/signals.txt:422
# 00e32a34d7554a03872b39602cef13ed
msgid "Request/response signals"
msgstr ""

#: ../../ref/signals.txt:427
# fd273ff4bebc41e2a68b5c0c50654f2c
msgid "Signals sent by the core framework when processing a request."
msgstr ""

#: ../../ref/signals.txt:430
# 9d75dc8e945247098b5713e3b74ea372
msgid "request_started"
msgstr ""

#: ../../ref/signals.txt:435
# fdcb7c10f79446e08b7c88f35725504f
msgid "Sent when Django begins processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:440
# 181806d0aa0c4d728bdab8611f87bd65
msgid "The handler class -- e.g. :class:`django.core.handlers.wsgi.WsgiHandler` -- that handled the request."
msgstr ""

#: ../../ref/signals.txt:445
# be1ce032f7074aa69d6a5e8b5ca80a01
msgid "request_finished"
msgstr ""

#: ../../ref/signals.txt:450
# c04c5af2d68940da898924e6ed09a8fe
msgid "Sent when Django finishes processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:455
#: ../../ref/signals.txt:468
# c0578300f53e489fa9570c3570c007c1
# a6de2db5cbe24dd1af2de9b2fd429c41
msgid "The handler class, as above."
msgstr ""

#: ../../ref/signals.txt:458
# 6a70ee9f680e4e0ba856d6f4272abaa4
msgid "got_request_exception"
msgstr ""

#: ../../ref/signals.txt:463
# db07ac5c1c7548469f44b499d5fa0419
msgid "This signal is sent whenever Django encounters an exception while processing an incoming HTTP request."
msgstr ""

#: ../../ref/signals.txt:471
# 29beb1d6104a4ce78dd70ec29c435d83
msgid "The :class:`~django.http.HttpRequest` object."
msgstr ""

#: ../../ref/signals.txt:474
# 5332608e7a8a442689f6c6867ce48da7
msgid "Test signals"
msgstr ""

#: ../../ref/signals.txt:479
# d29c53b959374e27895784d4711027bc
msgid "Signals only sent when :doc:`running tests </topics/testing>`."
msgstr ""

#: ../../ref/signals.txt:482
# 490d827037284ec1ab52ed607df2a617
msgid "setting_changed"
msgstr ""

#: ../../ref/signals.txt:489
# f5391b3f4a53424fa4d02ab3f94ae921
msgid "This signal is sent when the value of a setting is changed through the :meth:`django.test.TestCase.setting` context manager or the :func:`django.test.utils.override_settings` decorator/context manager."
msgstr ""

#: ../../ref/signals.txt:493
# 0a5c861e86b340beb3475110d6a799e3
msgid "It's actually sent twice: when the new value is applied (\"setup\") and when the original value is restored (\"teardown\")."
msgstr ""

#: ../../ref/signals.txt:499
# 2ea7387b24d5464695bd851e21aadae6
msgid "The settings handler."
msgstr ""

#: ../../ref/signals.txt:502
# 5071e0bc0a054fd0a563bc9000287583
msgid "The name of the setting."
msgstr ""

#: ../../ref/signals.txt:505
# 9fc485c028204e7a887bf22e45613b7d
msgid "The value of the setting after the change. For settings that initially don't exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""

#: ../../ref/signals.txt:509
# 4e1660870df148369c0822da62cc1522
msgid "template_rendered"
msgstr ""

#: ../../ref/signals.txt:514
# a80da1084961474284421a9df290bae0
msgid "Sent when the test system renders a template. This signal is not emitted during normal operation of a Django server -- it is only available during testing."
msgstr ""

#: ../../ref/signals.txt:520
# 4176de1751a0483ba09d8af0f8e3e3e1
msgid "The :class:`~django.template.Template` object which was rendered."
msgstr ""

#: ../../ref/signals.txt:523
# a266be8be6b44569980ec299eca52d59
msgid "Same as sender"
msgstr ""

#: ../../ref/signals.txt:526
# b9b8823b9e56493ebab9d8b8c50d3d4f
msgid "The :class:`~django.template.Context` with which the template was rendered."
msgstr ""

#: ../../ref/signals.txt:530
# 13959306ebfc46ddaf8ec6b5d8ef7a3d
msgid "Database Wrappers"
msgstr ""

#: ../../ref/signals.txt:535
# cfffd8df9a3d4981989259588373df37
msgid "Signals sent by the database wrapper when a database connection is initiated."
msgstr ""

#: ../../ref/signals.txt:539
# 74edd6209241490584a2c3e4ed2b9391
msgid "connection_created"
msgstr ""

#: ../../ref/signals.txt:544
# eff4681cedd247859fb2a58b8f12dfa4
msgid "Sent when the database wrapper makes the initial connection to the database.  This is particularly useful if you'd like to send any post connection commands to the SQL backend."
msgstr ""

#: ../../ref/signals.txt:551
# fb14fb70c9494c1ca0c664c8bf9de658
msgid "The database wrapper class -- i.e. :class:`django.db.backends.postgresql_psycopg2.DatabaseWrapper` or :class:`django.db.backends.mysql.DatabaseWrapper`, etc."
msgstr ""

#: ../../ref/signals.txt:556
# af723eeabf744d84a02650ada7ddadb0
msgid "The database connection that was opened. This can be used in a multiple-database configuration to differentiate connection signals from different databases."
msgstr ""

#: ../../ref/template-response.txt:3
# 67082e0734e7489891a446fa54373c30
msgid "TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:8
# 26fd90ca647a44c1b8b173911a58032f
msgid "Standard :class:`~django.http.HttpResponse` objects are static structures. They are provided with a block of pre-rendered content at time of construction, and while that content can be modified, it isn't in a form that makes it easy to perform modifications."
msgstr ""

#: ../../ref/template-response.txt:13
# ddd816fee3bb4cceaa0377aeec4c7858
msgid "However, it can sometimes be beneficial to allow decorators or middleware to modify a response *after* it has been constructed by the view. For example, you may want to change the template that is used, or put additional data into the context."
msgstr ""

#: ../../ref/template-response.txt:18
# fc086820f2994098b3da55df58b6f798
msgid "TemplateResponse provides a way to do just that. Unlike basic :class:`~django.http.HttpResponse` objects, TemplateResponse objects retain the details of the template and context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process."
msgstr ""

#: ../../ref/template-response.txt:25
# 331eaba10f16494d8956d237963a6378
msgid "SimpleTemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:34
# f4737133855644389f95f111df57edc3
msgid "The name of the template to be rendered. Accepts a :class:`~django.template.Template` object, a path to a template or list of template paths."
msgstr ""

#: ../../ref/template-response.txt:38
# c3a737d5b64342caacb45ffba752f204
msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr ""

#: ../../ref/template-response.txt:42
# 60bf8e0921cf45c3b49b9e49e43df8e1
msgid "The context data to be used when rendering the template. It can be a dictionary or a context object."
msgstr ""

#: ../../ref/template-response.txt:45
# 49fbe56112ea459fa75dfc629d09b2cf
msgid "Example: ``{'foo': 123}``"
msgstr ""

#: ../../ref/template-response.txt:49
# 229fbfbd53de42639d40d649f84ba5b6
msgid "The current rendered value of the response content, using the current template and context data."
msgstr ""

#: ../../ref/template-response.txt:54
# 5c9671324dc8430ab4fe122023ab43b4
msgid "A boolean indicating whether the response content has been rendered."
msgstr ""

#: ../../ref/template-response.txt:61
# 1e2ba26396c746858b2f05b32b49fc0f
msgid "Instantiates a :class:`~django.template.response.SimpleTemplateResponse` object with the given template, context, MIME type and HTTP status."
msgstr ""

#: ../../ref/template-response.txt:66
#: ../../ref/template-response.txt:157
# a81b8ea0423543f79870ab35cd6ff800
# c8433a0dc000410186322d1e032b0fbd
msgid "The full name of a template, or a sequence of template names. :class:`~django.template.Template` instances can also be used."
msgstr ""

#: ../../ref/template-response.txt:70
#: ../../ref/template-response.txt:161
# 29c07515390149abb535432a4682a2db
# 33bbc69108d74fddb0d62a4fa6cb95b2
msgid "A dictionary of values to add to the template context. By default, this is an empty dictionary. :class:`~django.template.Context` objects are also accepted as ``context`` values."
msgstr ""

#: ../../ref/template-response.txt:75
#: ../../ref/template-response.txt:166
# 416f6cf14b6c44238a2af8c7311680ed
# 81e6e4a46e1d402ab8b2563d757500eb
msgid "The HTTP Status code for the response."
msgstr ""

#: ../../ref/template-response.txt:78
#: ../../ref/template-response.txt:169
# 3a75029d1e3541648332c7efbabcd048
# f4530d3b51e341e481d6a83e2e78cc60
msgid "An alias for ``mimetype``. Historically, this parameter was only called ``mimetype``, but since this is actually the value included in the HTTP ``Content-Type`` header, it can also include the character set encoding, which makes it more than just a MIME type specification. If ``mimetype`` is specified (not ``None``), that value is used. Otherwise, ``content_type`` is used. If neither is given, :setting:`DEFAULT_CONTENT_TYPE` is used."
msgstr ""

#: ../../ref/template-response.txt:89
# dae6834c00954f318e3d325524e4efd8
msgid "Converts context data into a context instance that can be used for rendering a template. Accepts a dictionary of context data or a context object. Returns a :class:`~django.template.Context` instance containing the provided data."
msgstr ""

#: ../../ref/template-response.txt:94
# 99696f9431de4cd9a13c3244389ecaa4
msgid "Override this method in order to customize context instantiation."
msgstr ""

#: ../../ref/template-response.txt:98
# 30b2d4fbcad54aceb92750d46453647f
msgid "Resolves the template instance to use for rendering. Accepts a path of a template to use, or a sequence of template paths. :class:`~django.template.Template` instances may also be provided. Returns the :class:`~django.template.Template` instance to be rendered."
msgstr ""

#: ../../ref/template-response.txt:104
# 54fa398f66e44cfe8ff89bc9586c1590
msgid "Override this method in order to customize template rendering."
msgstr ""

#: ../../ref/template-response.txt:108
# d8d4c34f7fa74b6a915abaa9236b2f86
msgid "Add a callback that will be invoked after rendering has taken place. This hook can be used to defer certain processing operations (such as caching) until after rendering has occurred."
msgstr ""

#: ../../ref/template-response.txt:112
# 43932f7b1c7247b49b84cdca95d97db3
msgid "If the :class:`~django.template.response.SimpleTemplateResponse` has already been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:116
# cc93ca516fdd4cd4b7b8feba4a67b3d4
msgid "When called, callbacks will be passed a single argument -- the rendered :class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""

#: ../../ref/template-response.txt:120
# b4e42604becb4fc7bec9755162ef7838
msgid "If the callback returns a value that is not `None`, this will be used as the response instead of the original response object (and will be passed to the next post rendering callback etc.)"
msgstr ""

#: ../../ref/template-response.txt:126
# ab896dbb20c1435ca41d52341b525d2f
msgid "Sets :attr:`response.content` to the result obtained by :attr:`SimpleTemplateResponse.rendered_content`, runs all post-rendering callbacks, and returns the resulting response object."
msgstr ""

#: ../../ref/template-response.txt:130
# 0dc18edd6e334680905073fd34970054
msgid ":meth:`~SimpleTemplateResponse.render()` will only have an effect the first time it is called. On subsequent calls, it will return the result obtained from the first call."
msgstr ""

#: ../../ref/template-response.txt:136
# d32eb622fcf8432bad5535816314bdc1
msgid "TemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:140
# 1fa797a1a4a848f1a5f7f0cd043ae59a
msgid "TemplateResponse is a subclass of :class:`~django.template.response.SimpleTemplateResponse` that uses a :class:`~django.template.RequestContext` instead of a :class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:150
# 1b689b00919f48c48ebd2d23f145a361
msgid "Instantiates an ``TemplateResponse`` object with the given template, context, MIME type and HTTP status."
msgstr ""

#: ../../ref/template-response.txt:154
# a42a5b6c6ba545079b2a09618fe567d2
msgid "An :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/template-response.txt:178
# 5e3f2bc3f3c44f88a246baa93a7ee523
msgid "A hint indicating which application contains the current view. See the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` for more information."
msgstr ""

#: ../../ref/template-response.txt:184
# 70d48bda60014fb08e56e316628ae976
msgid "The rendering process"
msgstr ""

#: ../../ref/template-response.txt:186
# 2f1b651efe254cf398ec6e92f10e3fc8
msgid "Before a :class:`~django.template.response.TemplateResponse` instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client."
msgstr ""

#: ../../ref/template-response.txt:191
# f0f6a9c01d3040fb97a3355e4d8c29ef
msgid "There are three circumstances under which a TemplateResponse will be rendered:"
msgstr ""

#: ../../ref/template-response.txt:194
# 182db9440b894b7cae0a355e358b1105
msgid "When the TemplateResponse instance is explicitly rendered, using the :meth:`SimpleTemplateResponse.render()` method."
msgstr ""

#: ../../ref/template-response.txt:197
# f9cd9944c35f492384365a24155600f9
msgid "When the content of the response is explicitly set by assigning :attr:`response.content`."
msgstr ""

#: ../../ref/template-response.txt:200
# fe91b26c02774ddbac0b601a598b371b
msgid "After passing through template response middleware, but before passing through response middleware."
msgstr ""

#: ../../ref/template-response.txt:203
# 4e5c55384bec4a2eabab70d4465f7313
msgid "A TemplateResponse can only be rendered once. The first call to :meth:`SimpleTemplateResponse.render` sets the content of the response; subsequent rendering calls do not change the response content."
msgstr ""

#: ../../ref/template-response.txt:208
# 9148767f0ee840bb9b66080eeb82c063
msgid "However, when :attr:`response.content` is explicitly assigned, the change is always applied. If you want to force the content to be re-rendered, you can re-evaluate the rendered content, and assign the content of the response manually::"
msgstr ""

#: ../../ref/template-response.txt:231
# e1a22f0f13e24b35ae796bcd9159974f
msgid "Post-render callbacks"
msgstr ""

#: ../../ref/template-response.txt:233
# c763abe27ffb4a7d9b3a40830ee390b7
msgid "Some operations -- such as caching -- cannot be performed on an unrendered template. They must be performed on a fully complete and rendered response."
msgstr ""

#: ../../ref/template-response.txt:237
# 33b462cf9f76401ba21beffb08ed7070
msgid "If you're using middleware, the solution is easy. Middleware provides multiple opportunities to process a response on exit from a view. If you put behavior in the Response middleware is guaranteed to execute after template rendering has taken place."
msgstr ""

#: ../../ref/template-response.txt:242
# e85e0c0c59644f6c908dc78ea7739f24
msgid "However, if you're using a decorator, the same opportunities do not exist. Any behavior defined in a decorator is handled immediately."
msgstr ""

#: ../../ref/template-response.txt:245
# b302d513257940d9b4b73bdd9cae9347
msgid "To compensate for this (and any other analogous use cases), :class:`TemplateResponse` allows you to register callbacks that will be invoked when rendering has completed. Using this callback, you can defer critical processing until a point where you can guarantee that rendered content will be available."
msgstr ""

#: ../../ref/template-response.txt:251
# 22afc1964d584991acc7313fb774a9ab
msgid "To define a post-render callback, just define a function that takes a single argument -- response -- and register that function with the template response::"
msgstr ""

#: ../../ref/template-response.txt:267
# 9c9f5305efcc4abea0026b602f4b24b7
msgid "``my_render_callback()`` will be invoked after the ``mytemplate.html`` has been rendered, and will be provided the fully rendered :class:`TemplateResponse` instance as an argument."
msgstr ""

#: ../../ref/template-response.txt:271
# 67e7839770c845deaf4fc7a951553cec
msgid "If the template has already been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:275
# 72e0e5c65def4ed9b4285f8b24809821
msgid "Using TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:277
# c3d3f5fb358e4e19966b3f76bd650b61
msgid "A TemplateResponse object can be used anywhere that a normal HttpResponse can be used. It can also be used as an alternative to calling :func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/template-response.txt:281
# cf12b6c93040408fb4557afd713b68c0
msgid "For example, the following simple view returns a :class:`TemplateResponse()` with a simple template, and a context containing a queryset::"
msgstr ""

#: ../../ref/templates/api.txt:3
# 2fe39d4ac9144b87ac8045be7224ee6c
msgid "The Django template language: For Python programmers"
msgstr ""

#: ../../ref/templates/api.txt:5
# 7b8601a1969649e5907f03ed575432dd
msgid "This document explains the Django template system from a technical perspective -- how it works and how to extend it. If you're just looking for reference on the language syntax, see :doc:`/topics/templates`."
msgstr ""

#: ../../ref/templates/api.txt:9
# 13297d3230e7476b9e6c1ae57c3558fb
msgid "If you're looking to use the Django template system as part of another application -- i.e., without the rest of the framework -- make sure to read the `configuration`_ section later in this document."
msgstr ""

#: ../../ref/templates/api.txt:18
# 9ab5321b9cd446a2b36c557f043f1585
msgid "A **template** is a text document, or a normal Python string, that is marked-up using the Django template language. A template can contain **block tags** or **variables**."
msgstr ""

#: ../../ref/templates/api.txt:22
# 30d4b9f400a64ef881884824e45a85c0
msgid "A **block tag** is a symbol within a template that does something."
msgstr ""

#: ../../ref/templates/api.txt:24
# abb1f41b82f04e06a7cea0b231a9d909
msgid "This definition is deliberately vague. For example, a block tag can output content, serve as a control structure (an \"if\" statement or \"for\" loop), grab content from a database or enable access to other template tags."
msgstr ""

#: ../../ref/templates/api.txt:28
# 559f63c4d85e4768a01bbfd541409907
msgid "Block tags are surrounded by ``\"{%\"`` and ``\"%}\"``."
msgstr ""

#: ../../ref/templates/api.txt:30
# 7ba4e6b0f8d847a39f8f28e5975cba06
msgid "Example template with block tags:"
msgstr ""

#: ../../ref/templates/api.txt:36
# d6dc4be61b384e228a91df8f372f41d5
msgid "A **variable** is a symbol within a template that outputs a value."
msgstr ""

#: ../../ref/templates/api.txt:38
# 4d59d5d2973e4f119339ec000791929c
msgid "Variable tags are surrounded by ``\"{{\"`` and ``\"}}\"``."
msgstr ""

#: ../../ref/templates/api.txt:40
# 028d83daf43c4cac888483343b265ba8
msgid "Example template with variables:"
msgstr ""

#: ../../ref/templates/api.txt:46
# 0511fccb35044d1c99acf9fb9a455474
msgid "A **context** is a \"variable name\" -> \"variable value\" mapping that is passed to a template."
msgstr ""

#: ../../ref/templates/api.txt:49
# 1c3bbc64b47e41328f981ba98825f7c1
msgid "A template **renders** a context by replacing the variable \"holes\" with values from the context and executing all block tags."
msgstr ""

#: ../../ref/templates/api.txt:53
# fe69e41ba6eb497c9f6615ca3d039be5
msgid "Using the template system"
msgstr ""

#: ../../ref/templates/api.txt:57
# 9de99a46e3044803ace5bca52fa67dbe
msgid "Using the template system in Python is a two-step process:"
msgstr ""

#: ../../ref/templates/api.txt:59
# 828bb5931c8a4bb5aee914c248263b4b
msgid "First, you compile the raw template code into a ``Template`` object."
msgstr ""

#: ../../ref/templates/api.txt:60
# f4c34c7db35647c5a8621707f083acc5
msgid "Then, you call the ``render()`` method of the ``Template`` object with a given context."
msgstr ""

#: ../../ref/templates/api.txt:64
# 4d0760a56bb24bfea7399926e1450dce
msgid "Compiling a string"
msgstr ""

#: ../../ref/templates/api.txt:66
# 863a3607aeb94bd984c003123a518951
msgid "The easiest way to create a ``Template`` object is by instantiating it directly. The class lives at :class:`django.template.Template`. The constructor takes one argument -- the raw template code::"
msgstr ""

#: ../../ref/templates/api.txt:77
# 44eea56c0c374d6597d5317a9abd4e61
msgid "The system only parses your raw template code once -- when you create the ``Template`` object. From then on, it's stored internally as a \"node\" structure for performance."
msgstr ""

#: ../../ref/templates/api.txt:81
# 95755d3ee54e4a3fb5103ec8bf488b52
msgid "Even the parsing itself is quite fast. Most of the parsing happens via a single call to a single, short, regular expression."
msgstr ""

#: ../../ref/templates/api.txt:85
# 4083b87f25314cacb4a7e100b4ca9cd3
msgid "Rendering a context"
msgstr ""

#: ../../ref/templates/api.txt:89
# 8babbc7ba739449ebbf98a3c1c13f2e5
msgid "Once you have a compiled ``Template`` object, you can render a context -- or multiple contexts -- with it. The ``Context`` class lives at :class:`django.template.Context`, and the constructor takes two (optional) arguments:"
msgstr ""

#: ../../ref/templates/api.txt:94
# 1f7fae33e55842ffbab5e33b6662c398
msgid "A dictionary mapping variable names to variable values."
msgstr ""

#: ../../ref/templates/api.txt:96
# 5470ef6b917f437eacc9d2ce42c5a5b9
msgid "The name of the current application. This application name is used to help :ref:`resolve namespaced URLs<topics-http-reversing-url-namespaces>`. If you're not using namespaced URLs, you can ignore this argument."
msgstr ""

#: ../../ref/templates/api.txt:100
# a04a2589b6ad4c2e85371b93e52f5221
msgid "Call the ``Template`` object's ``render()`` method with the context to \"fill\" the template::"
msgstr ""

#: ../../ref/templates/api.txt:115
# df875a46bb2b4b64ad23a4be93d9326a
msgid "Variables and lookups"
msgstr ""

#: ../../ref/templates/api.txt:117
# c4458f7bd00b455481b17dfd61d3580f
msgid "Variable names must consist of any letter (A-Z), any digit (0-9), an underscore (but they must not start with an underscore) or a dot."
msgstr ""

#: ../../ref/templates/api.txt:120
# 720e17b81a7b4da7a73d3e4f5e7ae753
msgid "Dots have a special meaning in template rendering. A dot in a variable name signifies a **lookup**. Specifically, when the template system encounters a dot in a variable name, it tries the following lookups, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:124
# 3c8b7c5e67aa48bfa20f414bf7727880
msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr ""

#: ../../ref/templates/api.txt:125
# 27a5498f8db544588e48525604946a4f
msgid "Attribute lookup. Example: ``foo.bar``"
msgstr ""

#: ../../ref/templates/api.txt:126
# 960af0b3bb3c4952817ad64bd88fd1f5
msgid "List-index lookup. Example: ``foo[bar]``"
msgstr ""

#: ../../ref/templates/api.txt:128
# caf0aa4b6c1c4d02b7294e85f37b35a1
msgid "Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be interpreted as a literal string and not using the value of the variable \"bar\", if one exists in the template context."
msgstr ""

#: ../../ref/templates/api.txt:132
# 169c895292c74baaa2d09b485af9b8bc
msgid "The template system uses the first lookup type that works. It's short-circuit logic. Here are a few examples::"
msgstr ""

#: ../../ref/templates/api.txt:153
# fb9d3f6ae85e4b9fb56adc74640e014d
msgid "If any part of the variable is callable, the template system will try calling it. Example::"
msgstr ""

#: ../../ref/templates/api.txt:163
# 33b7770097984309ae5b4c0614264966
msgid "Callable variables are slightly more complex than variables which only require straight lookups. Here are some things to keep in mind:"
msgstr ""

#: ../../ref/templates/api.txt:166
# 3781bba01a514f559a510069fb9575c7
msgid "If the variable raises an exception when called, the exception will be propagated, unless the exception has an attribute ``silent_variable_failure`` whose value is ``True``. If the exception *does* have a ``silent_variable_failure`` attribute whose value is ``True``, the variable will render as an empty string. Example::"
msgstr ""

#: ../../ref/templates/api.txt:191
# 771087bbba394ffb8c24a9595d18408d
msgid "Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the base class for all Django database API ``DoesNotExist`` exceptions, has ``silent_variable_failure = True``. So if you're using Django templates with Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""

#: ../../ref/templates/api.txt:197
# 2e7c3cd9658c483db375a951174c25db
msgid "A variable can only be called if it has no required arguments. Otherwise, the system will return an empty string."
msgstr ""

#: ../../ref/templates/api.txt:202
# 3c89c34267d6441cacbb3a5965d42dfb
msgid "Obviously, there can be side effects when calling some variables, and it'd be either foolish or a security hole to allow the template system to access them."
msgstr ""

#: ../../ref/templates/api.txt:206
# e6c486e760964dcab9388a7d3ad6621c
msgid "A good example is the :meth:`~django.db.models.Model.delete` method on each Django model object. The template system shouldn't be allowed to do something like this::"
msgstr ""

#: ../../ref/templates/api.txt:212
# 1a79d5321844407d99319a6f50a19d52
msgid "To prevent this, set an ``alters_data`` attribute on the callable variable. The template system won't call a variable if it has ``alters_data=True`` set, and will instead replace the variable with :setting:`TEMPLATE_STRING_IF_INVALID`, unconditionally.  The dynamically-generated :meth:`~django.db.models.Model.delete` and :meth:`~django.db.models.Model.save` methods on Django model objects get ``alters_data=True`` automatically. Example::"
msgstr ""

#: ../../ref/templates/api.txt:235
# 3d5db27dd077481bbde4df0a3f717bbc
msgid "How invalid variables are handled"
msgstr ""

#: ../../ref/templates/api.txt:237
# 5e058ca3f743415c9da16dc808e85b84
msgid "Generally, if a variable doesn't exist, the template system inserts the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to ``''`` (the empty string) by default."
msgstr ""

#: ../../ref/templates/api.txt:241
# bb3e8579ed1444e8a3a8a70478c16d18
msgid "Filters that are applied to an invalid variable will only be applied if :setting:`TEMPLATE_STRING_IF_INVALID` is set to ``''`` (the empty string). If :setting:`TEMPLATE_STRING_IF_INVALID` is set to any other value, variable filters will be ignored."
msgstr ""

#: ../../ref/templates/api.txt:246
# facf7b8b047b4399972089ffd7e6c9ca
msgid "This behavior is slightly different for the ``if``, ``for`` and ``regroup`` template tags. If an invalid variable is provided to one of these template tags, the variable will be interpreted as ``None``. Filters are always applied to invalid variables within these template tags."
msgstr ""

#: ../../ref/templates/api.txt:251
# 1478216abf7d4ad2be6dff8f357d187d
msgid "If :setting:`TEMPLATE_STRING_IF_INVALID` contains a ``'%s'``, the format marker will be replaced with the name of the invalid variable."
msgstr ""

#: ../../ref/templates/api.txt:256
# c441b4509d7641f898b6ea24a41377d0
msgid "While :setting:`TEMPLATE_STRING_IF_INVALID` can be a useful debugging tool, it is a bad idea to turn it on as a 'development default'."
msgstr ""

#: ../../ref/templates/api.txt:259
# 53f52b6309d54a34b1464001cf3626ab
msgid "Many templates, including those in the Admin site, rely upon the silence of the template system when a non-existent variable is encountered. If you assign a value other than ``''`` to :setting:`TEMPLATE_STRING_IF_INVALID`, you will experience rendering problems with these templates and sites."
msgstr ""

#: ../../ref/templates/api.txt:265
# 11da94e0e4024f5ead53c02423dda102
msgid "Generally, :setting:`TEMPLATE_STRING_IF_INVALID` should only be enabled in order to debug a specific template problem, then cleared once debugging is complete."
msgstr ""

#: ../../ref/templates/api.txt:270
# 596b925ba5d8412194c0e6a25af353fe
msgid "Builtin variables"
msgstr ""

#: ../../ref/templates/api.txt:272
# 33ed7c97afaa4e34879a8d714fa3d568
msgid "Every context contains ``True``, ``False`` and ``None``. As you would expect, these variables resolve to the corresponding Python objects."
msgstr ""

#: ../../ref/templates/api.txt:280
# f61009b2934d40699a110f56e8a62fab
msgid "Playing with Context objects"
msgstr ""

#: ../../ref/templates/api.txt:284
# 3a8eef98f1674e299dc1d227bf0abc7f
msgid "Most of the time, you'll instantiate ``Context`` objects by passing in a fully-populated dictionary to ``Context()``. But you can add and delete items from a ``Context`` object once it's been instantiated, too, using standard dictionary syntax::"
msgstr ""

#: ../../ref/templates/api.txt:303
# fdafeaa3f8f441998e3b9e3b08520a36
msgid "A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` it. If you ``pop()`` too much, it'll raise ``django.template.ContextPopException``::"
msgstr ""

#: ../../ref/templates/api.txt:326
# 08fdea85945b44d4aad5b71be19b1610
msgid "In addition to ``push()`` and ``pop()``, the ``Context`` object also defines an ``update()`` method. This works like ``push()`` but takes a dictionary as an argument and pushes that dictionary onto the stack instead of an empty one."
msgstr ""

#: ../../ref/templates/api.txt:342
# 59f85e1bfaf5445f8973574b1f83a018
msgid "Using a ``Context`` as a stack comes in handy in some custom template tags, as you'll see below."
msgstr ""

#: ../../ref/templates/api.txt:348
# cee096aa310e4e3f933df93dd4d19e32
msgid "Subclassing Context: RequestContext"
msgstr ""

#: ../../ref/templates/api.txt:352
# 2904d46d9b7b4d458eb527b4707ce919
msgid "Django comes with a special ``Context`` class, ``django.template.RequestContext``, that acts slightly differently than the normal ``django.template.Context``. The first difference is that it takes an :class:`~django.http.HttpRequest` as its first argument. For example::"
msgstr ""

#: ../../ref/templates/api.txt:361
# 88313ae21b534ea2baa791ed36d279a9
msgid "The second difference is that it automatically populates the context with a few variables, according to your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:364
# 3ee0bae97b2c485f8b838923978ef63c
msgid "The :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting is a tuple of callables -- called **context processors** -- that take a request object as their argument and return a dictionary of items to be merged into the context. By default, :setting:`TEMPLATE_CONTEXT_PROCESSORS` is set to::"
msgstr ""

#: ../../ref/templates/api.txt:377
# 2d0a20423d7b418187472a90bbed64c1
msgid "In addition to these, ``RequestContext`` always uses ``django.core.context_processors.csrf``.  This is a security related context processor required by the admin and other contrib apps, and, in case of accidental misconfiguration, it is deliberately hardcoded in and cannot be turned off by the :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:383
# e23c97fbfdc74a95a12febebe4f231fb
msgid "Each processor is applied in order. That means, if one processor adds a variable to the context and a second processor adds a variable with the same name, the second will override the first. The default processors are explained below."
msgstr ""

#: ../../ref/templates/api.txt:390
# 5ec6f20304294918bca895cbb61f8018
msgid "When you use ``RequestContext``, the variables you supply directly are added first, followed any variables supplied by context processors. This means that a context processor may overwrite a variable you've supplied, so take care to avoid variable names which overlap with those supplied by your context processors."
msgstr ""

#: ../../ref/templates/api.txt:396
# 29e64446e92e4fc3832ea4c1f07939b1
msgid "Also, you can give ``RequestContext`` a list of additional processors, using the optional, third positional argument, ``processors``. In this example, the ``RequestContext`` instance gets a ``ip_address`` variable::"
msgstr ""

#: ../../ref/templates/api.txt:412
# 543acb75ef524ca097d61214cc3a7ca0
msgid "If you're using Django's :func:`~django.shortcuts.render_to_response()` shortcut to populate a template with the contents of a dictionary, your template will be passed a ``Context`` instance by default (not a ``RequestContext``). To use a ``RequestContext`` in your template rendering, pass an optional third argument to :func:`~django.shortcuts.render_to_response()`: a ``RequestContext`` instance. Your code might look like this::"
msgstr ""

#: ../../ref/templates/api.txt:426
# f116f43bc599477b83a9b1fe46791671
msgid "Alternatively, use the :meth:`~django.shortcuts.render()` shortcut which is the same as a call to :func:`~django.shortcuts.render_to_response()` with a context_instance argument that forces the use of a ``RequestContext``."
msgstr ""

#: ../../ref/templates/api.txt:430
# c6d1cc9f55a64fbd93e9beb3ea9c29a2
msgid "Here's what each of the default processors does:"
msgstr ""

#: ../../ref/templates/api.txt:433
# 401299f1b0ba4c63b69f7b66312a161e
msgid "django.contrib.auth.context_processors.auth"
msgstr ""

#: ../../ref/templates/api.txt:435
# 14857259c710435fa0fd7fd4b800a38f
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these variables:"
msgstr ""

#: ../../ref/templates/api.txt:438
# e854c5d37f6546ca83909e319d4828d5
msgid "``user`` -- An ``auth.User`` instance representing the currently logged-in user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""

#: ../../ref/templates/api.txt:442
# ab0152a94e4d45aaa438968aec5e594a
msgid "``perms`` -- An instance of ``django.contrib.auth.context_processors.PermWrapper``, representing the permissions that the currently logged-in user has."
msgstr ""

#: ../../ref/templates/api.txt:447
# c028e5eb74354e91b1cbb96d93004e89
msgid "django.core.context_processors.debug"
msgstr ""

#: ../../ref/templates/api.txt:449
# f668e40d96214d548625e056737b5962
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these two variables -- but only if your :setting:`DEBUG` setting is set to ``True`` and the request's IP address (``request.META['REMOTE_ADDR']``) is in the :setting:`INTERNAL_IPS` setting:"
msgstr ""

#: ../../ref/templates/api.txt:454
# 0fe4ffd82f2e45aa9a35baed49495ef9
msgid "``debug`` -- ``True``. You can use this in templates to test whether you're in :setting:`DEBUG` mode."
msgstr ""

#: ../../ref/templates/api.txt:456
# 4faa264bd8424105b78030acf369cd85
msgid "``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, representing every SQL query that has happened so far during the request and how long it took. The list is in order by query."
msgstr ""

#: ../../ref/templates/api.txt:461
# 6104782916df49f69ddb446132ab7af3
msgid "django.core.context_processors.i18n"
msgstr ""

#: ../../ref/templates/api.txt:463
# 5c5a606f933248e69ed28a78493c716a
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain these two variables:"
msgstr ""

#: ../../ref/templates/api.txt:466
# 40bc9cb18d294e44988a1b488133ff28
msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/templates/api.txt:467
# e973db3f04154b40a1b6f289be1a79f0
msgid "``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/templates/api.txt:470
# 71e01ae2bbdc4ecaaf61747f3065a9d7
msgid "See :doc:`/topics/i18n/index` for more."
msgstr ""

#: ../../ref/templates/api.txt:473
# 15942f8d478044448a58a7d46cbe3dbf
msgid "django.core.context_processors.media"
msgstr ""

#: ../../ref/templates/api.txt:475
# 4548e7aa6b6b412b8e55d1588e02863e
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``MEDIA_URL``, providing the value of the :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../ref/templates/api.txt:480
# 689ef6087c26466aa36f66be0a79b7c8
msgid "django.core.context_processors.static"
msgstr ""

#: ../../ref/templates/api.txt:484
# 9f1a470bc08e4d59b11c4f72d183d3dd
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``STATIC_URL``, providing the value of the :setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/templates/api.txt:489
# 6972b7e37635416aa0860e7c071a994a
msgid "django.core.context_processors.csrf"
msgstr ""

#: ../../ref/templates/api.txt:491
# 1d217b02df674e15b72135c875449346
msgid "This processor adds a token that is needed by the :ttag:`csrf_token` template tag for protection against :doc:`Cross Site Request Forgeries </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/templates/api.txt:496
# 772e6a4189a849dba37858b9d05fd05a
msgid "django.core.context_processors.request"
msgstr ""

#: ../../ref/templates/api.txt:498
# e16ec83f3a054a859667590072d65062
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a variable ``request``, which is the current :class:`~django.http.HttpRequest`. Note that this processor is not enabled by default; you'll have to activate it."
msgstr ""

#: ../../ref/templates/api.txt:504
# 14607a17cf0246c29e1d8619b1bf736a
msgid "django.contrib.messages.context_processors.messages"
msgstr ""

#: ../../ref/templates/api.txt:506
# 21a1849e6759447ba7ef4b1a5ad37b25
msgid "If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every ``RequestContext`` will contain a single additional variable:"
msgstr ""

#: ../../ref/templates/api.txt:509
# 44330a600cbd40b790377bc176f25ee8
msgid "``messages`` -- A list of messages (as strings) that have been set via the user model (using ``user.message_set.create``) or through the :doc:`messages framework </ref/contrib/messages>`."
msgstr ""

#: ../../ref/templates/api.txt:514
# 96022292368d4ba7b96f99537f7dc972
msgid "Writing your own context processors"
msgstr ""

#: ../../ref/templates/api.txt:516
# a2257406c5234b66a598ec674706394e
msgid "A context processor has a very simple interface: It's just a Python function that takes one argument, an :class:`~django.http.HttpRequest` object, and returns a dictionary that gets added to the template context. Each context processor *must* return a dictionary."
msgstr ""

#: ../../ref/templates/api.txt:521
# 9813b76762044610aa1d4b99c9e0096a
msgid "Custom context processors can live anywhere in your code base. All Django cares about is that your custom context processors are pointed-to by your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../ref/templates/api.txt:526
# c66f2c15053e4214888d316536726505
msgid "Loading templates"
msgstr ""

#: ../../ref/templates/api.txt:528
# 12aa4633608e4b7497dd5061e38c671f
msgid "Generally, you'll store templates in files on your filesystem rather than using the low-level ``Template`` API yourself. Save templates in a directory specified as a **template directory**."
msgstr ""

#: ../../ref/templates/api.txt:532
# af238f4d1d9340c08900f9389d7de370
msgid "Django searches for template directories in a number of places, depending on your template-loader settings (see \"Loader types\" below), but the most basic way of specifying template directories is by using the :setting:`TEMPLATE_DIRS` setting."
msgstr ""

#: ../../ref/templates/api.txt:538
# 2da57c3b54bd4e50be0307ed0160c34b
msgid "The TEMPLATE_DIRS setting"
msgstr ""

#: ../../ref/templates/api.txt:540
# 276d092cbe2f4d21bb23add1db8a5a0c
msgid "Tell Django what your template directories are by using the :setting:`TEMPLATE_DIRS` setting in your settings file. This should be set to a list or tuple of strings that contain full paths to your template directory(ies). Example::"
msgstr ""

#: ../../ref/templates/api.txt:550
# 798eb1c52b634555996f5fbebeb6e5c6
msgid "Your templates can go anywhere you want, as long as the directories and templates are readable by the Web server. They can have any extension you want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""

#: ../../ref/templates/api.txt:559
# 246a49a458464ea482f8ec8d0d260afd
msgid "The Python API"
msgstr ""

#: ../../ref/templates/api.txt:561
# eba23c6227ed41c0b375e2135ff45e1f
msgid "Django has two ways to load templates from files:"
msgstr ""

#: ../../ref/templates/api.txt:565
# 3f83b47bcf0d482ab0b19a07fe71f311
msgid "``get_template`` returns the compiled template (a ``Template`` object) for the template with the given name. If the template doesn't exist, it raises ``django.template.TemplateDoesNotExist``."
msgstr ""

#: ../../ref/templates/api.txt:571
# 0d7cf8b36bf34c8bbefaf84f1ec4a0a3
msgid "``select_template`` is just like ``get_template``, except it takes a list of template names. Of the list, it returns the first template that exists."
msgstr ""

#: ../../ref/templates/api.txt:574
# 6501a3ca0b8e45b9816970d77da637b5
msgid "For example, if you call ``get_template('story_detail.html')`` and have the above :setting:`TEMPLATE_DIRS` setting, here are the files Django will look for, in order:"
msgstr ""

#: ../../ref/templates/api.txt:578
#: ../../ref/templates/api.txt:586
# f0924e69628248efb642a24db1b39661
# c4b6a32b8e0b4f6f8ea13c1c3203ec52
msgid "``/home/html/templates/lawrence.com/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:579
#: ../../ref/templates/api.txt:587
# 29ccd5b4a01848e19f815ac4a6bbdd4a
# d6c9f80d236c45dca270f387c53a4e48
msgid "``/home/html/templates/default/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:581
# 8df4d5d59fff4f2a84a38cf989cfcc25
msgid "If you call ``select_template(['story_253_detail.html', 'story_detail.html'])``, here's what Django will look for:"
msgstr ""

#: ../../ref/templates/api.txt:584
# 77fe6d1d1b8b4ffe90a643eeea940495
msgid "``/home/html/templates/lawrence.com/story_253_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:585
# 8d3bbf6a6b814a248973b9e33e478d82
msgid "``/home/html/templates/default/story_253_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:589
# 13f02bb9b79246d284472b628350bea3
msgid "When Django finds a template that exists, it stops looking."
msgstr ""

#: ../../ref/templates/api.txt:593
# a5015c514cdc4ef1982950cf95ddd9f1
msgid "You can use ``select_template()`` for super-flexible \"templatability.\" For example, if you've written a news story and want some stories to have custom templates, use something like ``select_template(['story_%s_detail.html' % story.id, 'story_detail.html'])``. That'll allow you to use a custom template for an individual story, with a fallback template for stories that don't have custom templates."
msgstr ""

#: ../../ref/templates/api.txt:601
# 4d1a9783ea3d4936b7732975806aff62
msgid "Using subdirectories"
msgstr ""

#: ../../ref/templates/api.txt:603
# 76bd98db9dc54d3fa1cdd1b3bc290430
msgid "It's possible -- and preferable -- to organize templates in subdirectories of the template directory. The convention is to make a subdirectory for each Django app, with subdirectories within those subdirectories as needed."
msgstr ""

#: ../../ref/templates/api.txt:607
# dff1665c9278493ba98f669eef5c46fe
msgid "Do this for your own sanity. Storing all templates in the root level of a single directory gets messy."
msgstr ""

#: ../../ref/templates/api.txt:610
# 17dd486eed9d4ff880f4f7d101da342b
msgid "To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

#: ../../ref/templates/api.txt:614
# b6eac9c97e2147bfaca1e988fa4b713f
msgid "Using the same :setting:`TEMPLATE_DIRS` setting from above, this example ``get_template()`` call will attempt to load the following templates:"
msgstr ""

#: ../../ref/templates/api.txt:617
# 6f8fbd07742f453b9bd272f95dd0e657
msgid "``/home/html/templates/lawrence.com/news/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:618
# e87024a786aa47558735c31f88e231e3
msgid "``/home/html/templates/default/news/story_detail.html``"
msgstr ""

#: ../../ref/templates/api.txt:623
# 5296e7001c31448aacd94e10e125ea00
msgid "Loader types"
msgstr ""

#: ../../ref/templates/api.txt:625
# 6f0abcc416f94d8bb48d26e2b2ed6fe6
msgid "By default, Django uses a filesystem-based template loader, but Django comes with a few other template loaders, which know how to load templates from other sources."
msgstr ""

#: ../../ref/templates/api.txt:629
# 5ab6cd258a344bcfb6663cb9f71240ee
msgid "Some of these other loaders are disabled by default, but you can activate them by editing your :setting:`TEMPLATE_LOADERS` setting. :setting:`TEMPLATE_LOADERS` should be a tuple of strings, where each string represents a template loader class. Here are the template loaders that come with Django:"
msgstr ""

#: ../../ref/templates/api.txt:635
# 80112279a39349e7ba8767a1aeb5fc98
msgid "Loads templates from the filesystem, according to :setting:`TEMPLATE_DIRS`. This loader is enabled by default."
msgstr ""

#: ../../ref/templates/api.txt:639
# d9d317cfbfab4c39a569def9331aad8f
msgid "Loads templates from Django apps on the filesystem. For each app in :setting:`INSTALLED_APPS`, the loader looks for a ``templates`` subdirectory. If the directory exists, Django looks for templates in there."
msgstr ""

#: ../../ref/templates/api.txt:643
# f7912e2545ef4607b214e9e596fcb3f2
msgid "This means you can store templates with your individual apps. This also makes it easy to distribute Django apps with default templates."
msgstr ""

#: ../../ref/templates/api.txt:646
# cb27368f7ad54839b821fbb71ae6cdf5
msgid "For example, for this setting::"
msgstr ""

#: ../../ref/templates/api.txt:650
# de28ba4c078c4041b42c90da5531e345
msgid "...then ``get_template('foo.html')`` will look for ``foo.html`` in these directories, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:653
# 3ebc7be5a7184fd4aa9c13de86563d3d
msgid "``/path/to/myproject/polls/templates/``"
msgstr ""

#: ../../ref/templates/api.txt:654
# 357dbe49f97f4f23b9912580e579589c
msgid "``/path/to/myproject/music/templates/``"
msgstr ""

#: ../../ref/templates/api.txt:656
# de703c5f6ce948f5b680427f3fe80b66
msgid "... and will use the one it finds first."
msgstr ""

#: ../../ref/templates/api.txt:658
# 313ca34472c7433a9f8ef9c9067d46d8
msgid "The order of :setting:`INSTALLED_APPS` is significant! For example, if you want to customize the Django admin, you might choose to override the standard ``admin/base_site.html`` template, from ``django.contrib.admin``, with your own ``admin/base_site.html`` in ``myproject.polls``. You must then make sure that your ``myproject.polls`` comes *before* ``django.contrib.admin`` in :setting:`INSTALLED_APPS`, otherwise ``django.contrib.admin``'s will be loaded first and yours will be ignored."
msgstr ""

#: ../../ref/templates/api.txt:666
# 80de6d1b264843f18c185a0fbff6e2de
msgid "Note that the loader performs an optimization when it is first imported: it caches a list of which :setting:`INSTALLED_APPS` packages have a ``templates`` subdirectory."
msgstr ""

#: ../../ref/templates/api.txt:670
# 256734ac43564f0a93bcc141886571a3
msgid "This loader is enabled by default."
msgstr ""

#: ../../ref/templates/api.txt:673
# 06512f8af5924fb799f82a9cc5fccb90
msgid "Just like ``app_directories`` above, but it loads templates from Python eggs rather than from the filesystem."
msgstr ""

#: ../../ref/templates/api.txt:676
#: ../../ref/templates/api.txt:708
# 0e3e0b65a39d44a7b792404331c3d0eb
# e5b36efc75444dd59aca3365eb34d190
msgid "This loader is disabled by default."
msgstr ""

#: ../../ref/templates/api.txt:679
# 55f8f3cbf36146d184c7d99a4f6c5159
msgid "By default, the templating system will read and compile your templates every time they need to be rendered. While the Django templating system is quite fast, the overhead from reading and compiling templates can add up."
msgstr ""

#: ../../ref/templates/api.txt:683
# 969166933cd340d78aa1524bfa48dd0f
msgid "The cached template loader is a class-based loader that you configure with a list of other loaders that it should wrap. The wrapped loaders are used to locate unknown templates when they are first encountered. The cached loader then stores the compiled ``Template`` in memory. The cached ``Template`` instance is returned for subsequent requests to load the same template."
msgstr ""

#: ../../ref/templates/api.txt:689
# c239ea5a167e4779b3bc211fea08082e
msgid "For example, to enable template caching with the ``filesystem`` and ``app_directories`` template loaders you might use the following settings::"
msgstr ""

#: ../../ref/templates/api.txt:701
# f72f342e7c6e48c8b521f8a95100184b
msgid "All of the built-in Django template tags are safe to use with the cached loader, but if you're using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the ``Node`` implementation for each tag is thread-safe. For more information, see :ref:`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

#: ../../ref/templates/api.txt:710
# fbbd5a904a6c4e1ca50efcf46b5842b0
msgid "Django uses the template loaders in order according to the :setting:`TEMPLATE_LOADERS` setting. It uses each loader until a loader finds a match."
msgstr ""

#: ../../ref/templates/api.txt:715
# 8ce375cd2293447ba25ac46365b978dc
msgid "The ``render_to_string`` shortcut"
msgstr ""

#: ../../ref/templates/api.txt:719
# b3ef598ad304497696e704c1ad5b5340
msgid "To cut down on the repetitive nature of loading and rendering templates, Django provides a shortcut function which largely automates the process: ``render_to_string()`` in :mod:`django.template.loader`, which loads a template, renders it and returns the resulting string::"
msgstr ""

#: ../../ref/templates/api.txt:728
# 266268ef10604427a08e85faf1c4a2a6
msgid "The ``render_to_string`` shortcut takes one required argument -- ``template_name``, which should be the name of the template to load and render (or a list of template names, in which case Django will use the first template in the list that exists) -- and two optional arguments:"
msgstr ""

#: ../../ref/templates/api.txt:734
# 62398007e21d477b9d6857ba2af7cabd
msgid "A dictionary to be used as variables and values for the template's context. This can also be passed as the second positional argument."
msgstr ""

#: ../../ref/templates/api.txt:739
# 253ce33c08844aaf99c6715d1454a37a
msgid "An instance of ``Context`` or a subclass (e.g., an instance of ``RequestContext``) to use as the template's context. This can also be passed as the third positional argument."
msgstr ""

#: ../../ref/templates/api.txt:743
# 83aa71bc5cdb4c8689f99a31086f99b4
msgid "See also the :func:`~django.shortcuts.render_to_response()` shortcut, which calls ``render_to_string`` and feeds the result into an :class:`~django.http.HttpResponse` suitable for returning directly from a view."
msgstr ""

#: ../../ref/templates/api.txt:748
# 40e5f3b7e41b4dee8475af84112f4857
msgid "Configuring the template system in standalone mode"
msgstr ""

#: ../../ref/templates/api.txt:752
# 35d52a17d8264d3cbcc46e6ded72b81b
msgid "This section is only of interest to people trying to use the template system as an output component in another application. If you're using the template system as part of a Django application, nothing here applies to you."
msgstr ""

#: ../../ref/templates/api.txt:757
# 264059752e8f436d9a97f0d25ba093af
msgid "Normally, Django will load all the configuration information it needs from its own default configuration file, combined with the settings in the module given in the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. But if you're using the template system independently of the rest of Django, the environment variable approach isn't very convenient, because you probably want to configure the template system in line with the rest of your application rather than dealing with settings files and pointing to them via environment variables."
msgstr ""

#: ../../ref/templates/api.txt:765
# 6dc34e43965e41b2a68732a7c95d2715
msgid "To solve this problem, you need to use the manual configuration option described in :ref:`settings-without-django-settings-module`. Simply import the appropriate pieces of the templating system and then, *before* you call any of the templating functions, call :func:`django.conf.settings.configure()` with any settings you wish to specify. You might want to consider setting at least :setting:`TEMPLATE_DIRS` (if you're going to use template loaders), :setting:`DEFAULT_CHARSET` (although the default of ``utf-8`` is probably fine) and :setting:`TEMPLATE_DEBUG`. If you plan to use the :ttag:`url` template tag, you will also need to set the :setting:`ROOT_URLCONF` setting. All available settings are described in the :doc:`settings documentation </ref/settings>`, and any setting starting with ``TEMPLATE_`` is of obvious interest."
msgstr ""

#: ../../ref/templates/api.txt:780
# 4296ddab5cb3436dbdbf0ba591c26e2c
msgid "Using an alternative template language"
msgstr ""

#: ../../ref/templates/api.txt:782
# 9df4b60703ad4e34b9f9f8a9aa820ef5
msgid "The Django ``Template`` and ``Loader`` classes implement a simple API for loading and rendering templates. By providing some simple wrapper classes that implement this API we can use third party template systems like `Jinja2 <http://jinja.pocoo.org/docs/>`_ or `Cheetah <http://www.cheetahtemplate.org/>`_. This allows us to use third-party template libraries without giving up useful Django features like the Django ``Context`` object and handy shortcuts like :func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/templates/api.txt:790
# 7a0fb791ad7748358b236d3b157fe17a
msgid "The core component of the Django templating system is the ``Template`` class. This class has a very simple interface: it has a constructor that takes a single positional argument specifying the template string, and a ``render()`` method that takes a :class:`~django.template.Context` object and returns a string containing the rendered response."
msgstr ""

#: ../../ref/templates/api.txt:796
# 0739c035c65e4b9da673323d480b3c5f
msgid "Suppose we're using a template language that defines a ``Template`` object with a ``render()`` method that takes a dictionary rather than a ``Context`` object. We can write a simple wrapper that implements the Django ``Template`` interface::"
msgstr ""

#: ../../ref/templates/api.txt:809
# 7fc5d45925d44646ad6fadd4d4c2e6bc
msgid "That's all that's required to make our fictional ``Template`` class compatible with the Django loading and rendering system!"
msgstr ""

#: ../../ref/templates/api.txt:812
# 58962b5d225b45f38a2074cc72c5e060
msgid "The next step is to write a ``Loader`` class that returns instances of our custom template class instead of the default :class:`~django.template.Template`. Custom ``Loader`` classes should inherit from ``django.template.loader.BaseLoader`` and override the ``load_template_source()`` method, which takes a ``template_name`` argument, loads the template from disk (or elsewhere), and returns a tuple: ``(template_string, template_origin)``."
msgstr ""

#: ../../ref/templates/api.txt:819
# 5f6706d055964189b6baa070e123b224
msgid "The ``load_template()`` method of the ``Loader`` class retrieves the template string by calling ``load_template_source()``, instantiates a ``Template`` from the template source, and returns a tuple: ``(template, template_origin)``. Since this is the method that actually instantiates the ``Template``, we'll need to override it to use our custom template class instead. We can inherit from the builtin :class:`django.template.loaders.app_directories.Loader` to take advantage of the ``load_template_source()`` method implemented there::"
msgstr ""

#: ../../ref/templates/api.txt:836
# 6a0c2bece139444cae71c5449d3e8128
msgid "Finally, we need to modify our project settings, telling Django to use our custom loader. Now we can write all of our templates in our alternative template language while continuing to use the rest of the Django templating system."
msgstr ""

#: ../../ref/templates/builtins.txt:3
# a29ad4cc218848fb98106c2845a56c58
msgid "Built-in template tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:5
# b2166b0db9ae4501a0278136f82e0f97
msgid "This document describes Django's built-in template tags and filters. It is recommended that you use the :doc:`automatic documentation </ref/contrib/admin/admindocs>`, if available, as this will also include documentation for any custom tags or filters installed."
msgstr ""

#: ../../ref/templates/builtins.txt:13
# d8c172e6fe574e0299eec259401517ca
msgid "Built-in tag reference"
msgstr ""

#: ../../ref/templates/builtins.txt:20
# 5b57574bd0224cf4851eed88787613f7
msgid "autoescape"
msgstr ""

#: ../../ref/templates/builtins.txt:22
# 1c5c570015b744d0a1f407088f43b07c
msgid "Controls the current auto-escaping behavior. This tag takes either ``on`` or ``off`` as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an ``endautoescape`` ending tag."
msgstr ""

#: ../../ref/templates/builtins.txt:26
# a8153fadc4044016a72bfd46be06f00c
msgid "When auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the :tfilter:`escape` filter to each variable."
msgstr ""

#: ../../ref/templates/builtins.txt:31
# cf9ac55d6803466a8024f447bbf1c85c
msgid "The only exceptions are variables that are already marked as \"safe\" from escaping, either by the code that populated the variable, or because it has had the :tfilter:`safe` or :tfilter:`escape` filters applied."
msgstr ""

#: ../../ref/templates/builtins.txt:35
#: ../../ref/templates/builtins.txt:223
#: ../../ref/templates/builtins.txt:245
#: ../../ref/utils.txt:314
# 808ba98863324a5fa3cedf514d5aaa12
# 7b4fb777a9d44cd9a63a4368ab202460
# 571ed01760f0474e9bd48d776147637b
# e302c096408a44e9a75f373e224b25b5
msgid "Sample usage::"
msgstr ""

#: ../../ref/templates/builtins.txt:44
# fa357ae0bbdd4730991ea287f85f287e
msgid "block"
msgstr ""

#: ../../ref/templates/builtins.txt:46
# 5b1071e077364545988340cfea0340e9
msgid "Defines a block that can be overridden by child templates. See :ref:`Template inheritance <template-inheritance>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:52
# a19e9827822a403ea60082db1efcfa84
msgid "comment"
msgstr ""

#: ../../ref/templates/builtins.txt:54
# 3383980f9c534ddcbb9a0ef1993ae9eb
msgid "Ignores everything between ``{% comment %}`` and ``{% endcomment %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:59
# fa9a58d0ae5f48a28b2ec2e56de663e5
msgid "csrf_token"
msgstr ""

#: ../../ref/templates/builtins.txt:61
# 32758de3ad8e4732aebe8206b246d014
msgid "This tag is used for CSRF protection, as described in the documentation for :doc:`Cross Site Request Forgeries </ref/contrib/csrf>`."
msgstr ""

#: ../../ref/templates/builtins.txt:67
# 578a08a38e884cb19edae3945b75ac9c
msgid "cycle"
msgstr ""

#: ../../ref/templates/builtins.txt:69
# 4ce2518acef048d6919463b6b2222ce4
msgid "Cycles among the given strings or variables each time this tag is encountered."
msgstr ""

#: ../../ref/templates/builtins.txt:71
# a4b4865c478443aaa65156a8dfe1ac9c
msgid "Within a loop, cycles among the given strings each time through the loop::"
msgstr ""

#: ../../ref/templates/builtins.txt:80
# a4def008c3ed47369c2017cc583a4155
msgid "You can use variables, too. For example, if you have two template variables, ``rowvalue1`` and ``rowvalue2``, you can cycle between their values like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:89
# 80f736d1fe81474dbde0ab607a5e4163
msgid "Note that variable arguments (``rowvalue1`` and ``rowvalue2`` above) are NOT auto-escaped! So either make sure that you trust their values, or use explicit escaping, like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:99
# f12715f8a335445fa087322112882188
msgid "You can mix variables and strings::"
msgstr ""

#: ../../ref/templates/builtins.txt:107
# 0aa4f7ac593440da8a1918fac163db6b
msgid "In some cases you might want to refer to the next value of a cycle from outside of a loop. To do this, just give the ``{% cycle %}`` tag a name, using \"as\", like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:113
# 6885531aabff4d9ea305ed2a1677049d
msgid "From then on, you can insert the current value of the cycle wherever you'd like in your template by referencing the cycle name as a context variable. If you want to move the cycle onto the next value, you use the cycle tag again, using the name of the variable. So, the following template::"
msgstr ""

#: ../../ref/templates/builtins.txt:128
# 97deaf64fb074f61afcaf168eecc3a00
msgid "would output::"
msgstr ""

#: ../../ref/templates/builtins.txt:139
# 9894d6282a81472a8c1c9cdaae490c1f
msgid "You can use any number of values in a ``{% cycle %}`` tag, separated by spaces. Values enclosed in single (``'``) or double quotes (``\"``) are treated as string literals, while values without quotes are treated as template variables."
msgstr ""

#: ../../ref/templates/builtins.txt:143
# 0a2920992d5e49b5a6a3c2184de5fbbe
msgid "Note that the variables included in the cycle will not be escaped. This is because template tags do not escape their content. Any HTML or Javascript code contained in the printed variable will be rendered as-is, which could potentially lead to security issues."
msgstr ""

#: ../../ref/templates/builtins.txt:148
# 6ad4dfda7c3e48a4bf0843d2fcad19ea
msgid "For backwards compatibility, the ``{% cycle %}`` tag supports the much inferior old syntax from previous Django versions. You shouldn't use this in any new projects, but for the sake of the people who are still using it, here's what it looks like::"
msgstr ""

#: ../../ref/templates/builtins.txt:155
# b3714952e2c347509e2fbc3c2cd20ff9
msgid "In this syntax, each value gets interpreted as a literal string, and there's no way to specify variable values. Or literal commas. Or spaces. Did we mention you shouldn't use this syntax in any new projects?"
msgstr ""

#: ../../ref/templates/builtins.txt:159
# 94078408d6414e159a96d2e7bbcaec4e
msgid "By default, when you use the ``as`` keyword with the cycle tag, the usage of ``{% cycle %}`` that declares the cycle will itself output the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you want to just declare the cycle, but not output the first value, you can add a ``silent`` keyword as the last keyword in the tag. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:171
# 963f1d629ddc41d99b92f7d455b497f3
msgid "This will output a list of ``<tr>`` elements with ``class`` alternating between ``row1`` and ``row2``; the subtemplate will have access to ``rowcolors`` in it's context that matches the class of the ``<tr>`` that encloses it. If the ``silent`` keyword were to be omitted, ``row1`` would be emitted as normal text, outside the ``<tr>`` element."
msgstr ""

#: ../../ref/templates/builtins.txt:178
# a6166aa1d33241119f0648eebf79b4b7
msgid "When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of the cycle tag. In, the following template would output *nothing*, even though the second call to ``{% cycle %}`` doesn't specify silent::"
msgstr ""

#: ../../ref/templates/builtins.txt:189
# 080939cc43dd436fbb1ad55cf0e0c088
msgid "debug"
msgstr ""

#: ../../ref/templates/builtins.txt:191
# 2ef4670c5c164e7e9a40b1e5f031e091
msgid "Outputs a whole load of debugging information, including the current context and imported modules."
msgstr ""

#: ../../ref/templates/builtins.txt:197
# 23b55cf312a04b1f8eda20d2d761840b
msgid "extends"
msgstr ""

#: ../../ref/templates/builtins.txt:199
# 94e2acbed54a468aba87324289904cab
msgid "Signals that this template extends a parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:201
# 7cef27c943924705aa9efcf8be373caf
msgid "This tag can be used in two ways:"
msgstr ""

#: ../../ref/templates/builtins.txt:203
# f43dacf36a324d728ad45aa0e212ee54
msgid "``{% extends \"base.html\" %}`` (with quotes) uses the literal value ``\"base.html\"`` as the name of the parent template to extend."
msgstr ""

#: ../../ref/templates/builtins.txt:206
# 58569465c0fb44c8afd781be83aeb1ec
msgid "``{% extends variable %}`` uses the value of ``variable``. If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a ``Template`` object, Django will use that object as the parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:211
# 288cdea98e9e4e8caf5248b106aa9b26
msgid "See :ref:`template-inheritance` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:218
# 2038e603d836478488994e6db50f9936
msgid "Filters the contents of the variable through variable filters."
msgstr ""

#: ../../ref/templates/builtins.txt:220
# 64222c6704f949c88fbcc1d1114b9779
msgid "Filters can also be piped through each other, and they can have arguments -- just like in variable syntax."
msgstr ""

#: ../../ref/templates/builtins.txt:231
# 68fa4caad64f421c94089098e0f2acbe
msgid "The :tfilter:`escape` and :tfilter:`safe` filters are not acceptable arguments. Instead, use the :ttag:`autoescape` tag to manage autoescaping for blocks of template code."
msgstr ""

#: ../../ref/templates/builtins.txt:238
# 6493346d62be422bb4a39c7058407a69
msgid "firstof"
msgstr ""

#: ../../ref/templates/builtins.txt:240
# f2831ec8d61140eeae4f6a104f5d1e02
msgid "Outputs the first variable passed that is not False. Does NOT auto-escape variable values."
msgstr ""

#: ../../ref/templates/builtins.txt:243
# 45163ada4f6c4a6f9536280b5002ce4e
msgid "Outputs nothing if all the passed variables are False."
msgstr ""

#: ../../ref/templates/builtins.txt:249
# 2f0c0a250621468aa18fa9a8c4fe51bd
msgid "This is equivalent to::"
msgstr ""

#: ../../ref/templates/builtins.txt:259
# 63c27210d11c434f88fed6276f57e8c2
msgid "You can also use a literal string as a fallback value in case all passed variables are False::"
msgstr ""

#: ../../ref/templates/builtins.txt:264
# 68ce8e94611a4c6bbadd6105864a8cf8
msgid "Note that the variables included in the firstof tag will not be escaped. This is because template tags do not escape their content. Any HTML or Javascript code contained in the printed variable will be rendered as-is, which could potentially lead to security issues. If you need to escape the variables in the firstof tag, you must do so explicitly::"
msgstr ""

#: ../../ref/templates/builtins.txt:278
# fc9f169f2df54809a9f64549afc55047
msgid "for"
msgstr ""

#: ../../ref/templates/builtins.txt:280
# 15b2e05b363a40dda06d6ac90b7018b5
msgid "Loop over each item in an array.  For example, to display a list of athletes provided in ``athlete_list``::"
msgstr ""

#: ../../ref/templates/builtins.txt:289
# 3fb56496425e4976a5ddc47a47328bc0
msgid "You can loop over a list in reverse by using ``{% for obj in list reversed %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:292
# 8a7f01d82c7e49f181bb81fb7d828818
msgid "If you need to loop over a list of lists, you can unpack the values in each sub-list into individual variables. For example, if your context contains a list of (x,y) coordinates called ``points``, you could use the following to output the list of points::"
msgstr ""

#: ../../ref/templates/builtins.txt:301
# 4e98745590444bc1ae30a6616c377a81
msgid "This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary ``data``, the following would display the keys and values of the dictionary::"
msgstr ""

#: ../../ref/templates/builtins.txt:309
# 3c78a32767b64db8926b2d2d556d3ddd
msgid "The for loop sets a number of variables available within the loop:"
msgstr ""

#: ../../ref/templates/builtins.txt:312
# fcaba9763b7d491c9918af10cfd2b6b7
msgid "Variable"
msgstr ""

#: ../../ref/templates/builtins.txt:314
# 20bb5242f2964fcdbec3412cc21f4302
msgid "``forloop.counter``"
msgstr ""

#: ../../ref/templates/builtins.txt:314
# eb983bb03da4498d92736f90c9fbf9cf
msgid "The current iteration of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:315
# 7c371f5ab18a423aa5007661f450c6d5
msgid "``forloop.counter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:315
# b6d60aae323c4395979087fe79dc7cb7
msgid "The current iteration of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:316
# cdafa7daf19d48c4bd83aa9b3054db19
msgid "``forloop.revcounter``"
msgstr ""

#: ../../ref/templates/builtins.txt:316
# add5a296edb644b886ac0c674fc43531
msgid "The number of iterations from the end of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:318
# 96afe3e7318e4453a9de3b37fde9dacf
msgid "``forloop.revcounter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:318
# 5cda6385b44f4a9c90893717cdc1ee7e
msgid "The number of iterations from the end of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:320
# 965fd039a13a4ca9bcb4f678ed7df4d1
msgid "``forloop.first``"
msgstr ""

#: ../../ref/templates/builtins.txt:320
# 37368942f347478e868b445dcc8181a0
msgid "True if this is the first time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:321
# f88b50cc8e9d4d368ab8b07f66c86c24
msgid "``forloop.last``"
msgstr ""

#: ../../ref/templates/builtins.txt:321
# 08fa2dd1cec0439484192c562e796ce6
msgid "True if this is the last time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:322
# 5b3431c908be4180bb1bd14d904bb47b
msgid "``forloop.parentloop``"
msgstr ""

#: ../../ref/templates/builtins.txt:322
# cd9c9620717e44fda457ad023d7d9aad
msgid "For nested loops, this is the loop \"above\" the current one"
msgstr ""

#: ../../ref/templates/builtins.txt:327
# df42ff6417694d5eb95a14055a44e448
msgid "for ... empty"
msgstr ""

#: ../../ref/templates/builtins.txt:329
# d23d83213f0d498c8a1ca06c5e527f36
msgid "The ``for`` tag can take an optional ``{% empty %}`` clause that will be displayed if the given array is empty or could not be found::"
msgstr ""

#: ../../ref/templates/builtins.txt:340
# 71580e2221644e3889e9293fc6dede67
msgid "The above is equivalent to -- but shorter, cleaner, and possibly faster than -- the following::"
msgstr ""

#: ../../ref/templates/builtins.txt:356
# d38af9950b4c4ceb81c6342913c8fb9f
msgid "if"
msgstr ""

#: ../../ref/templates/builtins.txt:358
# c14ae3ddc73942a4972c9c0dc2b1081c
msgid "The ``{% if %}`` tag evaluates a variable, and if that variable is \"true\" (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output::"
msgstr ""

#: ../../ref/templates/builtins.txt:370
# b7e109f211a34e998873266027cec3ad
msgid "In the above, if ``athlete_list`` is not empty, the number of athletes will be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../ref/templates/builtins.txt:373
# 3f3a170eac2247fd9be2bc570075f64d
msgid "As you can see, the ``if`` tag may take one or several `` {% elif %}`` clauses, as well as an ``{% else %}`` clause that will be displayed if all previous conditions fail. These clauses are optional."
msgstr ""

#: ../../ref/templates/builtins.txt:379
# 3957225ab7d64e48ae9a410dd06fc7f3
msgid "The ``if`` tag now supports ``{% elif %}`` clauses."
msgstr ""

#: ../../ref/templates/builtins.txt:382
# 4c555832e274463399cb56562b69c47a
msgid "Boolean operators"
msgstr ""

#: ../../ref/templates/builtins.txt:384
# 80eb4606fb8d42328b39aeb6d0cbd218
msgid ":ttag:`if` tags may use ``and``, ``or`` or ``not`` to test a number of variables or to negate a given variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:409
# c22bd62a13b24d7ab2c0e27df0cf249d
msgid "Use of both ``and`` and ``or`` clauses within the same tag is allowed, with ``and`` having higher precedence than ``or`` e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:414
# 7bceaa5d594443b6899536808dcf1793
msgid "will be interpreted like:"
msgstr ""

#: ../../ref/templates/builtins.txt:420
# e16bf61f30e44c5fb9421671ce72a088
msgid "Use of actual parentheses in the :ttag:`if` tag is invalid syntax.  If you need them to indicate precedence, you should use nested :ttag:`if` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:423
# c51b81fd6f384ebdb05baca15247f76c
msgid ":ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=`` and ``in`` which work as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:428
# 483445fca98643e29317966d1f42bec3
msgid "``==`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:430
# a7494bae69bc4facbb2c5b1c45db5981
msgid "Equality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:437
# 25c19c6fdbc64569b8b44091c4ab09e3
msgid "``!=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:439
# b4f456d72ae644a1aef4e5871924ff90
msgid "Inequality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:447
# fa790577b15d406ca187da234abd304a
msgid "``<`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:449
# 802974c8f55e4ad6b3eb24109dd9fde1
msgid "Less than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:456
# 38c5c6b47c5a45f88cb3d5f8de29632a
msgid "``>`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:458
# c1e762cbb3084de39e77fdf3cf71caf1
msgid "Greater than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:465
# eee3ed6862a944b88aa1d4b9a3921919
msgid "``<=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:467
# 968f1352da4a4b0e9ba5b715b0f30f3b
msgid "Less than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:474
# d1eec2743bac4b04a5e0165d2a76308e
msgid "``>=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:476
# 8cc7b165e11347159f7124e84314f778
msgid "Greater than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:483
# 8c35f740f14e4fcd844da3624058df70
msgid "``in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:485
# 9fbdfaab02b54dd09d765a9a1fa6c1d0
msgid "Contained within. This operator is supported by many Python containers to test whether the given value is in the container.  The following are some examples of how ``x in y`` will be interpreted::"
msgstr ""

#: ../../ref/templates/builtins.txt:504
# f84d94fd834b4366bbc1c79c02221b92
msgid "``not in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:506
# f509b542759646ce8ac148be90e015bf
msgid "Not contained within.  This is the negation of the ``in`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:509
# 7ca88e6b3abe411586258d2d4801dce5
msgid "The comparison operators cannot be 'chained' like in Python or in mathematical notation. For example, instead of using::"
msgstr ""

#: ../../ref/templates/builtins.txt:514
# 3683bb4530a6439b80542a3248bb3783
msgid "you should use::"
msgstr ""

#: ../../ref/templates/builtins.txt:520
# e84e36f1f89f41d98c73cf8b6009577c
msgid "Filters"
msgstr ""

#: ../../ref/templates/builtins.txt:522
# 0425f2f0fd3c4f1cbad2e5fcf02f147f
msgid "You can also use filters in the :ttag:`if` expression. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:529
# ceddb301b8bb4c5587a02c9642a520a9
msgid "Complex expressions"
msgstr ""

#: ../../ref/templates/builtins.txt:531
# 4f7e3e1d0f6348b1a8f8b862ddfd8e65
msgid "All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules.  The precedence of the operators, from lowest to highest, is as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:536
# 20bc089929854707bf469e75ea5e1a19
msgid "``or``"
msgstr ""

#: ../../ref/templates/builtins.txt:537
# 4d4b49d3d8b1487992213dc3e644d43e
msgid "``and``"
msgstr ""

#: ../../ref/templates/builtins.txt:538
# ba0f0c07dde54cdcb4942ba88f884d81
msgid "``not``"
msgstr ""

#: ../../ref/templates/builtins.txt:539
# 8b519ef575b14d95adf73dbbe896e091
msgid "``in``"
msgstr ""

#: ../../ref/templates/builtins.txt:540
# dedd204f9ced477a80fddba76fc8a15f
msgid "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"
msgstr ""

#: ../../ref/templates/builtins.txt:542
# c6fe3349633e46588dedb173fb125ef0
msgid "(This follows Python exactly). So, for example, the following complex :ttag:`if` tag:"
msgstr ""

#: ../../ref/templates/builtins.txt:549
# 63c180aebf3c4db5a2c30d97ddf03947
msgid "...will be interpreted as:"
msgstr ""

#: ../../ref/templates/builtins.txt:555
# 53ac104c4868485e858fb61023204b36
msgid "If you need different precedence, you will need to use nested :ttag:`if` tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules."
msgstr ""

#: ../../ref/templates/builtins.txt:563
# 9e34d980f93347c1b16afcbc0d48e530
msgid "ifchanged"
msgstr ""

#: ../../ref/templates/builtins.txt:565
# 20bfa9ec6d334c2e883dc91e87e0556a
msgid "Check if a value has changed from the last iteration of a loop."
msgstr ""

#: ../../ref/templates/builtins.txt:567
# f0b9b5d097e249169f78d9d73efe6851
msgid "The ``{% ifchanged %}`` block tag is used within a loop. It has two possible uses."
msgstr ""

#: ../../ref/templates/builtins.txt:570
# 0c50fc1b15ea4b2bbdfd700d433489e8
msgid "Checks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes::"
msgstr ""

#: ../../ref/templates/builtins.txt:581
# 0dba5c5cf20b4fc3a2bea3ec4edc62c5
msgid "If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:592
# 4463ca1b860a49549110b36677a80275
msgid "The ``ifchanged`` tag can also take an optional ``{% else %}`` clause that will be displayed if the value has not changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:608
# 6b9452ae091546c2aba9f1f7025c994f
msgid "ifequal"
msgstr ""

#: ../../ref/templates/builtins.txt:610
# da3ea07569be48fb9a113ea6609ddaba
msgid "Output the contents of the block if the two arguments equal each other."
msgstr ""

#: ../../ref/templates/builtins.txt:618
# 65b24b4ce556472a9a523dfb6e5043f8
msgid "As in the :ttag:`if` tag, an ``{% else %}`` clause is optional."
msgstr ""

#: ../../ref/templates/builtins.txt:620
# 5b8c8eba37ea4e319eb613e9b63f10b0
msgid "The arguments can be hard-coded strings, so the following is valid::"
msgstr ""

#: ../../ref/templates/builtins.txt:626
# 278caa82427346bf8774e6a562071360
msgid "It is only possible to compare an argument to template variables or strings. You cannot check for equality with Python objects such as ``True`` or ``False``.  If you need to test if something is true or false, use the :ttag:`if` tag instead."
msgstr ""

#: ../../ref/templates/builtins.txt:631
# 708da6d02fb84b6e8c6686b099e7bdfd
msgid "An alternative to the ``ifequal`` tag is to use the :ttag:`if` tag and the ``==`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:637
# 27a54286452b472ea672cf4b4b01e58c
msgid "ifnotequal"
msgstr ""

#: ../../ref/templates/builtins.txt:639
# 22a11318c6e24ce3b993e402fea2fe0d
msgid "Just like :ttag:`ifequal`, except it tests that the two arguments are not equal."
msgstr ""

#: ../../ref/templates/builtins.txt:642
# e172c5e03fcf44709266752782dceb80
msgid "An alternative to the ``ifnotequal`` tag is to use the :ttag:`if` tag and the ``!=`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:648
# 9942fa74be29436e9a4bbe558112f40f
msgid "include"
msgstr ""

#: ../../ref/templates/builtins.txt:650
# c4fe5c3e30fc47d28dfaff83e29aa52d
msgid "Loads a template and renders it with the current context. This is a way of \"including\" other templates within a template."
msgstr ""

#: ../../ref/templates/builtins.txt:653
# e634c0d7d8254237ae0f866c0c1e46e5
msgid "The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes."
msgstr ""

#: ../../ref/templates/builtins.txt:656
# 31f84b763dd94f798bf00ecb114ddbab
msgid "This example includes the contents of the template ``\"foo/bar.html\"``::"
msgstr ""

#: ../../ref/templates/builtins.txt:660
# 055c93e7b7ae4a1098d515d39d5e339d
msgid "This example includes the contents of the template whose name is contained in the variable ``template_name``::"
msgstr ""

#: ../../ref/templates/builtins.txt:665
# d133818949cd447e9cf1a51b97a9bae8
msgid "An included template is rendered with the context of the template that's including it. This example produces the output ``\"Hello, John\"``:"
msgstr ""

#: ../../ref/templates/builtins.txt:668
# 9bb574ac3aa3432b8206d2a9917e806d
msgid "Context: variable ``person`` is set to ``\"john\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:669
# 3fb2048b35ec4b758a725b3438a3f3d0
msgid "Template::"
msgstr ""

#: ../../ref/templates/builtins.txt:673
# 5182b8b709774215ae16733f0d6cb4d5
msgid "The ``name_snippet.html`` template::"
msgstr ""

#: ../../ref/templates/builtins.txt:677
# 639277a32d274925be724fdd8238ebca
msgid "You can pass additional context to the template using keyword arguments::"
msgstr ""

#: ../../ref/templates/builtins.txt:681
# b6d4ee70d5d0476a9f4d9a093dfc49d1
msgid "If you want to only render the context with the variables provided (or even no variables at all), use the ``only`` option::"
msgstr ""

#: ../../ref/templates/builtins.txt:687
# 27198190ac6d4b6f9dfdc27a968c291b
msgid "The :ttag:`include` tag should be considered as an implementation of \"render this subtemplate and include the HTML\", not as \"parse this subtemplate and include its contents as if it were part of the parent\". This means that there is no shared state between included templates -- each include is a completely independent rendering process."
msgstr ""

#: ../../ref/templates/builtins.txt:693
# 0a9ca6410ba2483ab5620b6859ef9857
msgid "See also: :ttag:`{% ssi %}<ssi>`."
msgstr ""

#: ../../ref/templates/builtins.txt:698
# 21c60715cd084d6bb0b69cbcc5ec0d7a
msgid "load"
msgstr ""

#: ../../ref/templates/builtins.txt:700
# ae52bf977de64c08912d396223698361
msgid "Loads a custom template tag set."
msgstr ""

#: ../../ref/templates/builtins.txt:702
# 4882c75f3caa4d1a9a86dc4f39cd88ea
msgid "For example, the following template would load all the tags and filters registered in ``somelibrary`` and ``otherlibrary`` located in package ``package``::"
msgstr ""

#: ../../ref/templates/builtins.txt:708
# 932970fcec43447694df0ce9624bd8b2
msgid "You can also selectively load individual filters or tags from a library, using the ``from`` argument. In this example, the template tags/filters named ``foo`` and ``bar`` will be loaded from ``somelibrary``::"
msgstr ""

#: ../../ref/templates/builtins.txt:714
# 549d703132094149a5537ef58175a009
msgid "See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:720
# e7d33a65bb084f6ab6f0e2bdaf1f6716
msgid "now"
msgstr ""

#: ../../ref/templates/builtins.txt:722
# 5bb0713d540c4e51a5404dc326283e88
msgid "Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the :tfilter:`date` filter section."
msgstr ""

#: ../../ref/templates/builtins.txt:730
# ad706595a5e7437d8e70c8b615836d37
msgid "Note that you can backslash-escape a format string if you want to use the \"raw\" value. In this example, \"f\" is backslash-escaped, because otherwise \"f\" is a format string that displays the time. The \"o\" doesn't need to be escaped, because it's not a format character::"
msgstr ""

#: ../../ref/templates/builtins.txt:737
# cea2677eb045410a94c064a547a8036c
msgid "This would display as \"It is the 4th of September\"."
msgstr ""

#: ../../ref/templates/builtins.txt:743
# 070fddc432f54de1a6d6d2c4113c9926
msgid "The format passed can also be one of the predefined ones :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`. The predefined formats may vary depending on the current locale and if :ref:`format-localization` is enabled, e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:754
# 62febb26508e415cbfe72a467a065c8f
msgid "regroup"
msgstr ""

#: ../../ref/templates/builtins.txt:756
# 10df2c0896ca47fa9d98e61742cb4890
msgid "Regroups a list of alike objects by a common attribute."
msgstr ""

#: ../../ref/templates/builtins.txt:758
# 81db814fb76942a789e364351688a12d
msgid "This complex tag is best illustrated by way of an example: say that \"places\" is a list of cities represented by dictionaries containing ``\"name\"``, ``\"population\"``, and ``\"country\"`` keys:"
msgstr ""

#: ../../ref/templates/builtins.txt:770
# 7648b6b078554adda32b1574f1a81a1f
msgid "...and you'd like to display a hierarchical list that is ordered by country, like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:773
#: ../../ref/templates/builtins.txt:833
# f3969906e6514a9c9f41b005a1df0b10
# 8a6a76b1ceac4321a1c41478d388d751
msgid "Mumbai: 19,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:774
#: ../../ref/templates/builtins.txt:837
# aab25f242b8f4b3abceb04137b227542
# 151266f7f10d46479e8b40f814dd1f29
msgid "Calcutta: 15,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:776
#: ../../ref/templates/builtins.txt:835
# d737a85370114c91943a694b0eaa54c5
# 26b27afb983f492b832d0aa5c4465aa6
msgid "New York: 20,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:777
# 414e9fb41cdc4b8584b7c7177e3ccdac
msgid "Chicago: 7,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:779
#: ../../ref/templates/builtins.txt:839
# 8d3431e5bd7543929679e75103944c29
# 3c64acf01fc4452da60dda004a8a19da
msgid "Tokyo: 33,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:782
# a8e22796bb5c4a1e91712e37a93f0267
msgid "You can use the ``{% regroup %}`` tag to group the list of cities by country. The following snippet of template code would accomplish this::"
msgstr ""

#: ../../ref/templates/builtins.txt:799
# 3948f15e3dfc4dfbaf909921a7e6d568
msgid "Let's walk through this example. ``{% regroup %}`` takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we're regrouping the ``cities`` list by the ``country`` attribute and calling the result ``country_list``."
msgstr ""

#: ../../ref/templates/builtins.txt:804
# 40f61b59ac78409b8d676b82f301bbc2
msgid "``{% regroup %}`` produces a list (in this case, ``country_list``) of **group objects**. Each group object has two attributes:"
msgstr ""

#: ../../ref/templates/builtins.txt:807
# 403001133d344fa0bef89f721e1d7f57
msgid "``grouper`` -- the item that was grouped by (e.g., the string \"India\" or \"Japan\")."
msgstr ""

#: ../../ref/templates/builtins.txt:809
# eda2888b3243496ba2f74460b4386e40
msgid "``list`` -- a list of all items in this group (e.g., a list of all cities with country='India')."
msgstr ""

#: ../../ref/templates/builtins.txt:812
# bb2923b1ce76470bb8d25b6fd3ac83cd
msgid "Note that ``{% regroup %}`` does not order its input! Our example relies on the fact that the ``cities`` list was ordered by ``country`` in the first place. If the ``cities`` list did *not* order its members by ``country``, the regrouping would naively display more than one group for a single country. For example, say the ``cities`` list was set to this (note that the countries are not grouped together):"
msgstr ""

#: ../../ref/templates/builtins.txt:829
# 3fb21c81cfd646f6a41210ccdcec3711
msgid "With this input for ``cities``, the example ``{% regroup %}`` template code above would result in the following output:"
msgstr ""

#: ../../ref/templates/builtins.txt:841
# 8a9902c339ca4c169f740856da267fb5
msgid "The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it."
msgstr ""

#: ../../ref/templates/builtins.txt:844
# 63d4336af38a42729460b265aa838ce8
msgid "Another solution is to sort the data in the template using the :tfilter:`dictsort` filter, if your data is in a list of dictionaries::"
msgstr ""

#: ../../ref/templates/builtins.txt:850
# 50a1d83fbeb34d5aa14477f2b9fa062e
msgid "Grouping on other properties"
msgstr ""

#: ../../ref/templates/builtins.txt:852
# 5d879d33f2b74662b5b69fde72cb0490
msgid "Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the \"country\" field is a foreign key to a class with an attribute \"description,\" you could use::"
msgstr ""

#: ../../ref/templates/builtins.txt:859
# 1f7772c667a148f0b1a430a4d507aefd
msgid "Or, if ``country`` is a field with ``choices``, it will have a :meth:`^django.db.models.Model.get_FOO_display` method available as an attribute, allowing  you to group on the display string rather than the ``choices`` key::"
msgstr ""

#: ../../ref/templates/builtins.txt:866
# 9573e11ecdd042db98c743f46e6da3e0
msgid "``{{ country.grouper }}`` will now display the value fields from the ``choices`` set rather than the keys."
msgstr ""

#: ../../ref/templates/builtins.txt:872
# e8f3aaffab99435f871a2454648c8176
msgid "spaceless"
msgstr ""

#: ../../ref/templates/builtins.txt:874
# 7e5c73f9b0c2489b968baa3947015bdf
msgid "Removes whitespace between HTML tags. This includes tab characters and newlines."
msgstr ""

#: ../../ref/templates/builtins.txt:885
# 429b3e5836d3440c9407d8eccf9f4a20
msgid "This example would return this HTML::"
msgstr ""

#: ../../ref/templates/builtins.txt:889
# 1489c176a6b14810bc07bd5cb885bf48
msgid "Only space between *tags* is removed -- not space between tags and text. In this example, the space around ``Hello`` won't be stripped::"
msgstr ""

#: ../../ref/templates/builtins.txt:901
# 20c10251296d415690e61f41f905c10d
msgid "ssi"
msgstr ""

#: ../../ref/templates/builtins.txt:903
# 975160b2b9064f768f5a555863164490
msgid "Outputs the contents of a given file into the page."
msgstr ""

#: ../../ref/templates/builtins.txt:905
# c1315da4053a42aa9b26b9f230842a32
msgid "Like a simple :ttag:`include` tag, ``{% ssi %}`` includes the contents of another file -- which must be specified using an absolute path -- in the current page::"
msgstr ""

#: ../../ref/templates/builtins.txt:911
# 63d77cc6e3d44da58f8ecbfd407bd7bd
msgid "The first parameter of ``ssi`` can be a quoted literal or any other context variable."
msgstr ""

#: ../../ref/templates/builtins.txt:914
# 23e566a921274239ae380335572d8035
msgid "If the optional \"parsed\" parameter is given, the contents of the included file are evaluated as template code, within the current context::"
msgstr ""

#: ../../ref/templates/builtins.txt:919
# 785ec67711d24cb5960262d8a3e87226
msgid "Note that if you use ``{% ssi %}``, you'll need to define :setting:`ALLOWED_INCLUDE_ROOTS` in your Django settings, as a security measure."
msgstr ""

#: ../../ref/templates/builtins.txt:923
# 7ffa88679e0c4504bfb86dd57827ee1a
msgid "See also: :ttag:`{% include %}<include>`."
msgstr ""

#: ../../ref/templates/builtins.txt:928
# 9a64034b043f423fb32142d48d41deb1
msgid "templatetag"
msgstr ""

#: ../../ref/templates/builtins.txt:930
# 5e5ca3f9c9634655bff26a3a36e68499
msgid "Outputs one of the syntax characters used to compose template tags."
msgstr ""

#: ../../ref/templates/builtins.txt:932
# 63ee1589b7a448839a030afbdff4deda
msgid "Since the template system has no concept of \"escaping\", to display one of the bits used in template tags, you must use the ``{% templatetag %}`` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:935
# 5be84b28c1db4971b3265d64182af7fe
msgid "The argument tells which template bit to output:"
msgstr ""

#: ../../ref/templates/builtins.txt:938
#: ../../ref/templates/builtins.txt:2271
# 65cc64ab2d564534b1fd032b5b937b0f
# 106a000237b24316951298dacc393b64
msgid "Outputs"
msgstr ""

#: ../../ref/templates/builtins.txt:940
# 120abf69ebf644598ad9f683851c8bde
msgid "``openblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:940
# edf961182d4d48938cf285948a34a596
msgid "``{%``"
msgstr ""

#: ../../ref/templates/builtins.txt:941
# f5f74118dfbc4e609cb55311dc133ffe
msgid "``closeblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:941
# 98944816aa9648b18b5c406ae5b1d450
msgid "``%}``"
msgstr ""

#: ../../ref/templates/builtins.txt:942
# 7808fb64416d4821b8dcd7490f8df6da
msgid "``openvariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:942
# 874402b7dbc0419798dba9963852baa4
msgid "``{{``"
msgstr ""

#: ../../ref/templates/builtins.txt:943
# 6f7740a5b56e49b78c8f3ecb47ffe276
msgid "``closevariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:943
# fce3d0bc537946d1ba67b0aa9dfa3f8f
msgid "``}}``"
msgstr ""

#: ../../ref/templates/builtins.txt:944
# 455d3533286942bfa0cf91249c294d84
msgid "``openbrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:944
# 738756dd4e8d45e9b0b152cf61a65c34
msgid "``{``"
msgstr ""

#: ../../ref/templates/builtins.txt:945
# 0082ca47b2c34deb9310806be3a2f166
msgid "``closebrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:945
# bf0c8c70a26b4435a174b9c15697854b
msgid "``}``"
msgstr ""

#: ../../ref/templates/builtins.txt:946
# 7879dff512f54f0fbb13b21a9338f01b
msgid "``opencomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:946
# ed97f77bfb5b4f2597c55820b359d4db
msgid "``{#``"
msgstr ""

#: ../../ref/templates/builtins.txt:947
# 53f43002441849478595a9b1103f6e00
msgid "``closecomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:947
# dee960b5776a4f94a8ffe386b66f87be
msgid "``#}``"
msgstr ""

#: ../../ref/templates/builtins.txt:953
# 109a26d78b9f4081b3473c72472445f2
msgid "url"
msgstr ""

#: ../../ref/templates/builtins.txt:955
# bde170bd9e3d4ea4b9013b34d0b265a5
msgid "Returns an absolute path reference (a URL without the domain name) matching a given view function and optional parameters. This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates::"
msgstr ""

#: ../../ref/templates/builtins.txt:962
# e2c4604b99334fd48856158649c4a436
msgid "The first argument is a path to a view function in the format ``package.package.module.function``. It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax::"
msgstr ""

#: ../../ref/templates/builtins.txt:971
# 8df3217f1be848b5a61d061308933597
msgid "Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present."
msgstr ""

#: ../../ref/templates/builtins.txt:974
# c53fa27746994942b5a5ae1c8ba7bee8
msgid "For example, suppose you have a view, ``app_views.client``, whose URLconf takes a client ID (here, ``client()`` is a method inside the views file ``app_views.py``). The URLconf line might look like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:982
# 212081f324aa4d5ea35a5dcd4c85a262
msgid "If this app's URLconf is included into the project's URLconf under a path such as this:"
msgstr ""

#: ../../ref/templates/builtins.txt:989
# 5ccae285d2e4416384f99d9ade66cc90
msgid "...then, in a template, you can create a link to this view like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:993
# 10c55bcfd2834219a0d1debbf67a0eca
msgid "The template tag will output the string ``/clients/client/123/``."
msgstr ""

#: ../../ref/templates/builtins.txt:995
# 4e7b789122124f4cb8d2fc6eb6d28ba8
msgid "If you're using :ref:`named URL patterns <naming-url-patterns>`, you can refer to the name of the pattern in the ``url`` tag instead of using the path to the view."
msgstr ""

#: ../../ref/templates/builtins.txt:999
# db0524fa4b214aacafada72da5351fc6
msgid "Note that if the URL you're reversing doesn't exist, you'll get an :exc:`~django.core.urlresolvers.NoReverseMatch` exception raised, which will cause your site to display an error page."
msgstr ""

#: ../../ref/templates/builtins.txt:1003
# 97d2d8680aaf4528921de8790dd2b95d
msgid "If you'd like to retrieve a URL without displaying it, you can use a slightly different call::"
msgstr ""

#: ../../ref/templates/builtins.txt:1011
# 5b89bfa47d294b258432b323ea13225d
msgid "This ``{% url ... as var %}`` syntax will *not* cause an error if the view is missing. In practice you'll use this to link to views that are optional::"
msgstr ""

#: ../../ref/templates/builtins.txt:1019
# aaab5b0d0bf84e849d178d39d770edb3
msgid "If you'd like to retrieve a namespaced URL, specify the fully qualified name::"
msgstr ""

#: ../../ref/templates/builtins.txt:1023
# 3966a861c4f24d31a41b394c20521ec7
msgid "This will follow the normal :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`, including using any hints provided by the context as to the current application."
msgstr ""

#: ../../ref/templates/builtins.txt:1029
# eca9a599b0b64082b3fb92846f0271a5
msgid "Don't forget to put quotes around the function path or pattern name!"
msgstr ""

#: ../../ref/templates/builtins.txt:1040
# bb7620bfe0144c43894b1524f99aa597
msgid "verbatim"
msgstr ""

#: ../../ref/templates/builtins.txt:1044
# 45caf8dee14d4bda97969a16f7e91865
msgid "Stops the template engine from rendering the contents of this block tag."
msgstr ""

#: ../../ref/templates/builtins.txt:1046
# 7dda61fbf3f442ba8996931d911a9fc2
msgid "A common use is to allow a Javascript template layer that collides with Django's syntax. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1053
# b34a3e6b8b964488863d1559fb8792e4
msgid "You can also designate a specific closing tag, allowing the use of ``{% endverbatim %}`` as part of the unrendered contents::"
msgstr ""

#: ../../ref/templates/builtins.txt:1063
# 63de5ff17f8a47f09dd52c5cf3d258f9
msgid "widthratio"
msgstr ""

#: ../../ref/templates/builtins.txt:1065
# 460c0c703dc941fba302442bdf71d287
msgid "For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant."
msgstr ""

#: ../../ref/templates/builtins.txt:1073
# 5cd876acb6cf41b089e43eff3237c865
msgid "Above, if ``this_value`` is 175 and ``max_value`` is 200, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88)."
msgstr ""

#: ../../ref/templates/builtins.txt:1080
# b8dcd32845a14beab06ff46389bf7730
msgid "with"
msgstr ""

#: ../../ref/templates/builtins.txt:1082
# b95d9810941448949ef2b2a1a3faf928
msgid "Caches a complex variable under a simpler name. This is useful when accessing an \"expensive\" method (e.g., one that hits the database) multiple times."
msgstr ""

#: ../../ref/templates/builtins.txt:1091
# 20c9873c7d0d425b8391f2a094b55f45
msgid "The populated variable (in the example above, ``total``) is only available between the ``{% with %}`` and ``{% endwith %}`` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1094
# 8aa6eebd1f6745a28dd3900dca2805f7
msgid "You can assign more than one context variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:1100
# 8c23f85769354e2fb5dd9b88395a7e3d
msgid "The previous more verbose format is still supported: ``{% with business.employees.count as total %}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1106
# f2ee60b896d548009d9c61a84f032fe5
msgid "Built-in filter reference"
msgstr ""

#: ../../ref/templates/builtins.txt:1111
# e355c4c1e6b34a3bad73825927afc2f8
msgid "add"
msgstr ""

#: ../../ref/templates/builtins.txt:1113
# e4f8acced33647e899beb3315239e420
msgid "Adds the argument to the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1119
# 6c6c5c01e11a4624b589b77766ff21d1
msgid "If ``value`` is ``4``, then the output will be ``6``."
msgstr ""

#: ../../ref/templates/builtins.txt:1121
# 28ec821b837a4321889a6f2abcbbd1b8
msgid "This filter will first try to coerce both values to integers. If this fails, it'll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:1126
# 28147a732c6c4d95abdec3841676de48
msgid "For example, if we have::"
msgstr ""

#: ../../ref/templates/builtins.txt:1130
# edb97c3a96fc45a8a6f1b0e9d7cd2d3f
msgid "and ``first`` is ``[1, 2, 3]`` and ``second`` is ``[4, 5, 6]``, then the output will be ``[1, 2, 3, 4, 5, 6]``."
msgstr ""

#: ../../ref/templates/builtins.txt:1135
# 6b140b85f5d74a3781cea4f9a9373c72
msgid "Strings that can be coerced to integers will be **summed**, not concatenated, as in the first example above."
msgstr ""

#: ../../ref/templates/builtins.txt:1141
# d9007c167db04c38b7bd9358eddff03e
msgid "addslashes"
msgstr ""

#: ../../ref/templates/builtins.txt:1143
# e6ded62b32254024a7a7fc54cdd3b089
msgid "Adds slashes before quotes. Useful for escaping strings in CSV, for example."
msgstr ""

#: ../../ref/templates/builtins.txt:1149
# 5c1f900cc40547668cc662ece8028eba
msgid "If ``value`` is ``\"I'm using Django\"``, the output will be ``\"I\\'m using Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1155
# 4c1baa6cd32e4b14a3ecb9017a15ddb1
msgid "capfirst"
msgstr ""

#: ../../ref/templates/builtins.txt:1157
# 5f9c9241581d48539549bc3bfb728339
msgid "Capitalizes the first character of the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1163
# 71a0e8c6c4044210a7a26189a83ecc5a
msgid "If ``value`` is ``\"django\"``, the output will be ``\"Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1168
# 679fbb94be154c529f3cd923bf321886
msgid "center"
msgstr ""

#: ../../ref/templates/builtins.txt:1170
# ba70dba4e9de444bb3933a9990c105fe
msgid "Centers the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1176
# 5953e633778f4c95a5f8803de671830c
msgid "If ``value`` is ``\"Django\"``, the output will be ``\"     Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1181
# 838478831f0943a3ab27ecb5b377a060
msgid "cut"
msgstr ""

#: ../../ref/templates/builtins.txt:1183
# 770b282f8c0648c29acaea4815b0de8e
msgid "Removes all values of arg from the given string."
msgstr ""

#: ../../ref/templates/builtins.txt:1189
# de430ffc5e7b4ea08fdc910ece26c778
msgid "If ``value`` is ``\"String with spaces\"``, the output will be ``\"Stringwithspaces\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1195
# f4cd5fc0f497401198506003395dfe01
msgid "date"
msgstr ""

#: ../../ref/templates/builtins.txt:1197
# 88e363ecba4e4e0aa7a1ba183447b03b
msgid "Formats a date according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:1199
# 84ff5c48685749f0a7c7d9ba1a258292
msgid "Uses a similar format as PHP's ``date()`` function (http://php.net/date) with some differences."
msgstr ""

#: ../../ref/templates/builtins.txt:1202
# d2bf71e109d641ed94d81ac82e634bbe
msgid "Available format strings:"
msgstr ""

#: ../../ref/templates/builtins.txt:1205
# c7ed85a9fab44c059048f854a33a3734
msgid "Format character"
msgstr ""

#: ../../ref/templates/builtins.txt:1205
# 23c6f64b8be84239a49af5026c0fa71c
msgid "Example output"
msgstr ""

#: ../../ref/templates/builtins.txt:1207
# 3e18557f13ea49e4a4a3acce52141ba2
msgid "a"
msgstr ""

#: ../../ref/templates/builtins.txt:1207
# 57f431dc8fd441fb8d42fad140cd413c
msgid "``'a.m.'`` or ``'p.m.'`` (Note that this is slightly different than PHP's output, because this includes periods to match Associated Press style.)"
msgstr ""

#: ../../ref/templates/builtins.txt:1207
# 541d1c8fed0d47b496c2f871daf3cdd7
msgid "``'a.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1211
# 9b06ec4f7d6b4620890929021e80328c
msgid "A"
msgstr ""

#: ../../ref/templates/builtins.txt:1211
# 9d9729d18ecc41b8b8a7992703745f27
msgid "``'AM'`` or ``'PM'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1211
# 50d045d6664c41e9b47d54d50c508b53
msgid "``'AM'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1212
# ff881e2442a945b998f5c135b28032aa
msgid "b"
msgstr ""

#: ../../ref/templates/builtins.txt:1212
# 7405a1d983c4494a9cf91d73b4d60bf1
msgid "Month, textual, 3 letters, lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1212
# 2153619c857d40c988385e78282c589b
msgid "``'jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1213
# 643f2e61fbb04035b174251303a6963b
msgid "B"
msgstr ""

#: ../../ref/templates/builtins.txt:1213
# 8d72b35e510e40808fe907fe454bb5f3
msgid "Not implemented."
msgstr ""

#: ../../ref/templates/builtins.txt:1214
# baf2b959b3644d9abc6fdd4d05dee9c7
msgid "c"
msgstr ""

#: ../../ref/templates/builtins.txt:1214
# 1248d13661ad4fd5bfa914d39d34eaa1
msgid "ISO 8601 format. (Note: unlike others formatters, such as \"Z\", \"O\" or \"r\", the \"c\" formatter will not add timezone offset if value is a naive datetime (see :class:`datetime.tzinfo`)."
msgstr ""

#: ../../ref/templates/builtins.txt:1214
# a01d869f8a8a4799ae9966e57cfe18ed
msgid "``2008-01-02T10:30:00.000123+02:00``, or ``2008-01-02T10:30:00.000123`` if the datetime is naive"
msgstr ""

#: ../../ref/templates/builtins.txt:1219
# 8817ebae64ac4ebc9680976229be35dd
msgid "d"
msgstr ""

#: ../../ref/templates/builtins.txt:1219
# 050f6f54bfb7497ea3e435598715bf3b
msgid "Day of the month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1219
# 40c519e2149342599b52b08f78adebdd
msgid "``'01'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# 11d9c7b98b4447a6bb755ae45ddf8e9e
msgid "D"
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# d82aef73748142a79791094c13eda040
msgid "Day of the week, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1221
# bab89acf63de434587851a0db35157a8
msgid "``'Fri'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1222
# 6db6033f369344e5b228cfb88d1583b9
msgid "e"
msgstr ""

#: ../../ref/templates/builtins.txt:1222
# 2a24516da63c4e7da80fa3453f483021
msgid "Timezone name. Could be in any format, or might return an empty string, depending on the datetime."
msgstr ""

#: ../../ref/templates/builtins.txt:1223
# 96c403d659274d1eb8ccec4fab20ba0b
msgid "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``, etc."
msgstr ""

#: ../../ref/templates/builtins.txt:1225
# 7bb9573396464d15b533d4f2e80b5f93
msgid "E"
msgstr ""

#: ../../ref/templates/builtins.txt:1225
# c20e71b442f148dbbf0f251dfcf9e95c
msgid "Month, locale specific alternative representation usually used for long date representation."
msgstr ""

#: ../../ref/templates/builtins.txt:1227
# 74df95aedb1b41fcbaeb341de934624a
msgid "``'listopada'`` (for Polish locale, as opposed to ``'Listopad'``)"
msgstr ""

#: ../../ref/templates/builtins.txt:1228
# 49e9ddd0cb14418980f3f31e09c5ac80
msgid "f"
msgstr ""

#: ../../ref/templates/builtins.txt:1228
# f5aea7cae8fd42069e99dd4835f20e98
msgid "Time, in 12-hour hours and minutes, with minutes left off if they're zero. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1228
# e618efe36fc248868aeedcac26883d79
msgid "``'1'``, ``'1:30'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1231
# 096d4418119048c5ad402097dfccd153
msgid "F"
msgstr ""

#: ../../ref/templates/builtins.txt:1231
# c0191d5e045a49d284ecac73cbce44eb
msgid "Month, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1231
# b8393d8c3af7432faa14b7831f277191
msgid "``'January'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1232
# 93a470c707cb42ba894b42aaf058ae1e
msgid "g"
msgstr ""

#: ../../ref/templates/builtins.txt:1232
# 2746adf5932041d6a8abd7739a62ed44
msgid "Hour, 12-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1232
#: ../../ref/templates/builtins.txt:1247
# 3d94acfaac024fa4962168f7bc3e91bf
# 4e4b8144992643cabfb0234650e7aa9c
msgid "``'1'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1234
# 9114822e954d4fb784d2cc955ccc2236
msgid "G"
msgstr ""

#: ../../ref/templates/builtins.txt:1234
# 31fbd718fa2c489fa15c85244ec83a0f
msgid "Hour, 24-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1234
# 575c5dbe60b34e6a9fd0b90715c8b9d4
msgid "``'0'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1236
# e385d157f956476d8cae679b3943ac68
msgid "h"
msgstr ""

#: ../../ref/templates/builtins.txt:1236
# 7351ed97a1ee4651ac3c5763a626202e
msgid "Hour, 12-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1236
#: ../../ref/templates/builtins.txt:1245
# a12a25537e5a48a7bcc88a81a600bada
# 90fe26c2d22247efabf27a19767df234
msgid "``'01'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# 346dffb124cd4e1ea16ac222069b58d8
msgid "H"
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# d1da03bc389c4c37ab00d364610bb176
msgid "Hour, 24-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1237
# ed477f7bed6f441eafbf8771f0548238
msgid "``'00'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1238
# c46e0f88781d4ba89869d84c5039d979
msgid "i"
msgstr ""

#: ../../ref/templates/builtins.txt:1238
# 01a2b03e96f04dc7b73681b7c3d286be
msgid "Minutes."
msgstr ""

#: ../../ref/templates/builtins.txt:1238
#: ../../ref/templates/builtins.txt:1260
# 485ba8cf3033469b9d770165ca047233
# e0073c89eebe44588ac50302838eeaad
msgid "``'00'`` to ``'59'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1239
# f0d8701ef3554118b3173fe82f1b9cbf
msgid "I"
msgstr ""

#: ../../ref/templates/builtins.txt:1239
# 80cdc23be364468ab588108534f78d46
msgid "Daylight Savings Time, whether it's in effect or not."
msgstr ""

#: ../../ref/templates/builtins.txt:1239
# 76cd29e50f4246dc837d3979895429f1
msgid "``'1'`` or ``'0'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1241
# bc47e625ca8e4275bec1461c214e2e8d
msgid "j"
msgstr ""

#: ../../ref/templates/builtins.txt:1241
# 27bb44e3233d44928c4fc1b1ad9613fd
msgid "Day of the month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1241
# dfd946788ad1421cb557354367a52cb1
msgid "``'1'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# 79d2a22bbf6b45d98679dc9f16d85fa7
msgid "l"
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# ff203098e114435ab0d01c68001a7e5b
msgid "Day of the week, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1243
# 0ab91ef04711482084e8fa06def9c878
msgid "``'Friday'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1244
# c1628b1c36cd42a3ad1bae729cb29db8
msgid "L"
msgstr ""

#: ../../ref/templates/builtins.txt:1244
# c84b70e555884b6298bea8e26297a187
msgid "Boolean for whether it's a leap year."
msgstr ""

#: ../../ref/templates/builtins.txt:1244
# 199e4efa00554756b19fe97dba4be4b0
msgid "``True`` or ``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:1245
# b36b9526d9a24da19cd44476c284e3f1
msgid "m"
msgstr ""

#: ../../ref/templates/builtins.txt:1245
# fde8899a18b74f6dbd7fe72a378d426b
msgid "Month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1246
# 5728c975beac49d5a0c24b831721b803
msgid "M"
msgstr ""

#: ../../ref/templates/builtins.txt:1246
# 53f11936b17d4f75b56b0284594b8f4d
msgid "Month, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1246
# eaf0d88cc13b453c82e833b39bf69cfc
msgid "``'Jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1247
# 78c9308e66f84dd9b43549922233abe5
msgid "n"
msgstr ""

#: ../../ref/templates/builtins.txt:1247
# a023a8294bfa4d4281d739e5ba06ffff
msgid "Month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# 77d018136b0f4ef0bd846f553d82a14f
msgid "N"
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# 26c06ff10531471db6b2a07e144abc4c
msgid "Month abbreviation in Associated Press style. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1248
# 006c0ac154784b56ac0f2da8db1d95b4
msgid "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
# 81448130715b46ca8df0f7a891a5f6bc
msgid "o"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
# ef20feb644544c269e108484391778ef
msgid "ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W)"
msgstr ""

#: ../../ref/templates/builtins.txt:1250
#: ../../ref/templates/builtins.txt:1273
# 65f042dc2d77480f9660947fc8c6c9bb
# 60f19304ee29438a84bda738b041f76b
msgid "``'1999'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1253
# 75d106ef69684e909cde258f6cd87a3b
msgid "O"
msgstr ""

#: ../../ref/templates/builtins.txt:1253
# 0e9cf22a50b846bfb865e587bd60477e
msgid "Difference to Greenwich time in hours."
msgstr ""

#: ../../ref/templates/builtins.txt:1253
# 0419a8661afa4dcb81943a392b93bff1
msgid "``'+0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1254
# dde1893c091849c4b61b9bdf1e1a1be4
msgid "P"
msgstr ""

#: ../../ref/templates/builtins.txt:1254
# 1edbc86a2e7544d397f9eb6afd4ca926
msgid "Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if they're zero and the special-case strings 'midnight' and 'noon' if appropriate. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1254
# 9a9abd452ea5446f83b1c4c3eae0c8e0
msgid "``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1259
# a45d1a68bdb14905aa367e754cd07be7
msgid "r"
msgstr ""

#: ../../ref/templates/builtins.txt:1259
# 12808157dbae42d597df1eda8300cc35
msgid ":rfc:`2822` formatted date."
msgstr ""

#: ../../ref/templates/builtins.txt:1259
# 06ab8521996b42508c15eff2b5b0ca02
msgid "``'Thu, 21 Dec 2000 16:01:07 +0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1260
# 90c4b4fb120b4fce867557012acf38fb
msgid "s"
msgstr ""

#: ../../ref/templates/builtins.txt:1260
# 3a8501bab7b045d4a04bd287d54a3eb0
msgid "Seconds, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# a1279a3fdac442d787a34cbfce3e73a2
msgid "S"
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# b175f87984534aa0b1bd8dd8439406d5
msgid "English ordinal suffix for day of the month, 2 characters."
msgstr ""

#: ../../ref/templates/builtins.txt:1261
# 67622e782ac842a18c369cb2bca60e7d
msgid "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# 52ab114ab91d4c6d80a02f21758e19df
msgid "t"
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# b97c17c3b6534a2c839ae4adea1ac983
msgid "Number of days in the given month."
msgstr ""

#: ../../ref/templates/builtins.txt:1263
# 317ec711c68b4270b09e8536a47f78fc
msgid "``28`` to ``31``"
msgstr ""

#: ../../ref/templates/builtins.txt:1264
# 6c95a227dcc94deea26fd54356f53d2e
msgid "T"
msgstr ""

#: ../../ref/templates/builtins.txt:1264
# 8bef5ff1601e43f69a627b75af7124e0
msgid "Time zone of this machine."
msgstr ""

#: ../../ref/templates/builtins.txt:1264
# 8a2e78b4163f416fa8da35cd2868c05d
msgid "``'EST'``, ``'MDT'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1265
# b0fae8158bb24a27bfabf9f96c31b129
msgid "u"
msgstr ""

#: ../../ref/templates/builtins.txt:1265
# f3c7c5fa3b2f47ca86728afd6362a227
msgid "Microseconds."
msgstr ""

#: ../../ref/templates/builtins.txt:1265
# f8807a9aa491459d902d763c718351b1
msgid "``000000`` to ``999999``"
msgstr ""

#: ../../ref/templates/builtins.txt:1266
# 6c3d0edbb14f483287b6a975e9a75bda
msgid "U"
msgstr ""

#: ../../ref/templates/builtins.txt:1266
# 6d48e76d79d0468ab0390ed3746bb8a5
msgid "Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC)."
msgstr ""

#: ../../ref/templates/builtins.txt:1268
# aaa246c2f54c4c73a7b9f4a19df46444
msgid "w"
msgstr ""

#: ../../ref/templates/builtins.txt:1268
# 37a93a957c314c1ba14be5edfbebd788
msgid "Day of the week, digits without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1268
# 91ca1270fbe0408da82700f748747d77
msgid "``'0'`` (Sunday) to ``'6'`` (Saturday)"
msgstr ""

#: ../../ref/templates/builtins.txt:1270
# 577a28c71d5b4b309ae9d56b341c382f
msgid "W"
msgstr ""

#: ../../ref/templates/builtins.txt:1270
# f31de36178cd4b4d919c457f72546c54
msgid "ISO-8601 week number of year, with weeks starting on Monday."
msgstr ""

#: ../../ref/templates/builtins.txt:1270
# 625139744c574a63bec9c53f6b19d4a5
msgid "``1``, ``53``"
msgstr ""

#: ../../ref/templates/builtins.txt:1272
# 2b9efe0b18554458a460e28fdc30959f
msgid "y"
msgstr ""

#: ../../ref/templates/builtins.txt:1272
# e6138e078c2147d1a0c346840149c7a4
msgid "Year, 2 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1272
# 86da0a8c5ff64ede92cb9aef1d03db69
msgid "``'99'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1273
# 3f90d069100144379a1a3268d3d2cb5a
msgid "Y"
msgstr ""

#: ../../ref/templates/builtins.txt:1273
# 9d2b4d46ccdc4dbdbb471982192683aa
msgid "Year, 4 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1274
# 9d0ce9c83fb04c18bfcd595361effebf
msgid "z"
msgstr ""

#: ../../ref/templates/builtins.txt:1274
# 9003f8c889bc4c83bb882f3d9a6f3300
msgid "Day of the year."
msgstr ""

#: ../../ref/templates/builtins.txt:1274
# 53deaa7d4ca44d4fb59338b5e7965c2a
msgid "``0`` to ``365``"
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# 9549c573bade401a93d3a5203f3570f2
msgid "Z"
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# 0a0d3d571e694103b8a271fcd7d48730
msgid "Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive."
msgstr ""

#: ../../ref/templates/builtins.txt:1275
# 17e8b819b7e142b2859f19f49baee6d9
msgid "``-43200`` to ``43200``"
msgstr ""

#: ../../ref/templates/builtins.txt:1283
# bf7170a7f1a7421aa40c9fd3dab84721
msgid "The ``e`` and ``o`` format specification characters were added in Django 1.4."
msgstr ""

#: ../../ref/templates/builtins.txt:1289
# 4ea9ead2378d47219b80bbea8378ca5e
msgid "If ``value`` is a ``datetime`` object (e.g., the result of ``datetime.datetime.now()``), the output will be the string ``'Wed 09 Jan 2008'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1293
# 569b58088db841349cc26ff3209e9e94
msgid "The format passed can be one of the predefined ones :setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`, or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale."
msgstr ""

#: ../../ref/templates/builtins.txt:1299
# 726ebdb5f8b644f5a5e7910664d225a3
msgid "Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` is, for example, ``\"es\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:1304
# fb38145ea59f46d7bda75931f66fedae
msgid "the output would be the string ``\"09/01/2008\"`` (the ``\"SHORT_DATE_FORMAT\"`` format specifier for the ``es`` locale as shipped with Django is ``\"d/m/Y\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1307
#: ../../ref/templates/builtins.txt:1982
# ea7f1443686c40d9bd10aec850bd7954
# 4cc4c0189c1648d4b2da7a1670e773bc
msgid "When used without a format string::"
msgstr ""

#: ../../ref/templates/builtins.txt:1311
# 1913e47c55f44dd092d44baf0949eff9
msgid "...the formatting string defined in the :setting:`DATE_FORMAT` setting will be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:1317
# 81a296ba5a48400bb81c3fd5a981fd60
msgid "default"
msgstr ""

#: ../../ref/templates/builtins.txt:1319
# 633e99e5237b47289f7f888685e61b90
msgid "If value evaluates to ``False``, uses the given default. Otherwise, uses the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1326
# 34755c4bbb1f4e84b954a5fdfca2c5f6
msgid "If ``value`` is ``\"\"`` (the empty string), the output will be ``nothing``."
msgstr ""

#: ../../ref/templates/builtins.txt:1331
# ee6cd6f924c542f584c8933c97baf75e
msgid "default_if_none"
msgstr ""

#: ../../ref/templates/builtins.txt:1333
# e5184141c65f4c459c62722830ee7fca
msgid "If (and only if) value is ``None``, uses the given default. Otherwise, uses the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1336
# 54c954519c6a43c289a4c12d2591ea77
msgid "Note that if an empty string is given, the default value will *not* be used. Use the :tfilter:`default` filter if you want to fallback for empty strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1343
# 31d916a747d74c5fad6932d03d44ecd6
msgid "If ``value`` is ``None``, the output will be the string ``\"nothing\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1348
# 172f0db36024436ea85c4ed3a72867b6
msgid "dictsort"
msgstr ""

#: ../../ref/templates/builtins.txt:1350
# e9f2ac5f720343408a6c1e153ad78563
msgid "Takes a list of dictionaries and returns that list sorted by the key given in the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1357
# f128f4c61b244e95bc4d7ae305f28352
msgid "If ``value`` is:"
msgstr ""

#: ../../ref/templates/builtins.txt:1367
# 478fc8ca239d4b138dc789fdfbd3653b
msgid "then the output would be:"
msgstr ""

#: ../../ref/templates/builtins.txt:1380
# f559f9b23ed8410c93d09d6a18c5b7bf
msgid "dictsortreversed"
msgstr ""

#: ../../ref/templates/builtins.txt:1382
# b8bd354465b148e7aaaae62ee2220d9d
msgid "Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order."
msgstr ""

#: ../../ref/templates/builtins.txt:1389
# 13668c710c2d435da43278c758daa9e2
msgid "divisibleby"
msgstr ""

#: ../../ref/templates/builtins.txt:1391
# 1b53c7c2192c41d39b29339e974ac7cd
msgid "Returns ``True`` if the value is divisible by the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1397
# 9ccd77351e8a4a0eb84061019325c8e4
msgid "If ``value`` is ``21``, the output would be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1402
# 1dceec11fd7c420da24c967c87bace8c
msgid "escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1404
# 9d282c8ddc8a4e5da4a8e1282e9fee4b
msgid "Escapes a string's HTML. Specifically, it makes these replacements:"
msgstr ""

#: ../../ref/templates/builtins.txt:1406
# da82c9b29fd343dda96c10542ab38f57
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1407
# 7b395e8aea974a04b318564af9996db2
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1408
# afba41b87da7415c8d8e9bf4a8b5701e
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1409
# 0060bf20f8c9464b9a91b96ef92ffc29
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1410
# c244cc3a40f14fd0b44721d587c5d287
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1412
# 3c276e3cd8f340979a3da7ab54bdc0cb
msgid "The escaping is only applied when the string is output, so it does not matter where in a chained sequence of filters you put ``escape``: it will always be applied as though it were the last filter. If you want escaping to be applied immediately, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1417
# 23c28b9ec6fe44b8bdc42d9ba4a3e2ed
msgid "Applying ``escape`` to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1425
# 110a0779fd8d45f4ae54b27bb6449c46
msgid "escapejs"
msgstr ""

#: ../../ref/templates/builtins.txt:1427
# 262cc980c0664fa0be35eb12651f7d73
msgid "Escapes characters for use in JavaScript strings. This does *not* make the string safe for use in HTML, but does protect you from syntax errors when using templates to generate JavaScript/JSON."
msgstr ""

#: ../../ref/templates/builtins.txt:1435
# db0314e2934049f38a59409c891a2312
msgid "If ``value`` is ``\"testing\\r\\njavascript \\'string\" <b>escaping</b>\"``, the output will be ``\"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1441
# 474cd851302d4a86b91fa2475a80d5da
msgid "filesizeformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1443
# 2d815157d73040279d96b7e017cf9dc7
msgid "Formats the value like a 'human-readable' file size (i.e. ``'13 KB'``, ``'4.1 MB'``, ``'102 bytes'``, etc)."
msgstr ""

#: ../../ref/templates/builtins.txt:1450
# 0a34e29881594f4fa9c25c223eb05b45
msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr ""

#: ../../ref/templates/builtins.txt:1454
# 89fc99332d4545fb86214e527e447b67
msgid "Strictly speaking, ``filesizeformat`` does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used."
msgstr ""

#: ../../ref/templates/builtins.txt:1463
# 8c57a0d3da224e65b007f7ae95540929
msgid "first"
msgstr ""

#: ../../ref/templates/builtins.txt:1465
# ef38f0fd599844eb945b5e9f0c90a0d3
msgid "Returns the first item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1471
# 509a28d3e6ff4d6b85b0b116621e2ad2
msgid "If ``value`` is the list ``['a', 'b', 'c']``, the output will be ``'a'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1476
# b353bc3f558945f282c8ea95078bff2a
msgid "fix_ampersands"
msgstr ""

#: ../../ref/templates/builtins.txt:1480
# 0c0e68e8a1b54397a4a6798cb796ea22
msgid "This is rarely useful as ampersands are automatically escaped. See :tfilter:`escape` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:1483
# cc9f85867b4a45e48b8f421764233ee3
msgid "Replaces ampersands with ``&amp;`` entities."
msgstr ""

#: ../../ref/templates/builtins.txt:1489
# 4e25efa811374d5f97821ddd55c4404b
msgid "If ``value`` is ``Tom & Jerry``, the output will be ``Tom &amp; Jerry``."
msgstr ""

#: ../../ref/templates/builtins.txt:1491
# 3064b66320474545a14653bfba2e5ecb
msgid "However, ampersands used in named entities and numeric character references will not be replaced. For example, if ``value`` is ``Caf&eacute;``, the output will *not* be ``Caf&amp;eacute;`` but remain ``Caf&eacute;``. This means that in some edge cases, such as acronyms followed by semicolons, this filter will not replace ampersands that need replacing. For example, if ``value`` is ``Contact the R&D;``, the output will remain unchanged because ``&D;`` resembles a named entity."
msgstr ""

#: ../../ref/templates/builtins.txt:1502
# 75af6e80ccf34e9a8e48f2f8c4c71229
msgid "floatformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1504
# 9091ce12d77c40ae9b746eab5fa6dc12
msgid "When used without an argument, rounds a floating-point number to one decimal place -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1508
#: ../../ref/templates/builtins.txt:1519
#: ../../ref/templates/builtins.txt:1530
#: ../../ref/templates/builtins.txt:1542
# e7dfcb93ea1548c0a8b665660827cf1f
# 128de9507d5443aabdf198a32630edb8
# 28f22a83ef9a42ab826294c9f313e2aa
# ab755bdf036d49e28620d98e2c968977
msgid "``value``"
msgstr ""

#: ../../ref/templates/builtins.txt:1508
#: ../../ref/templates/builtins.txt:1519
#: ../../ref/templates/builtins.txt:1530
#: ../../ref/templates/builtins.txt:1542
# 80c1a6404df446c9957f417ac544fc84
# 97667389eeb14536999e415e2ce3659f
# dc8fd37ac58649e7be6d28c84b59c2d6
# 57ab3ee08e3a40feaac2134e7822a50b
msgid "Output"
msgstr ""

#: ../../ref/templates/builtins.txt:1510
#: ../../ref/templates/builtins.txt:1521
#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1544
# 1cdd3921585c45fb8d9162513a32bc26
# 7e49fe3dae614b38ad017c127b8a6a97
# 76522964d32f4787b00c06dea479f6ee
# 6a6bf90751a04d58b63386c568a43e3f
msgid "``34.23234``"
msgstr ""

#: ../../ref/templates/builtins.txt:1510
#: ../../ref/templates/builtins.txt:1511
#: ../../ref/templates/builtins.txt:1512
# 629428ff976a4cd68e5392065f67ca2d
# 4008cf61f4164a8caae3828a5647ff41
# 4a03b92183bb41aaa16e100efe2af639
msgid "``{{ value|floatformat }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1510
# a9ee3baabb4a4cbd96b961fb784fafec
msgid "``34.2``"
msgstr ""

#: ../../ref/templates/builtins.txt:1511
#: ../../ref/templates/builtins.txt:1522
#: ../../ref/templates/builtins.txt:1533
#: ../../ref/templates/builtins.txt:1545
# da06e805a9e04db1890c5fc1900fc085
# 60748a303a1d41f7828df83738f1d42a
# af390d988138493e921c305679927ed2
# dcafc208ea244801a74f166853d52390
msgid "``34.00000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1511
#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1533
#: ../../ref/templates/builtins.txt:1545
# 4b96b408507a4e8bb66afcd0fff52a1e
# bab5a1a46f494f7b8b5d1d044a1a67d9
# f2e56e1dbec243509ac9e16f7f425c83
# 514392b641e24b92a5795c507b77e3ae
msgid "``34``"
msgstr ""

#: ../../ref/templates/builtins.txt:1512
#: ../../ref/templates/builtins.txt:1523
#: ../../ref/templates/builtins.txt:1546
# 55824eac5ee240d4955924d3783abf9b
# f35e5ede80b741f99caba0d5ce4822d0
# 09a0878d8ec24434b866981336fe876b
msgid "``34.26000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1512
# e2b9f2bfeb1346bdbc936e6586bbd43d
msgid "``34.3``"
msgstr ""

#: ../../ref/templates/builtins.txt:1515
# 5942ab6e496b4a58b6bda929444ab766
msgid "If used with a numeric integer argument, ``floatformat`` rounds a number to that many decimal places. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1521
#: ../../ref/templates/builtins.txt:1522
#: ../../ref/templates/builtins.txt:1523
# 07748b61ca2f477080d9a480edcd497e
# a8a2102820d542edad2033be96ad32a2
# 707e9b95eaa64095ba7ec2424b3e58ba
msgid "``{{ value|floatformat:3 }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1521
#: ../../ref/templates/builtins.txt:1544
# 9d6c7fcbb4d54248aa6e90f504aa4275
# 45119f903729429eaf5a35df93bbfda2
msgid "``34.232``"
msgstr ""

#: ../../ref/templates/builtins.txt:1522
# 8c5c0053a50c4d06b3552fc50cc8c4f6
msgid "``34.000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1523
#: ../../ref/templates/builtins.txt:1546
# 4970c24140fa410e8306682be8532613
# a4e8a1cf951942e387af2783f18cb767
msgid "``34.260``"
msgstr ""

#: ../../ref/templates/builtins.txt:1526
# a5ab0f06a3ec4296b9c7755eec139fbd
msgid "Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1532
#: ../../ref/templates/builtins.txt:1533
#: ../../ref/templates/builtins.txt:1534
# 7e263920206642d0bd1b7c984d807090
# 4e73102aa0cd4607ab8ba9fe7f9c0a71
# 0fc692b5393242939d360bb2f37a2aff
msgid "``{{ value|floatformat:\"0\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1534
# fbe8f6c40fdf447d8baaaeaa2be24da1
msgid "``39.56000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1534
# dd609fd37ec949a39429b3a84594ef4d
msgid "``40``"
msgstr ""

#: ../../ref/templates/builtins.txt:1537
# 40ba4ce3d9d044209a564e39df04034a
msgid "If the argument passed to ``floatformat`` is negative, it will round a number to that many decimal places -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1544
#: ../../ref/templates/builtins.txt:1545
#: ../../ref/templates/builtins.txt:1546
# b07bf8ce9e964c57b32b160df894b7f3
# 54f90a4d52274e2b87daeb9031194f8a
# c1ca17a4096e415fade4ea6d7efb266c
msgid "``{{ value|floatformat:\"-3\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1549
# 84bbc874c2f640ba892bed9864449bae
msgid "Using ``floatformat`` with no argument is equivalent to using ``floatformat`` with an argument of ``-1``."
msgstr ""

#: ../../ref/templates/builtins.txt:1555
# 78fe9540939b4faa97930f95a8c9b490
msgid "force_escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1557
# cc535299222542a49720865789f3033d
msgid "Applies HTML escaping to a string (see the :tfilter:`escape` filter for details). This filter is applied *immediately* and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the :tfilter:`escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1566
# 5286a3dfc7554ca8b734511e84ccfea4
msgid "get_digit"
msgstr ""

#: ../../ref/templates/builtins.txt:1568
# ddd72f88f3bb43a7a3e9cb7121c4af45
msgid "Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1577
# d578edc7f12c42f3a941ba3fec67e0a7
msgid "If ``value`` is ``123456789``, the output will be ``8``."
msgstr ""

#: ../../ref/templates/builtins.txt:1582
# 462f5e05d0c840d09e34913259316e31
msgid "iriencode"
msgstr ""

#: ../../ref/templates/builtins.txt:1584
# b68fcb4faaca4bda878074083efb028e
msgid "Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you're trying to use strings containing non-ASCII characters in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:1588
# e45088debd484fdf9fefded06d79883d
msgid "It's safe to use this filter on a string that has already gone through the :tfilter:`urlencode` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1595
# 4ff24147052c40bf9158afce7c12a02b
msgid "If ``value`` is ``\"?test=1&me=2\"``, the output will be ``\"?test=1&amp;me=2\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1600
# 3a485ea3c8a94ef8b1848e06b65d083b
msgid "join"
msgstr ""

#: ../../ref/templates/builtins.txt:1602
# 21ee02b839f14093a06149421555ff68
msgid "Joins a list with a string, like Python's ``str.join(list)``"
msgstr ""

#: ../../ref/templates/builtins.txt:1608
# c6beb9211fbd4f4d9aa7f6e8bc4d9e16
msgid "If ``value`` is the list ``['a', 'b', 'c']``, the output will be the string ``\"a // b // c\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1614
# 0daabe08791e43d3bba5ae0bb8e446c3
msgid "last"
msgstr ""

#: ../../ref/templates/builtins.txt:1616
# 8a9e4ec1badc4fcab2cb4488926358d5
msgid "Returns the last item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1622
# fa54942bd74e4f35b27f6ce4a32a7af6
msgid "If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output will be the string ``\"d\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1628
# a3df3bd7781b444eb99552db21b9b8d0
msgid "length"
msgstr ""

#: ../../ref/templates/builtins.txt:1630
# fefc6de9d4624fdeaf73e3651977a1cf
msgid "Returns the length of the value. This works for both strings and lists."
msgstr ""

#: ../../ref/templates/builtins.txt:1636
# ea2639f63a8e4a9896efbfc2c68f84fc
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:1641
# e05de7e023aa4d4aa04e3146aff3b4d1
msgid "length_is"
msgstr ""

#: ../../ref/templates/builtins.txt:1643
# 9a5ec45f272245f5a90958bbc171cfd7
msgid "Returns ``True`` if the value's length is the argument, or ``False`` otherwise."
msgstr ""

#: ../../ref/templates/builtins.txt:1649
# 7902ef967d0b454092f61e99309c8d49
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1654
# 10d645966c144a81889282478f163f68
msgid "linebreaks"
msgstr ""

#: ../../ref/templates/builtins.txt:1656
# 167145f3b6b64f5583feb64feb040aad
msgid "Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break (``<br />``) and a new line followed by a blank line becomes a paragraph break (``</p>``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1664
# d77911202a554f038f5dbed55ae4acdf
msgid "If ``value`` is ``Joel\\nis a slug``, the output will be ``<p>Joel<br />is a slug</p>``."
msgstr ""

#: ../../ref/templates/builtins.txt:1670
# 7efa01a2e0984f24a61f0459826fdb83
msgid "linebreaksbr"
msgstr ""

#: ../../ref/templates/builtins.txt:1672
# 6ee909e4fc494a8aacee628ad6803f5c
msgid "Converts all newlines in a piece of plain text to HTML line breaks (``<br />``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1679
# d6ced45230fa49699bad24aaa228ffc7
msgid "If ``value`` is ``Joel\\nis a slug``, the output will be ``Joel<br />is a slug``."
msgstr ""

#: ../../ref/templates/builtins.txt:1685
# e63d1cebccca447c9031e7613f83e611
msgid "linenumbers"
msgstr ""

#: ../../ref/templates/builtins.txt:1687
# bc980f206ca74603bae37e11338b3106
msgid "Displays text with line numbers."
msgstr ""

#: ../../ref/templates/builtins.txt:1693
# 02ef2058a9f54ccf81af83e4841d2ad3
msgid "If ``value`` is::"
msgstr ""

#: ../../ref/templates/builtins.txt:1699
# b80068ee03f34495bfa58e1f854ac8e3
msgid "the output will be::"
msgstr ""

#: ../../ref/templates/builtins.txt:1708
# 3e7b217f34834f499389d043e08c5dd0
msgid "ljust"
msgstr ""

#: ../../ref/templates/builtins.txt:1710
# 7a2ea36dff434bf7900d9ba4219673fc
msgid "Left-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1712
#: ../../ref/templates/builtins.txt:1845
# e409382443a94ea594e50661c43582c6
# a5d81c7e1dce432897ed6969e629aef9
msgid "**Argument:** field size"
msgstr ""

#: ../../ref/templates/builtins.txt:1718
# e20a4e976479448e8312c5e0219aff71
msgid "If ``value`` is ``Django``, the output will be ``\"Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1723
# 241136d08a4643eb89e6f28bffb59c50
msgid "lower"
msgstr ""

#: ../../ref/templates/builtins.txt:1725
# dfaa8990c8f24f65a0718932af54aafa
msgid "Converts a string into all lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1731
# 991e4261b66a416aafd783ccaa73dbb7
msgid "If ``value`` is ``Still MAD At Yoko``, the output will be ``still mad at yoko``."
msgstr ""

#: ../../ref/templates/builtins.txt:1737
# 6d1e1745054a4c4695a29728ed79a1b3
msgid "make_list"
msgstr ""

#: ../../ref/templates/builtins.txt:1739
# 6edef40e6c1c4fccbc9f43deeb725851
msgid "Returns the value turned into a list. For a string, it's a list of characters. For an integer, the argument is cast into an unicode string before creating a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1747
# 78b2f4d6f8a24bb79e92e493212f1775
msgid "If ``value`` is the string ``\"Joel\"``, the output would be the list ``[u'J', u'o', u'e', u'l']``. If ``value`` is ``123``, the output will be the list ``[u'1', u'2', u'3']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1754
# 1e4488c1c4744bacb1d4163a0d9f454c
msgid "phone2numeric"
msgstr ""

#: ../../ref/templates/builtins.txt:1756
# 826b6740a04748ab975361fe2c335629
msgid "Converts a phone number (possibly containing letters) to its numerical equivalent."
msgstr ""

#: ../../ref/templates/builtins.txt:1759
# d1a339c11e274ae6bc6dec1896ff502a
msgid "The input doesn't have to be a valid phone number. This will happily convert any string."
msgstr ""

#: ../../ref/templates/builtins.txt:1766
# f74a7e7543f14ed99ab967a93f1da4aa
msgid "If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``."
msgstr ""

#: ../../ref/templates/builtins.txt:1771
# 7997bb8f78ee43b1ab326ad789028699
msgid "pluralize"
msgstr ""

#: ../../ref/templates/builtins.txt:1773
# 76a73925f04e4735a7ba6dd75098223e
msgid "Returns a plural suffix if the value is not 1. By default, this suffix is ``'s'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1780
# 4bfd55c505a549ba9941eb8207431560
msgid "If ``num_messages`` is ``1``, the output will be ``You have 1 message.`` If ``num_messages`` is ``2``  the output will be ``You have 2 messages.``"
msgstr ""

#: ../../ref/templates/builtins.txt:1783
# dea078eac56346f99ddc8ad8115caa4d
msgid "For words that require a suffix other than ``'s'``, you can provide an alternate suffix as a parameter to the filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1790
# 6e65cfa978d049a6bb90f9628dcc2909
msgid "For words that don't pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma."
msgstr ""

#: ../../ref/templates/builtins.txt:1797
# bfcfcf0a29ac475bbeb11e6857a10ead
msgid "Use :ttag:`blocktrans` to pluralize translated strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1802
# a5f1a7b2b3404e4ebb70798a837d3966
msgid "pprint"
msgstr ""

#: ../../ref/templates/builtins.txt:1804
# 9bba0a20910a45759a9ca2cb19703b74
msgid "A wrapper around :func:`pprint.pprint` -- for debugging, really."
msgstr ""

#: ../../ref/templates/builtins.txt:1809
# 579286ba379149878b2499b1d6b24dea
msgid "random"
msgstr ""

#: ../../ref/templates/builtins.txt:1811
# dec459ca57894ec1b1b7b616355234d6
msgid "Returns a random item from the given list."
msgstr ""

#: ../../ref/templates/builtins.txt:1817
# f4c403ca908f4c0e975ed3c2910c3223
msgid "If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be ``\"b\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1822
# 438d1920b889493e9e9c6746df4d63b7
msgid "removetags"
msgstr ""

#: ../../ref/templates/builtins.txt:1824
# 4fc0f74994534da7b4f575a572226e51
msgid "Removes a space-separated list of [X]HTML tags from the output."
msgstr ""

#: ../../ref/templates/builtins.txt:1830
# 05a2ec5eb45f4342946903f85a92a043
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the output will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1833
#: ../../ref/utils.txt:558
# ed875852187f413981128f511cdd0ebf
# c8df6025d27049b785108a6c973d759f
msgid "Note that this filter is case-sensitive."
msgstr ""

#: ../../ref/templates/builtins.txt:1835
# 068555a51a9a4df28d9ee62a62c1fca8
msgid "If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` the output will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1841
# 5a53f4625ebf4c759d825451e65d458d
msgid "rjust"
msgstr ""

#: ../../ref/templates/builtins.txt:1843
# 5e6293daaabf42a186089d41a07e7dd7
msgid "Right-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1851
# 70e0313ff90745e18de5f69a92d79028
msgid "If ``value`` is ``Django``, the output will be ``\"    Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1856
# c237346c2e6f41dea10919bdabeabcc1
msgid "safe"
msgstr ""

#: ../../ref/templates/builtins.txt:1858
# 18b9266361a5476eb2a5fcd11770157e
msgid "Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect."
msgstr ""

#: ../../ref/templates/builtins.txt:1863
# c05e330232ed4583895cd41b3d24b702
msgid "If you are chaining filters, a filter applied after ``safe`` can make the contents unsafe again. For example, the following code prints the variable as is, unescaped:"
msgstr ""

#: ../../ref/templates/builtins.txt:1874
# 32197489de7a4651b9efc7faf98f876b
msgid "safeseq"
msgstr ""

#: ../../ref/templates/builtins.txt:1876
# bc433d94d41842a9812c35ddd239b77b
msgid "Applies the :tfilter:`safe` filter to each element of a sequence.  Useful in conjunction with other filters that operate on sequences, such as :tfilter:`join`.  For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1882
# 7efdeb7a1cf64e0fab5d9bd233dbc450
msgid "You couldn't use the :tfilter:`safe` filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence."
msgstr ""

#: ../../ref/templates/builtins.txt:1889
# fe9864bc050f455094670da4e001786b
msgid "slice"
msgstr ""

#: ../../ref/templates/builtins.txt:1891
# a11ec4285eb54f35b804095bcd37c735
msgid "Returns a slice of the list."
msgstr ""

#: ../../ref/templates/builtins.txt:1893
# 0e006a30b1ad467ba27ba82c615e8cea
msgid "Uses the same syntax as Python's list slicing. See http://diveintopython.net/native_data_types/lists.html#odbchelper.list.slice for an introduction."
msgstr ""

#: ../../ref/templates/builtins.txt:1901
# 25095f3d81b64e039a8e50c1a3b928ec
msgid "If ``some_list`` is ``['a', 'b', 'c']``, the output will be ``['a', 'b']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1906
# 19670dedb1fd436a9673090fa5255aa2
msgid "slugify"
msgstr ""

#: ../../ref/templates/builtins.txt:1908
#: ../../ref/utils.txt:683
# b88cda97ec474838ae909efa59e0f260
# 097a0859a7f34bda84cbfffa72858e7b
msgid "Converts to lowercase, removes non-word characters (alphanumerics and underscores) and converts spaces to hyphens. Also strips leading and trailing whitespace."
msgstr ""

#: ../../ref/templates/builtins.txt:1916
#: ../../ref/utils.txt:691
# 894efb88877d494b924dfc9e92b9a4fb
# 0e88c0faf65646b78f515055515528b9
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"joel-is-a-slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1921
# e605f467645e4f3c9655bd9e70cc9010
msgid "stringformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1923
# f0ddd42d84d44ecbac3fbbedc592556e
msgid "Formats the variable according to the argument, a string formatting specifier. This specifier uses Python string formatting syntax, with the exception that the leading \"%\" is dropped."
msgstr ""

#: ../../ref/templates/builtins.txt:1927
# 4268b63abad74b3383358b8d2a70b47c
msgid "See http://docs.python.org/library/stdtypes.html#string-formatting-operations for documentation of Python string formatting"
msgstr ""

#: ../../ref/templates/builtins.txt:1934
# d4f5f63628304af0983d595210f7c74c
msgid "If ``value`` is ``10``, the output will be ``1.000000E+01``."
msgstr ""

#: ../../ref/templates/builtins.txt:1939
# 5072ad7c7a7c4542971550ab896d5fb5
msgid "striptags"
msgstr ""

#: ../../ref/templates/builtins.txt:1941
# 4daccfef3c1c4a1c8f9b7a5e870dc002
msgid "Strips all [X]HTML tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1947
# bd9693b6c4ed4769bb674b9a3df7c414
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1953
# 89191d0b2f3847b68ba40cecd5b80f92
msgid "time"
msgstr ""

#: ../../ref/templates/builtins.txt:1955
# 399c9a341c964a3cb6c748aa0a8c5cdd
msgid "Formats a time according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:1957
# 074058ee5a3e4a68b62a19d794f52b20
msgid "Given format can be the predefined one :setting:`TIME_FORMAT`, or a custom format, same as the :tfilter:`date` filter. Note that the predefined format is locale-dependant."
msgstr ""

#: ../../ref/templates/builtins.txt:1961
# b8f0d02b0ea74620a449fa9167b12d80
msgid "The time filter will only accept parameters in the format string that relate to the time of day, not the date (for obvious reasons). If you need to format a date, use the :tfilter:`date` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1969
# ad2c257690bf42889281ebdbdfbb1c6d
msgid "If ``value`` is equivalent to ``datetime.datetime.now()``, the output will be the string ``\"01:23\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1972
# 0f59118a0ccb49cdac329c0aed891ad5
msgid "Another example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1974
# a9c5aa502113448c895b5e1a802fa00b
msgid "Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` is, for example, ``\"de\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:1979
# 671d4216a1c64c7f8ea6f30d02c74ea1
msgid "the output will be the string ``\"01:23:00\"`` (The ``\"TIME_FORMAT\"`` format specifier for the ``de`` locale as shipped with Django is ``\"H:i:s\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1986
# 427b57e97ed5436b8d11c4115087faf7
msgid "...the formatting string defined in the :setting:`TIME_FORMAT` setting will be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:1992
# dccb4c0d5bfd434d9e8c6e459a4b6ed8
msgid "timesince"
msgstr ""

#: ../../ref/templates/builtins.txt:1994
# 02d6fe6870704914ac9692562fadffdd
msgid "Formats a date as the time since that date (e.g., \"4 days, 6 hours\")."
msgstr ""

#: ../../ref/templates/builtins.txt:1996
# fcf8caf5260444069a38b319a189cc3c
msgid "Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is *now*). For example, if ``blog_date`` is a date instance representing midnight on 1 June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006, then ``{{ blog_date|timesince:comment_date }}`` would return \"8 hours\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2002
#: ../../ref/templates/builtins.txt:2021
# c6dacb21276249d8a44fc36f31237605
# 261770feefa945bca3a6b1bb2d179d8f
msgid "Comparing offset-naive and offset-aware datetimes will return an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:2004
# e664a51a2fda4f77b8489323ddc591b3
msgid "Minutes is the smallest unit used, and \"0 minutes\" will be returned for any date that is in the future relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2010
# e6e9e9418d814b96ac4c72e8c6dc5251
msgid "timeuntil"
msgstr ""

#: ../../ref/templates/builtins.txt:2012
# a867e5d90d3544a4baa46f4f374ae364
msgid "Similar to ``timesince``, except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and ``conference_date`` is a date instance holding 29 June 2006, then ``{{ conference_date|timeuntil }}`` will return \"4 weeks\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2017
# 051036e1ad3d42af8509d10ebd02b43f
msgid "Takes an optional argument that is a variable containing the date to use as the comparison point (instead of *now*). If ``from_date`` contains 22 June 2006, then ``{{ conference_date|timeuntil:from_date }}`` will return \"1 week\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2023
# 266a4e04eb874286bc5a98432a4d3758
msgid "Minutes is the smallest unit used, and \"0 minutes\" will be returned for any date that is in the past relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2029
# 96a6445703414839bf7a8a69fed18c09
msgid "title"
msgstr ""

#: ../../ref/templates/builtins.txt:2031
# e94db601fbb84492a37e4d3cd67301f1
msgid "Converts a string into titlecase."
msgstr ""

#: ../../ref/templates/builtins.txt:2037
# 0c756dda08a748229da6b532280610ee
msgid "If ``value`` is ``\"my first post\"``, the output will be ``\"My First Post\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2042
# 6e79ae0d9a3340d09ba0de8f6b3249c5
msgid "truncatechars"
msgstr ""

#: ../../ref/templates/builtins.txt:2046
# af913152fadc410eb582e639cfbec83d
msgid "Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis sequence (\"...\")."
msgstr ""

#: ../../ref/templates/builtins.txt:2049
# 8146f4c31e984280923f15f1fc2c5db7
msgid "**Argument:** Number of characters to truncate to"
msgstr ""

#: ../../ref/templates/builtins.txt:2055
# 204b0b97c61d43cab6c94afc12b7506b
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel i...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2060
# 432753c8fcec4e1d82cc8fc0f604d0d7
msgid "truncatewords"
msgstr ""

#: ../../ref/templates/builtins.txt:2062
# 1318da5eaac042e08978d2eef0ba9c44
msgid "Truncates a string after a certain number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2064
# 5ede5ca6a0714a7a8a66d5c09e1d9061
msgid "**Argument:** Number of words to truncate after"
msgstr ""

#: ../../ref/templates/builtins.txt:2070
# 4991b5f642ef4923ac6e8704c6b1b1a1
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is ...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2072
# 36dbfb1727db406ca34b0f8384b23a0b
msgid "Newlines within the string will be removed."
msgstr ""

#: ../../ref/templates/builtins.txt:2077
# c6b4172dc92446e0bfe25af9ca9b4ae0
msgid "truncatewords_html"
msgstr ""

#: ../../ref/templates/builtins.txt:2079
# 1c56ab2e797c4062992d176a50102363
msgid "Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation."
msgstr ""

#: ../../ref/templates/builtins.txt:2083
# c4873e7922404771a811e1e760c3f0ee
msgid "This is less efficient than :tfilter:`truncatewords`, so should only be used when it is being passed HTML text."
msgstr ""

#: ../../ref/templates/builtins.txt:2090
# 54832201c4374791af3bdb4308d89925
msgid "If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be ``\"<p>Joel is ...</p>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2093
# 3ddbed0b9ab4468dba9d36c0ef75e89c
msgid "Newlines in the HTML content will be preserved."
msgstr ""

#: ../../ref/templates/builtins.txt:2098
# 6e98ff8f4eca4d6d9e2f65c8400e994f
msgid "unordered_list"
msgstr ""

#: ../../ref/templates/builtins.txt:2100
# 6b803aba06304c95afc524be5f922cb1
msgid "Recursively takes a self-nested list and returns an HTML unordered list -- WITHOUT opening and closing <ul> tags."
msgstr ""

#: ../../ref/templates/builtins.txt:2103
# 6efc258032664d72b3035e972e7cd6d6
msgid "The list is assumed to be in the proper format. For example, if ``var`` contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then ``{{ var|unordered_list }}`` would return::"
msgstr ""

#: ../../ref/templates/builtins.txt:2119
# 9d302ebff8a84117b532ac2672e0afaa
msgid "Note: An older, more restrictive and verbose input format is also supported: ``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``,"
msgstr ""

#: ../../ref/templates/builtins.txt:2125
# f82971af8f944a40b8ec5f66425d73a6
msgid "upper"
msgstr ""

#: ../../ref/templates/builtins.txt:2127
# 0bda2c062df345ce81e7347f9144451e
msgid "Converts a string into all uppercase."
msgstr ""

#: ../../ref/templates/builtins.txt:2133
# b0ea5a2721fe4bb6bc5ce0b9ecfea85c
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"JOEL IS A SLUG\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2138
# 3469eb9c1e36400e947fd51c55794306
msgid "urlencode"
msgstr ""

#: ../../ref/templates/builtins.txt:2140
# 7de1ec918b224e48a87e8ba9f459e251
msgid "Escapes a value for use in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:2146
# bc473e01603d442b8e5a258a876e5ca4
msgid "If ``value`` is ``\"http://www.example.org/foo?a=b&c=d\"``, the output will be ``\"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2149
# 1a13f531cbab4127ab4a203777e691cb
msgid "An optional argument containing the characters which should not be escaped can be provided."
msgstr ""

#: ../../ref/templates/builtins.txt:2152
# ab415012d18242ca9389b74b4198e1de
msgid "If not provided, the '/' character is assumed safe. An empty string can be provided when *all* characters should be escaped. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:2157
# 63bd66595c3f47c6ab59316c12e7d285
msgid "If ``value`` is ``\"http://www.example.org/\"``, the output will be ``\"http%3A%2F%2Fwww.example.org%2F\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2163
# 5528eea816dc4024bb51ff621d59a659
msgid "urlize"
msgstr ""

#: ../../ref/templates/builtins.txt:2165
# b6874f70afb54e79966975b4dedd8f6b
msgid "Converts URLs in text into clickable links."
msgstr ""

#: ../../ref/templates/builtins.txt:2167
# eb54e6bdae2d4d52a5a22ea96488a000
msgid "This template tag works on links prefixed with ``http://``, ``https://``, or ``www.``. For example, ``http://goo.gl/aia1t`` will get converted but ``goo.gl/aia1t`` won't."
msgstr ""

#: ../../ref/templates/builtins.txt:2171
# a726877fd14647f38d13622c55b3309c
msgid "It also supports domain-only links ending in one of the original top level domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and ``.org``). For example, ``djangoproject.com`` gets converted."
msgstr ""

#: ../../ref/templates/builtins.txt:2177
# f744bf96357048d6826b138f50e3caa9
msgid "Until Django 1.4, only the ``.com``, ``.net`` and ``.org`` suffixes were supported for domain-only links."
msgstr ""

#: ../../ref/templates/builtins.txt:2180
# ca2124efb220467aadddc31977a2d427
msgid "Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and ``urlize`` will still do the right thing."
msgstr ""

#: ../../ref/templates/builtins.txt:2183
# 1988e8802d874af7a202eb103445277c
msgid "Links generated by ``urlize`` have a ``rel=\"nofollow\"`` attribute added to them."
msgstr ""

#: ../../ref/templates/builtins.txt:2190
# edd45566eb2e4c4b9df50d93c4e7fc57
msgid "If ``value`` is ``\"Check out www.djangoproject.com\"``, the output will be ``\"Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangoproject.com</a>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2194
# be23e0435cd541328bf084abe1db204b
msgid "The ``urlize`` filter also takes an optional parameter ``autoescape``. If ``autoescape`` is ``True``, the link text and URLs will be escaped using Django's built-in :tfilter:`escape` filter. The default value for ``autoescape`` is ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:2201
# dcbfd8c9f71b41829a54d0e3c18f397d
msgid "If ``urlize`` is applied to text that already contains HTML markup, things won't work as expected. Apply this filter only to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2207
# d4c6024247c34ad4b2903a29eec4829a
msgid "urlizetrunc"
msgstr ""

#: ../../ref/templates/builtins.txt:2209
# 9afa40bfd2e74fa5aa6c63de296aa2ca
msgid "Converts URLs into clickable links just like urlize_, but truncates URLs longer than the given character limit."
msgstr ""

#: ../../ref/templates/builtins.txt:2212
# 0ca6984f07974419bb90a1311d07c51d
msgid "**Argument:** Number of characters that link text should be truncated to, including the ellipsis that's added if truncation is necessary."
msgstr ""

#: ../../ref/templates/builtins.txt:2219
# b63f97e34a864695816ee91c5d239800
msgid "If ``value`` is ``\"Check out www.djangoproject.com\"``, the output would be ``'Check out <a href=\"http://www.djangoproject.com\" rel=\"nofollow\">www.djangopr...</a>'``."
msgstr ""

#: ../../ref/templates/builtins.txt:2223
# a0465b256fa94d418a11907a756d2ac4
msgid "As with urlize_, this filter should only be applied to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2228
# 6a4daf49268e4eda981c90acaa17d5e4
msgid "wordcount"
msgstr ""

#: ../../ref/templates/builtins.txt:2230
# 938b263cfe784e909a21acc1821b1dbc
msgid "Returns the number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2236
# 48b3bdacba2b4d088cbc72ed3959720e
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:2241
# 59eae0b7107549469d272888ee0a68f4
msgid "wordwrap"
msgstr ""

#: ../../ref/templates/builtins.txt:2243
# e3d2986933c84ea9a1cd29d115b8f45e
msgid "Wraps words at specified line length."
msgstr ""

#: ../../ref/templates/builtins.txt:2245
# 0f62b7ffd3e1453ebaab959201ba0c40
msgid "**Argument:** number of characters at which to wrap the text"
msgstr ""

#: ../../ref/templates/builtins.txt:2251
# 5d576044c237456c848344d0ec0ee0ef
msgid "If ``value`` is ``Joel is a slug``, the output would be::"
msgstr ""

#: ../../ref/templates/builtins.txt:2260
# f45260f6d4ba428ab502d962faaf02cb
msgid "yesno"
msgstr ""

#: ../../ref/templates/builtins.txt:2262
# 65e010dbad7047899dbd9d4324c55cae
msgid "Maps values for true, false and (optionally) None, to the strings \"yes\", \"no\", \"maybe\", or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:"
msgstr ""

#: ../../ref/templates/builtins.txt:2273
#: ../../ref/templates/builtins.txt:2274
# 1e36b2fa98d0431a9ae43fca0e17c018
# 466b19ef4c6443e7a956796b09c78979
msgid "``True``"
msgstr ""

#: ../../ref/templates/builtins.txt:2273
# e9d8f1ef1b3a4e3e8b2e4e4b202f84d5
msgid "``yes``"
msgstr ""

#: ../../ref/templates/builtins.txt:2274
#: ../../ref/templates/builtins.txt:2275
#: ../../ref/templates/builtins.txt:2276
# 53edac82d0d7468d9f8239d2946f6a53
# 62dc13ec091e4ff4bcf3b2006f23c800
# 53e35de1a1bb4f1b93e21873e3d62ff4
msgid "``\"yeah,no,maybe\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2274
# ced058c1df7544f294acfa73fcef3048
msgid "``yeah``"
msgstr ""

#: ../../ref/templates/builtins.txt:2275
# 21efa4b3befa4573bd6e48b93b56e34a
msgid "``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:2275
# 21ec686df9fa44cf9f709de2f3cbee11
msgid "``no``"
msgstr ""

#: ../../ref/templates/builtins.txt:2276
#: ../../ref/templates/builtins.txt:2277
# 8f051ac0067e452087870b952556f1d2
# 38a69836a591445aa77c0c58a0a83525
msgid "``None``"
msgstr ""

#: ../../ref/templates/builtins.txt:2276
# e98c06b8d46146eaa6c0c561b9a58b2c
msgid "``maybe``"
msgstr ""

#: ../../ref/templates/builtins.txt:2277
# 6958facb562247f6a1f15803cf1d1212
msgid "``\"yeah,no\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2277
# 58e64805fab14a72b4e294458494c540
msgid "``\"no\"`` (converts None to False if no mapping for None is given)"
msgstr ""

#: ../../ref/templates/builtins.txt:2282
# e02dec54f22549babdba7a0f1b1e026e
msgid "Internationalization tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:2284
# 337d38cb9a1b4ff08bd3b2b0ef3c546c
msgid "Django provides template tags and filters to control each aspect of :doc:`internationalization </topics/i18n/index>` in templates. They allow for granular control of translations, formatting, and time zone conversions."
msgstr ""

#: ../../ref/templates/builtins.txt:2289
# 766a7aeb297948cda8103d43ba312e22
msgid "i18n"
msgstr ""

#: ../../ref/templates/builtins.txt:2291
# 57798d788d9b4c359fabaed7480df3d6
msgid "This library allows specifying translatable text in templates. To enable it, set :setting:`USE_I18N` to ``True``, then load it with ``{% load i18n %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:2295
# 20b89da0cc38419e8a7436625635e5af
msgid "See :ref:`specifying-translation-strings-in-template-code`."
msgstr ""

#: ../../ref/templates/builtins.txt:2298
# e428e00c6900409c89903ebbe7eef1ce
msgid "l10n"
msgstr ""

#: ../../ref/templates/builtins.txt:2300
# 8845a4bb8dd342f1989ed0bc5da52372
msgid "This library provides control over the localization of values in templates. You only need to load the library using ``{% load l10n %}``, but you'll often set :setting:`USE_L10N` to ``True`` so that localization is active by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2304
# 5429d67ed9fc49f5bac146b5571bb9a8
msgid "See :ref:`topic-l10n-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2307
# 76f4f4f6c4954a988249ff165362c939
msgid "tz"
msgstr ""

#: ../../ref/templates/builtins.txt:2311
# 94b1ee14fabb4794897d3e87fbd208d0
msgid "This library provides control over time zone conversions in templates. Like ``l10n``, you only need to load the library using ``{% load tz %}``, but you'll usually also set :setting:`USE_TZ` to ``True`` so that conversion to local time happens by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2316
# b75c54b3650e4750804e916c351d0c60
msgid "See :ref:`time-zones-in-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2319
# 5005321de1f946abb52457362dd58c01
msgid "Other tags and filters libraries"
msgstr ""

#: ../../ref/templates/builtins.txt:2321
# 05413ccc1a0d4e4b9831450e7c2bb19e
msgid "Django comes with a couple of other template-tag libraries that you have to enable explicitly in your :setting:`INSTALLED_APPS` setting and enable in your template with the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:2328
# 5a1fa2582fcf4a59b448f99d73f0adc0
msgid "A set of Django template filters useful for adding a \"human touch\" to data. See :doc:`/ref/contrib/humanize`."
msgstr ""

#: ../../ref/templates/builtins.txt:2334
# 547f1df27cc6477a90af187071ed6a28
msgid "A collection of template filters that implement these common markup languages:"
msgstr ""

#: ../../ref/templates/builtins.txt:2336
# 7c692a0bf154472a930ad7e93461716e
msgid "Textile"
msgstr ""

#: ../../ref/templates/builtins.txt:2338
# 7c91cfdb1254461f96a69788cbfe4a13
msgid "reST (reStructuredText)"
msgstr ""

#: ../../ref/templates/builtins.txt:2345
# 76b4d635c19740878815fdacbf523f88
msgid "A collection of template tags that can be useful while designing a Web site, such as a generator of Lorem Ipsum text. See :doc:`/ref/contrib/webdesign`."
msgstr ""

#: ../../ref/templates/builtins.txt:2358
# 4be302ce72e04b6aaac567787d7d06b4
msgid "To link to static files that are saved in :setting:`STATIC_ROOT` Django ships with a :ttag:`static` template tag. You can use this regardless if you're using :class:`~django.template.RequestContext` or not."
msgstr ""

#: ../../ref/templates/builtins.txt:2367
# a3eeec7017ce4fdca96b5da221a50b10
msgid "It is also able to consume standard context variables, e.g. assuming a ``user_stylesheet`` variable is passed to the template:"
msgstr ""

#: ../../ref/templates/builtins.txt:2375
# 83b2ff9c6cf34042b5cc83be684ec555
msgid "If you'd like to retrieve a static URL without displaying it, you can use a slightly different call::"
msgstr ""

#: ../../ref/templates/builtins.txt:2388
# ee7c5991a3b545aab11b94d81d2ff99b
msgid "The :mod:`staticfiles<django.contrib.staticfiles>` contrib app also ships with a :ttag:`static template tag<staticfiles-static>` which uses ``staticfiles'`` :setting:`STATICFILES_STORAGE` to build the URL of the given path. Use that instead if you have an advanced use case such as :ref:`using a cloud service to serve static files<staticfiles-from-cdn>`::"
msgstr ""

#: ../../ref/templates/builtins.txt:2400
# 3c6f06c6fe4e4a7e828255e1d9ba0bd2
msgid "get_static_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2404
# c1c9bd5daa5c4201bac8f1f67b29dd80
msgid "If you're not using :class:`~django.template.RequestContext`, or if you need more control over exactly where and how :setting:`STATIC_URL` is injected into the template, you can use the :ttag:`get_static_prefix` template tag instead::"
msgstr ""

#: ../../ref/templates/builtins.txt:2412
# 322bfd091a0c4ca5846e37d93a8ad115
msgid "There's also a second form you can use to avoid extra processing if you need the value multiple times::"
msgstr ""

#: ../../ref/templates/builtins.txt:2424
# ddf80db83a1b44cdb5f74c90b54adf1a
msgid "get_media_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2428
# 03da9c787b85476c95c8e1a796aaa4fc
msgid "Similar to the :ttag:`get_static_prefix`, ``get_media_prefix`` populates a template variable with the media prefix :setting:`MEDIA_URL`, e.g.::"
msgstr ""

#: ../../ref/templates/index.txt:5
# ef070cf9d21a4b51b0041c457e668baf
msgid "Django's template engine provides a powerful mini-language for defining the user-facing layer of your application, encouraging a clean separation of application and presentation logic. Templates can be maintained by anyone with an understanding of HTML; no knowledge of Python is required."
msgstr ""

#: ../../ref/templates/index.txt:18
# 2659fbd9c3924ecda03e509b9cf032da
msgid "For information on writing your own custom tags and filters, see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../ref/unicode.txt:3
# 152173cd13d84e849073aac0973dfd2c
msgid "Unicode data"
msgstr ""

#: ../../ref/unicode.txt:5
# 91af5ee4b54041c09084371842476eca
msgid "Django natively supports Unicode data everywhere. Providing your database can somehow store the data, you can safely pass around Unicode strings to templates, models and the database."
msgstr ""

#: ../../ref/unicode.txt:9
# 9bdb92eaaa80480687d4941a7d410505
msgid "This document tells you what you need to know if you're writing applications that use data or templates that are encoded in something other than ASCII."
msgstr ""

#: ../../ref/unicode.txt:13
# c34253464e0c4eff8501d5acf555105c
msgid "Creating the database"
msgstr ""

#: ../../ref/unicode.txt:15
# a2a8426c906a4d038ff097e12a36afd0
msgid "Make sure your database is configured to be able to store arbitrary string data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you won't be able to store certain characters in the database, and information will be lost."
msgstr ""

#: ../../ref/unicode.txt:20
# e4ef8e31b6874cf59c1a4c2ffdc102bb
msgid "MySQL users, refer to the `MySQL manual`_ (section 9.1.3.2 for MySQL 5.1) for details on how to set or alter the database character set encoding."
msgstr ""

#: ../../ref/unicode.txt:23
# 50dd9559050741d5a8f87192b3361d8f
msgid "PostgreSQL users, refer to the `PostgreSQL manual`_ (section 21.2.2 in PostgreSQL 8) for details on creating databases with the correct encoding."
msgstr ""

#: ../../ref/unicode.txt:26
# 0a170a970adc4b8cafb34f30cf2b8d4b
msgid "SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for internal encoding."
msgstr ""

#: ../../ref/unicode.txt:32
# 17c004e2082f4b1d83ea46c2af851a8e
msgid "All of Django's database backends automatically convert Unicode strings into the appropriate encoding for talking to the database. They also automatically convert strings retrieved from the database into Python Unicode strings. You don't even need to tell Django what encoding your database uses: that is handled transparently."
msgstr ""

#: ../../ref/unicode.txt:38
# 71e6c1bfde86485abc3a2526c235c814
msgid "For more, see the section \"The database API\" below."
msgstr ""

#: ../../ref/unicode.txt:41
# f1d81d2bb78c4bd39a73530bfc3a39b2
msgid "General string handling"
msgstr ""

#: ../../ref/unicode.txt:43
# ad7e7c6508994c4389f9c3deb87bc209
msgid "Whenever you use strings with Django -- e.g., in database lookups, template rendering or anywhere else -- you have two choices for encoding those strings. You can use Unicode strings, or you can use normal strings (sometimes called \"bytestrings\") that are encoded using UTF-8."
msgstr ""

#: ../../ref/unicode.txt:50
# bfd064467ead4f5fa014ea7694a7f0c3
msgid "In Python 3, the logic is reversed, that is normal strings are Unicode, and when you want to specifically create a bytestring, you have to prefix the string with a 'b'. As we are doing in Django code from version 1.5, we recommend that you import ``unicode_literals`` from the __future__ library in your code. Then, when you specifically want to create a bytestring literal, prefix the string with 'b'."
msgstr ""

#: ../../ref/unicode.txt:57
# 6be5a4af47b5436f85767045a1d0d3c0
msgid "Python 2 legacy::"
msgstr ""

#: ../../ref/unicode.txt:62
# 2b43595b40014cfea0b17d7cd0f2a3c5
msgid "Python 2 with unicode literals or Python 3::"
msgstr ""

#: ../../ref/unicode.txt:69
# 4bf57187de484e2e973a22f46da8ae2c
msgid "See also :doc:`Python 3 compatibility </topics/python3>`."
msgstr ""

#: ../../ref/unicode.txt:73
# f2cf5989ae2d4f6ea0bfc741eee6f4fd
msgid "A bytestring does not carry any information with it about its encoding. For that reason, we have to make an assumption, and Django assumes that all bytestrings are in UTF-8."
msgstr ""

#: ../../ref/unicode.txt:77
# 0ff0243fbe294da3ade7d53a389a9fc1
msgid "If you pass a string to Django that has been encoded in some other format, things will go wrong in interesting ways. Usually, Django will raise a ``UnicodeDecodeError`` at some point."
msgstr ""

#: ../../ref/unicode.txt:81
# e54ac03b785e48b1be971d7e8efa1076
msgid "If your code only uses ASCII data, it's safe to use your normal strings, passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""

#: ../../ref/unicode.txt:84
# d307b67f483c4f3bab0deda024c2ab19
msgid "Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` setting is set to something other than ``'utf-8'`` you can use that other encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the strings generated as the result of template rendering (and email). Django will always assume UTF-8 encoding for internal bytestrings. The reason for this is that the :setting:`DEFAULT_CHARSET` setting is not actually under your control (if you are the application developer). It's under the control of the person installing and using your application -- and if that person chooses a different setting, your code must still continue to work. Ergo, it cannot rely on that setting."
msgstr ""

#: ../../ref/unicode.txt:94
# 71a3ebfcdaef4fc696067463eb6ee8d1
msgid "In most cases when Django is dealing with strings, it will convert them to Unicode strings before doing anything else. So, as a general rule, if you pass in a bytestring, be prepared to receive a Unicode string back in the result."
msgstr ""

#: ../../ref/unicode.txt:99
# dc12bc65dcec4f85b0be1ab15b0cedd3
msgid "Translated strings"
msgstr ""

#: ../../ref/unicode.txt:101
# b8feeee03c1f4d0996a58890c094a9d0
msgid "Aside from Unicode strings and bytestrings, there's a third type of string-like object you may encounter when using Django. The framework's internationalization features introduce the concept of a \"lazy translation\" -- a string that has been marked as translated but whose actual translation result isn't determined until the object is used in a string. This feature is useful in cases where the translation locale is unknown until the string is used, even though the string might have originally been created when the code was first imported."
msgstr ""

#: ../../ref/unicode.txt:110
# 9d52aa63344c4448aba4d0003fce8b3b
msgid "Normally, you won't have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a ``django.utils.functional.__proxy__`` object, it is a lazy translation. Calling ``unicode()`` with the lazy translation as the argument will generate a Unicode string in the current locale."
msgstr ""

#: ../../ref/unicode.txt:116
# 42670b726eb54b1692b95d4359555248
msgid "For more details about lazy translation objects, refer to the :doc:`internationalization </topics/i18n/index>` documentation."
msgstr ""

#: ../../ref/unicode.txt:120
# 7ca3db36d2b749598a9e89780f4d5293
msgid "Useful utility functions"
msgstr ""

#: ../../ref/unicode.txt:122
# 6af409b954344be693dbec969d9b4c0d
msgid "Because some string operations come up again and again, Django ships with a few useful functions that should make working with Unicode and bytestring objects a bit easier."
msgstr ""

#: ../../ref/unicode.txt:127
# 67fcb22591c64176baf0648502357b6d
msgid "Conversion functions"
msgstr ""

#: ../../ref/unicode.txt:129
# a3132369bbe5487ab2d36cab933ba4e5
msgid "The ``django.utils.encoding`` module contains a few functions that are handy for converting back and forth between Unicode and bytestrings."
msgstr ""

#: ../../ref/unicode.txt:132
# 4161431035174ba49ae0b1c8825a3cdd
msgid "``smart_text(s, encoding='utf-8', strings_only=False, errors='strict')`` converts its input to a Unicode string. The ``encoding`` parameter specifies the input encoding. (For example, Django uses this internally when processing form input data, which might not be UTF-8 encoded.) The ``strings_only`` parameter, if set to True, will result in Python numbers, booleans and ``None`` not being converted to a string (they keep their original types). The ``errors`` parameter takes any of the values that are accepted by Python's ``unicode()`` function for its error handling."
msgstr ""

#: ../../ref/unicode.txt:142
# 7287a3e8a8a4443b9ae5fef5f8dd8ccc
msgid "If you pass ``smart_text()`` an object that has a ``__unicode__`` method, it will use that method to do the conversion."
msgstr ""

#: ../../ref/unicode.txt:145
# 59d9933aa41e481983d31abc1c6277f4
msgid "``force_text(s, encoding='utf-8', strings_only=False, errors='strict')`` is identical to ``smart_text()`` in almost all cases. The difference is when the first argument is a :ref:`lazy translation <lazy-translations>` instance. While ``smart_text()`` preserves lazy translations, ``force_text()`` forces those objects to a Unicode string (causing the translation to occur). Normally, you'll want to use ``smart_text()``. However, ``force_text()`` is useful in template tags and filters that absolutely *must* have a string to work with, not just something that can be converted to a string."
msgstr ""

#: ../../ref/unicode.txt:155
# 3435d711a510454b8430b365534b6f8f
msgid "``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` is essentially the opposite of ``smart_text()``. It forces the first argument to a bytestring. The ``strings_only`` parameter has the same behavior as for ``smart_text()`` and ``force_text()``. This is slightly different semantics from Python's builtin ``str()`` function, but the difference is needed in a few places within Django's internals."
msgstr ""

#: ../../ref/unicode.txt:162
# d9dcb14335cd47f6a6cdd99973eda113
msgid "Normally, you'll only need to use ``smart_text()``. Call it as early as possible on any input data that might be either Unicode or a bytestring, and from then on, you can treat the result as always being Unicode."
msgstr ""

#: ../../ref/unicode.txt:169
# 8062643a38d446189b46ac2718063f47
msgid "URI and IRI handling"
msgstr ""

#: ../../ref/unicode.txt:171
# ed898cab6053409f80f2be62720de091
msgid "Web frameworks have to deal with URLs (which are a type of IRI_). One requirement of URLs is that they are encoded using only ASCII characters. However, in an international environment, you might need to construct a URL from an IRI_ -- very loosely speaking, a URI_ that can contain Unicode characters. Quoting and converting an IRI to URI can be a little tricky, so Django provides some assistance."
msgstr ""

#: ../../ref/unicode.txt:178
# 186703f6fdd24b83a063059bb79541db
msgid "The function ``django.utils.encoding.iri_to_uri()`` implements the conversion from IRI to URI as required by the specification (:rfc:`3987`)."
msgstr ""

#: ../../ref/unicode.txt:181
# 52682ce665b14542918d2a6a40abc682
msgid "The functions ``django.utils.http.urlquote()`` and ``django.utils.http.urlquote_plus()`` are versions of Python's standard ``urllib.quote()`` and ``urllib.quote_plus()`` that work with non-ASCII characters. (The data is converted to UTF-8 prior to encoding.)"
msgstr ""

#: ../../ref/unicode.txt:186
# 24d82903271448dcbe0bca1f548f5430
msgid "These two groups of functions have slightly different purposes, and it's important to keep them straight. Normally, you would use ``urlquote()`` on the individual portions of the IRI or URI path so that any reserved characters such as '&' or '%' are correctly encoded. Then, you apply ``iri_to_uri()`` to the full IRI and it converts any non-ASCII characters to the correct encoded values."
msgstr ""

#: ../../ref/unicode.txt:194
# b388b922129e4df2af4505ed65065328
msgid "Technically, it isn't correct to say that ``iri_to_uri()`` implements the full algorithm in the IRI specification. It doesn't (yet) perform the international domain name encoding portion of the algorithm."
msgstr ""

#: ../../ref/unicode.txt:198
# adf18aa8ca454caca34f7f20851c56d8
msgid "The ``iri_to_uri()`` function will not change ASCII characters that are otherwise permitted in a URL. So, for example, the character '%' is not further encoded when passed to ``iri_to_uri()``. This means you can pass a full URL to this function and it will not mess up the query string or anything like that."
msgstr ""

#: ../../ref/unicode.txt:204
# 517e5d0800d541d28884a81479fa2cdb
msgid "An example might clarify things here::"
msgstr ""

#: ../../ref/unicode.txt:211
# b82349b37bf44abba54bb27d5f728aa7
msgid "If you look carefully, you can see that the portion that was generated by ``urlquote()`` in the second example was not double-quoted when passed to ``iri_to_uri()``. This is a very important and useful feature. It means that you can construct your IRI without worrying about whether it contains non-ASCII characters and then, right at the end, call ``iri_to_uri()`` on the result."
msgstr ""

#: ../../ref/unicode.txt:218
# a2a086b5128548618311dbc1f22557f3
msgid "The ``iri_to_uri()`` function is also idempotent, which means the following is always true::"
msgstr ""

#: ../../ref/unicode.txt:223
# 29dd740417bd4860917b47b12cc16c5f
msgid "So you can safely call it multiple times on the same IRI without risking double-quoting problems."
msgstr ""

#: ../../ref/unicode.txt:232
# 9f0e8f2a45eb4173b8b20420bc05ad67
msgid "Because all strings are returned from the database as Unicode strings, model fields that are character based (CharField, TextField, URLField, etc) will contain Unicode values when Django retrieves data from the database. This is *always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""

#: ../../ref/unicode.txt:237
# 9294d92469394074aaab729c28972945
msgid "You can pass in bytestrings when creating a model or populating a field, and Django will convert it to Unicode when it needs to."
msgstr ""

#: ../../ref/unicode.txt:241
# 8c242cef20c34ed8b710b17f90cd6c69
msgid "Choosing between ``__str__()`` and ``__unicode__()``"
msgstr ""

#: ../../ref/unicode.txt:243
# a38267c312ff4372b55d503a498cbc02
msgid "One consequence of using Unicode by default is that you have to take some care when printing data from the model."
msgstr ""

#: ../../ref/unicode.txt:246
# de270e52d14b46d2b8dfdb34887bc2c2
msgid "In particular, rather than giving your model a ``__str__()`` method, we recommended you implement a ``__unicode__()`` method. In the ``__unicode__()`` method, you can quite safely return the values of all your fields without having to worry about whether they fit into a bytestring or not. (The way Python works, the result of ``__str__()`` is *always* a bytestring, even if you accidentally try to return a Unicode object)."
msgstr ""

#: ../../ref/unicode.txt:253
# cf80348d391c444291f8f78561051225
msgid "You can still create a ``__str__()`` method on your models if you want, of course, but you shouldn't need to do this unless you have a good reason. Django's ``Model`` base class automatically provides a ``__str__()`` implementation that calls ``__unicode__()`` and encodes the result into UTF-8. This means you'll normally only need to implement a ``__unicode__()`` method and let Django handle the coercion to a bytestring when required."
msgstr ""

#: ../../ref/unicode.txt:261
# 5ed2f86b47714416990f914a5cbd1bec
msgid "Taking care in ``get_absolute_url()``"
msgstr ""

#: ../../ref/unicode.txt:263
# 09d8342353e442d8b79d9a8e5fe58e55
msgid "URLs can only contain ASCII characters. If you're constructing a URL from pieces of data that might be non-ASCII, be careful to encode the results in a way that is suitable for a URL. The :func:`~django.core.urlresolvers.reverse` function handles this for you automatically."
msgstr ""

#: ../../ref/unicode.txt:268
# e45030f773724fcab41543bfa40ee9a1
msgid "If you're constructing a URL manually (i.e., *not* using the ``reverse()`` function), you'll need to take care of the encoding yourself. In this case, use the ``iri_to_uri()`` and ``urlquote()`` functions that were documented above_. For example::"
msgstr ""

#: ../../ref/unicode.txt:280
# 7e9e8d0d46dc4b2dbcf78ed87e77e632
msgid "This function returns a correctly encoded URL even if ``self.location`` is something like \"Jack visited Paris & Orléans\". (In fact, the ``iri_to_uri()`` call isn't strictly necessary in the above example, because all the non-ASCII characters would have been removed in quoting in the first line.)"
msgstr ""

#: ../../ref/unicode.txt:288
# cc42395115d34d67bca61ef83e273211
msgid "The database API"
msgstr ""

#: ../../ref/unicode.txt:290
# e034baa151ee4859ae2e607536d38f27
msgid "You can pass either Unicode strings or UTF-8 bytestrings as arguments to ``filter()`` methods and the like in the database API. The following two querysets are identical::"
msgstr ""

#: ../../ref/unicode.txt:302
# 72387e782f8c4e79bcdd17b17542aa73
msgid "You can use either Unicode or bytestrings when creating templates manually::"
msgstr ""

#: ../../ref/unicode.txt:309
# 594ce69049314906a8e86747916b1332
msgid "But the common case is to read templates from the filesystem, and this creates a slight complication: not all filesystems store their data encoded as UTF-8. If your template files are not stored with a UTF-8 encoding, set the :setting:`FILE_CHARSET` setting to the encoding of the files on disk. When Django reads in a template file, it will convert the data from this encoding to Unicode. (:setting:`FILE_CHARSET` is set to ``'utf-8'`` by default.)"
msgstr ""

#: ../../ref/unicode.txt:316
# 4fe0dbab27054f8da4bcadb1e57aee8c
msgid "The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered templates. This is set to UTF-8 by default."
msgstr ""

#: ../../ref/unicode.txt:320
# 5dbde6ce582947a6bd40505026284c52
msgid "Template tags and filters"
msgstr ""

#: ../../ref/unicode.txt:322
# defa9bc555614857a3cfb236df39172d
msgid "A couple of tips to remember when writing your own template tags and filters:"
msgstr ""

#: ../../ref/unicode.txt:324
# 8333f7c19335430c944ac4bb30af4539
msgid "Always return Unicode strings from a template tag's ``render()`` method and from template filters."
msgstr ""

#: ../../ref/unicode.txt:327
# 5f6b4bcf68094f8ab5d352d42a95dec8
msgid "Use ``force_text()`` in preference to ``smart_text()`` in these places. Tag rendering and filter calls occur as the template is being rendered, so there is no advantage to postponing the conversion of lazy translation objects into strings. It's easier to work solely with Unicode strings at that point."
msgstr ""

#: ../../ref/unicode.txt:334
# d8e6b15d2ad543028b85ea3279125ea5
msgid "Email"
msgstr ""

#: ../../ref/unicode.txt:336
# b5c5134bcc56409a90f929c114928b8d
msgid "Django's email framework (in ``django.core.mail``) supports Unicode transparently. You can use Unicode data in the message bodies and any headers. However, you're still obligated to respect the requirements of the email specifications, so, for example, email addresses should use only ASCII characters."
msgstr ""

#: ../../ref/unicode.txt:342
# 4f4809aa024e40b9a31b2be183c776b6
msgid "The following code example demonstrates that everything except email addresses can be non-ASCII::"
msgstr ""

#: ../../ref/unicode.txt:357
# b31636a0b35d4d42b68202b1261e54c3
msgid "Form submission"
msgstr ""

#: ../../ref/unicode.txt:359
# e6fc2495187348b7b481e2879e322ce9
msgid "HTML form submission is a tricky area. There's no guarantee that the submission will include encoding information, which means the framework might have to guess at the encoding of submitted data."
msgstr ""

#: ../../ref/unicode.txt:363
# ba65ee55117142af98e49996de6c2573
msgid "Django adopts a \"lazy\" approach to decoding form data. The data in an ``HttpRequest`` object is only decoded when you access it. In fact, most of the data is not decoded at all. Only the ``HttpRequest.GET`` and ``HttpRequest.POST`` data structures have any decoding applied to them. Those two fields will return their members as Unicode data. All other attributes and methods of ``HttpRequest`` return data exactly as it was submitted by the client."
msgstr ""

#: ../../ref/unicode.txt:371
# e2ec309775564900bb4f10ef509b58fc
msgid "By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed encoding for form data. If you need to change this for a particular form, you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For example::"
msgstr ""

#: ../../ref/unicode.txt:380
# c66fcbee0d134438a7791a2d3e593846
msgid "You can even change the encoding after having accessed ``request.GET`` or ``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""

#: ../../ref/unicode.txt:383
# 131e6b3d45264c358a0d8b94185e524b
msgid "Most developers won't need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control."
msgstr ""

#: ../../ref/unicode.txt:387
# 6c47513751b24c1ab52cd19b8023da20
msgid "Django does not decode the data of file uploads, because that data is normally treated as collections of bytes, rather than strings. Any automatic decoding there would alter the meaning of the stream of bytes."
msgstr ""

#: ../../ref/urlresolvers.txt:3
# 8a4fe0de750b4ebeb016b3f11f19f09a
msgid "``django.core.urlresolvers`` utility functions"
msgstr ""

#: ../../ref/urlresolvers.txt:8
# 135cd4777dc74acc99838a5b6f889dd6
msgid "reverse()"
msgstr ""

#: ../../ref/urlresolvers.txt:10
# d3a44eb858614942b94681ead53169d2
msgid "If you need to use something similar to the :ttag:`url` template tag in your code, Django provides the following function:"
msgstr ""

#: ../../ref/urlresolvers.txt:15
# e31f76b6a16b418498a951aead30c969
msgid "``viewname`` is either the function name (either a function reference, or the string version of the name, if you used that form in ``urlpatterns``) or the :ref:`URL pattern name <naming-url-patterns>`.  Normally, you won't need to worry about the ``urlconf`` parameter and will only pass in the positional and keyword arguments to use in the URL matching. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:26
# 8b2b6ee62c2c41bda1082257a8025e13
msgid "The ``reverse()`` function can reverse a large variety of regular expression patterns for URLs, but not every possible one. The main restriction at the moment is that the pattern cannot contain alternative choices using the vertical bar (``\"|\"``) character. You can quite happily use such patterns for matching against incoming URLs and sending them off to views, but you cannot reverse such patterns."
msgstr ""

#: ../../ref/urlresolvers.txt:33
# 6068eda988a149e58de0b704736f3000
msgid "The ``current_app`` argument allows you to provide a hint to the resolver indicating the application to which the currently executing view belongs. This ``current_app`` argument is used as a hint to resolve application namespaces into URLs on specific application instances, according to the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../ref/urlresolvers.txt:39
# 1c9ac63caf214ca090a1918355debe6d
msgid "You can use ``kwargs`` instead of ``args``. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:44
# 55c76497fe6c4630aedb0afbc1f8ce42
msgid "``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr ""

#: ../../ref/urlresolvers.txt:48
# c33688a488b54fa280aa9326283f902b
msgid "As part of working out which URL names map to which patterns, the ``reverse()`` function has to import all of your URLconf files and examine the name of each view. This involves importing each view function. If there are *any* errors whilst importing any of your view functions, it will cause ``reverse()`` to raise an error, even if that view function is not the one you are trying to reverse."
msgstr ""

#: ../../ref/urlresolvers.txt:55
# 977effab2bc743129cc7253873d0aeec
msgid "Make sure that any views you reference in your URLconf files exist and can be imported correctly. Do not include lines that reference views you haven't written yet, because those views will not be importable."
msgstr ""

#: ../../ref/urlresolvers.txt:61
# cf720791587f4df8a03d5eeecf5abc4b
msgid "The string returned by ``reverse()`` is already :ref:`urlquoted <uri-and-iri-handling>`. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:67
# 97831b0abde34b62be367c0d16ac202c
msgid "Applying further encoding (such as :meth:`~django.utils.http.urlquote` or ``urllib.quote``) to the output of ``reverse()`` may produce undesirable results."
msgstr ""

#: ../../ref/urlresolvers.txt:72
# 69d4b41bd78f4292848f0b0b7b2d1597
msgid "reverse_lazy()"
msgstr ""

#: ../../ref/urlresolvers.txt:76
# 78129c8ddddd417db336353195ae6517
msgid "A lazily evaluated version of `reverse()`_."
msgstr ""

#: ../../ref/urlresolvers.txt:80
# 67498cb556ed46faa08990f7553b778d
msgid "It is useful for when you need to use a URL reversal before your project's URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""

#: ../../ref/urlresolvers.txt:83
# d9df3788d3b544c7a8c205776b72c0ad
msgid "providing a reversed URL as the ``url`` attribute of a generic class-based view."
msgstr ""

#: ../../ref/urlresolvers.txt:86
# a4bcfb17ec2a408495d128332d405462
msgid "providing a reversed URL to a decorator (such as the ``login_url`` argument for the :func:`django.contrib.auth.decorators.permission_required` decorator)."
msgstr ""

#: ../../ref/urlresolvers.txt:90
# 55f919ed007d4720bc7ccf2d6cc21d96
msgid "providing a reversed URL as a default value for a parameter in a function's signature."
msgstr ""

#: ../../ref/urlresolvers.txt:94
# a464bd2e3aad45488a60981e08809086
msgid "resolve()"
msgstr ""

#: ../../ref/urlresolvers.txt:96
# 94dc843e264b4c12bdc84d6c085b0eb5
msgid "The ``resolve()`` function can be used for resolving URL paths to the corresponding view functions. It has the following signature:"
msgstr ""

#: ../../ref/urlresolvers.txt:101
# 6f86eb9ba1c34f238fc5d57b307bcc77
msgid "``path`` is the URL path you want to resolve. As with :func:`~django.core.urlresolvers.reverse`, you don't need to worry about the ``urlconf`` parameter. The function returns a :class:`ResolverMatch` object that allows you to access various meta-data about the resolved URL."
msgstr ""

#: ../../ref/urlresolvers.txt:107
# c9be0eaa775347b7b65c4f491e70a68f
msgid "If the URL does not resolve, the function raises an :class:`~django.http.Http404` exception."
msgstr ""

#: ../../ref/urlresolvers.txt:114
# 23918c42e09b4cb7b4cd610ae2cff6aa
msgid "The view function that would be used to serve the URL"
msgstr ""

#: ../../ref/urlresolvers.txt:118
# 0824fff487344e778b096ca6f5e127d9
msgid "The arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:123
# 546a56d96ade4a6fbae5a95c78e97649
msgid "The keyword arguments that would be passed to the view function, as parsed from the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:128
# 3dfbec3847ac49aa948a9f50530ba5e0
msgid "The name of the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:132
# c34be45030024a8d85379535f17cde97
msgid "The application namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:137
# 0025ca2a5c6248a9a240cd1f98a210c0
msgid "The instance namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:142
# 30d4d9b834fd4c528e57e2cf491dad4a
msgid "The list of individual namespace components in the full instance namespace for the URL pattern that matches the URL. i.e., if the namespace is ``foo:bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""

#: ../../ref/urlresolvers.txt:147
# 27b18c4769634bedbb194e9cdc2cdbd3
msgid "A :class:`ResolverMatch` object can then be interrogated to provide information about the URL pattern that matches a URL::"
msgstr ""

#: ../../ref/urlresolvers.txt:155
# d7dec456952c4b26ba329e3f4996009f
msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""

#: ../../ref/urlresolvers.txt:159
# 766f03b108714b2db50530d1d47242d9
msgid "One possible use of :func:`~django.core.urlresolvers.resolve` would be to test whether a view would raise a ``Http404`` error before redirecting to it::"
msgstr ""

#: ../../ref/urlresolvers.txt:182
# 0569729810f043ca9e932f0363d1ea9e
msgid "get_script_prefix()"
msgstr ""

#: ../../ref/urlresolvers.txt:186
# e9570aa359be4c4bb8f8d12b031568b8
msgid "Normally, you should always use :func:`~django.core.urlresolvers.reverse` to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, :func:`~django.core.urlresolvers.reverse` takes care of this for you). In that case, you can call ``get_script_prefix()``, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always ``\"/\"``."
msgstr ""

#: ../../ref/urls.txt:3
# 5a0544c99df142a9bb45e47f339aeaf1
msgid "``django.conf.urls`` utility functions"
msgstr ""

#: ../../ref/urls.txt:12
# 5342e968fff54995b9c0f6457c914859
msgid "Until Django 1.3 they were located in ``django.conf.urls.defaults``. You still can import them from there but it will be removed in Django 1.6."
msgstr ""

#: ../../ref/urls.txt:16
# 1d8ba306e17e4abdabcea47ddac8454e
msgid "patterns()"
msgstr ""

#: ../../ref/urls.txt:20
# 47e8b33b77ae4bd6ac2a55e8d7d748bb
msgid "A function that takes a prefix, and an arbitrary number of URL patterns, and returns a list of URL patterns in the format Django needs."
msgstr ""

#: ../../ref/urls.txt:23
# 299d09db4b0b43929797165b17370885
msgid "The first argument to ``patterns()`` is a string ``prefix``. See :ref:`The view prefix <urlpatterns-view-prefix>`."
msgstr ""

#: ../../ref/urls.txt:26
# a213f202488546848a214707d84ecc5a
msgid "The remaining arguments should be tuples in this format::"
msgstr ""

#: ../../ref/urls.txt:30
# 51cb0549b9b745a7b62a5aa12b068c3d
msgid "The ``optional_dictionary`` and ``optional_name`` parameters are described in :ref:`Passing extra options to view functions <views-extra-options>`."
msgstr ""

#: ../../ref/urls.txt:34
# b99aef395a394f1ba9d99a2f83491d15
msgid "Because `patterns()` is a function call, it accepts a maximum of 255 arguments (URL patterns, in this case). This is a limit for all Python function calls. This is rarely a problem in practice, because you'll typically structure your URL patterns modularly by using `include()` sections. However, on the off-chance you do hit the 255-argument limit, realize that `patterns()` returns a Python list, so you can split up the construction of the list."
msgstr ""

#: ../../ref/urls.txt:51
# b43fdfce8f8d43a59c8e4d03abb58925
msgid "Python lists have unlimited size, so there's no limit to how many URL patterns you can construct. The only limit is that you can only create 254 at a time (the 255th argument is the initial prefix argument)."
msgstr ""

#: ../../ref/urls.txt:56
# 13a1f10a480849c5bd447136375d20c4
msgid "url()"
msgstr ""

#: ../../ref/urls.txt:60
# 2e20fc8212a547d79903059ecd66a635
msgid "You can use the ``url()`` function, instead of a tuple, as an argument to ``patterns()``. This is convenient if you want to specify a name without the optional extra arguments dictionary. For example::"
msgstr ""

#: ../../ref/urls.txt:69
# 7ef2c4fc889443f6bb9cec4178584828
msgid "This function takes five arguments, most of which are optional::"
msgstr ""

#: ../../ref/urls.txt:73
# f679daedbfd6439c883adc08c9de9d78
msgid "See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` parameter is useful."
msgstr ""

#: ../../ref/urls.txt:76
# dd18eb4be3e448ffa8629057384db402
msgid "The ``prefix`` parameter has the same meaning as the first argument to ``patterns()`` and is only relevant when you're passing a string as the ``view`` parameter."
msgstr ""

#: ../../ref/urls.txt:81
# e3f1cb2b57f04ba99b09bb4d0dd77a6a
msgid "include()"
msgstr ""

#: ../../ref/urls.txt:87
# fe8379b700414f059be7854fcfcfb480
msgid "A function that takes a full Python import path to another URLconf module that should be \"included\" in this place. Optionally, the :term:`application namespace` and :term:`instance namespace` where the entries will be included into can also be specified."
msgstr ""

#: ../../ref/urls.txt:92
# 0efb33c71a564b1f8230afdd112e504a
msgid "``include()`` also accepts as an argument either an iterable that returns URL patterns or a 3-tuple containing such iterable plus the names of the application and instance namespaces."
msgstr ""

#: ../../ref/urls.txt:108
# 39fa881c16894d20805f39239714ab29
msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""

#: ../../ref/urls.txt:111
# 5107b626d3184d5dbb63fbdd30bb4680
msgid "handler403"
msgstr ""

#: ../../ref/urls.txt:115
# e5c3ff03ff6645ba9655fd30705147d1
msgid "A callable, or a string representing the full Python import path to the view that should be called if the user doesn't have the permissions required to access a resource."
msgstr ""

#: ../../ref/urls.txt:119
# 340dde41316e48bc810b778967bcb6be
msgid "By default, this is ``'django.views.defaults.permission_denied'``. That default value should suffice."
msgstr ""

#: ../../ref/urls.txt:122
# 2fc8b5a48dca4808943f005e98e0859b
msgid "See the documentation about :ref:`the 403 (HTTP Forbidden) view <http_forbidden_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:129
# 23dfdd79d2de472e8b042249d437a48b
msgid "handler404"
msgstr ""

#: ../../ref/urls.txt:133
# 496abc04a4f74cbab2bb470bfdfce455
msgid "A callable, or a string representing the full Python import path to the view that should be called if none of the URL patterns match."
msgstr ""

#: ../../ref/urls.txt:136
# 3bebb06fefef47c0b7361cd37e56a8e9
msgid "By default, this is ``'django.views.defaults.page_not_found'``. That default value should suffice."
msgstr ""

#: ../../ref/urls.txt:139
# 57389eaa04e84b3cbdc9bae29a12afed
msgid "See the documentation about :ref:`the 404 (HTTP Not Found) view <http_not_found_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:143
# dc9f737b7a3d4867a65dac460e3bd2bb
msgid "handler500"
msgstr ""

#: ../../ref/urls.txt:147
# 700b6b28fa19469e91b9fbbabca47907
msgid "A callable, or a string representing the full Python import path to the view that should be called in case of server errors. Server errors happen when you have runtime errors in view code."
msgstr ""

#: ../../ref/urls.txt:151
# 87082160f0a144b19390093129437f5d
msgid "By default, this is ``'django.views.defaults.server_error'``. That default value should suffice."
msgstr ""

#: ../../ref/urls.txt:154
# 68a97e71770f47bda1d2d921d5ba7f51
msgid "See the documentation about :ref:`the 500 (HTTP Internal Server Error) view <http_internal_server_error_view>` for more information."
msgstr ""

#: ../../ref/utils.txt:3
# ece420d5e2874f48b2eadb9a40e0b238
msgid "Django Utils"
msgstr ""

#: ../../ref/utils.txt:8
# 3d068bb1923a4805993a01edf758d0fc
msgid "This document covers all stable modules in ``django.utils``. Most of the modules in ``django.utils`` are designed for internal use and only the following parts can be considered stable and thus backwards compatible as per the :ref:`internal release deprecation policy <internal-release-deprecation-policy>`."
msgstr ""

#: ../../ref/utils.txt:14
# b949a325ec4e489780fd07d234ecccdf
msgid "``django.utils.cache``"
msgstr ""

#: ../../ref/utils.txt:19
# 891987d61b1948f4b1347cbd88debbac
msgid "This module contains helper functions for controlling caching. It does so by managing the ``Vary`` header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves."
msgstr ""

#: ../../ref/utils.txt:24
# 26808daa8f5c4bddbbda6ddabc1a9fe0
msgid "For information on the ``Vary`` header, see :rfc:`2616#section-14.44` section 14.44."
msgstr ""

#: ../../ref/utils.txt:27
# e174d491de464a30b7b9f6293b9aa043
msgid "Essentially, the ``Vary`` HTTP header defines which headers a cache should take into account when building its cache key. Requests with the same path but different header content for headers named in ``Vary`` need to get different cache keys to prevent delivery of wrong content."
msgstr ""

#: ../../ref/utils.txt:32
# 1c3ec325ed8e4e38a539cb6d542ea2cd
msgid "For example, :doc:`internationalization </topics/i18n/index>` middleware would need to distinguish caches by the ``Accept-language`` header."
msgstr ""

#: ../../ref/utils.txt:37
# 9d96abe567514854ad3e864894d443a3
msgid "This function patches the ``Cache-Control`` header by adding all keyword arguments to it. The transformation is as follows:"
msgstr ""

#: ../../ref/utils.txt:40
# efe1cb0d5a3f4559ae86bd527ba21768
msgid "All keyword parameter names are turned to lowercase, and underscores are converted to hyphens."
msgstr ""

#: ../../ref/utils.txt:42
# 96f7e5dee679432783d2295eca6e02d2
msgid "If the value of a parameter is ``True`` (exactly ``True``, not just a true value), only the parameter name is added to the header."
msgstr ""

#: ../../ref/utils.txt:44
# de50d7870ce84afd8a0e42d9a8c5e032
msgid "All other parameters are added with their value, after applying ``str()`` to it."
msgstr ""

#: ../../ref/utils.txt:49
# 41f90b35976346a497581d47fd3d8a27
msgid "Returns the max-age from the response Cache-Control header as an integer (or ``None`` if it wasn't found or wasn't an integer)."
msgstr ""

#: ../../ref/utils.txt:54
# 1c7fabf9e60a4d89a2553638e6846c2d
msgid "Adds some useful headers to the given ``HttpResponse`` object:"
msgstr ""

#: ../../ref/utils.txt:56
# a13afafa233d4ff285f621badb01a710
msgid "``ETag``"
msgstr ""

#: ../../ref/utils.txt:57
# 09032715ff3f4723805bc62c880277cc
msgid "``Last-Modified``"
msgstr ""

#: ../../ref/utils.txt:58
# 8b9ac2bd916540bf912d2d039c052f50
msgid "``Expires``"
msgstr ""

#: ../../ref/utils.txt:59
# 02f824ae67c844f4a0ac3c2a57879aa0
msgid "``Cache-Control``"
msgstr ""

#: ../../ref/utils.txt:61
# 52e947ce114e4753bd8ec096bfaef64b
msgid "Each header is only added if it isn't already set."
msgstr ""

#: ../../ref/utils.txt:63
# 79faed0f79ae45fc99c216784b0ca9b3
msgid "``cache_timeout`` is in seconds. The :setting:`CACHE_MIDDLEWARE_SECONDS` setting is used by default."
msgstr ""

#: ../../ref/utils.txt:68
# c1ef69ef17ff40e18db6453e27b4c24e
msgid "Adds headers to a response to indicate that a page should never be cached."
msgstr ""

#: ../../ref/utils.txt:72
# 7916f4bde8a04b739b00e96dd97713e0
msgid "Adds (or updates) the ``Vary`` header in the given ``HttpResponse`` object. ``newheaders`` is a list of header names that should be in ``Vary``. Existing headers in ``Vary`` aren't removed."
msgstr ""

#: ../../ref/utils.txt:78
# 5a9df86179664fd0bf1b3f42ccb2c708
msgid "Returns a cache key based on the request path. It can be used in the request phase because it pulls the list of headers to take into account from the global path registry and uses those to build a cache key to check against."
msgstr ""

#: ../../ref/utils.txt:83
# 3e7970a02f89482fad026deb842c192b
msgid "If there is no headerlist stored, the page needs to be rebuilt, so this function returns ``None``."
msgstr ""

#: ../../ref/utils.txt:88
# 8b77c2d10cb34f73bb00697bfb1a75bf
msgid "Learns what headers to take into account for some request path from the response object. It stores those headers in a global path registry so that later access to that path will know what headers to take into account without building the response object itself. The headers are named in the ``Vary`` header of the response, but we want to prevent response generation."
msgstr ""

#: ../../ref/utils.txt:95
# 1e5bf84bb1b844689a5217a4a2b4a52b
msgid "The list of headers to use for cache key generation is stored in the same cache as the pages themselves. If the cache ages some data out of the cache, this just means that we have to build the response once to get at the Vary header and so at the list of headers to use for the cache key."
msgstr ""

#: ../../ref/utils.txt:101
# c8c5bc60e50941889d16092243b10e60
msgid "``django.utils.datastructures``"
msgstr ""

#: ../../ref/utils.txt:108
# ec81895bc3c240bd93f96b3b8ac9c8de
msgid "The :class:`django.utils.datastructures.SortedDict` class is a dictionary that keeps its keys in the order in which they're inserted. ``SortedDict`` adds two additional methods to the standard Python ``dict`` class:"
msgstr ""

#: ../../ref/utils.txt:117
# 81419ad16da24d95a4398485ec262275
msgid "Inserts the key, value pair before the item with the given index."
msgstr ""

#: ../../ref/utils.txt:123
# 662865b18f884751bc3782d6e6764b9e
msgid "Returns the value of the item at the given zero-based index."
msgstr ""

#: ../../ref/utils.txt:126
# c7fff788f32547f48b8e613c9af29b19
msgid "Creating a new SortedDict"
msgstr ""

#: ../../ref/utils.txt:128
# 476ed8ca39134c02be7512647375e7fa
msgid "Creating a new ``SortedDict`` must be done in a way where ordering is guaranteed. For example::"
msgstr ""

#: ../../ref/utils.txt:133
# 6ef68ed9f8ef480fb0882b0232513ee8
msgid "will not work. Passing in a basic Python ``dict`` could produce unreliable results. Instead do::"
msgstr ""

#: ../../ref/utils.txt:139
# e448eb42610a49aea0ca2b92a7552886
msgid "``django.utils.dateparse``"
msgstr ""

#: ../../ref/utils.txt:146
# 235b22a2ae4f4f8aa01e7a348f72f4ad
msgid "The functions defined in this module share the following properties:"
msgstr ""

#: ../../ref/utils.txt:148
# 35669db91b1342a097b605a1ae18af23
msgid "They raise :exc:`ValueError` if their input is well formatted but isn't a valid date or time."
msgstr ""

#: ../../ref/utils.txt:150
# 75aab875a1a94f86a88472330af18766
msgid "They return ``None`` if it isn't well formatted at all."
msgstr ""

#: ../../ref/utils.txt:151
# b2bcf0c3618c475cab2701419c8beb99
msgid "They accept up to picosecond resolution in input, but they truncate it to microseconds, since that's what Python supports."
msgstr ""

#: ../../ref/utils.txt:156
# 8e5f622ec75f408f8552b19ee8518805
msgid "Parses a string and returns a :class:`datetime.date`."
msgstr ""

#: ../../ref/utils.txt:160
# 6c8a96ed63434f9c953af42e92b86b2a
msgid "Parses a string and returns a :class:`datetime.time`."
msgstr ""

#: ../../ref/utils.txt:162
# 05a33c779a844c1a9fccbddf609d6be6
msgid "UTC offsets aren't supported; if ``value`` describes one, the result is ``None``."
msgstr ""

#: ../../ref/utils.txt:167
# 0907d74778814959b14ab69a268ae1b3
msgid "Parses a string and returns a :class:`datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:169
# 1c0e06686d954126927398971185fa25
msgid "UTC offsets are supported; if ``value`` describes one, the result's ``tzinfo`` attribute is a :class:`~django.utils.tzinfo.FixedOffset` instance."
msgstr ""

#: ../../ref/utils.txt:174
# 421b80100e694a8bbf174ae3a368d4ee
msgid "``django.utils.decorators``"
msgstr ""

#: ../../ref/utils.txt:181
# 2b5959552a8b4669ac4936a9a6c71815
msgid "Converts a function decorator into a method decorator. See :ref:`decorating class based views<decorating-class-based-views>` for example usage."
msgstr ""

#: ../../ref/utils.txt:186
# 5ee38936786948a483e6f229062137fa
msgid "Given a middleware class, returns a view decorator. This lets you use middleware functionality on a per-view basis. The middleware is created with no params passed."
msgstr ""

#: ../../ref/utils.txt:192
# d8767246bcb84c17a5be7d88628f7db7
msgid "Like ``decorator_from_middleware``, but returns a function that accepts the arguments to be passed to the middleware_class. For example, the :func:`~django.views.decorators.cache.cache_page` decorator is created from the :class:`~django.middleware.cache.CacheMiddleware` like this::"
msgstr ""

#: ../../ref/utils.txt:205
# 3b6ad6226f77471098046998eda5b5ae
msgid "``django.utils.encoding``"
msgstr ""

#: ../../ref/utils.txt:212
# 1fc35769d2874a3382b56fea7c78c1d7
msgid "A class that derives ``__str__`` from ``__unicode__``."
msgstr ""

#: ../../ref/utils.txt:214
# c0ec2dd8a69246fb827b962e96365b13
msgid "On Python 2, ``__str__`` returns the output of ``__unicode__`` encoded as a UTF-8 bytestring. On Python 3, ``__str__`` returns the output of ``__unicode__``."
msgstr ""

#: ../../ref/utils.txt:218
# 3111ea18aa214e5baaa72b88e546a4e2
msgid "Useful as a mix-in. If you support Python 2 and 3 with a single code base, you can inherit this mix-in and just define ``__unicode__``."
msgstr ""

#: ../../ref/utils.txt:223
# 80ef88d1ea624fc182aa4e39d54a566c
msgid "A decorator that defines ``__unicode__`` and ``__str__`` methods under Python 2. Under Python 3 it does nothing."
msgstr ""

#: ../../ref/utils.txt:226
# 472594be1c7940d1bce01267e44cc43e
msgid "To support Python 2 and 3 with a single code base, define a ``__str__`` method returning text and apply this decorator to the class."
msgstr ""

#: ../../ref/utils.txt:233
# f293f6be0efb44efbe04a83c3bc0b5ff
msgid "Returns a text object representing ``s`` -- ``unicode`` on Python 2 and ``str`` on Python 3. Treats bytestrings using the ``encoding`` codec."
msgstr ""

#: ../../ref/utils.txt:236
#: ../../ref/utils.txt:257
#: ../../ref/utils.txt:271
#: ../../ref/utils.txt:281
# 627070439b91421dbecf8f156f1337cd
# 3c0b6c4d263b41dc9a981ebab54aa7b9
# e464c272ab0345f6ab902cfecc3c1291
# a736ca364e8f4183a0af5bbcf075f2c9
msgid "If ``strings_only`` is ``True``, don't convert (some) non-string-like objects."
msgstr ""

#: ../../ref/utils.txt:241
# 35334d15c8e94430aba11bdae6db93cd
msgid "Historical name of :func:`smart_text`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:245
# 5b890d3291574166b41dc56806cd87d0
msgid "Determine if the object instance is of a protected type."
msgstr ""

#: ../../ref/utils.txt:247
# 33f131d689a14c7e9c4465c275e948fe
msgid "Objects of protected types are preserved as-is when passed to ``force_text(strings_only=True)``."
msgstr ""

#: ../../ref/utils.txt:254
# 4caf83f429e04a829d08fa964a779c25
msgid "Similar to ``smart_text``, except that lazy instances are resolved to strings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:262
# 7d49e0453e6144daa56e3a02fa84ef5f
msgid "Historical name of :func:`force_text`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:268
# ddafd5cd7c9c4782832c60d84bdbc3c0
msgid "Returns a bytestring version of ``s``, encoded as specified in ``encoding``."
msgstr ""

#: ../../ref/utils.txt:278
# 89fba210123241fb883b3e223871211c
msgid "Similar to ``smart_bytes``, except that lazy instances are resolved to bytestrings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:286
# a5c60d32ee8f458fa9ff18dabd6f2044
msgid "Alias of :func:`smart_bytes` on Python 2 and :func:`smart_text` on Python 3. This function returns a :class:`str` or a lazy string."
msgstr ""

#: ../../ref/utils.txt:289
# 1017d6efc4214fc89abb1e6567eab75b
msgid "For instance, this is  suitable for writing to :attr:`sys.stdout` on Python 2 and 3."
msgstr ""

#: ../../ref/utils.txt:294
# 4cedad3435834f55a8baa8c9fe0a28b2
msgid "Alias of :func:`force_bytes` on Python 2 and :func:`force_text` on Python 3. This function always returns a :class:`str`."
msgstr ""

#: ../../ref/utils.txt:299
# 8cee99e99eea4ee98f53be0ab9f6adce
msgid "Convert an Internationalized Resource Identifier (IRI) portion to a URI portion that is suitable for inclusion in a URL."
msgstr ""

#: ../../ref/utils.txt:302
# 7151d9e4708d4eb3906b242fc4518f18
msgid "This is the algorithm from section 3.1 of :rfc:`3987#section-3.1`. However, since we are assuming input is either UTF-8 or unicode already, we can simplify things a little from the full method."
msgstr ""

#: ../../ref/utils.txt:306
# 5ade1d4fd47a4d0cbcb560714d0a8875
msgid "Returns an ASCII string containing the encoded result."
msgstr ""

#: ../../ref/utils.txt:309
# 01799de08d224b0bbaaad8e7c25f1531
msgid "``django.utils.feedgenerator``"
msgstr ""

#: ../../ref/utils.txt:331
# b406fa4aabd245a2ab4343b49d04e9f7
msgid "For simplifying the selection of a generator use ``feedgenerator.DefaultFeed`` which is currently ``Rss201rev2Feed``"
msgstr ""

#: ../../ref/utils.txt:334
# 93f6d0b1e3f74d96a504e756eaf2a90f
msgid "For definitions of the different versions of RSS, see: http://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss"
msgstr ""

#: ../../ref/utils.txt:339
# b86f1beecf3a42098d3657d216c90b8d
msgid "Creates a TagURI."
msgstr ""

#: ../../ref/utils.txt:341
# 8f7fe5e4ed024073ab343fdb70f99b4c
msgid "See http://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id"
msgstr ""

#: ../../ref/utils.txt:344
# 58905f09a48e4467b90e91b8e5414ad1
msgid "SyndicationFeed"
msgstr ""

#: ../../ref/utils.txt:348
# 9ff80e6bc3964585b74a034a328f317a
msgid "Base class for all syndication feeds. Subclasses should provide write()."
msgstr ""

#: ../../ref/utils.txt:352
# 8654f85a9034431dbd954c25d294a965
msgid "Initialize the feed with the given dictionary of metadata, which applies to the entire feed."
msgstr ""

#: ../../ref/utils.txt:355
# 6c62e757c2ed4873a88bed9ea3a80139
msgid "Any extra keyword arguments you pass to ``__init__`` will be stored in ``self.feed``."
msgstr ""

#: ../../ref/utils.txt:363
# 35982ff516a44742b75605ffe643052b
msgid "Adds an item to the feed. All args are expected to be Python ``unicode`` objects except ``pubdate``, which is a ``datetime.datetime`` object, and ``enclosure``, which is an instance of the ``Enclosure`` class."
msgstr ""

#: ../../ref/utils.txt:371
# 61a5d831648042778b3a37abbba6b4f7
msgid "Return extra attributes to place on the root (i.e. feed/channel) element. Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:376
# f11c865735eb40819b308e80f44d521c
msgid "Add elements in the root (i.e. feed/channel) element. Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:381
# 9878e8b8707540ea98bc6a8012a7faf0
msgid "Return extra attributes to place on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:386
# aed5c0d2818f4fd7aa56f81d534f4664
msgid "Add elements on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:390
# bc36adba9e364688abe01929798dc83e
msgid "Outputs the feed in the given encoding to ``outfile``, which is a file-like object. Subclasses should override this."
msgstr ""

#: ../../ref/utils.txt:395
# 13a0713dc82d433db66c89382e5cee88
msgid "Returns the feed in the given encoding as a string."
msgstr ""

#: ../../ref/utils.txt:399
# 98c5ac008442496d87ce9e6f8d01c983
msgid "Returns the latest item's ``pubdate``. If none of them have a ``pubdate``, this returns the current date/time."
msgstr ""

#: ../../ref/utils.txt:403
# 18680c289b8e4705a5d7674cae2570be
msgid "Enclosure"
msgstr ""

#: ../../ref/utils.txt:407
# cac5b5e6f7084937844a76edaf3c826c
msgid "Represents an RSS enclosure"
msgstr ""

#: ../../ref/utils.txt:410
# 3555793cb2264ddc9330b02647aa16ab
msgid "RssFeed"
msgstr ""

#: ../../ref/utils.txt:415
# faa82367ddff4944897a121585319e0f
msgid "Rss201rev2Feed"
msgstr ""

#: ../../ref/utils.txt:419
# f2fa7e9f60064a4ea71838f7b451e710
msgid "Spec: http://cyber.law.harvard.edu/rss/rss.html"
msgstr ""

#: ../../ref/utils.txt:422
# 7340ecce7c514377bc477e3513068278
msgid "RssUserland091Feed"
msgstr ""

#: ../../ref/utils.txt:426
# 72bef9c824ce447e8791f09b39e5b8a1
msgid "Spec: http://backend.userland.com/rss091"
msgstr ""

#: ../../ref/utils.txt:429
# bcde925df98b40ae97ff7684ae875c85
msgid "Atom1Feed"
msgstr ""

#: ../../ref/utils.txt:433
# 3de6894f491a4ece902bbb89f0874246
msgid "Spec: http://www.atomenabled.org/developers/syndication/atom-format-spec.php"
msgstr ""

#: ../../ref/utils.txt:436
# 2095a29200ab405fa53ecd54683c45f5
msgid "``django.utils.functional``"
msgstr ""

#: ../../ref/utils.txt:443
# 16f730f199234ee9aa78ca29795c6265
msgid "Django offers many utility functions (particularly in ``django.utils``) that take a string as their first argument and do something to that string. These functions are used by template filters as well as directly in other code."
msgstr ""

#: ../../ref/utils.txt:447
# 88c1cf139226417e965bc11d1fe19bec
msgid "If you write your own similar functions and deal with translations, you'll face the problem of what to do when the first argument is a lazy translation object. You don't want to convert it to a string immediately, because you might be using this function outside of a view (and hence the current thread's locale setting will not be correct)."
msgstr ""

#: ../../ref/utils.txt:453
# ccee757585d640b4a462cf5e6583edc0
msgid "For cases like this, use the ``django.utils.functional.allow_lazy()`` decorator. It modifies the function so that *if* it's called with a lazy translation as the first argument, the function evaluation is delayed until it needs to be converted to a string."
msgstr ""

#: ../../ref/utils.txt:467
# 9f1bc086cad146c0bdb12f78c3f4d8a3
msgid "The ``allow_lazy()`` decorator takes, in addition to the function to decorate, a number of extra arguments (``*args``) specifying the type(s) that the original function can return. Usually, it's enough to include ``unicode`` here and ensure that your function returns only Unicode strings."
msgstr ""

#: ../../ref/utils.txt:472
# 231767cef9484fb7b366329bf670e3ef
msgid "Using this decorator means you can write your function and assume that the input is a proper string, then add support for lazy translation objects at the end."
msgstr ""

#: ../../ref/utils.txt:477
# c349df4b5b4c418a8816d8b224d8f044
msgid "``django.utils.html``"
msgstr ""

#: ../../ref/utils.txt:482
# f4bcf406776a46779356534ddde55750
msgid "Usually you should build up HTML using Django's templates to make use of its autoescape mechanism, using the utilities in :mod:`django.utils.safestring` where appropriate. This module provides some additional low level utilitiesfor escaping HTML."
msgstr ""

#: ../../ref/utils.txt:489
# 8ef1b8db74d649e195e62fe177ff5a01
msgid "Returns the given text with ampersands, quotes and angle brackets encoded for use in HTML. The input is first passed through :func:`~django.utils.encoding.force_text` and the output has :func:`~django.utils.safestring.mark_safe` applied."
msgstr ""

#: ../../ref/utils.txt:496
# 694c93e1bdd44ef6bc51dd420704c551
msgid "Similar to ``escape()``, except that it doesn't operate on pre-escaped strings, so it will not double escape."
msgstr ""

#: ../../ref/utils.txt:501
# 76d240268caf4288a80693ffa1366d8a
msgid "This is similar to `str.format`_, except that it is appropriate for building up HTML fragments. All args and kwargs are passed through :func:`conditional_escape` before being passed to ``str.format``."
msgstr ""

#: ../../ref/utils.txt:505
# dd99b04721eb437dac9aaf4e71ce1b8e
msgid "For the case of building up small HTML fragments, this function is to be preferred over string interpolation using ``%`` or ``str.format`` directly, because it applies escaping to all arguments - just like the Template system applies escaping by default."
msgstr ""

#: ../../ref/utils.txt:510
# 13ce6429b4b84df8b400614becf40a9b
msgid "So, instead of writing:"
msgstr ""

#: ../../ref/utils.txt:519
# a02e5ce7dada40428c33fd5bb58e859a
msgid "you should instead use:"
msgstr ""

#: ../../ref/utils.txt:526
# 38e180a2160f40c8849c0f5c89f24943
msgid "This has the advantage that you don't need to apply :func:`escape` to each argument and risk a bug and an XSS vulnerability if you forget one."
msgstr ""

#: ../../ref/utils.txt:529
# eefc36803a75471dab4a23722ccaa81e
msgid "Note that although this function uses ``str.format`` to do the interpolation, some of the formatting options provided by `str.format`_ (e.g. number formatting) will not work, since all arguments are passed through :func:`conditional_escape` which (ultimately) calls :func:`~django.utils.encoding.force_text` on the values."
msgstr ""

#: ../../ref/utils.txt:537
# e30d2c68d11e411d9eb8f168bfee0142
msgid "Removes anything that looks like an html tag from the string, that is anything contained within ``<>``."
msgstr ""

#: ../../ref/utils.txt:544
# 932230bff13d49de842f6e80cc413187
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the return value will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/utils.txt:549
# 4f1683ea2b2143638d52a419d412b552
msgid "Removes a list of [X]HTML tag names from the output."
msgstr ""

#: ../../ref/utils.txt:555
# 423d66d7c59b4ac3837cfc981ec7c795
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` the return value will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/utils.txt:560
# 3aecbce93421479884960e193e675950
msgid "If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` the return value will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/utils.txt:566
# fca1289a61154b00aa2d33156488fc12
msgid "``django.utils.http``"
msgstr ""

#: ../../ref/utils.txt:573
# a9e978de1a2048b9a7a1525cc1d103e8
msgid "A version of Python's ``urllib.quote()`` function that can operate on unicode strings. The url is first UTF-8 encoded before quoting. The returned string can safely be used as part of an argument to a subsequent ``iri_to_uri()`` call without double-quoting occurring. Employs lazy execution."
msgstr ""

#: ../../ref/utils.txt:581
# 5e33e68400a4455ba95dac5539104d13
msgid "A version of Python's urllib.quote_plus() function that can operate on unicode strings. The url is first UTF-8 encoded before quoting. The returned string can safely be used as part of an argument to a subsequent ``iri_to_uri()`` call without double-quoting occurring. Employs lazy execution."
msgstr ""

#: ../../ref/utils.txt:589
# 0c3b818a6b5c4dc8b89c744ae0a79a86
msgid "A version of Python's urllib.urlencode() function that can operate on unicode strings. The parameters are first case to UTF-8 encoded strings and then encoded as per normal."
msgstr ""

#: ../../ref/utils.txt:595
# f3b4d0be201e44a8b1ba7f18771cb5f3
msgid "Formats the time to ensure compatibility with Netscape's cookie standard."
msgstr ""

#: ../../ref/utils.txt:597
#: ../../ref/utils.txt:608
# ca9c094dbd524ce19e7b927ce2a43fe8
# e54d03dd7f324e34b4c6e1b781a43285
msgid "Accepts a floating point number expressed in seconds since the epoch in UTC--such as that outputted by ``time.time()``. If set to ``None``, defaults to the current time."
msgstr ""

#: ../../ref/utils.txt:601
# 65abde4ff75f444eb355c2f6c82fc2f2
msgid "Outputs a string in the format ``Wdy, DD-Mon-YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:605
# 56c586d36e6d464c9b6bf1bacaed924d
msgid "Formats the time to match the :rfc:`1123` date format as specified by HTTP :rfc:`2616#section-3.3.1` section 3.3.1."
msgstr ""

#: ../../ref/utils.txt:612
# c4a9e92b47c34badb09f760d01b0fbb9
msgid "Outputs a string in the format ``Wdy, DD Mon YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:616
# 3eb512c29cba4f97914c2472fac122e2
msgid "Converts a base 36 string to an integer. On Python 2 the output is guaranteed to be an :class:`int` and not a :class:`long`."
msgstr ""

#: ../../ref/utils.txt:621
# 45197ec036d740ff96696960c46e168c
msgid "Converts a positive integer to a base 36 string. On Python 2 ``i`` must be smaller than :attr:`sys.maxint`."
msgstr ""

#: ../../ref/utils.txt:625
# 2014a8f3b9a54bd0b5bdcb8d0a5059ad
msgid "``django.utils.safestring``"
msgstr ""

#: ../../ref/utils.txt:630
# 5540f446494046a6a227d92ce5ece3c7
msgid "Functions and classes for working with \"safe strings\": strings that can be displayed safely without further escaping in HTML. Marking something as a \"safe string\" means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. '<') into the appropriate entities."
msgstr ""

#: ../../ref/utils.txt:640
# 6009c7faea0b485e93d80b47053df633
msgid "A :class:`bytes` subclass that has been specifically marked as \"safe\" (requires no further escaping) for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:645
# 310de84fdecd4672a7b066a4dfef7bfb
msgid "A :class:`str` subclass that has been specifically marked as \"safe\" (requires no further escaping) for HTML output purposes. This is :class:`SafeBytes` on Python 2 and :class:`SafeText` on Python 3."
msgstr ""

#: ../../ref/utils.txt:653
# 5f9efce2577844919b5bf9103f7f112a
msgid "A :class:`str` (in Python 3) or :class:`unicode` (in Python 2) subclass that has been specifically marked as \"safe\" for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:658
# f21fcd734c624f8f95c6a63f777e31ab
msgid "Historical name of :class:`SafeText`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:662
# 1982cb290b03440baa74976311c689db
msgid "Explicitly mark a string as safe for (HTML) output purposes. The returned object can be used everywhere a string or unicode object is appropriate."
msgstr ""

#: ../../ref/utils.txt:665
# f4847e276beb4154a61f0849c849a67b
msgid "Can be called multiple times on a single string."
msgstr ""

#: ../../ref/utils.txt:669
# fed5223b1cfb43b786d3ab48cca89811
msgid "Explicitly mark a string as requiring HTML escaping upon output. Has no effect on ``SafeData`` subclasses."
msgstr ""

#: ../../ref/utils.txt:672
# 9227ea035f5b455f8d59076887ba547a
msgid "Can be called multiple times on a single string (the resulting escaping is only applied once)."
msgstr ""

#: ../../ref/utils.txt:676
# 221bea4d4b8a476dbb91c255bb325817
msgid "``django.utils.text``"
msgstr ""

#: ../../ref/utils.txt:694
# 82cd167a088c4f27bf3c12f6122628df
msgid "``django.utils.translation``"
msgstr ""

#: ../../ref/utils.txt:699
# fc5a56c782244c35acd38ae36b2045ea
msgid "For a complete discussion on the usage of the following see the :doc:`translation documentation </topics/i18n/translation>`."
msgstr ""

#: ../../ref/utils.txt:704
# d55c808ccb0347fbac34153e05121aa0
msgid "Translates ``message`` and returns it in a UTF-8 bytestring"
msgstr ""

#: ../../ref/utils.txt:708
# 89d141fe5c524942a45aabcf6d6fad6a
msgid "Translates ``message`` and returns it in a unicode string"
msgstr ""

#: ../../ref/utils.txt:712
# c1350828c4ff459c8a4fcd205dbeacfe
msgid "Translates ``message`` given the ``context`` and returns it in a unicode string."
msgstr ""

#: ../../ref/utils.txt:715
# 23b4b7c3d25a4cc4a26e11e691c9d9a3
msgid "For more information, see :ref:`contextual-markers`."
msgstr ""

#: ../../ref/utils.txt:721
#: ../../ref/utils.txt:752
# 62d4ce09880c435d9108744da79393cb
# 499f119f2e8249159d8157f1fa2e2af8
msgid "Same as the non-lazy versions above, but using lazy execution."
msgstr ""

#: ../../ref/utils.txt:723
#: ../../ref/utils.txt:754
# 542435216de84313aab8ebbc58577e4a
# 4e9df2135d4f48e983e5d087ff6b17e7
msgid "See :ref:`lazy translations documentation <lazy-translations>`."
msgstr ""

#: ../../ref/utils.txt:728
# 2ce715257f104cfd86822ebae63d4f6d
msgid "Marks strings for translation but doesn't translate them now. This can be used to store strings in global variables that should stay in the base language (because they might be used externally) and will be translated later."
msgstr ""

#: ../../ref/utils.txt:735
# 55cd7b9198cc4566ab327a2f9c6296d9
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` in a UTF-8 bytestring."
msgstr ""

#: ../../ref/utils.txt:740
# 1b597d6db4fe46a5af5f38671095c990
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:745
# 2d8623903fdd4d1a9161682c6fd1f1ed
msgid "Translates ``singular`` and ``plural`` and returns the appropriate string based on ``number`` and the ``context`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:758
# 6765ab1707264e789594b37b5fbc61ea
msgid "Lazy variant of string concatenation, needed for translations that are constructed from multiple parts."
msgstr ""

#: ../../ref/utils.txt:763
# a1b2d02b855c4c6eb65eedc7a88947ca
msgid "Fetches the translation object for a given language and installs it as the current translation object for the current thread."
msgstr ""

#: ../../ref/utils.txt:768
# 3947da2b4c854f76b94af406b6e70dec
msgid "De-installs the currently active translation object so that further _ calls will resolve against the default translation object, again."
msgstr ""

#: ../../ref/utils.txt:773
# 9233f87640e645f293ab1ad2826d32a3
msgid "Makes the active translation object a NullTranslations() instance. This is useful when we want delayed translations to appear as the original string for some reason."
msgstr ""

#: ../../ref/utils.txt:781
# 1372312e1d1042b59119d193f1190edf
msgid "A Python context manager that uses :func:`django.utils.translation.activate` to fetch the translation object for a given language, installing it as the translation object for the current thread and reinstall the previous active language on exit. Optionally it can simply deinstall the temporary translation on exit with :func:`django.utils.translation.deactivate` if the deactivate argument is True. If you pass None as the language argument, a NullTranslations() instance is installed while the context is active."
msgstr ""

#: ../../ref/utils.txt:792
# 0ed04bc68ac54b4db53f98c49e9f6191
msgid "Returns the currently selected language code."
msgstr ""

#: ../../ref/utils.txt:796
# 231964efc1504a3ab163f0bd2077eb51
msgid "Returns selected language's BiDi layout:"
msgstr ""

#: ../../ref/utils.txt:798
# ad61b9fa780b42e294b151dbf6f1d639
msgid "``False`` = left-to-right layout"
msgstr ""

#: ../../ref/utils.txt:799
# ac9c497bfe5b43948e6813960ef050a6
msgid "``True`` = right-to-left layout"
msgstr ""

#: ../../ref/utils.txt:805
# b77a4c3f68c3454782ab8c045726c260
msgid "Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language."
msgstr ""

#: ../../ref/utils.txt:810
# 0a5e3e73e929420cbef8df0430ae44c8
msgid "If ``check_path`` is ``True``, the function first checks the requested URL for whether its path begins with a language code listed in the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/utils.txt:816
# 6c8f3f419534491ea871fe8c8dc9d562
msgid "Turns a language name (en-us) into a locale name (en_US)."
msgstr ""

#: ../../ref/utils.txt:820
# b70e37340ca34623a3ace2e0762d4caa
msgid "Turns a Django template into something that is understood by xgettext. It does so by translating the Django translation tags into standard gettext function invocations."
msgstr ""

#: ../../ref/utils.txt:827
# 5745457eeab740688b771dc4a015b1db
msgid "``django.utils.timezone``"
msgstr ""

#: ../../ref/utils.txt:836
# 828d340d37cd40729c9056a8006ff36e
msgid ":class:`~datetime.tzinfo` instance that represents UTC."
msgstr ""

#: ../../ref/utils.txt:840
# 729f5e9d21ac416fb306746cf5503942
msgid "Returns a :class:`~datetime.tzinfo` instance that represents the :ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:845
# db515e02865a4bcdaccfb06f9cba5b16
msgid "Returns the name of the :ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:850
# b293f9d4280943a8ad44a4d252ebbcc7
msgid "Returns a :class:`~datetime.tzinfo` instance that represents the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:855
# 8d12df5d758447508e0677a12bb63190
msgid "Returns the name of the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:860
# ce7336b6273f400ba4a6888c25f667da
msgid "Sets the :ref:`current time zone <default-current-time-zone>`. The ``timezone`` argument must be an instance of a :class:`~datetime.tzinfo` subclass or, if pytz_ is available, a time zone name."
msgstr ""

#: ../../ref/utils.txt:866
# 78843886ee584d25984049feee2448f3
msgid "Unsets the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:870
# e5a655bbeeef4036b92d7b86a86748d8
msgid "This is a Python context manager that sets the :ref:`current time zone <default-current-time-zone>` on entry with :func:`activate()`, and restores the previously active time zone on exit. If the ``timezone`` argument is ``None``, the :ref:`current time zone <default-current-time-zone>` is unset on entry with :func:`deactivate()` instead."
msgstr ""

#: ../../ref/utils.txt:880
# 7bf3d922944943469a9ef209f949b97a
msgid "Converts an aware :class:`~datetime.datetime` to a different time zone, by default the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:883
# 09560a03777b421982d70b95eb149aa5
msgid "This function doesn't work on naive datetimes; use :func:`make_aware` instead."
msgstr ""

#: ../../ref/utils.txt:888
# 07bbaa4d3161460d972196fb19e6ce7c
msgid "Returns an aware or naive :class:`~datetime.datetime` that represents the current point in time when :setting:`USE_TZ` is ``True`` or ``False`` respectively."
msgstr ""

#: ../../ref/utils.txt:894
# a0caf25ada07430e9dbd796054f933e7
msgid "Returns ``True`` if ``value`` is aware, ``False`` if it is naive. This function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:899
# 31ae8de34bf040d2a4b6323a84b23765
msgid "Returns ``True`` if ``value`` is naive, ``False`` if it is aware. This function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:904
# cb20e9fda7aa490fa9d1869ceda8ef5d
msgid "Returns an aware :class:`~datetime.datetime` that represents the same point in time as ``value`` in ``timezone``, ``value`` being a naive :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:908
# b798ba9018ff424095f66d59e540dad6
msgid "This function can raise an exception if ``value`` doesn't exist or is ambiguous because of DST transitions."
msgstr ""

#: ../../ref/utils.txt:913
# 2b4f8053ea4d496ca1c71d6829201466
msgid "Returns an naive :class:`~datetime.datetime` that represents in ``timezone``  the same point in time as ``value``, ``value`` being an aware :class:`~datetime.datetime`"
msgstr ""

#: ../../ref/utils.txt:920
# 30dc54cd3c28488a946f09297afec26c
msgid "``django.utils.tzinfo``"
msgstr ""

#: ../../ref/utils.txt:927
# 9a83db7c7b894206a44e77329fe975d7
msgid "Fixed offset in minutes east from UTC."
msgstr ""

#: ../../ref/utils.txt:931
# c78679865bee456cb6b3674dec715486
msgid "Proxy timezone information from time module."
msgstr ""

#: ../../ref/validators.txt:3
# 7ae38c736ecc4c329952c3c8b892740d
msgid "Validators"
msgstr ""

#: ../../ref/validators.txt:9
# f9d52e93a8d8428da3e76f5b26e031db
msgid "Writing validators"
msgstr ""

#: ../../ref/validators.txt:11
# 7e3aad77db2b47e8a7c7bb4cb45eafb7
msgid "A validator is a callable that takes a value and raises a :exc:`~django.core.exceptions.ValidationError` if it doesn't meet some criteria. Validators can be useful for re-using validation logic between different types of fields."
msgstr ""

#: ../../ref/validators.txt:16
# 3e2ad50834c54a26a3c13725e1cd3d10
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""

#: ../../ref/validators.txt:24
# b354bae8f824477796399a5e0a900b14
msgid "You can add this to a model field via the field's :attr:`~django.db.models.Field.validators` argument::"
msgstr ""

#: ../../ref/validators.txt:32
# a1b5b9e0822d48b6986cd240e27c59f7
msgid "Because values are converted to Python before validators are run, you can even use the same validator with forms::"
msgstr ""

#: ../../ref/validators.txt:41
# 990999e9450c4a918eb06a49b24ceea4
msgid "How validators are run"
msgstr ""

#: ../../ref/validators.txt:43
# f6c6d50688cc40b5a19f31ef9b172fcb
msgid "See the :doc:`form validation </ref/forms/validation>` for more information on how validators are run in forms, and :ref:`Validating objects <validating-objects>` for how they're run in models. Note that validators will not be run automatically when you save a model, but if you are using a :class:`~django.forms.ModelForm`, it will run your validators on any fields that are included in your form. See the :doc:`ModelForm documentation </topics/forms/modelforms>` for information on how model validation interacts with forms."
msgstr ""

#: ../../ref/validators.txt:53
# f3b02dd4b2ea4ae1883f469b59966943
msgid "Built-in validators"
msgstr ""

#: ../../ref/validators.txt:55
# 89347d0d3f394089bd45dd64b41bc753
msgid "The :mod:`django.core.validators` module contains a collection of callable validators for use with model and form fields. They're used internally but are available for use with your own fields, too. They can be used in addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""

#: ../../ref/validators.txt:61
# 9f18dcb6c5e2482780d6494a74956b15
msgid "``RegexValidator``"
msgstr ""

#: ../../ref/validators.txt:71
# 642baa4347ec48d89abed288cee789fc
msgid "The regular expression pattern to search for the provided ``value``, or a pre-compiled regular expression. Raises a :exc:`~django.core.exceptions.ValidationError` with :attr:`message` and :attr:`code` if no match is found. By default, matches any string (including an empty string)."
msgstr ""

#: ../../ref/validators.txt:79
# cf7507eb2abc41c2825ecec189bb755a
msgid "The error message used by :exc:`~django.core.exceptions.ValidationError` if validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""

#: ../../ref/validators.txt:85
# aff332d87ea747eaa8341a1060c58c8c
msgid "The error code used by :exc:`~django.core.exceptions.ValidationError` if validation fails. Defaults to ``\"invalid\"``."
msgstr ""

#: ../../ref/validators.txt:89
# dde2971941b44be7bc1e82ec6244fff9
msgid "``URLValidator``"
msgstr ""

#: ../../ref/validators.txt:92
# 634964c97e4b4ffe88515f96b253c3ad
msgid "A :class:`RegexValidator` that ensures a value looks like a URL, and raises an error code of ``'invalid'`` if it doesn't."
msgstr ""

#: ../../ref/validators.txt:96
# 02cd5c818c2847d2a60b96beed488c54
msgid "``validate_email``"
msgstr ""

#: ../../ref/validators.txt:99
# eae4510cff734afb841bd24376a06469
msgid "A :class:`RegexValidator` instance that ensures a value looks like an email address."
msgstr ""

#: ../../ref/validators.txt:103
# 8215b270aca246669f13c4b98d6c58fc
msgid "``validate_slug``"
msgstr ""

#: ../../ref/validators.txt:106
# 11fd4febb0ab4f80a1587cd4a187a19c
msgid "A :class:`RegexValidator` instance that ensures a value consists of only letters, numbers, underscores or hyphens."
msgstr ""

#: ../../ref/validators.txt:110
# 87ef3a6cee6543428445a3fc0580dd57
msgid "``validate_ipv4_address``"
msgstr ""

#: ../../ref/validators.txt:113
# 210602ae27e142f49e29d574a0b6c843
msgid "A :class:`RegexValidator` instance that ensures a value looks like an IPv4 address."
msgstr ""

#: ../../ref/validators.txt:117
# 41a8c4b1304c4a0db99006086bd49d14
msgid "``validate_ipv6_address``"
msgstr ""

#: ../../ref/validators.txt:122
# 2f1beab7d34347a2b77981863d2d3b4e
msgid "Uses :mod:`django.utils.ipv6` to check the validity of an IPv6 address."
msgstr ""

#: ../../ref/validators.txt:125
# 4a840b5cf6d44fcf882e0cb3ae4904e5
msgid "``validate_ipv46_address``"
msgstr ""

#: ../../ref/validators.txt:130
# 6e8b088a68404415ba365cc83544af2f
msgid "Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure a value is either a valid IPv4 or IPv6 address."
msgstr ""

#: ../../ref/validators.txt:134
# 863ed5ba236a40d9ab8432fbca5b45cb
msgid "``validate_comma_separated_integer_list``"
msgstr ""

#: ../../ref/validators.txt:137
# 259cf9b3415147999b25d056bff849b8
msgid "A :class:`RegexValidator` instance that ensures a value is a comma-separated list of integers."
msgstr ""

#: ../../ref/validators.txt:141
# e5b1222b28e942d78fc9966281034612
msgid "``MaxValueValidator``"
msgstr ""

#: ../../ref/validators.txt:144
# de4ed6632e544f68a0385fda03a6cb09
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""

#: ../../ref/validators.txt:148
# a76508d4b65945ea93798ec596c66578
msgid "``MinValueValidator``"
msgstr ""

#: ../../ref/validators.txt:151
# 5195da58b0984518bb2eb87b8bd5b75b
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""

#: ../../ref/validators.txt:155
# bd5a97dad3564f26bbbc1d3de0157668
msgid "``MaxLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:158
# f0e3a3e649c648b78c98390ee628a7d1
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""

#: ../../ref/validators.txt:162
# 753c4084ccb749b6aaf5cb32e3995cc6
msgid "``MinLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:165
# 069ad5ba470a4ef98d88b98e533bd158
msgid "Raises a :exc:`~django.core.exceptions.ValidationError` with a code of ``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""

