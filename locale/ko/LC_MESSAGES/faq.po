# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../faq/admin.txt:2
# a22cbb352b0f4574964b9e411dcf5f1b
msgid "FAQ: The admin"
msgstr ""

#: ../../faq/admin.txt:5
# c1c9fd77e06e41e6b63bf23ea9d15eb8
msgid "I can't log in. When I enter a valid username and password, it just brings up the login page again, with no error messages."
msgstr ""

#: ../../faq/admin.txt:7
# b9fa0eb987cd48c8b496778b894b919c
msgid "The login cookie isn't being set correctly, because the domain of the cookie sent out by Django doesn't match the domain in your browser. Try these two things:"
msgstr ""

#: ../../faq/admin.txt:11
# af469081340242a58d96274cc878dee3
msgid "Set the :setting:`SESSION_COOKIE_DOMAIN` setting in your admin config file to match your domain. For example, if you're going to \"http://www.example.com/admin/\" in your browser, in \"myproject.settings\" you should set :setting:`SESSION_COOKIE_DOMAIN` = 'www.example.com'."
msgstr ""

#: ../../faq/admin.txt:16
# 7705f50c13cb4694b11629974c8bcae2
msgid "Some browsers (Firefox?) don't like to accept cookies from domains that don't have dots in them. If you're running the admin site on \"localhost\" or another domain that doesn't have a dot in it, try going to \"localhost.localdomain\" or \"127.0.0.1\". And set :setting:`SESSION_COOKIE_DOMAIN` accordingly."
msgstr ""

#: ../../faq/admin.txt:23
# 2173b1f4422941a89841d7c3e534dab6
msgid "I can't log in. When I enter a valid username and password, it brings up the login page again, with a \"Please enter a correct username and password\" error."
msgstr ""

#: ../../faq/admin.txt:25
# f13d75a2d68b47bcb98cec2e2d9c3cda
msgid "If you're sure your username and password are correct, make sure your user account has :attr:`~django.contrib.auth.models.User.is_active` and :attr:`~django.contrib.auth.models.User.is_staff` set to True. The admin site only allows access to users with those two fields both set to True."
msgstr ""

#: ../../faq/admin.txt:31
# d06999120cc146c1b747844affa6141d
msgid "How can I prevent the cache middleware from caching the admin site?"
msgstr ""

#: ../../faq/admin.txt:33
# a8ddbd43fe36468eb9eaa5c99a3be989
msgid "Set the :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting to ``True``. See the :doc:`cache documentation </topics/cache>` for more information."
msgstr ""

#: ../../faq/admin.txt:37
# 97a70f2bc57d485cb4015cb39a1573f3
msgid "How do I automatically set a field's value to the user who last edited the object in the admin?"
msgstr ""

#: ../../faq/admin.txt:39
# 6f0ef9f91a4444218c9c23c41cfbd6cf
msgid "The :class:`~django.contrib.admin.ModelAdmin` class provides customization hooks that allow you to transform an object as it saved, using details from the request. By extracting the current user from the request, and customizing the :meth:`~django.contrib.admin.ModelAdmin.save_model` hook, you can update an object to reflect the user that edited it. See :ref:`the documentation on ModelAdmin methods <model-admin-methods>` for an example."
msgstr ""

#: ../../faq/admin.txt:47
# d3a112caca9e440c989224a9c35371ee
msgid "How do I limit admin access so that objects can only be edited by the users who created them?"
msgstr ""

#: ../../faq/admin.txt:49
# 12f0dfb480e54057b50cf5dcd9c4772b
msgid "The :class:`~django.contrib.admin.ModelAdmin` class also provides customization hooks that allow you to control the visibility and editability of objects in the admin. Using the same trick of extracting the user from the request, the :meth:`~django.contrib.admin.ModelAdmin.queryset` and :meth:`~django.contrib.admin.ModelAdmin.has_change_permission` can be used to control the visibility and editability of objects in the admin."
msgstr ""

#: ../../faq/admin.txt:57
# 1516d5b3f9c1489bab255db085699081
msgid "My admin-site CSS and images showed up fine using the development server, but they're not displaying when using mod_wsgi."
msgstr ""

#: ../../faq/admin.txt:59
# 0581e28084a24335906d1512bd4eaaa0
msgid "See :ref:`serving the admin files <serving-the-admin-files>` in the \"How to use Django with mod_wsgi\" documentation."
msgstr ""

#: ../../faq/admin.txt:63
# 2d1a2a51f4f1432a8787b781e1ee4e4b
msgid "My \"list_filter\" contains a ManyToManyField, but the filter doesn't display."
msgstr ""

#: ../../faq/admin.txt:65
# 03fc79d5ba5348e886d1a2217540c159
msgid "Django won't bother displaying the filter for a ``ManyToManyField`` if there are fewer than two related objects."
msgstr ""

#: ../../faq/admin.txt:68
# 396db3bbe36741af81bfca6d132cc6f7
msgid "For example, if your :attr:`~django.contrib.admin.ModelAdmin.list_filter` includes :doc:`sites </ref/contrib/sites>`, and there's only one site in your database, it won't display a \"Site\" filter. In that case, filtering by site would be meaningless."
msgstr ""

#: ../../faq/admin.txt:74
# 2d5d277fb3714e38bc605a19a1ea6e82
msgid "Some objects aren't appearing in the admin."
msgstr ""

#: ../../faq/admin.txt:76
# 240d3bd6888842e38625b91d39888609
msgid "Inconsistent row counts may be caused by missing foreign key values or a foreign key field incorrectly set to :attr:`null=False <django.db.models.Field.null>`. If you have a record with a :class:`~django.db.models.ForeignKey` pointing to a non-existent object and that foreign key is included is :attr:`~django.contrib.admin.ModelAdmin.list_display`, the record will not be shown in the admin changelist because the Django model is declaring an integrity constraint that is not implemented at the database level."
msgstr ""

#: ../../faq/admin.txt:86
# 1a7c0c3709994d85998fe51ab2d417cf
msgid "How can I customize the functionality of the admin interface?"
msgstr ""

#: ../../faq/admin.txt:88
# 00b5fa8b08e842d3817911cdf413b5fd
msgid "You've got several options. If you want to piggyback on top of an add/change form that Django automatically generates, you can attach arbitrary JavaScript modules to the page via the model's class Admin :ref:`js parameter <modeladmin-media-definitions>`. That parameter is a list of URLs, as strings, pointing to JavaScript modules that will be included within the admin form via a ``<script>`` tag."
msgstr ""

#: ../../faq/admin.txt:95
# c8b8bf2621814c47a88daa04d9d90b32
msgid "If you want more flexibility than simply tweaking the auto-generated forms, feel free to write custom views for the admin. The admin is powered by Django itself, and you can write custom views that hook into the authentication system, check permissions and do whatever else they need to do."
msgstr ""

#: ../../faq/admin.txt:100
# 2e6371cef8aa4800b42558192f3bb2d0
msgid "If you want to customize the look-and-feel of the admin interface, read the next question."
msgstr ""

#: ../../faq/admin.txt:104
# 9377648065af47818d591c38fcf4c07f
msgid "The dynamically-generated admin site is ugly! How can I change it?"
msgstr ""

#: ../../faq/admin.txt:106
# 83d490128f494a4895e38a17a84371d8
msgid "We like it, but if you don't agree, you can modify the admin site's presentation by editing the CSS stylesheet and/or associated image files. The site is built using semantic HTML and plenty of CSS hooks, so any changes you'd like to make should be possible by editing the stylesheet."
msgstr ""

#: ../../faq/admin.txt:112
# 310bb1da9684472ba74aefb888f405fb
msgid "What browsers are supported for using the admin?"
msgstr ""

#: ../../faq/admin.txt:114
# f0180e27a7c44e3ca9738e89b273ba7f
msgid "The admin provides a fully-functional experience to `YUI's A-grade`_ browsers, with the notable exception of IE6, which is not supported."
msgstr ""

#: ../../faq/admin.txt:117
# 02dfdbde588746a7967e4cabb9529166
msgid "There *may* be minor stylistic differences between supported browsersâ€”for example, some browsers may not support rounded corners. These are considered acceptable variations in rendering."
msgstr ""

#: ../../faq/contributing.txt:2
# a7bb4438699141a08206ee9bbe2b9a70
msgid "FAQ: Contributing code"
msgstr ""

#: ../../faq/contributing.txt:5
# d9b4fda5803141dba352e9917d8aef80
msgid "How can I get started contributing code to Django?"
msgstr ""

#: ../../faq/contributing.txt:7
# a12864a516564256b8dc69905c737c31
msgid "Thanks for asking! We've written an entire document devoted to this question. It's titled :doc:`Contributing to Django </internals/contributing/index>`."
msgstr ""

#: ../../faq/contributing.txt:11
# 55641ddbb56843a083bdbf91be6d9fb8
msgid "I submitted a bug fix in the ticket system several weeks ago. Why are you ignoring my patch?"
msgstr ""

#: ../../faq/contributing.txt:13
# 0efcb37f3f894e03a11fa550da658a10
msgid "Don't worry: We're not ignoring you!"
msgstr ""

#: ../../faq/contributing.txt:15
# 4271f9f040d5483f9600ad15eb293f2c
msgid "It's important to understand there is a difference between \"a ticket is being ignored\" and \"a ticket has not been attended to yet.\" Django's ticket system contains hundreds of open tickets, of various degrees of impact on end-user functionality, and Django's developers have to review and prioritize."
msgstr ""

#: ../../faq/contributing.txt:20
# 5dc4083fb3b44bd2a5156702943feb97
msgid "On top of that: the people who work on Django are all volunteers. As a result, the amount of time that we have to work on the framework is limited and will vary from week to week depending on our spare time. If we're busy, we may not be able to spend as much time on Django as we might want."
msgstr ""

#: ../../faq/contributing.txt:25
# 01e7208eedae4c20aefdab05e1a27877
msgid "The best way to make sure tickets do not get hung up on the way to checkin is to make it dead easy, even for someone who may not be intimately familiar with that area of the code, to understand the problem and verify the fix:"
msgstr ""

#: ../../faq/contributing.txt:29
# 2041e7bdb3a64bb7b51b1df88a3a411c
msgid "Are there clear instructions on how to reproduce the bug? If this touches a dependency (such as PIL), a contrib module, or a specific database, are those instructions clear enough even for someone not familiar with it?"
msgstr ""

#: ../../faq/contributing.txt:34
# d1cb04f38f4b4db4938935b851c3a9c8
msgid "If there are several patches attached to the ticket, is it clear what each one does, which ones can be ignored and which matter?"
msgstr ""

#: ../../faq/contributing.txt:37
# 0cab81c95a40400cb869de4f44c4082f
msgid "Does the patch include a unit test? If not, is there a very clear explanation why not? A test expresses succinctly what the problem is, and shows that the patch actually fixes it."
msgstr ""

#: ../../faq/contributing.txt:41
# 190d7f613ef54b61bfbe7123098cef36
msgid "If your patch stands no chance of inclusion in Django, we won't ignore it -- we'll just close the ticket. So if your ticket is still open, it doesn't mean we're ignoring you; it just means we haven't had time to look at it yet."
msgstr ""

#: ../../faq/contributing.txt:46
# 4e378db4a7e44a12a25be22a8c7c8dee
msgid "When and how might I remind the core team of a patch I care about?"
msgstr ""

#: ../../faq/contributing.txt:48
# b8d0d4d6bd244e2aa21ec03ff0367651
msgid "A polite, well-timed message to the mailing list is one way to get attention. To determine the right time, you need to keep an eye on the schedule. If you post your message when the core developers are trying to hit a feature deadline or manage a planning phase, you're not going to get the sort of attention you require. However, if you draw attention to a ticket when the core developers are paying particular attention to bugs -- just before a bug fixing sprint, or in the lead up to a beta release for example -- you're much more likely to get a productive response."
msgstr ""

#: ../../faq/contributing.txt:57
# 3e4930594bf44387895bca2f6d5c92d6
msgid "Gentle IRC reminders can also work -- again, strategically timed if possible. During a bug sprint would be a very good time, for example."
msgstr ""

#: ../../faq/contributing.txt:60
# 27093313324f4e93b3a2fb55c1592d88
msgid "Another way to get traction is to pull several related tickets together. When the core developers sit down to fix a bug in an area they haven't touched for a while, it can take a few minutes to remember all the fine details of how that area of code works. If you collect several minor bug fixes together into a similarly themed group, you make an attractive target, as the cost of coming up to speed on an area of code can be spread over multiple tickets."
msgstr ""

#: ../../faq/contributing.txt:67
# 30f8428445d94dfda736d30b861caf04
msgid "Please refrain from emailing core developers personally, or repeatedly raising the same issue over and over. This sort of behavior will not gain you any additional attention -- certainly not the attention that you need in order to get your pet bug addressed."
msgstr ""

#: ../../faq/contributing.txt:73
# 06d883192d83423b8356cdfdda1914ea
msgid "But I've reminded you several times and you keep ignoring my patch!"
msgstr ""

#: ../../faq/contributing.txt:75
# 0fb7fb240700435db5518e0e0c915677
msgid "Seriously - we're not ignoring you. If your patch stands no chance of inclusion in Django, we'll close the ticket. For all the other tickets, we need to prioritize our efforts, which means that some tickets will be addressed before others."
msgstr ""

#: ../../faq/contributing.txt:80
# 87f6f1ef3daa4ff687443180746aa1af
msgid "One of the criteria that is used to prioritize bug fixes is the number of people that will likely be affected by a given bug. Bugs that have the potential to affect many people will generally get priority over those that are edge cases."
msgstr ""

#: ../../faq/contributing.txt:85
# e5058748b3b94b308aec2f17b94e1f98
msgid "Another reason that bugs might be ignored for while is if the bug is a symptom of a larger problem. While we can spend time writing, testing and applying lots of little patches, sometimes the right solution is to rebuild. If a rebuild or refactor of a particular component has been proposed or is underway, you may find that bugs affecting that component will not get as much attention. Again, this is just a matter of prioritizing scarce resources. By concentrating on the rebuild, we can close all the little bugs at once, and hopefully prevent other little bugs from appearing in the future."
msgstr ""

#: ../../faq/contributing.txt:94
# fda3653a893942a6aebc03c43d7dd06f
msgid "Whatever the reason, please keep in mind that while you may hit a particular bug regularly, it doesn't necessarily follow that every single Django user will hit the same bug. Different users use Django in different ways, stressing different parts of the code under different conditions. When we evaluate the relative priorities, we are generally trying to consider the needs of the entire community, not just the severity for one particular user. This doesn't mean that we think your problem is unimportant -- just that in the limited time we have available, we will always err on the side of making 10 people happy rather than making 1 person happy."
msgstr ""

#: ../../faq/general.txt:2
# da0f160abb574e5d8f8a026e2b2cad91
msgid "FAQ: General"
msgstr ""

#: ../../faq/general.txt:5
# 7e2da168de924f34a064105a1e63de26
msgid "Why does this project exist?"
msgstr ""

#: ../../faq/general.txt:7
# 5a9ecf843a8843e084d8a6420b148866
msgid "Django grew from a very practical need: World Online, a newspaper Web operation, is responsible for building intensive Web applications on journalism deadlines. In the fast-paced newsroom, World Online often has only a matter of hours to take a complicated Web application from concept to public launch."
msgstr ""

#: ../../faq/general.txt:12
# b78bc6e2409d48c9a4f24be9dd062030
msgid "At the same time, the World Online Web developers have consistently been perfectionists when it comes to following best practices of Web development."
msgstr ""

#: ../../faq/general.txt:15
# 80cbfb7fd3bf49258e9c6b9c72b134cf
msgid "In fall 2003, the World Online developers (Adrian Holovaty and Simon Willison) ditched PHP and began using Python to develop its Web sites. As they built intensive, richly interactive sites such as Lawrence.com, they began to extract a generic Web development framework that let them build Web applications more and more quickly. They tweaked this framework constantly, adding improvements over two years."
msgstr ""

#: ../../faq/general.txt:22
# 9fb54693fc214d11ad021a0552acb77a
msgid "In summer 2005, World Online decided to open-source the resulting software, Django. Django would not be possible without a whole host of open-source projects -- `Apache`_, `Python`_, and `PostgreSQL`_ to name a few -- and we're thrilled to be able to give something back to the open-source community."
msgstr ""

#: ../../faq/general.txt:32
# ef89ee48965d4b96b1608dccc17583a7
msgid "What does \"Django\" mean, and how do you pronounce it?"
msgstr ""

#: ../../faq/general.txt:34
# 6402190a391d47168e87381740cb1478
msgid "Django is named after `Django Reinhardt`_, a gypsy jazz guitarist from the 1930s to early 1950s. To this day, he's considered one of the best guitarists of all time."
msgstr ""

#: ../../faq/general.txt:37
# 5d13c221f5f0493b9352d25d87ef3e85
msgid "Listen to his music. You'll like it."
msgstr ""

#: ../../faq/general.txt:39
# 13f661dcf6a24ae5809b4baf67ce1b7b
msgid "Django is pronounced **JANG**-oh. Rhymes with FANG-oh. The \"D\" is silent."
msgstr ""

#: ../../faq/general.txt:41
# 5831aecf44a54f29b9768dd630fa5146
msgid "We've also recorded an `audio clip of the pronunciation`_."
msgstr ""

#: ../../faq/general.txt:47
# 8355c5443027482fa60396db45ec278b
msgid "Is Django stable?"
msgstr ""

#: ../../faq/general.txt:49
# 5620d0d08873498890885b3b1e7998cf
msgid "Yes, it's quite stable. World Online has been using Django for many years. Sites built on Django have weathered traffic spikes of over one million hits an hour."
msgstr ""

#: ../../faq/general.txt:53
# 35a9ddacd84f4990a3c5db411c6437ea
msgid "Does Django scale?"
msgstr ""

#: ../../faq/general.txt:55
# 7f792eb3086940adbc660602e54006ed
msgid "Yes. Compared to development time, hardware is cheap, and so Django is designed to take advantage of as much hardware as you can throw at it."
msgstr ""

#: ../../faq/general.txt:58
# e051b87c752f46ed9917fd1c93e0b30d
msgid "Django uses a \"shared-nothing\" architecture, which means you can add hardware at any level -- database servers, caching servers or Web/application servers."
msgstr ""

#: ../../faq/general.txt:61
# c4f0eecf14dd4f978957049c27d57ae9
msgid "The framework cleanly separates components such as its database layer and application layer. And it ships with a simple-yet-powerful :doc:`cache framework </topics/cache>`."
msgstr ""

#: ../../faq/general.txt:66
# 6ecbc8fa15a840dd982581dd58313812
msgid "Who's behind this?"
msgstr ""

#: ../../faq/general.txt:68
# 278f590a9d794fb696194094727ae84f
msgid "Django was originally developed at World Online, the Web department of a newspaper in Lawrence, Kansas, USA. Django's now run by an international team of volunteers; you can read all about them over at the :doc:`list of committers </internals/committers>`"
msgstr ""

#: ../../faq/general.txt:74
# cad699d31b3f40b19e040db2aac2657e
msgid "Which sites use Django?"
msgstr ""

#: ../../faq/general.txt:76
# 1ca9fe64bf4e49e786d7aa4b8b4b4297
msgid "`DjangoSites.org`_ features a constantly growing list of Django-powered sites."
msgstr ""

#: ../../faq/general.txt:83
# 0d2aa0e28a37458984771519c3545f1d
msgid "Django appears to be a MVC framework, but you call the Controller the \"view\", and the View the \"template\". How come you don't use the standard names?"
msgstr ""

#: ../../faq/general.txt:85
# 3f264ab9a28b40b89125f78a06bf4025
msgid "Well, the standard names are debatable."
msgstr ""

#: ../../faq/general.txt:87
# e12849c626774fdebefd98d942a6bd11
msgid "In our interpretation of MVC, the \"view\" describes the data that gets presented to the user. It's not necessarily *how* the data *looks*, but *which* data is presented. The view describes *which data you see*, not *how you see it.* It's a subtle distinction."
msgstr ""

#: ../../faq/general.txt:92
# 0f553fc1a9394d42aab2f8716d27e736
msgid "So, in our case, a \"view\" is the Python callback function for a particular URL, because that callback function describes which data is presented."
msgstr ""

#: ../../faq/general.txt:95
# 10fbd246853b44aa98204e2b44075d33
msgid "Furthermore, it's sensible to separate content from presentation -- which is where templates come in. In Django, a \"view\" describes which data is presented, but a view normally delegates to a template, which describes *how* the data is presented."
msgstr ""

#: ../../faq/general.txt:100
# aeb0c5db216640b0a879b797611b2ac2
msgid "Where does the \"controller\" fit in, then? In Django's case, it's probably the framework itself: the machinery that sends a request to the appropriate view, according to the Django URL configuration."
msgstr ""

#: ../../faq/general.txt:104
# a11093a05deb406092c579ebfad6ce86
msgid "If you're hungry for acronyms, you might say that Django is a \"MTV\" framework -- that is, \"model\", \"template\", and \"view.\" That breakdown makes much more sense."
msgstr ""

#: ../../faq/general.txt:108
# 27820036edc54acc8d5cbe563a0b2967
msgid "At the end of the day, of course, it comes down to getting stuff done. And, regardless of how things are named, Django gets stuff done in a way that's most logical to us."
msgstr ""

#: ../../faq/general.txt:113
# dfaf6d2038de488d96a0ec116aacbaae
msgid "<Framework X> does <feature Y> -- why doesn't Django?"
msgstr ""

#: ../../faq/general.txt:115
# ba8ba05c81f343bb815934ab352cab66
msgid "We're well aware that there are other awesome Web frameworks out there, and we're not averse to borrowing ideas where appropriate. However, Django was developed precisely because we were unhappy with the status quo, so please be aware that \"because <Framework X> does it\" is not going to be sufficient reason to add a given feature to Django."
msgstr ""

#: ../../faq/general.txt:122
# 845fb7e178aa47508ba055fef95f1da7
msgid "Why did you write all of Django from scratch, instead of using other Python libraries?"
msgstr ""

#: ../../faq/general.txt:124
# 88111b6d73ae44c0b5b182f0da816977
msgid "When Django was originally written a couple of years ago, Adrian and Simon spent quite a bit of time exploring the various Python Web frameworks available."
msgstr ""

#: ../../faq/general.txt:128
# 7fa242951ddb47769d6c0d1037d85791
msgid "In our opinion, none of them were completely up to snuff."
msgstr ""

#: ../../faq/general.txt:130
# 1e4ae382a2f449dbbda1b7154bc92981
msgid "We're picky. You might even call us perfectionists. (With deadlines.)"
msgstr ""

#: ../../faq/general.txt:132
# af5e62cb1a6d478e92df3ed7a89fe681
msgid "Over time, we stumbled across open-source libraries that did things we'd already implemented. It was reassuring to see other people solving similar problems in similar ways, but it was too late to integrate outside code: We'd already written, tested and implemented our own framework bits in several production settings -- and our own code met our needs delightfully."
msgstr ""

#: ../../faq/general.txt:138
# 9ac9bfc6f5c44f73b7d0d21d261d23ec
msgid "In most cases, however, we found that existing frameworks/tools inevitably had some sort of fundamental, fatal flaw that made us squeamish. No tool fit our philosophies 100%."
msgstr ""

#: ../../faq/general.txt:142
# bab7ee7ff065487fb30a47e097ced0ff
msgid "Like we said: We're picky."
msgstr ""

#: ../../faq/general.txt:144
# 51d024a5e26142d0be2b92c9adb4e3e3
msgid "We've documented our philosophies on the :doc:`design philosophies page </misc/design-philosophies>`."
msgstr ""

#: ../../faq/general.txt:148
# 6d0594de55354404ae7309846dd65b38
msgid "Is Django a content-management-system (CMS)?"
msgstr ""

#: ../../faq/general.txt:150
# ecda8af0d8ee4acb9c3e2f18aef05036
msgid "No, Django is not a CMS, or any sort of \"turnkey product\" in and of itself. It's a Web framework; it's a programming tool that lets you build Web sites."
msgstr ""

#: ../../faq/general.txt:153
# 1e4cb583a88b4ccb92891a58dda4711e
msgid "For example, it doesn't make much sense to compare Django to something like Drupal_, because Django is something you use to *create* things like Drupal."
msgstr ""

#: ../../faq/general.txt:156
# 3e27ef7a14ce424d92b16c315d1bb9d9
msgid "Of course, Django's automatic admin site is fantastic and timesaving -- but the admin site is one module of Django the framework. Furthermore, although Django has special conveniences for building \"CMS-y\" apps, that doesn't mean it's not just as appropriate for building \"non-CMS-y\" apps (whatever that means!)."
msgstr ""

#: ../../faq/general.txt:165
# fc25c0f90754449db0342496b191d96e
msgid "How can I download the Django documentation to read it offline?"
msgstr ""

#: ../../faq/general.txt:167
# 12a9eafb6e5641958e56edecdae21a84
msgid "The Django docs are available in the ``docs`` directory of each Django tarball release. These docs are in reST (reStructuredText) format, and each text file corresponds to a Web page on the official Django site."
msgstr ""

#: ../../faq/general.txt:171
# e67a37ef90be4738bcb0d44f5f6253a6
msgid "Because the documentation is `stored in revision control`_, you can browse documentation changes just like you can browse code changes."
msgstr ""

#: ../../faq/general.txt:174
# e2e35e6a8f064ade938ab446b5dafcfe
msgid "Technically, the docs on Django's site are generated from the latest development versions of those reST documents, so the docs on the Django site may offer more information than the docs that come with the latest Django release."
msgstr ""

#: ../../faq/general.txt:181
# 623e9ae31b9c41e5844ac13b40c79a82
msgid "Where can I find Django developers for hire?"
msgstr ""

#: ../../faq/general.txt:183
# f6e2def8a0174ab4a53263d71100a4e7
msgid "Consult our `developers for hire page`_ for a list of Django developers who would be happy to help you."
msgstr ""

#: ../../faq/general.txt:186
# 31eab8eb51744283a5683aca0cdc73b7
msgid "You might also be interested in posting a job to http://djangogigs.com/ . If you want to find Django-capable people in your local area, try https://people.djangoproject.com/ ."
msgstr ""

#: ../../faq/help.txt:2
# c8da2ab4e82f415abe1d94dcd2c64b76
msgid "FAQ: Getting Help"
msgstr ""

#: ../../faq/help.txt:5
# f139dc3bde0e4139a52fc31f08a79b0d
msgid "How do I do X? Why doesn't Y work? Where can I go to get help?"
msgstr ""

#: ../../faq/help.txt:7
# 54355a6f74dc42d5875eb1579466f06d
msgid "If this FAQ doesn't contain an answer to your question, you might want to try the `django-users mailing list`_. Feel free to ask any question related to installing, using, or debugging Django."
msgstr ""

#: ../../faq/help.txt:11
# d8c85f7fa4994bda8d68b9d220436a6e
msgid "If you prefer IRC, the `#django IRC channel`_ on the Freenode IRC network is an active community of helpful individuals who may be able to solve your problem."
msgstr ""

#: ../../faq/help.txt:18
# 9cd0d20470d041f98c2fb64f9d44eb32
msgid "Why hasn't my message appeared on django-users?"
msgstr ""

#: ../../faq/help.txt:20
# 9c37e038bd10492894cf8dd4f953409b
msgid "django-users_ has a lot of subscribers. This is good for the community, as it means many people are available to contribute answers to questions. Unfortunately, it also means that django-users_ is an attractive target for spammers."
msgstr ""

#: ../../faq/help.txt:25
# 81ab616212a14aeaa2c1bc43be8dfd5e
msgid "In order to combat the spam problem, when you join the django-users_ mailing list, we manually moderate the first message you send to the list. This means that spammers get caught, but it also means that your first question to the list might take a little longer to get answered. We apologize for any inconvenience that this policy may cause."
msgstr ""

#: ../../faq/help.txt:34
# d56076c254604a2f978a630a47278a9a
msgid "Nobody on django-users answered my question! What should I do?"
msgstr ""

#: ../../faq/help.txt:36
# c2ef203d665a4702909c3126cfd1caf7
msgid "Try making your question more specific, or provide a better example of your problem."
msgstr ""

#: ../../faq/help.txt:39
# cd2c770cf4684c1b8b8ce774458db15e
msgid "As with most open-source mailing lists, the folks on django-users_ are volunteers. If nobody has answered your question, it may be because nobody knows the answer, it may be because nobody can understand the question, or it may be that everybody that can help is busy. One thing you might try is to ask the question on IRC -- visit the `#django IRC channel`_ on the Freenode IRC network."
msgstr ""

#: ../../faq/help.txt:46
# 73009a8b538c4ab1b53a9aa951d355f2
msgid "You might notice we have a second mailing list, called django-developers_ -- but please don't email support questions to this mailing list. This list is for discussion of the development of Django itself. Asking a tech support question there is considered quite impolite."
msgstr ""

#: ../../faq/help.txt:54
# c95ced851d824e618882aacc653f11a2
msgid "I think I've found a bug! What should I do?"
msgstr ""

#: ../../faq/help.txt:56
# 64246ef6996f47d7aaa43e35052bfb03
msgid "Detailed instructions on how to handle a potential bug can be found in our :ref:`Guide to contributing to Django <reporting-bugs>`."
msgstr ""

#: ../../faq/help.txt:60
# 54b4640d87154524a0612ca4731ae0b3
msgid "I think I've found a security problem! What should I do?"
msgstr ""

#: ../../faq/help.txt:62
# 66a07bcde1264b93b0298057cdc2715c
msgid "If you think you've found a security problem with Django, please send a message to security@djangoproject.com. This is a private list only open to long-time, highly trusted Django developers, and its archives are not publicly readable."
msgstr ""

#: ../../faq/help.txt:66
# 0d9171d9e1f847e9b5e2036cc7102c21
msgid "Due to the sensitive nature of security issues, we ask that if you think you have found a security problem, *please* don't send a message to one of the public mailing lists. Django has a :ref:`policy for handling security issues <reporting-security-issues>`; while a defect is outstanding, we would like to minimize any damage that could be inflicted through public knowledge of that defect."
msgstr ""

#: ../../faq/index.txt:3
# 85b184bf59fc45a7a563ff2630664004
msgid "Django FAQ"
msgstr ""

#: ../../faq/install.txt:2
# c260467f66a4464e9d2ef267c9ebf903
msgid "FAQ: Installation"
msgstr ""

#: ../../faq/install.txt:5
# b563722e86864054b766f2132e0d1978
msgid "How do I get started?"
msgstr ""

#: ../../faq/install.txt:7
# 8d194700dcf147d1afd3b6073a353be8
msgid "`Download the code`_."
msgstr ""

#: ../../faq/install.txt:8
# 49e8cc73931a4711a1ce76df44be3eb9
msgid "Install Django (read the :doc:`installation guide </intro/install>`)."
msgstr ""

#: ../../faq/install.txt:9
# 6b0dcc43851a4552bbb5885f9bae807b
msgid "Walk through the :doc:`tutorial </intro/tutorial01>`."
msgstr ""

#: ../../faq/install.txt:10
# e9745ed70cb04accacdfe3e7de28b5a4
msgid "Check out the rest of the :doc:`documentation </index>`, and `ask questions`_ if you run into trouble."
msgstr ""

#: ../../faq/install.txt:17
# 0955d13492d94ef58f5263b7936228b9
msgid "What are Django's prerequisites?"
msgstr ""

#: ../../faq/install.txt:19
# cc5b0e1f0ab04112b2ef275c97667c2d
msgid "Django requires Python, specifically Python 2.6.5 - 2.7.x. No other Python libraries are required for basic Django usage. Django 1.5 also has experimental support for Python 3.2.3 and above."
msgstr ""

#: ../../faq/install.txt:23
# e3a7637035ee4514909c5157999319e6
msgid "For a development environment -- if you just want to experiment with Django -- you don't need to have a separate Web server installed; Django comes with its own lightweight development server. For a production environment, Django follows the WSGI spec, :pep:`3333`, which means it can run on a variety of server platforms. See :doc:`Deploying Django </howto/deployment/index>` for some popular alternatives. Also, the `server arrangements wiki page`_ contains details for several deployment strategies."
msgstr ""

#: ../../faq/install.txt:31
# 9f5419dc58934e35a54cdba95906dc6a
msgid "If you want to use Django with a database, which is probably the case, you'll also need a database engine. PostgreSQL_ is recommended, because we're PostgreSQL fans, and MySQL_, `SQLite 3`_, and Oracle_ are also supported."
msgstr ""

#: ../../faq/install.txt:43
# 52c0812866954d829caa6eb6fa3ecadc
msgid "Do I lose anything by using Python 2.6 versus newer Python versions, such as Python 2.7?"
msgstr ""

#: ../../faq/install.txt:45
# 92f03edfd5f74958ad37d4546af6d39f
msgid "Not in the core framework. Currently, Django itself officially supports Python 2.6 (2.6.5 or higher) and 2.7. However, newer versions of Python are often faster, have more features, and are better supported. If you use a newer version of Python you will also have access to some APIs that aren't available under older versions of Python."
msgstr ""

#: ../../faq/install.txt:51
# 2777127ed5ba4e0b8a2a37ea85e0c706
msgid "Third-party applications for use with Django are, of course, free to set their own version requirements."
msgstr ""

#: ../../faq/install.txt:54
# b66897717a674c2e836fd9f8ae0a2fd5
msgid "All else being equal, we recommend that you use the latest 2.x release (currently Python 2.7). This will let you take advantage of the numerous improvements and optimizations to the Python language since version 2.6."
msgstr ""

#: ../../faq/install.txt:58
# df1975bd646444ce93a334aa8f77d246
msgid "Generally speaking, we don't recommend running Django on Python 3 yet; see below for more."
msgstr ""

#: ../../faq/install.txt:62
# fa9f7e6ca7664db3a576f4ca1cc87c26
msgid "What Python version can I use with Django?"
msgstr ""

#: ../../faq/install.txt:65
# 1bae3b4c81344707bb7aba21082e79c0
msgid "Django version"
msgstr ""

#: ../../faq/install.txt:65
# 5dfa01976b4d406cbf94d42ebe0f5f94
msgid "Python versions"
msgstr ""

#: ../../faq/install.txt:67
# 2329e35794f542c786a4116f0a799610
msgid "1.0"
msgstr ""

#: ../../faq/install.txt:67
#: ../../faq/install.txt:68
# d4f2e4f70ecc43b9811d4e8871eea50d
# fe8f2bf7c2804c4bb818725d783e3aa9
msgid "2.3, 2.4, 2.5, 2.6"
msgstr ""

#: ../../faq/install.txt:68
# 273e796932564ff3817f1fe8e8877442
msgid "1.1"
msgstr ""

#: ../../faq/install.txt:69
# e787a19854804797959180963b8a4aa4
msgid "1.2"
msgstr ""

#: ../../faq/install.txt:69
#: ../../faq/install.txt:70
# 02257673f8834e9096cd87910de06f16
# e9748daf23db4f3396a878d2aa83cde2
msgid "2.4, 2.5, 2.6, 2.7"
msgstr ""

#: ../../faq/install.txt:70
# 3e4ee9018052443f970bcd705337af59
msgid "1.3"
msgstr ""

#: ../../faq/install.txt:71
# 438cbc5e4c344a799438f4f6afccdf01
msgid "**1.4**"
msgstr ""

#: ../../faq/install.txt:71
# fd415d80f03a47a5941240ab31ee626d
msgid "**2.5, 2.6, 2.7**"
msgstr ""

#: ../../faq/install.txt:72
# 32cd31f3480c4cd0baf0a9a513348efd
msgid "*1.5 (future)*"
msgstr ""

#: ../../faq/install.txt:72
# 893899ceb31543d4add728c1beb76670
msgid "*2.6, 2.7* and *3.2.3, 3.3 (experimental)*"
msgstr ""

#: ../../faq/install.txt:76
# c0e4bed3aed6452cb1b7dc16f2ac2eb9
msgid "Can I use Django with Python 3?"
msgstr ""

#: ../../faq/install.txt:78
# 01a035396de4422c9507eb53cbe99670
msgid "Django 1.5 introduces experimental support for Python 3.2.3 and above. However, we don't yet suggest that you use Django and Python 3 in production."
msgstr ""

#: ../../faq/install.txt:81
# b79c97441eaf484d98a0ad7649f3c881
msgid "Python 3 support should be considered a \"preview\". It's offered to bootstrap the transition of the Django ecosystem to Python 3, and to help you start porting your apps for future Python 3 compatibility. But we're not yet confident enough to promise stability in production."
msgstr ""

#: ../../faq/install.txt:86
# b76e36127ab2482783519d40bc2dd888
msgid "Our current plan is to make Django 1.6 suitable for general use with Python 3."
msgstr ""

#: ../../faq/install.txt:89
# 658baf2ba98c48729454048b06f8caa6
msgid "Will Django run under shared hosting (like TextDrive or Dreamhost)?"
msgstr ""

#: ../../faq/install.txt:91
# 81cf4bedd2ae4cd38fe49e6cbeb81c3c
msgid "See our `Django-friendly Web hosts`_ page."
msgstr ""

#: ../../faq/install.txt:96
# 2a85c2b65c1e4118912a8d14c8d7877b
msgid "Should I use the stable version or development version?"
msgstr ""

#: ../../faq/install.txt:98
# 1dad26232ce9491fa8cd9547ec61fd1b
msgid "Generally, if you're using code in production, you should be using a stable release. The Django project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn't have any problems upgrading when the next official version is released."
msgstr ""

#: ../../faq/models.txt:2
# c0276b82f25044c6a56c60cf24bf4f31
msgid "FAQ: Databases and models"
msgstr ""

#: ../../faq/models.txt:7
# b2bb43035e70494cbd059706ba5672e8
msgid "How can I see the raw SQL queries Django is running?"
msgstr ""

#: ../../faq/models.txt:9
# d21a4aeed52f4b9480c14df353fe3e7a
msgid "Make sure your Django :setting:`DEBUG` setting is set to ``True``. Then, just do this::"
msgstr ""

#: ../../faq/models.txt:17
# ca65d06afdc243b5b3c8cb85874434ac
msgid "``connection.queries`` is only available if :setting:`DEBUG` is ``True``. It's a list of dictionaries in order of query execution. Each dictionary has the following::"
msgstr ""

#: ../../faq/models.txt:24
# 48048c8d4da34f579a7e5dcb7ae50261
msgid "``connection.queries`` includes all SQL statements -- INSERTs, UPDATES, SELECTs, etc. Each time your app hits the database, the query will be recorded. Note that the SQL recorded here may be :ref:`incorrectly quoted under SQLite <sqlite-connection-queries>`."
msgstr ""

#: ../../faq/models.txt:29
# d72036ba1b2a49fea0f492ba023e2f9c
msgid "If you are using :doc:`multiple databases</topics/db/multi-db>`, you can use the same interface on each member of the ``connections`` dictionary::"
msgstr ""

#: ../../faq/models.txt:36
# 3c5968ee840945fda6826adf15174996
msgid "Can I use Django with a pre-existing database?"
msgstr ""

#: ../../faq/models.txt:38
# 93539aee8c1f43e689a84d96371c4f4e
msgid "Yes. See :doc:`Integrating with a legacy database </howto/legacy-databases>`."
msgstr ""

#: ../../faq/models.txt:41
# 40e54bed4a8442e1abcaed6228629000
msgid "If I make changes to a model, how do I update the database?"
msgstr ""

#: ../../faq/models.txt:43
# 642fbc5368a04ab09059b706d15148b7
msgid "If you don't mind clearing data, your project's ``manage.py`` utility has a :djadmin:`flush` option to reset the database to the state it was in immediately after :djadmin:`syncdb` was executed."
msgstr ""

#: ../../faq/models.txt:47
# 67e9c0727822469696f86e3d417de239
msgid "If you do care about deleting data, you'll have to execute the ``ALTER TABLE`` statements manually in your database."
msgstr ""

#: ../../faq/models.txt:50
# ae30edd9912c4c3880c004825ecc0a8d
msgid "There are `external projects which handle schema updates <http://www.djangopackages.com/grids/g/database-migration/>`_, of which the current defacto standard is `south <http://south.aeracode.org/>`_."
msgstr ""

#: ../../faq/models.txt:55
# 306c8010457d4fcc8b50d679319be733
msgid "Do Django models support multiple-column primary keys?"
msgstr ""

#: ../../faq/models.txt:57
# 0e89a3d5f8a44b0cb6348847e5a088c1
msgid "No. Only single-column primary keys are supported."
msgstr ""

#: ../../faq/models.txt:59
# 2f0358b0d3674d42882f38642acb5819
msgid "But this isn't an issue in practice, because there's nothing stopping you from adding other constraints (using the ``unique_together`` model option or creating the constraint directly in your database), and enforcing the uniqueness at that level. Single-column primary keys are needed for things such as the admin interface to work; e.g., you need a simple way of being able to specify an object to edit or delete."
msgstr ""

#: ../../faq/models.txt:67
# c71f7b0f18a240ada76aea9ca793670e
msgid "How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type?"
msgstr ""

#: ../../faq/models.txt:69
# 8ee21ec8546a4a52806833ea8f82c3b0
msgid "We try to avoid adding special cases in the Django code to accommodate all the database-specific options such as table type, etc. If you'd like to use any of these options, create an :ref:`SQL initial data file <initial-sql>` that contains ``ALTER TABLE`` statements that do what you want to do. The initial data files are executed in your database after the ``CREATE TABLE`` statements."
msgstr ""

#: ../../faq/models.txt:75
# ae8142d7044f4cd59aa02e421dbf0200
msgid "For example, if you're using MySQL and want your tables to use the MyISAM table type, create an initial data file and put something like this in it::"
msgstr ""

#: ../../faq/models.txt:80
# 02f7b60ad21a48a69b62a50fe3764ace
msgid "As explained in the :ref:`SQL initial data file <initial-sql>` documentation, this SQL file can contain arbitrary SQL, so you can make any sorts of changes you need to make."
msgstr ""

#: ../../faq/models.txt:85
# 863c810d6640468aa7f71797fb3322e1
msgid "Why is Django leaking memory?"
msgstr ""

#: ../../faq/models.txt:87
# cedb7259ef754b7d93c1478376cf9fad
msgid "Django isn't known to leak memory. If you find your Django processes are allocating more and more memory, with no sign of releasing it, check to make sure your :setting:`DEBUG` setting is set to ``False``. If :setting:`DEBUG` is ``True``, then Django saves a copy of every SQL statement it has executed."
msgstr ""

#: ../../faq/models.txt:92
# 71afd238c23a4fb8b829bd4a007ccdae
msgid "(The queries are saved in ``django.db.connection.queries``. See `How can I see the raw SQL queries Django is running?`_.)"
msgstr ""

#: ../../faq/models.txt:95
# 89a556427ff24a639797edee54d364ef
msgid "To fix the problem, set :setting:`DEBUG` to ``False``."
msgstr ""

#: ../../faq/models.txt:97
# d16de97d072d467d8703ace5fd466f03
msgid "If you need to clear the query list manually at any point in your functions, just call ``reset_queries()``, like this::"
msgstr ""

#: ../../faq/troubleshooting.txt:3
# 711ed3900d7b4e29a85811318e0bd4a0
msgid "Troubleshooting"
msgstr ""

#: ../../faq/troubleshooting.txt:5
# 2fb83ea1d8034aa6a4812a3836ca31e9
msgid "This page contains some advice about errors and problems commonly encountered during the development of Django applications."
msgstr ""

#: ../../faq/troubleshooting.txt:9
# c5732e0890054cbaa1f48ab995f0fb10
msgid "\"command not found: django-admin.py\""
msgstr ""

#: ../../faq/troubleshooting.txt:11
# c1f3ec7bfe9a4e9b843ce0a4cc15e3dd
msgid ":doc:`django-admin.py </ref/django-admin>` should be on your system path if you installed Django via ``python setup.py``. If it's not on your path, you can find it in ``site-packages/django/bin``, where ``site-packages`` is a directory within your Python installation. Consider symlinking to :doc:`django-admin.py </ref/django-admin>` from some place on your path, such as :file:`/usr/local/bin`."
msgstr ""

#: ../../faq/usage.txt:2
# 0ba0f4cd684b4502b948209064cde140
msgid "FAQ: Using Django"
msgstr ""

#: ../../faq/usage.txt:5
# 436fec0a93c94f1696fa2c3b7fe011a1
msgid "Why do I get an error about importing DJANGO_SETTINGS_MODULE?"
msgstr ""

#: ../../faq/usage.txt:7
# 468114cc3dc348e5bb809174cd92528d
msgid "Make sure that:"
msgstr ""

#: ../../faq/usage.txt:9
# ea63a81b27dd4823877df0abd8f66f18
msgid "The environment variable DJANGO_SETTINGS_MODULE is set to a fully-qualified Python module (i.e. \"mysite.settings\")."
msgstr ""

#: ../../faq/usage.txt:12
# 3e9a90309d824539b804e14c07e8d738
msgid "Said module is on ``sys.path`` (``import mysite.settings`` should work)."
msgstr ""

#: ../../faq/usage.txt:14
# 70b08d5114c94823a8bcd466ea58ea8d
msgid "The module doesn't contain syntax errors (of course)."
msgstr ""

#: ../../faq/usage.txt:17
# 54775c1443df40ad91d505eb92eabbb0
msgid "I can't stand your template language. Do I have to use it?"
msgstr ""

#: ../../faq/usage.txt:19
# d0db4695a83b4162a83b34530f2c4a3c
msgid "We happen to think our template engine is the best thing since chunky bacon, but we recognize that choosing a template language runs close to religion. There's nothing about Django that requires using the template language, so if you're attached to ZPT, Cheetah, or whatever, feel free to use those."
msgstr ""

#: ../../faq/usage.txt:25
# 9756020fc8354d4bbfbf479041554bb0
msgid "Do I have to use your model/database layer?"
msgstr ""

#: ../../faq/usage.txt:27
# a5369f14e4ef498aa10d4652a86d6217
msgid "Nope. Just like the template system, the model/database layer is decoupled from the rest of the framework."
msgstr ""

#: ../../faq/usage.txt:30
# 82fc09709b2149159452aca046f6e5e8
msgid "The one exception is: If you use a different database library, you won't get to use Django's automatically-generated admin site. That app is coupled to the Django database layer."
msgstr ""

#: ../../faq/usage.txt:35
# 7c0d6784eec6400b973ee64177567471
msgid "How do I use image and file fields?"
msgstr ""

#: ../../faq/usage.txt:37
# 0116e5b17c3b4cbf8731042efceeee14
msgid "Using a :class:`~django.db.models.FileField` or an :class:`~django.db.models.ImageField` in a model takes a few steps:"
msgstr ""

#: ../../faq/usage.txt:40
# f4ae3e66514f4b068d57eded9b19cc5e
msgid "In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the full path to a directory where you'd like Django to store uploaded files. (For performance, these files are not stored in the database.) Define :setting:`MEDIA_URL` as the base public URL of that directory. Make sure that this directory is writable by the Web server's user account."
msgstr ""

#: ../../faq/usage.txt:47
# 43bc65592adf4ecfbcc5fb51f3ab2c4e
msgid "Add the :class:`~django.db.models.FileField` or :class:`~django.db.models.ImageField` to your model, making sure to define the :attr:`~django.db.models.FileField.upload_to` option to tell Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload files."
msgstr ""

#: ../../faq/usage.txt:53
# 896ddaadad9b4310b8856963ea44a0f7
msgid "All that will be stored in your database is a path to the file (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:`~django.core.files.File.url` attribute provided by Django. For example, if your :class:`~django.db.models.ImageField` is called ``mug_shot``, you can get the absolute path to your image in a template with ``{{ object.mug_shot.url }}``."
msgstr ""

#: ../../faq/usage.txt:61
# 5923e335b036464f9565b223d9110131
msgid "How do I make a variable available to all my templates?"
msgstr ""

#: ../../faq/usage.txt:63
# e60d6c34bf9448c1ab2dde7c6a2eae79
msgid "Sometimes your templates just all need the same thing. A common example would be dynamically-generated menus. At first glance, it seems logical to simply add a common dictionary to the template context."
msgstr ""

#: ../../faq/usage.txt:67
# aa935b7ab243493db1d118c840a87b5d
msgid "The correct solution is to use a ``RequestContext``. Details on how to do this are here: :ref:`subclassing-context-requestcontext`."
msgstr ""

