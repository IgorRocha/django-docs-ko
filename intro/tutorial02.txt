=====================================
첫번째 Django 앱 만들기! part 2
=====================================

본 자습서는 :doc:`Tutorial 1 </intro/tutorial01>` 에 이어 계속됩니다. 앞서 개발한 설문조사 애플리케이션과 함께 Django 에서 자동으로 생성되는 관리자 사이트에 대해 알아보도록 하겠습니다.

.. admonition:: 철학

    관리자나 고객들이 컨텐츠를 추가, 변경, 삭제할 수 있는 관리자 사이트를 생성하는 것은
    그다지 창조적이지 않은 지루한 작업 입니다. 이러한 작업을
    위해서 Django 는 모델을 위한 관리자 인터페이스 생성을 완전히 자동화 하였습니다.

    Django 는 뉴스를 준비하는 환경을 위해 만들어졌으며,
    "컨텐츠 발행인"과 "공개" 사이트를 완벽히 분리하였습니. 사이트 관리자들은
    새로운 스토리나 이벤트, 스포츠 점수 결과 등을 추가하기 위해 시스템을 이용하며,
    이런 컨텐츠들은 공개 사이트에 노출됩니다. Django 는 사이트 관리자들이 컨텐츠를 수정할 수 있는
    통합 인터페이스를 제공함으로서 문제를 해결합니다.

    관리자 사이트는 사이트 방문자를 위한 것이 아닙니다. 이는 
    관리자들을 위한 것 입니다.

관리자 사이트 활성화 하기
=======================

관리자 사이트는 디폴트로 활성화 되지 않습니다. -- 선택사항 입니다. 관리자 사이트를 활성화 시키기 위해 다음 세 가지의 작업이 필요합니다:

* :setting:`INSTALLED_APPS` 설정에 있는 ``"django.contrib.admin"`` 의 주석을 제거하세요.

* ``python manage.py syncdb`` 명령어를 실행하세요. 여러분이 :setting:`INSTALLED_APPS` 에
  새로운 어플리케이션을 설치하였기 때문에 데이터베이스 테이블을 업데이트 해야 합니다.

* ``mysite/urls.py`` 파일을 열어 관리 사이트와 관련된 행의 주석을
  제거하세요 -- 총 세 개 행의 주석을 제거해야 합니다. 이 파일은 
  URL 설정(URLconf) 파일이며 다음 자습서에서 보다 자세히 알아보겠습니다. 지금 여러분이 알아야 할 부분은
  URL roots 를 어플리케이션에 연결시키는 것 입니다. 연결 후 여러분은
  아래와 같은 ``urls.py`` 파일을 확인하실 수 있습니다:

  .. parsed-literal::

      from django.conf.urls import patterns, include, url

      # Uncomment the next two lines to enable the admin:
      **from django.contrib import admin**
      **admin.autodiscover()**

      urlpatterns = patterns('',
          # Examples:
          # url(r'^$', '{{ project_name }}.views.home', name='home'),
          # url(r'^{{ project_name }}/', include('{{ project_name }}.foo.urls')),

          # Uncomment the admin/doc line below to enable admin documentation:
          # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

          # Uncomment the next line to enable the admin:
          **url(r'^admin/', include(admin.site.urls)),**
      )

  (굵게 표시된 행이 주석이 제거된 행 입니다.)

개발 서버 실행하기
============================

이제 개발 서버를 실행 시키고 본격적으로 관리자 사이트를 탐험해 보도록 하겠습니다.

첫 번째 자습서에서 배운 내용을 참고하여 아래와 같이 개발 서버를 실행 해 보세요:

.. code-block:: bash

    python manage.py runserver

이제 웹 브라우저를 실행하고 로컬 도메인의 "/admin/" 으로 이동하세요 -- 예:
http://127.0.0.1:8000/admin/. 관리자 사이트의 로그인 화면을 볼 수 있을 것 입니다:

.. image:: _images/admin01.png
   :alt: Django 관리자 사이트 로그인 화면

.. admonition:: 여러분에게 보이는 페이지와 다른가요?

    만약 위에서 보이는 로그인 페이지 대신에 아래와 같은 
    error page reporting이 보인다면::

        ImportError at /admin/
        cannot import name patterns
        ...

    여러분이 사용하시는 Django 의 버젼이 본 자습서의 버젼과
    맞지 않을 수 있습니다. 사용하시는 Django 버젼에 맞는 자습서를 참고 하거나, 
    새로운 버젼의 Django 를 사용하시기 바랍니다.

관리자 사이트 들어가기
====================

자, 이제 로그인 해 보세요. (첫번째 자습서에서 최고 관리자 계정을 생성한 것을 기억 하시나요? 만약 생성하지 않았거나, 비밀번호가 기억나지 않는다면 :ref:`다른 계정을 생성<topics-auth-creating-superusers>` 해 보세요.) 장고 관리자 사이트의 초기 페이지를 확인할 수 있을 것 입니다:

.. image:: _images/admin02t.png
   :alt: Django 관리자 사이트 초기 페이지

Groups, users, sites 등 몇 개의 수정 가능한 컨텐츠를 확인할 수 있는데, 이들은 Django 에서 기본적으로 제공하는 핵심 기능 입니다.

관리자 사이트에서 수정 가능한 설문조사 앱 만들기
=========================================

그러데 우리의 설문조사 앱은 어디에 있나요?아직 관리자 사이트 초기 페이지에 보이지 않습니다.

단 한가지 할 일: 우선 관리자 사이트에게 ``Poll``
개체가 관리자 인터페이스가 필요하다고 알려줘야 합니다. 이를 위해  ``polls`` 디렉토리 안에 ``admin.py`` 파일을 생성하고 아래와 같이 수정합니다::

    from polls.models import Poll
    from django.contrib import admin

    admin.site.register(Poll)

수정사항을 확인하기 위해 개발 서버를 재시작 해야 합니다. 일반적으로 파일이 수정되면 서버는 자동으로 수정된 코드를 다시 불러오지만 새로 생성된 파일은 자동으로 불러오지 않습니다.

무료 관리 기능 탐험하기
====================================

자, 이제 ``Poll`` 이 등록되었고, Django 는 ``Poll`` 을 관리 사이트 초기 페이지에 보여줘야 함을 알고 있습니다:

.. image:: _images/admin03t.png
   :alt: polls가 보여지는 Django 관리자 사이트 초기 페이지 

이제 "Polls."를 클릭하면 polls의 "change list" 를 볼 수 있습니다. 이 페이지에서는 데이터베이스의 모든 poll이 보여지게 되며 이중 한개를 선택하여 변경할 수 있습니다.
여기에 우리가 첫 번째 자습서에서 생성한 "What's up?" poll을 확인할 수 있습니다:

.. image:: _images/admin04t.png
   :alt: Poll 변경 리스트 페이지

Poll을 수정하기 위해 "What's up?" poll을 클릭하세요:

.. image:: _images/admin05t.png
   :alt: Poll 개체 수정 폼

여기서 짚고 넘어가기:

* 폼은 Poll 모델로 부터 자동적으로 생성되었습니다.

* 서로 다른 모델의 필드 타입 (:class:`~django.db.models.DateTimeField`,
  :class:`~django.db.models.CharField`) 에 따라 적절한 HTML 입력 위젯이 
  보여집니다. 각각의 필드는 장고의 관리자 싸이트에서 어떻게 보여질지 스스로 알고
  있습니다.

* 각각의 :class:`~django.db.models.DateTimeField` 에는 간편한 JavaScript
  기능이 제공됩니다. 날짜는 "Today" 바로입력과 달력 팝업이 제공되며, 시간에는
  "Now" 바로입력과 일반적으로 시간 입력에 사용되는 간편한 팝업이 제공됩니다.

페이지 하단에는 몇가지 옵션이 제공됩니다:

* Save -- 변경사항을 저장하고 현재 개체 타입의 변경된 목록 페이지를 
  보여줍니다.

* Save and continue editing -- 변경사항을 저장하고 현 개체의 관리 페이지를 
  다시 보여줍니다.

* Save and add another -- 변경사항을 저장하고 현재 개체 타입의 신규 정보를 등록할 수 있는  
  비어있는 폼을 보여줍니다.

* Delete -- 삭제 확인 페이지를 보여줍니다.

만약 "Date published" 의 시간이 여러분이 자습서 1에서 poll을 생성한 시간과 맞지 않는다면 
정확한 :setting:`TIME_ZONE` 설정하지 않았기 때문 일 수 있습니다. 값을 정확히 입력하고 페이지를 다시 읽어들이면 
정확한 값이 보여지는 것을 확인할 수 있을 것입니다.

"Today" 와 "Now" 바로입력 버튼을 누르면 "Date published"의 정보를 바꿀 수 있습니다. 그리고 "Save and continue editing." 를 클릭한 후 오른쪽 위의 "History" 를 클릭 해 보세요.
이 페이지 에서는 Django 관리 사이트에서 이루어진 현 개체의 모든 변경 사항의 목록을 확인할 수 있으며, 수정 시간과 수정을 한 사용자 이름도 확인할 수 있습니다.:

.. image:: _images/admin06t.png
   :alt: Poll 개체의 History 페이지

관리자 싸이트 폼 커스터마이즈 하기
========================

단지 몇분동안 코드를 살펴보며 감탄한 것 처럼 여러분은 코드를 작성 할 필요가 없습니다. 단지 Poll 모델과 ``admin.site.register(Poll)`` 을 등록 하는 것 만으로, Django는 기본적인 폼의 외형을 생성할 수 있었습니다. 때때로 여러분은 관리자 싸이트 폼의 외형과 작업을 커스터마이즈 해야 할 필요가 있을 것 입니다. 이는 여러분이 개채를 등록할 때 필요한 옵션을 Django 에게 알려주면 됩니다..

수정 폼의 필드를 재 정렬 하는 예제를 통해서 어떻게 커스터마이즈 할 수 있는지 알아봅시다. ``admin.site.register(Poll)`` 라인을 아래와 같이 수정 해 봅시다.::

    class PollAdmin(admin.ModelAdmin):
        fields = ['pub_date', 'question']

    admin.site.register(Poll, PollAdmin)

여러분은 위와 같은 패턴 -- Model admin 개체 생성, ``admin.site.register()`` 의 두번째 인자로 전달 -- 을 통해 언제든 개체의 관리 싸이트 옵션을 변경할 수 있습니다.

이번 예제는 "Publication date" 필드가 "Question" 필드의 앞에 오도록 수정하였습니다.:

.. image:: _images/admin07.png
   :alt: 재 정렬된 필드들

단지 두 개의 필드에서는 크게 인상적이지 않을 지 모르지만 수십개의 필드가 있는 폼 에서는 직관적인 순서를 선택하는 것이 보다 세세한 사용성 측면에서 중요합니다.

또한 수십개의 필드를 포함한 폼을 다룰 때에는 이들을 폼의 필드셋 으로의 분리가 필요할 수 있습니다.::

    class PollAdmin(admin.ModelAdmin):
        fieldsets = [
            (None,               {'fields': ['question']}),
            ('Date information', {'fields': ['pub_date']}),
        ]

    admin.site.register(Poll, PollAdmin)

The first element of each tuple in ``fieldsets`` is the title of the fieldset.
Here's what our form looks like now:

.. image:: _images/admin08t.png
   :alt: Form has fieldsets now

You can assign arbitrary HTML classes to each fieldset. Django provides a
``"collapse"`` class that displays a particular fieldset initially collapsed.
This is useful when you have a long form that contains a number of fields that
aren't commonly used::

        class PollAdmin(admin.ModelAdmin):
            fieldsets = [
                (None,               {'fields': ['question']}),
                ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
            ]

.. image:: _images/admin09.png
   :alt: Fieldset is initially collapsed

Adding related objects
======================

OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, and
the admin page doesn't display choices.

Yet.

There are two ways to solve this problem. The first is to register ``Choice``
with the admin just as we did with ``Poll``. That's easy::

    from polls.models import Choice

    admin.site.register(Choice)

Now "Choices" is an available option in the Django admin. The "Add choice" form
looks like this:

.. image:: _images/admin10.png
   :alt: Choice admin page

In that form, the "Poll" field is a select box containing every poll in the
database. Django knows that a :class:`~django.db.models.ForeignKey` should be
represented in the admin as a ``<select>`` box. In our case, only one poll
exists at this point.

Also note the "Add Another" link next to "Poll." Every object with a
``ForeignKey`` relationship to another gets this for free. When you click "Add
Another," you'll get a popup window with the "Add poll" form. If you add a poll
in that window and click "Save," Django will save the poll to the database and
dynamically add it as the selected choice on the "Add choice" form you're
looking at.

But, really, this is an inefficient way of adding Choice objects to the system.
It'd be better if you could add a bunch of Choices directly when you create the
Poll object. Let's make that happen.

Remove the ``register()`` call for the Choice model. Then, edit the ``Poll``
registration code to read::

    class ChoiceInline(admin.StackedInline):
        model = Choice
        extra = 3

    class PollAdmin(admin.ModelAdmin):
        fieldsets = [
            (None,               {'fields': ['question']}),
            ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
        ]
        inlines = [ChoiceInline]

    admin.site.register(Poll, PollAdmin)

This tells Django: "Choice objects are edited on the Poll admin page. By
default, provide enough fields for 3 choices."

Load the "Add poll" page to see how that looks, you may need to restart your development server:

.. image:: _images/admin11t.png
   :alt: Add poll page now has choices on it

It works like this: There are three slots for related Choices -- as specified
by ``extra`` -- and each time you come back to the "Change" page for an
already-created object, you get another three extra slots.

One small problem, though. It takes a lot of screen space to display all the
fields for entering related Choice objects. For that reason, Django offers a
tabular way of displaying inline related objects; you just need to change
the ``ChoiceInline`` declaration to read::

    class ChoiceInline(admin.TabularInline):
        #...

With that ``TabularInline`` (instead of ``StackedInline``), the
related objects are displayed in a more compact, table-based format:

.. image:: _images/admin12.png
   :alt: Add poll page now has more compact choices

Customize the admin change list
===============================

Now that the Poll admin page is looking good, let's make some tweaks to the
"change list" page -- the one that displays all the polls in the system.

Here's what it looks like at this point:

.. image:: _images/admin04t.png
   :alt: Poll 변경 리스트 페이지

By default, Django displays the ``str()`` of each object. But sometimes it'd be
more helpful if we could display individual fields. To do that, use the
``list_display`` admin option, which is a tuple of field names to display, as
columns, on the change list page for the object::

    class PollAdmin(admin.ModelAdmin):
        # ...
        list_display = ('question', 'pub_date')

Just for good measure, let's also include the ``was_published_recently`` custom
method from Tutorial 1::

    class PollAdmin(admin.ModelAdmin):
        # ...
        list_display = ('question', 'pub_date', 'was_published_recently')

Now the poll change list page looks like this:

.. image:: _images/admin13t.png
   :alt: Polls change list page, updated

You can click on the column headers to sort by those values -- except in the
case of the ``was_published_recently`` header, because sorting by the output
of an arbitrary method is not supported. Also note that the column header for
``was_published_recently`` is, by default, the name of the method (with
underscores replaced with spaces), and that each line contains the string
representation of the output.

You can improve that by giving that method (in ``models.py``) a few
attributes, as follows::

    class Poll(models.Model):
        # ...
        def was_published_recently(self):
            return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
        was_published_recently.admin_order_field = 'pub_date'
        was_published_recently.boolean = True
        was_published_recently.short_description = 'Published recently?'

Edit your admin.py file again and add an improvement to the Poll change list page: Filters. Add the
following line to ``PollAdmin``::

    list_filter = ['pub_date']

That adds a "Filter" sidebar that lets people filter the change list by the
``pub_date`` field:

.. image:: _images/admin14t.png
   :alt: Polls change list page, updated

The type of filter displayed depends on the type of field you're filtering on.
Because ``pub_date`` is a :class:`~django.db.models.fields.DateTimeField`,
Django knows to give appropriate filter options: "Any date," "Today," "Past 7
days," "This month," "This year."

This is shaping up well. Let's add some search capability::

    search_fields = ['question']

That adds a search box at the top of the change list. When somebody enters
search terms, Django will search the ``question`` field. You can use as many
fields as you'd like -- although because it uses a ``LIKE`` query behind the
scenes, keep it reasonable, to keep your database happy.

Finally, because Poll objects have dates, it'd be convenient to be able to
drill down by date. Add this line::

    date_hierarchy = 'pub_date'

That adds hierarchical navigation, by date, to the top of the change list page.
At top level, it displays all available years. Then it drills down to months
and, ultimately, days.

Now's also a good time to note that change lists give you free pagination. The
default is to display 100 items per page. Change-list pagination, search boxes,
filters, date-hierarchies and column-header-ordering all work together like you
think they should.

Customize the admin look and feel
=================================

Clearly, having "Django administration" at the top of each admin page is
ridiculous. It's just placeholder text.

That's easy to change, though, using Django's template system. The Django admin
is powered by Django itself, and its interfaces use Django's own template
system.

Open your settings file (``mysite/settings.py``, remember) and look at the
:setting:`TEMPLATE_DIRS` setting. :setting:`TEMPLATE_DIRS` is a tuple of
filesystem directories to check when loading Django templates. It's a search
path.

By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to it, to
tell Django where our templates live::

    TEMPLATE_DIRS = (
        '/home/my_username/mytemplates', # Change this to your own directory.
    )

Now copy the template ``admin/base_site.html`` from within the default Django
admin template directory in the source code of Django itself
(``django/contrib/admin/templates``) into an ``admin`` subdirectory of
whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, if
your :setting:`TEMPLATE_DIRS` includes ``'/home/my_username/mytemplates'``, as
above, then copy ``django/contrib/admin/templates/admin/base_site.html`` to
``/home/my_username/mytemplates/admin/base_site.html``. Don't forget that
``admin`` subdirectory.

Then, just edit the file and replace the generic Django text with your own
site's name as you see fit.

This template file contains lots of text like ``{% block branding %}``
and ``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's
template language. When Django renders ``admin/base_site.html``, this
template language will be evaluated to produce the final HTML page.
Don't worry if you can't make any sense of the template right now --
we'll delve into Django's templating language in Tutorial 3.

Note that any of Django's default admin templates can be overridden. To
override a template, just do the same thing you did with ``base_site.html`` --
copy it from the default directory into your custom directory, and make
changes.

Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by default,
how was Django finding the default admin templates? The answer is that, by
default, Django automatically looks for a ``templates/`` subdirectory within
each app package, for use as a fallback. See the :ref:`template loader
documentation <template-loaders>` for full information.

Customize the admin index page
==============================

On a similar note, you might want to customize the look and feel of the Django
admin index page.

By default, it displays all the apps in :setting:`INSTALLED_APPS` that have been
registered with the admin application, in alphabetical order. You may want to
make significant changes to the layout. After all, the index is probably the
most important page of the admin, and it should be easy to use.

The template to customize is ``admin/index.html``. (Do the same as with
``admin/base_site.html`` in the previous section -- copy it from the default
directory to your custom template directory.) Edit the file, and you'll see it
uses a template variable called ``app_list``. That variable contains every
installed Django app. Instead of using that, you can hard-code links to
object-specific admin pages in whatever way you think is best. Again,
don't worry if you can't understand the template language -- we'll cover that
in more detail in Tutorial 3.

When you're comfortable with the admin site, read :doc:`part 3 of this tutorial
</intro/tutorial03>` to start working on public poll views.
