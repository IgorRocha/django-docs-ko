FAQ: 장고의 사용
=================

왜 저는 DJANGO_SETTINGS_MODULE을 임포팅(importing)을하면 에러가 발생하나요? 
-------------------------------------------------------------

확인하세요:

* DJANGO_SETTINGS_MODULE 환경변수를 fully-qualified 파이썬 모듈로 세팅을 하세요
  (i.e. "mysite.settings").

* 모듈을 설정하세요``sys.path`` (``import mysite.settings`` 가 작동해야합니다.).

* 이 모듈은 구문오류를 포합하고있지 않습니다.(물론이죠).

* 만약 사용자께서 장고 요청 handler 사용하는것이 *아닌*, mod_python을 사용하는 중이라면,
  사용자 께서는 ``SetEng``;의 사용과 관련된 mod_python 버그 주위에 대하여 작업을 하실필요가 있습니다. 
  사용자께서 사용자가 해야할 필요가있는 장고로 부터 어떠한것을 임포트(import)하기전에 말이죠.
  다음사항을 따르세요::

        os.environ.update(req.subprocess_env)

  (where ``req`` is the mod_python request object).

저는 당신의 템플릿 언어에 stand할수가 없습니다. 제가 반드시 그것을 사용해야할까요?
----------------------------------------------------------

우리는 우리의 템플릿 엔진이 chunky 베이컨 이후 가장 좋은 것이라고 생각이 들었습니다.
하지만 우리는 템플릿 언어를 선택하는 것은 종교에 가깝다는것을 깨닳았습니다.
거기엔 템플릿 언어를 사용하는것을 요구하는 장고에 대해 아무것도 없습니다.
그래서 당신이 어떤 ZPT, 치타 또는 무엇이든지 첨부하거나한다면, 마음대로 사용하셔도 좋습니다.

제가 당신의 model/database 계층을 사용해야 합니까?
-------------------------------------------

아니요. 그 템플릿 시스템 처럼, 그 모델/데이터베이스 계층은 프레임워크의 나머지로부터 decoupled 됩니다.

한 가지 예외는: 만약 사용자께서 다른 데이터베이스 라이브러리를 사용하신다면,
사용자께서는 장고의 자동 생성된 관리 사이트를 사용할수 없을 것입니다.
그 앱은 장고 데이터베이스 계층에 coupled 됩니다.

어떻게 제가 이미지와 피일필드를 사용할수있나요?
-----------------------------------

모델 안에서 클래스:`~django.db.models.FileField` 또는
:class:`~django.db.models.ImageField` 몇가지 스텝이 있습니다:

#. 사용자의 설정파일 안에서, 사용자께선 정의를 할 필요가 있습니다 :setting:`MEDIA_ROOT` as
   사용자께서 업로드된 파일을 저장하기위해 장고the full path to a directory where you'd like Django to store uploaded
   files. (For performance, these files are not stored in the database.)
   Define :setting:`MEDIA_URL` as the base public URL of that directory.
   Make sure that this directory is writable by the Web server's user
   account.
설정 파일에서 정의해야합니다 : 설정 :`MEDIA_ROOT`로
    당신은 장고 업로드 저장하고자하는 디렉토리에 대한 전체 경로
    파일. (성능을 위해 이러한 파일은 데이터베이스에 저장되지 않습니다.)
    정의 : 설정을`MEDIA_URL`해당 디렉토리의 기본 공용 URL 있습니다.
    이 디렉토리는 웹 서버의 사용자에 의해 쓰기되어 있는지 확인합니다
    계정입니다.
#. Add the :class:`~django.db.models.FileField` or
   :class:`~django.db.models.ImageField` to your model, making sure to
   define the :attr:`~django.db.models.FileField.upload_to` option to tell
   Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload
   files.

#. All that will be stored in your database is a path to the file
   (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the
   convenience :attr:`~django.core.files.File.url` attribute provided by
   Django. For example, if your :class:`~django.db.models.ImageField` is
   called ``mug_shot``, you can get the absolute path to your image in a
   template with ``{{ object.mug_shot.url }}``.

어떻게 제가 모든 제 템플릿에 variable이 사용가능하도록 만들수 있을까요?
-------------------------------------------------------

때때로 사용자의 템플릿은 모두 같은것을 필요로 합니다. 일반적인 예는
역동적으로 생성된 메뉴일것입니다. 언뜻보기에는, 간단히 템플릿 컨텟스트에 공통 dictionary를 
추가하는것 처럼 보입니다.

올바른 해결책은 ``RequestContext``를 사용하는 것입니다. 
이것을 하는 방법의 세부사항은 여기::ref:`subclassing-context-requestcontext`.
