# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
#
# Translators:
# Yong Choi <sk8er.choi@gmail.com>, 2013
msgid ""
msgstr ""
"Project-Id-Version: Django Docs Korean\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-27 10:43\n"
"PO-Revision-Date: 2013-05-21 17:16+0900\n"
"Last-Translator: Yong Choi <sk8er.choi@gmail.com>\n"
"Language-Team: Korean (http://www.transifex.com/projects/p/django-docs-"
"korean/language/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.5.4\n"

# 3ad91db2a03e474a807c410658a078c1
#: ../../intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr "첫 Django 패치 작성하기"

# c4be5f16dbb046a3b1b92ebfc7aba8dd
#: ../../intro/contributing.txt:6
msgid "Introduction"
msgstr "도입"

# 49495c10e9d64e4e8bd3371495de4110
#: ../../intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature "
"you want added."
msgstr ""
"커뮤니티에 보답하고 싶으신가요?고치고 싶은 버그가 있거나, 추가하고 싶은 기능"
"이 있으실지도 모릅니다."

# 51536de736c949128cf44f0c9451f6e9
#: ../../intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""
"장고에 공헌하는 것이야말로 자신의 관심을 드러내는 최선의 방법입니다. 처음에"
"는 부담스러워 보일지도 모르지만, 정말 아주 간단합니다. 우리는 전체 프로세스"
"를 살펴볼 것이므로, 여러분은 예를 통해 배울 수 있습니다."

# 0071c02bd371489288517e48de5b82e3
#: ../../intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr "이 튜토리얼은 누구를 위한 것인가요?"

# ee1254f7cabf43f08b81614cb6d87774
#: ../../intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of "
"how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app</intro/"
"tutorial01>`. In addition, you should have a good understanding of Python "
"itself. But if you don't, \"Dive Into Python\" (for `Python 2`__, for "
"`Python 3`__) is a fantastic (and free) online book for beginning Python "
"programmers."
msgstr ""
"이 튜토리얼에서는 독자가 Django가 어떻게 동작하는지에 대한 기초 지식을 갖고 "
"있다고 가정합니다. 즉, :doc:`첫 번째 Django 앱 만들기 </intro/tutorial01>`\\ "
"에서 다루는 내용에 대해서 숙지하고 있어야 합니다. 그외에 여러분은 파이썬 자체"
"에 대해 잘 이해하고 있어야 합니다. 그렇지 않은 분은, 초보 파이썬 프로그래머"
"를 위한 훌륭한 온라인북인 \"파이썬으로 뛰어들기\" (`Python 2`__, `Python "
"3`__)를 읽어보시기를 권합니다."

# b5fa0cfc8a944efbad9cf96fcd3b1ef6
#: ../../intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get "
"started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""
"버전 관리 시스템과 Trac에 대해 잘 모르는 분은 이 튜토리얼과 튜토리얼에 포함"
"된 링크를 통해 충분한 정보를 찾을 수 있을 것입니다. 하지만, 장고에 계속 공헌"
"하고자 한다면 이러한 다른 도구들에 대하여 더 읽어두는 것도 좋을 것입니다."

# 96bdb1470e054da494857c6b71800d75
#: ../../intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""
"하지만 대부분의 경우,이 튜토리얼은 폭넓은 독자에게 사용이 될 수 있도록 최대"
"한 설명하려고 합니다."

# 1ad43bd1beee4f3a881d4d78f24b3a3f
#: ../../intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-developers`__ or drop by `#django-dev on irc.freenode.net`__ to "
"chat with other Django users who might be able to help."
msgstr ""
"이 튜토리얼을 읽어가는 데에 문제가 있다면, `django-developers`__\\ 에 메시지"
"를 게시하거나 `#django-dev on irc.freenode.net`__\\ 에서 도움을 줄 수 있을 만"
"한 장고 사용자와 채팅을 해보시기 바랍니다."

# cd80568d3c404235a145a0a19af3bf55
#: ../../intro/contributing.txt:46
msgid "What does this tutorial cover?"
msgstr "이 튜토리얼이 다루는 내용은 무엇입니까?"

# 5d4c65b7745c437db5c0d57ef8c22c99
#: ../../intro/contributing.txt:48
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""
"우리는 여러분이 장고에 대한 패치를 처음으로 제출하는 과정을 다룹니다. 이 튜토"
"리얼을 마칠 때에는, 관련된 도구와 프로세스 모두에 대한 기본적인 이해를 갖게 "
"될 것입니다. 특히, 우리는 다음을 다루게 됩니다."

# d00c755b1b314df98c5730ab93f0155c
#: ../../intro/contributing.txt:52
msgid "Installing Git."
msgstr "GIT를 설치합니다."

# 34697a55fe354533be7f05b31bbde7b6
#: ../../intro/contributing.txt:53
msgid "How to download a development copy of Django."
msgstr "장고의 개발 사본을 다운로드하는 방법."

# 935359abf3d2455a9932471caf63f34c
#: ../../intro/contributing.txt:54
msgid "Running Django's test suite."
msgstr "장고의 테스트 스위트를 실행할 수 있습니다."

# 657930f4850544bc9c99d5dae2a00662
#: ../../intro/contributing.txt:55
msgid "Writing a test for your patch."
msgstr "패치에 대한 테스트를 작성."

# cf2e5f21af2d45aeb2a8bcc826498483
#: ../../intro/contributing.txt:56
msgid "Writing the code for your patch."
msgstr "패치의 코드를 작성."

# ba3b5dcacf5443c99f026ab498b26fee
#: ../../intro/contributing.txt:57
msgid "Testing your patch."
msgstr "패치를 테스트합니다."

# b7702ec95bbd40939c7141fe8664e12e
#: ../../intro/contributing.txt:58
msgid "Generating a patch file for your changes."
msgstr "변경 사항에 대한 패치 파일을 생성."

# 119915c76f1f403fab4771b3ba6387d4
#: ../../intro/contributing.txt:59
msgid "Where to look for more information."
msgstr "더 많은 정보를 찾을 수 있는 곳."

# 5cf118a4e94148f5975554c89810f0b9
#: ../../intro/contributing.txt:61
msgid ""
"Once you're done with the tutorial, you can look through the rest of :doc:"
"`Django's documentation on contributing</internals/contributing/index>`. It "
"contains lots of great information and is a must read for anyone who'd like "
"to become a regular contributor to Django. If you've got questions, it's "
"probably got the answers."
msgstr ""
"이 튜토리얼을 마친 후에는, :doc:`장고에 참여하기 문서</internals/"
"contributing/index>`\\ 의 나머지 부분을 살펴볼 수 있을 것입니다. 그것은 좋은 "
"정보를 많이 포함하므로 장고에 정기적으로 기여하고 싶은 사람이라면 누구나 읽어"
"야 합니다. 궁금한 점이 있다면, 아마도 거기에 답이 있을 것입니다."

# 5bf8ef7b0a64449fb70f5b2fdee32842
#: ../../intro/contributing.txt:68
msgid "Installing Git"
msgstr "GIT 설치"

# 53925429ef8941738b00f00fb0e095ed
#: ../../intro/contributing.txt:70
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""
"이 튜토리얼에서와 같이, 현재 개발 버전의 Django를 다운로드하고 수정하여 패치 "
"파일을 생성하기 위해서는 Git을 설치할 필요가 있습니다."

# 271a5f8263f9401ba783c50f1563e40d
#: ../../intro/contributing.txt:74
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could be found, "
"you'll have to download and install it, see `Git's download page`__."
msgstr ""
"Git이 설치되었는지 확인하기 위해서는, 명령행에 ``git``\\ 을 입력합니다. 명령"
"을 찾을 수 없다는 메시지가 보인다면, `Git's download page`__\\ 를 참조하여 다"
"운로드하고 설치합니다."

# d9ad275828c949e39d6ae58cb7483a11
#: ../../intro/contributing.txt:78
msgid ""
"If you're not that familiar with Git, you can always find out more about its "
"commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""
"Git에 익숙하지 않은 경우에는 명령행에서 ``git help``\\ 를 실행하여 해당 명령"
"에 대한 자세한 내용을 찾을 수 있습니다(git이 설치되어 있어야 합니다)."

# 6d540e62e3724782804a1bd49ad944c7
#: ../../intro/contributing.txt:84
msgid "Getting a copy of Django's development version"
msgstr "Django 개발 버전의 사본을 얻기"

# 9be76c23721a43fb8cc5d4624ce81226
#: ../../intro/contributing.txt:86
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr ""
"Django에 공헌하는 첫걸음은 소스 코드의 사본을 구하는 것입니다. 명령행에서, "
"``cd`` 명령을 사용하여 Django의 로컬 사본을 둘 곳으로 이동하세요."

# caccabef1dec4b0083a8e249e789a650
#: ../../intro/contributing.txt:90
msgid ""
"Download the Django source code repository using the following command::"
msgstr "다음의 명령을 사용하여 Django 소스 코드 저장소를 다운로드합니다."

# 5736fc9f4a704c868194a94fecfdbd90
#: ../../intro/contributing.txt:96
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr ""
"`virtualenv`__\\ 를 사용하는 경우에는 다음과 같이 할 수 있습니다.\n"
"::"

# ec3c486cb9b54ce1b6b194142031f480
#: ../../intro/contributing.txt:100
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``) "
"to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr ""
"(``django``\\ 는 ``setup.py``\\ 를 포함하는 클론의 디렉토리입니다) 가상 환경"
"으로 복제 체크 아웃을 연결합니다. 이것은 Django의 개발 사본을 시스템의 다른 "
"부분으로부터 분리함으로써 패키지 충돌이 일어나는 것을 피할 수 있는 좋은 방법"
"입니다."

# 4687966aba7a48ec8b56ac0eef8a42e0
#: ../../intro/contributing.txt:108
msgid "Rolling back to a previous revision of Django"
msgstr "이전 리비전의  Django로 되돌리기"

# 5566d8e677ae4e84889e86e715a7586d
#: ../../intro/contributing.txt:110
msgid ""
"For this tutorial, we'll be using `ticket #17549`__ as a case study, so "
"we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""
"이 튜토리얼에서, 우리는 `ticket #17549`__\\ 에 대한 사례 연구를 통해, 해당 티"
"켓의 패치를 적용하기에 앞서 git에서 Django의 버전 히스토리를 반추할 것입니"
"다. 이를 통해 Django의 테스트 스위트를 실행하는 것을 포함하여, 패치를 작성하"
"는 데에 있어서 거치는 단계를 차근차근 따라가보도록 하겠습니다."

# 523f62715f0344339b68b6d1a6096023
#: ../../intro/contributing.txt:115
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk "
"for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a ticket!**"
msgstr ""
"**\\ 튜토리얼에서는 구 버전의 Django 트렁크를 사용한다는 것에 유의하세요. 여"
"러분이 티겟에 대한 패치를 직접 작성할 때에는 항상 현재의 개발 리비전으로 작업"
"하여야 합니다!**"

# 0a0c4776cb1e48918e63439e43d30c58
#: ../../intro/contributing.txt:121
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to "
"Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Consequently, "
"we'll be using the revision of Django just prior to that, `commit "
"39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""
"이 티켓에 대한 패치는 Ulrich Petri가 작성하였으며, `commit "
"ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__\\ 으로서 Django에 적용되었습니"
"다. 그러므로, 여기에서는 그 이전의 Django 리비전인 `commit "
"39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__\\ 를 사용할 것입니다."

# fc2a6893403340208c4b1f2af62613aa
#: ../../intro/contributing.txt:130
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""
"Django의 최상위 디렉토리(``django``, ``docs``, ``tests``, ``AUTHORS`` 등의 디"
"렉토리들이 있는 곳입니다)로 이동합니다. 다음과 같이, 이 튜토리얼에서 사용할 "
"구 리비전을 체크아웃합니다."

# 691de78639da4623998efe2e72994442
#: ../../intro/contributing.txt:137
msgid "Running Django's test suite for the first time"
msgstr "Django의 테스트 스위트를 처음으로 실행하기"

# 886489561f424fcf9d3050e23772e9a7
#: ../../intro/contributing.txt:139
msgid ""
"When contributing to Django it's very important that your code changes don't "
"introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""
"장고에 기여할 때에는 여러분이 변경하는 코드로 인하여 Django의 다른 영역에 새"
"로운 버그가 발생하지 않도록 하는 것이 매우 중요합니다. 당신이 변경 한 후 장고"
"는 여전히 작동하는지 확인하는 한 가지 방법은 장고의 테스트 스위트를 실행하는 "
"것입니다. 모든 테스트를 여전히 통과한다면, 변경 사항이 Django를 완전히 망가뜨"
"리지 않았다는 것을 합리적으로 확신 할 수 있습니다. 이전에 장고의 테스트 스위"
"트를 실행해본 적이 없다면, 출력이 어떻게 보이는지 익숙해질 수 있도록 그냥 한"
"번 수행해보는 것도 좋은 생각입니다."

# 7d5016bd240741bd8c0ff8ba36986807
#: ../../intro/contributing.txt:147
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""
"테스트 스위트는 단순히 Django의 ``tests/`` 디렉토리로 ``cd``\\ 해서, GNU/"
"Linux, Mac OS X 또는 기타 유닉스 계열에서는 다음을 수행합니다. ::"

# 0c36b0013b5b4f12a4f835bc767ffba2
#: ../../intro/contributing.txt:153
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""
"윈도우즈를 사용한다면, 기본 Git 설치 시에 제공되는 \"Git Bash\"를 사용하여 작"
"업하여야 합니다. GitHub에는 `nice tutorial`__\\ 이 있습니다."

# 16f6d1f8c7124ded947018a6f3ff099c
#: ../../intro/contributing.txt:160
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""
"``virtualenv``\\ 를 사용하는 경우에는, 테스트를 수행할 때 ``PYTHONPATH=..``"
"\\ 를 생략할 수 있습니다. 이는 파이썬으로 하여금 Django를 ``tests``\\ 의 부"
"모 디렉토리에서 찾도록 합니다. ``virtualenv``\\ 는 자동으로 Django의 사본을 "
"``PYTHONPATH``\\ 에 둡니다."

# 60975b38ee73481f99793c8aa6ffa636
#: ../../intro/contributing.txt:165
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the "
"speed of your computer."
msgstr ""
"이제 앉아서 쉽니다. Django의 전체 테스트 스위트는 4800 개의 서로 다른 테스트"
"로 이루어져 있으므로, 실행하는 데에는 여러분의 컴퓨터 성능에 따라 5분에서 15"
"분 정도가 걸릴 것입니다."

# 62b8007366bb490489c404f999e5913d
#: ../../intro/contributing.txt:169
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions "
"failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""
"Django의 테스트 스위트를 실행하는 동안, 각 테스트가 실행되는 상태를 나타내는 "
"문자들이 흘러가는 것을 볼 수 있습니다. ``E``\\ 는 테스트 도중에 오류가 발생했"
"음을 나타내며, ``F``\\ 는 테스트의 단정문이 실패했음을 나타냅니다. 이런 것들"
"은 모두 테스트 실패로 간주합니다. 한편, ``X``\\ 와 ``S``\\ 는 각각 오류 및 생"
"략된 테스트를 가리킵니다. 마침표는 테스트를 통과하였음을 표시합니다."

# 542427ef29004f078b9f36bce0b00676
#: ../../intro/contributing.txt:176
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see :ref:`running-unit-tests-dependencies` for a list of "
"dependencies and be sure to install any for tests related to the changes you "
"are making (we won't need any for this tutorial)."
msgstr ""
"테스트가 생략되는 것은 보통 테스트를 수행하는 데에 필요한 외부의 라이브러리"
"가 없기 때문입니다. :ref:`running-unit-tests-dependencies`\\ 에서 필요한 라이"
"브러리를 확인하여, 여러분이 수정한 내용과 관계되는 것들은 설치하도록 합니다"
"(이 튜토리얼에서는 아무 것도 필요하지 않습니다)."

# e37b88e84766450da667ab24959c9eca
#: ../../intro/contributing.txt:181
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See :ref:`running-unit-tests` for more information."
msgstr ""
"검사가 완료되면, 테스트 스위트 통과했거나 실패했다는 메시지를 보게 될 것입니"
"다. 아직 Django의 코드를 전혀 변경하지 않았으므로, 전체 테스트를 **반드시** "
"통과해야 합니다. 실패하였으나 오류가 발생하였다면 이전의 모든 단계를 올바로 "
"따라서 문제를 해결해야 합니다. :ref:`running-unit-tests`\\ 에서 자세한 내용"
"을 확인하세요."

# 8c71e13181eb47a4a867ef5f2ebe4309
#: ../../intro/contributing.txt:187
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken "
"down by Python version and database backend."
msgstr ""
"최종의 Django 트렁크는 항상 안정적이지 않을 수도 있습니다. 트렁크에서 개발하"
"는 경우, 여러분의 특정 컴퓨터에서만 발생하는 문제인지 혹은 Django의 공식 빌드"
"에서도 발생하는 문제인지를 판단하기 위해 `Django's continuous integration "
"builds`__\\ 를 확인할 수 있습니다. 특정 빌드 보기를 클릭하면, 문제가 되는 파"
"이썬 버전과 데이터베이스 백엔드를 기록한 \"구성 매트릭스\"를 볼 수 있습니다."

# eec451bbb4d34193a09717b76a3fdfb3
#: ../../intro/contributing.txt:198
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is "
"sufficient, however, it's possible (and sometimes necessary) to :ref:`run "
"the tests using a different database <running-unit-tests-settings>`."
msgstr ""
"이 튜토리얼과 여러분이 작업하는 티켓에 대해서는 SQLite로 작업하는 것으로 충분"
"하지만, :ref:`다른 데이터베이스에서 테스트를 수행 <running-unit-tests-"
"settings>`\\ 하는 것이 가능합니다(때로는 필수적입니다)."

# 20b8e6e0d2104660b1371e59378cbc60
#: ../../intro/contributing.txt:204
msgid "Writing some tests for your ticket"
msgstr "티켓에 대한 테스트를 작성하기"

# 55c5aed18bec446892f2a7105e2d5d61
#: ../../intro/contributing.txt:206
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists "
"and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""
"대부분의 경우에, Django에 대한 패치를 접수할 때에는 테스트를 포함합니다. 버"
"그 수정 패치의 경우, 이것은 그 버그가 나중에 Django에서 다시 발생하지 않도록 "
"회귀 테스트를 작성하는 것을 의미합니다. 회귀 테스트는 버그가 존재하는 동안 실"
"패하다가 일단 버그가 수정되면 통과하도록 작성하여야 합니다. 새로운 기능을 포"
"함하는 패치의 경우 새로운 기능이 올바르게 작동하는지 확인하는 테스트를 포함해"
"야 합니다. 그러한 테스트들은 새로운 기능이 존재하지 않는 경우에는 실패하고, "
"구현이 되면 통과합니다."

# 85218aaf928b4397ae0e3943714ce785
#: ../../intro/contributing.txt:215
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet). "
"If your new tests don't fail, you'll need to fix them so that they do. After "
"all, a regression test that passes regardless of whether a bug is present is "
"not very helpful at preventing that bug from reoccurring down the road."
msgstr ""
"이 작업을 수행하는 좋은 방법은 코드를 변경하기 전에, 먼저 새로운 테스트부터 "
"작성하는 것입니다. 이러한 개발 스타일은 `test-driven development`__\\ 이라고 "
"불리우며, 낱개의 패치에서부터 전체 프로젝트에 이르기까지 적용이 가능합니다. "
"테스트를 작성한 후에는 (당신이 버그를 수정하거나 아직이 기능을 추가하지 않았"
"기 때문에) 그것들이 실제로 실패하는지 확인하기 위해 실행시켜보도록 합니다. "
"새 테스트가 실패하지 않을 경우, 테스트가 실패하도록 수정해야합니다. 버그가 있"
"든없든 통과하는 회귀 테스트라면 다시 발생하는 버그를 방지하는 데에 그다지 도"
"움이 되지 않습니다."

# 252e8dfdf2274a7485a3ced9abb98098
#: ../../intro/contributing.txt:224
msgid "Now for our hands-on example."
msgstr "이제 우리 예제를 살펴보도록 하겠습니다."

# cf9c042d45e245bba633f3659090fb45
#: ../../intro/contributing.txt:229
msgid "Writing some tests for ticket #17549"
msgstr "티켓 #17549에 대한 테스트 작성하기"

# c4093ae249ed4a4798739a37502d9b65
#: ../../intro/contributing.txt:231
msgid "`Ticket #17549`__ describes the following, small feature addition:"
msgstr "`Ticket #17549`__\\ 는 다음과 같은, 간단한 기능 추가입니다."

# 0799a796104c4dababd3cf6ccad69bc8
#: ../../intro/contributing.txt:233
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""
"URLField는 URL을 열 수 있는 방법을 제공하므로 쓸모가 있습니다. 이것이 없으면 "
"CharField을 사용할 수도 있습니다."

# 1fecdfb7224e40aa96ccb3d863fc1741
#: ../../intro/contributing.txt:236
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input "
"widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""
"이 티켓을 해결하기 위해, 우리는 ``AdminURLFieldWidget``\\ 에 ``render`` 메소"
"드를 추가함으로써 입력 위젯 위에 클릭 할 수 있는 링크를 표시할 예정입니다. 우"
"리는 이러한 변경을 하기 전에, 수정 사항이 올바르게 기능하며 앞으로도 제대로 "
"작동하는지 확인하기 위해 몇 가지 테스트를 작성하는 것입니다."

# 9259d34af8e14119a5d3153f32b11246
#: ../../intro/contributing.txt:242
msgid ""
"Navigate to Django's ``tests/admin_widgets/`` folder and open the ``tests."
"py`` file. Add the following code on line 269 right before the "
"``AdminFileWidgetTest`` class::"
msgstr ""

# 26afc7946a6f47d4830db0680a1bcdcd
#: ../../intro/contributing.txt:276
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""
"새로운 테스트는 우리가 추가할 ``render`` 메소드가 몇 가지 다른 상황에서 제대"
"로 작동하는지 확인합니다."

# 369da1ebbd3f4a66b8818127a2d2de5c
#: ../../intro/contributing.txt:281
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""
"이전에 테스트를 한번도 다뤄보지 않았다면, 처음에는 작성하기에 까다로울 수도 "
"있습니다. 다행히도, 테스트는 컴퓨터 프로그래밍에서 *매우* 큰 주제이기 때문"
"에, 많은 정보를 얻을 수 있습니다."

# 7719ce5f6c5c43119e470dcf74990899
#: ../../intro/contributing.txt:285
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on :doc:`Testing Django applications </topics/testing/"
"overview>`."
msgstr ""

# a47901923923440f806a02f55ef84526
#: ../../intro/contributing.txt:287
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""
"파이썬으로 뛰어들기(초보 파이썬 개발자를 위한 무료 온라인북)에 훌륭한 "
"`introduction to Unit Testing`__\\ 이 있습니다."

# 5b47eea6a96a489bbbe975f0291e4204
#: ../../intro/contributing.txt:289
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""
"그것들을 읽어본 후에, 좀 더 음미해보고 싶다면,`Python unittest "
"documentation`__\\ 를 읽어보기 바랍니다."

# e66eb911053d4dd6aad4535256e327af
#: ../../intro/contributing.txt:297
msgid "Running your new test"
msgstr ""

# 6f14a87cfb9c4c9ab6c5a220b91364ff
#: ../../intro/contributing.txt:299
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

# a7ee3bfb6edd44aa855207ce92e4f725
#: ../../intro/contributing.txt:307
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate "
"folder and class."
msgstr ""

# 524be2786746439c99cad364728aaf3f
#: ../../intro/contributing.txt:313
msgid "Writing the code for your ticket"
msgstr ""

# 2bdba2f2376e49b795b523f71987b526
#: ../../intro/contributing.txt:315
msgid ""
"Next we'll be adding the functionality described in `ticket #17549`__ to "
"Django."
msgstr ""

# 249672646dc54eb88598941b88450744
#: ../../intro/contributing.txt:318
msgid "Writing the code for ticket #17549"
msgstr ""

# ba505af736344898b86cc93cd45bd203
#: ../../intro/contributing.txt:320
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

# 6a3ccbb1380e433b8aced1117e5931fd
#: ../../intro/contributing.txt:337
msgid "Verifying your test now passes"
msgstr ""

# 58dec04dcfa240da8c34e7c51c67329d
#: ../../intro/contributing.txt:339
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working "
"correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into the "
"Django ``tests/`` directory and run::"
msgstr ""

# c00ddec456be4e139d9654bdaff3e121
#: ../../intro/contributing.txt:346
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""

# 7dc0903da79245fdab91ffc367eca934
#: ../../intro/contributing.txt:351
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of ``django/contrib/admin/"
"widgets.py`` so it looks as follows::"
msgstr ""

# d06414a9cf5049e4be8032ec473fc09f
#: ../../intro/contributing.txt:357
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""

# 59576ee8b324416ab0e431df50c57364
#: ../../intro/contributing.txt:364
msgid "Running Django's test suite for the second time"
msgstr "Django의 테스트 스위트를 두번째로 실행"

# f77de5bd78f141b294aa9d10aca7c92b
#: ../../intro/contributing.txt:366
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""
"패치와 태스트가 올바로 작동하는 것을 확인하였다면, 여러분이 변경한 부분이 "
"Django의 다른 부분에 어떠한 버그를 만들어내지 않았는지 확인하기 위해 전체 "
"Django 테스트 스위트를 실행해보는 것이 좋습니다. 전체 테스트 스위트를 통과하"
"였다고해서 버그가 없다고 확신할 수는 없지만, 모르고 지나쳤을 수도 있는 많은 "
"버그와 잘못을 찾아내는 데에 도움이 됩니다."

# 6166a442a2804b7188c84b320e594791
#: ../../intro/contributing.txt:372
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""
"Django 테스트 스위트 전체를 실행하려면, Django ``tests/`` 디렉토리로 ``cd``"
"\\ 하여 다음과 같이 실행합니다.\n"
"::"

# bcd3414654594bc2a1c77deb0a201b82
#: ../../intro/contributing.txt:377
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix "
"also made a `small CSS change`__ to format the new widget. You can make the "
"change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

# 2c8fe82570374ab08c386586ad58c173
#: ../../intro/contributing.txt:384
msgid "Writing Documentation"
msgstr ""

# 0fd751508b5d423392f789517225db1b
#: ../../intro/contributing.txt:386
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""

# f02aec861e3a4999a721892fdba09a8a
#: ../../intro/contributing.txt:395
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see :doc:`/internals/"
"contributing/writing-documentation`. That page also includes an explanation "
"of how to build a copy of the documentation locally, so you can preview the "
"HTML that will be generated."
msgstr ""

# b31d2448b7e04b24b44aeb5f954be9cf
#: ../../intro/contributing.txt:402
msgid "Generating a patch for your changes"
msgstr ""

# 1dbea3617d784ee9bd8c4f5e6d0a5fc3
#: ../../intro/contributing.txt:404
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""

# f316da08cef14399beecb60a21ac2d38
#: ../../intro/contributing.txt:410
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the "
"tutorial."
msgstr ""

# 58d32317c2114f3181fc25faf4c41769
#: ../../intro/contributing.txt:414
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the "
"command line.  If the patch's content looked okay, you can run the following "
"command to save the patch file to your current working directory::"
msgstr ""

# 046757ab19d447c8a28725c46122c150
#: ../../intro/contributing.txt:420
msgid ""
"You should now have a file in the root Django directory called ``17549."
"diff``. This patch file contains all your changes and should look this:"
msgstr ""

# ecbd698030e14eb891ce4a6d3145ec0b
#: ../../intro/contributing.txt:514
msgid "So what do I do next?"
msgstr ""

# 118b3186b051443c9270ef0c3280e266
#: ../../intro/contributing.txt:516
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a "
"more :doc:`git oriented workflow </internals/contributing/writing-code/"
"working-with-git>` is recommended."
msgstr ""

# 96e041da5d1748cbbf7783f7fe701647
#: ../../intro/contributing.txt:523
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""

# 7390d9ed3f65465ca0344977d9ae8a1a
#: ../../intro/contributing.txt:530
msgid "More information for new contributors"
msgstr ""

# aa95dd8416a64c98b40fd8736e9c4365
#: ../../intro/contributing.txt:532
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""

# 64a01757f9914130be43268b729b8d13
#: ../../intro/contributing.txt:535
msgid ""
"You should make sure to read Django's documentation on :doc:`claiming "
"tickets and submitting patches </internals/contributing/writing-code/"
"submitting-patches>`. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""

# 862084a800e040988ea1d824dc65d537
#: ../../intro/contributing.txt:540
msgid ""
"First time contributors should also read Django's :doc:`documentation for "
"first time contributors</internals/contributing/new-contributors/>`. It has "
"lots of good advice for those of us who are new to helping out with Django."
msgstr ""

# 633f752544fc44739fb5978f5636f877
#: ../../intro/contributing.txt:544
msgid ""
"After those, if you're still hungry for more information about contributing, "
"you can always browse through the rest of :doc:`Django's documentation on "
"contributing</internals/contributing/index>`. It contains a ton of useful "
"information and should be your first source for answering any questions you "
"might have."
msgstr ""

# 1aa1fd1f1a09485191b8a0f037ae630d
#: ../../intro/contributing.txt:551
msgid "Finding your first real ticket"
msgstr ""

# a30100da224544bdb1d651ad18a4a98b
#: ../../intro/contributing.txt:553
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are "
"often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing "
"patches for more difficult and complicated tickets."
msgstr ""

# cb51b49e4137427087aaf64e1e8d2cdb
#: ../../intro/contributing.txt:560
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on :doc:"
"`claiming tickets and submitting patches </internals/contributing/writing-"
"code/submitting-patches>`."
msgstr ""

# 300fdf3132874d05a4b4f10f2b4b7669
# 76ceea6d44264a44840d0c3518eac155
# e5327561f6de4c2cb6e2b5ddabcdf11a
#: ../../intro/contributing.txt:574 ../../intro/tutorial05.txt:641
#: ../../intro/tutorial06.txt:117
msgid "What's next?"
msgstr ""

# 5ddbad01e76547a5b2447f1fd50a537c
#: ../../intro/contributing.txt:576
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes. "
"After uploading a patch or submitting a pull request, be sure to update the "
"ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See :doc:`/internals/"
"contributing/triaging-tickets` for details."
msgstr ""

# 2b4475e3b2be46388b73357073032837
#: ../../intro/index.txt:2
msgid "Getting started"
msgstr "시작하기"

# ae62e3e280f94174b0821a77e2012ef4
#: ../../intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr "Django에 처음인가요?"

# 538722cd567e44c0a94d04ee06bb018e
#: ../../intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""

# b102091c4757477c97d2de2654ae8519
#: ../../intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""

# b6f06e635d8246e6b381b7eb5d96cf7e
#: ../../intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend \"Dive Into Python\" (for `Python 2`_, for "
"`Python 3`_, also available in a `dead-tree version`_). If that's not quite "
"your style, there are quite a few other `books about Python`_."
msgstr ""

# 6f82d1d2f447430ba6c6e533d05559a7
#: ../../intro/install.txt:2
msgid "Quick install guide"
msgstr "빠른 설치 안내"

# 096a0c5198734eada21c0217490a1c8b
#: ../../intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a :doc:"
"`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""

# 0a095f5daa5d4653a587f71b003f9bbb
#: ../../intro/install.txt:10
msgid "Install Python"
msgstr "파이썬 설치"

# 80bfe52983c8450d8bf5d54a5dd1be7e
#: ../../intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. It works with any "
"Python version from 2.6.5 to 2.7. It also features experimental support for "
"versions 3.2 and 3.3. All these versions of Python include a lightweight "
"database called SQLite_ so you won't need to set up a database just yet."
msgstr ""

# 65698525887e4abd85dbf47ebb3287e2
#: ../../intro/install.txt:19
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# 2ed0b58b59414e47b39579c25a097a3a
#: ../../intro/install.txt:24
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# b08b1c2c01f04b85b2ba3be1cad487a9
#: ../../intro/install.txt:29
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""

# 11d2850cc7f140ccb6095993243e9b29
#: ../../intro/install.txt:38
msgid "Set up a database"
msgstr "데이터베이스 구축"

# 0922072071a5422eac02e5248f014d53
#: ../../intro/install.txt:40
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the :ref:`database installation information <database-installation>`."
msgstr ""

# b3d4c158c04d4541bdcfd2f4b2b599e9
#: ../../intro/install.txt:45
msgid "Remove any old versions of Django"
msgstr ""

# 412031bca8b948c7973175cd3fa2adce
#: ../../intro/install.txt:47
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""

# 32c87a2a2b0247c49d3ac8da2ba3566a
#: ../../intro/install.txt:52
msgid "Install Django"
msgstr "장고 설치"

# 75d2b926209f4cc4a7fc443061e38a7c
#: ../../intro/install.txt:54
msgid "You've got three easy options to install Django:"
msgstr ""

# cd72f2be0fbe4ec2aac059864c2db81b
#: ../../intro/install.txt:56
msgid ""
"Install a version of Django :doc:`provided by your operating system "
"distribution </misc/distributions>`. This is the quickest option for those "
"who have operating systems that distribute Django."
msgstr ""

# 6d3f78ebd094423e8c756db83ba5beb0
#: ../../intro/install.txt:60
msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for users who want a stable version number and aren't "
"concerned about running a slightly older version of Django."
msgstr ""

# 8497472eeeb644a5882753b37a04ba6c
#: ../../intro/install.txt:64
msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This is best for users who want the latest-and-greatest features "
"and aren't afraid of running brand-new code."
msgstr ""

# 352db251de1247e6a9b88ace253f2107
#: ../../intro/install.txt:71
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""

# c34488ff3dc64ca98c1d5abb3793baa7
#: ../../intro/install.txt:78
msgid "Verifying"
msgstr ""

# 9631b8086347498292e308fcfd9fa961
#: ../../intro/install.txt:80
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""

# a2fa06db3eb642d18d25ab3d7697e6d5
#: ../../intro/install.txt:89
msgid "You may have another version of Django installed."
msgstr ""

# 857993e7b5434947bdeb1b60e74748cf
#: ../../intro/install.txt:92
msgid "That's it!"
msgstr ""

# c789e79621334177b4f4c28a8d514e73
#: ../../intro/install.txt:94
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

# a1eeadc183a042ad89a3e2026f4f2520
#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr "Django 한눈에 살펴보기"

# 436623eb443146c696b283c39114451a
#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""
"Django는 빠른 페이스의 뉴스룸 환경에서 개발되었기 때문에 일반적인 웹개발 작업"
"을 빠르고 쉽게 하도록 디자인 되었습니다. 이것은 Django로 데이터베이스 기반의 "
"웹 어플리케이션을 작성하는 것에 대한 간략한 개요입니다."

# 5ab756bef32f4306ba748f3d4f4c5824
#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""
"이 문서의 목표는 Django가 어떻게 동작하는지 이해하는데 충분한 기술적 세부 사"
"항을 전달하는 것 입니다. 이것은 튜터리얼이나 레퍼런스를 대신할수는 없습니다. "
"하지만 우린 그 두가지를 다 가지고 있지요! 프로젝트를 시작할 준비가 되었으면 :"
"doc:`튜터리얼로 시작 </intro/tutorial01>` 하거나 :doc:`좀더 세부적인 문서 </"
"topics/index>`\\ 로 곧장 뛰어들수 있습니다."

# bc30ea64cea24e5fb8c68b0a4d8fbc18
#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr "모델 설계"

# 71f75777b7c44cf9a48d321f7518fae2
#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an object-"
"relational mapper in which you describe your database layout in Python code."
msgstr ""
"Django를 데이터베이스 없이 사용할수는 있어도 어쨋든 파이썬 코드로 데이터베이"
"스 레이아웃을 설명하는 객체 관계 매퍼가 제공됩니다."

# bc9542325ad6423dace386200254a7c2
#: ../../intro/overview.txt:22
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving two years' worth of "
"database-schema problems. Here's a quick example, which might be saved in "
"the file ``mysite/news/models.py``::"
msgstr ""
":doc:`데이터-모델 문법 </topics/db/models>`\\ 은 모델을 표현할수 있는 풍부한 "
"방법을 제공합니다. -- 지금까지, 이 기능들은 다양한 데이터 베이스 스키마 문제"
"들을 해결해온 2년간의 실적이 있습니다. 다음의 간단한 예제는 ``mysite/news/"
"models.py``\\ 로 저장하시면 됩니다. ::"

# e299e90e0de140429ce57bdef016cd2c
#: ../../intro/overview.txt:43
msgid "Install it"
msgstr "설치하기"

# abdb888a3d09450695618eead602ea43
#: ../../intro/overview.txt:45
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""
"다음으로 데이터베이스 테이블을 자동으로 생성하기위해서 Django 명령줄 유틸리티"
"를 실행합니다."

# cdbdfc79b87d46b28254f4a650ae0fb2
#: ../../intro/overview.txt:52
msgid ""
"The :djadmin:`syncdb` command looks at all your available models and creates "
"tables in your database for whichever tables don't already exist."
msgstr ""
":djadmin:`syncdb` 명령어는 사용가능한 모든 모델을 찾아서 해당 테이블이 데이터"
"베이스에 존재하지 않는다면 생성합니다."

# de40361030b94b2c899abb4d77538e48
#: ../../intro/overview.txt:56
msgid "Enjoy the free API"
msgstr "무료 API 즐기기"

# 2d1885551c7643f88976561150122e02
#: ../../intro/overview.txt:58
msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary:"
msgstr ""

# 15353a0173244d3880f7050e318ef112
#: ../../intro/overview.txt:133
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""
"동적인 관리자 인터페이스: 단순한 뼈대 세우기가 아닙니다 -- 이것은 완성된 집입"
"니다"

# 399c3ad0ca1f4c81a5d8298e3ce8023c
#: ../../intro/overview.txt:135
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a Web site that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site::"
msgstr ""
"일단 모델이 정의되었다면 Django는 전문적이고 바로 써먹을수 있는 :doc:`관리자 "
"인터페이스 </ref/contrib/admin/index>`\\ 를 자동으로 만들수 있습니다 -- 관리"
"자 인터페이스는 인증된 사용자가 개체를 추가하고 변경하고 삭제할 수 있는 웹사"
"이트입니다. 관리자 사이트에 모델 개체를 등록하는건 정말 쉽습니다.::"

# b86e68066a3f4b8994a78cf8ae0c5a9a
#: ../../intro/overview.txt:158
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""
"운영자에 의해서나 고객, 혹은 단지 개발자 당신 스스로에 의해 수정될 수 있는 "
"이 사이트는 다음과 같은 철학을 가지고 있습니다. -- 단지 컨텐츠를 관리하기위"
"한 백엔드 인터페이스를 만드는 데에 힘을 쏟지 말자."

# 1c4650a824ac4228bc71d2bc1c29f898
#: ../../intro/overview.txt:162
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""
"Django 앱을 생성하는 하나의 전형적인 작업 흐름은 일단 모델을 만들고 관리자 사"
"이트를 올려서 가능한 빨리 작동할 수 있게 만드는 것입니다, 그래서 당신의 운영"
"자(혹은 고객)이 데이터 입력을 시작할 수 있게 합니다. 그러면 밖으로 데이터를 "
"표현하는 방법을 개발합니다."

# b3a693c607cc4229b35f0c3377830c2d
#: ../../intro/overview.txt:167
msgid "Design your URLs"
msgstr "URL 설계"

# d8568b8320274f54b2e3877af9c1ac36
#: ../../intro/overview.txt:169
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""
"깔끔하고 우아한 URL 계획은 고품질의 웹 어플리케이션에 매우 중요한 부분입니"
"다. Django는 아름다운 URL 설계를 장려하며 URL에  ``.php`` 나 ``.asp`` 같은 불"
"필요한 내용들을 넣지 않습니다."

# fedd0c77e4b44caabf09da956ee08255
#: ../../intro/overview.txt:173
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""
"앱을 위한 URL을 설계하기 위해서  :doc:`URLconf</topics/http/urls>` 파이썬 모"
"듈을 생성해야 합니다. 이것은 URL패턴과 파이선 콜백 함수 간의 간단한 매핑 정보"
"를 담고 있는 여러분의 앱에 대한 목차입니다. URLconf는 또한 파이썬 코드와 URL"
"간의 결합도를 낮춰줍니다."

# 7528a45ea4504f178e8caf0e66eeea64
#: ../../intro/overview.txt:178
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above::"
msgstr ""
"아래의 코드는 위의 ``Reporter``/``Article`` 예제에 대해서 URLconf를 어떻게 쓰"
"는지 보여줍니다.::"

# 0ad7fcbae83143e4bffda2b9be4c8f84
#: ../../intro/overview.txt:189
msgid ""
"The code above maps URLs, as simple regular expressions, to the location of "
"Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one "
"that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""
"위 코드에서는 파이썬 콜백 함수(\"views\")에 URL을 정규표현식으로 매핑합니다. "
"정규 표현식은 괄호를 URL에서 값을 \"포착\"해 오는데 사용합니다. 사용자가 페이"
"지를 요청했을 때 Django는 순서대로 각 패턴을 비교하고 요청된 URL과 처음으로 "
"매칭되는 곳에서 멈춥니다.(만약 아무것도 매칭되는 것이 없다면 Django는 "
"special-case 404 view를 호출합니다) 이 방식은 엄청나게 빠릅니다, 왜냐하면 정"
"규 표현식은 로딩되는 시점에 컴파일되기 때문입니다."

# 67202316c7a342188008dd6a93d83a48
#: ../../intro/overview.txt:197
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""
"한번 정규 표현식 하나가 매치되면 Django는 간단한 파이썬 함수인 view를 import"
"하고 호출 합니다. 각 view는 request object -- 각 요청에 대한 메타 데이터를 담"
"고 있는 -- 와 정규표현식으로 URL로 부터 포착한 값을 전달 받게 됩니다."

# 167acad10ac44cec9952cf627d13a684
#: ../../intro/overview.txt:201
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""
"예를 들어 사용자가 URL \"/articles/2005/05/39323/\"로 요청을 보냅니다, 그러"
"면 Django는 다음처럼 함수를 호출하게 됩니다. ``news.views.article_detail"
"(request,\n"
"'2005', '05', '39323')``"

# e80bf3066f2e42359c38465e40270edb
#: ../../intro/overview.txt:206
msgid "Write your views"
msgstr "뷰의 작성"

# a802024ee14442379e193cbe630354a6
#: ../../intro/overview.txt:208
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""
"각각의 뷰는 다음의 두가지 중에 하나를 수행할 책임이 있습니다.:\n"
"요청된 페이지의 내용을 담고 있는 :class:`~django.http.HttpResponse` 객체를 반"
"환 하거나, :class:`~django.http.Http404`\\ 와 같은 예외를 발생시키는 것 입니"
"다.\n"
"나머지는 여러분에게 달려있습니다."

# 7c909afb3f91493e8e224b05acb0649b
#: ../../intro/overview.txt:213
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above::"
msgstr ""
"일반적으로 뷰는 파라미터들에 따라 데이터를 가져오며 템플릿을 로드하고 템플릿"
"을 가져온 데이타로 렌더링합니다. 아래는 위에서 만든 ``year_archive`` 에 대한 "
"예제 뷰 입니다.::"

# 9b062b86f49245e68decaed7d26355a8
#: ../../intro/overview.txt:221
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""
"이 예제는 Django의 :doc:`template system </topics/templates>`\\ 을 사용합니"
"다. Djago 템플릿 시스템은 몇몇 강력한 기능들을 가지고 있지만 프로그래머가 아"
"닌 사람도 사용하기에 어렵지 않도록 간결함을 유지하도록 노력하였습니다."

# af0c8e7a6a534e5cb46a79c008a42fe6
#: ../../intro/overview.txt:226
msgid "Design your templates"
msgstr "자신만의 템플릿 작성"

# 56fd9dddac0d46558b95e111e6220904
#: ../../intro/overview.txt:228
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr "위의 코드는 ``news/year_archive.html`` 템플릿을 로드합니다."

# cd3ad2c8d4d34401be133873921c7624
#: ../../intro/overview.txt:230
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates. If a template doesn't exist in the first directory, "
"it checks the second, and so on."
msgstr ""

# 82d3869b69124452886a46e346f7647b
#: ../../intro/overview.txt:235
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

# 4cb2c1306e2e4edaa483489b06418a82
#: ../../intro/overview.txt:254
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup: They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# c8c223e41bee4bb2a8df85094d27732e
#: ../../intro/overview.txt:259
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function)."
msgstr ""

# 4f339c7dee5c4d4e92035c7c3ba7d6f2
#: ../../intro/overview.txt:264
msgid ""
"You can chain together as many filters as you'd like. You can write custom "
"filters. You can write custom template tags, which run custom Python code "
"behind the scenes."
msgstr ""

# 631e9953db2c4c96b6e9dfc68ac546c7
#: ../../intro/overview.txt:268
msgid ""
"Finally, Django uses the concept of \"template inheritance\": That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""

# c8407b55207d4efaab2e8e603b43ddfe
#: ../../intro/overview.txt:274
msgid ""
"Here's what the \"base.html\" template, including the use of :doc:`static "
"files </howto/static-files/index>`, might look like:"
msgstr ""

# be7c7ee367204960a629fb3ea99ec60f
#: ../../intro/overview.txt:290
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""

# cfafd9c4fa7241cebea0b7b8267528c4
#: ../../intro/overview.txt:294
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different cell-phone editions of sites -- "
"simply by creating a new base template."
msgstr ""

# 2736d20d38d34346afb07ed8d039d9c0
#: ../../intro/overview.txt:299
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""

# 2da8fa7fef3f4593a17d64b5f81c6758
#: ../../intro/overview.txt:308
msgid "This is just the surface"
msgstr ""

# 060ed53a00ad48f09c48aa3dff1e0d5f
#: ../../intro/overview.txt:310
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

# 003264306d8c450a878a75fe50eddd8a
#: ../../intro/overview.txt:313
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""

# 9446be2ddb2640f8b236deb3d4e07b9d
#: ../../intro/overview.txt:316
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

# 828711010efe4259a2c61e04de0984b5
#: ../../intro/overview.txt:319
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

# e675148c9d354b598639b7ed9a37bb73
#: ../../intro/overview.txt:322
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""

# 39c843979ebf47e495286de546cab2fa
#: ../../intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

# 437368c88c7d4f60a7adbbc55ca0ced1
#: ../../intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you "
"can reuse in new projects and share with other people."
msgstr ""

# 33a56eb293734b448d55f38911736e1c
#: ../../intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""

# 30edbcd96289426d825b31fd6fbbb9c9
#: ../../intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr ""

# c40d09db498f49c7926c9ca16107f982
#: ../../intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""

# adb95075e6e343d9a7da6c0213002745
#: ../../intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<http://guide.python-distribute.org/contributing.html#pypi-info>`_ has a "
"vast range of packages you can use in your own Python programs. Check out "
"`Django Packages <http://www.djangopackages.com>`_ for existing reusable "
"apps you could incorporate in your project. Django itself is also just a "
"Python package. This means that you can take existing Python packages or "
"Django apps and compose them into your own web project. You only need to "
"write the parts that make your project unique."
msgstr ""

# 50b4d6e6e1144a2f92e3042f6f59f4dc
#: ../../intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we "
"saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy "
"to use in new projects and ready to publish for others to install and use."
msgstr ""

# 15f6815ed9334687831c67a08eeedfc4
#: ../../intro/reusable-apps.txt:37
msgid ""
"A Python `package <http://docs.python.org/tutorial/modules.html#packages>`_ "
"provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""

# d662c2297f6949feb96d7a706d143d3f
#: ../../intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a "
"special file ``__init__.py``, even if this file is empty."
msgstr ""

# 7fbf89abf5fc453496fb18b8737a33be
#: ../../intro/reusable-apps.txt:45
msgid ""
"A Django *app* is just a Python package that is specifically intended for "
"use in a Django project. An app may also use common Django conventions, such "
"as having a ``models.py`` file."
msgstr ""

# 829018b96d834dc5aa29e626a4ced63e
#: ../../intro/reusable-apps.txt:49
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""

# b8c72a8ea93f427e8cc7fd6346551b00
#: ../../intro/reusable-apps.txt:54
msgid "Your project and your reusable app"
msgstr ""

# 696a7d749a9447608f381869069629d9
#: ../../intro/reusable-apps.txt:56
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

# f7b8097ee15f4b8e8899f4c4b5ca178f
#: ../../intro/reusable-apps.txt:86
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for "
"the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""

# e97e1cad21fd450d8630fa13955a69ed
#: ../../intro/reusable-apps.txt:93
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""

# 0b2dd46b52134623ab3af45c678325e6
#: ../../intro/reusable-apps.txt:100
msgid "Installing some prerequisites"
msgstr ""

# 6151978ee43f4da2b698b53d43bf980f
#: ../../intro/reusable-apps.txt:102
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use distribute_ to build our package. It's "
"a community-maintained fork of the older ``setuptools`` project. We'll also "
"be using `pip`_ to uninstall it after we're finished. You should install "
"these two packages now. If you need help, you can refer to :ref:`how to "
"install Django with pip<installing-official-release>`. You can install "
"``distribute`` the same way."
msgstr ""

# 81140af472ab4b0a8973780351a22a9c
#: ../../intro/reusable-apps.txt:114
msgid "Packaging your app"
msgstr ""

# 6ccbffe5aa1c4c8681828fe9ddd565b8
#: ../../intro/reusable-apps.txt:116
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""

# 45dcb814a49049d397d6d561718daf00
#: ../../intro/reusable-apps.txt:120
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""

# 2d12760470224532ad69216b9e3f362d
#: ../../intro/reusable-apps.txt:125
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""

# ef6f6a8f1b514d30ae428bbec8e693d5
#: ../../intro/reusable-apps.txt:131
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

# 8cf74c5a964847bcac01471c9a4f5c03
#: ../../intro/reusable-apps.txt:133
msgid "Create a file ``django-polls/README.rst`` with the following contents::"
msgstr ""

# d8bb3f8aa1f74db485cfc1a9aa09a78e
#: ../../intro/reusable-apps.txt:165
msgid ""
"4. Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."
msgstr ""
"4. Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."

# 1190721739c8405b83b527fccbee1fd0
#: ../../intro/reusable-apps.txt:172
msgid ""
"5. Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `distribute docs <http://packages.python.org/"
"distribute/setuptools.html>`_ have a good explanation. Create a file "
"``django-polls/setup.py`` with the following contents::"
msgstr ""
"5. Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `distribute docs <http://packages.python.org/"
"distribute/setuptools.html>`_ have a good explanation. Create a file "
"``django-polls/setup.py`` with the following contents::"

# 0602d8a593124e00aaacf6b4e0c64674
#: ../../intro/reusable-apps.txt:213
msgid ""
"Distribute is a drop-in replacement for ``setuptools``. Even though we "
"appear to import from ``setuptools``, since we have ``distribute`` "
"installed, it will override the import."
msgstr ""

# 0476170c900c4a74aa1c9b49c0abc18f
#: ../../intro/reusable-apps.txt:217
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"distribute docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following "
"contents::"
msgstr ""

# 5683985a07cb4a3ab174db522aa8d746
#: ../../intro/reusable-apps.txt:228
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

# 1285975e5f1c4c54a22e3f255bae40c3
#: ../../intro/reusable-apps.txt:234
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <http://readthedocs.org>`_."
msgstr ""

# 0247635036dc44c9bea4ca9b0852e23c
#: ../../intro/reusable-apps.txt:238
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""

# a5427d6de27c4da9921d5f5159f643ad
#: ../../intro/reusable-apps.txt:242
msgid ""
"For more information on packaging, see `The Hitchhiker's Guide to Packaging "
"<http://guide.python-distribute.org/quickstart.html>`_."
msgstr ""

# 2acb15afc3344ee19aa10f8ef01657d5
#: ../../intro/reusable-apps.txt:246
msgid "Using your own package"
msgstr ""

# 9a5001948df14f8bb880cc292af5cfb1
#: ../../intro/reusable-apps.txt:248
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

# 2918fc89aa314df8ba1a7c40e6d3a4c6
#: ../../intro/reusable-apps.txt:253
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as "
"well as preventing the package from affecting system services and other "
"users of the machine. Python 2.6 added support for user libraries, so if you "
"are using an older version this won't work, but Django 1.5 requires Python "
"2.6 or newer anyway."
msgstr ""

# a4f43097e8ac4821bc6eb0100f26ad0b
#: ../../intro/reusable-apps.txt:261
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""

# 7cef413fd8a2483dbcc13a0993f93f9f
#: ../../intro/reusable-apps.txt:265
msgid ""
"Inside ``django-polls/dist``, untar the new package ``django-polls-0.1.tar."
"gz`` (e.g. ``tar xzvf django-polls-0.1.tar.gz``). If you're using Windows, "
"you can download the command-line tool bsdtar_ to do this, or you can use a "
"GUI-based tool such as 7-zip_."
msgstr ""

# 8a0a18460803412f9b5a0331ff536854
#: ../../intro/reusable-apps.txt:270
msgid ""
"Change into the directory created in step 1 (e.g. ``cd django-polls-0.1``)."
msgstr ""

# 6df439552cb64863b49f3c0dfd4f5e38
#: ../../intro/reusable-apps.txt:272
msgid ""
"If you're using GNU/Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``python setup.py install --user`` at the shell prompt.  If you're "
"using Windows, start up a command shell and run the command ``setup.py "
"install --user``."
msgstr ""

# fbecacf951a44824a418fea5483cb60b
#: ../../intro/reusable-apps.txt:277
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""

# 79ed8cb2c3264851b113fd220eb741de
#: ../../intro/reusable-apps.txt:280
msgid ""
"To uninstall the package, use pip (you already :ref:`installed it "
"<installing-reusable-apps-prerequisites>`, right?)::"
msgstr ""

# b81c7316c22946feb49aff29f365c53c
#: ../../intro/reusable-apps.txt:290
msgid "Publishing your app"
msgstr ""

# c566bdc175234a958a1bf9c4c09f9407
#: ../../intro/reusable-apps.txt:292
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""

# 9560f871574440b2b7d228c746a02618
#: ../../intro/reusable-apps.txt:295
msgid "Email the package to a friend."
msgstr ""

# 1f60b06d7fc9407cb9854341502245d7
#: ../../intro/reusable-apps.txt:297
msgid "Upload the package on your Web site."
msgstr ""

# 264905c15d594fcaac1b74faeeb81e5f
#: ../../intro/reusable-apps.txt:299
msgid ""
"Post the package on a public repository, such as `The Python Package Index "
"(PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_."
msgstr ""

# e33d08518a9b4112840e82cb6a3a1310
#: ../../intro/reusable-apps.txt:302
msgid ""
"For more information on PyPI, see the `Quickstart <http://guide.python-"
"distribute.org/quickstart.html#register-your-package-with-the-python-package-"
"index-pypi>`_ section of The Hitchhiker's Guide to Packaging. One detail "
"this guide mentions is choosing the license under which your code is "
"distributed."
msgstr ""

# b2add0aacee14909b8367f50fc749e18
#: ../../intro/reusable-apps.txt:308
msgid "Installing Python packages with virtualenv"
msgstr ""

# c8abbe55d43d4b49be6c56fca886513e
#: ../../intro/reusable-apps.txt:310
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""

# b87deb9fbae8431b90a171ec47baffa6
#: ../../intro/reusable-apps.txt:313
msgid ""
"Modifying the user libraries can affect other Python software on your system."
msgstr ""

# dd7a44ec288a4500a2a3749c232b39d3
#: ../../intro/reusable-apps.txt:315
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""

# 7e761df49c05489e94dd4d2ff13e11f6
#: ../../intro/reusable-apps.txt:318
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""

# d2ec866b771544ab9245dce9935bfdf4
#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

# a8644f0e5c6c4dc2b9bde963320edcf1
#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

# b1fc566313e2439ba12710bb5e82a1b1
#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

# 080d248c8db849438c90b6de5f5aa393
#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

# 12057e417e994ff7b57678cdd38633c5
#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

# 42adf72885224ceb895fd5614debe736
#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

# 8be3206d303e4dfdbe20409823639c35
#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""

# 7527ea41337d4d5cb3e92dbcb59628c9
#: ../../intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""

# 3fa451bbc20e484fadd8e1e2b65eca36
#: ../../intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 2.x. If the Django "
"version doesn't match, you can refer to the tutorial for your version of "
"Django or update Django to the newest version. If you are using Python 3.x, "
"be aware that your code may need to differ from what is in the tutorial and "
"you should continue using the tutorial only if you know what you are doing "
"with Python 3.x."
msgstr ""

# 28349eaa2cb148b6b7ef8a521e979438
#: ../../intro/tutorial01.txt:32
msgid ""
"See :doc:`How to install Django </topics/install>` for advice on how to "
"remove older versions of Django and install a newer one."
msgstr ""

# 1cff1fb93734410295c45ebcfd4b2a6d
#: ../../intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with "
"other Django users who might be able to help."
msgstr ""

# c7241a9623f644919b7f71865de8f5bd
#: ../../intro/tutorial01.txt:45
msgid "Creating a project"
msgstr ""

# 1bacef9965e34b8787091681bed58c22
#: ../../intro/tutorial01.txt:47
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

# e1f92ec042084cabbb2ee2be26c44ebc
#: ../../intro/tutorial01.txt:53
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

# 957ceb321b594739a44d1c23ce4f0921
#: ../../intro/tutorial01.txt:60
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see :ref:`troubleshooting-django-admin-py`."
msgstr ""

# f03e61c1a7f84205bdea4d60367505b8
#: ../../intro/tutorial01.txt:65
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

# 78350f85274845d9995c6e19da12e8d0
#: ../../intro/tutorial01.txt:72
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document "
"root, because it risks the possibility that people may be able to view your "
"code over the Web. That's not good for security."
msgstr ""

# 21abeeb094734276af8005a30e4f1190
#: ../../intro/tutorial01.txt:79
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""

# 72cd01b2f3ee429c9beed11d132bcc0f
#: ../../intro/tutorial01.txt:82
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

# 3508db02021d4b9e95d62fa64b105413
#: ../../intro/tutorial01.txt:94
msgid ""
"The default project layout recently changed. If you're seeing a \"flat\" "
"layout (with no inner :file:`mysite/` directory), you're probably using a "
"version of Django that doesn't match this tutorial version.  You'll want to "
"either switch to the older tutorial or the newer Django version."
msgstr ""

# b341b7d8819d4cf8ba4909614e7e31c4
#: ../../intro/tutorial01.txt:99
msgid "These files are:"
msgstr ""

# d7e344a1baa94b3ba7913ae00223a380
#: ../../intro/tutorial01.txt:101
msgid ""
"The outer :file:`mysite/` directory is just a container for your project. "
"Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""

# ace9dfd35f9943b0bd8747b7d82b90a6
#: ../../intro/tutorial01.txt:105
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

# f433a86e357544babd0b469b68042787
#: ../../intro/tutorial01.txt:109
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``import mysite.settings``)."
msgstr ""

# 23463444e79c47f99e0055ac6721f0df
#: ../../intro/tutorial01.txt:113
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

# 52ce9326da074911a25dc49b70eb3ac3
#: ../../intro/tutorial01.txt:117
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

# 08b502564ee64fd79e2de9c382624c28
#: ../../intro/tutorial01.txt:121
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""

# 505029c6c0fd48d1a3625a694152127c
#: ../../intro/tutorial01.txt:125
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""

# 58a0180cb5664d70bcf005bcf02112b2
#: ../../intro/tutorial01.txt:131
msgid "The development server"
msgstr ""

# 3d28ce1fa7fb46b5b7c87b8949baca02
#: ../../intro/tutorial01.txt:133
msgid ""
"Let's verify this worked. Change into the outer :file:`mysite` directory, if "
"you haven't already, and run the command ``python manage.py runserver``. "
"You'll see the following output on the command line:"
msgstr ""

# f3bdd5d9bc1f48a19ed3bae2eeb858fc
#: ../../intro/tutorial01.txt:147
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""

# 44aeb3b49e694b7097f9c38e2737e3e2
#: ../../intro/tutorial01.txt:152
msgid ""
"Now's a good time to note: **Don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 78f8633e3ddd429788047d9000dcdf2a
#: ../../intro/tutorial01.txt:156
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

# c9a515cc6339420b8157450b424bed58
#: ../../intro/tutorial01.txt:162
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

# 3ad5aab664764a9783fcc0628fd701ff
#: ../../intro/tutorial01.txt:165
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""

# e31d86a6417c40c78e0dcc5f47c0c46e
#: ../../intro/tutorial01.txt:173
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""

# 65701fa07b5749b6bea9309403a3d499
#: ../../intro/tutorial01.txt:181
msgid ""
"Full docs for the development server can be found in the :djadmin:"
"`runserver` reference."
msgstr ""

# c1622f9f1d6b4b20a863bfbf541f552c
#: ../../intro/tutorial01.txt:185
msgid "Database setup"
msgstr ""

# aba8a9a1ed0b4fc69ab07a1fcabda47a
#: ../../intro/tutorial01.txt:187
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""

# 2e1cb2f917e64e4b930488545936bca4
#: ../../intro/tutorial01.txt:190
msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support "
"your database."
msgstr ""

# b47bcadccdfa4efebadd8170b3af2a2e
#: ../../intro/tutorial01.txt:195
msgid ""
"If you wish to use another database, install the appropriate :ref:`database "
"bindings <database-installation>`, and change the following keys in the :"
"setting:`DATABASES` ``'default'`` item to match your database connection "
"settings:"
msgstr ""

# dd9c5a68a1a54bfa9191103894458ddc
#: ../../intro/tutorial01.txt:200
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"sqlite3'``, ``'django.db.backends.postgresql_psycopg2'``, ``'django.db."
"backends.mysql'``, or ``'django.db.backends.oracle'``. Other backends are :"
"setting:`also available <DATABASE-ENGINE>`."
msgstr ""

# 1d0f6821c7a440b2b01edaf14ebf0181
#: ../../intro/tutorial01.txt:207
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file "
"in your project directory."
msgstr ""

# 2e737ead72d843c1ab6f0660cf61a1bf
#: ../../intro/tutorial01.txt:213
msgid ""
"If you are not using SQLite as your database, additional settings such as :"
"setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. For more "
"details, see the reference documentation for :setting:`DATABASES`."
msgstr ""

# 1e26aaeaf53e4625ac517ba68a5be8eb
#: ../../intro/tutorial01.txt:218
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

# 91f2bb6c707e4439b46fad9d77fbd6df
#: ../../intro/tutorial01.txt:222
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

# 7030eb5c8ae349b99e3266150e40ac24
#: ../../intro/tutorial01.txt:225
msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to "
"your time zone."
msgstr ""

# 6446ce83fae4456185d8621ffdd545fb
#: ../../intro/tutorial01.txt:228
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""

# 51b5676c21ae482986e5fb28a8545860
#: ../../intro/tutorial01.txt:233
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

# f4df6610962a48b2b8ef432cc8bd3958
#: ../../intro/tutorial01.txt:236
msgid ""
":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:`part 2 "
"of this tutorial </intro/tutorial02>`."
msgstr ""

# 1e3546970a714d72ab320b104588f9e2
#: ../../intro/tutorial01.txt:239
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

# ae1f242246a747dc8a24bc6d8274bec9
#: ../../intro/tutorial01.txt:241
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

# dbd012a930dc4b8286a29bd0618a5c3a
#: ../../intro/tutorial01.txt:243
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

# 0aa32a10482c4886887c35700e8e3329
#: ../../intro/tutorial01.txt:245
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

# 9297569298ad4c05a2ff374583e6b42b
#: ../../intro/tutorial01.txt:247
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

# 577b98543d6a41b6bd9f3365e8d64769
#: ../../intro/tutorial01.txt:250
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

# cacbb847e8084163af1152dec45cdafb
#: ../../intro/tutorial01.txt:252
msgid ""
"Some of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# da5466ea126c46b6a0fefa54e83fa302
#: ../../intro/tutorial01.txt:260
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting "
"and creates any necessary database tables according to the database settings "
"in your :file:`mysite/settings.py` file. You'll see a message for each "
"database table it creates, and you'll get a prompt asking you if you'd like "
"to create a superuser account for the authentication system. Go ahead and do "
"that."
msgstr ""

# d751d20fdb4c427f8de66fb7fd740925
#: ../../intro/tutorial01.txt:267
msgid ""
"If you're interested, run the command-line client for your database and type "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
"display the tables Django created."
msgstr ""

# dc42777db1c044179a9e3b137aa804dc
#: ../../intro/tutorial01.txt:273
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`syncdb`. The :djadmin:`syncdb` "
"command will only create tables for apps in :setting:`INSTALLED_APPS`."
msgstr ""

# 52a16c742ce4413c85a6571a8ed72cca
#: ../../intro/tutorial01.txt:283
msgid "Creating models"
msgstr ""

# fc19cef502bb480db0d2eccc994ea2e8
#: ../../intro/tutorial01.txt:285
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""

# e564eb69ae4841f5adb8892713627501
#: ../../intro/tutorial01.txt:288
msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically "
"generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""

# 1374c8a2d57a4364b1e390a6c5c602ce
#: ../../intro/tutorial01.txt:295
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

# 9265827a9c6d4aeeba50b1dd6488e6d3
#: ../../intro/tutorial01.txt:301
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

# 7d5525ed4cd14a4499dfa97749dbbb1b
#: ../../intro/tutorial01.txt:305
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""

# 19081349fea54849923afd0195309e19
#: ../../intro/tutorial01.txt:312
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

# 03593f21e2994a7fbda9cf2c590c81c4
#: ../../intro/tutorial01.txt:321
msgid "This directory structure will house the poll application."
msgstr ""

# 2ab06dd8f9bf47f09bfae4daa73c38e9
#: ../../intro/tutorial01.txt:323
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

# 7100ac492e45436c84d8a765ec120d13
#: ../../intro/tutorial01.txt:328
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# e04e75f26ff44866b04f222636c9c946
#: ../../intro/tutorial01.txt:333
msgid ""
"In our simple poll app, we'll create two models: ``Poll`` and ``Choice``. A "
"``Poll`` has a question and a publication date. A ``Choice`` has two fields: "
"the text of the choice and a vote tally. Each ``Choice`` is associated with "
"a ``Poll``."
msgstr ""

# 43d24b74351a4c7e86131f2ae1c1f69f
#: ../../intro/tutorial01.txt:338
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this::"
msgstr ""

# a60bb4e4ad4a4c8a847dc663aa0819fb
#: ../../intro/tutorial01.txt:352
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""

# ea51402438f14b85a6d0396975802674
#: ../../intro/tutorial01.txt:356
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""

# 2bf6d24ecdf54bc3abc7aa8816318a49
#: ../../intro/tutorial01.txt:361
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# 4364083fb31440e6b809991cb659231f
#: ../../intro/tutorial01.txt:365
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Poll.pub_date``. For "
"all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""

# bb2eab8d28cf4b0ca7b403ce2a5c4e23
#: ../../intro/tutorial01.txt:373
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""

# 71706893c6be4db092209f6c42e2defe
#: ../../intro/tutorial01.txt:378
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""

# 376d17a400b043f298813076c65517dc
#: ../../intro/tutorial01.txt:382
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Poll``. Django supports all the common database relationships: many-to-"
"ones, many-to-manys and one-to-ones."
msgstr ""

# c6e05a7ec69b4a258ec2da9350907757
#: ../../intro/tutorial01.txt:390
msgid "Activating models"
msgstr ""

# 552440e204d643bb8d760bcbdd27aa29
#: ../../intro/tutorial01.txt:392
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

# 80e14085f2ac4ba18b5725d69a884308
#: ../../intro/tutorial01.txt:395
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

# 56f64f057bcd47dcbf2c044041c89d12
#: ../../intro/tutorial01.txt:396
msgid ""
"Create a Python database-access API for accessing ``Poll`` and ``Choice`` "
"objects."
msgstr ""

# b0cd73b33b974104a6e288de6c51ac47
#: ../../intro/tutorial01.txt:398
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

# f8372fd3aeb542b093bc783cf65c7612
#: ../../intro/tutorial01.txt:402
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

# 0e99df9cff954088bc8d820c60e7128b
#: ../../intro/tutorial01.txt:406
msgid ""
"Edit the :file:`mysite/settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this::"
msgstr ""

# af406ad91c2b4b4cb2d653e790fd70bc
#: ../../intro/tutorial01.txt:420
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

# fe0ffe3125f14713b8527890423ae73a
#: ../../intro/tutorial01.txt:426
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

# b86191e5201b40dea08018bb7a6c30a6
#: ../../intro/tutorial01.txt:445
msgid "Note the following:"
msgstr ""

# 90551dd8f8b544f286937ef7fb4cdb06
#: ../../intro/tutorial01.txt:447
msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for SQLite."
msgstr ""

# d2f37dfb180e473782adcf74a3228df3
#: ../../intro/tutorial01.txt:450
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. "
"(You can override this behavior.)"
msgstr ""

# 2927f13db9304dab904fc628cd8e0e20
#: ../../intro/tutorial01.txt:454
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

# 602becd481864b4abd279d9193cfc29b
#: ../../intro/tutorial01.txt:456
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

# 3dc32025ab50456fa918d7936eaf6ae6
#: ../../intro/tutorial01.txt:459
msgid ""
"The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

# 1594956ce6ed4cd9842c015208628fe4
#: ../../intro/tutorial01.txt:462
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes."
msgstr ""

# 3245f3d1b4a4404c8d9a82a84ef41be9
#: ../../intro/tutorial01.txt:468
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

# 2729b74d6a514aee9c740b4d7d866504
#: ../../intro/tutorial01.txt:474
msgid "If you're interested, also run the following commands:"
msgstr ""

# d4672dfd29204813bd78143f8dbec1c7
#: ../../intro/tutorial01.txt:476
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

# 0f7c46bd17e84b96878b5bd372daf15d
#: ../../intro/tutorial01.txt:479
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:"
"`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

# a28e4741b2034ecf94be9be0eb85ef79
#: ../../intro/tutorial01.txt:483
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

# d22b05ba52144007b0526a9b408ba9cd
#: ../../intro/tutorial01.txt:487
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

# 972d4f8a378f4e578fad342ac5519f39
#: ../../intro/tutorial01.txt:490
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:"
"`sqlindexes` commands."
msgstr ""

# 6f5565d6385845349030af70003bf5f4
#: ../../intro/tutorial01.txt:494
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

# e481ed17e3c0471291591b634ecb8a4e
#: ../../intro/tutorial01.txt:497
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

# f4e88bf567be474bbd9eb97460859183
#: ../../intro/tutorial01.txt:503
msgid ""
"The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your "
"database for all apps in :setting:`INSTALLED_APPS` that don't already exist "
"in your database. This creates all the tables, initial data and indexes for "
"any apps you've added to your project since the last time you ran syncdb. :"
"djadmin:`syncdb` can be called as often as you like, and it will only ever "
"create the tables that don't exist."
msgstr ""

# acfb6e7fa7084bf6983bbeb3032871f1
#: ../../intro/tutorial01.txt:510
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# aacbad36b4444009922d2b67e0f15679
#: ../../intro/tutorial01.txt:514
msgid "Playing with the API"
msgstr ""

# 0ccb45abcedc415eb6563a52a2bc82e1
#: ../../intro/tutorial01.txt:516
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

# 40f57a8f0dc9403cb7c319978675b56c
#: ../../intro/tutorial01.txt:523
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""

# b2490ea726df4e4cb2431631684ffcef
#: ../../intro/tutorial01.txt:529
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
"``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and "
"run ``python`` from the same directory :file:`manage.py` is in (or ensure "
"that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

# 8ce7089201b441909bbcdb0a841602a2
#: ../../intro/tutorial01.txt:534
msgid ""
"For more information on all of this, see the :doc:`django-admin.py "
"documentation </ref/django-admin>`."
msgstr ""

# 34f95684ec1346cfb35168a3cca8bd1d
#: ../../intro/tutorial01.txt:537
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""

# c3d029da3f4b4425af74c6b098e7299e
#: ../../intro/tutorial01.txt:577
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in "
"the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model."
"__unicode__` method to both ``Poll`` and ``Choice``. On Python 3, simply "
"replace ``__unicode__`` by ``__str__`` in the following example::"
msgstr ""

# f13a5632ad894f9393f89c9d521b073b
#: ../../intro/tutorial01.txt:594
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods "
"(or :meth:`~django.db.models.Model.__str__` on Python 3) to your models, not "
"only for your own sanity when dealing with the interactive prompt, but also "
"because objects' representations are used throughout Django's automatically-"
"generated admin."
msgstr ""

# c0f231a8fe444732aaad5125b8396c60
#: ../../intro/tutorial01.txt:603
msgid ""
"On Python 3, things are simpler, just use :meth:`~django.db.models.Model."
"__str__` and forget about :meth:`~django.db.models.Model.__unicode__`."
msgstr ""

# b5edefb009be4c148dcbd6f876565880
#: ../../intro/tutorial01.txt:607
msgid ""
"If you're familiar with Python 2, you might be in the habit of adding :meth:"
"`~django.db.models.Model.__str__` methods to your classes, not :meth:"
"`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db."
"models.Model.__unicode__` here because Django models deal with Unicode by "
"default. All data stored in your database is converted to Unicode when it's "
"returned."
msgstr ""

# d923e0db59024e979d2e553c1cb945e5
#: ../../intro/tutorial01.txt:614
msgid ""
"Django models have a default :meth:`~django.db.models.Model.__str__` method "
"that calls :meth:`~django.db.models.Model.__unicode__` and converts the "
"result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a "
"Unicode string, and ``str(p)`` will return a normal string, with characters "
"encoded as UTF-8."
msgstr ""

# 84d26a5b7e324c65a79deccb98f328b2
#: ../../intro/tutorial01.txt:620
msgid ""
"If all of this is gibberish to you, just remember to add :meth:`~django.db."
"models.Model.__unicode__` methods to your models. With any luck, things "
"should Just Work for you."
msgstr ""

# 98733336a5464f4e97d87aa7b5677138
#: ../../intro/tutorial01.txt:624
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

# 6313523a385242179bd71a81c97fae33
#: ../../intro/tutorial01.txt:635
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

# 1046e78c089e4173bb8bb1f629e5d734
#: ../../intro/tutorial01.txt:641
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

# 785167fbcf004dcdba01b6bfe7bd1637
#: ../../intro/tutorial01.txt:720
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

# 811c3e27be9c4b6f9b7df6b6237171bc
#: ../../intro/tutorial01.txt:726
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

# 3439a91e2dbd458db31a5775dc0b4165
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

# 13980d0ff28e41bb985b94038561ba5f
#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

# 69ec88daba7745b0ade1627f83293756
#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

# f7b2768b11ed470b89a259b40a05f884
#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

# 73453564d9604a59a29e992ef15c3072
#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""

# 79f2b921261d437194879820e4a5aaf9
#: ../../intro/tutorial02.txt:25
msgid "Start the development server"
msgstr ""

# fdaee5189b194e3c948ca5e0bf5c4810
#: ../../intro/tutorial02.txt:27
msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""

# 1a1a6a8841994079a78f0bfa653d85bf
#: ../../intro/tutorial02.txt:30
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

# a92bc77b734c49be8eefb392fbe39a54
#: ../../intro/tutorial02.txt:36
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

# b467d4a7821b47f085c28154fa9dfd27
#: ../../intro/tutorial02.txt:42
msgid ""
"Since :doc:`translation </topics/i18n/translation>` is turned on by default, "
"the login screen may be displayed in your own language, depending on your "
"browser's settings and on whether Django has a translation for this language."
msgstr ""

# c5f3a65bd3074fc19c56eae9d23aae84
#: ../../intro/tutorial02.txt:48
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

# 6d367b210d51423db547a768e2318206
#: ../../intro/tutorial02.txt:55
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

# 4506a8e6ba01449dbdb906f9cc6dccee
#: ../../intro/tutorial02.txt:60
msgid "Enter the admin site"
msgstr ""

# 6ad5a5fda3c24e62ad5edb3eb917a36f
#: ../../intro/tutorial02.txt:62
msgid ""
"Now, try logging in. You created a superuser account in the first part of "
"this tutorial, remember?  If you didn't create one or forgot the password "
"you can :ref:`create another one <topics-auth-creating-superusers>`."
msgstr ""

# bf29443f18634b6a85c45d60773b6dc8
#: ../../intro/tutorial02.txt:66
msgid "You should see the Django admin index page:"
msgstr ""

# dc6ab8e848cc407ea083d177998090df
#: ../../intro/tutorial02.txt:71
msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped "
"by Django."
msgstr ""

# a447adf7dc06487699c4e63b5ace122e
#: ../../intro/tutorial02.txt:76
msgid "Make the poll app modifiable in the admin"
msgstr ""

# f32c2172f11142d3ac2f6a09214544c0
#: ../../intro/tutorial02.txt:78
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

# f274659a650c4da38a131eb3e582497b
#: ../../intro/tutorial02.txt:80
msgid ""
"Just one thing to do: we need to tell the admin that ``Poll`` objects have "
"an admin interface. To do this, open the :file:`polls/admin.py` file, and "
"edit it to look like this::"
msgstr ""

# 9028a0f8ffc04cc2bd77f48a9a60a6a4
#: ../../intro/tutorial02.txt:90
msgid "Explore the free admin functionality"
msgstr ""

# 9345f8d05012480cac01fc5579b5c43f
#: ../../intro/tutorial02.txt:92
msgid ""
"Now that we've registered ``Poll``, Django knows that it should be displayed "
"on the admin index page:"
msgstr ""

# f2f295f2b2944d79a7932aa342743292
#: ../../intro/tutorial02.txt:98
msgid ""
"Click \"Polls.\" Now you're at the \"change list\" page for polls. This page "
"displays all the polls in the database and lets you choose one to change it. "
"There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

# 07b9c36eed8349ffb50e4ada4c0283fb
#: ../../intro/tutorial02.txt:105
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

# e2ffcee9484147ba82509bb6d99e091e
#: ../../intro/tutorial02.txt:110
msgid "Things to note here:"
msgstr ""

# 840491db61714918a30844bad1c2e69f
#: ../../intro/tutorial02.txt:112
msgid "The form is automatically generated from the ``Poll`` model."
msgstr ""

# accf7f70debd4b15ad6aa91e6cd605a1
#: ../../intro/tutorial02.txt:114
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

# 3934982f96d8489a9c7bda2a1332b64d
#: ../../intro/tutorial02.txt:119
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

# 45f2b37fe6eb412dac17441295378885
#: ../../intro/tutorial02.txt:123
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

# b5d370c0f2894151b7dcad180d5262d9
#: ../../intro/tutorial02.txt:125
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

# f8b7be8c9505435c96e967475c4a22cd
#: ../../intro/tutorial02.txt:128
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

# 9b49841b0bb145c0ad30fa9028d31667
#: ../../intro/tutorial02.txt:131
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

# abeb52b212f547b2a2cb4de4c0489baa
#: ../../intro/tutorial02.txt:134
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

# b44adf2027f340ecb054939a5dcbe84e
#: ../../intro/tutorial02.txt:136
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the poll in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# f339ec86d2394649bdc9c5b79acb1f62
#: ../../intro/tutorial02.txt:141
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

# 9a03e21223e34c0e9d7f3d396832d465
#: ../../intro/tutorial02.txt:150
msgid "Customize the admin form"
msgstr ""

# dc3b9a49556641deac984ab78c964c31
#: ../../intro/tutorial02.txt:152
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the Poll model with ``admin.site.register(Poll)``, Django was "
"able to construct a default form representation. Often, you'll want to "
"customize how the admin form looks and works. You'll do this by telling "
"Django the options you want when you register the object."
msgstr ""

# dc6324c499294da1b0cc33d756c3162d
#: ../../intro/tutorial02.txt:158
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Poll)`` line with::"
msgstr ""

# 521f7e20bb0a492888a83dcbe5909701
#: ../../intro/tutorial02.txt:166
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

# 6ce56096654d4bd28a081249340a1bf6
#: ../../intro/tutorial02.txt:170
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

# 5391074bac2f49748ca5e5285b281390
#: ../../intro/tutorial02.txt:176
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

# bf2e5e855ea94391b8780fdfab872f11
#: ../../intro/tutorial02.txt:179
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets::"
msgstr ""

# d0c713c17b1046ffb7ff02bb5e4d60aa
#: ../../intro/tutorial02.txt:190
msgid ""
"The first element of each tuple in ``fieldsets`` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

# 7d2e8b86d22f46778519e31d6197b206
#: ../../intro/tutorial02.txt:196
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used::"
msgstr ""

# c763093ddef645e4b0eb3bebef88aca2
#: ../../intro/tutorial02.txt:211
msgid "Adding related objects"
msgstr ""

# 9f0b98ece5c2471e904102130bde7220
#: ../../intro/tutorial02.txt:213
msgid ""
"OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, "
"and the admin page doesn't display choices."
msgstr ""

# 922ecd0b31d54bf8b7e583d30ed6f44d
#: ../../intro/tutorial02.txt:216
msgid "Yet."
msgstr ""

# b40cbd81a7334cdea84124921a4cdff7
#: ../../intro/tutorial02.txt:218
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

# fc3fe0b2b7b14a1bbf63ea2a6e1b59a5
#: ../../intro/tutorial02.txt:225
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""

# 016ae9c6c9ee48b0b94c685ac4330839
#: ../../intro/tutorial02.txt:231
msgid ""
"In that form, the \"Poll\" field is a select box containing every poll in "
"the database. Django knows that a :class:`~django.db.models.ForeignKey` "
"should be represented in the admin as a ``<select>`` box. In our case, only "
"one poll exists at this point."
msgstr ""

# 9c42b6995db64a379dd1fcfeb203124c
#: ../../intro/tutorial02.txt:236
msgid ""
"Also note the \"Add Another\" link next to \"Poll.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add poll\" form. If "
"you add a poll in that window and click \"Save,\" Django will save the poll "
"to the database and dynamically add it as the selected choice on the \"Add "
"choice\" form you're looking at."
msgstr ""

# 2c5862a08349429b990503ebf080ff6d
#: ../../intro/tutorial02.txt:243
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Poll`` object. Let's make that happen."
msgstr ""

# 54cd58ba5c934e4daefd43a92c651e30
#: ../../intro/tutorial02.txt:247
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Poll`` registration code to read::"
msgstr ""

# 38f31bd8d43741969581887ecd876324
#: ../../intro/tutorial02.txt:266
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Poll`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""

# b1635cd4355f4bb1b82b54b16279a4c3
#: ../../intro/tutorial02.txt:269
msgid "Load the \"Add poll\" page to see how that looks:"
msgstr ""

# e6efd4cd619449f68f1bfd97602b02fc
#: ../../intro/tutorial02.txt:274
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""

# b80f68d0103346a88f73287eef8e6368
#: ../../intro/tutorial02.txt:278
msgid ""
"At the end of the three current slots you will find an \"Add another Choice"
"\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. Note that you can't remove the original three slots. This image shows "
"an added slot:"
msgstr ""

# 975c5ac3a41b4c7d940f5e41d63b52f9
#: ../../intro/tutorial02.txt:286
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read::"
msgstr ""

# f5386df92a214a5593ddaaa980f3d38d
#: ../../intro/tutorial02.txt:294
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

# 82086564a208418f93a52a75dd7447c5
#: ../../intro/tutorial02.txt:300
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""

# 174e858461f2420d8693be7bc2a45be7
#: ../../intro/tutorial02.txt:304
msgid "Customize the admin change list"
msgstr ""

# f0f46e2d587d40198df9bf2a6612f5f9
#: ../../intro/tutorial02.txt:306
msgid ""
"Now that the Poll admin page is looking good, let's make some tweaks to the "
"\"change list\" page -- the one that displays all the polls in the system."
msgstr ""

# 5f68919984064cb2aeeb6130806bf900
#: ../../intro/tutorial02.txt:309
msgid "Here's what it looks like at this point:"
msgstr ""

# 9bef5965283b43cf8452d773c663dd06
#: ../../intro/tutorial02.txt:314
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the "
"``list_display`` admin option, which is a tuple of field names to display, "
"as columns, on the change list page for the object::"
msgstr ""

# 0b0716ebd5d843b49fed70e5a2bebbc5
#: ../../intro/tutorial02.txt:323
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1::"
msgstr ""

# 42f39d22964f4d77b26b1317752cec76
#: ../../intro/tutorial02.txt:330
msgid "Now the poll change list page looks like this:"
msgstr ""

# 91b477787ac24f31a14660f8f0e345ea
#: ../../intro/tutorial02.txt:335
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""

# ce5e5c9131564dbbaec9c711ff8b1f8c
#: ../../intro/tutorial02.txt:342
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows::"
msgstr ""

# 05e09d9fa2b7442398b482dc2a0d0649
#: ../../intro/tutorial02.txt:353
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"Poll change list page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

# 0eac4f34125a48a29627c3c86a73786e
#: ../../intro/tutorial02.txt:358
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

# 2dd0f4886db14993a192367c72fcf6f6
#: ../../intro/tutorial02.txt:364
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

# bb061ba9a331453581a0fb659617587b
#: ../../intro/tutorial02.txt:369
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

# d6203624adb84a88973bdbbe17ebece9
#: ../../intro/tutorial02.txt:373
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question`` field. You can use as many "
"fields as you'd like -- although because it uses a ``LIKE`` query behind the "
"scenes, keep it reasonable, to keep your database happy."
msgstr ""

# 38ee7386689f471a8f79e96174ee398b
#: ../../intro/tutorial02.txt:378
msgid ""
"Finally, because ``Poll`` objects have dates, it'd be convenient to be able "
"to drill down by date. Add this line::"
msgstr ""

# 652b595b23c14f37bac152a119324ede
#: ../../intro/tutorial02.txt:383
msgid ""
"That adds hierarchical navigation, by date, to the top of the change list "
"page. At top level, it displays all available years. Then it drills down to "
"months and, ultimately, days."
msgstr ""

# b8150702f50a4b7fa4553671f8fd1b46
#: ../../intro/tutorial02.txt:387
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. Change-list pagination, search "
"boxes, filters, date-hierarchies and column-header-ordering all work "
"together like you think they should."
msgstr ""

# 0bbff5e6458e46629f822e812a423c5a
#: ../../intro/tutorial02.txt:393
msgid "Customize the admin look and feel"
msgstr ""

# 60ec4604fe2b42eda6f0e9fd0b76323b
#: ../../intro/tutorial02.txt:395
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

# f26898b66dfb42ce8f0b45b4b4f18e88
#: ../../intro/tutorial02.txt:398
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

# e47c073df8824e339aad97d79b2b99cb
#: ../../intro/tutorial02.txt:405
msgid "Customizing your *project's* templates"
msgstr ""

# 9da0fe6e397f4422839559bda3571449
#: ../../intro/tutorial02.txt:407
msgid ""
"Create a ``templates`` directory in your project directory. Templates can "
"live anywhere on your filesystem that Django can access. (Django runs as "
"whatever user your server runs.) However, keeping your templates within the "
"project is a good convention to follow."
msgstr ""

# a4732ca558184f5e8f85db5b65593c18
#: ../../intro/tutorial02.txt:412
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`TEMPLATE_DIRS` setting::"
msgstr ""

# 80ebef60f68a4f19b933a22f24f9ce0e
#: ../../intro/tutorial02.txt:417
msgid ""
":setting:`TEMPLATE_DIRS` is an iterable of filesystem directories to check "
"when loading Django templates; it's a search path."
msgstr ""

# 916eec70658645829e1ac661d596e60d
#: ../../intro/tutorial02.txt:420
msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself (``django/contrib/"
"admin/templates``) into that directory."
msgstr ""

# 89b17333e4d94ee596d5af6daace106e
#: ../../intro/tutorial02.txt:427
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""

# 3ae6849e50d64b4f8e7e2b545bb2d2e1
#: ../../intro/tutorial02.txt:438
msgid ""
"Then, just edit the file and replace the generic Django text with your own "
"site's name as you see fit."
msgstr ""

# 47f6b3009f864964bf80b1415d2ca24c
#: ../../intro/tutorial02.txt:441
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and ``"
"{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

# 143458a0151e41858562a75262d72360
#: ../../intro/tutorial02.txt:448
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

# 4d9913065b02469cbfb7fa45c4c12d9c
#: ../../intro/tutorial02.txt:454
msgid "Customizing your *application's* templates"
msgstr ""

# efbf152f07c14afc889ee5daea80a80d
#: ../../intro/tutorial02.txt:456
msgid ""
"Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by "
"default, how was Django finding the default admin templates? The answer is "
"that, by default, Django automatically looks for a ``templates/`` "
"subdirectory within each application package, for use as a fallback (don't "
"forget that ``django.contrib.admin`` is an application)."
msgstr ""

# 91a3fe5592854c338f43892094eb3b8e
#: ../../intro/tutorial02.txt:462
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""

# a3415c42e7bd42fcac976b0c0a641b57
#: ../../intro/tutorial02.txt:469
msgid ""
"See the :ref:`template loader documentation <template-loaders>` for more "
"information about how Django finds its templates."
msgstr ""

# 8d59b7b0757c42d1b63acb720ec5a1a1
#: ../../intro/tutorial02.txt:473
msgid "Customize the admin index page"
msgstr ""

# ffa60fe766464e469ec233044eb74164
#: ../../intro/tutorial02.txt:475
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

# 2ed486dfcf354aecbde47dcb2665a732
#: ../../intro/tutorial02.txt:478
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

# ffbc4f64fbeb41c8a0c5ea1a72049142
#: ../../intro/tutorial02.txt:483
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

# 0bb17403c72d476f86b784934934405b
#: ../../intro/tutorial02.txt:492
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

# 385693d3921046ee81fa593a355f6b19
#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr ""

# 9bcc2b8bfb724d2fb0fa6c5462407012
#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""

# ab38284140ec4759b6c862db02b198dd
#: ../../intro/tutorial03.txt:10
msgid "Philosophy"
msgstr ""

# 8109ec2184ca440c971de5d2585ad65b
#: ../../intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""

# e82147e0604a41339fd3a423e22165a7
#: ../../intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

# 1762997251fd441a8ac71a5c8d438afa
#: ../../intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

# e68c9d47ae294a54b8a50f0574d3c07d
#: ../../intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""

# 9a4b04269bff4696a0026d29cb7ae82e
#: ../../intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""

# a877c748cb8f4ada8ccd53c202355372
#: ../../intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

# 1784f5e2049543be9072f2d80c7afde2
#: ../../intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

# 346055d715b34a58a7d0368c1c2d1990
#: ../../intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""

# 9c9011647b7b408dbd8d338d306e251a
#: ../../intro/tutorial03.txt:32
msgid "Poll \"index\" page -- displays the latest few polls."
msgstr ""

# 0fb81c42971c44669def96d118c6eab6
#: ../../intro/tutorial03.txt:34
msgid ""
"Poll \"detail\" page -- displays a poll question, with no results but with a "
"form to vote."
msgstr ""

# 8649c2c5f3094d18af91bd1c81674224
#: ../../intro/tutorial03.txt:37
msgid "Poll \"results\" page -- displays results for a particular poll."
msgstr ""

# cb49093013684cb6981292c955eb07c8
#: ../../intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular poll."
msgstr ""

# 95efa732971d46009f565393ab3c6491
#: ../../intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""

# 3f2826cdd10649059bd7d792b0480a5b
#: ../../intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as \"ME2/"
"Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""

# 9e35feebbac94b1382e1720f05b80e1b
#: ../../intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: ``/"
"newsarchive/<year>/<month>/``."
msgstr ""

# b72872d138aa4d5eb1b98628cb46be3c
#: ../../intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""

# 9ee5ec80eda54d5a9929ab26db0a39a1
#: ../../intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

# aac78111909d418a9ac94f297131073c
#: ../../intro/tutorial03.txt:62
msgid "Write your first view"
msgstr ""

# 9df158591cad4b0e947ae1ba489dfdb3
#: ../../intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it::"
msgstr ""

# 8642c13d1b9a417db7740590d4914245
#: ../../intro/tutorial03.txt:72
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""

# 4fed99c98fc8462cbd736f075a9d6cdc
#: ../../intro/tutorial03.txt:75
msgid ""
"To create a URLconf in the polls directory, create a file called ``urls."
"py``. Your app directory should now look like::"
msgstr ""

# f8c1195bf945449ab282149d6696e934
#: ../../intro/tutorial03.txt:86
msgid "In the ``polls/urls.py`` file include the following code::"
msgstr ""

# fd71a2e71df24ee3a0f31feadd5d317a
#: ../../intro/tutorial03.txt:96
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with::"
msgstr ""

# d82c510e34c04dbf88c7ac671b5300e5
#: ../../intro/tutorial03.txt:110
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to http://"
"localhost:8000/polls/ in your browser, and you should see the text \"*Hello, "
"world. You're at the poll index.*\", which you defined in the ``index`` view."
msgstr ""

# e5840355773040ddaf73553e4e207c84
#: ../../intro/tutorial03.txt:115
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

# a759657bbeb9489085a48415a23c2ef9
#: ../../intro/tutorial03.txt:120
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

# 8606a5a4b2ac4262bb52f570e3d0f12a
#: ../../intro/tutorial03.txt:122
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular expression"
"\", which is a syntax for matching patterns in strings, or in this case, url "
"patterns. Django starts at the first regular expression and makes its way "
"down the list,  comparing the requested URL against each regular expression "
"until it finds one that matches."
msgstr ""

# a576af35ac674658aafe2931dd57d9fe
#: ../../intro/tutorial03.txt:128
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to ``http://www.example.com/"
"myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www."
"example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""

# 9a1ca5fccc4f4933a789d478273cea1f
#: ../../intro/tutorial03.txt:134
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""

# 78723b32f7554ecc95a2182af078a484
#: ../../intro/tutorial03.txt:141
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""

# ad13e7a291e3450197902843cd36f317
#: ../../intro/tutorial03.txt:148
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

# 437af60aa40c45858e668abb90b1e168
#: ../../intro/tutorial03.txt:150
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first "
"argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""

# d9b599b6aaf54cbf9393d953cc36b1e5
#: ../../intro/tutorial03.txt:158
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

# a15ea5ed3a23447aae12227984fe5eb4
#: ../../intro/tutorial03.txt:160
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

# 32489ee123414c5aa6c2fbbc7566781a
#: ../../intro/tutorial03.txt:164
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

# 5e92a0ed2d1f415ea1a543610d0a66db
#: ../../intro/tutorial03.txt:166
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""

# 2c2ae7a19b514544a40cfbb0f1bc8bfe
#: ../../intro/tutorial03.txt:171
msgid "Writing more views"
msgstr ""

# c97913b8989e41bd840a1595ef76e7a6
#: ../../intro/tutorial03.txt:173
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument::"
msgstr ""

# 8044e5cee7d044ac819213ad9fc26784
#: ../../intro/tutorial03.txt:185
msgid ""
"Wire these news views into the ``polls.urls`` module by adding the "
"following :func:`~django.conf.urls.url` calls::"
msgstr ""

# 338f17c9f35e4d4e8b2fd8401418e6e9
#: ../../intro/tutorial03.txt:203
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""

# 852c0507b4e04aae84c5d36c06dfd3a4
#: ../../intro/tutorial03.txt:208
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The :func:"
"`~django.conf.urls.include` functions we are using simply reference other "
"URLconfs. Note that the regular expressions for the :func:`~django.conf.urls."
"include` functions don't have a ``$`` (end-of-string match character) but "
"rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls."
"include`, it chops off whatever part of the URL matched up to that point and "
"sends the remaining string to the included URLconf for further processing."
msgstr ""

# b442945e5f784daea39e2dd7b8372eeb
#: ../../intro/tutorial03.txt:220
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-"
"and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), "
"they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""

# 2f2f0b5b21104e709147fe1319d4c19d
#: ../../intro/tutorial03.txt:226
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

# 16035ac09143486082b1f0f0fff5053b
#: ../../intro/tutorial03.txt:228
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

# e56fc784a63349318bc02c5347b466aa
#: ../../intro/tutorial03.txt:230
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<poll_id>\\d+)/$'`` resulting in a call to "
"the ``detail()`` view like so::"
msgstr ""

# 3d4fe0a3b7e445d3b4ecc563d352d19b
#: ../../intro/tutorial03.txt:237
msgid ""
"The ``poll_id='34'`` part comes from ``(?P<poll_id>\\d+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<poll_id>`` defines "
"the name that will be used to identify the matched pattern; and ``\\d+`` is "
"a regular expression to match a sequence of digits (i.e., a number)."
msgstr ""

# e370408794f441c5a1a4a311b9dee2e3
#: ../../intro/tutorial03.txt:243
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""

# cb06814bdd62455a99ce2c0b51c59b20
#: ../../intro/tutorial03.txt:250
msgid "But, don't do that. It's silly."
msgstr ""

# 649c8ff2f4a5422085e9368631e3068d
#: ../../intro/tutorial03.txt:253
msgid "Write views that actually do something"
msgstr ""

# 3f76befd84f44a6096a45fb4c44ffe89
#: ../../intro/tutorial03.txt:255
msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""

# fb34f91a36dd4a499e4f0b8cd3a48192
#: ../../intro/tutorial03.txt:260
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""

# f15b9c20eede47f489e514041f3cf7ea
#: ../../intro/tutorial03.txt:265
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""

# ac8b845b7c0d4c44b0c26b22c623296d
#: ../../intro/tutorial03.txt:267
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at the "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date::"
msgstr ""

# 213d0f42f6dc45ed99593c9e08e799d2
#: ../../intro/tutorial03.txt:281
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""

# 45f9f7e1ee1e474397add0bb936e52fd
#: ../../intro/tutorial03.txt:286
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""

# f2e84528caca47f99514a2d98bdc56ef
#: ../../intro/tutorial03.txt:289
msgid ""
"Django's :setting:`TEMPLATE_LOADERS` setting contains a list of callables "
"that know how to import templates from various sources. One of the defaults "
"is :class:`django.template.loaders.app_directories.Loader` which looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS` - this "
"is how Django knows to find the polls templates even though we didn't "
"modify :setting:`TEMPLATE_DIRS`, as we did in :ref:`Tutorial 2 <ref-"
"customizing-your-projects-templates>`."
msgstr ""

# 92e6f52db1a942e8b9b85f1580f4b068
#: ../../intro/tutorial03.txt:299
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""

# ffb4a9d56fb642a39c338bf14e45a3c3
#: ../../intro/tutorial03.txt:307
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django simply as "
"``polls/index.html``."
msgstr ""

# 85b5e8349df94225bb5c07e09c625c51
#: ../../intro/tutorial03.txt:316
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""

# f417491e9fe04f57a6a5f9b049089c1f
#: ../../intro/tutorial03.txt:325
msgid "Put the following code in that template:"
msgstr ""

# 72785ff84f2043d7a0561d3ffd9281ae
#: ../../intro/tutorial03.txt:339
msgid "Now let's use that html template in our index view::"
msgstr ""

# a13a075e4a964d37b783ba5e3b8743f9
#: ../../intro/tutorial03.txt:354
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

# ccd10b06090e49138e6aa5ecc8940062
#: ../../intro/tutorial03.txt:358
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" poll from Tutorial 1. The link "
"points to the poll's detail page."
msgstr ""

# 77c6ad73650443c1afa56d6728a4f672
#: ../../intro/tutorial03.txt:363
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

# 35480838502d418a8f5ea94cb4eb2abb
#: ../../intro/tutorial03.txt:365
msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten::"
msgstr ""

# 48bf0c4a410649b5b42c061cb1087374
#: ../../intro/tutorial03.txt:379
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, :class:`~django.template.Context` "
"and :class:`~django.http.HttpResponse` (you'll want to keep ``HttpResponse`` "
"if you still have the stub methods for ``detail``, ``results``, and "
"``vote``)."
msgstr ""

# 9343c94ffb784f1293a28b848f9851ef
#: ../../intro/tutorial03.txt:384
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""

# 8863cd1a7e9448e2ab3025e98d9aedef
#: ../../intro/tutorial03.txt:390
msgid "Raising a 404 error"
msgstr ""

# e15b64bcb81f4b8b8e1c3cea06c7c740
#: ../../intro/tutorial03.txt:392
msgid ""
"Now, let's tackle the poll detail view -- the page that displays the "
"question for a given poll. Here's the view::"
msgstr ""

# d2e0eefe37904e54bb5885dc190fc07d
#: ../../intro/tutorial03.txt:404
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a poll with the requested ID doesn't exist."
msgstr ""

# 8e2f309ab7054ac6ba5d6be104549845
#: ../../intro/tutorial03.txt:407
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just::"
msgstr ""

# c3db602aa1ec4458926b682c0d5ae392
#: ../../intro/tutorial03.txt:413
msgid "will get you started for now."
msgstr ""

# cc6ca11f63b64f508ce9656329c5d7d6
#: ../../intro/tutorial03.txt:416
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

# 471838b4ea7a4131a59abf0c677d7dd9
#: ../../intro/tutorial03.txt:418
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten::"
msgstr ""

# 6f5c29662ba4410d911aa91ff3cace9b
#: ../../intro/tutorial03.txt:428
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""

# 8217f61f98684d9a9cd5c52c5dd7992d
#: ../../intro/tutorial03.txt:436
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""

# a9f3c0408a70450d8062d44395e83bdc
#: ../../intro/tutorial03.txt:442
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

# a66d249e719348a68e9e13711b0e49ee
#: ../../intro/tutorial03.txt:446
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""

# 95e7ef7e2afd403389347b7456e7cdec
#: ../../intro/tutorial03.txt:453
msgid "Write a 404 (page not found) view"
msgstr ""

# 4fd6f76b53b049d393411e205c7dd901
#: ../../intro/tutorial03.txt:455
msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django will "
"load a special view devoted to handling 404 errors. It finds it by looking "
"for the variable ``handler404`` in your root URLconf (and only in your root "
"URLconf; setting ``handler404`` anywhere else will have no effect), which is "
"a string in Python dotted syntax -- the same format the normal URLconf "
"callbacks use. A 404 view itself has nothing special: It's just a normal "
"view."
msgstr ""

# 8c31ae19d5e2403d9d0a79289db51679
#: ../../intro/tutorial03.txt:463
msgid ""
"You normally won't have to bother with writing 404 views. If you don't set "
"``handler404``, the built-in view :func:`django.views.defaults."
"page_not_found` is used by default. Optionally, you can create a ``404."
"html`` template in the root of your template directory. The default 404 view "
"will then use that template for all 404 errors when :setting:`DEBUG` is set "
"to ``False`` (in your settings module). If you do create the template, add "
"at least some dummy content like \"Page not found\"."
msgstr ""

# e7272d3406394fb3babbcf87eea1cf60
#: ../../intro/tutorial03.txt:471
msgid "A couple more things to note about 404 views:"
msgstr ""

# 1d5812001e524c9fb380d9f33ac6bb00
#: ../../intro/tutorial03.txt:473
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module) then your "
"404 view will never be used (and thus the ``404.html`` template will never "
"be rendered) because the traceback will be displayed instead."
msgstr ""

# 7e6957044c81467097c468a3ca73931f
#: ../../intro/tutorial03.txt:477
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# e86cd36fa51646a89f6fc662e017aaf8
#: ../../intro/tutorial03.txt:481
msgid "Write a 500 (server error) view"
msgstr ""

# a754dd06a02b4b21a0ab113505cc0971
#: ../../intro/tutorial03.txt:483
msgid ""
"Similarly, your root URLconf may define a ``handler500``, which points to a "
"view to call in case of server errors. Server errors happen when you have "
"runtime errors in view code."
msgstr ""

# 18b4d9f171124952b6eb024a92b41bb1
#: ../../intro/tutorial03.txt:487
msgid ""
"Likewise, you should create a ``500.html`` template at the root of your "
"template directory and add some content like \"Something went wrong\"."
msgstr ""

# fc57984e68414adfaff54ea685620146
#: ../../intro/tutorial03.txt:491
msgid "Use the template system"
msgstr ""

# fc1a7598205349bcb408e9bb09502257
#: ../../intro/tutorial03.txt:493
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``poll``, here's what the ``polls/detail.html`` template might look "
"like:"
msgstr ""

# ec9a53a3d5aa483bba0bc2ab5ac39860
#: ../../intro/tutorial03.txt:506
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ poll.question }}``, first Django does a dictionary "
"lookup on the object ``poll``. Failing that, it tries an attribute lookup -- "
"which works, in this case. If attribute lookup had failed, it would've tried "
"a list-index lookup."
msgstr ""

# 5caae8cdccf0470892a6ce093b08f402
#: ../../intro/tutorial03.txt:512
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``poll.choice_set."
"all`` is interpreted as the Python code ``poll.choice_set.all()``, which "
"returns an iterable of ``Choice`` objects and is suitable for use in the :"
"ttag:`{% for %}<for>` tag."
msgstr ""

# 5a28c86bdc884a50bee17bbc7cd188e6
#: ../../intro/tutorial03.txt:517
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

# 063eec8d079943e3acbe380aa119a482
#: ../../intro/tutorial03.txt:520
msgid "Removing hardcoded URLs in templates"
msgstr ""

# 45bc46094b92463f9758e670201755b2
#: ../../intro/tutorial03.txt:522
msgid ""
"Remember, when we wrote the link to a poll in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""

# a3f3717e03c34404884b28242a5bd49d
#: ../../intro/tutorial03.txt:529
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""

# ae62a64e01554cbd949af4827138fa6c
#: ../../intro/tutorial03.txt:541
msgid ""
"If ``{% url 'detail' poll.id %}`` (with quotes) doesn't work, but ``{% url "
"detail poll.id %}`` (without quotes) does, that means you're using a version "
"of Django < 1.5. In this case, add the following declaration at the top of "
"your template:"
msgstr ""

# 4700d7464f434a46b1d2169e17930fd5
#: ../../intro/tutorial03.txt:550
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""

# 33fe4b5a6fa94c098373f9add991753b
#: ../../intro/tutorial03.txt:559
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

# dd101c46104e4f1990b13f948bfdfbbc
#: ../../intro/tutorial03.txt:569
msgid "Namespacing URL names"
msgstr ""

# 62e3a4ce95764692831046c490c776b4
#: ../../intro/tutorial03.txt:571
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""

# fd7f0df3304048ebb33d101183059abb
#: ../../intro/tutorial03.txt:578
msgid ""
"The answer is to add namespaces to your root URLconf. In the ``mysite/urls."
"py`` file (the project's ``urls.py``, not the application's), go ahead and "
"change it to include namespacing::"
msgstr ""

# fe2c01a6dae54310b429b580debd134f
#: ../../intro/tutorial03.txt:592
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

# 1cbc291d361a45b4819d8fc641bd45d7
#: ../../intro/tutorial03.txt:598
msgid "to point at the namespaced detail view:"
msgstr ""

# 2348404ecff2467ba9d67015017a5e8f
#: ../../intro/tutorial03.txt:604
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

# d1cd5dc3b1ff4986a43ebc410ef58324
#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr ""

# 4f404bbf35ba464fa0f7fd4aaa1c898d
#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""

# 04f6d94dff1a4b22a7bd756a5028e425
#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr ""

# fdd95d7ce24d45498c77668f10588d39
#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

# 25dcee6d28cd4a4b9ec79cf8bac7f6fc
#: ../../intro/tutorial04.txt:30
msgid "A quick rundown:"
msgstr ""

# 60150175b97b486fb030ae1ce91a4baf
#: ../../intro/tutorial04.txt:32
msgid ""
"The above template displays a radio button for each poll choice. The "
"``value`` of each radio button is the associated poll choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=3``. This is the basic concept of HTML forms."
msgstr ""

# 9b94d0fb8956409f82f65b6d63742af2
#: ../../intro/tutorial04.txt:38
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' poll.id %}``, and we "
"set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method="
"\"get\"``) is very important, because the act of submitting this form will "
"alter data server-side. Whenever you create a form that alters data server-"
"side, use ``method=\"post\"``. This tip isn't specific to Django; it's just "
"good Web development practice."
msgstr ""

# 0d901eba14e147198d5958a09e503deb
#: ../../intro/tutorial04.txt:45
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""

# 3a5d80516f204c83be50e11c17547748
#: ../../intro/tutorial04.txt:48
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""

# babf0a39199b40ec9b9fa57c56403651
#: ../../intro/tutorial04.txt:55
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line::"
msgstr ""

# ea0386b780cd452ebfc9fd4daec60633
#: ../../intro/tutorial04.txt:61
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``::"
msgstr ""

# ea5211bb1232451fbb846501b4ab77dd
#: ../../intro/tutorial04.txt:87
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

# addd84a19e944843be0615615895fc80
#: ../../intro/tutorial04.txt:89
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

# b42398e55d714715803c4ba40b7c7ae5
#: ../../intro/tutorial04.txt:95
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""

# 22332dc0a7e8486e8d1c3e9fc4d377d1
#: ../../intro/tutorial04.txt:101
msgid ""
"``request.POST['choice']`` will raise :exc:`~exceptions.KeyError` if "
"``choice`` wasn't provided in POST data. The above code checks for :exc:"
"`~exceptions.KeyError` and redisplays the poll form with an error message if "
"``choice`` isn't given."
msgstr ""

# 403147c7dc714bdb8bba2348aeded12e
#: ../../intro/tutorial04.txt:106
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""

# 8979ba2614dd43ae9a927ca003790997
#: ../../intro/tutorial04.txt:113
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""

# 85d274ab092749c8a1ecec004eca8e2b
#: ../../intro/tutorial04.txt:118
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""

# 162f632c47ca4a5dada2c02f3f1171a1
#: ../../intro/tutorial04.txt:129
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""

# c8da12efd3f041018c790dd79d13f648
#: ../../intro/tutorial04.txt:132
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""

# b40c2d73e23840c6a800c3fe084b2166
#: ../../intro/tutorial04.txt:136
msgid ""
"After somebody votes in a poll, the ``vote()`` view redirects to the results "
"page for the poll. Let's write that view::"
msgstr ""

# 9d5910eae0c24790a975060024433e6e
#: ../../intro/tutorial04.txt:143
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""

# ce670974b9c7491a9dff063904206920
#: ../../intro/tutorial04.txt:147
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

# 49bc49cac9904971bb4d7fd2a0082b2b
#: ../../intro/tutorial04.txt:161
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the poll. You should "
"see a results page that gets updated each time you vote. If you submit the "
"form without having chosen a choice, you should see the error message."
msgstr ""

# 8852b53e1b2a412b9dc72972088e72c9
#: ../../intro/tutorial04.txt:166
msgid "Use generic views: Less code is better"
msgstr ""

# 152ddd47a1c04ae4b928b75453f70eae
#: ../../intro/tutorial04.txt:168
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and ``results()"
"`` views are stupidly simple -- and, as mentioned above, redundant. The "
"``index()`` view (also from Tutorial 3), which displays a list of polls, is "
"similar."
msgstr ""

# 23034b75b3c84457979a00a4685c714d
#: ../../intro/tutorial04.txt:172
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

# 230465edf3474007b5e193b94ffb80bc
#: ../../intro/tutorial04.txt:177
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

# 0834bc47a07e4363b98bc9cd51132be0
#: ../../intro/tutorial04.txt:180
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

# b252283c9ffa4817bf46ad78651dc4db
#: ../../intro/tutorial04.txt:184
msgid "Convert the URLconf."
msgstr ""

# 3fa78bca978e4ef7b8f83d29f147bfd2
#: ../../intro/tutorial04.txt:186
msgid "Delete some of the old, unneeded views."
msgstr ""

# 5e61aae026b14e6ba7312836da711451
#: ../../intro/tutorial04.txt:188
msgid "Fix up URL handling for the new views."
msgstr ""

# 185c02f3ccb54f45b26bb2e801059ac7
#: ../../intro/tutorial04.txt:190
msgid "Read on for details."
msgstr ""

# b9cac5a3bd99432a8fbdf72c56210632
#: ../../intro/tutorial04.txt:194
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

# 5b76d781d5ca4fc28feac54b3793a6fe
#: ../../intro/tutorial04.txt:200
msgid "You should know basic math before you start using a calculator."
msgstr ""

# 91fa9f27f36d47f48e85d457f95a3df2
#: ../../intro/tutorial04.txt:203
msgid "Amend URLconf"
msgstr ""

# 74687ca086c444f8b24dc08c5a139ae4
#: ../../intro/tutorial04.txt:205
msgid "First, open the ``polls/urls.py`` URLconf and change it like so::"
msgstr ""

# 797f300f86d046c59175d6bfacaaebad
#: ../../intro/tutorial04.txt:232
msgid "Amend views"
msgstr ""

# 853f769376a74896b1f4f3fcf07cb6d2
#: ../../intro/tutorial04.txt:234
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""

# 00566f9c14a943adb9b54015bd5c08a2
#: ../../intro/tutorial04.txt:240
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` parameter."
msgstr ""

# ae23e23d5f294a85a0eb38d35875dcb6
#: ../../intro/tutorial04.txt:243
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""

# d038ecc7d5ae44c9910b14e80fb0a102
#: ../../intro/tutorial04.txt:248
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it'll use the template ``\"polls/poll_detail.html\"``. The "
"``template_name`` argument is used to tell Django to use a specific template "
"name instead of the autogenerated default template name. We also specify the "
"``template_name`` for the ``results`` list view -- this ensures that the "
"results view and the detail view have a different appearance when rendered, "
"even though they're both a :class:`~django.views.generic.detail.DetailView` "
"behind the scenes."
msgstr ""

# 90140d03f3a04ffbbf5cf5e7c4b53cf6
#: ../../intro/tutorial04.txt:258
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

# 0522bd70327f40cd827a4ef4c7d9e23b
#: ../../intro/tutorial04.txt:264
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``poll`` and ``latest_poll_list`` context "
"variables. For ``DetailView`` the ``poll`` variable is provided "
"automatically -- since we're using a Django model (``Poll``), Django is able "
"to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``poll_list``. To "
"override this we provide the ``context_object_name`` option, specifying that "
"we want to use ``latest_poll_list`` instead. As an alternative approach, you "
"could change your templates to match the new default context variables -- "
"but it's a lot easier to just tell Django to use the variable you want."
msgstr ""

# f8821ca3a1cf4786aadb798f1b4e8350
#: ../../intro/tutorial04.txt:276
msgid ""
"You can now delete the ``index()``, ``detail()`` and ``results()`` views "
"from ``polls/views.py``. We don't need them anymore -- they have been "
"replaced by generic views. You can also delete the import for "
"``HttpResponse``, which is no longer required."
msgstr ""

# 3404981bbfd049c0b20a9a282691a167
#: ../../intro/tutorial04.txt:281
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

# c2dbac1bbeaa4b1687f5f61c3904cfa2
#: ../../intro/tutorial04.txt:283
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""

# c07cd8664673463d972a2bb20a055403
#: ../../intro/tutorial04.txt:286
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

# 28b2cf0a38f4442c8bd8517495f091be
#: ../../intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr ""

# 79d77641e37940f19719578b917573ef
#: ../../intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

# e76ad9981400410aa648eb443944a7fb
#: ../../intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

# 53c5f1a2ab564bbcadbf545ca69f179e
#: ../../intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

# a0639b862a904705a9a2f0cd35b66bbe
#: ../../intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

# da4ead2ed0ca4ed4b9964190dcffc344
#: ../../intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail - *does a particular model method return values as expected?*, while "
"others examine the overall operation of the software - *does a sequence of "
"user inputs on the site produce the desired result?* That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 </intro/"
"tutorial01>`, using the shell to examine the behavior of a method, or "
"running the application and entering data to check how it behaves."
msgstr ""

# a322844ea3424370a59804d8b8a4221a
#: ../../intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""

# b03c49e1d4b4431181c6d8d121dbf85b
#: ../../intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

# 13c030ae806f4dd790e4e32834f79b0e
#: ../../intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

# 32114b5d0a7440e2b86bdabbb1593542
#: ../../intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""

# 272e5aca416a45e4a53bb1cfec1abeec
#: ../../intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

# 770d8815b3444bac9754c2d2bd40f223
#: ../../intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

# 3182568e20214b7a8cdc2e166ffa7590
#: ../../intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

# a43cd41b54b5492896a829d3c9b161de
#: ../../intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

# ba80bca07ca74702917d52ba493892ac
#: ../../intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""

# 2799e81599844f4b8a01d82a612689f5
#: ../../intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""

# cc06a2c9d97847a59fefef78a49dfbb7
#: ../../intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

# 2b30dab33e6248a9b53ed2c1b9904f82
#: ../../intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

# cc7f405d2ccf48b39eda8d2de1ec28ce
#: ../../intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

# bfd32baf08cd4c5ab50029b6193f6bd2
#: ../../intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

# 3e46823c65e14053a3c243e3fa7f945d
#: ../../intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

# 8818ff89f8434a0ea77cc039b5bf221f
#: ../../intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by design."
"\""
msgstr ""

# 49f9be8dd49b4ab783c585884c43b07d
#: ../../intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""

# a3002518c2684fea9880d2577fff7edb
#: ../../intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

# 4422a4d42777471fab58bab6c6dfb7d8
#: ../../intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

# 30165df0520749e897c2098493c2d712
#: ../../intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

# ac34dec0988b4486854101631915c2ce
#: ../../intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

# 63a482fc28f84f51bb07012d1a5d0eea
#: ../../intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development simply formalizes the problem in a Python test case."
msgstr ""

# 986b60532d214cfab74b281380955341
#: ../../intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

# 7c0f44912bde48e8b94db8c89cb63f70
#: ../../intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

# 0b7b116073964b169ee5f69a66b43e0d
#: ../../intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

# 21c679416cbc4391835316677d27a6d8
#: ../../intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

# 6359fc02103f43f6ae09fa6a9dafb8d9
#: ../../intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

# 45a5251e702c403fa19cb2a03472bfbb
#: ../../intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Poll.was_published_recently()`` method returns ``True`` if "
"the ``Poll`` was published within the last day (which is correct) but also "
"if the ``Poll``'s ``pub_date`` field is in the future (which certainly "
"isn't)."
msgstr ""

# 334e2455523f421dbc1a7e2ffcbd4849
#: ../../intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a poll whose date lies in the future; "
"you'll see that the ``Poll`` change list claims it was published recently."
msgstr ""

# 411bd555bd5047b6b4520d74e712f390
#: ../../intro/tutorial05.txt:140
msgid "You can also see this using the shell::"
msgstr ""

# d957f0fc87a14ab88c3c5bf31a4246e5
#: ../../intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

# a1af34d14cf14bdba40277e83b180426
#: ../../intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

# 5e5f538048084e1b9a37cfbb23c898b0
#: ../../intro/tutorial05.txt:156
msgid ""
"What we've just done in the shell to test for the problem is exactly what we "
"can do in an automated test, so let's turn that into an automated test."
msgstr ""

# 355eae04581e47f29430a19b39e4fee0
#: ../../intro/tutorial05.txt:159
msgid ""
"The best place for an application's tests is in the application's ``tests."
"py`` file - the testing system will look there for tests automatically."
msgstr ""

# 8d0d7be7308543609d8dc3c657f9bdb8
#: ../../intro/tutorial05.txt:162
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application::"
msgstr ""

# 71b00449d5534856ba9a56b65b71adad
#: ../../intro/tutorial05.txt:181
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Poll`` instance with a ``pub_date`` in the "
"future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""

# ddca98f277324454b995d3da78740cd3
#: ../../intro/tutorial05.txt:187
msgid "Running tests"
msgstr ""

# 95d0beb3e48541fca424ddedcbb74936
#: ../../intro/tutorial05.txt:189
msgid "In the terminal, we can run our test::"
msgstr ""

# d159613a301e4d8689ff98d3cc97657c
#: ../../intro/tutorial05.txt:193
msgid "and you'll see something like::"
msgstr ""

# 4f15df1c145b409b95fec80893041558
#: ../../intro/tutorial05.txt:211
msgid "What happened is this:"
msgstr ""

# bf49ecc66f3c4f73bfe0350cffb003a2
#: ../../intro/tutorial05.txt:213
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""

# b7c6326b140f4e219eb53a02d4d8cdf0
#: ../../intro/tutorial05.txt:215
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

# 147e00226965431984941775389bf1f7
#: ../../intro/tutorial05.txt:217
msgid "it created a special database for the purpose of testing"
msgstr ""

# 1a40f1bf620140c4a25af112397d207c
#: ../../intro/tutorial05.txt:219
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

# 9aa79dcd9092485caa567640c3f2781f
#: ../../intro/tutorial05.txt:221
msgid ""
"in ``test_was_published_recently_with_future_poll`` it created a ``Poll`` "
"instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

# 4ff98a5aa70d456fb859a5d99a989939
#: ../../intro/tutorial05.txt:224
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""

# b1b7bb2ce58449d8a70c04c9bed3c7a3
#: ../../intro/tutorial05.txt:228
msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""

# 393891bfbb22495f82ad7c9a403dc953
#: ../../intro/tutorial05.txt:232
msgid "Fixing the bug"
msgstr ""

# d9eb2ab2aedc4b6ca57d699cc1722326
#: ../../intro/tutorial05.txt:234
msgid ""
"We already know what the problem is: ``Poll.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past::"
msgstr ""

# cd6a0876619a41a5ae2aab0a3c5436b7
#: ../../intro/tutorial05.txt:243
msgid "and run the test again::"
msgstr ""

# f0ef26827d1d44eeb613e0170dbd33c7
#: ../../intro/tutorial05.txt:253
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

# 136b2cef94da42f6b0508b85ab8e3dc2
#: ../../intro/tutorial05.txt:256
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

# 8cfb314258a64177bc3e4b3240d53ac2
#: ../../intro/tutorial05.txt:262
msgid "More comprehensive tests"
msgstr ""

# 8f0a0940dc354e928a668553d203fea6
#: ../../intro/tutorial05.txt:264
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""

# dd754cc7e88d47aab7824f3800c52ad7
#: ../../intro/tutorial05.txt:268
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively::"
msgstr ""

# c24241b928064a1bbccc842af9ef3b60
#: ../../intro/tutorial05.txt:287
msgid ""
"And now we have three tests that confirm that ``Poll.was_published_recently()"
"`` returns sensible values for past, recent, and future polls."
msgstr ""

# de99421ac826490eb34f6ce22edcb476
#: ../../intro/tutorial05.txt:290
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

# 0bb09a05228944b0a7d8d49fd83ff227
#: ../../intro/tutorial05.txt:295
msgid "Test a view"
msgstr ""

# 8c144b2b56354b8cb3e62695b92858c3
#: ../../intro/tutorial05.txt:297
msgid ""
"The polls application is fairly undiscriminating: it will publish any poll, "
"including ones whose ``pub_date`` field lies in the future. We should "
"improve this. Setting a ``pub_date`` in the future should mean that the Poll "
"is published at that moment, but invisible until then."
msgstr ""

# 91cc15f4c8794b18b47a517c71c2d7a8
#: ../../intro/tutorial05.txt:303
msgid "A test for a view"
msgstr ""

# 9fd8964db86e4b2082b59f12aec24c72
#: ../../intro/tutorial05.txt:305
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""

# 31d3eb7d378a48e58cea0d850bb737e7
#: ../../intro/tutorial05.txt:309
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""

# 7505d5741bf84544a9761d8badf5d511
#: ../../intro/tutorial05.txt:313
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

# 7a9687b8fcdd493a98f8fd0fd307a358
#: ../../intro/tutorial05.txt:316
msgid "The Django test client"
msgstr ""

# a01069652aae4842ba63b83936776e3a
#: ../../intro/tutorial05.txt:318
msgid ""
"Django provides a test :class:`~django.test.client.Client` to simulate a "
"user interacting with the code at the view level.  We can use it in ``tests."
"py`` or even in the shell."
msgstr ""

# 8c4ab17f9f064bcdb434b8138ae7c9a1
#: ../../intro/tutorial05.txt:322
msgid ""
"We will start again with the shell, where we need to do a couple of things "
"that won't be necessary in ``tests.py``. The first is to set up the test "
"environment in the shell::"
msgstr ""

# 9467fd520ad94eb2b64e3edaaaf272c9
#: ../../intro/tutorial05.txt:329
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

# e477ab79bfd544f6a1a6f16d347ab1fb
#: ../../intro/tutorial05.txt:337
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

# c6a33b839dea4fe9b54425f37f5a282a
#: ../../intro/tutorial05.txt:368
msgid "Improving our view"
msgstr ""

# 09620c4c15704c959fbe8dec163534d5
#: ../../intro/tutorial05.txt:370
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

# d43d098a2a4642f58ac11158d61de0a6
#: ../../intro/tutorial05.txt:373
msgid ""
"In :doc:`Tutorial 4 </intro/tutorial04>` we deleted the view functions from "
"``views.py`` in favor of a :class:`~django.views.generic.list.ListView` in "
"``urls.py``::"
msgstr ""

# 5474c683ab864a9aaf0dec73b2f20c19
#: ../../intro/tutorial05.txt:384
msgid ""
"``response.context_data['latest_poll_list']`` extracts the data this view "
"places into the context."
msgstr ""

# 0207b2fb38554e4a9440bfc91260c6d5
#: ../../intro/tutorial05.txt:387
msgid "We need to amend the line that gives us the ``queryset``::"
msgstr ""

# 6689fbea1c814ddd9fd13b1ea72ab548
#: ../../intro/tutorial05.txt:391
msgid ""
"Let's change the queryset so that it also checks the date by comparing it "
"with ``timezone.now()``. First we need to add an import::"
msgstr ""

# 447ca39661e145b5867444ca85b3f0ba
#: ../../intro/tutorial05.txt:396
msgid "and then we must amend the existing ``url`` function to::"
msgstr ""

# d93aca566ad14ae7bd30b1550adc955a
#: ../../intro/tutorial05.txt:406
msgid ""
"``Poll.objects.filter(pub_date__lte=timezone.now)`` returns a queryset "
"containing Polls whose ``pub_date`` is less than or equal to - that is, "
"earlier than or equal to - ``timezone.now``. Notice that we use a callable "
"queryset argument, ``timezone.now``, which will be evaluated at request "
"time. If we had included the parentheses, ``timezone.now()`` would be "
"evaluated just once when the web server is started."
msgstr ""

# 8b5239fec0bb4f21a10d61585b0cf1ed
#: ../../intro/tutorial05.txt:414
msgid "Testing our new view"
msgstr ""

# 441b780adc6c46fbbb0713c0f085b113
#: ../../intro/tutorial05.txt:416
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Polls`` with dates "
"in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our shell session above."
msgstr ""

# 49fe686fb0b1457bab7924867baec7cd
#: ../../intro/tutorial05.txt:423
msgid "Add the following to ``polls/tests.py``::"
msgstr ""

# 7cfaaea71fc045caaf913a969698efc4
#: ../../intro/tutorial05.txt:427
msgid ""
"and we'll create a factory method to create polls as well as a new test "
"class::"
msgstr ""

# b4e79facffab4301bbbe466864eb170b
#: ../../intro/tutorial05.txt:494
msgid "Let's look at some of these more closely."
msgstr ""

# 468317e858e0408a84d25d4a0dfd6d63
#: ../../intro/tutorial05.txt:496
msgid ""
"First is a poll factory method, ``create_poll``, to take some repetition out "
"of the process of creating polls."
msgstr ""

# 7b2ccc657df44e75a200f1e94a1c4867
#: ../../intro/tutorial05.txt:499
msgid ""
"``test_index_view_with_no_polls`` doesn't create any polls, but checks the "
"message: \"No polls are available.\" and verifies the ``latest_poll_list`` "
"is empty. Note that the :class:`django.test.TestCase` class provides some "
"additional assertion methods. In these examples, we use :meth:`~django.test."
"TestCase.assertContains()` and :meth:`~django.test.TestCase."
"assertQuerysetEqual()`."
msgstr ""

# c3444443499a42218d5f1906e83f71b7
#: ../../intro/tutorial05.txt:506
msgid ""
"In ``test_index_view_with_a_past_poll``, we create a poll and verify that it "
"appears in the list."
msgstr ""

# 8232d0ecfd0244749ea2f29ad12a3d2c
#: ../../intro/tutorial05.txt:509
msgid ""
"In ``test_index_view_with_a_future_poll``, we create a poll with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first poll is no longer there, and so again the index shouldn't have any "
"polls in it."
msgstr ""

# 7cec3bc2ba264dae9bc1b680b45a7240
#: ../../intro/tutorial05.txt:513
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

# 682a2b0ac71b40b89f91de48125d41da
#: ../../intro/tutorial05.txt:518
msgid "Testing the ``DetailView``"
msgstr ""

# 2a2171e4b5c249af8a02d07caed150c8
#: ../../intro/tutorial05.txt:520
msgid ""
"What we have works well; however, even though future polls don't appear in "
"the *index*, users can still reach them if they know or guess the right URL. "
"So we need similar constraints in the ``DetailViews``, by adding::"
msgstr ""

# f3a8489b68a64532942453214d76f630
#: ../../intro/tutorial05.txt:526
msgid "to them - for example::"
msgstr ""

# 9a395accc1524b2d9e0fa284834491ee
#: ../../intro/tutorial05.txt:535
msgid ""
"and of course, we will add some tests, to check that a ``Poll`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not::"
msgstr ""

# ffbd0624f0754fb6bddb46122dae0064
#: ../../intro/tutorial05.txt:559
msgid "Ideas for more tests"
msgstr ""

# 4feb81ce75484b7a9f6e6f85366d3884
#: ../../intro/tutorial05.txt:561
msgid ""
"We ought to add similar ``queryset`` arguments to the other ``DetailView`` "
"URLs, and create a new test class for each view. They'll be very similar to "
"what we have just created; in fact there will be a lot of repetition."
msgstr ""

# 7f134a079b6542adbc4427e75494080a
#: ../../intro/tutorial05.txt:565
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Polls`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Polls``. Our tests would create a ``Poll`` without ``Choices`` and "
"then test that it's not published, as well as create a similar ``Poll`` "
"*with* ``Choices``, and test that it *is* published."
msgstr ""

# b4f1571712c243d99880a2f7c028d6e7
#: ../../intro/tutorial05.txt:572
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Polls``, but not ordinary visitors. Again: whatever needs to be added to "
"the software to accomplish this should be accompanied by a test, whether you "
"write the test first and then make the code pass the test, or work out the "
"logic in your code first and then write a test to prove it."
msgstr ""

# 1c10a31d79454382bdaa92e874268369
#: ../../intro/tutorial05.txt:578
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

# e236b5cd7dab444f9d6fa019a3327844
#: ../../intro/tutorial05.txt:582
msgid "When testing, more is better"
msgstr ""

# c0bc5a5d4f1f44989c69212d6f34e0ba
#: ../../intro/tutorial05.txt:584
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

# 2f482723cac1495f8bc48d66919a752f
#: ../../intro/tutorial05.txt:588
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

# f7decfdb021248c89094313dec684639
#: ../../intro/tutorial05.txt:592
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Polls`` with ``Choices`` are published. In that case, many of "
"our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

# a30af9e503fa47a2b17949cb174d9173
#: ../../intro/tutorial05.txt:597
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

# a641b9047c454a498fdd9c6222cfb429
#: ../../intro/tutorial05.txt:601
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""

# 6acb594a1b7d4766987fab57657c1e1f
#: ../../intro/tutorial05.txt:604
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

# fb8c171094e94ae3894ca9b82dd9ce20
#: ../../intro/tutorial05.txt:605
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

# 24da4a6a09ad43b99a1a44c9a0742e13
#: ../../intro/tutorial05.txt:606
msgid "test method names that describe their function"
msgstr ""

# cea24194a3034843819ffd97233e53db
#: ../../intro/tutorial05.txt:609
msgid "Further testing"
msgstr ""

# 562d589580eb40a8b0ee44c10002cc27
#: ../../intro/tutorial05.txt:611
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""

# 4db441cf3db34fea89354f3c7a4445be
#: ../../intro/tutorial05.txt:615
msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""

# a724cce92bc84ba3932df47445edfeb4
#: ../../intro/tutorial05.txt:624
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

# 732ab86a8dac45c8b7836cd284b91853
#: ../../intro/tutorial05.txt:628
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""

# 67c119f6eb6a42d1a33e42c5219f2b65
#: ../../intro/tutorial05.txt:634
msgid ""
":doc:`Testing Django applications </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""

# bcd8fd0be8524de188c9dfbe9e7313d3
#: ../../intro/tutorial05.txt:643
msgid ""
"For full details on testing, see :doc:`Testing in Django </topics/testing/"
"index>`."
msgstr ""

# 2f03e47ede794f50b347ea1b3491316e
#: ../../intro/tutorial05.txt:646
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this "
"tutorial</intro/tutorial06>` to learn about static files management."
msgstr ""

# b083f13d474f42519c0e097bfc7591cb
#: ../../intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr ""

# 6b5c61ac06d842578fee88aceff84f6c
#: ../../intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""

# 8986a64e69bc4653881b91a65afa8270
#: ../../intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need "
"to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""

# 3a8de8b60ab347ddb2d684501f48fc3c
#: ../../intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

# 7b47139b0ad449d6a5352a1993d309f9
#: ../../intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

# c40d6bfbd434429c9675dd5d971f3f52
#: ../../intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr ""

# 96e06c313c24491bafc14f5e9d189be1
#: ../../intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""

# 07c983bc71a649a496b0c8e9e80b4e34
#: ../../intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

# 3ebc616d606740b39022ad6fd3ed612b
#: ../../intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called ``style."
"css``. In other words, your stylesheet should be at ``polls/static/polls/"
"style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder "
"works, you can refer to this static file in Django simply as ``polls/style."
"css``, similar to how you reference the path for templates."
msgstr ""

# 41ef2ac0166942a09ac4f35d3172c0ad
#: ../../intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

# 0a9fb126141e4b7db547965a7c428e79
#: ../../intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# ff7d27279aa04bac8c852fbb88ad0268
#: ../../intro/tutorial06.txt:65
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

# 96193ee2e9274dd19f216f527236e4f7
#: ../../intro/tutorial06.txt:73
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

# 56bd58e3151e4eca9959a85213bcf861
#: ../../intro/tutorial06.txt:77
msgid ""
"That's all you need to do for development. Reload ``http://localhost:8000/"
"polls/`` and you should see that the poll links are green (Django style!) "
"which means that your stylesheet was properly loaded."
msgstr ""

# 41700c6168284e938751ed4b780292aa
#: ../../intro/tutorial06.txt:82
msgid "Adding a background-image"
msgstr ""

# 96843b5a2c38488698c1a89c08d21662
#: ../../intro/tutorial06.txt:84
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

# 2af5e8206b5440fe8da6514d3134f6fc
#: ../../intro/tutorial06.txt:89
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

# b635dabd21b643d284ff88a0d04b7f9d
#: ../../intro/tutorial06.txt:97
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

# 995b9d0ecd4f4260a018dc6d0884e8ea
#: ../../intro/tutorial06.txt:102
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the :ttag:"
"`static` template tag to generate its URLs) without having to modify a bunch "
"of paths in your static files as well."
msgstr ""

# 10021844211946f4b64623ef1ede23bc
#: ../../intro/tutorial06.txt:109
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see :doc:`the static files howto </howto/static-"
"files/index>` and :doc:`the staticfiles reference </ref/contrib/"
"staticfiles>`. :doc:`Deploying static files </howto/static-files/"
"deployment>` discusses how to use static files on a real server."
msgstr ""

# 6b6d57a32bc34008b528242040ff05a5
#: ../../intro/tutorial06.txt:119
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here </intro/"
"whatsnext>`."
msgstr ""

# 77793c243d864625ac797edd4dd421e3
#: ../../intro/tutorial06.txt:123
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""

# fe733ba23061407aabcd13dda57a6cf1
#: ../../intro/whatsnext.txt:3
msgid "What to read next"
msgstr ""

# 79dd58da15be49798f57150f3b13959e
#: ../../intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""

# d29b0a98469f473298164d46322127fd
#: ../../intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

# 7a6c09b05fd0466f8a4ad63af1b18174
#: ../../intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

# 006c32926bc84328aab2054ad1e29fec
#: ../../intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to "
"read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

# d18dbfdbbff343c38aacbd2094fed4a4
#: ../../intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

# fa8099b510b44d3d95c8e9551e942f1d
#: ../../intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

# d4bbbd938fbd4c158f7b3b8fccd05f20
#: ../../intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A few good places to "
"start are the :ref:`search` and the :ref:`genindex`."
msgstr ""

# 441e546bf8ce4ec68480d88900836073
#: ../../intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

# 7d2136a8871b4e089a96d0b9f14fcbc0
#: ../../intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

# b08cbe66aa754757a64292717b408775
#: ../../intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

# fd9956a8e85842f8874bdda5cc14b2df
#: ../../intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

# ccae09e9655b428e8005460bcf1449a3
#: ../../intro/whatsnext.txt:43
msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's :doc:"
"`model system </topics/db/index>`, :doc:`template engine </topics/"
"templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""

# bb2e2595d92a4889adf02c00f03db47e
#: ../../intro/whatsnext.txt:49
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

# 2bb62e942d604771b5b241d892d65cda
#: ../../intro/whatsnext.txt:53
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about :doc:"
"`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom "
"template tags </howto/custom-template-tags>`, and more."
msgstr ""

# 7710c11553a648b3af540806442bca00
#: ../../intro/whatsnext.txt:59
msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ </faq/"
"index>`."
msgstr ""

# bc0fca0a67634078a84a1938d1e62f67
#: ../../intro/whatsnext.txt:62
msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whathaveyou."
msgstr ""

# c006e22c139f4b168936952ace2d3381
#: ../../intro/whatsnext.txt:69
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>` "
"and :doc:`internals documentation </internals/index>` for those who want to "
"add code to Django itself, and a :doc:`few other things that simply don't "
"fit elsewhere </misc/index>`."
msgstr ""

# 92f6ddc2d6a94c88af075f1c8a0228c7
#: ../../intro/whatsnext.txt:77
msgid "How documentation is updated"
msgstr ""

# 9d1fe9f6078e40fba199bd0286bbf939
#: ../../intro/whatsnext.txt:79
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

# 9256b28d2ed54c4b95e7be4f7752c9c3
#: ../../intro/whatsnext.txt:83
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

# 602c1d5e69734a7bb4e20c991dd9eeb2
#: ../../intro/whatsnext.txt:85
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

# caa59138ce734f3b921d6d1c2443495c
#: ../../intro/whatsnext.txt:88
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

# f65ecd149d59423aa9ef6049d2f6feb5
#: ../../intro/whatsnext.txt:91
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

# 5bd95c93a04e45239dc3bd8b1986157d
#: ../../intro/whatsnext.txt:94
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document "
"online is a separate text file in the repository."
msgstr ""

# d7ac5c9f6208491c9c092f25237f25e5
#: ../../intro/whatsnext.txt:101
msgid "Where to get it"
msgstr ""

# df61a70820774cfeba0b769bc23dffc7
#: ../../intro/whatsnext.txt:103
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

# f4d878a33e02453baef275925ce17d1e
#: ../../intro/whatsnext.txt:107
msgid "On the Web"
msgstr ""

# f8fc93510f5b44f0b93d457be4cb627f
#: ../../intro/whatsnext.txt:109
msgid ""
"The most recent version of the Django documentation lives at https://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See \"Differences "
"between versions\" below.)"
msgstr ""

# 6f7d20c10ba84fb694c3a2ec53fb2abc
#: ../../intro/whatsnext.txt:117
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""

# 6bfd42095d3d4df1b77e2aeff3ba530d
#: ../../intro/whatsnext.txt:121
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the `django-users mailing list`_ or the "
"`#django IRC channel`_ instead."
msgstr ""

# d31b635b3ae54b8184b2c76a535d2372
#: ../../intro/whatsnext.txt:131
msgid "In plain text"
msgstr ""

# 6267e9fad18e4c2386534d1eae8708ab
#: ../../intro/whatsnext.txt:133
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

# 30da32915dc04fde8cc273bdfb96aa44
#: ../../intro/whatsnext.txt:136
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""

# 2a941336bacd498d9880bc637036dce8
#: ../../intro/whatsnext.txt:140
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that "
"the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

# bea8bdd65fdf431a958ac427d4b09625
#: ../../intro/whatsnext.txt:144
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

# c97fb6fa19774cdfa25d20fcc6130c34
#: ../../intro/whatsnext.txt:154
msgid "As HTML, locally"
msgstr ""

# 333fc51d3ba94a0aae136070c95ae8e1
#: ../../intro/whatsnext.txt:156
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

# c5022103a4054d9c8822c902d115ca63
#: ../../intro/whatsnext.txt:158
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

# 46b45b60eeab4c6f9254209c2d7fb545
#: ../../intro/whatsnext.txt:166
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

# e7a6819d3f7748e2870d242a40c76c50
#: ../../intro/whatsnext.txt:174
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

# 55e3ba101f694f778ec5193179f6aad7
#: ../../intro/whatsnext.txt:176
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

# 3a772f0721ed4de2a7449ef34b084333
#: ../../intro/whatsnext.txt:183
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

# 2459b4a20bed4f678abed96494bb0d3d
#: ../../intro/whatsnext.txt:187
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

# efd0dbc1a441468cbdf635cc5e0aae95
#: ../../intro/whatsnext.txt:196
msgid "Differences between versions"
msgstr ""

# 0f23839244fe4fe382118852330b0e20
#: ../../intro/whatsnext.txt:198
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

# a1e46e340bfa49d0bd56bf248e0d3ed1
#: ../../intro/whatsnext.txt:205
msgid "We follow this policy:"
msgstr ""

# 42e7f35b03574b708ae28e0cb634f57c
#: ../../intro/whatsnext.txt:207
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

# 000a0cf7591a471db38bdf2616b157b8
#: ../../intro/whatsnext.txt:212
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

# fa50b18fa6894e478ba82a5f3d9cbcb3
#: ../../intro/whatsnext.txt:215
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

# c6e7dc0a81fc432ba017a341acfcb809
#: ../../intro/whatsnext.txt:219
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is :ref:`no longer supported<backwards-compatibility-policy>`, that "
"version of the docs won't get any further updates."
msgstr ""

# 7ea4a05dff764950a24e68d2d0d59a10
#: ../../intro/whatsnext.txt:224
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
