FAQ: 오픈소스 참여방법(Contributing code)
======================

Django 오픈소스 시작은 어떻게하나?--------------------------------------------------

감사합니다이 주제와 관련된 문서전체를 작성했습니다.
문서의 타이틀은:`Contributing to Django </internals/contributing/index>`입니다.

저는 몇 주전 티켓시스템에 버그픽스를 제출했습니다. 그런데 왜 저의 패치가무시되고 있죠?--------------------------------------------------------------------------------------------

걱정마세요: 당신을 무시하는 것이 아닙니다!

"티켓이 무시되는 것"은 "티켓이 아직 미참여 상태에 있는 것"과 다릅니다( 즉 이 둘 사이에는 중요한 차이점이 있습니다)  Django 티켓시스템은 수백개의 오픈티켓을 포함하고 있으며, 엔드유저입장에서보면 각각 다양한 수준의 기능상 임팩트를 가지고 있습니다. 또한 Django개발자들은 리뷰하고 우선순위를 매겨야 합니다.

무엇보다도 Django프로젝트에 참여하는 모든 이는 자발적 참여자입니다. 결론적으로,
이 프레임웍에 투자하는 시간은 제한적입니다. 그리고 투자할 수 있는 여가시간은 주 단위로 바뀝니다. 만약에 바쁜 경우라면 원하는 만큼 투자할 수 없겠죠.

The best way to make sure tickets do not get hung up on the way to checkin is
to make it dead easy, even for someone who may not be intimately familiar with
that area of the code, to understand the problem and verify the fix:( 체크인이 오래동안 해결되지 않는 상태를 방지하기 위해서는  문제점을 쉽게 이해하고 수정해버리는 것이다. 즉 특정코드에 대한 이해가 부족하더라도 말이다. -- 번역검토요)

* 버그를 재현하는 특정한 설명이나 지침서가 있나요?만약 이것이
  디펜던시(이를테면 PIL같은 경우), contrib 모듈, 또는 특정
  데이타베이스를 건드리는 경우라면, 이 지침서는 이 코드에 친숙하지 않은 사용자를 위해서도 충분한가?
  familiar with it?

* If there are several patches attached to the ticket, is it clear what
  each one does, which ones can be ignored and which matter?

* 패치는 유닛테스트를 포함하고 있나요?만약에 포함하고 있지 않다면, 설명가능한 명백한 이유가 있나요?
  왜?A test expresses succinctly what the problem is,
  and shows that the patch actually fixes it.

If your patch stands no chance of inclusion in Django, we won't ignore it --
we'll just close the ticket. So if your ticket is still open, it doesn't mean
we're ignoring you; it just means we haven't had time to look at it yet.

When and how might I remind the core team of a patch I care about?
------------------------------------------------------------------

A polite, well-timed message to the mailing list is one way to get attention.
To determine the right time, you need to keep an eye on the schedule. If you
post your message when the core developers are trying to hit a feature
deadline or manage a planning phase, you're not going to get the sort of
attention you require. However, if you draw attention to a ticket when the
core developers are paying particular attention to bugs -- just before a bug
fixing sprint, or in the lead up to a beta release for example -- you're much
more likely to get a productive response.

Gentle IRC reminders can also work -- again, strategically timed if possible.
During a bug sprint would be a very good time, for example.

Another way to get traction is to pull several related tickets together. When
the core developers sit down to fix a bug in an area they haven't touched for
a while, it can take a few minutes to remember all the fine details of how
that area of code works. If you collect several minor bug fixes together into
a similarly themed group, you make an attractive target, as the cost of coming
up to speed on an area of code can be spread over multiple tickets.

Please refrain from emailing core developers personally, or repeatedly raising
the same issue over and over. This sort of behavior will not gain you any
additional attention -- certainly not the attention that you need in order to
get your pet bug addressed.

But I've reminded you several times and you keep ignoring my patch!
-------------------------------------------------------------------

Seriously - we're not ignoring you. If your patch stands no chance of
inclusion in Django, we'll close the ticket. For all the other tickets, we
need to prioritize our efforts, which means that some tickets will be
addressed before others.

One of the criteria that is used to prioritize bug fixes is the number of
people that will likely be affected by a given bug. Bugs that have the
potential to affect many people will generally get priority over those that
are edge cases.

Another reason that bugs might be ignored for while is if the bug is a symptom
of a larger problem. While we can spend time writing, testing and applying
lots of little patches, sometimes the right solution is to rebuild. If a
rebuild or refactor of a particular component has been proposed or is
underway, you may find that bugs affecting that component will not get as much
attention. Again, this is just a matter of prioritizing scarce resources. By
concentrating on the rebuild, we can close all the little bugs at once, and
hopefully prevent other little bugs from appearing in the future.

Whatever the reason, please keep in mind that while you may hit a particular
bug regularly, it doesn't necessarily follow that every single Django user
will hit the same bug. Different users use Django in different ways, stressing
different parts of the code under different conditions. When we evaluate the
relative priorities, we are generally trying to consider the needs of the
entire community, not just the severity for one particular user. This doesn't
mean that we think your problem is unimportant -- just that in the limited
time we have available, we will always err on the side of making 10 people
happy rather than making 1 person happy.
