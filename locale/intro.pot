# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../intro/contributing.txt:3
# ddaf8c912b834636a88533257daa032b
msgid "Writing your first patch for Django"
msgstr ""

#: ../../intro/contributing.txt:6
# 0d843eadc8df46d6b43a99c5203f4836
msgid "Introduction"
msgstr ""

#: ../../intro/contributing.txt:8
# c10762ea5c9948b3976ce49d7a87d233
msgid "Interested in giving back to the community a little? Maybe you've found a bug in Django that you'd like to see fixed, or maybe there's a small feature you want added."
msgstr ""

#: ../../intro/contributing.txt:12
# ca77638408af42659a189b3dc03a4ca2
msgid "Contributing back to Django itself is the best way to see your own concerns addressed. This may seem daunting at first, but it's really pretty simple. We'll walk you through the entire process, so you can learn by example."
msgstr ""

#: ../../intro/contributing.txt:17
# e1fe016d757142ee8661074d1496d08c
msgid "Who's this tutorial for?"
msgstr ""

#: ../../intro/contributing.txt:19
# 550fa3b526c54f6d93fcf813b813080c
msgid "For this tutorial, we expect that you have at least a basic understanding of how Django works. This means you should be comfortable going through the existing tutorials on :doc:`writing your first Django app</intro/tutorial01>`. In addition, you should have a good understanding of Python itself. But if you don't, `Dive Into Python`__ is a fantastic (and free) online book for beginning Python programmers."
msgstr ""

#: ../../intro/contributing.txt:26
# 11628778420d4fed88ed7f2c80abb51b
msgid "Those of you who are unfamiliar with version control systems and Trac will find that this tutorial and its links include just enough information to get started. However, you'll probably want to read some more about these different tools if you plan on contributing to Django regularly."
msgstr ""

#: ../../intro/contributing.txt:31
# 1e30d8bc0ab34f38a2ddffa8a294db90
msgid "For the most part though, this tutorial tries to explain as much as possible, so that it can be of use to the widest audience."
msgstr ""

#: ../../intro/contributing.txt:36
# 3337cd3779bc430eb6065dddcbf5baf2
msgid "If you're having trouble going through this tutorial, please post a message to `django-developers`__ or drop by `#django-dev on irc.freenode.net`__ to chat with other Django users who might be able to help."
msgstr ""

#: ../../intro/contributing.txt:45
# fc1540983a45415aa61c473bebcef3c2
msgid "What does this tutorial cover?"
msgstr ""

#: ../../intro/contributing.txt:47
# ccd4c51a4cec46958a4eae0463cf1926
msgid "We'll be walking you through contributing a patch to Django for the first time. By the end of this tutorial, you should have a basic understanding of both the tools and the processes involved. Specifically, we'll be covering the following:"
msgstr ""

#: ../../intro/contributing.txt:51
# 2b50a1d8346d49e2a9be4de29012af32
msgid "Installing Git."
msgstr ""

#: ../../intro/contributing.txt:52
# 96040d4d83134a60b61d54f9c198afce
msgid "How to download a development copy of Django."
msgstr ""

#: ../../intro/contributing.txt:53
# 9cce62433cca478d95961d9d0d01ac47
msgid "Running Django's test suite."
msgstr ""

#: ../../intro/contributing.txt:54
# 61d75ead5ca54cb7814242876fcd4671
msgid "Writing a test for your patch."
msgstr ""

#: ../../intro/contributing.txt:55
# 6de6f7bd9383452cb6a31025b1d58cfe
msgid "Writing the code for your patch."
msgstr ""

#: ../../intro/contributing.txt:56
# c0b84d1aedfc415abc47647cb438f031
msgid "Testing your patch."
msgstr ""

#: ../../intro/contributing.txt:57
# 74d24c773eee4f26a0c9923df83a0708
msgid "Generating a patch file for your changes."
msgstr ""

#: ../../intro/contributing.txt:58
# 2dea1b62acc143b98d1efbaf01be8ae0
msgid "Where to look for more information."
msgstr ""

#: ../../intro/contributing.txt:60
# 2b308252744b4cd28df34b04cf0525b3
msgid "Once you're done with the tutorial, you can look through the rest of :doc:`Django's documentation on contributing</internals/contributing/index>`. It contains lots of great information and is a must read for anyone who'd like to become a regular contributor to Django. If you've got questions, it's probably got the answers."
msgstr ""

#: ../../intro/contributing.txt:67
# 7015b1b6b91844e0805759f5a945bb1f
msgid "Installing Git"
msgstr ""

#: ../../intro/contributing.txt:69
# c296e8402e9c464d99007047e0b218da
msgid "For this tutorial, you'll need Git installed to download the current development version of Django and to generate patch files for the changes you make."
msgstr ""

#: ../../intro/contributing.txt:73
# a6aeaa2dc575430c860359bd48525694
msgid "To check whether or not you have Git installed, enter ``git`` into the command line. If you get messages saying that this command could be found, you'll have to download and install it, see `Git's download page`__."
msgstr ""

#: ../../intro/contributing.txt:77
# f5d66bce9d5d4abe935fa1bc4c80e143
msgid "If you're not that familiar with Git, you can always find out more about its commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""

#: ../../intro/contributing.txt:83
# b9b6aab1fa514071a36f2b9354a442e0
msgid "Getting a copy of Django's development version"
msgstr ""

#: ../../intro/contributing.txt:85
# b06a4676f3d6446e97370c0d5b211117
msgid "The first step to contributing to Django is to get a copy of the source code. From the command line, use the ``cd`` command to navigate to the directory where you'll want your local copy of Django to live."
msgstr ""

#: ../../intro/contributing.txt:89
# 23defdaee5f04a728eae641872d813c0
msgid "Download the Django source code repository using the following command::"
msgstr ""

#: ../../intro/contributing.txt:95
# 817a46073af740cfa4cc0b44df32707e
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr ""

#: ../../intro/contributing.txt:99
# 3068471a2d2e4c2aad2a50a9a3012cd2
msgid "to link your cloned checkout into a virtual environment. This is a great option to isolate your development copy of Django from the rest of your system and avoids potential package conflicts."
msgstr ""

#: ../../intro/contributing.txt:106
# c7cdc4ffddae483b9226b366d6f84b2a
msgid "Rolling back to a previous revision of Django"
msgstr ""

#: ../../intro/contributing.txt:108
# 136e0368855444fa896d4b6f0ffe37ed
msgid "For this tutorial, we'll be using `ticket #17549`__ as a case study, so we'll rewind Django's version history in git to before that ticket's patch was applied. This will allow us to go through all of the steps involved in writing that patch from scratch, including running Django's test suite."
msgstr ""

#: ../../intro/contributing.txt:113
# 5e8eb4300dec4f9a9f25d768050981e4
msgid "**Keep in mind that while we'll be using an older revision of Django's trunk for the purposes of the tutorial below, you should always use the current development revision of Django when working on your own patch for a ticket!**"
msgstr ""

#: ../../intro/contributing.txt:119
# 96485d4554c54ffc86e72396a50f1187
msgid "The patch for this ticket was written by Ulrich Petri, and it was applied to Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Consequently, we'll be using the revision of Django just prior to that, `commit 39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""

#: ../../intro/contributing.txt:128
# 5f96d15ccc0c466da6faf885bd399625
msgid "Navigate into Django's root directory (that's the one that contains ``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out the older revision of Django that we'll be using in the tutorial below::"
msgstr ""

#: ../../intro/contributing.txt:135
# 7e03b3103de6454fa1bcd1a0ae0af5f0
msgid "Running Django's test suite for the first time"
msgstr ""

#: ../../intro/contributing.txt:137
# 2b0b8e635d61438a80e7085f5b876d8e
msgid "When contributing to Django it's very important that your code changes don't introduce bugs into other areas of Django.  One way to check that Django still works after you make your changes is by running Django's test suite. If all the tests still pass, then you can be reasonably sure that your changes haven't completely broken Django. If you've never run Django's test suite before, it's a good idea to run it once beforehand just to get familiar with what its output is supposed to look like."
msgstr ""

#: ../../intro/contributing.txt:145
# 651b08241bf948ce9df8f3e8308cbed1
msgid "We can run the test suite by simply ``cd``-ing into the Django ``tests/`` directory and, if you're using GNU/Linux, Mac OS X or some other flavor of Unix, run::"
msgstr ""

#: ../../intro/contributing.txt:151
# 88d2d5c988fb408e9dfe5b0393402fd4
msgid "If you're on Windows, the above should work provided that you are using \"Git Bash\" provided by the default Git install. GitHub has a `nice tutorial`__."
msgstr ""

#: ../../intro/contributing.txt:158
# ec3122901a1846c3b82b1933d886876e
msgid "If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running the tests. This instructs Python to look for Django in the parent directory of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` automatically."
msgstr ""

#: ../../intro/contributing.txt:163
# 681b4892e2be451fbd421a41c4fb97f2
msgid "Now sit back and relax. Django's entire test suite has over 4800 different tests, so it can take anywhere from 5 to 15 minutes to run, depending on the speed of your computer."
msgstr ""

#: ../../intro/contributing.txt:167
# e546d5d18c81453494e5b01053d66b21
msgid "While Django's test suite is running, you'll see a stream of characters representing the status of each test as it's run. ``E`` indicates that an error was raised during a test, and ``F`` indicates that a test's assertions failed. Both of these are considered to be test failures. Meanwhile, ``x`` and ``s`` indicated expected failures and skipped tests, respectively. Dots indicate passing tests."
msgstr ""

#: ../../intro/contributing.txt:174
# 95f26c590252443884e82196a1d86ee5
msgid "Skipped tests are typically due to missing external libraries required to run the test; see :ref:`running-unit-tests-dependencies` for a list of dependencies and be sure to install any for tests related to the changes you are making (we won't need any for this tutorial)."
msgstr ""

#: ../../intro/contributing.txt:179
# 824e6a7cbe994b04897f99079db74d22
msgid "Once the tests complete, you should be greeted with a message informing you whether the test suite passed or failed. Since you haven't yet made any changes to Django's code, the entire test suite **should** pass. If you get failures or errors make sure you've followed all of the previous steps properly. See :ref:`running-unit-tests` for more information."
msgstr ""

#: ../../intro/contributing.txt:185
# eed3d428807d42f380b23d5b017b348c
msgid "Note that the latest Django trunk may not always be stable. When developing against trunk, you can check `Django's continuous integration builds`__ to determine if the failures are specific to your machine or if they are also present in Django's official builds. If you click to view a particular build, you can view the \"Configuration Matrix\" which shows failures broken down by Python version and database backend."
msgstr ""

#: ../../intro/contributing.txt:196
# a90460f5bead4f8f89b694ae7c83f8cf
msgid "For this tutorial and the ticket we're working on, testing against SQLite is sufficient, however, it's possible (and sometimes necessary) to :ref:`run the tests using a different database <running-unit-tests-settings>`."
msgstr ""

#: ../../intro/contributing.txt:202
# 4696110192254045aab64dc9a0a8229f
msgid "Writing some tests for your ticket"
msgstr ""

#: ../../intro/contributing.txt:204
# c9e118b406354547bd7bff6e601c997d
msgid "In most cases, for a patch to be accepted into Django it has to include tests. For bug fix patches, this means writing a regression test to ensure that the bug is never reintroduced into Django later on. A regression test should be written in such a way that it will fail while the bug still exists and pass once the bug has been fixed. For patches containing new features, you'll need to include tests which ensure that the new features are working correctly. They too should fail when the new feature is not present, and then pass once it has been implemented."
msgstr ""

#: ../../intro/contributing.txt:213
# 5612adf16021477f85c3207ed1ae9ecf
msgid "A good way to do this is to write your new tests first, before making any changes to the code. This style of development is called `test-driven development`__ and can be applied to both entire projects and single patches. After writing your tests, you then run them to make sure that they do indeed fail (since you haven't fixed that bug or added that feature yet). If your new tests don't fail, you'll need to fix them so that they do. After all, a regression test that passes regardless of whether a bug is present is not very helpful at preventing that bug from reoccurring down the road."
msgstr ""

#: ../../intro/contributing.txt:222
# 61c394c87b4f450f8086f0f0834969b4
msgid "Now for our hands-on example."
msgstr ""

#: ../../intro/contributing.txt:227
# 0e7e72ba8ba348648f652b711d49b1f7
msgid "Writing some tests for ticket #17549"
msgstr ""

#: ../../intro/contributing.txt:229
# 5e6a927b52a64bc9b0cb6afee557c5e3
msgid "`Ticket #17549`__ describes the following, small feature addition:"
msgstr ""

#: ../../intro/contributing.txt:231
# 650def1e76ae40f6abb708c47133bfea
msgid "It's useful for URLField to give you a way to open the URL; otherwise you might as well use a CharField."
msgstr ""

#: ../../intro/contributing.txt:234
# 2a578969a8294b36a5fde6a8b4aeac39
msgid "In order to resolve this ticket, we'll add a ``render`` method to the ``AdminURLFieldWidget`` in order to display a clickable link above the input widget. Before we make those changes though, we're going to write a couple tests to verify that our modification functions correctly and continues to function correctly in the future."
msgstr ""

#: ../../intro/contributing.txt:240
# 0e13a5e3efec430d98a9a758c6bd2893
msgid "Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and open the ``tests.py`` file. Add the following code on line 269 right before the ``AdminFileWidgetTest`` class::"
msgstr ""

#: ../../intro/contributing.txt:274
# d5a5bc84ea3d4f67ac8d455bf0575c77
msgid "The new tests check to see that the ``render`` method we'll be adding works correctly in a couple different situations."
msgstr ""

#: ../../intro/contributing.txt:279
# bc2a987981594277937263ebbf1ae4f5
msgid "If you've never had to deal with tests before, they can look a little hard to write at first glance. Fortunately, testing is a *very* big subject in computer programming, so there's lots of information out there:"
msgstr ""

#: ../../intro/contributing.txt:283
# 013fe09a5c5546589aa0cce6e7c2d76b
msgid "A good first look at writing tests for Django can be found in the documentation on :doc:`Testing Django applications</topics/testing/>`."
msgstr ""

#: ../../intro/contributing.txt:285
# a36e612ee84d4ecc996a8ff4efaa1ba1
msgid "Dive Into Python (a free online book for beginning Python developers) includes a great `introduction to Unit Testing`__."
msgstr ""

#: ../../intro/contributing.txt:287
# df67f3282bdf4082891659d1bc742e8c
msgid "After reading those, if you want something a little meatier to sink your teeth into, there's always the `Python unittest documentation`__."
msgstr ""

#: ../../intro/contributing.txt:295
# c473c260442b4a69b5eb15cfea61b47e
msgid "Running your new test"
msgstr ""

#: ../../intro/contributing.txt:297
# caf48ee9ff3e451eb810c180fed0c15a
msgid "Remember that we haven't actually made any modifications to ``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all the tests in the ``model_forms_regress`` folder to make sure that's really what happens. From the command line, ``cd`` into the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:305
# 9f4b3a5e15c74f45819bfbb0e9af271e
msgid "If the tests ran correctly, you should see three failures corresponding to each of the test methods we added. If all of the tests passed, then you'll want to make sure that you added the new test shown above to the appropriate folder and class."
msgstr ""

#: ../../intro/contributing.txt:311
# e10a5488b9324f4fb986a61c9a5c487c
msgid "Writing the code for your ticket"
msgstr ""

#: ../../intro/contributing.txt:313
# 9a4bec3e47e343ea8ce414a1b291923a
msgid "Next we'll be adding the functionality described in `ticket #17549`__ to Django."
msgstr ""

#: ../../intro/contributing.txt:316
# 68d5377cbaad4fa28103fb8480a99e1d
msgid "Writing the code for ticket #17549"
msgstr ""

#: ../../intro/contributing.txt:318
# 5d966467dc5545c4948f7264c8ce8710
msgid "Navigate to the ``django/django/contrib/admin/`` folder and open the ``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

#: ../../intro/contributing.txt:335
# f97c4766619248a097c6f509825c1d5e
msgid "Verifying your test now passes"
msgstr ""

#: ../../intro/contributing.txt:337
# 7eb19d7230e04e2786d0083f22fc50cc
msgid "Once you're done modifying Django, we need to make sure that the tests we wrote earlier pass, so we can see whether the code we wrote above is working correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:344
# 85311a70b3a44432b9751b83ce5db9ba
msgid "Oops, good thing we wrote those tests! You should still see 3 failures with the following exception::"
msgstr ""

#: ../../intro/contributing.txt:349
# 49d420c36f4144b2b8f4a0420bb295a3
msgid "We forgot to add the import for that method.  Go ahead and add the ``smart_urlquote`` import at the end of line 13 of ``django/contrib/admin/widgets.py`` so it looks as follows::"
msgstr ""

#: ../../intro/contributing.txt:355
# a6b4e20fa46d4f3f80269aabf6c799c1
msgid "Re-run the tests and everything should pass. If it doesn't, make sure you correctly modified the ``AdminURLFieldWidget`` class as shown above and copied the new tests correctly."
msgstr ""

#: ../../intro/contributing.txt:362
# ac74e6a8a308481095fd7414657d402b
msgid "Running Django's test suite for the second time"
msgstr ""

#: ../../intro/contributing.txt:364
# 8df95ef1a1864c3b8990238d4ab4589f
msgid "Once you've verified that your patch and your test are working correctly, it's a good idea to run the entire Django test suite just to verify that your change hasn't introduced any bugs into other areas of Django. While successfully passing the entire test suite doesn't guarantee your code is bug free, it does help identify many bugs and regressions that might otherwise go unnoticed."
msgstr ""

#: ../../intro/contributing.txt:370
# f5d90c74052b4fd5b5764c269b5ae0c8
msgid "To run the entire Django test suite, ``cd`` into the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:375
# 3931a48d80284059b73508d6b8af8769
msgid "As long as you don't see any failures, you're good to go. Note that this fix also made a `small CSS change`__ to format the new widget. You can make the change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

#: ../../intro/contributing.txt:382
# e52d24acf65748c1979dd8da0974e8e6
msgid "Writing Documentation"
msgstr ""

#: ../../intro/contributing.txt:384
# 95700823df5f4020b595d43dd913182e
msgid "This is a new feature, so it should be documented.  Add the following on line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs for ``URLField``::"
msgstr ""

#: ../../intro/contributing.txt:393
# 17878f0878db4b2bad30ffffab1be535
msgid "For more information on writing documentation, including an explanation of what the ``versionadded`` bit is all about, see :doc:`/internals/contributing/writing-documentation`. That page also includes an explanation of how to build a copy of the documentation locally, so you can preview the HTML that will be generated."
msgstr ""

#: ../../intro/contributing.txt:400
# 1afe48e6b5ab4b21bda43c7ffed0a8cf
msgid "Generating a patch for your changes"
msgstr ""

#: ../../intro/contributing.txt:402
# 2d0996748d714c869081d2e02638dfcf
msgid "Now it's time to generate a patch file that can be uploaded to Trac or applied to another copy of Django. To get a look at the content of your patch, run the following command::"
msgstr ""

#: ../../intro/contributing.txt:408
# 09853e2541b34e6e8c7f39aa1746d8f0
msgid "This will display the differences between your current copy of Django (with your changes) and the revision that you initially checked out earlier in the tutorial."
msgstr ""

#: ../../intro/contributing.txt:412
# ef16449dd34f428281c465538a1bdc39
msgid "Once you're done looking at the patch, hit the ``q`` key to exit back to the command line.  If the patch's content looked okay, you can run the following command to save the patch file to your current working directory::"
msgstr ""

#: ../../intro/contributing.txt:418
# c9572121bad549d9850a68fc8555b231
msgid "You should now have a file in the root Django directory called ``17549.diff``. This patch file contains all your changes and should look this:"
msgstr ""

#: ../../intro/contributing.txt:512
# 3f147b1f9d394a51b2d2caea943f6e98
msgid "So what do I do next?"
msgstr ""

#: ../../intro/contributing.txt:514
# 711ab66a05b84145815fdc938151bcf7
msgid "Congratulations, you've generated your very first Django patch! Now that you've got that under your belt, you can put those skills to good use by helping to improve Django's codebase. Generating patches and attaching them to Trac tickets is useful, however, since we are using git - adopting a more :doc:`git oriented workflow </internals/contributing/writing-code/working-with-git>` is recommended."
msgstr ""

#: ../../intro/contributing.txt:521
# b56ec734bdd0431d904ea6b25640ff9a
msgid "Since we never committed our changes locally, perform the following to get your git branch back to a good starting point::"
msgstr ""

#: ../../intro/contributing.txt:528
# 2ea5c12e02f54ecb836fb4aa6c92b86d
msgid "More information for new contributors"
msgstr ""

#: ../../intro/contributing.txt:530
# 507c3cb3c3bd4f6f9afc5c73c80dc210
msgid "Before you get too into writing patches for Django, there's a little more information on contributing that you should probably take a look at:"
msgstr ""

#: ../../intro/contributing.txt:533
# b0c5d8afa0bb447e8aab795b7a255138
msgid "You should make sure to read Django's documentation on :doc:`claiming tickets and submitting patches </internals/contributing/writing-code/submitting-patches>`. It covers Trac etiquette, how to claim tickets for yourself, expected coding style for patches, and many other important details."
msgstr ""

#: ../../intro/contributing.txt:538
# 0c05c2bfb9c7429bb7fcbb38d14e8261
msgid "First time contributors should also read Django's :doc:`documentation for first time contributors</internals/contributing/new-contributors/>`. It has lots of good advice for those of us who are new to helping out with Django."
msgstr ""

#: ../../intro/contributing.txt:542
# 3684888fa5ad407aad9bf3608f186c5a
msgid "After those, if you're still hungry for more information about contributing, you can always browse through the rest of :doc:`Django's documentation on contributing</internals/contributing/index>`. It contains a ton of useful information and should be your first source for answering any questions you might have."
msgstr ""

#: ../../intro/contributing.txt:549
# 49a97a6364ef407480ec288e46197e36
msgid "Finding your first real ticket"
msgstr ""

#: ../../intro/contributing.txt:551
# 9cc0da43d467450982ba35521b5d79b6
msgid "Once you've looked through some of that information, you'll be ready to go out and find a ticket of your own to write a patch for. Pay special attention to tickets with the \"easy pickings\" criterion. These tickets are often much simpler in nature and are great for first time contributors.  Once you're familiar with contributing to Django, you can move on to writing patches for more difficult and complicated tickets."
msgstr ""

#: ../../intro/contributing.txt:558
# 3b5b5d61d030420b95c0211d19deb973
msgid "If you just want to get started already (and nobody would blame you!), try taking a look at the list of `easy tickets that need patches`__ and the `easy tickets that have patches which need improvement`__. If you're familiar with writing tests, you can also look at the list of `easy tickets that need tests`__. Just remember to follow the guidelines about claiming tickets that were mentioned in the link to Django's documentation on :doc:`claiming tickets and submitting patches </internals/contributing/writing-code/submitting-patches>`."
msgstr ""

#: ../../intro/contributing.txt:572
#: ../../intro/tutorial04.txt:279
# 7f5acb07f748486b966405c17f45b9d0
# 5ce8f8d7e8444b9595a5302954a1df5d
msgid "What's next?"
msgstr ""

#: ../../intro/contributing.txt:574
# 2b1dac7c5a2b4296abf29a3506bf2521
msgid "After a ticket has a patch, it needs to be reviewed by a second set of eyes. After uploading a patch or submitting a pull request, be sure to update the ticket metadata by setting the flags on the ticket to say \"has patch\", \"doesn't need tests\", etc, so others can find it for review. Contributing doesn't necessarily always mean writing a patch from scratch. Reviewing existing patches is also a very helpful contribution. See :doc:`/internals/contributing/triaging-tickets` for details."
msgstr ""

#: ../../intro/index.txt:2
# e58a852cf5904fd392d3def153171187
msgid "Getting started"
msgstr ""

#: ../../intro/index.txt:4
# 6ced512e4ecf44a2b76e1774a7554d72
msgid "New to Django? Or to Web development in general? Well, you came to the right place: read this material to quickly get up and running."
msgstr ""

#: ../../intro/index.txt:22
# d6750440c1444144b19d54e8534d9dc1
msgid "If you're new to Python_, you might want to start by getting an idea of what the language is like. Django is 100% Python, so if you've got minimal comfort with Python you'll probably get a lot more out of Django."
msgstr ""

#: ../../intro/index.txt:26
# 2663565930344033998b0ffeb451128b
msgid "If you're new to programming entirely, you might want to start with this `list of Python resources for non-programmers`_"
msgstr ""

#: ../../intro/index.txt:29
# 173feaa3eaa5477eb9127d379a736a52
msgid "If you already know a few other languages and want to get up to speed with Python quickly, we recommend `Dive Into Python`_ (also available in a `dead-tree version`_). If that's not quite your style, there are quite a few other `books about Python`_."
msgstr ""

#: ../../intro/install.txt:2
# ed7a7945c88d48fc8a4f383554a615b5
msgid "Quick install guide"
msgstr ""

#: ../../intro/install.txt:4
# 8ad97b95a6be4c3786f40c4f3b787a9f
msgid "Before you can use Django, you'll need to get it installed. We have a :doc:`complete installation guide </topics/install>` that covers all the possibilities; this guide will guide you to a simple, minimal installation that'll work while you walk through the introduction."
msgstr ""

#: ../../intro/install.txt:10
# 2d0f9a2e12a4461a9c19df36a98b160d
msgid "Install Python"
msgstr ""

#: ../../intro/install.txt:12
# 4c50d3673a654eb4b5dd539846505645
msgid "Being a Python Web framework, Django requires Python. It works with any Python version from 2.6.5 to 2.7. It also features experimental support for versions 3.2 and 3.3. All these versions of Python include a lightweight database called SQLite_ so you won't need to set up a database just yet."
msgstr ""

#: ../../intro/install.txt:19
# d3be621774124f7ab57848f1fe7d6c99
msgid "Get Python at http://www.python.org. If you're running Linux or Mac OS X, you probably already have it installed."
msgstr ""

#: ../../intro/install.txt:24
# 63995732f25c487ba9800b778ca28b43
msgid "If you use Jython_ (a Python implementation for the Java platform), you'll need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

#: ../../intro/install.txt:29
# f1758a5726e74a05b6298064db1ce507
msgid "You can verify that Python is installed by typing ``python`` from your shell; you should see something like::"
msgstr ""

#: ../../intro/install.txt:38
# 9902c9f3b7e441bd9f0d4a36b350f1cb
msgid "Set up a database"
msgstr ""

#: ../../intro/install.txt:40
# 8fcc8df668c841f5bfcc489381895595
msgid "This step is only necessary if you'd like to work with a \"large\" database engine like PostgreSQL, MySQL, or Oracle. To install such a database, consult the :ref:`database installation information <database-installation>`."
msgstr ""

#: ../../intro/install.txt:45
# 3029211bb2204256a2b660493d21aa67
msgid "Remove any old versions of Django"
msgstr ""

#: ../../intro/install.txt:47
# 8875b6cc2d2141a789102ca537c8f5a6
msgid "If you are upgrading your installation of Django from a previous version, you will need to :ref:`uninstall the old Django version before installing the new version <removing-old-versions-of-django>`."
msgstr ""

#: ../../intro/install.txt:52
# 5c52133faf7046d1b5d67d6de79d7b85
msgid "Install Django"
msgstr ""

#: ../../intro/install.txt:54
# e82dc4442f7b49188b0db749cb11d8e9
msgid "You've got three easy options to install Django:"
msgstr ""

#: ../../intro/install.txt:56
# c69651852e514d52b51f5fcbf6c45c96
msgid "Install a version of Django :doc:`provided by your operating system distribution </misc/distributions>`. This is the quickest option for those who have operating systems that distribute Django."
msgstr ""

#: ../../intro/install.txt:60
# 8010106eb9f6461d8d50e5af9ffb9d3a
msgid ":ref:`Install an official release <installing-official-release>`. This is the best approach for users who want a stable version number and aren't concerned about running a slightly older version of Django."
msgstr ""

#: ../../intro/install.txt:64
# 335fb3d9bf714521a9c30071cca5ee21
msgid ":ref:`Install the latest development version <installing-development-version>`. This is best for users who want the latest-and-greatest features and aren't afraid of running brand-new code."
msgstr ""

#: ../../intro/install.txt:71
# 999e2a4a024c4476be0a2843d9d888a5
msgid "If you do either of the first two steps, keep an eye out for parts of the documentation marked **new in development version**. That phrase flags features that are only available in development versions of Django, and they likely won't work with an official release."
msgstr ""

#: ../../intro/install.txt:78
# 6d4952c3887d49b9b61c4ad05d99fe5b
msgid "Verifying"
msgstr ""

#: ../../intro/install.txt:80
# 11a94ef1e0ee4a8da271e8b6d7bf1a04
msgid "To verify that Django can be seen by Python, type ``python`` from your shell. Then at the Python prompt, try to import Django::"
msgstr ""

#: ../../intro/install.txt:87
# 23573ff05e5f4cb49cf83237e653f802
msgid "You may have another version of Django installed."
msgstr ""

#: ../../intro/install.txt:90
# 1d9fee3cd9dc4d39bb0aecf1529a5646
msgid "That's it!"
msgstr ""

#: ../../intro/install.txt:92
# 6ccb6fd9ae6b4837b3c12abe3d280395
msgid "That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

#: ../../intro/overview.txt:3
# 1df76598c7784a7f8bbcc6daae94cb0c
msgid "Django at a glance"
msgstr ""

#: ../../intro/overview.txt:5
# 99b0039eb41c406598a2d2d00f22b28f
msgid "Because Django was developed in a fast-paced newsroom environment, it was designed to make common Web-development tasks fast and easy. Here's an informal overview of how to write a database-driven Web app with Django."
msgstr ""

#: ../../intro/overview.txt:9
# 534f31232ec44c7c8c0dafba2c24149d
msgid "The goal of this document is to give you enough technical specifics to understand how Django works, but this isn't intended to be a tutorial or reference -- but we've got both! When you're ready to start a project, you can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right into more detailed documentation </topics/index>`."
msgstr ""

#: ../../intro/overview.txt:16
# 9584a1f20e064d718cf6bb29dd21b398
msgid "Design your model"
msgstr ""

#: ../../intro/overview.txt:18
# f87d2427782e4df2bd642e4dc9417d60
msgid "Although you can use Django without a database, it comes with an object-relational mapper in which you describe your database layout in Python code."
msgstr ""

#: ../../intro/overview.txt:22
# 177941b3f3d943fab7d99a5e98e6bef0
msgid "The :doc:`data-model syntax </topics/db/models>` offers many rich ways of representing your models -- so far, it's been solving two years' worth of database-schema problems. Here's a quick example, which might be saved in the file ``mysite/news/models.py``::"
msgstr ""

#: ../../intro/overview.txt:43
# 62a273a6007e468987b6b255954656d4
msgid "Install it"
msgstr ""

#: ../../intro/overview.txt:45
# c223cf8cb521407f9746c11482ab4bc7
msgid "Next, run the Django command-line utility to create the database tables automatically:"
msgstr ""

#: ../../intro/overview.txt:52
# d4dfcae73d1847a6aa85931f91839088
msgid "The :djadmin:`syncdb` command looks at all your available models and creates tables in your database for whichever tables don't already exist."
msgstr ""

#: ../../intro/overview.txt:56
# 8c9843a1b9ba4be6845af7c8f3f131dd
msgid "Enjoy the free API"
msgstr ""

#: ../../intro/overview.txt:58
# 6da60e4bc6f646159ce922df2a1e89bf
msgid "With that, you've got a free, and rich, :doc:`Python API </topics/db/queries>` to access your data. The API is created on the fly, no code generation necessary::"
msgstr ""

#: ../../intro/overview.txt:131
# 1f17f80acbad410b9a1e1487672ac5a3
msgid "A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

#: ../../intro/overview.txt:133
# dd79d833e3ae428a9b80d0ce6a88e6ba
msgid "Once your models are defined, Django can automatically create a professional, production ready :doc:`administrative interface </ref/contrib/admin/index>` -- a Web site that lets authenticated users add, change and delete objects. It's as easy as registering your model in the admin site::"
msgstr ""

#: ../../intro/overview.txt:156
# 25410ee4a5bc41338323ee18bb11dff9
msgid "The philosophy here is that your site is edited by a staff, or a client, or maybe just you -- and you don't want to have to deal with creating backend interfaces just to manage content."
msgstr ""

#: ../../intro/overview.txt:160
# dcf5a132ab834131add27fa68f3542fa
msgid "One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public."
msgstr ""

#: ../../intro/overview.txt:165
# f83ff0a1b1434615b75c944afc79b0f6
msgid "Design your URLs"
msgstr ""

#: ../../intro/overview.txt:167
# 578920afb0a1469f9af0f81969d7dca0
msgid "A clean, elegant URL scheme is an important detail in a high-quality Web application. Django encourages beautiful URL design and doesn't put any cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

#: ../../intro/overview.txt:171
# e0f459f9a51b4d1b8e834711bccdd0b8
msgid "To design URLs for an app, you create a Python module called a :doc:`URLconf </topics/http/urls>`. A table of contents for your app, it contains a simple mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code."
msgstr ""

#: ../../intro/overview.txt:176
# 259bea1a90fb4db0a211c62de64fd177
msgid "Here's what a URLconf might look like for the ``Reporter``/``Article`` example above::"
msgstr ""

#: ../../intro/overview.txt:187
# 3a65ee6153264294bf8253272077a3fc
msgid "The code above maps URLs, as simple regular expressions, to the location of Python callback functions (\"views\"). The regular expressions use parenthesis to \"capture\" values from the URLs. When a user requests a page, Django runs through each pattern, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the regular expressions are compiled at load time."
msgstr ""

#: ../../intro/overview.txt:195
# 76274360f23c4d6f966fa52f22a60350
msgid "Once one of the regexes matches, Django imports and calls the given view, which is a simple Python function. Each view gets passed a request object -- which contains request metadata -- and the values captured in the regex."
msgstr ""

#: ../../intro/overview.txt:199
# bb4748f9e0e74eedb61143520ec559db
msgid "For example, if a user requested the URL \"/articles/2005/05/39323/\", Django would call the function ``news.views.article_detail(request, '2005', '05', '39323')``."
msgstr ""

#: ../../intro/overview.txt:204
# 9a3a39f744524486ade1c47e7412e19a
msgid "Write your views"
msgstr ""

#: ../../intro/overview.txt:206
# a6797c40adba4fb0bc0c36eec6791bdb
msgid "Each view is responsible for doing one of two things: Returning an :class:`~django.http.HttpResponse` object containing the content for the requested page, or raising an exception such as :class:`~django.http.Http404`. The rest is up to you."
msgstr ""

#: ../../intro/overview.txt:211
# e4da9272dad541659f2ae8f0ff74cc6c
msgid "Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here's an example view for ``year_archive`` from above::"
msgstr ""

#: ../../intro/overview.txt:219
# 198938accf834188b2da07d7fb657e39
msgid "This example uses Django's :doc:`template system </topics/templates>`, which has several powerful features but strives to stay simple enough for non-programmers to use."
msgstr ""

#: ../../intro/overview.txt:224
# 960b598af208478381d8a1dfb733a66a
msgid "Design your templates"
msgstr ""

#: ../../intro/overview.txt:226
# 860c86effc0e4c9bae2c6a903a6c890a
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

#: ../../intro/overview.txt:228
# 314156b8a6644510b46827c3dc6cd03d
msgid "Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates. If a template doesn't exist in the first directory, it checks the second, and so on."
msgstr ""

#: ../../intro/overview.txt:233
# 596fc6a252754583a9477d6ef2ab118e
msgid "Let's say the ``news/year_archive.html`` template was found. Here's what that might look like:"
msgstr ""

#: ../../intro/overview.txt:252
# df0b5ed556f54f13b05da59b0f0e21b5
msgid "Variables are surrounded by double-curly braces. ``{{ article.headline }}`` means \"Output the value of the article's headline attribute.\" But dots aren't used only for attribute lookup: They also can do dictionary-key lookup, index lookup and function calls."
msgstr ""

#: ../../intro/overview.txt:257
# dba83edba3fa4b71856deb79dbb0339f
msgid "Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe\" (the \"|\" character). This is called a template filter, and it's a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP's date function; yes, there is one good idea in PHP)."
msgstr ""

#: ../../intro/overview.txt:263
# d0227d3ef1f74db4b6d0647bf7482ae4
msgid "You can chain together as many filters as you'd like. You can write custom filters. You can write custom template tags, which run custom Python code behind the scenes."
msgstr ""

#: ../../intro/overview.txt:267
# 6bdc243457c2428fba60669ed7bff43c
msgid "Finally, Django uses the concept of \"template inheritance\": That's what the ``{% extends \"base.html\" %}`` does. It means \"First load the template called 'base', which has defined a bunch of blocks, and fill the blocks with the following blocks.\" In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what's unique to that template."
msgstr ""

#: ../../intro/overview.txt:273
# ad597b19398048179fa365669f691609
msgid "Here's what the \"base.html\" template might look like:"
msgstr ""

#: ../../intro/overview.txt:287
# 1023aa7165ca441ba776a4da2ecd853a
msgid "Simplistically, it defines the look-and-feel of the site (with the site's logo), and provides \"holes\" for child templates to fill. This makes a site redesign as easy as changing a single file -- the base template."
msgstr ""

#: ../../intro/overview.txt:291
# 7b3a857c701a4e168f22bd2dbe9b6854
msgid "It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django's creators have used this technique to create strikingly different cell-phone editions of sites -- simply by creating a new base template."
msgstr ""

#: ../../intro/overview.txt:296
# 09e8cd03c3474389932472f193482d48
msgid "Note that you don't have to use Django's template system if you prefer another system. While Django's template system is particularly well-integrated with Django's model layer, nothing forces you to use it. For that matter, you don't have to use Django's database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django -- models, views, templates -- is decoupled from the next."
msgstr ""

#: ../../intro/overview.txt:305
# b74ad285e05f467d8c80341b97f43762
msgid "This is just the surface"
msgstr ""

#: ../../intro/overview.txt:307
# 04eb455c543d4fb78439db399ad4e8b5
msgid "This has been only a quick overview of Django's functionality. Some more useful features:"
msgstr ""

#: ../../intro/overview.txt:310
# 29a8d427063e4adf88bcc93b5b3bb5b2
msgid "A :doc:`caching framework </topics/cache>` that integrates with memcached or other backends."
msgstr ""

#: ../../intro/overview.txt:313
# 5a5c69f093e142b196f2e8c8448a6aaa
msgid "A :doc:`syndication framework </ref/contrib/syndication>` that makes creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

#: ../../intro/overview.txt:316
# b4cf5bcf56c044cfa9fc9af2da42daed
msgid "More sexy automatically-generated admin features -- this overview barely scratched the surface."
msgstr ""

#: ../../intro/overview.txt:319
# 3e49165050e34d4582c5162b0553230a
msgid "The next obvious steps are for you to `download Django`_, read :doc:`the tutorial </intro/tutorial01>` and join `the community`_. Thanks for your interest!"
msgstr ""

#: ../../intro/reusable-apps.txt:3
# e9da48d6a25a429381ce2ddac7e38999
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

#: ../../intro/reusable-apps.txt:5
# 8262a5ba4a6d4725914c3e5633dd8925
msgid "This advanced tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. We'll be turning our Web-poll into a standalone Python package you can reuse in new projects and share with other people."
msgstr ""

#: ../../intro/reusable-apps.txt:9
# cb7dde4d3feb4e47bfa3ef81ee013ca4
msgid "If you haven't recently completed Tutorials 1–4, we encourage you to review these so that your example project matches the one described below."
msgstr ""

#: ../../intro/reusable-apps.txt:13
# 4df4eead05dc4c7c9d428c3fe3d5331c
msgid "Reusability matters"
msgstr ""

#: ../../intro/reusable-apps.txt:15
# 15e6b321637e43a4b36a734b45332528
msgid "It's a lot of work to design, build, test and maintain a web application. Many Python and Django projects share common problems. Wouldn't it be great if we could save some of this repeated work?"
msgstr ""

#: ../../intro/reusable-apps.txt:19
# 352fa797d75144028ec8c803983ebb00
msgid "Reusability is the way of life in Python. `The Python Package Index (PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_ has a vast range of packages you can use in your own Python programs. Check out `Django Packages <http://www.djangopackages.com>`_ for existing reusable apps you could incorporate in your project. Django itself is also just a Python package. This means that you can take existing Python packages or Django apps and compose them into your own web project. You only need to write the parts that make your project unique."
msgstr ""

#: ../../intro/reusable-apps.txt:28
# 0e071a151bd244e69dfcf28f41dc07d6
msgid "Let's say you were starting a new project that needed a polls app like the one we've been working on. How do you make this app reusable? Luckily, you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we saw how we could decouple polls from the project-level URLconf using an ``include``. In this tutorial, we'll take further steps to make the app easy to use in new projects and ready to publish for others to install and use."
msgstr ""

#: ../../intro/reusable-apps.txt:37
# c3a6d77d895f4130a1ec2af6d49a1756
msgid "A Python `package <http://docs.python.org/tutorial/modules.html#packages>`_ provides a way of grouping related Python code for easy reuse. A package contains one or more files of Python code (also known as \"modules\")."
msgstr ""

#: ../../intro/reusable-apps.txt:41
# c925aa21b5a74c4c838134502b7e76f6
msgid "A package can be imported with ``import foo.bar`` or ``from foo import bar``. For a directory (like ``polls``) to form a package, it must contain a special file ``__init__.py``, even if this file is empty."
msgstr ""

#: ../../intro/reusable-apps.txt:45
# 6e3acacfc13e409b9848f2ebf7b9b12a
msgid "A Django *app* is just a Python package that is specifically intended for use in a Django project. An app may also use common Django conventions, such as having a ``models.py`` file."
msgstr ""

#: ../../intro/reusable-apps.txt:49
# 72cbf75b23604c1fbb8a498ba6aebe41
msgid "Later on we use the term *packaging* to describe the process of making a Python package easy for others to install. It can be a little confusing, we know."
msgstr ""

#: ../../intro/reusable-apps.txt:54
# ef4a3a38fde0427bb3216d197edab062
msgid "Completing your reusable app"
msgstr ""

#: ../../intro/reusable-apps.txt:56
# f061c27c24634073aba491be1cc2593c
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

#: ../../intro/reusable-apps.txt:73
# b97a6bc953e54569955d9ac532319235
msgid "You also have a directory somewhere called ``mytemplates`` which you created in :doc:`Tutorial 2 </intro/tutorial02>`. You specified its location in the TEMPLATE_DIRS setting. This directory should look like this::"
msgstr ""

#: ../../intro/reusable-apps.txt:85
# a1c3633b4c784517902b02ce6ca12890
msgid "The polls app is already a Python package, thanks to the ``polls/__init__.py`` file. That's a great start, but we can't just pick up this package and drop it into a new project. The polls templates are currently stored in the project-wide ``mytemplates`` directory. To make the app self-contained, it should also contain the necessary templates."
msgstr ""

#: ../../intro/reusable-apps.txt:91
# adf869abed9b4f3a80c67922cdfb0ece
msgid "Inside the ``polls`` app, create a new ``templates`` directory. Now move the ``polls`` template directory from ``mytemplates`` into the new ``templates``. Your project should now look like this::"
msgstr ""

#: ../../intro/reusable-apps.txt:115
# 92ea0300ad2f498d9dbf5326d7ff4885
msgid "Your project-wide templates directory should now look like this::"
msgstr ""

#: ../../intro/reusable-apps.txt:121
# 2c84a9ef698e46efa717f23a16800993
msgid "Looking good! Now would be a good time to confirm that your polls application still works correctly.  How does Django know how to find the new location of the polls templates even though we didn't modify :setting:`TEMPLATE_DIRS`? Django has a :setting:`TEMPLATE_LOADERS` setting which contains a list of callables that know how to import templates from various sources.  One of the defaults is :class:`django.template.loaders.app_directories.Loader` which looks for a \"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../intro/reusable-apps.txt:129
# e31d7beefc4c40b1a9cd0ab7d8f210d4
msgid "The ``polls`` directory could now be copied into a new Django project and immediately reused. It's not quite ready to be published though. For that, we need to package the app to make it easy for others to install."
msgstr ""

#: ../../intro/reusable-apps.txt:135
# dcc801e99c8649be8a5ea9409f7946b5
msgid "Why create a ``polls`` directory under ``templates`` when we're already inside the polls app? This directory is needed to avoid conflicts in Django's ``app_directories`` template loader.  For example, if two apps had a template called ``base.html``, without the extra directory it wouldn't be possible to distinguish between the two. It's a good convention to use the name of your app for this directory."
msgstr ""

#: ../../intro/reusable-apps.txt:145
# f39a22145d0f4a729f8aa24a47652284
msgid "Installing some prerequisites"
msgstr ""

#: ../../intro/reusable-apps.txt:147
# 0b4d601329eb47ad824bcb268ba76c95
msgid "The current state of Python packaging is a bit muddled with various tools. For this tutorial, we're going to use distribute_ to build our package. It's a community-maintained fork of the older ``setuptools`` project. We'll also be using `pip`_ to uninstall it after we're finished. You should install these two packages now. If you need help, you can refer to :ref:`how to install Django with pip<installing-official-release>`. You can install ``distribute`` the same way."
msgstr ""

#: ../../intro/reusable-apps.txt:159
# 528b0c658c8e4838a450b0463890d40e
msgid "Packaging your app"
msgstr ""

#: ../../intro/reusable-apps.txt:161
# 812a8e7df3624d3da0e66ae72b96cae9
msgid "Python *packaging* refers to preparing your app in a specific format that can be easily installed and used. Django itself is packaged very much like this. For a small app like polls, this process isn't too difficult."
msgstr ""

#: ../../intro/reusable-apps.txt:165
# 4efff5ec6d734d0db3eb352057450db4
msgid "First, create a parent directory for ``polls``, outside of your Django project. Call this directory ``django-polls``."
msgstr ""

#: ../../intro/reusable-apps.txt:170
# 88c7282da7d3492eaef1da44397563c9
msgid "When choosing a name for your package, check resources like PyPI to avoid naming conflicts with existing packages. It's often useful to prepend ``django-`` to your module name when creating a package to distribute. This helps others looking for Django apps identify your app as Django specific."
msgstr ""

#: ../../intro/reusable-apps.txt:176
# 7486cc5b4e9b4470a58e496265901128
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

#: ../../intro/reusable-apps.txt:178
# b796064657eb472db2b8a3d53c3b45c4
msgid "Create a file ``django-polls/README.txt`` with the following contents::"
msgstr ""

#: ../../intro/reusable-apps.txt:210
# dc087e748616497098846d100167af21
msgid "4. Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the scope of this tutorial, but suffice it to say that code released publicly without a license is *useless*. Django and many Django-compatible apps are distributed under the BSD license; however, you're free to pick your own license. Just be aware that your licensing choice will affect who is able to use your code."
msgstr ""

#: ../../intro/reusable-apps.txt:217
# ae41ba0dd11245aabf27b58ff5eac37b
msgid "5. Next we'll create a ``setup.py`` file which provides details about how to build and install the app.  A full explanation of this file is beyond the scope of this tutorial, but the `distribute docs <http://packages.python.org/distribute/setuptools.html>`_ have a good explanation. Create a file ``django-polls/setup.py`` with the following contents::"
msgstr ""

#: ../../intro/reusable-apps.txt:258
# 461915be25b644789425dcf2125f3b5e
msgid "Distribute is a drop-in replacement for ``setuptools``. Even though we appear to import from ``setuptools``, since we have ``distribute`` installed, it will override the import."
msgstr ""

#: ../../intro/reusable-apps.txt:262
# 219b9a55a7994015a984d3415f8279e6
msgid "Only Python modules and packages are included in the package by default. To include additional files, we'll need to create a ``MANIFEST.in`` file. The distribute docs referred to in the previous step discuss this file in more details. To include the templates and our LICENSE file, create a file ``django-polls/MANIFEST.in`` with the following contents::"
msgstr ""

#: ../../intro/reusable-apps.txt:271
# daca2fbd1fe348e987a6173def7405d3
msgid "It's optional, but recommended, to include detailed documentation with your app. Create an empty directory ``django-polls/docs`` for future documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

#: ../../intro/reusable-apps.txt:277
# 3daaa18a798b4134b865b95a16b2dc51
msgid "Note that the ``docs`` directory won't be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like `readthedocs.org <http://readthedocs.org>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:281
# 3fcbd0df954d45b58ca57a13cff9e9c1
msgid "Try building your package with ``python setup.py sdist`` (run from inside ``django-polls``). This creates a directory called ``dist`` and builds your new package, ``django-polls-0.1.tar.gz``."
msgstr ""

#: ../../intro/reusable-apps.txt:285
# 6cd51c101f744322bf4c058ae34a1f18
msgid "For more information on packaging, see `The Hitchhiker's Guide to Packaging <http://guide.python-distribute.org/quickstart.html>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:289
# 05435a4ea5ec4eadb669fef3dd2afdd1
msgid "Using your own package"
msgstr ""

#: ../../intro/reusable-apps.txt:291
# ec22363e30db4453a2a4d2e73041c69e
msgid "Since we moved the ``polls`` directory out of the project, it's no longer working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

#: ../../intro/reusable-apps.txt:296
# a61d401893d042e3a0611b9edde0666d
msgid "The following steps install ``django-polls`` as a user library. Per-user installs have a lot of advantages over installing the package system-wide, such as being usable on systems where you don't have administrator access as well as preventing the package from affecting system services and other users of the machine. Python 2.6 added support for user libraries, so if you are using an older version this won't work, but Django 1.5 requires Python 2.6 or newer anyway."
msgstr ""

#: ../../intro/reusable-apps.txt:304
# f6d2385ef33f40c4ab7325b3498d612a
msgid "Note that per-user installations can still affect the behavior of system tools that run as that user, so ``virtualenv`` is a more robust solution (see below)."
msgstr ""

#: ../../intro/reusable-apps.txt:308
# 54a4c115b611490189d1fe6368b6811d
msgid "Inside ``django-polls/dist``, untar the new package ``django-polls-0.1.tar.gz`` (e.g. ``tar xzvf django-polls-0.1.tar.gz``). If you're using Windows, you can download the command-line tool bsdtar_ to do this, or you can use a GUI-based tool such as 7-zip_."
msgstr ""

#: ../../intro/reusable-apps.txt:313
# f2b224143802490d9710eed57a760be7
msgid "Change into the directory created in step 1 (e.g. ``cd django-polls-0.1``)."
msgstr ""

#: ../../intro/reusable-apps.txt:315
# c80c150f08de433ba78b7bd220a7fdf5
msgid "If you're using GNU/Linux, Mac OS X or some other flavor of Unix, enter the command ``python setup.py install --user`` at the shell prompt.  If you're using Windows, start up a command shell and run the command ``setup.py install --user``."
msgstr ""

#: ../../intro/reusable-apps.txt:320
# 5faaa5afefce46c9b1d3fb3922fb961d
msgid "With luck, your Django project should now work correctly again. Run the server again to confirm this."
msgstr ""

#: ../../intro/reusable-apps.txt:323
# 6b027a625c0a49f0857e6f89233178fb
msgid "To uninstall the package, use pip (you already :ref:`installed it <installing-reusable-apps-prerequisites>`, right?)::"
msgstr ""

#: ../../intro/reusable-apps.txt:333
# d5feb21a14f84a519ad95acdfae06132
msgid "Publishing your app"
msgstr ""

#: ../../intro/reusable-apps.txt:335
# 2653bffef72a4e49a2ba39f0d7cb1bc9
msgid "Now that we've packaged and tested ``django-polls``, it's ready to share with the world! If this wasn't just an example, you could now:"
msgstr ""

#: ../../intro/reusable-apps.txt:338
# 3577e5a7fb724b5e9b4e5bc0ec930f62
msgid "Email the package to a friend."
msgstr ""

#: ../../intro/reusable-apps.txt:340
# fe1c35e16acf4d9e9af114602ea6c9f8
msgid "Upload the package on your Web site."
msgstr ""

#: ../../intro/reusable-apps.txt:342
# 4152f7eff7f34b51885f36774608d29f
msgid "Post the package on a public repository, such as `The Python Package Index (PyPI) <http://guide.python-distribute.org/contributing.html#pypi-info>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:345
# 0005613d80134924b62febe71db42831
msgid "For more information on PyPI, see the `Quickstart <http://guide.python-distribute.org/quickstart.html#register-your-package-with-the-python-package-index-pypi>`_ section of The Hitchhiker's Guide to Packaging. One detail this guide mentions is choosing the license under which your code is distributed."
msgstr ""

#: ../../intro/reusable-apps.txt:351
# 45e1486c1f7a4431a7aed813a2e6c239
msgid "Installing Python packages with virtualenv"
msgstr ""

#: ../../intro/reusable-apps.txt:353
# 9525f6f19ca4464ebe7c14bbba9e9827
msgid "Earlier, we installed the polls app as a user library. This has some disadvantages:"
msgstr ""

#: ../../intro/reusable-apps.txt:356
# f2e5a696567545aaa8b31df6257d84ac
msgid "Modifying the user libraries can affect other Python software on your system."
msgstr ""

#: ../../intro/reusable-apps.txt:358
# c0dcb5f225e541f385dd915e8e6b9c83
msgid "You won't be able to run multiple versions of this package (or others with the same name)."
msgstr ""

#: ../../intro/reusable-apps.txt:361
# 5cbd2771f3cc4a9dab8b3745c2ae378c
msgid "Typically, these situations only arise once you're maintaining several Django projects. When they do, the best solution is to use `virtualenv <http://www.virtualenv.org/>`_. This tool allows you to maintain multiple isolated Python environments, each with its own copy of the libraries and package namespace."
msgstr ""

#: ../../intro/tutorial01.txt:3
# fb40849a04dd4f4f8037830d46ee21bf
msgid "Writing your first Django app, part 1"
msgstr ""

#: ../../intro/tutorial01.txt:5
# 606fefb17b964ff6868ed3428b12f632
msgid "Let's learn by example."
msgstr ""

#: ../../intro/tutorial01.txt:7
# 1f211f72787a4ef9a837306647786424
msgid "Throughout this tutorial, we'll walk you through the creation of a basic poll application."
msgstr ""

#: ../../intro/tutorial01.txt:10
# eafa2a08503542adba537823b9862f23
msgid "It'll consist of two parts:"
msgstr ""

#: ../../intro/tutorial01.txt:12
# 3e07feaed47d4ad4b9efaccc82c19a84
msgid "A public site that lets people view polls and vote in them."
msgstr ""

#: ../../intro/tutorial01.txt:13
# e1a7f766ec764abbbe8571097ffc222f
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

#: ../../intro/tutorial01.txt:15
# 5978115de40f4b16866ea0979dd6b92d
msgid "We'll assume you have :doc:`Django installed </intro/install>` already. You can tell Django is installed and which version by running the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:22
# 59da950ae94749f4af16151d47174d02
msgid "You should see either the version of your Django installation or an error telling \"No module named django\". Check also that the version number matches the version of this tutorial. If they don't match, you can refer to the tutorial for your version of Django or update Django to the newest version."
msgstr ""

#: ../../intro/tutorial01.txt:27
# 95f28a4c62a74175bf93da77bbba2eb5
msgid "See :doc:`How to install Django </topics/install>` for advice on how to remove older versions of Django and install a newer one."
msgstr ""

#: ../../intro/tutorial01.txt:32
# ad7911385bb949818a11ba90d0e5b925
msgid "If you're having trouble going through this tutorial, please post a message to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with other Django users who might be able to help."
msgstr ""

#: ../../intro/tutorial01.txt:40
# f9c1829bffec4539b66e1443b1403de4
msgid "Creating a project"
msgstr ""

#: ../../intro/tutorial01.txt:42
# e81aefb3ff784c84b8d394d931caa3d8
msgid "If this is your first time using Django, you'll have to take care of some initial setup. Namely, you'll need to auto-generate some code that establishes a Django :term:`project` -- a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings."
msgstr ""

#: ../../intro/tutorial01.txt:48
# f7a7557e3fee4f56a84a527ab9b9f9ae
msgid "From the command line, ``cd`` into a directory where you'd like to store your code, then run the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:55
# 4fe14fb8105c416984de5035a98389cd
msgid "This will create a ``mysite`` directory in your current directory. If it didn't work, see :doc:`Troubleshooting </faq/troubleshooting>`."
msgstr ""

#: ../../intro/tutorial01.txt:60
# f2f0c1db4a5d42afbe95c4b7e1ea1a96
msgid "If you installed Django using a Linux distribution's package manager (e.g. apt-get or yum) ``django-admin.py`` may have been renamed to ``django-admin``. You may continue through this documentation by omitting ``.py`` from each command."
msgstr ""

#: ../../intro/tutorial01.txt:67
# 9b5e7e6da6b24247a029d3f1255d1ac7
msgid "If you're using Mac OS X, you may see the message \"permission denied\" when you try to run ``django-admin.py startproject``. This is because, on Unix-based systems like OS X, a file must be marked as \"executable\" before it can be run as a program. To do this, open Terminal.app and navigate (using the ``cd`` command) to the directory where :doc:`django-admin.py </ref/django-admin>` is installed, then run the command ``sudo chmod +x django-admin.py``."
msgstr ""

#: ../../intro/tutorial01.txt:77
# d9a4554fe45543bc9698f60d29bec559
msgid "You'll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid using names like ``django`` (which will conflict with Django itself) or ``test`` (which conflicts with a built-in Python package)."
msgstr ""

#: ../../intro/tutorial01.txt:84
# 9543bda54e16465bb2b6080f9884ea66
msgid "If your background is in PHP, you're probably used to putting code under the Web server's document root (in a place such as ``/var/www``). With Django, you don't do that. It's not a good idea to put any of this Python code within your Web server's document root, because it risks the possibility that people may be able to view your code over the Web. That's not good for security."
msgstr ""

#: ../../intro/tutorial01.txt:91
# 0e7efbf5e15d42dea3be9fa84d8daad6
msgid "Put your code in some directory **outside** of the document root, such as :file:`/home/mycode`."
msgstr ""

#: ../../intro/tutorial01.txt:94
# 544a09e4f900461fb9a795d07a2b4c09
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

#: ../../intro/tutorial01.txt:106
# bd265c10b4d646759e432f9b0fe3c7d6
msgid "The default project layout recently changed. If you're seeing a \"flat\" layout (with no inner :file:`mysite/` directory), you're probably using a version of Django that doesn't match this tutorial version.  You'll want to either switch to the older tutorial or the newer Django version."
msgstr ""

#: ../../intro/tutorial01.txt:111
# 0877c74e240b49e39fc3ca84fac6c4ec
msgid "These files are:"
msgstr ""

#: ../../intro/tutorial01.txt:113
# 40c30aa4f0474ef890af593af90d9ace
msgid "The outer :file:`mysite/` directory is just a container for your project. Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""

#: ../../intro/tutorial01.txt:117
# c4c82312b16f42d19236c66df62ebf86
msgid ":file:`manage.py`: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about :file:`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

#: ../../intro/tutorial01.txt:121
# b30db584fa2c4d628b4cc55d8ba2f39f
msgid "The inner :file:`mysite/` directory is the actual Python package for your project. Its name is the Python package name you'll need to use to import anything inside it (e.g. ``import mysite.settings``)."
msgstr ""

#: ../../intro/tutorial01.txt:125
# bd4dfcbc734742229b209cf415164c13
msgid ":file:`mysite/__init__.py`: An empty file that tells Python that this directory should be considered a Python package. (Read `more about packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

#: ../../intro/tutorial01.txt:129
# a9db41c4a33648ef88be28b454da0406
msgid ":file:`mysite/settings.py`: Settings/configuration for this Django project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

#: ../../intro/tutorial01.txt:133
# 20cee7b0f3244b9383ab775848d6a8e9
msgid ":file:`mysite/urls.py`: The URL declarations for this Django project; a \"table of contents\" of your Django-powered site. You can read more about URLs in :doc:`/topics/http/urls`."
msgstr ""

#: ../../intro/tutorial01.txt:137
# 70646bcd3155416f8f8f8c3b6163ee6d
msgid ":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""

#: ../../intro/tutorial01.txt:143
# d879b46e578d4a04a428cec442ede279
msgid "The development server"
msgstr ""

#: ../../intro/tutorial01.txt:145
# a64de6c3273b4bcf8dc68cb4a7823c72
msgid "Let's verify this worked. Change into the outer :file:`mysite` directory, if you haven't already, and run the command ``python manage.py runserver``. You'll see the following output on the command line::"
msgstr ""

#: ../../intro/tutorial01.txt:156
# cb29758b389d4c838c0ad40e15ca4b2a
msgid "You've started the Django development server, a lightweight Web server written purely in Python. We've included this with Django so you can develop things rapidly, without having to deal with configuring a production server -- such as Apache -- until you're ready for production."
msgstr ""

#: ../../intro/tutorial01.txt:161
# d743367e4c294a378596e3ab37d92350
msgid "Now's a good time to note: DON'T use this server in anything resembling a production environment. It's intended only for use while developing. (We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

#: ../../intro/tutorial01.txt:165
# 886a66f040a745de91b55eff38ea9db0
msgid "Now that the server's running, visit http://127.0.0.1:8000/ with your Web browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue pastel. It worked!"
msgstr ""

#: ../../intro/tutorial01.txt:171
# 2c907cafc3f64664841a9bb90cb5439e
msgid "By default, the :djadmin:`runserver` command starts the development server on the internal IP at port 8000."
msgstr ""

#: ../../intro/tutorial01.txt:174
# ba27bed6cab64a54af263fc8334287c7
msgid "If you want to change the server's port, pass it as a command-line argument. For instance, this command starts the server on port 8080:"
msgstr ""

#: ../../intro/tutorial01.txt:182
# 2e46d51ab55d44bda46b58f690f0e06e
msgid "If you want to change the server's IP, pass it along with the port. So to listen on all public IPs (useful if you want to show off your work on other computers), use:"
msgstr ""

#: ../../intro/tutorial01.txt:190
# 677d21a283794b13a5b631950033f94b
msgid "Full docs for the development server can be found in the :djadmin:`runserver` reference."
msgstr ""

#: ../../intro/tutorial01.txt:194
# def335b4cf534207bf73faab01d986cb
msgid "Database setup"
msgstr ""

#: ../../intro/tutorial01.txt:196
# a77b7754f35845548a12f8c5bb85755e
msgid "Now, edit :file:`mysite/settings.py`. It's a normal Python module with module-level variables representing Django settings. Change the following keys in the :setting:`DATABASES` ``'default'`` item to match your database connection settings."
msgstr ""

#: ../../intro/tutorial01.txt:201
# 0185aa2e4f1f4d969d21c70392b63fc5
msgid ":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends.postgresql_psycopg2'``, ``'django.db.backends.mysql'``, ``'django.db.backends.sqlite3'`` or ``'django.db.backends.oracle'``. Other backends are :setting:`also available <DATABASE-ENGINE>`."
msgstr ""

#: ../../intro/tutorial01.txt:207
# ea52dc347a014e4398c2360812628411
msgid ":setting:`NAME` -- The name of your database. If you're using SQLite, the database will be a file on your computer; in that case, :setting:`NAME` should be the full absolute path, including filename, of that file. If the file doesn't exist, it will automatically be created when you synchronize the database for the first time (see below)."
msgstr ""

#: ../../intro/tutorial01.txt:214
# 3b96d964774143c78ef9a7bf85aa8e0a
msgid "When specifying the path, always use forward slashes, even on Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

#: ../../intro/tutorial01.txt:217
# ce0698f47bf14b02b1aed646e7d4c93b
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""

#: ../../intro/tutorial01.txt:219
# f964b571358f48fbbd24d085d76e61da
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""

#: ../../intro/tutorial01.txt:222
# e626616dc5fa4735bc727cab07600293
msgid ":setting:`HOST` -- The host your database is on. Leave this as an empty string if your database server is on the same physical machine (not used for SQLite)."
msgstr ""

#: ../../intro/tutorial01.txt:226
# 1782db8b208b493f807888401a798d63
msgid "If you're new to databases, we recommend simply using SQLite by setting :setting:`ENGINE` to ``'django.db.backends.sqlite3'`` and :setting:`NAME` to the place where you'd like to store the database. SQLite is included in Python, so you won't need to install anything else to support your database."
msgstr ""

#: ../../intro/tutorial01.txt:233
# 0d66da3f59e24540b92e1ea0bbe3f98a
msgid "If you're using PostgreSQL or MySQL, make sure you've created a database by this point. Do that with \"``CREATE DATABASE database_name;``\" within your database's interactive prompt."
msgstr ""

#: ../../intro/tutorial01.txt:237
# 2298780045524ac9b4a639f6916201cd
msgid "If you're using SQLite, you don't need to create anything beforehand - the database file will be created automatically when it is needed."
msgstr ""

#: ../../intro/tutorial01.txt:240
# f44c9a17810a41a0bf1afdf22da049c7
msgid "While you're editing :file:`settings.py`, set :setting:`TIME_ZONE` to your time zone. The default value is the Central time zone in the U.S. (Chicago)."
msgstr ""

#: ../../intro/tutorial01.txt:243
# e7986c26dff9433cabad80cd177fcd87
msgid "Also, note the :setting:`INSTALLED_APPS` setting toward the bottom of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects."
msgstr ""

#: ../../intro/tutorial01.txt:248
# a582ca22271849b191a0f5150fbc6238
msgid "By default, :setting:`INSTALLED_APPS` contains the following apps, all of which come with Django:"
msgstr ""

#: ../../intro/tutorial01.txt:251
# b1fa050cf35c4061bd0986e3c5e1ad0d
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

#: ../../intro/tutorial01.txt:253
# 7486991490a042118d5f7331d3a4d831
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

#: ../../intro/tutorial01.txt:255
# b119a4d63a684dc0be13d9ba74f8fac5
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

#: ../../intro/tutorial01.txt:257
# 14b90f0a0e2f462a80a308e8c93bc515
msgid ":mod:`django.contrib.sites` -- A framework for managing multiple sites with one Django installation."
msgstr ""

#: ../../intro/tutorial01.txt:260
# 423a3f6e47744837a8acc07edad9de16
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

#: ../../intro/tutorial01.txt:262
# 5eb04d20f56b4f8999ec556e205bd136
msgid ":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

#: ../../intro/tutorial01.txt:265
# b907bb536ac1414988e36666f45a1a9f
msgid "These applications are included by default as a convenience for the common case."
msgstr ""

#: ../../intro/tutorial01.txt:267
# 4729e1e303dc415eb0eef6d8b15419e5
msgid "Each of these applications makes use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:275
# 21b80e2d06444954b4f6b71a4f58e33f
msgid "The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting and creates any necessary database tables according to the database settings in your :file:`settings.py` file. You'll see a message for each database table it creates, and you'll get a prompt asking you if you'd like to create a superuser account for the authentication system. Go ahead and do that."
msgstr ""

#: ../../intro/tutorial01.txt:281
# e9ceb821bfe64db3af7be6b00e3dac08
msgid "If you're interested, run the command-line client for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to display the tables Django created."
msgstr ""

#: ../../intro/tutorial01.txt:287
# f40d4abab5404d4baa4c435798a49019
msgid "Like we said above, the default applications are included for the common case, but not everybody needs them. If you don't need any or all of them, feel free to comment-out or delete the appropriate line(s) from :setting:`INSTALLED_APPS` before running :djadmin:`syncdb`. The :djadmin:`syncdb` command will only create tables for apps in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../intro/tutorial01.txt:297
# 6ae847c6e51a483a8281a60599047489
msgid "Creating models"
msgstr ""

#: ../../intro/tutorial01.txt:299
# 5e86e009640448c5a2533271c913d8cf
msgid "Now that your environment -- a \"project\" -- is set up, you're set to start doing work."
msgstr ""

#: ../../intro/tutorial01.txt:302
# 167bb0377f5442b8ba20b9d0ce126370
msgid "Each application you write in Django consists of a Python package, somewhere on your `Python path`_, that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories."
msgstr ""

#: ../../intro/tutorial01.txt:309
# 5c79ce47d8654a20bdccf339e632e6b8
msgid "What's the difference between a project and an app? An app is a Web application that does something -- e.g., a Weblog system, a database of public records or a simple poll app. A project is a collection of configuration and apps for a particular Web site. A project can contain multiple apps. An app can be in multiple projects."
msgstr ""

#: ../../intro/tutorial01.txt:315
# f58652ed24aa46aeb4f8eb5f1e7f8638
msgid "Your apps can live anywhere on your `Python path`_. In this tutorial, we'll create our poll app right next to your :file:`manage.py` file so that it can be imported as its own top-level module, rather than a submodule of ``mysite``."
msgstr ""

#: ../../intro/tutorial01.txt:319
# e992d1fcc5d64eb998f00a2f3a5445d0
msgid "To create your app, make sure you're in the same directory as :file:`manage.py` and type this command:"
msgstr ""

#: ../../intro/tutorial01.txt:326
# 162aa09be2114e14bbe432f8304980ce
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

#: ../../intro/tutorial01.txt:334
# a90d1f8b133548758a6e4629153a40a9
msgid "This directory structure will house the poll application."
msgstr ""

#: ../../intro/tutorial01.txt:336
# b79d4c62f0994feca179cbff74e9f0a7
msgid "The first step in writing a database Web app in Django is to define your models -- essentially, your database layout, with additional metadata."
msgstr ""

#: ../../intro/tutorial01.txt:341
# 3239ea2409254278abe9c540bbfc1ca6
msgid "A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you're storing. Django follows the :ref:`DRY Principle <dry>`. The goal is to define your data model in one place and automatically derive things from it."
msgstr ""

#: ../../intro/tutorial01.txt:346
# 369dd432691c48419d6c5a8a3a9ef564
msgid "In our simple poll app, we'll create two models: ``Poll`` and ``Choice``. A ``Poll`` has a question and a publication date. A ``Choice`` has two fields: the text of the choice and a vote tally. Each ``Choice`` is associated with a ``Poll``."
msgstr ""

#: ../../intro/tutorial01.txt:351
# 25f1766239554b9296064ede168533c3
msgid "These concepts are represented by simple Python classes. Edit the :file:`polls/models.py` file so it looks like this::"
msgstr ""

#: ../../intro/tutorial01.txt:365
# 80e04c8c27404e48af779b323bd623cd
msgid "The code is straightforward. Each model is represented by a class that subclasses :class:`django.db.models.Model`. Each model has a number of class variables, each of which represents a database field in the model."
msgstr ""

#: ../../intro/tutorial01.txt:369
# a51fed20ad3d4e3994ed63bac36e6d71
msgid "Each field is represented by an instance of a :class:`~django.db.models.Field` class -- e.g., :class:`~django.db.models.CharField` for character fields and :class:`~django.db.models.DateTimeField` for datetimes. This tells Django what type of data each field holds."
msgstr ""

#: ../../intro/tutorial01.txt:374
# 1f80a34d443e4cc1a1f306e45b244a43
msgid "The name of each :class:`~django.db.models.Field` instance (e.g. ``question`` or ``pub_date`` ) is the field's name, in machine-friendly format. You'll use this value in your Python code, and your database will use it as the column name."
msgstr ""

#: ../../intro/tutorial01.txt:378
# 3a5d1c9dc91d48728395777521640b8b
msgid "You can use an optional first positional argument to a :class:`~django.db.models.Field` to designate a human-readable name. That's used in a couple of introspective parts of Django, and it doubles as documentation. If this field isn't provided, Django will use the machine-readable name. In this example, we've only defined a human-readable name for ``Poll.pub_date``. For all other fields in this model, the field's machine-readable name will suffice as its human-readable name."
msgstr ""

#: ../../intro/tutorial01.txt:386
# 45b447c28ccd43d19dc31881896f07bd
msgid "Some :class:`~django.db.models.Field` classes have required elements. :class:`~django.db.models.CharField`, for example, requires that you give it a :attr:`~django.db.models.Field.max_length`. That's used not only in the database schema, but in validation, as we'll soon see."
msgstr ""

#: ../../intro/tutorial01.txt:391
# d50dc6a7db634d6980f7ed21c0351c48
msgid "Finally, note a relationship is defined, using :class:`~django.db.models.ForeignKey`. That tells Django each ``Choice`` is related to a single ``Poll``. Django supports all the common database relationships: many-to-ones, many-to-manys and one-to-ones."
msgstr ""

#: ../../intro/tutorial01.txt:399
# 7f2241bc072545b38f260097921f2a28
msgid "Activating models"
msgstr ""

#: ../../intro/tutorial01.txt:401
# 3f13a45daa3645c3a53f8342d88e44c2
msgid "That small bit of model code gives Django a lot of information. With it, Django is able to:"
msgstr ""

#: ../../intro/tutorial01.txt:404
# 6a741d2a0c544c3fb4fa1e487fe6c476
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

#: ../../intro/tutorial01.txt:405
# cea4163d4dbe4d2197ad62d6354109ee
msgid "Create a Python database-access API for accessing ``Poll`` and ``Choice`` objects."
msgstr ""

#: ../../intro/tutorial01.txt:407
# bf33f9f766bb4390a03a98cae2c481b0
msgid "But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

#: ../../intro/tutorial01.txt:411
# fcf5b61eea8e4e3a94574e3692ecca45
msgid "Django apps are \"pluggable\": You can use an app in multiple projects, and you can distribute apps, because they don't have to be tied to a given Django installation."
msgstr ""

#: ../../intro/tutorial01.txt:415
# c194b30945af4876a00ef42910cdb8cb
msgid "Edit the :file:`settings.py` file again, and change the :setting:`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look like this::"
msgstr ""

#: ../../intro/tutorial01.txt:433
# c8650f50894f4ddc931c90092ccf4d6e
msgid "Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

#: ../../intro/tutorial01.txt:440
# 082e241bf46a4440a2d80ab6fa16d55e
msgid "You should see something similar to the following (the ``CREATE TABLE`` SQL statements for the polls app):"
msgstr ""

#: ../../intro/tutorial01.txt:459
# 3a08465766a84f3b9bb402b05ce90520
msgid "Note the following:"
msgstr ""

#: ../../intro/tutorial01.txt:461
# 75178f048f5e4bd99914a96b305b9abc
msgid "The exact output will vary depending on the database you are using."
msgstr ""

#: ../../intro/tutorial01.txt:463
# ce2cf5855f784fce82f2096baba8d067
msgid "Table names are automatically generated by combining the name of the app (``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. (You can override this behavior.)"
msgstr ""

#: ../../intro/tutorial01.txt:467
# 9e735ad0a1f749979588f666db2f1c12
msgid "Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

#: ../../intro/tutorial01.txt:469
# 92e877b4d2054ca1a8deca424cea86b7
msgid "By convention, Django appends ``\"_id\"`` to the foreign key field name. (Yes, you can override this, as well.)"
msgstr ""

#: ../../intro/tutorial01.txt:472
# bce1978ef4834ad1bb6c7bdd602295c5
msgid "The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

#: ../../intro/tutorial01.txt:475
# 46ee6f44a95f458b9cc5c6786fdbd176
msgid "It's tailored to the database you're using, so database-specific field types such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer primary key`` (SQLite) are handled for you automatically. Same goes for quoting of field names -- e.g., using double quotes or single quotes. The author of this tutorial runs PostgreSQL, so the example output is in PostgreSQL syntax."
msgstr ""

#: ../../intro/tutorial01.txt:482
# b993477b42024dea8384d10e23fc0c4f
msgid "The :djadmin:`sql` command doesn't actually run the SQL in your database - it just prints it to the screen so that you can see what SQL Django thinks is required. If you wanted to, you could copy and paste this SQL into your database prompt. However, as we will see shortly, Django provides an easier way of committing the SQL to the database."
msgstr ""

#: ../../intro/tutorial01.txt:488
# 7d97c1d9e146428d836e6257aab5e5d8
msgid "If you're interested, also run the following commands:"
msgstr ""

#: ../../intro/tutorial01.txt:490
# c5dbb23ebd81486db97c9470e9f6e722
msgid ":djadmin:`python manage.py validate <validate>` -- Checks for any errors in the construction of your models."
msgstr ""

#: ../../intro/tutorial01.txt:493
# 8fb38a03a5414b0d95694614bcd6fe52
msgid ":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:`custom SQL statements <initial-sql>` (such as table modifications or constraints) that are defined for the application."
msgstr ""

#: ../../intro/tutorial01.txt:497
# 0f4bd972fc314533ac026e59cb7db5e3
msgid ":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the necessary ``DROP TABLE`` statements for this app, according to which tables already exist in your database (if any)."
msgstr ""

#: ../../intro/tutorial01.txt:501
# dba0f17e8517409aa5f41b720c154ba9
msgid ":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the ``CREATE INDEX`` statements for this app."
msgstr ""

#: ../../intro/tutorial01.txt:504
# 88cb4a7efacf4e57b0047160962e95b8
msgid ":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:`sqlindexes` commands."
msgstr ""

#: ../../intro/tutorial01.txt:508
# 0f691a7aa3324ad7bbc38b964766f914
msgid "Looking at the output of those commands can help you understand what's actually happening under the hood."
msgstr ""

#: ../../intro/tutorial01.txt:511
# 471e2dcdbad84ab68d25068a92cb3e3a
msgid "Now, run :djadmin:`syncdb` again to create those model tables in your database:"
msgstr ""

#: ../../intro/tutorial01.txt:517
# 2d89946758c84bb5a5a0dd8911572754
msgid "The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your database for all apps in :setting:`INSTALLED_APPS` that don't already exist in your database. This creates all the tables, initial data and indexes for any apps you've added to your project since the last time you ran syncdb. :djadmin:`syncdb` can be called as often as you like, and it will only ever create the tables that don't exist."
msgstr ""

#: ../../intro/tutorial01.txt:524
# 4c12394912bb4c79b3a405c9bb03a383
msgid "Read the :doc:`django-admin.py documentation </ref/django-admin>` for full information on what the ``manage.py`` utility can do."
msgstr ""

#: ../../intro/tutorial01.txt:528
# 66310f878de14845b5412382abf16bbd
msgid "Playing with the API"
msgstr ""

#: ../../intro/tutorial01.txt:530
# 9ef2834b731f41aaa8943b0fb28a9008
msgid "Now, let's hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

#: ../../intro/tutorial01.txt:537
# c168c459148442b785d49a5d88e22d37
msgid "We're using this instead of simply typing \"python\", because :file:`manage.py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives Django the Python import path to your :file:`settings.py` file."
msgstr ""

#: ../../intro/tutorial01.txt:543
# 1f7d5a7d7aa9474086ff424f2eb84b3d
msgid "If you'd rather not use :file:`manage.py`, no problem. Just set the ``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and run ``python`` from the same directory :file:`manage.py` is in (or ensure that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

#: ../../intro/tutorial01.txt:548
# 312bdc479a2346928e95dbad418ea707
msgid "For more information on all of this, see the :doc:`django-admin.py documentation </ref/django-admin>`."
msgstr ""

#: ../../intro/tutorial01.txt:551
# 1d38f417bea34c38ab32ada39cd3803f
msgid "Once you're in the shell, explore the :doc:`database API </topics/db/queries>`::"
msgstr ""

#: ../../intro/tutorial01.txt:591
# 3e70d2cb650b44a796f3ce8bd605d77f
msgid "Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful representation of this object. Let's fix that by editing the polls model (in the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model.__unicode__` method to both ``Poll`` and ``Choice``::"
msgstr ""

#: ../../intro/tutorial01.txt:607
# 95cf36f08b604e0db6973beea3618843
msgid "It's important to add :meth:`~django.db.models.Model.__unicode__` methods to your models, not only for your own sanity when dealing with the interactive prompt, but also because objects' representations are used throughout Django's automatically-generated admin."
msgstr ""

#: ../../intro/tutorial01.txt:615
# 3019b320051e4192977f82ed70976958
msgid "If you're familiar with Python, you might be in the habit of adding :meth:`~django.db.models.Model.__str__` methods to your classes, not :meth:`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db.models.Model.__unicode__` here because Django models deal with Unicode by default. All data stored in your database is converted to Unicode when it's returned."
msgstr ""

#: ../../intro/tutorial01.txt:622
# 9a2e0fa313d8400482f00f3327df830a
msgid "Django models have a default :meth:`~django.db.models.Model.__str__` method that calls :meth:`~django.db.models.Model.__unicode__` and converts the result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a Unicode string, and ``str(p)`` will return a normal string, with characters encoded as UTF-8."
msgstr ""

#: ../../intro/tutorial01.txt:628
# 5b5f4e8616f642dd9dc1df7e81e14b6c
msgid "If all of this is gibberish to you, just remember to add :meth:`~django.db.models.Model.__unicode__` methods to your models. With any luck, things should Just Work for you."
msgstr ""

#: ../../intro/tutorial01.txt:632
# 35b55712279c403f96e61e53e9cbcb43
msgid "Note these are normal Python methods. Let's add a custom method, just for demonstration::"
msgstr ""

#: ../../intro/tutorial01.txt:643
# dd9516f8c57d4a6eaf736657122c0693
msgid "Note the addition of ``import datetime`` and ``from django.utils import timezone``, to reference Python's standard :mod:`datetime` module and Django's time-zone-related utilities in :mod:`django.utils.timezone`, respectively. If you aren't familiar with time zone handling in Python, you can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

#: ../../intro/tutorial01.txt:649
# 898a892ba517430dad50a58573f6e049
msgid "Save these changes and start a new Python interactive shell by running ``python manage.py shell`` again::"
msgstr ""

#: ../../intro/tutorial01.txt:725
# 62f05794db6a425c8c608b7778254b95
msgid "For more information on model relations, see :doc:`Accessing related objects </ref/models/relations>`. For more on how to use double underscores to perform field lookups via the API, see :ref:`Field lookups <field-lookups-intro>`. For full details on the database API, see our :doc:`Database API reference </topics/db/queries>`."
msgstr ""

#: ../../intro/tutorial01.txt:731
# aa8ce87148a940dfab7c1fc52bcef4cb
msgid "When you're comfortable with the API, read :doc:`part 2 of this tutorial </intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

#: ../../intro/tutorial02.txt:3
# 200ea66d630341d685bdb3d905fd5276
msgid "Writing your first Django app, part 2"
msgstr ""

#: ../../intro/tutorial02.txt:5
# 71f961bee4be46158dc126d426b4c093
msgid "This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. We're continuing the Web-poll application and will focus on Django's automatically-generated admin site."
msgstr ""

#: ../../intro/tutorial02.txt:11
# 2db329ba42594a359b2e9b30eb1ce3fa
msgid "Generating admin sites for your staff or clients to add, change and delete content is tedious work that doesn't require much creativity. For that reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

#: ../../intro/tutorial02.txt:15
# ce4b045722e94d2bbc2e3e67d3a49ed0
msgid "Django was written in a newsroom environment, with a very clear separation between \"content publishers\" and the \"public\" site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content."
msgstr ""

#: ../../intro/tutorial02.txt:21
# 6e7191f38ad849f88f083a2b92967021
msgid "The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""

#: ../../intro/tutorial02.txt:25
# 44709502b0134ca59a92494c739ded3e
msgid "Activate the admin site"
msgstr ""

#: ../../intro/tutorial02.txt:27
# f3a970e06b0d4f049a1c2a70f913276a
msgid "The Django admin site is not activated by default -- it's an opt-in thing. To activate the admin site for your installation, do these three things:"
msgstr ""

#: ../../intro/tutorial02.txt:30
# 22280f0cace44903bef00d96dd8b1ccc
msgid "Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../intro/tutorial02.txt:32
# fe1723d23f1848d4848ed5021bc94379
msgid "Run ``python manage.py syncdb``. Since you have added a new application to :setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr ""

#: ../../intro/tutorial02.txt:35
# b117e59a2d0b4b00981955513b7ad0ae
msgid "Edit your ``mysite/urls.py`` file and uncomment the lines that reference the admin -- there are three lines in total to uncomment. This file is a URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need to know is that it maps URL roots to applications. In the end, you should have a ``urls.py`` file that looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:61
# a7ca3aa4d8ff4a30b04f9ab4cbd43b75
msgid "(The bold lines are the ones that needed to be uncommented.)"
msgstr ""

#: ../../intro/tutorial02.txt:64
# a6a6251261bc47e8977ebc1e757c1d14
msgid "Start the development server"
msgstr ""

#: ../../intro/tutorial02.txt:66
# 9f1058f73ff04db19439b3334c6d8efa
msgid "Let's start the development server and explore the admin site."
msgstr ""

#: ../../intro/tutorial02.txt:68
# 371ee7b1722d4ed0853d46b9e4ab94bf
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

#: ../../intro/tutorial02.txt:74
# 9a72cd08798042a4a89b98a27ab81ba2
msgid "Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

#: ../../intro/tutorial02.txt:82
# 7717fdc87a2d47cdbb9857184e954ef7
msgid "If at this point, instead of the above login page, you get an error page reporting something like::"
msgstr ""

#: ../../intro/tutorial02.txt:89
# 268610b908f4493aa842c9df9b83e07f
msgid "then you're probably using a version of Django that doesn't match this tutorial version. You'll want to either switch to the older tutorial or the newer Django version."
msgstr ""

#: ../../intro/tutorial02.txt:94
# cf72f8a02e684b6bbbd01613837a017d
msgid "Enter the admin site"
msgstr ""

#: ../../intro/tutorial02.txt:96
# a97f4af89f9746ca8200eeced889b803
msgid "Now, try logging in. (You created a superuser account in the first part of this tutorial, remember?  If you didn't create one or forgot the password you can :ref:`create another one <topics-auth-creating-superusers>`.) You should see the Django admin index page:"
msgstr ""

#: ../../intro/tutorial02.txt:104
# 2da22e9707394e3e8584dbb79f93b78d
msgid "You should see a few types of editable content, including groups, users and sites. These are core features Django ships with by default."
msgstr ""

#: ../../intro/tutorial02.txt:108
# 4dd24cad74aa4325a4c6201b98f6e1aa
msgid "Make the poll app modifiable in the admin"
msgstr ""

#: ../../intro/tutorial02.txt:110
# 2119b10e18884365925e4ce7a1f9c8c5
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

#: ../../intro/tutorial02.txt:112
# 072d30ca98624695b51a3a68ecadf724
msgid "Just one thing to do: We need to tell the admin that ``Poll`` objects have an admin interface. To do this, create a file called ``admin.py`` in your ``polls`` directory, and edit it to look like this::"
msgstr ""

#: ../../intro/tutorial02.txt:121
# b164f9dab72a4b4192e24e69fac1d05c
msgid "You'll need to restart the development server to see your changes. Normally, the server auto-reloads code every time you modify a file, but the action of creating a new file doesn't trigger the auto-reloading logic."
msgstr ""

#: ../../intro/tutorial02.txt:126
# b6e8eba4af1a40cc99fdd6ed43dfff15
msgid "Explore the free admin functionality"
msgstr ""

#: ../../intro/tutorial02.txt:128
# 3e205cba584c41fe8ce94504b14b4c90
msgid "Now that we've registered ``Poll``, Django knows that it should be displayed on the admin index page:"
msgstr ""

#: ../../intro/tutorial02.txt:134
# b626e2c4097e4e45898edd59be91f852
msgid "Click \"Polls.\" Now you're at the \"change list\" page for polls. This page displays all the polls in the database and lets you choose one to change it. There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

#: ../../intro/tutorial02.txt:141
# 364ad6ea62c04931b7630fcc5c45d51a
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

#: ../../intro/tutorial02.txt:146
# e178233de6784cd5abf0e8634d62699e
msgid "Things to note here:"
msgstr ""

#: ../../intro/tutorial02.txt:148
# 91e72b58169947619f979bebcf9510ef
msgid "The form is automatically generated from the Poll model."
msgstr ""

#: ../../intro/tutorial02.txt:150
# 5eb517ca74f6467c98f19234ab66ea84
msgid "The different model field types (:class:`~django.db.models.DateTimeField`, :class:`~django.db.models.CharField`) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin."
msgstr ""

#: ../../intro/tutorial02.txt:155
# 474eff395d9f4b86b972430b9f691864
msgid "Each :class:`~django.db.models.DateTimeField` gets free JavaScript shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

#: ../../intro/tutorial02.txt:159
# b27ab07e96be4028934ff8af1111a12e
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

#: ../../intro/tutorial02.txt:161
# 036aa5fe05324511b8e063fc7ef94850
msgid "Save -- Saves changes and returns to the change-list page for this type of object."
msgstr ""

#: ../../intro/tutorial02.txt:164
# ef71cb6cf7154a5598795677f882a2c7
msgid "Save and continue editing -- Saves changes and reloads the admin page for this object."
msgstr ""

#: ../../intro/tutorial02.txt:167
# ee4f5e0f6c2a4452969cf49b565e42b3
msgid "Save and add another -- Saves changes and loads a new, blank form for this type of object."
msgstr ""

#: ../../intro/tutorial02.txt:170
# 1df97be851bf48109800bfe46dbff413
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

#: ../../intro/tutorial02.txt:172
# e5dfacdf473d4a6aabbdc3aee6e0c1c5
msgid "If the value of \"Date published\" doesn't match the time when you created the poll in Tutorial 1, it probably means you forgot to set the correct value for the :setting:`TIME_ZONE` setting. Change it, reload the page and check that the correct value appears."
msgstr ""

#: ../../intro/tutorial02.txt:177
# d2698b075bd54d49921b76a64b99dcfe
msgid "Change the \"Date published\" by clicking the \"Today\" and \"Now\" shortcuts. Then click \"Save and continue editing.\" Then click \"History\" in the upper right. You'll see a page listing all changes made to this object via the Django admin, with the timestamp and username of the person who made the change:"
msgstr ""

#: ../../intro/tutorial02.txt:186
# a6ab84737a7c4aa1aa8070c41687f9da
msgid "Customize the admin form"
msgstr ""

#: ../../intro/tutorial02.txt:188
# f747ea1ff6a8437a9ed89ec7b6f54a89
msgid "Take a few minutes to marvel at all the code you didn't have to write. By registering the Poll model with ``admin.site.register(Poll)``, Django was able to construct a default form representation. Often, you'll want to customize how the admin form looks and works. You'll do this by telling Django the options you want when you register the object."
msgstr ""

#: ../../intro/tutorial02.txt:194
# 8bc70d08556f454d92f3f1600cc48393
msgid "Let's see how this works by re-ordering the fields on the edit form. Replace the ``admin.site.register(Poll)`` line with::"
msgstr ""

#: ../../intro/tutorial02.txt:202
# 90a829a778bd48de9d9547b3d4b08db5
msgid "You'll follow this pattern -- create a model admin object, then pass it as the second argument to ``admin.site.register()`` -- any time you need to change the admin options for an object."
msgstr ""

#: ../../intro/tutorial02.txt:206
# e294ecb1220248af840c3bdcce70bb0c
msgid "This particular change above makes the \"Publication date\" come before the \"Question\" field:"
msgstr ""

#: ../../intro/tutorial02.txt:212
# a387ff2e0eb64aaca9900b562b698c70
msgid "This isn't impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail."
msgstr ""

#: ../../intro/tutorial02.txt:215
# d033be3af70444ceb7e66a6d5541dc18
msgid "And speaking of forms with dozens of fields, you might want to split the form up into fieldsets::"
msgstr ""

#: ../../intro/tutorial02.txt:226
# 2e12c6bfd3714632886515bdfdfcc161
msgid "The first element of each tuple in ``fieldsets`` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""

#: ../../intro/tutorial02.txt:232
# 7231a0efa7b541f8911c74a11d4a0306
msgid "You can assign arbitrary HTML classes to each fieldset. Django provides a ``\"collapse\"`` class that displays a particular fieldset initially collapsed. This is useful when you have a long form that contains a number of fields that aren't commonly used::"
msgstr ""

#: ../../intro/tutorial02.txt:247
# b56b970afd1044fd97b37d3e35ef120f
msgid "Adding related objects"
msgstr ""

#: ../../intro/tutorial02.txt:249
# d2ad6af38f264d4d97f826acb89f3696
msgid "OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, and the admin page doesn't display choices."
msgstr ""

#: ../../intro/tutorial02.txt:252
# 4a4f3b6e0864407e8eeb86f0cbfd3776
msgid "Yet."
msgstr ""

#: ../../intro/tutorial02.txt:254
# 4f553c46841b4cf4a753743307bf64a8
msgid "There are two ways to solve this problem. The first is to register ``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

#: ../../intro/tutorial02.txt:261
# 41baf12b028e4a46b2a5d58d531122d9
msgid "Now \"Choices\" is an available option in the Django admin. The \"Add choice\" form looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:267
# b27e87a5efe54dcbb7b47567f1d4664f
msgid "In that form, the \"Poll\" field is a select box containing every poll in the database. Django knows that a :class:`~django.db.models.ForeignKey` should be represented in the admin as a ``<select>`` box. In our case, only one poll exists at this point."
msgstr ""

#: ../../intro/tutorial02.txt:272
# aeb3fa29f7814f19ba2984d4f67d295e
msgid "Also note the \"Add Another\" link next to \"Poll.\" Every object with a ``ForeignKey`` relationship to another gets this for free. When you click \"Add Another,\" you'll get a popup window with the \"Add poll\" form. If you add a poll in that window and click \"Save,\" Django will save the poll to the database and dynamically add it as the selected choice on the \"Add choice\" form you're looking at."
msgstr ""

#: ../../intro/tutorial02.txt:279
# ed8cb60116d749678b326f733328bc4c
msgid "But, really, this is an inefficient way of adding ``Choice`` objects to the system. It'd be better if you could add a bunch of Choices directly when you create the ``Poll`` object. Let's make that happen."
msgstr ""

#: ../../intro/tutorial02.txt:283
# e081680521e541018ec00a38a4894dd4
msgid "Remove the ``register()`` call for the ``Choice`` model. Then, edit the ``Poll`` registration code to read::"
msgstr ""

#: ../../intro/tutorial02.txt:302
# f0a73ba990f2408981a63ee1c8b3433a
msgid "This tells Django: \"``Choice`` objects are edited on the ``Poll`` admin page. By default, provide enough fields for 3 choices.\""
msgstr ""

#: ../../intro/tutorial02.txt:305
# 23e1209e4af94b519197104180238c70
msgid "Load the \"Add poll\" page to see how that looks, you may need to restart your development server:"
msgstr ""

#: ../../intro/tutorial02.txt:310
# 8b5ab839f9474446830fbd88da988504
msgid "It works like this: There are three slots for related Choices -- as specified by ``extra`` -- and each time you come back to the \"Change\" page for an already-created object, you get another three extra slots."
msgstr ""

#: ../../intro/tutorial02.txt:314
# 39ee7df3d35f4fea90f3d41a64ed649e
msgid "At the end of the three current slots you will find an \"Add another Choice\" link.  If you click on it, a new slot will be added. If you want to remove the added slot, you can click on the X to the top right of the added slot. Note that you can't remove the original three slots. This image shows an added slot:"
msgstr ""

#: ../../intro/tutorial02.txt:322
# 3d73c37a7686496b9c6510e5103178fd
msgid "One small problem, though. It takes a lot of screen space to display all the fields for entering related ``Choice`` objects. For that reason, Django offers a tabular way of displaying inline related objects; you just need to change the ``ChoiceInline`` declaration to read::"
msgstr ""

#: ../../intro/tutorial02.txt:330
# 065efdbe26284fb4bff7b82e728b7578
msgid "With that ``TabularInline`` (instead of ``StackedInline``), the related objects are displayed in a more compact, table-based format:"
msgstr ""

#: ../../intro/tutorial02.txt:336
# 1760fe742894437394718f4bd0e5fc91
msgid "Note that there is an extra \"Delete?\" column that allows removing rows added using the \"Add Another Choice\" button and rows that have already been saved."
msgstr ""

#: ../../intro/tutorial02.txt:340
# c9f5cdf125a1421690608a619339845c
msgid "Customize the admin change list"
msgstr ""

#: ../../intro/tutorial02.txt:342
# 957bcdbb487648988631f41f43653729
msgid "Now that the Poll admin page is looking good, let's make some tweaks to the \"change list\" page -- the one that displays all the polls in the system."
msgstr ""

#: ../../intro/tutorial02.txt:345
# 2ec66beb03f7471fb6d90a001bcb1e2f
msgid "Here's what it looks like at this point:"
msgstr ""

#: ../../intro/tutorial02.txt:350
# 8bf3a369d6b6445aa912a66be51c0e98
msgid "By default, Django displays the ``str()`` of each object. But sometimes it'd be more helpful if we could display individual fields. To do that, use the ``list_display`` admin option, which is a tuple of field names to display, as columns, on the change list page for the object::"
msgstr ""

#: ../../intro/tutorial02.txt:359
# b73933f83f784cbe802aeecd5e08f657
msgid "Just for good measure, let's also include the ``was_published_recently`` custom method from Tutorial 1::"
msgstr ""

#: ../../intro/tutorial02.txt:366
# 0044918b7faa48faa3ffdf9158efa5b8
msgid "Now the poll change list page looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:371
# e408066a23c440a8a1927e2eb7bbbaba
msgid "You can click on the column headers to sort by those values -- except in the case of the ``was_published_recently`` header, because sorting by the output of an arbitrary method is not supported. Also note that the column header for ``was_published_recently`` is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output."
msgstr ""

#: ../../intro/tutorial02.txt:378
# 50023ad66b454569b9d63964eb244b2c
msgid "You can improve that by giving that method (in ``models.py``) a few attributes, as follows::"
msgstr ""

#: ../../intro/tutorial02.txt:389
# 1e8542b7b5eb439c9c3f87b68ac9f4e9
msgid "Edit your admin.py file again and add an improvement to the Poll change list page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

#: ../../intro/tutorial02.txt:394
# 5542d8b553524ce2bf6bc3514beebca0
msgid "That adds a \"Filter\" sidebar that lets people filter the change list by the ``pub_date`` field:"
msgstr ""

#: ../../intro/tutorial02.txt:400
# a442e59fb450489892e6147972a1662b
msgid "The type of filter displayed depends on the type of field you're filtering on. Because ``pub_date`` is a :class:`~django.db.models.fields.DateTimeField`, Django knows to give appropriate filter options: \"Any date,\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

#: ../../intro/tutorial02.txt:405
# bda2186de7de40d7b782c10e924cd44c
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

#: ../../intro/tutorial02.txt:409
# 6fa725de33db4d1c84d18f3446319aaf
msgid "That adds a search box at the top of the change list. When somebody enters search terms, Django will search the ``question`` field. You can use as many fields as you'd like -- although because it uses a ``LIKE`` query behind the scenes, keep it reasonable, to keep your database happy."
msgstr ""

#: ../../intro/tutorial02.txt:414
# f43af1516b4542a0821679901b2ed3ae
msgid "Finally, because ``Poll`` objects have dates, it'd be convenient to be able to drill down by date. Add this line::"
msgstr ""

#: ../../intro/tutorial02.txt:419
# c06262464dd1410495c2966c74e015e2
msgid "That adds hierarchical navigation, by date, to the top of the change list page. At top level, it displays all available years. Then it drills down to months and, ultimately, days."
msgstr ""

#: ../../intro/tutorial02.txt:423
# a270421ba63e49169c8077623fa2b7f0
msgid "Now's also a good time to note that change lists give you free pagination. The default is to display 100 items per page. Change-list pagination, search boxes, filters, date-hierarchies and column-header-ordering all work together like you think they should."
msgstr ""

#: ../../intro/tutorial02.txt:429
# a564ad4d206240aaac94ec14b9178256
msgid "Customize the admin look and feel"
msgstr ""

#: ../../intro/tutorial02.txt:431
# ae0812948874459198e8bee8fce0494f
msgid "Clearly, having \"Django administration\" at the top of each admin page is ridiculous. It's just placeholder text."
msgstr ""

#: ../../intro/tutorial02.txt:434
# 011a1c08890d46ee9cb30ce82a71e267
msgid "That's easy to change, though, using Django's template system. The Django admin is powered by Django itself, and its interfaces use Django's own template system."
msgstr ""

#: ../../intro/tutorial02.txt:438
# 7841911101c543e493d597e385b8263e
msgid "Open your settings file (``mysite/settings.py``, remember) and look at the :setting:`TEMPLATE_DIRS` setting. :setting:`TEMPLATE_DIRS` is a tuple of filesystem directories to check when loading Django templates. It's a search path."
msgstr ""

#: ../../intro/tutorial02.txt:443
# 4fb2a276850f4e8fbaf1cbcd586292a1
msgid "Create a ``mytemplates`` directory in your project directory. Templates can live anywhere on your filesystem that Django can access. (Django runs as whatever user your server runs.) However, keeping your templates within the project is a good convention to follow."
msgstr ""

#: ../../intro/tutorial02.txt:448
# 767da201677b439e8c77f48c842c42a3
msgid "By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to it, to tell Django where our templates live::"
msgstr ""

#: ../../intro/tutorial02.txt:455
# e72d3a91e44c445581828aaddcce69d5
msgid "Now copy the template ``admin/base_site.html`` from within the default Django admin template directory in the source code of Django itself (``django/contrib/admin/templates``) into an ``admin`` subdirectory of whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, if your :setting:`TEMPLATE_DIRS` includes ``'/path/to/mysite/mytemplates'``, as above, then copy ``django/contrib/admin/templates/admin/base_site.html`` to ``/path/to/mysite/mytemplates/admin/base_site.html``. Don't forget that ``admin`` subdirectory."
msgstr ""

#: ../../intro/tutorial02.txt:466
# fdc6f5a91c654ef1a570332d5bc4b9b0
msgid "If you have difficulty finding where the Django source files are located on your system, run the following command:"
msgstr ""

#: ../../intro/tutorial02.txt:477
# 9837639fbe164e63b289e4e8e6ae67ac
msgid "Then, just edit the file and replace the generic Django text with your own site's name as you see fit."
msgstr ""

#: ../../intro/tutorial02.txt:480
# dcc81ec2fe2740b28615a427535f3799
msgid "This template file contains lots of text like ``{% block branding %}`` and ``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template language. When Django renders ``admin/base_site.html``, this template language will be evaluated to produce the final HTML page. Don't worry if you can't make any sense of the template right now -- we'll delve into Django's templating language in Tutorial 3."
msgstr ""

#: ../../intro/tutorial02.txt:487
# 0346f96173094d5d9154bd08a1b6f0a1
msgid "Note that any of Django's default admin templates can be overridden. To override a template, just do the same thing you did with ``base_site.html`` -- copy it from the default directory into your custom directory, and make changes."
msgstr ""

#: ../../intro/tutorial02.txt:492
# 3f5a898d876b42ce8db50d4438c18a7b
msgid "Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by default, how was Django finding the default admin templates? The answer is that, by default, Django automatically looks for a ``templates/`` subdirectory within each app package, for use as a fallback. See the :ref:`template loader documentation <template-loaders>` for full information."
msgstr ""

#: ../../intro/tutorial02.txt:499
# 51ae7bcf98f64c2d892601d58b57567f
msgid "Customize the admin index page"
msgstr ""

#: ../../intro/tutorial02.txt:501
# 5f335f0a26f54baca0b431e674339b6a
msgid "On a similar note, you might want to customize the look and feel of the Django admin index page."
msgstr ""

#: ../../intro/tutorial02.txt:504
# 2ec544159cde4f95a4e0756e36b7beda
msgid "By default, it displays all the apps in :setting:`INSTALLED_APPS` that have been registered with the admin application, in alphabetical order. You may want to make significant changes to the layout. After all, the index is probably the most important page of the admin, and it should be easy to use."
msgstr ""

#: ../../intro/tutorial02.txt:509
# 1fae2f994b814e3094137c013560ce3d
msgid "The template to customize is ``admin/index.html``. (Do the same as with ``admin/base_site.html`` in the previous section -- copy it from the default directory to your custom template directory.) Edit the file, and you'll see it uses a template variable called ``app_list``. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best. Again, don't worry if you can't understand the template language -- we'll cover that in more detail in Tutorial 3."
msgstr ""

#: ../../intro/tutorial02.txt:518
# 41f3c47b324e492cb5a2fa9654dd93ae
msgid "When you're comfortable with the admin site, read :doc:`part 3 of this tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

#: ../../intro/tutorial03.txt:3
# 5dcddfceef0f4c7c8e4b96edae13e312
msgid "Writing your first Django app, part 3"
msgstr ""

#: ../../intro/tutorial03.txt:5
# 9484d2996a5a41c08ef9b91cfeef5fa9
msgid "This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. We're continuing the Web-poll application and will focus on creating the public interface -- \"views.\""
msgstr ""

#: ../../intro/tutorial03.txt:10
# ccd0d13b8e0a44b9ae15f371545d8a97
msgid "Philosophy"
msgstr ""

#: ../../intro/tutorial03.txt:12
# 9a54d4378b5c4d58ac8a6199cde81df9
msgid "A view is a \"type\" of Web page in your Django application that generally serves a specific function and has a specific template. For example, in a blog application, you might have the following views:"
msgstr ""

#: ../../intro/tutorial03.txt:16
# 7cc13545c3c64c3d85b1512216025bea
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

#: ../../intro/tutorial03.txt:18
# 9f196e101af249e08f2e493cf1ed4722
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

#: ../../intro/tutorial03.txt:20
# 7ca361b89a6044e6a6c9f37ed93bb9fa
msgid "Year-based archive page -- displays all months with entries in the given year."
msgstr ""

#: ../../intro/tutorial03.txt:23
# 8945717da9d74e629992941e5935735a
msgid "Month-based archive page -- displays all days with entries in the given month."
msgstr ""

#: ../../intro/tutorial03.txt:26
# 5ba283ccc46a438e93d6f0e4224b41a2
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

#: ../../intro/tutorial03.txt:28
# d6d9fc19c6a143dcbf15b68d50abae96
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

#: ../../intro/tutorial03.txt:30
# 74393bbd77c744d8a8874a48ec498482
msgid "In our poll application, we'll have the following four views:"
msgstr ""

#: ../../intro/tutorial03.txt:32
# 1d4934c6ed2248c9958de857cd06c0fb
msgid "Poll \"index\" page -- displays the latest few polls."
msgstr ""

#: ../../intro/tutorial03.txt:34
# 3d39c341afaa451d8e644cabb2f0ea10
msgid "Poll \"detail\" page -- displays a poll question, with no results but with a form to vote."
msgstr ""

#: ../../intro/tutorial03.txt:37
# 8c9d5629f75649c4845c02a1445823c3
msgid "Poll \"results\" page -- displays results for a particular poll."
msgstr ""

#: ../../intro/tutorial03.txt:39
# a56470d8fa6549a8ac6b468f447cfd41
msgid "Vote action -- handles voting for a particular choice in a particular poll."
msgstr ""

#: ../../intro/tutorial03.txt:42
# 8d70cea66bb04ab7bbfe2c54085e2c53
msgid "In Django, each view is represented by a simple Python function."
msgstr ""

#: ../../intro/tutorial03.txt:45
# cd687a6144e94f3c9335f25c5665c638
msgid "Write your first view"
msgstr ""

#: ../../intro/tutorial03.txt:47
# 95a1ba253c664723a3e7a7fd9d8ad86d
msgid "Let's write the first view. Open the file ``polls/views.py`` and put the following Python code in it::"
msgstr ""

#: ../../intro/tutorial03.txt:55
# 452a0dde452d4806801b8cfe9e08e4fb
msgid "This is the simplest view possible in Django. Now we have a problem, how does this view get called? For that we need to map it to a URL, in Django this is done in a configuration file called a URLconf."
msgstr ""

#: ../../intro/tutorial03.txt:61
# 04e78321898546f6b38afc5c488562a0
msgid "In Django, web pages and other content are delivered by views and determining which view is called is done by Python modules informally titled 'URLconfs'. These modules are pure Python code and are a simple mapping between URL patterns (as simple regular expressions) to Python callback functions (your views). This tutorial provides basic instruction in their use, and you can refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

#: ../../intro/tutorial03.txt:69
# f7487166d5b740b5b0cf522b69e235f0
msgid "To create a URLconf in the polls directory, create a file called ``urls.py``. Your app directory should now look like::"
msgstr ""

#: ../../intro/tutorial03.txt:80
# 75ec3a78b7874893ab4a5271e35dcdf5
msgid "In the ``polls/urls.py`` file include the following code::"
msgstr ""

#: ../../intro/tutorial03.txt:90
# 93d5bd433b0f4cd080015fdaf28fa99a
msgid "The next step is to point the root URLconf at the ``polls.urls`` module. In ``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you with::"
msgstr ""

#: ../../intro/tutorial03.txt:104
# a9567ef12d934468af52acc45556382a
msgid "You have now wired an `index` view into the URLconf. Go to http://localhost:8000/polls/ in your browser, and you should see the text \"*Hello, world. You're at the poll index.*\", which you defined in the ``index`` view."
msgstr ""

#: ../../intro/tutorial03.txt:109
# 9ff32dfb25ba4761861bdd80d4b2f217
msgid "The :func:`~django.conf.urls.url` function is passed four arguments, two required: ``regex`` and ``view``, and two optional: ``kwargs``, and ``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

#: ../../intro/tutorial03.txt:114
# 8afa0c3593aa4d1bb27f2f5e593eaaa5
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

#: ../../intro/tutorial03.txt:116
# 9cc7d12d41824a5988b5163742a64362
msgid "The term `regex` is a commonly used short form meaning `regular expression`, which is a syntax for matching patterns in strings, or in this case, url patterns. Django starts at the first regular expression and makes its way down the list,  comparing the requested URL against each regular expression until it finds one that matches."
msgstr ""

#: ../../intro/tutorial03.txt:122
# 6b39e019c1bf469ca9d6f0729b7d144d
msgid "Note that these regular expressions do not search GET and POST parameters, or the domain name. For example, in a request to ``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""

#: ../../intro/tutorial03.txt:128
# 3a8ea97b13b641f8861a3a02328654a4
msgid "If you need help with regular expressions, see `Wikipedia's entry`_ and the documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, you don't need to be an expert on regular expressions, as you really only need to know how to capture simple patterns. In fact, complex regexes can have poor lookup performance, so you probably shouldn't rely on the full power of regexes."
msgstr ""

#: ../../intro/tutorial03.txt:135
# 5e672203802c42109cda9964a3dd1309
msgid "Finally, a performance note: these regular expressions are compiled the first time the URLconf module is loaded. They're super fast (as long as the lookups aren't too complex as noted above)."
msgstr ""

#: ../../intro/tutorial03.txt:142
# 8ca6264143a54813ae82d3215dea1fe7
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

#: ../../intro/tutorial03.txt:144
# fb00fbf1d12c4955b022c169aa748e2b
msgid "When Django finds a regular expression match, Django calls the specified view function, with an :class:`~django.http.HttpRequest` object as the first argument and any “captured” values from the regular expression as other arguments. If the regex uses simple captures, values are passed as positional arguments; if it uses named captures, values are passed as keyword arguments. We'll give an example of this in a bit."
msgstr ""

#: ../../intro/tutorial03.txt:152
# 00625d632657443c92e7ca86c9b8b806
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

#: ../../intro/tutorial03.txt:154
# c52a992572c24b17bfa56d8219affd6f
msgid "Arbitrary keyword arguments can be passed in a dictionary to the target view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

#: ../../intro/tutorial03.txt:158
# 594bc4ae15fe43baaddbde4b386bf50f
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

#: ../../intro/tutorial03.txt:160
# 1e7e983f666242bfb9636bbcb420e1a8
msgid "Naming your URL lets you refer to it unambiguously from elsewhere in Django especially templates. This powerful feature allows you to make  global changes to the url patterns of your project while only touching a single file."
msgstr ""

#: ../../intro/tutorial03.txt:165
# a3c54961b14b47f189b8d40a9b39d7a5
msgid "Writing more views"
msgstr ""

#: ../../intro/tutorial03.txt:167
# d695e0a7a14044619d55b028588febf6
msgid "Now let's add a few more views to ``polls/views.py``. These views are slightly different, because they take an argument::"
msgstr ""

#: ../../intro/tutorial03.txt:179
# 9788a5985d6b4b179e6b87f185e83272
msgid "Wire these news views into the ``polls.urls`` module by adding the following :func:`~django.conf.urls.url` calls::"
msgstr ""

#: ../../intro/tutorial03.txt:197
# fdf2f018c5fe4fc681c374fd5fe6290f
msgid "Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` method and display whatever ID you provide in the URL. Try \"/polls/34/results/\" and \"/polls/34/vote/\" too -- these will display the placeholder results and voting pages."
msgstr ""

#: ../../intro/tutorial03.txt:202
# 5a4d7432a3f94aa4aa01c4d90b1860e9
msgid "When somebody requests a page from your Web site -- say, \"/polls/34/\", Django will load the ``mysite.urls`` Python module because it's pointed to by the :setting:`ROOT_URLCONF` setting. It finds the variable named ``urlpatterns`` and traverses the regular expressions in order. The :func:`~django.conf.urls.include` functions we are using simply reference other URLconfs. Note that the regular expressions for the :func:`~django.conf.urls.include` functions don't have a ``$`` (end-of-string match character) but rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls.include`, it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing."
msgstr ""

#: ../../intro/tutorial03.txt:214
# 58f0a225794543df8b6dda34b0db8c91
msgid "The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/content/polls/\", or any other path root, and the app will still work."
msgstr ""

#: ../../intro/tutorial03.txt:220
# 9c4e3082f58b4365b305b1873779a05f
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

#: ../../intro/tutorial03.txt:222
# f37a8cd1757449edb0fd4fe2b2214fc2
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

#: ../../intro/tutorial03.txt:224
# 5b3cfd5b35184b378bad1661add7c55f
msgid "Then, Django will strip off the matching text (``\"polls/\"``) and send the remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further processing which matches ``r'^(?P<poll_id>\\d+)/$'`` resulting in a call to the ``detail()`` view like so::"
msgstr ""

#: ../../intro/tutorial03.txt:231
# d6d35712c2e046eca3b047d9ecdb31e6
msgid "The ``poll_id='34'`` part comes from ``(?P<poll_id>\\d+)``. Using parentheses around a pattern \"captures\" the text matched by that pattern and sends it as an argument to the view function; ``?P<poll_id>`` defines the name that will be used to identify the matched pattern; and ``\\d+`` is a regular expression to match a sequence of digits (i.e., a number)."
msgstr ""

#: ../../intro/tutorial03.txt:237
# a4cef481a6894b1b9f6cce2855d570a5
msgid "Because the URL patterns are regular expressions, there really is no limit on what you can do with them. And there's no need to add URL cruft such as ``.php`` -- unless you have a sick sense of humor, in which case you can do something like this::"
msgstr ""

#: ../../intro/tutorial03.txt:244
# 4a3e66cc38cc43db9293d3b1e0c9099d
msgid "But, don't do that. It's silly."
msgstr ""

#: ../../intro/tutorial03.txt:247
# 3054e04e3ed34135b4986ac7df5f019a
msgid "Write views that actually do something"
msgstr ""

#: ../../intro/tutorial03.txt:249
# cf1e1772b7aa4ed0a5a05f61de9877e0
msgid "Each view is responsible for doing one of two things: returning an :class:`~django.http.HttpResponse` object containing the content for the requested page, or raising an exception such as :exc:`~django.http.Http404`. The rest is up to you."
msgstr ""

#: ../../intro/tutorial03.txt:254
# 91d0fa359bbe41d88fd5fe70df56d144
msgid "Your view can read records from a database, or not. It can use a template system such as Django's -- or a third-party Python template system -- or not. It can generate a PDF file, output XML, create a ZIP file on the fly, anything you want, using whatever Python libraries you want."
msgstr ""

#: ../../intro/tutorial03.txt:259
# 5da6ba36f3c3460e89d4213ef05a73f0
msgid "All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""

#: ../../intro/tutorial03.txt:261
# 1ac6a93c94204b378b0407a975946144
msgid "Because it's convenient, let's use Django's own database API, which we covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at the ``index()`` view, which displays the latest 5 poll questions in the system, separated by commas, according to publication date::"
msgstr ""

#: ../../intro/tutorial03.txt:275
# 4fdba80d7b5e46c995c456680999a937
msgid "There's a problem here, though: the page's design is hard-coded in the view. If you want to change the way the page looks, you'll have to edit this Python code. So let's use Django's template system to separate the design from Python."
msgstr ""

#: ../../intro/tutorial03.txt:279
# 1981d852dc1640ed9562b99965ac9730
msgid "First, create a directory ``polls`` in your template directory you specified in setting:`TEMPLATE_DIRS`. Within that, create a file called ``index.html``. Put the following code in that template:"
msgstr ""

#: ../../intro/tutorial03.txt:295
# 523306120db243caa16034ac608a3ce5
msgid "Now let's use that html template in our index view::"
msgstr ""

#: ../../intro/tutorial03.txt:310
# ed2ff975ce2a4ff9a152cce03e75618f
msgid "That code loads the template called  ``polls/index.html`` and passes it a context. The context is a dictionary mapping template variable names to Python objects."
msgstr ""

#: ../../intro/tutorial03.txt:314
# e63a241e373c41b9a021942142746b9e
msgid "Load the page in your Web browser, and you should see a bulleted-list containing the \"What's up\" poll from Tutorial 1. The link points to the poll's detail page."
msgstr ""

#: ../../intro/tutorial03.txt:320
# a8ef2cc1e7dc42d489f4136319f14da8
msgid "Rather than one big templates directory, you can also store templates within each app. We'll discuss this in more detail in the :doc:`reusable apps tutorial</intro/reusable-apps>`."
msgstr ""

#: ../../intro/tutorial03.txt:325
# 5c9956b8a58d42f68f4bf83d70038c59
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

#: ../../intro/tutorial03.txt:327
# 632ff2ddb53e4875a5b1b6c3a9e65a96
msgid "It's a very common idiom to load a template, fill a context and return an :class:`~django.http.HttpResponse` object with the result of the rendered template. Django provides a shortcut. Here's the full ``index()`` view, rewritten::"
msgstr ""

#: ../../intro/tutorial03.txt:341
# 4a06b05fd2664d83a907d3d4cf603db4
msgid "Note that once we've done this in all these views, we no longer need to import :mod:`~django.template.loader`, :class:`~django.template.Context` and :class:`~django.http.HttpResponse` (you'll want to keep ``HttpResponse`` if you still have the stub methods for ``detail``, ``results``, and ``vote``)."
msgstr ""

#: ../../intro/tutorial03.txt:346
# 6494bd2bd21d4dca8961be7fd04c0564
msgid "The :func:`~django.shortcuts.render` function takes the request object as its first argument, a template name as its second argument and a dictionary as its optional third argument. It returns an :class:`~django.http.HttpResponse` object of the given template rendered with the given context."
msgstr ""

#: ../../intro/tutorial03.txt:352
# 42cdb7eec67a45b29d0132eb5b565de5
msgid "Raising a 404 error"
msgstr ""

#: ../../intro/tutorial03.txt:354
# d08e811047e4416787703c5ed2b1480b
msgid "Now, let's tackle the poll detail view -- the page that displays the question for a given poll. Here's the view::"
msgstr ""

#: ../../intro/tutorial03.txt:366
# e5c81352ab5444c495cba2e2778f5d21
msgid "The new concept here: The view raises the :exc:`~django.http.Http404` exception if a poll with the requested ID doesn't exist."
msgstr ""

#: ../../intro/tutorial03.txt:369
# 4362925ca21b4edb9db451401fa348ee
msgid "We'll discuss what you could put in that ``polls/detail.html`` template a bit later, but if you'd like to quickly get the above example working, just::"
msgstr ""

#: ../../intro/tutorial03.txt:374
# ce6217bab08d475590eadfe80decb7c5
msgid "will get you started for now."
msgstr ""

#: ../../intro/tutorial03.txt:377
# 65ba8e58ef4345ec84bdb4cfd0c2411b
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

#: ../../intro/tutorial03.txt:379
# 88909775d2f446d7a8672317a744e7c2
msgid "It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` and raise :exc:`~django.http.Http404` if the object doesn't exist. Django provides a shortcut. Here's the ``detail()`` view, rewritten::"
msgstr ""

#: ../../intro/tutorial03.txt:389
# 6e14672acb194df1b6fc29af1cbebe1a
msgid "The :func:`~django.shortcuts.get_object_or_404` function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the :meth:`~django.db.models.query.QuerySet.get` function of the model's manager. It raises :exc:`~django.http.Http404` if the object doesn't exist."
msgstr ""

#: ../../intro/tutorial03.txt:397
# 7a428e18731549a2b174a72cc85b0e9b
msgid "Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` instead of automatically catching the :exc:`~django.core.exceptions.ObjectDoesNotExist` exceptions at a higher level, or having the model API raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions.ObjectDoesNotExist`?"
msgstr ""

#: ../../intro/tutorial03.txt:403
# d0704c908d26414aa65a121136b68a98
msgid "Because that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

#: ../../intro/tutorial03.txt:407
# b039e78f9f1f4bec926886497a47e4de
msgid "There's also a :func:`~django.shortcuts.get_list_or_404` function, which works just as :func:`~django.shortcuts.get_object_or_404` -- except using :meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db.models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the list is empty."
msgstr ""

#: ../../intro/tutorial03.txt:414
# 2c567a3dfe5b442580f36f4149ba1f17
msgid "Write a 404 (page not found) view"
msgstr ""

#: ../../intro/tutorial03.txt:416
# bfd58d17d82e453fae434d6ec1b007c1
msgid "When you raise :exc:`~django.http.Http404` from within a view, Django will load a special view devoted to handling 404 errors. It finds it by looking for the variable ``handler404`` in your root URLconf (and only in your root URLconf; setting ``handler404`` anywhere else will have no effect), which is a string in Python dotted syntax -- the same format the normal URLconf callbacks use. A 404 view itself has nothing special: It's just a normal view."
msgstr ""

#: ../../intro/tutorial03.txt:424
# ead6be2e6efc49298e1548e3d4ce907f
msgid "You normally won't have to bother with writing 404 views. If you don't set ``handler404``, the built-in view :func:`django.views.defaults.page_not_found` is used by default. Optionally, you can create a ``404.html`` template in the root of your template directory. The default 404 view will then use that template for all 404 errors when :setting:`DEBUG` is set to ``False`` (in your settings module). If you do create the template, add at least some dummy content like \"Page not found\"."
msgstr ""

#: ../../intro/tutorial03.txt:432
# 1c5378cdcde741a1b09181f0ac577277
msgid "A couple more things to note about 404 views:"
msgstr ""

#: ../../intro/tutorial03.txt:434
# bc6d1937fb8843308ab31dab284edf6c
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module) then your 404 view will never be used (and thus the ``404.html`` template will never be rendered) because the traceback will be displayed instead."
msgstr ""

#: ../../intro/tutorial03.txt:438
# c75b12c14b04436883c687b35be91773
msgid "The 404 view is also called if Django doesn't find a match after checking every regular expression in the URLconf."
msgstr ""

#: ../../intro/tutorial03.txt:442
# c6454b34cff74347a81fbeb7e365d93e
msgid "Write a 500 (server error) view"
msgstr ""

#: ../../intro/tutorial03.txt:444
# 3e00dd37167f4ade8724daecd4ac9772
msgid "Similarly, your root URLconf may define a ``handler500``, which points to a view to call in case of server errors. Server errors happen when you have runtime errors in view code."
msgstr ""

#: ../../intro/tutorial03.txt:448
# 0d576a7ba0514216b084a160df2924f8
msgid "Likewise, you should create a ``500.html`` template at the root of your template directory and add some content like \"Something went wrong\"."
msgstr ""

#: ../../intro/tutorial03.txt:452
# 609a706326c84467b82a039d1200114e
msgid "Use the template system"
msgstr ""

#: ../../intro/tutorial03.txt:454
# 3f11462c65104915bb403155b77df0cc
msgid "Back to the ``detail()`` view for our poll application. Given the context variable ``poll``, here's what the ``polls/detail.html`` template might look like:"
msgstr ""

#: ../../intro/tutorial03.txt:467
# ecb4db1fb2cd446e89f6fb5f0e07d232
msgid "The template system uses dot-lookup syntax to access variable attributes. In the example of ``{{ poll.question }}``, first Django does a dictionary lookup on the object ``poll``. Failing that, it tries an attribute lookup -- which works, in this case. If attribute lookup had failed, it would've tried a list-index lookup."
msgstr ""

#: ../../intro/tutorial03.txt:473
# 4e1567430fbb45b4a130853901fe1f86
msgid "Method-calling happens in the :ttag:`{% for %}<for>` loop: ``poll.choice_set.all`` is interpreted as the Python code ``poll.choice_set.all()``, which returns an iterable of ``Choice`` objects and is suitable for use in the :ttag:`{% for %}<for>` tag."
msgstr ""

#: ../../intro/tutorial03.txt:478
# b146a019a1d04c08bd2d2e271cee1ac4
msgid "See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

#: ../../intro/tutorial03.txt:481
# a7111d8068f44ef8bdef320f434bc21f
msgid "Removing hardcoded URLs in templates"
msgstr ""

#: ../../intro/tutorial03.txt:483
# 4f8f2c19b5744950a6ccafed608fbcbb
msgid "Remember, when we wrote the link to a poll in the ``polls/index.html`` template, the link was partially hardcoded like this:"
msgstr ""

#: ../../intro/tutorial03.txt:490
# 89bceecd357040b1ae84dce8515e80db
msgid "The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the :func:`~django.conf.urls.url` functions in the ``polls.urls`` module, you can remove a reliance on specific URL paths defined in your url configurations by using the ``{% url %}`` template tag:"
msgstr ""

#: ../../intro/tutorial03.txt:502
# 4b0a8bf6d85841dbad899c9e8545edcb
msgid "If ``{% url 'detail' poll.id %}`` (with quotes) doesn't work, but ``{% url detail poll.id %}`` (without quotes) does, that means you're using a version of Django < 1.5. In this case, add the following declaration at the top of your template:"
msgstr ""

#: ../../intro/tutorial03.txt:511
# 6b3fc59fe5e7483ebfab6b231835796b
msgid "The way this works is by looking up the URL definition as specified in the ``polls.urls`` module. You can see exactly where the URL name of 'detail' is defined below::"
msgstr ""

#: ../../intro/tutorial03.txt:520
# 3a77ab3010884024add8cfe753db291e
msgid "If you want to change the URL of the polls detail view to something else, perhaps to something like ``polls/specifics/12/`` instead of doing it in the template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

#: ../../intro/tutorial03.txt:530
# c5325c5b85c74ae7a480c3f44266165d
msgid "Namespacing URL names"
msgstr ""

#: ../../intro/tutorial03.txt:532
# c1f757dc710a478598bfd9434a5611f4
msgid "The tutorial project has just one app, ``polls``. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the ``polls`` app has a ``detail`` view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the ``{% url %}`` template tag?"
msgstr ""

#: ../../intro/tutorial03.txt:539
# ccac22bbcde74116a64dfa120f7a0159
msgid "The answer is to add namespaces to your root URLconf. In the ``mysite/urls.py`` file, go ahead and change it to include namespacing::"
msgstr ""

#: ../../intro/tutorial03.txt:552
# 0af127dce28942e2aefe937ace91053c
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

#: ../../intro/tutorial03.txt:558
# 33fb75954f1245ce9095ac8ae3433e27
msgid "to point at the namespaced detail view:"
msgstr ""

#: ../../intro/tutorial03.txt:564
# 498273714ba0431591465f1b43913151
msgid "When you're comfortable with writing views, read :doc:`part 4 of this tutorial </intro/tutorial04>` to learn about simple form processing and generic views."
msgstr ""

#: ../../intro/tutorial04.txt:3
# e560f2ce3890458586e686306b901980
msgid "Writing your first Django app, part 4"
msgstr ""

#: ../../intro/tutorial04.txt:5
# 5a106c3ddfc5484498ef7713e34faf91
msgid "This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. We're continuing the Web-poll application and will focus on simple form processing and cutting down our code."
msgstr ""

#: ../../intro/tutorial04.txt:10
# d8b9166c0349421dadc9f9652c5320bc
msgid "Write a simple form"
msgstr ""

#: ../../intro/tutorial04.txt:12
# ab5887f6ea3d4b3fb7f56d4431a50567
msgid "Let's update our poll detail template (\"polls/detail.html\") from the last tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

#: ../../intro/tutorial04.txt:30
# 7519a76915fd4e7cbd4517a5b1d4b875
msgid "A quick rundown:"
msgstr ""

#: ../../intro/tutorial04.txt:32
# d96e8782c6e541bf84b62b27e76a496c
msgid "The above template displays a radio button for each poll choice. The ``value`` of each radio button is the associated poll choice's ID. The ``name`` of each radio button is ``\"choice\"``. That means, when somebody selects one of the radio buttons and submits the form, it'll send the POST data ``choice=3``. This is HTML Forms 101."
msgstr ""

#: ../../intro/tutorial04.txt:38
# 83d31efe6a6246fd87b810232feffd7e
msgid "We set the form's ``action`` to ``{% url 'polls:vote' poll.id %}``, and we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method=\"get\"``) is very important, because the act of submitting this form will alter data server-side. Whenever you create a form that alters data server-side, use ``method=\"post\"``. This tip isn't specific to Django; it's just good Web development practice."
msgstr ""

#: ../../intro/tutorial04.txt:45
# 65fe696546d54905970d7f94ceccf27f
msgid "``forloop.counter`` indicates how many times the :ttag:`for` tag has gone through its loop"
msgstr ""

#: ../../intro/tutorial04.txt:48
# f3c4bd74d5e44b688f6a6f098671044c
msgid "Since we're creating a POST form (which can have the effect of modifying data), we need to worry about Cross Site Request Forgeries. Thankfully, you don't have to worry too hard, because Django comes with a very easy-to-use system for protecting against it. In short, all POST forms that are targeted at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` template tag."
msgstr ""

#: ../../intro/tutorial04.txt:55
# a250ce782b47488bad9bc57825dbdec5
msgid "Now, let's create a Django view that handles the submitted data and does something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we created a URLconf for the polls application that includes this line::"
msgstr ""

#: ../../intro/tutorial04.txt:61
# f56e83a4700e4d019871085110cc5e91
msgid "We also created a dummy implementation of the ``vote()`` function. Let's create a real version. Add the following to ``polls/views.py``::"
msgstr ""

#: ../../intro/tutorial04.txt:87
# c835061277254c8db7dc25cae2e5ca1c
msgid "This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

#: ../../intro/tutorial04.txt:89
# bd44f415007541d39e278bd3d26f2881
msgid ":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like object that lets you access submitted data by key name. In this case, ``request.POST['choice']`` returns the ID of the selected choice, as a string. :attr:`request.POST <django.http.HttpRequest.POST>` values are always strings."
msgstr ""

#: ../../intro/tutorial04.txt:95
# 34d616ccdc1945219dd3d36d728c8f06
msgid "Note that Django also provides :attr:`request.GET <django.http.HttpRequest.GET>` for accessing GET data in the same way -- but we're explicitly using :attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure that data is only altered via a POST call."
msgstr ""

#: ../../intro/tutorial04.txt:101
# 51f104e00b9d44779b04cb21ed92ff11
msgid "``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't provided in POST data. The above code checks for :exc:`KeyError` and redisplays the poll form with an error message if ``choice`` isn't given."
msgstr ""

#: ../../intro/tutorial04.txt:105
# b6df65e173e14a089aa28897ec7cfc99
msgid "After incrementing the choice count, the code returns an :class:`~django.http.HttpResponseRedirect` rather than a normal :class:`~django.http.HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case)."
msgstr ""

#: ../../intro/tutorial04.txt:112
# 2dd97e241dac4ab2901ee8246ee6c674
msgid "As the Python comment above points out, you should always return an :class:`~django.http.HttpResponseRedirect` after successfully dealing with POST data. This tip isn't specific to Django; it's just good Web development practice."
msgstr ""

#: ../../intro/tutorial04.txt:117
# c669fb522a534f4fb79f904d8ede7888
msgid "We are using the :func:`~django.core.urlresolvers.reverse` function in the :class:`~django.http.HttpResponseRedirect` constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers.reverse` call will return a string like ::"
msgstr ""

#: ../../intro/tutorial04.txt:128
# da8bc94177c149f6820d478d0c2422b8
msgid "... where the ``3`` is the value of ``p.id``. This redirected URL will then call the ``'results'`` view to display the final page."
msgstr ""

#: ../../intro/tutorial04.txt:131
# 25d5272d5f09441a9280d0291640ff2e
msgid "As mentioned in Tutorial 3, ``request`` is a :class:`~django.http.HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""

#: ../../intro/tutorial04.txt:135
# 812120f87ae94b1e8d5646ec626b3024
msgid "After somebody votes in a poll, the ``vote()`` view redirects to the results page for the poll. Let's write that view::"
msgstr ""

#: ../../intro/tutorial04.txt:142
# 3037ee68c0a8459ea76e7c951d3ddcf7
msgid "This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial 3 </intro/tutorial03>`. The only difference is the template name. We'll fix this redundancy later."
msgstr ""

#: ../../intro/tutorial04.txt:146
# 0dd9239868184ec4b8fee7049a8783e8
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

#: ../../intro/tutorial04.txt:160
# 02503a57e924410c8d3e2a946859d4fe
msgid "Now, go to ``/polls/1/`` in your browser and vote in the poll. You should see a results page that gets updated each time you vote. If you submit the form without having chosen a choice, you should see the error message."
msgstr ""

#: ../../intro/tutorial04.txt:165
# 72c2849b735642b9a893ee8df79ff961
msgid "Use generic views: Less code is better"
msgstr ""

#: ../../intro/tutorial04.txt:167
# c235e9fb26cd4fbfb9d6d3a190ed35e7
msgid "The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and ``results()`` views are stupidly simple -- and, as mentioned above, redundant. The ``index()`` view (also from Tutorial 3), which displays a list of polls, is similar."
msgstr ""

#: ../../intro/tutorial04.txt:171
# ab5006d1af084670bb8a768b95af7ab3
msgid "These views represent a common case of basic Web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the \"generic views\" system."
msgstr ""

#: ../../intro/tutorial04.txt:176
# 5232d953077045f985d99a78d89d671c
msgid "Generic views abstract common patterns to the point where you don't even need to write Python code to write an app."
msgstr ""

#: ../../intro/tutorial04.txt:179
# 1ca8b2f8a7f14bb0bb69120aaf2ea92f
msgid "Let's convert our poll app to use the generic views system, so we can delete a bunch of our own code. We'll just have to take a few steps to make the conversion. We will:"
msgstr ""

#: ../../intro/tutorial04.txt:183
# a2683d809ed44ba88091ccf82c647caf
msgid "Convert the URLconf."
msgstr ""

#: ../../intro/tutorial04.txt:185
# 6568e4ee4c0c48ba9038063667751186
msgid "Delete some of the old, unneeded views."
msgstr ""

#: ../../intro/tutorial04.txt:187
# 3ac5df70355e4cc5b9a3e1b09575ea74
msgid "Fix up URL handling for the new views."
msgstr ""

#: ../../intro/tutorial04.txt:189
# 24df1b5da16740d0b6b80e0e00e5451f
msgid "Read on for details."
msgstr ""

#: ../../intro/tutorial04.txt:193
# eb30626d591f46f3bc26a149c44d2609
msgid "Generally, when writing a Django app, you'll evaluate whether generic views are a good fit for your problem, and you'll use them from the beginning, rather than refactoring your code halfway through. But this tutorial intentionally has focused on writing the views \"the hard way\" until now, to focus on core concepts."
msgstr ""

#: ../../intro/tutorial04.txt:199
# 6afb93c47cc94a8cbcf00e861aa2b1c3
msgid "You should know basic math before you start using a calculator."
msgstr ""

#: ../../intro/tutorial04.txt:201
# 044b6de9205b4ad0a32bf0b0b076ee39
msgid "First, open the ``polls/urls.py`` URLconf and change it like so::"
msgstr ""

#: ../../intro/tutorial04.txt:227
# 73eb102aca714e0ab9839de00bbcb819
msgid "We're using two generic views here: :class:`~django.views.generic.list.ListView` and :class:`~django.views.generic.detail.DetailView`. Respectively, those two views abstract the concepts of \"display a list of objects\" and \"display a detail page for a particular type of object.\""
msgstr ""

#: ../../intro/tutorial04.txt:233
# fb8191997a38478e800e662f8007498e
msgid "Each generic view needs to know what model it will be acting upon. This is provided using the ``model`` parameter."
msgstr ""

#: ../../intro/tutorial04.txt:236
# 5817570404774aa78f5a0f1202407557
msgid "The :class:`~django.views.generic.list.DetailView` generic view expects the primary key value captured from the URL to be called ``\"pk\"``, so we've changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""

#: ../../intro/tutorial04.txt:241
# 24ddfebce8c2451797e67c1299e03cfc
msgid "By default, the :class:`~django.views.generic.list.DetailView` generic view uses a template called ``<app name>/<model name>_detail.html``. In our case, it'll use the template ``\"polls/poll_detail.html\"``. The ``template_name`` argument is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the ``template_name`` for the ``results`` list view -- this ensures that the results view and the detail view have a different appearance when rendered, even though they're both a :class:`~django.views.generic.list.DetailView` behind the scenes."
msgstr ""

#: ../../intro/tutorial04.txt:251
# 468c09f3e57e480190ea07738b773a64
msgid "Similarly, the :class:`~django.views.generic.list.ListView` generic view uses a default template called ``<app name>/<model name>_list.html``; we use ``template_name`` to tell :class:`~django.views.generic.list.ListView` to use our existing ``\"polls/index.html\"`` template."
msgstr ""

#: ../../intro/tutorial04.txt:257
# 512ac3b0edd543e884f08939f05fece9
msgid "In previous parts of the tutorial, the templates have been provided with a context that contains the ``poll`` and ``latest_poll_list`` context variables. For DetailView the ``poll`` variable is provided automatically -- since we're using a Django model (``Poll``), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is ``poll_list``. To override this we provide the ``context_object_name`` option, specifying that we want to use ``latest_poll_list`` instead. As an alternative approach, you could change your templates to match the new default context variables -- but it's a lot easier to just tell Django to use the variable you want."
msgstr ""

#: ../../intro/tutorial04.txt:269
# 884eed140eb54eba9cc96c58ce809aed
msgid "You can now delete the ``index()``, ``detail()`` and ``results()`` views from ``polls/views.py``. We don't need them anymore -- they have been replaced by generic views."
msgstr ""

#: ../../intro/tutorial04.txt:273
# 83bd7131862b4dbd9a50d377b61f5c10
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

#: ../../intro/tutorial04.txt:275
# 6de5119ca3604395aa4db68541700166
msgid "For full details on generic views, see the :doc:`generic views documentation </topics/class-based-views/index>`."
msgstr ""

#: ../../intro/tutorial04.txt:281
# 9fde32d039484539bce7f87431bb231c
msgid "The beginner tutorial ends here for the time being. In the meantime, you might want to check out some pointers on :doc:`where to go from here </intro/whatsnext>`."
msgstr ""

#: ../../intro/tutorial04.txt:285
# 0ec5fa34f5b24907ad5bc0bc0e6df9ef
msgid "If you are familiar with Python packaging and interested in learning how to turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How to write reusable apps</intro/reusable-apps>`."
msgstr ""

#: ../../intro/whatsnext.txt:3
# a88eb9dd016a46ebb8835976cde14395
msgid "What to read next"
msgstr ""

#: ../../intro/whatsnext.txt:5
# 60e09d1bd5174516b9958e55f19eda07
msgid "So you've read all the :doc:`introductory material </intro/index>` and have decided you'd like to keep using Django. We've only just scratched the surface with this intro (in fact, if you've read every single word you've still read less than 10% of the overall documentation)."
msgstr ""

#: ../../intro/whatsnext.txt:10
# d8cff24bd866492c9929fa42d0c1d6a8
msgid "So what's next?"
msgstr ""

#: ../../intro/whatsnext.txt:12
# 3d2fde14fbbe49d7b1445cc55ba47dc2
msgid "Well, we've always been big fans of learning by doing. At this point you should know enough to start a project of your own and start fooling around. As you need to learn new tricks, come back to the documentation."
msgstr ""

#: ../../intro/whatsnext.txt:16
# 0ed970799a724172973c048534c75802
msgid "We've put a lot of effort into making Django's documentation useful, easy to read and as complete as possible. The rest of this document explains more about how the documentation works so that you can get the most out of it."
msgstr ""

#: ../../intro/whatsnext.txt:20
# c00f3ba0b78242d38a77c1560a1b0adb
msgid "(Yes, this is documentation about documentation. Rest assured we have no plans to write a document about how to read the document about documentation.)"
msgstr ""

#: ../../intro/whatsnext.txt:24
# f2ba3663f56b4fd0b60f5f7fbe5e941b
msgid "Finding documentation"
msgstr ""

#: ../../intro/whatsnext.txt:26
# 60f9175af0544321802dc40a9caccf57
msgid "Django's got a *lot* of documentation -- almost 200,000 words -- so finding what you need can sometimes be tricky. A few good places to start are the :ref:`search` and the :ref:`genindex`."
msgstr ""

#: ../../intro/whatsnext.txt:30
# 482cb9125a3748f3854ca8a0c1af235c
msgid "Or you can just browse around!"
msgstr ""

#: ../../intro/whatsnext.txt:33
# aceef28ee68d4a749a48b9ba589af9bf
msgid "How the documentation is organized"
msgstr ""

#: ../../intro/whatsnext.txt:35
# e687c409a81b4bc59ac3a5bacae2c1ed
msgid "Django's main documentation is broken up into \"chunks\" designed to fill different needs:"
msgstr ""

#: ../../intro/whatsnext.txt:38
# 69f75636225f42a0b96726070e651fa7
msgid "The :doc:`introductory material </intro/index>` is designed for people new to Django -- or to Web development in general. It doesn't cover anything in depth, but instead gives a high-level overview of how developing in Django \"feels\"."
msgstr ""

#: ../../intro/whatsnext.txt:43
# 6b8e18c51524444f968347f52a3e5eb0
msgid "The :doc:`topic guides </topics/index>`, on the other hand, dive deep into individual parts of Django. There are complete guides to Django's :doc:`model system </topics/db/index>`, :doc:`template engine </topics/templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""

#: ../../intro/whatsnext.txt:49
# f8c94e8b147b4e9498ee3db1ba75ad90
msgid "This is probably where you'll want to spend most of your time; if you work your way through these guides you should come out knowing pretty much everything there is to know about Django."
msgstr ""

#: ../../intro/whatsnext.txt:53
# 41e1c5e1ca1a43768b09492ab0030a63
msgid "Web development is often broad, not deep -- problems span many domains. We've written a set of :doc:`how-to guides </howto/index>` that answer common \"How do I ...?\" questions. Here you'll find information about :doc:`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom template tags </howto/custom-template-tags>`, and more."
msgstr ""

#: ../../intro/whatsnext.txt:59
# b6c6659c8808404c8e94a02c5ba5f13f
msgid "Answers to really common questions can also be found in the :doc:`FAQ </faq/index>`."
msgstr ""

#: ../../intro/whatsnext.txt:62
# 8ebf8180b3bb4dbcb3507d0f67d892eb
msgid "The guides and how-to's don't cover every single class, function, and method available in Django -- that would be overwhelming when you're trying to learn. Instead, details about individual classes, functions, methods, and modules are kept in the :doc:`reference </ref/index>`. This is where you'll turn to find the details of a particular function or whathaveyou."
msgstr ""

#: ../../intro/whatsnext.txt:69
# a8538d08a1bb45f991e7a6842f762527
msgid "Finally, there's some \"specialized\" documentation not usually relevant to most developers. This includes the :doc:`release notes </releases/index>` and :doc:`internals documentation </internals/index>` for those who want to add code to Django itself, and a :doc:`few other things that simply don't fit elsewhere </misc/index>`."
msgstr ""

#: ../../intro/whatsnext.txt:77
# f7893718cc264a3db6b14558f70f2807
msgid "How documentation is updated"
msgstr ""

#: ../../intro/whatsnext.txt:79
# 470ec1347d044baea437eaf6dabce546
msgid "Just as the Django code base is developed and improved on a daily basis, our documentation is consistently improving. We improve documentation for several reasons:"
msgstr ""

#: ../../intro/whatsnext.txt:83
# a52bd693471b446c82e33dcdc26d616f
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

#: ../../intro/whatsnext.txt:85
# f2c2672d6508429bbcd06ea7cd8e818e
msgid "To add information and/or examples to existing sections that need to be expanded."
msgstr ""

#: ../../intro/whatsnext.txt:88
# 9cc900f3f096496d8ef48579cc4dc359
msgid "To document Django features that aren't yet documented. (The list of such features is shrinking but exists nonetheless.)"
msgstr ""

#: ../../intro/whatsnext.txt:91
# 75224f3a0c12426d80d07ad5bb7b020b
msgid "To add documentation for new features as new features get added, or as Django APIs or behaviors change."
msgstr ""

#: ../../intro/whatsnext.txt:94
# 66ebfb9e16ff453f98034bce6f3f41c1
msgid "Django's documentation is kept in the same source control system as its code. It lives in the `docs`_ directory of our Git repository. Each document online is a separate text file in the repository."
msgstr ""

#: ../../intro/whatsnext.txt:101
# cfe3cf26921a4bf288b99feae3d59127
msgid "Where to get it"
msgstr ""

#: ../../intro/whatsnext.txt:103
# 5f52e40df92f4e0c9aed74b755f7936c
msgid "You can read Django documentation in several ways. They are, in order of preference:"
msgstr ""

#: ../../intro/whatsnext.txt:107
# d2272a0a7ce04f5abbe9d1a7c4ce9f80
msgid "On the Web"
msgstr ""

#: ../../intro/whatsnext.txt:109
# 80c4d23e5b0c472081608b40e17c8ab0
msgid "The most recent version of the Django documentation lives at https://docs.djangoproject.com/en/dev/. These HTML pages are generated automatically from the text files in source control. That means they reflect the \"latest and greatest\" in Django -- they include the very latest corrections and additions, and they discuss the latest Django features, which may only be available to users of the Django development version. (See \"Differences between versions\" below.)"
msgstr ""

#: ../../intro/whatsnext.txt:117
# efdbe38891274e36a1a7d947d2690704
msgid "We encourage you to help improve the docs by submitting changes, corrections and suggestions in the `ticket system`_. The Django developers actively monitor the ticket system and use your feedback to improve the documentation for everybody."
msgstr ""

#: ../../intro/whatsnext.txt:121
# c2f2cde4fe7d43e98f179341a84fc001
msgid "Note, however, that tickets should explicitly relate to the documentation, rather than asking broad tech-support questions. If you need help with your particular Django setup, try the `django-users mailing list`_ or the `#django IRC channel`_ instead."
msgstr ""

#: ../../intro/whatsnext.txt:131
# 7d8fa15a997445e7ac559c4ccdde0966
msgid "In plain text"
msgstr ""

#: ../../intro/whatsnext.txt:133
# c4970c11d99344a5887eaf2eacc56915
msgid "For offline reading, or just for convenience, you can read the Django documentation in plain text."
msgstr ""

#: ../../intro/whatsnext.txt:136
# 7f1a6f3a13fb4dbc81a9c9fa88644919
msgid "If you're using an official release of Django, note that the zipped package (tarball) of the code includes a ``docs/`` directory, which contains all the documentation for that release."
msgstr ""

#: ../../intro/whatsnext.txt:140
# bd718930121c4046932cb71fca94a524
msgid "If you're using the development version of Django (aka \"trunk\"), note that the ``docs/`` directory contains all of the documentation. You can update your Git checkout to get the latest changes."
msgstr ""

#: ../../intro/whatsnext.txt:144
# ae4604f40c024d8d98be124f06daae2e
msgid "One low-tech way of taking advantage of the text documentation is by using the Unix ``grep`` utility to search for a phrase in all of the documentation. For example, this will show you each mention of the phrase \"max_length\" in any Django document:"
msgstr ""

#: ../../intro/whatsnext.txt:154
# 8a0cec37c780439fb4aee3330928218e
msgid "As HTML, locally"
msgstr ""

#: ../../intro/whatsnext.txt:156
# 96449b507bfe4f8a9b5643413d01c591
msgid "You can get a local copy of the HTML documentation following a few easy steps:"
msgstr ""

#: ../../intro/whatsnext.txt:158
# 65c032df985a4dad8c26f2306ee86bda
msgid "Django's documentation uses a system called Sphinx__ to convert from plain text to HTML. You'll need to install Sphinx by either downloading and installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

#: ../../intro/whatsnext.txt:166
# 13c0c58e9d654a3fb8af914e9a798e47
msgid "Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

#: ../../intro/whatsnext.txt:174
# fee975fdd7744ff0b9a1a96768926838
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

#: ../../intro/whatsnext.txt:176
# c05c2d735f7a4ede93cbf06f14b64b6b
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

#: ../../intro/whatsnext.txt:183
# 79a99ffc2f8345a0b81702abd9d3ad97
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

#: ../../intro/whatsnext.txt:187
# d411200baad749429dff4828e9d1463a
msgid "Generation of the Django documentation will work with Sphinx version 0.6 or newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

#: ../../intro/whatsnext.txt:196
# 9d9a06af60cf478784bfb96386ab4206
msgid "Differences between versions"
msgstr ""

#: ../../intro/whatsnext.txt:198
# e839cded8d38436b946131eafc58527d
msgid "As previously mentioned, the text documentation in our Git repository contains the \"latest and greatest\" changes and additions. These changes often include documentation of new features added in the Django development version -- the Git (\"trunk\") version of Django. For that reason, it's worth pointing out our policy on keeping straight the documentation for various versions of the framework."
msgstr ""

#: ../../intro/whatsnext.txt:205
# c9e5d8474e8b42c79f06693fb103df6a
msgid "We follow this policy:"
msgstr ""

#: ../../intro/whatsnext.txt:207
# f4ac29c9f9784fe4aa9ca068c09db8d1
msgid "The primary documentation on djangoproject.com is an HTML version of the latest docs in Git. These docs always correspond to the latest official Django release, plus whatever features we've added/changed in the framework *since* the latest release."
msgstr ""

#: ../../intro/whatsnext.txt:212
# 5dfaac1a549545b6a5387d18522f4ae9
msgid "As we add features to Django's development version, we try to update the documentation in the same Git commit transaction."
msgstr ""

#: ../../intro/whatsnext.txt:215
# 7cdce1065156481c98609d2bc2ae6c76
msgid "To distinguish feature changes/additions in the docs, we use the phrase: \"New in version X.Y\", being X.Y the next release version (hence, the one being developed)."
msgstr ""

#: ../../intro/whatsnext.txt:219
# 92b4952bb708458190b9c47437e05521
msgid "Documentation fixes and improvements may be backported to the last release branch, at the discretion of the committer, however, once a version of Django is :ref:`no longer supported<backwards-compatibility-policy>`, that version of the docs won't get any further updates."
msgstr ""

#: ../../intro/whatsnext.txt:224
# 7b1b3ba2b17d4a0987b52a03c0aaa6bb
msgid "The `main documentation Web page`_ includes links to documentation for all previous versions. Be sure you are using the version of the docs corresponding to the version of Django you are using!"
msgstr ""

