# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Django 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 12:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/auth.txt:3
# f16a61df7ed74a8db4912c075af30f2c
msgid "User authentication in Django"
msgstr ""

#: ../../topics/auth.txt:8
# af8664fe80dc4eb2b30fe68f15bd156a
msgid "Django comes with a user authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This document explains how things work."
msgstr ""

#: ../../topics/auth.txt:13
#: ../../topics/forms/index.txt:26
#: ../../topics/http/urls.txt:18
#: ../../topics/i18n/formatting.txt:8
#: ../../topics/i18n/index.txt:14
#: ../../topics/i18n/timezones.txt:12
#: ../../topics/i18n/translation.txt:8
# 61b26a94a0064a01b457599f13a3873d
# 2857dbf4cae94e4387ad15a0006226d8
# e995a6512aeb4c78b86800291d4ecd07
# 9a5621d7f3cd495ab6064236efc2173c
# 93d534fe01874238b953342c5fb1d06f
# 09ab83bbf2914aeba0ee2a44fb9101da
# f53e7ebd4f0e408396addd56a07a03e8
msgid "Overview"
msgstr ""

#: ../../topics/auth.txt:15
# 7501832d899e430e94f7dd7b2bf45ae9
msgid "The auth system consists of:"
msgstr ""

#: ../../topics/auth.txt:17
#: ../../topics/auth.txt:50
#: ../../topics/auth.txt:1680
# 657d736c48dd49c5a53ed6d54530c745
# 35e5522375c247a4b983b2d0cf0faf76
# 57e4d4a6184541cb87bf16dabe175c0a
msgid "Users"
msgstr ""

#: ../../topics/auth.txt:18
# 5ee21f66ff4a449bb640ef32a51bf94d
msgid "Permissions: Binary (yes/no) flags designating whether a user may perform a certain task."
msgstr ""

#: ../../topics/auth.txt:20
# 51938273dad2446d97d80021b45fb9b4
msgid "Groups: A generic way of applying labels and permissions to more than one user."
msgstr ""

#: ../../topics/auth.txt:24
# 2cd64fbd13204c64b25bd163d3af3a6a
msgid "Installation"
msgstr ""

#: ../../topics/auth.txt:26
# 0efeb1706c5d43c6ad21818cded56a1a
msgid "Authentication support is bundled as a Django application in ``django.contrib.auth``. To install it, do the following:"
msgstr ""

#: ../../topics/auth.txt:29
# 0def2d7fd55241d480b015037153bf09
msgid "Put ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in your :setting:`INSTALLED_APPS` setting. (The :class:`~django.contrib.auth.models.Permission` model in :mod:`django.contrib.auth` depends on :mod:`django.contrib.contenttypes`.)"
msgstr ""

#: ../../topics/auth.txt:33
# d75813d46c314c4cbb6db41e3694e5d4
msgid "Run the command ``manage.py syncdb``."
msgstr ""

#: ../../topics/auth.txt:35
# 1f196d4991484a10ae7619a597153ddc
msgid "Note that the default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in :setting:`INSTALLED_APPS` for convenience.  If your :setting:`INSTALLED_APPS` already contains these apps, feel free to run :djadmin:`manage.py syncdb <syncdb>` again; you can run that command as many times as you'd like, and each time it'll only install what's needed."
msgstr ""

#: ../../topics/auth.txt:43
# c579009f83d3479a8c444ff9facb483f
msgid "The :djadmin:`syncdb` command creates the necessary database tables, creates permission objects for all installed apps that need 'em, and prompts you to create a superuser account the first time you run it."
msgstr ""

#: ../../topics/auth.txt:47
# 7750261184e540548091e4ff3f87d424
msgid "Once you've taken those steps, that's it."
msgstr ""

#: ../../topics/auth.txt:55
#: ../../topics/auth.txt:1611
#: ../../topics/auth.txt:1767
# 6568f018e5f7477f87163e010cc7c0a5
# ed1169ccc9b747a7b25fbecc3a3bb5a7
# 60a05b35b782423c8e94cc0c03af8754
msgid "API reference"
msgstr ""

#: ../../topics/auth.txt:58
#: ../../topics/auth.txt:1618
#: ../../topics/auth.txt:1772
#: ../../topics/db/models.txt:83
# 4046409362234832b95ed872507426dc
# d6ce7f9f62654faf902184d1fc817945
# cbd2995fe8fb48a7bf4c8ce2d3394056
# 4e0e2756b34f4acbad4559f154e26398
msgid "Fields"
msgstr ""

#: ../../topics/auth.txt:62
# ea1c8f8a89a541758f04b452ea296347
msgid ":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

#: ../../topics/auth.txt:67
# b16c62b3b4c849bb832342f22a77bdfd
msgid "Required. 30 characters or fewer. Usernames may contain alphanumeric, ``_``, ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../topics/auth.txt:72
#: ../../topics/auth.txt:76
# 8ce0a321763c4d84856fecabd263b150
# 0917fd9aa6c34fdc8e65b5ebbbf524b9
msgid "Optional. 30 characters or fewer."
msgstr ""

#: ../../topics/auth.txt:80
# d3b530377ffe4160ac29c080865ae336
msgid "Optional. Email address."
msgstr ""

#: ../../topics/auth.txt:84
# 4c2234f6fd6340f79d4c8e20a19e64a3
msgid "Required. A hash of, and metadata about, the password. (Django doesn't store the raw password.) Raw passwords can be arbitrarily long and can contain any character. See the \"Passwords\" section below."
msgstr ""

#: ../../topics/auth.txt:90
# 5282f6b656dc44648fab57cf7ef31175
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

#: ../../topics/auth.txt:94
# 91bb7f850e284238bdf692f29c400d7c
msgid "Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to ``False`` instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won't break."
msgstr ""

#: ../../topics/auth.txt:99
# bfe19fe089564de29852b747e1a1f4d6
msgid "This doesn't necessarily control whether or not the user can log in. Authentication backends aren't required to check for the ``is_active`` flag, and the default backends do not. If you want to reject a login based on ``is_active`` being ``False``, it's up to you to check that in your own login view or a custom authentication backend. However, the :class:`~django.contrib.auth.forms.AuthenticationForm` used by the :func:`~django.contrib.auth.views.login` view (which is the default) *does* perform this check, as do the permission-checking methods such as :meth:`~models.User.has_perm` and the authentication in the Django admin. All of those functions/methods will return ``False`` for inactive users."
msgstr ""

#: ../../topics/auth.txt:113
# eafdb4a431934e738735360e84d8d0e4
msgid "Boolean. Designates that this user has all permissions without explicitly assigning them."
msgstr ""

#: ../../topics/auth.txt:118
# aebfa48c81e04f98b04bd64bed30c7a8
msgid "A datetime of the user's last login. Is set to the current date/time by default."
msgstr ""

#: ../../topics/auth.txt:123
# f6f50f63686f407d9e65b5e666d2c569
msgid "A datetime designating when the account was created. Is set to the current date/time by default when the account is created."
msgstr ""

#: ../../topics/auth.txt:127
#: ../../topics/auth.txt:1637
#: ../../topics/pagination.txt:171
#: ../../topics/pagination.txt:242
#: ../../topics/testing.txt:2200
# 41026caa81d7410c84dae04c87cbedc1
# a3ed34746a4c42ccaa4d51099b01e798
# 6a28b50a91884b5b8394c2d80fc9b81b
# b8d89aa8caf34be99e520e0eb9512759
# 7d98ef3c91d14adcbbf36a67813254b6
msgid "Methods"
msgstr ""

#: ../../topics/auth.txt:131
# b7c3f0a26ef34ff8ac8f24ae9926ceae
msgid ":class:`~django.contrib.auth.models.User` objects have two many-to-many fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth.models.User` objects can access their related objects in the same way as any other :doc:`Django model </topics/db/models>`:"
msgstr ""

#: ../../topics/auth.txt:148
# c144eaa042f141b1893b640ee8974eb8
msgid "In addition to those automatic API methods, :class:`~django.contrib.auth.models.User` objects have the following custom methods:"
msgstr ""

#: ../../topics/auth.txt:154
# c0d7e0f17e1f4b99978a0b309eff0976
msgid "Returns the username for the user. Since the User model can be swapped out, you should use  this method instead of referencing the username attribute directly."
msgstr ""

#: ../../topics/auth.txt:160
# 40d0d393989f4aba89b6ec65c40d755e
msgid "Always returns ``False``. This is a way of differentiating :class:`~django.contrib.auth.models.User` and :class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should prefer using :meth:`~django.contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

#: ../../topics/auth.txt:169
#: ../../topics/auth.txt:1955
# e907be264c56459a886746464c070b87
# 07584d8b80094270a1caf69bf7c61433
msgid "Always returns ``True``. This is a way to tell if the user has been authenticated. This does not imply any permissions, and doesn't check if the user is active - it only indicates that the user has provided a valid username and password."
msgstr ""

#: ../../topics/auth.txt:176
# 80cb5c7b783c46138c843557e865a505
msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

#: ../../topics/auth.txt:182
# 06b25f32121742b3b49a21f38111a5a6
msgid "Sets the user's password to the given raw string, taking care of the password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../topics/auth.txt:188
#: ../../topics/auth.txt:1968
# b664c66e375644eba545b04c34b97338
# 786318b465dd408b8214d42dab533c59
msgid "Returns ``True`` if the given raw string is the correct password for the user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

#: ../../topics/auth.txt:194
# a3722e0ba1bb4dc894451d024486133d
msgid "Marks the user as having no password set.  This isn't the same as having a blank string for a password. :meth:`~django.contrib.auth.models.User.check_password()` for this user will never return ``True``. Doesn't save the :class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../topics/auth.txt:200
#: ../../topics/auth.txt:1980
# 1242f729c4d241e9aaa6e453e0ec04a6
# ac2f6186a674477bb50ff56c9022e411
msgid "You may need this if authentication for your application takes place against an existing external source such as an LDAP directory."
msgstr ""

#: ../../topics/auth.txt:205
# 72bc6c2c7a744ad99c6f26dd076aad24
msgid "Returns ``False`` if :meth:`~django.contrib.auth.models.User.set_unusable_password()` has been called for this user."
msgstr ""

#: ../../topics/auth.txt:211
# 2afdf2d493eb4278b412a58ebdff35cb
msgid "Returns a set of permission strings that the user has, through his/her groups."
msgstr ""

#: ../../topics/auth.txt:214
# f1facab55e4d458fb53c97be6751bf94
msgid "If ``obj`` is passed in, only returns the group permissions for this specific object."
msgstr ""

#: ../../topics/auth.txt:219
# 7fcc763acdaa45cea3d24a959c8d70fe
msgid "Returns a set of permission strings that the user has, both through group and user permissions."
msgstr ""

#: ../../topics/auth.txt:222
# 35792ba501a34940a6f25b7a3749ce5f
msgid "If ``obj`` is passed in, only returns the permissions for this specific object."
msgstr ""

#: ../../topics/auth.txt:227
# b8c4bee801e14384873e7a140726dd44
msgid "Returns ``True`` if the user has the specified permission, where perm is in the format ``\"<app label>.<permission codename>\"``. (see `permissions`_ section below). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth.txt:232
# 4fac1797fb4140d18d8a7f1757193be0
msgid "If ``obj`` is passed in, this method won't check for a permission for the model, but for this specific object."
msgstr ""

#: ../../topics/auth.txt:237
# 4d9dfbdb5620408da8d2b26e32b42092
msgid "Returns ``True`` if the user has each of the specified permissions, where each perm is in the format ``\"<app label>.<permission codename>\"``. If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth.txt:242
# a0b3c22ff4734110a5b670206f9ac4b6
msgid "If ``obj`` is passed in, this method won't check for permissions for the model, but for the specific object."
msgstr ""

#: ../../topics/auth.txt:247
# 61bef28aa8c842cc87ea70466333be07
msgid "Returns ``True`` if the user has any permissions in the given package (the Django app label). If the user is inactive, this method will always return ``False``."
msgstr ""

#: ../../topics/auth.txt:253
# ae98721473594300ae4ee185d1a65541
msgid "Sends an email to the user. If :attr:`~django.contrib.auth.models.User.from_email` is ``None``, Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../topics/auth.txt:265
# 18e1d715231141c49d0b76d27369a93a
msgid "Returns a site-specific profile for this user. Raises :exc:`django.contrib.auth.models.SiteProfileNotAvailable` if the current site doesn't allow profiles, or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user does not have a profile. For information on how to define a site-specific user profile, see the section on `storing additional user information`_ below."
msgstr ""

#: ../../topics/auth.txt:275
# b6e3bf0908524842af352426ef983288
msgid "Manager functions"
msgstr ""

#: ../../topics/auth.txt:279
# 765cd89d38db4f04b3fa31ea9a36a9dc
msgid "The :class:`~django.contrib.auth.models.User` model has a custom manager that has the following helper functions:"
msgstr ""

#: ../../topics/auth.txt:289
# 0c6775857b994076936afa81b85614c2
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/auth.txt:291
# 8b29835315b84bdfba3d1c90e21ed99d
msgid "The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django.contrib.auth.models.User.password` are set as given. The domain portion of :attr:`~django.contrib.auth.models.User.email` is automatically converted to lowercase, and the returned :class:`~django.contrib.auth.models.User` object will have :attr:`~models.User.is_active` set to ``True``."
msgstr ""

#: ../../topics/auth.txt:298
# 2ea5b3823f5c4d1182202c35d9ed6719
msgid "If no password is provided, :meth:`~django.contrib.auth.models.User.set_unusable_password()` will be called."
msgstr ""

#: ../../topics/auth.txt:302
# 6f865fda21a14bd4a352017c80784845
msgid "See `Creating users`_ for example usage."
msgstr ""

#: ../../topics/auth.txt:306
#: ../../topics/auth.txt:2040
# 83602027fb044a1387cb4167603253f8
# 81297fd08bfe4493833a639826502a15
msgid "Returns a random password with the given length and given string of allowed characters. (Note that the default value of ``allowed_chars`` doesn't contain letters that can cause user confusion, including:"
msgstr ""

#: ../../topics/auth.txt:310
#: ../../topics/auth.txt:2044
# 0f1628ccb9514c14b937cc5f35b7f5a8
# 6d01944e19d84d87a6939aca52fe9233
msgid "``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, uppercase letter i, and the number one)"
msgstr ""

#: ../../topics/auth.txt:312
#: ../../topics/auth.txt:2046
# 6752fe44e1a54f7db3bb8cbf3ee9778a
# 00148dacc22147f4b960c4417679fb5e
msgid "``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""

#: ../../topics/auth.txt:316
#: ../../topics/cache.txt:685
# 26a8e2969da44026a1c743c7763767e6
# 8c3af1a7588344f2b2466e3152dd08ac
msgid "Basic usage"
msgstr ""

#: ../../topics/auth.txt:321
# 17662904882f4f83a4abd4fb0e85d612
msgid "Creating users"
msgstr ""

#: ../../topics/auth.txt:323
# 2e6b6bb68034414abba1290025acd04e
msgid "The most basic way to create users is to use the :meth:`~django.contrib.auth.models.UserManager.create_user` helper function that comes with Django::"
msgstr ""

#: ../../topics/auth.txt:336
# af0627947aef42ac8c4e1aeb11a2c403
msgid "You can also create users using the Django admin site. Assuming you've enabled the admin site and hooked it to the URL ``/admin/``, the \"Add user\" page is at ``/admin/auth/user/add/``. You should also see a link to \"Users\" in the \"Auth\" section of the main admin index page. The \"Add user\" admin page is different than standard admin pages in that it requires you to choose a username and password before allowing you to edit the rest of the user's fields."
msgstr ""

#: ../../topics/auth.txt:343
# 09290f15d0c44bf8bcf436ab5e4b406f
msgid "Also note: if you want your own user account to be able to create users using the Django admin site, you'll need to give yourself permission to add users *and* change users (i.e., the \"Add user\" and \"Change user\" permissions). If your account has permission to add users but not to change them, you won't be able to add users. Why? Because if you have permission to add users, you have the power to create superusers, which can then, in turn, change other users. So Django requires add *and* change permissions as a slight security measure."
msgstr ""

#: ../../topics/auth.txt:352
# 857951667ad44d41b219c0a1d719e3b1
msgid "Changing passwords"
msgstr ""

#: ../../topics/auth.txt:354
# 0171f77ee00f418da82a092cbfa13fec
msgid ":djadmin:`manage.py changepassword *username* <changepassword>` offers a method of changing a User's password from the command line. It prompts you to change the password of a given user which you must enter twice. If they both match, the new password will be changed immediately. If you do not supply a user, the command will attempt to change the password whose username matches the current user."
msgstr ""

#: ../../topics/auth.txt:361
# 4bff3a47060e4178abbf29d3726482bb
msgid "You can also change a password programmatically, using :meth:`~django.contrib.auth.models.User.set_password()`:"
msgstr ""

#: ../../topics/auth.txt:371
# 49e8fdc0455043229a0f878fed6780b0
msgid "Don't set the :attr:`~django.contrib.auth.models.User.password` attribute directly unless you know what you're doing. This is explained in the next section."
msgstr ""

#: ../../topics/auth.txt:378
# 9c24703a1e6a47a7abdc49f50963ea3e
msgid "How Django stores passwords"
msgstr ""

#: ../../topics/auth.txt:385
# 3dac7aa8d5eb4628bc6a6a76704964a3
msgid "The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

#: ../../topics/auth.txt:390
# c1d162e2f84941df8d8cb99ef40687c3
msgid "That's a storage algorithm, and hash, separated by the dollar-sign character. The algorithm is one of a number of one way hashing or password storage algorithms Django can use; see below. The hash is the result of the one- way function."
msgstr ""

#: ../../topics/auth.txt:395
# aef83cdcbc6147839b353e18134040f0
msgid "By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password stretching mechanism recommended by NIST_. This should be sufficient for most users: it's quite secure, requiring massive amounts of computing time to break."
msgstr ""

#: ../../topics/auth.txt:400
# 778c725e90f4476c9673c15b93674c42
msgid "However, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn't need to do this -- if you're not sure, you probably don't.  If you do, please read on:"
msgstr ""

#: ../../topics/auth.txt:405
# 0ffecd12bd8c42d88bc165e1d66199d6
msgid "Django chooses the an algorithm by consulting the :setting:`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that this Django installation supports. The first entry in this list (that is, ``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all the other entries are valid hashers that can be used to check existing passwords. This means that if you want to use a different algorithm, you'll need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm first in the list."
msgstr ""

#: ../../topics/auth.txt:413
# f0d5771bf1f845b0a8c7b30e4f2cfcfb
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

#: ../../topics/auth.txt:424
# ec052b89e7ab4e71b876a818cbed0f1b
msgid "This means that Django will use PBKDF2_ to store all passwords, but will support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The next few sections describe a couple of common ways advanced users may want to modify this setting."
msgstr ""

#: ../../topics/auth.txt:432
# d42410f8324348e7a9625a10b4ebbcf6
msgid "Using bcrypt with Django"
msgstr ""

#: ../../topics/auth.txt:434
# 3204f80d65bb473f829c1e6795b19863
msgid "Bcrypt_ is a popular password storage algorithm that's specifically designed for long-term password storage. It's not the default used by Django since it requires the use of third-party libraries, but since many people may want to use it Django supports bcrypt with minimal effort."
msgstr ""

#: ../../topics/auth.txt:439
# 220573d257154cedae1fb376f77a14eb
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

#: ../../topics/auth.txt:441
# 7986b847d5584acc96bf7c0f4172fc39
msgid "Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-bcrypt``, or downloading the library and installing it with ``python setup.py install``)."
msgstr ""

#: ../../topics/auth.txt:445
# c8f98a3b023d4cdc9fa5f6006e6dd675
msgid "Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. That is, in your settings file, you'd put::"
msgstr ""

#: ../../topics/auth.txt:457
# dabed9a8ea7d4eb0af29aff3b3f9acc4
msgid "(You need to keep the other entries in this list, or else Django won't be able to upgrade passwords; see below)."
msgstr ""

#: ../../topics/auth.txt:460
# 0052e146ef5c4a1ca0dbaf254241b406
msgid "That's it -- now your Django install will use Bcrypt as the default storage algorithm."
msgstr ""

#: ../../topics/auth.txt:465
# e7cfe3312daf4914b016b73f9bd2d347
msgid "There are several other implementations that allow bcrypt to be used with Django. Django's bcrypt support is NOT directly compatible with these. To upgrade, you will need to modify the hashes in your database to be in the form `bcrypt$(raw bcrypt output)`. For example: `bcrypt$$2a$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy`."
msgstr ""

#: ../../topics/auth.txt:473
# 70c0e6998a5446e9970995a909618bdd
msgid "Increasing the work factor"
msgstr ""

#: ../../topics/auth.txt:475
# eb04cbdec18e47a187f50739f9d145d7
msgid "The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of hashing. This deliberately slows down attackers, making attacks against hashed passwords harder. However, as computing power increases, the number of iterations needs to be increased. We've chosen a reasonable default (and will increase it with each release of Django), but you may wish to tune it up or down, depending on your security needs and available processing power. To do so, you'll subclass the appropriate algorithm and override the ``iterations`` parameters. For example, to increase the number of iterations used by the default PBKDF2 algorithm:"
msgstr ""

#: ../../topics/auth.txt:485
# ac99c8599efe45ac917319c405347664
msgid "Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

#: ../../topics/auth.txt:495
# 44efabbaa0ba48fa9009bd4b0710653a
msgid "Save this somewhere in your project. For example, you might put this in a file like ``myproject/hashers.py``."
msgstr ""

#: ../../topics/auth.txt:498
# 535b6c8bb1ba4245b9847b3e1beb53b1
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

#: ../../topics/auth.txt:511
# 74b50f3b36444307a773c92ad57d2104
msgid "That's it -- now your Django install will use more iterations when it stores passwords using PBKDF2."
msgstr ""

#: ../../topics/auth.txt:515
# 2b0787527bd243be94a7f3ac7022ae50
msgid "Password upgrading"
msgstr ""

#: ../../topics/auth.txt:517
# 9aad0d5d03e84c19975df19f38c3707f
msgid "When users log in, if their passwords are stored with anything other than the preferred algorithm, Django will automatically upgrade the algorithm to the preferred one. This means that old installs of Django will get automatically more secure as users log in, and it also means that you can switch to new (and better) storage algorithms as they get invented."
msgstr ""

#: ../../topics/auth.txt:523
# fd127f734ff04757a99bbc28f6b2c449
msgid "However, Django can only upgrade passwords that use algorithms mentioned in :setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make sure never to *remove* entries from this list. If you do, users using un- mentioned algorithms won't be able to upgrade."
msgstr ""

#: ../../topics/auth.txt:535
# 2d2c74850e744ec9b42ac0c44cf7b88f
msgid "Anonymous users"
msgstr ""

#: ../../topics/auth.txt:539
# c5e47f1cb12e41f592b2e34413b4d8d5
msgid ":class:`django.contrib.auth.models.AnonymousUser` is a class that implements the :class:`django.contrib.auth.models.User` interface, with these differences:"
msgstr ""

#: ../../topics/auth.txt:543
# 583d997107bf44579bb5cb33123db555
msgid ":attr:`~django.contrib.auth.models.User.id` is always ``None``."
msgstr ""

#: ../../topics/auth.txt:544
# a2f57a4a87e94b69aadf217796dc418e
msgid ":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib.auth.models.User.is_superuser` are always ``False``."
msgstr ""

#: ../../topics/auth.txt:547
# 513fd9c4ae8c4584842f8cec121ff65a
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

#: ../../topics/auth.txt:548
# 6d042af634564d5897ca847d2f95ff5f
msgid ":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib.auth.models.User.user_permissions` are always empty."
msgstr ""

#: ../../topics/auth.txt:551
# e9d6db2ef7aa4382a988257e01046267
msgid ":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` instead of ``False``."
msgstr ""

#: ../../topics/auth.txt:553
# fa2cc75f7a3743488023fda42fa1976d
msgid ":meth:`~django.contrib.auth.models.User.is_authenticated()` returns ``False`` instead of ``True``."
msgstr ""

#: ../../topics/auth.txt:555
# ea24e184b61f49aab312a3534a012eba
msgid ":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django.contrib.auth.models.User.check_password()`, :meth:`~django.contrib.auth.models.User.save()`, :meth:`~django.contrib.auth.models.User.delete()`, :meth:`~django.contrib.auth.models.User.set_groups()` and :meth:`~django.contrib.auth.models.User.set_permissions()` raise :exc:`NotImplementedError`."
msgstr ""

#: ../../topics/auth.txt:563
# 20857b0a9a3545e4a23a8d320e743668
msgid "In practice, you probably won't need to use :class:`~django.contrib.auth.models.AnonymousUser` objects on your own, but they're used by Web requests, as explained in the next section."
msgstr ""

#: ../../topics/auth.txt:570
# da7b5bb046544f1ab55949e72079c3de
msgid "Creating superusers"
msgstr ""

#: ../../topics/auth.txt:572
# d20b408827f347dcb3731fa11f018f1b
msgid ":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the first time you run it after adding ``'django.contrib.auth'`` to your :setting:`INSTALLED_APPS`. If you need to create a superuser at a later date, you can use a command line utility::"
msgstr ""

#: ../../topics/auth.txt:579
# 82cb459717414e68bbd59af6c39ea820
msgid "You will be prompted for a password. After you enter one, the user will be created immediately. If you leave off the :djadminopt:`--username` or the :djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

#: ../../topics/auth.txt:583
# bd46e3cf8b444765b8d0937f8380e970
msgid "If you're using an older release of Django, the old way of creating a superuser on the command line still works::"
msgstr ""

#: ../../topics/auth.txt:588
# 1ae65bf060024528b396b2d85ea41b93
msgid "...where :file:`/path/to` is the path to the Django codebase on your filesystem. The ``manage.py`` command is preferred because it figures out the correct path and environment for you."
msgstr ""

#: ../../topics/auth.txt:595
# c1719730a8e1416788d8144e157c760f
msgid "Storing additional information about users"
msgstr ""

#: ../../topics/auth.txt:603
# 38e546cee86540e88097678cf39cc062
msgid "If you'd like to store additional information related to your users, Django provides a method to specify a site-specific related model -- termed a \"user profile\" -- for this purpose."
msgstr ""

#: ../../topics/auth.txt:607
# 3b9a03ec88f745fd9e6e4a5116115064
msgid "To make use of this feature, define a model with fields for the additional information you'd like to store, or additional methods you'd like to have available, and also add a :class:`~django.db.models.Field.OneToOneField` named ``user`` from your model to the :class:`~django.contrib.auth.models.User` model. This will ensure only one instance of your model can be created for each :class:`~django.contrib.auth.models.User`. For example::"
msgstr ""

#: ../../topics/auth.txt:626
# 657521942e06473783d048c6ea58d22e
msgid "To indicate that this model is the user profile model for a given site, fill in the setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of the following items, separated by a dot:"
msgstr ""

#: ../../topics/auth.txt:630
# bdc0e849d7c1431cb383389f6346b454
msgid "The name of the application (case sensitive) in which the user profile model is defined (in other words, the name which was passed to :djadmin:`manage.py startapp <startapp>` to create the application)."
msgstr ""

#: ../../topics/auth.txt:635
# 482568d7e31e43eaaa49f8e40b49f24d
msgid "The name of the model (not case sensitive) class."
msgstr ""

#: ../../topics/auth.txt:637
# 3528512ec4f94f37b5cebda29146a02e
msgid "For example, if the profile model was a class named ``UserProfile`` and was defined inside an application named ``accounts``, the appropriate setting would be::"
msgstr ""

#: ../../topics/auth.txt:643
# 84c6cbe612a44a3a9f655e324b636ca1
msgid "When a user profile model has been defined and specified in this manner, each :class:`~django.contrib.auth.models.User` object will have a method -- :class:`~django.contrib.auth.models.User.get_profile()` -- which returns the instance of the user profile model associated with that :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/auth.txt:649
# 4448ec76865e4d8ea56d433ce3c051f3
msgid "The method :class:`~django.contrib.auth.models.User.get_profile()` does not create a profile if one does not exist. You need to register a handler for the User model's :attr:`django.db.models.signals.post_save` signal and, in the handler, if ``created`` is ``True``, create the associated user profile::"
msgstr ""

#: ../../topics/auth.txt:672
# f26168dea178457e9e58cfdea71b128e
msgid "Adding UserProfile fields to the admin"
msgstr ""

#: ../../topics/auth.txt:674
# e3faaaceb8e2422ea3370b859c90be80
msgid "To add the UserProfile fields to the user page in the admin, define an :class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` and add it to a ``UserAdmin`` class which is registered with the :class:`~django.contrib.auth.models.User` class::"
msgstr ""

#: ../../topics/auth.txt:702
# 48870f1a562642aa8214ea1cba609b90
msgid "Authentication in Web requests"
msgstr ""

#: ../../topics/auth.txt:704
# acb2008a9ac646df9655b30b6b8a4f29
msgid "Until now, this document has dealt with the low-level APIs for manipulating authentication-related objects. On a higher level, Django can hook this authentication framework into its system of :class:`request objects <django.http.HttpRequest>`."
msgstr ""

#: ../../topics/auth.txt:709
# 89ee2fb6a6104396a41b3de7a0f1f423
msgid "First, install the :class:`~django.contrib.sessions.middleware.SessionMiddleware` and :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` middlewares by adding them to your :setting:`MIDDLEWARE_CLASSES` setting. See the :doc:`session documentation </topics/http/sessions>` for more information."
msgstr ""

#: ../../topics/auth.txt:715
# f5f49fba81954b3fa3a49c14275bcdc7
msgid "Once you have those middlewares installed, you'll be able to access :attr:`request.user <django.http.HttpRequest.user>` in views. :attr:`request.user <django.http.HttpRequest.user>` will give you a :class:`~django.contrib.auth.models.User` object representing the currently logged-in user. If a user isn't currently logged in, :attr:`request.user <django.http.HttpRequest.user>` will be set to an instance of :class:`~django.contrib.auth.models.AnonymousUser` (see the previous section). You can tell them apart with :meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

#: ../../topics/auth.txt:733
# 8a86755052e64d7cb2c56e61d08af86b
msgid "How to log a user in"
msgstr ""

#: ../../topics/auth.txt:735
# 3647f79a354e426a9dbe5a176725eda3
msgid "Django provides two functions in :mod:`django.contrib.auth`: :func:`~django.contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`."
msgstr ""

#: ../../topics/auth.txt:741
# 752ac6ecddf94532b10727c24e5b3918
msgid "To authenticate a given username and password, use :func:`~django.contrib.auth.authenticate()`. It takes two keyword arguments, ``username`` and ``password``, and it returns a :class:`~django.contrib.auth.models.User` object if the password is valid for the given username. If the password is invalid, :func:`~django.contrib.auth.authenticate()` returns ``None``. Example::"
msgstr ""

#: ../../topics/auth.txt:760
# 3a06d7f7d7a041538e80f68237937e6f
msgid "To log a user in, in a view, use :func:`~django.contrib.auth.login()`. It takes an :class:`~django.http.HttpRequest` object and a :class:`~django.contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves the user's ID in the session, using Django's session framework, so, as mentioned above, you'll need to make sure to have the session middleware installed."
msgstr ""

#: ../../topics/auth.txt:767
# 0e081f59e94d4564921f80d5a002e78b
msgid "Note that data set during the anonymous session is retained when the user logs in."
msgstr ""

#: ../../topics/auth.txt:770
# 0b2849c8bf5e4f65bef2499d2504d315
msgid "This example shows how you might use both :func:`~django.contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

#: ../../topics/auth.txt:791
# 7c8ee93accd545b7955f58ff88053155
msgid "When you're manually logging a user in, you *must* call :func:`~django.contrib.auth.authenticate()` before you call :func:`~django.contrib.auth.login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on the :class:`~django.contrib.auth.models.User` noting which authentication backend successfully authenticated that user (see the `backends documentation`_ for details), and this information is needed later during the login process."
msgstr ""

#: ../../topics/auth.txt:803
# b492392b0a5941aabd601ccba654bbb5
msgid "Manually managing a user's password"
msgstr ""

#: ../../topics/auth.txt:816
# 9db95de6a0ae44b7918966487b6f0064
msgid "If you'd like to manually authenticate a user by comparing a plain-text password to the hashed password in the database, use the convenience function :func:`django.contrib.auth.hashers.check_password`. It takes two arguments: the plain-text password to check, and the full value of a user's ``password`` field in the database to check against, and returns ``True`` if they match, ``False`` otherwise."
msgstr ""

#: ../../topics/auth.txt:827
# 47c7155abb794fce86a362b66dd745fd
msgid "Creates a hashed password in the format used by this application. It takes one mandatory argument: the password in plain-text. Optionally, you can provide a salt and a hashing algorithm to use, if you don't want to use the defaults (first entry of ``PASSWORD_HASHERS`` setting). Currently supported algorithms are: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt'`` (see :ref:`bcrypt_usage`), ``'sha1'``, ``'md5'``, ``'unsalted_md5'`` (only for backward compatibility) and ``'crypt'`` if you have the ``crypt`` library installed. If the password argument is ``None``, an unusable password is returned (a one that will be never accepted by :func:`django.contrib.auth.hashers.check_password`)."
msgstr ""

#: ../../topics/auth.txt:842
# 676b182e077749658bd6fc64763c1ba4
msgid "Checks if the given string is a hashed password that has a chance of being verified against :func:`django.contrib.auth.hashers.check_password`."
msgstr ""

#: ../../topics/auth.txt:847
# 2bfbaa7ab6fd4672b04fbbed8f1d18af
msgid "How to log a user out"
msgstr ""

#: ../../topics/auth.txt:853
# 5573d986824041ffb833b2e086f00d2b
msgid "To log out a user who has been logged in via :func:`django.contrib.auth.login()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

#: ../../topics/auth.txt:865
# c3d7211a5cca411b8a81b88b30dabeb4
msgid "Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if the user wasn't logged in."
msgstr ""

#: ../../topics/auth.txt:868
# b747b76d8cdb4da795fa07bbb1944354
msgid "When you call :func:`~django.contrib.auth.logout()`, the session data for the current request is completely cleaned out. All existing data is removed. This is to prevent another person from using the same Web browser to log in and have access to the previous user's session data. If you want to put anything into the session that will be available to the user immediately after logging out, do that *after* calling :func:`django.contrib.auth.logout()`."
msgstr ""

#: ../../topics/auth.txt:879
# c05396ade08144f3b9e8ec451fcae8ff
msgid "Login and logout signals"
msgstr ""

#: ../../topics/auth.txt:881
# 29c2ff903a254b9c99039ac7ba455aca
msgid "The auth framework uses two :doc:`signals </topics/signals>` that can be used for notification when a user logs in or out."
msgstr ""

#: ../../topics/auth.txt:887
# b843a8277789434caa700c570d70ae0c
msgid "Sent when a user logs in successfully."
msgstr ""

#: ../../topics/auth.txt:889
# 988bb6e447914d0bbcd147a180b98ac3
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../topics/auth.txt:892
# 1e44cf73ebe948e9af1c3894d53a19b0
msgid "The class of the user that just logged in."
msgstr ""

#: ../../topics/auth.txt:895
#: ../../topics/auth.txt:910
# 791fc61e7e1a440eae7d5dab34a9d6d7
# 0b764de4d2b244d0ab1d6a80d19bbb0e
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../topics/auth.txt:898
# f6ad03d628404acca410c5035af66aac
msgid "The user instance that just logged in."
msgstr ""

#: ../../topics/auth.txt:903
# af7bac5645134c00b32f1baecca56e3d
msgid "Sent when the logout method is called."
msgstr ""

#: ../../topics/auth.txt:906
# 1572d83572ba4ac7b82666ed9549c16f
msgid "As above: the class of the user that just logged out or ``None`` if the user was not authenticated."
msgstr ""

#: ../../topics/auth.txt:913
# ca2174d70f0040318a342122691114af
msgid "The user instance that just logged out or ``None`` if the user was not authenticated."
msgstr ""

#: ../../topics/auth.txt:920
# cd124d5a97b5499ba819ae3c3861eee6
msgid "Sent when the user failed to login successfully"
msgstr ""

#: ../../topics/auth.txt:923
# a291c26a792342b0a05e45f3513f059e
msgid "The name of the module used for authentication."
msgstr ""

#: ../../topics/auth.txt:926
# 0bc0e971df024f12b569f2478d0e42d2
msgid "A dictonary of keyword arguments containing the user credentials that were passed to :func:`~django.contrib.auth.authenticate()` or your own custom authentication backend. Credentials matching a set of 'sensitive' patterns, (including password) will not be sent in the clear as part of the signal."
msgstr ""

#: ../../topics/auth.txt:932
# 8987a05a167f476ab624a3359cd757bc
msgid "Limiting access to logged-in users"
msgstr ""

#: ../../topics/auth.txt:935
# 828cf65e58de4482b72b9612e6a05194
msgid "The raw way"
msgstr ""

#: ../../topics/auth.txt:937
# faf5beccbc824073b73370f673c5f493
msgid "The simple, raw way to limit access to pages is to check :meth:`request.user.is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and either redirect to a login page::"
msgstr ""

#: ../../topics/auth.txt:949
# 4d1e49d5d09a4909bd86c3e3fac0db2d
msgid "...or display an error message::"
msgstr ""

#: ../../topics/auth.txt:957
# 0fd4f71b0cb54b898dfa3edf5b8c832b
msgid "The login_required decorator"
msgstr ""

#: ../../topics/auth.txt:961
# 1d996fbf23fb4c489f3c1d3248bb2e5c
msgid "As a shortcut, you can use the convenient :func:`~django.contrib.auth.decorators.login_required` decorator::"
msgstr ""

#: ../../topics/auth.txt:970
# 52959adbe2944b9b89cfb0fed75d8a57
msgid ":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

#: ../../topics/auth.txt:972
# faf334c4338e4bbdacb46f0d821cee6e
msgid "If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL <LOGIN_URL>`, passing the current absolute path in the query string. Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

#: ../../topics/auth.txt:976
# 7d6caf0cf8c343138773668ef7b7db61
msgid "If the user is logged in, execute the view normally. The view code is free to assume the user is logged in."
msgstr ""

#: ../../topics/auth.txt:979
# 46b5e2b9ee184b7c8f4d5f142d74639f
msgid "By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called ``\"next\"``. If you would prefer to use a different name for this parameter, :func:`~django.contrib.auth.decorators.login_required` takes an optional ``redirect_field_name`` parameter::"
msgstr ""

#: ../../topics/auth.txt:991
# 99a1945cc52040e3872442669f5ec12b
msgid "Note that if you provide a value to ``redirect_field_name``, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of ``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

#: ../../topics/auth.txt:996
# eacc0e5c6566478aa00ad32098c59cdb
msgid ":func:`~django.contrib.auth.decorators.login_required` also takes an optional ``login_url`` parameter. Example::"
msgstr ""

#: ../../topics/auth.txt:1005
# 493bf146348c4a6ba458ed3085e86df6
msgid "Note that if you don't specify the ``login_url`` parameter, you'll need to map the appropriate Django view to :setting:`settings.LOGIN_URL <LOGIN_URL>`. For example, using the defaults, add the following line to your URLconf::"
msgstr ""

#: ../../topics/auth.txt:1013
# 5519a2e894754073a24a3bbffdf932ce
msgid "As of version 1.5 :setting:`settings.LOGIN_URL <LOGIN_URL>` now also accepts view function names and :ref:`named URL patterns <naming-url-patterns>`. This allows you to freely remap your login view within your URLconf without having to update the setting."
msgstr ""

#: ../../topics/auth.txt:1020
# ccee04759da543c59f39d59d4cd3951a
msgid "**URL name:** ``login``"
msgstr ""

#: ../../topics/auth.txt:1022
#: ../../topics/auth.txt:1139
# 0258a5de076a457f849f531d05954435
# 7a3dd76375534a58aef9f1a6fd2d500c
msgid "See :doc:`the URL documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""

#: ../../topics/auth.txt:1025
# b5095214e3334cacaf5fbd8e4bc655cb
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

#: ../../topics/auth.txt:1027
# a2bc87a66ddd459a8a71c84a98dbb0dd
msgid "If called via ``GET``, it displays a login form that POSTs to the same URL. More on this in a bit."
msgstr ""

#: ../../topics/auth.txt:1030
# 28aa909390a249f6bc372eaba20a3b51
msgid "If called via ``POST``, it tries to log the user in. If login is successful, the view redirects to the URL specified in ``next``. If ``next`` isn't provided, it redirects to :setting:`settings.LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/profile/``). If login isn't successful, it redisplays the login form."
msgstr ""

#: ../../topics/auth.txt:1037
# 7bd1022384ee483896d4038d2b01d783
msgid "It's your responsibility to provide the login form in a template called ``registration/login.html`` by default. This template gets passed four template context variables:"
msgstr ""

#: ../../topics/auth.txt:1041
# 7ba5302ec805461e899d4e20c425adbb
msgid "``form``: A :class:`~django.forms.Form` object representing the login form. See the :doc:`forms documentation </topics/forms/index>` for more on ``Form`` objects."
msgstr ""

#: ../../topics/auth.txt:1045
# c0231aafa86d4cd587e7ee1d426b0bb6
msgid "``next``: The URL to redirect to after successful login. This may contain a query string, too."
msgstr ""

#: ../../topics/auth.txt:1048
#: ../../topics/auth.txt:1158
# 6a676e2ce3d148d4a6801cd67dd68c21
# 6b08a0f7440447269666b57c1c8c0565
msgid "``site``: The current :class:`~django.contrib.sites.models.Site`, according to the :setting:`SITE_ID` setting. If you don't have the site framework installed, this will be set to an instance of :class:`~django.contrib.sites.models.RequestSite`, which derives the site name and domain from the current :class:`~django.http.HttpRequest`."
msgstr ""

#: ../../topics/auth.txt:1055
#: ../../topics/auth.txt:1165
#: ../../topics/auth.txt:1274
# cc70f766799b4a81a5aa06bd8dabfd77
# 4f02d2326bcc4c5ba248c9947ea27b49
# 6b8db8a0f4324a899dfb785925d5d9e7
msgid "``site_name``: An alias for ``site.name``. If you don't have the site framework installed, this will be set to the value of :attr:`request.META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:`/ref/contrib/sites`."
msgstr ""

#: ../../topics/auth.txt:1060
# d7d998dde31e4cd6a7c8d1fdd8eb0e80
msgid "If you'd prefer not to call the template :file:`registration/login.html`, you can pass the ``template_name`` parameter via the extra arguments to the view in your URLconf. For example, this URLconf line would use :file:`myapp/login.html` instead::"
msgstr ""

#: ../../topics/auth.txt:1067
# 2786566a3b3440b2910dbdf4bd515098
msgid "You can also specify the name of the ``GET`` field which contains the URL to redirect to after login by passing ``redirect_field_name`` to the view. By default, the field is called ``next``."
msgstr ""

#: ../../topics/auth.txt:1071
# 533276c6fbdc4aa99f24d22c58b877b7
msgid "Here's a sample :file:`registration/login.html` template you can use as a starting point. It assumes you have a :file:`base.html` template that defines a ``content`` block:"
msgstr ""

#: ../../topics/auth.txt:1104
# de7d3a4e0a3e4813a089003928fa3bd1
msgid "If you are using alternate authentication (see :ref:`authentication-backends`) you can pass a custom authentication form to the login view via the ``authentication_form`` parameter. This form must accept a ``request`` keyword argument in its ``__init__`` method, and provide a ``get_user`` method which returns the authenticated user object (this method is only ever called after successful form validation)."
msgstr ""

#: ../../topics/auth.txt:1116
# 5456072abbe6430ab90053509cd0c9b2
msgid "The :func:`~views.login` view and the :ref:`other-built-in-views` now all return a :class:`~django.template.response.TemplateResponse` instance, which allows you to easily customize the response data before rendering. For more details, see the :doc:`TemplateResponse documentation </ref/template-response>`."
msgstr ""

#: ../../topics/auth.txt:1125
# 3ca2ffe11a8740e4ada8ea8e2f918799
msgid "Other built-in views"
msgstr ""

#: ../../topics/auth.txt:1129
# ab3af06164ab457ba3da08e1441057fe
msgid "In addition to the :func:`~views.login` view, the authentication system includes a few other useful built-in views located in :mod:`django.contrib.auth.views`:"
msgstr ""

#: ../../topics/auth.txt:1135
# 1028cf16e6ca454f915cdbb62cf452bb
msgid "Logs a user out."
msgstr ""

#: ../../topics/auth.txt:1137
# 70f64f90b889437ba6fbed24037e84b3
msgid "**URL name:** ``logout``"
msgstr ""

#: ../../topics/auth.txt:1142
#: ../../topics/auth.txt:1176
#: ../../topics/auth.txt:1187
#: ../../topics/auth.txt:1211
#: ../../topics/auth.txt:1231
#: ../../topics/auth.txt:1308
#: ../../topics/auth.txt:1320
#: ../../topics/auth.txt:1355
#: ../../topics/auth.txt:1374
# a643587d46e140258d03743fa7e55a2b
# 0febf8e1c75540a49b52360aa2b3c820
# 75b160e222b14a4ca22b9492d3be7ba6
# bcd0ae00ccc14437b4fb61e6ca46d15e
# 769084ec26524702a17c368fbd2cda74
# 149305321e27451490d2bba94502c087
# 3ee6ff0006cb429fbe1837dd529f249d
# dc1cb485048b4524a55222dfe3e7f57a
# 329617f97b3448e796c7bc7e208d7905
msgid "**Optional arguments:**"
msgstr ""

#: ../../topics/auth.txt:1144
# 041c1838d2c843a790ca71ad5c8985f0
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

#: ../../topics/auth.txt:1146
# dca6add7b96b4e52934e27b0acb4bc3c
msgid "``template_name``: The full name of a template to display after logging the user out. Defaults to :file:`registration/logged_out.html` if no argument is supplied."
msgstr ""

#: ../../topics/auth.txt:1150
# 60e6d6983b04412faf117ebf40cc41f7
msgid "``redirect_field_name``: The name of a ``GET`` field containing the URL to redirect to after log out. Overrides ``next_page`` if the given ``GET`` parameter is passed."
msgstr ""

#: ../../topics/auth.txt:1154
#: ../../topics/auth.txt:1201
#: ../../topics/auth.txt:1261
#: ../../topics/auth.txt:1340
# fd6400bd6517414982957319a07f0981
# bc93a68e2bfa40fe9125e4ec0b37e1d5
# fb293f17c3a44f23a17fa759ae9643e5
# 5d34de8e8f524b9280e4f51533c5fa2b
msgid "**Template context:**"
msgstr ""

#: ../../topics/auth.txt:1156
# cc1036cbcd714a1aaf9cf036b54a9bed
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

#: ../../topics/auth.txt:1172
# bbd9db2b776245a7bcb61942cf9ade86
msgid "Logs a user out, then redirects to the login page."
msgstr ""

#: ../../topics/auth.txt:1174
# f29ef6edb6864a14bc91b7f8a7c1cc50
msgid "**URL name:** No default URL provided"
msgstr ""

#: ../../topics/auth.txt:1178
#: ../../topics/auth.txt:1376
# 6575f681038342b5b2ccee15e1c7689b
# eefd0431b4e04c4099240394bd700985
msgid "``login_url``: The URL of the login page to redirect to. Defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1183
# fe599c619cab4ab3bb3b4e23022b2eeb
msgid "Allows a user to change their password."
msgstr ""

#: ../../topics/auth.txt:1185
# 365da0386a3d4d3abc3e0b75a1549eb9
msgid "**URL name:** ``password_change``"
msgstr ""

#: ../../topics/auth.txt:1189
# e82b1390b9d840839f8b1116f667de47
msgid "``template_name``: The full name of a template to use for displaying the password change form. Defaults to :file:`registration/password_change_form.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1193
# f6ab9654adf948038a327fcc6ce0bfcf
msgid "``post_change_redirect``: The URL to redirect to after a successful password change."
msgstr ""

#: ../../topics/auth.txt:1196
# 309daf211ab64fc7b8fc24efc5191db7
msgid "``password_change_form``: A custom \"change password\" form which must accept a ``user`` keyword argument. The form is responsible for actually changing the user's password. Defaults to :class:`~django.contrib.auth.forms.PasswordChangeForm`."
msgstr ""

#: ../../topics/auth.txt:1203
# 6a14ca779828413681dac6ee42055a02
msgid "``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

#: ../../topics/auth.txt:1207
# 03796f518a7e4346b150934fb7e68d16
msgid "The page shown after a user has changed their password."
msgstr ""

#: ../../topics/auth.txt:1209
# bc178d1790294b9d8052764bf25cbce3
msgid "**URL name:** ``password_change_done``"
msgstr ""

#: ../../topics/auth.txt:1213
# 91f5d218da7140839ca1f075a683cddd
msgid "``template_name``: The full name of a template to use. Defaults to :file:`registration/password_change_done.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1219
# d8085a175a16487db6d1070850055700
msgid "Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user's registered email address."
msgstr ""

#: ../../topics/auth.txt:1229
# e9c1997d468d4841bcf1416326d6bf59
msgid "**URL name:** ``password_reset``"
msgstr ""

#: ../../topics/auth.txt:1233
# bd678c28d68c40069d3ac9a440f9043f
msgid "``template_name``: The full name of a template to use for displaying the password reset form. Defaults to :file:`registration/password_reset_form.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1237
# 7017d4afd1e44552bb60bf0b0c7b5b6d
msgid "``email_template_name``: The full name of a template to use for generating the email with the reset password link. Defaults to :file:`registration/password_reset_email.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1241
# ef3770088f5a405cbdfe314a038ad107
msgid "``subject_template_name``: The full name of a template to use for the subject of the email with the reset password link. Defaults to :file:`registration/password_reset_subject.txt` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1247
# 28064401f28c42de99827027e8c32d1c
msgid "``password_reset_form``: Form that will be used to get the email of the user to reset the password for. Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

#: ../../topics/auth.txt:1251
# b447d6110c204a83a95bd85b98ac5a7c
msgid "``token_generator``: Instance of the class to check the one time link. This will default to ``default_token_generator``, it's an instance of ``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

#: ../../topics/auth.txt:1255
# ba63351dd1d54fc19da3000242709838
msgid "``post_reset_redirect``: The URL to redirect to after a successful password reset request."
msgstr ""

#: ../../topics/auth.txt:1258
# bc9e2bc980eb45cb8f739425383c1612
msgid "``from_email``: A valid email address. By default Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../topics/auth.txt:1263
# 38a3af4dc36a41c2a00983c7c3fa1854
msgid "``form``: The form (see ``password_reset_form`` above) for resetting the user's password."
msgstr ""

#: ../../topics/auth.txt:1266
# 26ada74edebd427faee47c889c13740d
msgid "**Email template context:**"
msgstr ""

#: ../../topics/auth.txt:1268
# 5bdbaeeaa4664729a2456c6dbeac4701
msgid "``email``: An alias for ``user.email``"
msgstr ""

#: ../../topics/auth.txt:1270
# a47872662e064f14aea4ee586e519ba1
msgid "``user``: The current :class:`~django.contrib.auth.models.User`, according to the ``email`` form field. Only active users are able to reset their passwords (``User.is_active is True``)."
msgstr ""

#: ../../topics/auth.txt:1279
# 2ed74849c3d845f9a30b231c7c70744d
msgid "``domain``: An alias for ``site.domain``. If you don't have the site framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

#: ../../topics/auth.txt:1283
# a9d70207f23d456d9e9f005e8c0b420f
msgid "``protocol``: http or https"
msgstr ""

#: ../../topics/auth.txt:1285
# 19fc4c5880654fac89f89aa9e9ba2f02
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

#: ../../topics/auth.txt:1287
# bccf15d80ecc4c0ab16c9db265ed4e63
msgid "``token``: Token to check that the reset link is valid."
msgstr ""

#: ../../topics/auth.txt:1289
# f74e558da83643e8a36fe460f63f3bba
msgid "Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

#: ../../topics/auth.txt:1296
# fa5e3bb61ae64556b9e3860712187d6f
msgid "The same template context is used for subject template. Subject must be single line plain text string."
msgstr ""

#: ../../topics/auth.txt:1302
# c7db88b8f0ab4f37a7390ec8ebd6b127
msgid "The page shown after a user has been emailed a link to reset their password. This view is called by default if the :func:`password_reset` view doesn't have an explicit ``post_reset_redirect`` URL set."
msgstr ""

#: ../../topics/auth.txt:1306
# 570eccc41329491cb7c7c1d351e506fe
msgid "**URL name:** ``password_reset_done``"
msgstr ""

#: ../../topics/auth.txt:1310
# b1b65df892ab4f8f966ef3ae02d7c127
msgid "``template_name``: The full name of a template to use. Defaults to :file:`registration/password_reset_done.html` if not supplied."
msgstr ""

#: ../../topics/auth.txt:1316
# 2dd974b1f216443caf8f520cf0761dec
msgid "Presents a form for entering a new password."
msgstr ""

#: ../../topics/auth.txt:1318
# f0a7cd7231334d1089b98d491dd74fc6
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

#: ../../topics/auth.txt:1322
# 541839b3a1c641fea0df52fc5042e6e0
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

#: ../../topics/auth.txt:1324
# 2cc79c1c90404783a7c09855ca98552c
msgid "``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

#: ../../topics/auth.txt:1327
# 972384f23f954dd1a9bee6ab937be23a
msgid "``template_name``: The full name of a template to display the confirm password view. Default value is :file:`registration/password_reset_confirm.html`."
msgstr ""

#: ../../topics/auth.txt:1330
# c683dadacff9499a83030ce11003360a
msgid "``token_generator``: Instance of the class to check the password. This will default to ``default_token_generator``, it's an instance of ``django.contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

#: ../../topics/auth.txt:1334
# 81826ace542043f89a15750d5a4767be
msgid "``set_password_form``: Form that will be used to set the password. Defaults to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

#: ../../topics/auth.txt:1337
# 8cff76f4996048f2aad135bc187c49fe
msgid "``post_reset_redirect``: URL to redirect after the password reset done. Defaults to ``None``."
msgstr ""

#: ../../topics/auth.txt:1342
# 80c953ba54274413ad678891dff5f0dc
msgid "``form``: The form (see ``set_password_form`` above) for setting the new user's password."
msgstr ""

#: ../../topics/auth.txt:1345
# 92a5a409b62641a48447d05d03e86bf0
msgid "``validlink``: Boolean, True if the link (combination of uidb36 and token) is valid or unused yet."
msgstr ""

#: ../../topics/auth.txt:1350
# ef0dd809bb064a3bb5cb241e0f1aeb19
msgid "Presents a view which informs the user that the password has been successfully changed."
msgstr ""

#: ../../topics/auth.txt:1353
# db542403d4aa4f2f9ffc653176e27078
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

#: ../../topics/auth.txt:1357
# 949df2a27c7e464ba2aaf727f51dc352
msgid "``template_name``: The full name of a template to display the view. Defaults to :file:`registration/password_reset_complete.html`."
msgstr ""

#: ../../topics/auth.txt:1361
# ad553068470142e0b842356911bd9c6e
msgid "Helper functions"
msgstr ""

#: ../../topics/auth.txt:1367
# 9169b51651814732949c31e61c737f35
msgid "Redirects to the login page, and then back to another URL after a successful login."
msgstr ""

#: ../../topics/auth.txt:1370
# a20af98e444843dd8b4e769349227df5
msgid "**Required arguments:**"
msgstr ""

#: ../../topics/auth.txt:1372
# cd82b580ecd34687b5e63823684345a1
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

#: ../../topics/auth.txt:1379
# c1f77691105b46009a4bcb35ffd1cd42
msgid "``redirect_field_name``: The name of a ``GET`` field containing the URL to redirect to after log out. Overrides ``next`` if the given ``GET`` parameter is passed."
msgstr ""

#: ../../topics/auth.txt:1387
# 22088aaeb7c8492882255ac5ca36850b
msgid "Built-in forms"
msgstr ""

#: ../../topics/auth.txt:1391
# f4d600b43d62462fb4b3210f200553d1
msgid "If you don't want to use the built-in views, but want the convenience of not having to write forms for this functionality, the authentication system provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

#: ../../topics/auth.txt:1397
# fd2b9ef6821f4ffda39ef2485e565eeb
msgid "A form used in the admin interface to change a user's password."
msgstr ""

#: ../../topics/auth.txt:1401
# 09b471338ca54e3ea7cfff5fa453b47b
msgid "A form for logging a user in."
msgstr ""

#: ../../topics/auth.txt:1405
# 59999423831d4804a7639a7a31801747
msgid "A form for allowing a user to change their password."
msgstr ""

#: ../../topics/auth.txt:1409
# 03710ff7b78d40adaa205bc03136368f
msgid "A form for generating and emailing a one-time use link to reset a user's password."
msgstr ""

#: ../../topics/auth.txt:1414
# 7b56709a534b421290e2dad4df577492
msgid "A form that lets a user change his/her password without entering the old password."
msgstr ""

#: ../../topics/auth.txt:1419
# 96a6da1d88174214a746e76e26cd5ad6
msgid "A form used in the admin interface to change a user's information and permissions."
msgstr ""

#: ../../topics/auth.txt:1424
# 5ba4ddcf71bf4e28954b315ae00e22bb
msgid "A form for creating a new user."
msgstr ""

#: ../../topics/auth.txt:1427
# d52a7b6df52d4733b85ffae9ac8044ad
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

#: ../../topics/auth.txt:1431
# ea133d017fbe424988e6047f667a07c3
msgid "To limit access based on certain permissions or some other test, you'd do essentially the same thing as described in the previous section."
msgstr ""

#: ../../topics/auth.txt:1434
# 358b43192a00494b9ef2f21630b8b6d4
msgid "The simple way is to run your test on :attr:`request.user <django.http.HttpRequest.user>` in the view directly. For example, this view checks to make sure the user is logged in and has the permission ``polls.can_vote``::"
msgstr ""

#: ../../topics/auth.txt:1446
# 8e0b68fb21464b0f9ea580b368f5a2fa
msgid "As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

#: ../../topics/auth.txt:1454
# fbebf972a26e42e0ac4de27259797c02
msgid "We're using this particular test as a relatively simple example. However, if you just want to test whether a permission is available to a user, you can use the :func:`~django.contrib.auth.decorators.permission_required()` decorator, described later in this document."
msgstr ""

#: ../../topics/auth.txt:1459
# 1ece3faab3dc4b7db61531e31706032f
msgid ":func:`~django.contrib.auth.decorators.user_passes_test` takes a required argument: a callable that takes a :class:`~django.contrib.auth.models.User` object and returns ``True`` if the user is allowed to view the page. Note that :func:`~django.contrib.auth.decorators.user_passes_test` does not automatically check that the :class:`~django.contrib.auth.models.User` is not anonymous."
msgstr ""

#: ../../topics/auth.txt:1467
# a6f4811bdcca49fba711191f4020a044
msgid ":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional ``login_url`` argument, which lets you specify the URL for your login page (:setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

#: ../../topics/auth.txt:1471
#: ../../topics/db/managers.txt:147
#: ../../topics/db/queries.txt:1204
#: ../../topics/email.txt:266
#: ../../topics/email.txt:309
#: ../../topics/forms/modelforms.txt:23
#: ../../topics/http/urls.txt:401
#: ../../topics/http/urls.txt:806
#: ../../topics/i18n/formatting.txt:119
#: ../../topics/i18n/formatting.txt:137
#: ../../topics/i18n/timezones.txt:339
#: ../../topics/i18n/timezones.txt:352
#: ../../topics/i18n/timezones.txt:368
#: ../../topics/i18n/translation.txt:182
#: ../../topics/i18n/translation.txt:268
#: ../../topics/i18n/translation.txt:1320
#: ../../topics/settings.txt:250
#: ../../topics/templates.txt:152
#: ../../topics/testing.txt:1479
#: ../../topics/testing.txt:1515
# a84060048ccf439dae8098f869835bbe
# 63a0ec63833746da96f5732b0643aa90
# 6b2a66aeac9c401e9b8bf1c72227e715
# 7129de96e57b4f9a844ce3d3f461064a
# 60011c89c3bf4757acdef21df244fe9b
# ea32fc0bb6a743b6a80e6dbda7ae8328
# d8154233c39b4d3c99726d95ce1b75a5
# 7d1c43785c6945358bea92804f209fff
# 937e3286f27247f194af818368b760b9
# 6e821ce9b6a14b83a294ab8d1597afec
# 751600bd29894472a01dfb9c833e214a
# 13e4eab293e64a86ae05ae128ddedc6d
# 76360af438dd445196ffc9b02f5e32c0
# 1d4cf5aa08eb42dfadaff1a32879df87
# 4e87a2aa48be446a97f2504719a732f9
# 23811b51077f4b5fbeaf55731aceccb4
# 2f71399b27e04115a52a9fb6e0e0281f
# c9dde296aeb64235bc2df6025fe88861
# 194b611ae4374582b87a61910afaf324
# 9b06ccd341d444cda35cadda269e5b63
msgid "For example::"
msgstr ""

#: ../../topics/auth.txt:1480
# 3f7e1d4dbd2945b0b76d2cc6032e9047
msgid "The permission_required decorator"
msgstr ""

#: ../../topics/auth.txt:1484
# efb0c236cc194748a541840f2b44672c
msgid "It's a relatively common task to check whether a user has a particular permission. For that reason, Django provides a shortcut for that case: the :func:`~django.contrib.auth.decorators.permission_required()` decorator. Using this decorator, the earlier example can be written as::"
msgstr ""

#: ../../topics/auth.txt:1495
# 893824ea7a6046af86c7eda1479a99c9
msgid "As for the :meth:`User.has_perm` method, permission names take the form ``\"<app label>.<permission codename>\"`` (i.e. ``polls.can_vote`` for a permission on a model in the ``polls`` application)."
msgstr ""

#: ../../topics/auth.txt:1499
# ea354e4bbb9e4ec9be514614c272daeb
msgid "Note that :func:`~django.contrib.auth.decorators.permission_required()` also takes an optional ``login_url`` parameter. Example::"
msgstr ""

#: ../../topics/auth.txt:1508
# 92e43860ade0429eb48d6584f45156dc
msgid "As in the :func:`~decorators.login_required` decorator, ``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

#: ../../topics/auth.txt:1513
# 5b7c8afc427a47a6bf9dff06316e053c
msgid "Added ``raise_exception`` parameter. If given, the decorator will raise :exc:`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP Forbidden) view<http_forbidden_view>` instead of redirecting to the login page."
msgstr ""

#: ../../topics/auth.txt:1521
# 596f571e2d4747c9a95bd15eba8400f9
msgid "Applying permissions to generic views"
msgstr ""

#: ../../topics/auth.txt:1523
# 4cb96ab4fd57420f891d59aea79d2a66
msgid "To apply a permission to a :doc:`class-based generic view </ref/class-based-views/index>`, decorate the :meth:`View.dispatch <django.views.generic.base.View.dispatch>` method on the class. See :ref:`decorating-class-based-views` for details."
msgstr ""

#: ../../topics/auth.txt:1531
#: ../../topics/auth.txt:1699
# bff38316729246929d2223fce10f9dd4
# ed15cbc839f6408cb4f1f110874a0cee
msgid "Permissions"
msgstr ""

#: ../../topics/auth.txt:1533
# 4a15bea29308492bb49c95e9ac0ccc9c
msgid "Django comes with a simple permissions system. It provides a way to assign permissions to specific users and groups of users."
msgstr ""

#: ../../topics/auth.txt:1536
# 8ea59e7c0178470bba49acc3a08d3826
msgid "It's used by the Django admin site, but you're welcome to use it in your own code."
msgstr ""

#: ../../topics/auth.txt:1539
# ba1b8602658b4111a6e0c16efaf7514a
msgid "The Django admin site uses permissions as follows:"
msgstr ""

#: ../../topics/auth.txt:1541
# 606c3429d72a4579a845699b19e85c3d
msgid "Access to view the \"add\" form and add an object is limited to users with the \"add\" permission for that type of object."
msgstr ""

#: ../../topics/auth.txt:1543
# c32d3d0cfc5446d196f5df842c1c4b79
msgid "Access to view the change list, view the \"change\" form and change an object is limited to users with the \"change\" permission for that type of object."
msgstr ""

#: ../../topics/auth.txt:1546
# ad6411f614ce4172829a8252c6a0afe7
msgid "Access to delete an object is limited to users with the \"delete\" permission for that type of object."
msgstr ""

#: ../../topics/auth.txt:1549
# 7c48db932203431ca3e814818fa018b0
msgid "Permissions can be set not only per type of object, but also per specific object instance. By using the :meth:`~django.contrib.admin.ModelAdmin.has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin.has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin.has_delete_permission` methods provided by the :class:`~django.contrib.admin.ModelAdmin` class, it is possible to customize permissions for different object instances of the same type."
msgstr ""

#: ../../topics/auth.txt:1558
# 899cb48cbb1e492f95beffb0fe043a9a
msgid "Default permissions"
msgstr ""

#: ../../topics/auth.txt:1560
# 2757c622a4884d0ba7b0e3a76ed1eefe
msgid "When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` setting, it will ensure that three default permissions -- add, change and delete -- are created for each Django model defined in one of your installed applications."
msgstr ""

#: ../../topics/auth.txt:1565
# fd1238564d6140e5a83d82ebfe90ae3f
msgid "These permissions will be created when you run :djadmin:`manage.py syncdb <syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib.auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../topics/auth.txt:1573
# 7645d41d93814a8bb826c378ff16c288
msgid "Assuming you have an application with an :attr:`~django.db.models.Options.app_label` ``foo`` and a model named ``Bar``, to test for basic permissions you should use:"
msgstr ""

#: ../../topics/auth.txt:1577
# ea5de859ef8b4f7ba16cdfc2486566b0
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

#: ../../topics/auth.txt:1578
# 155372b2f63b45f1b7d503bca929fbc7
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

#: ../../topics/auth.txt:1579
# df4441c93cbb4c2f922823563b39dd3e
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

#: ../../topics/auth.txt:1584
# e04c052bf4a14812a98d0764c7cfeb5a
msgid "Custom permissions"
msgstr ""

#: ../../topics/auth.txt:1586
# 59b00262568d4be59df26450be22e761
msgid "To create custom permissions for a given model object, use the ``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

#: ../../topics/auth.txt:1589
# 7c1e06daa3994a2db63ddead4901ce4e
msgid "This example Task model creates three custom permissions, i.e., actions users can or cannot do with Task instances, specific to your application::"
msgstr ""

#: ../../topics/auth.txt:1601
# bf9d70e25fc3471991b2c109502ef024
msgid "The only thing this does is create those extra permissions when you run :djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the value of these permissions when an user is trying to access the functionality provided by the application (viewing tasks, changing the status of tasks, closing tasks.) Continuing the above example, the following checks if a user may view tasks::"
msgstr ""

#: ../../topics/auth.txt:1620
# 9557d98b523946bcab40338efaa86198
msgid ":class:`~django.contrib.auth.models.Permission` objects have the following fields:"
msgstr ""

#: ../../topics/auth.txt:1625
# a68106a262284e5088ba8c05b21cd5c5
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

#: ../../topics/auth.txt:1629
# ec44cd09386649278f7bf307cb4e8665
msgid "Required. A reference to the ``django_content_type`` database table, which contains a record for each installed Django model."
msgstr ""

#: ../../topics/auth.txt:1634
# 21030d16a688437fb376e1d67c0f55d4
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

#: ../../topics/auth.txt:1639
# 33284409138745c8946685536d64a02b
msgid ":class:`~django.contrib.auth.models.Permission` objects have the standard data-access methods like any other :doc:`Django model </ref/models/instances>`."
msgstr ""

#: ../../topics/auth.txt:1645
# bdb91504e7cc429bb61ed46a8d5e0ca8
msgid "Programmatically creating permissions"
msgstr ""

#: ../../topics/auth.txt:1647
# 571a26f738014d64ae81a890aa9d4069
msgid "While custom permissions can be defined within a model's ``Meta`` class, you can also create permissions directly. For example, you can create the ``can_publish`` permission for a ``BlogPost`` model in ``myapp``::"
msgstr ""

#: ../../topics/auth.txt:1659
# e304aef97d7b4d02a47e59b7711976bc
msgid "The permission can then be assigned to a :class:`~django.contrib.auth.models.User` via its ``user_permissions`` attribute or to a :class:`~django.contrib.auth.models.Group` via its ``permissions`` attribute."
msgstr ""

#: ../../topics/auth.txt:1665
# ed69c91dfc8744019abfa5e407f0016c
msgid "Authentication data in templates"
msgstr ""

#: ../../topics/auth.txt:1667
# c6519acfbd3b42db935ad64e2092800c
msgid "The currently logged-in user and his/her permissions are made available in the :doc:`template context </ref/templates/api>` when you use :class:`~django.template.context.RequestContext`."
msgstr ""

#: ../../topics/auth.txt:1673
# 0a1798293e764a88a81dab25a4ef0143
msgid "Technically, these variables are only made available in the template context if you use :class:`~django.template.context.RequestContext` *and* your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib.auth.context_processors.auth\"``, which is default. For more, see the :ref:`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

#: ../../topics/auth.txt:1682
# 440639c90c9648549c7c6fdf7e967613
msgid "When rendering a template :class:`~django.template.context.RequestContext`, the currently logged-in user, either a  :class:`~django.contrib.auth.models.User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

#: ../../topics/auth.txt:1695
# 8dbd14267ba546f3bae7d99903621deb
msgid "This template context variable is not available if a ``RequestContext`` is not being used."
msgstr ""

#: ../../topics/auth.txt:1701
# 2c4ea480dc86473f88483db947f3f6fd
msgid "The currently logged-in user's permissions are stored in the template variable ``{{ perms }}``. This is an instance of :class:`django.contrib.auth.context_processors.PermWrapper`, which is a template-friendly proxy of permissions."
msgstr ""

#: ../../topics/auth.txt:1706
# b178a6baff964803ba3f0162545f22fe
msgid "In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. This example would display ``True`` if the logged-in user had any permissions in the ``foo`` app::"
msgstr ""

#: ../../topics/auth.txt:1713
# 3a09a7f291554ee8ac9059fd1ac47333
msgid "Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django.contrib.auth.models.User.has_perm>`. This example would display ``True`` if the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

#: ../../topics/auth.txt:1720
# 346afc905acc4ea88df944edda4c7901
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

#: ../../topics/auth.txt:1739
# 4499fd6e28b344b6b69729b042cac85f
msgid "It is possible to also look permissions up by ``{% if in %}`` statements. For example:"
msgstr ""

#: ../../topics/auth.txt:1751
# 99c5d1e29cbc4f86aaf67458b4794658
msgid "Groups"
msgstr ""

#: ../../topics/auth.txt:1753
# 5c0536fcd6694d8dafcf8974e22b8fc1
msgid "Groups are a generic way of categorizing users so you can apply permissions, or some other label, to those users. A user can belong to any number of groups."
msgstr ""

#: ../../topics/auth.txt:1756
# 7b9061548c2040648cb247c1385ecac9
msgid "A user in a group automatically has the permissions granted to that group. For example, if the group ``Site editors`` has the permission ``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

#: ../../topics/auth.txt:1760
# 6b5a4f5e331f4ad68261cafec6175dc4
msgid "Beyond permissions, groups are a convenient way to categorize users to give them some label, or extended functionality. For example, you could create a group ``'Special users'``, and you could write code that could, say, give them access to a members-only portion of your site, or send them members-only email messages."
msgstr ""

#: ../../topics/auth.txt:1774
# a9517e9d56d64bd785ee84d108720868
msgid ":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

#: ../../topics/auth.txt:1778
# 7e2cc24f8bb74438860b3a249e795c1a
msgid "Required. 80 characters or fewer. Any characters are permitted. Example: ``'Awesome Users'``."
msgstr ""

#: ../../topics/auth.txt:1783
# b08952105124471b99d5472d4dfdc61e
msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permissions`::"
msgstr ""

#: ../../topics/auth.txt:1793
# b7dfe90815674c26b557d97ca56bfca8
msgid "Customizing the User model"
msgstr ""

#: ../../topics/auth.txt:1797
# d033640f138a4e278efb4296ea2b42de
msgid "Some kinds of projects may have authentication requirements for which Django's built-in :class:`~django.contrib.auth.models.User` model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username."
msgstr ""

#: ../../topics/auth.txt:1802
# edb896fdb7904d70ba2419ecbd6c8631
msgid "Django allows you to override the default User model by providing a value for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""

#: ../../topics/auth.txt:1807
# 1db856d15b5947a1becfa6f89424ba30
msgid "This dotted pair describes the name of the Django app, and the name of the Django model that you wish to use as your User model."
msgstr ""

#: ../../topics/auth.txt:1812
# 1fed3621ee5942c19cd55eeef7d4f4d6
msgid "Changing :setting:`AUTH_USER_MODEL` has a big effect on your database structure. It changes the tables that are available, and it will affect the construction of foreign keys and many-to-many relationships. If you intend to set :setting:`AUTH_USER_MODEL`, you should set it before running ``manage.py syncdb`` for the first time."
msgstr ""

#: ../../topics/auth.txt:1818
# c911486639284b049223e25dff1ab88e
msgid "If you have an existing project and you want to migrate to using a custom User model, you may need to look into using a migration tool like South_ to ease the transition."
msgstr ""

#: ../../topics/auth.txt:1825
# d0750c371edc43a98ab59b7ad0584975
msgid "Referencing the User model"
msgstr ""

#: ../../topics/auth.txt:1827
# 5eef16d31b6a462a8c1fc85c344d120c
msgid "If you reference :class:`~django.contrib.auth.models.User` directly (for example, by referring to it in a foreign key), your code will not work in projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a different User model."
msgstr ""

#: ../../topics/auth.txt:1832
# ac2fae3d8474486aaf73e235d4d8abfd
msgid "Instead of referring to :class:`~django.contrib.auth.models.User` directly, you should reference the user model using :func:`django.contrib.auth.get_user_model()`. This method will return the currently active User model -- the custom User model if one is specified, or :class:`~django.contrib.auth.User` otherwise."
msgstr ""

#: ../../topics/auth.txt:1838
# ded7e4e22f2c41e0a7978f7eeb5c6e0e
msgid "When you define a foreign key or many-to-many relations to the User model, you should specify the custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""

#: ../../topics/auth.txt:1849
# cc6984419f4e408d8af70db21bb8df9f
msgid "Specifying a custom User model"
msgstr ""

#: ../../topics/auth.txt:1853
# 5fd5442066a34f3e9128e894972fa789
msgid "Think carefully before handling information not directly related to authentication in your custom User Model."
msgstr ""

#: ../../topics/auth.txt:1856
# f31abe55cefe4e899c5445269d422905
msgid "It may be better to store app-specific user information in a model that has a relation with the User model. That allows each app to specify its own user data requirements without risking conflicts with other apps. On the other hand, queries to retrieve this related information will involve a database join, which may have an effect on performance."
msgstr ""

#: ../../topics/auth.txt:1862
# c1c4ad1d3aa74403ac5b15205f45d2ba
msgid "Django expects your custom User model to meet some minimum requirements."
msgstr ""

#: ../../topics/auth.txt:1864
# 176cfd0ff7284b0dafc5cfe466e8b638
msgid "Your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute."
msgstr ""

#: ../../topics/auth.txt:1868
# f62c8ce61fb549d4b8b2c002c6872867
msgid "Your model must provide a way to address the user in a \"short\" and \"long\" form. The most common interpretation of this would be to use the user's given name as the \"short\" identifier, and the user's full name as the \"long\" identifier. However, there are no constraints on what these two methods return - if you want, they can return exactly the same value."
msgstr ""

#: ../../topics/auth.txt:1875
# 29d6cfd39a1e46e3bc730caeda0ea982
msgid "The easiest way to construct a compliant custom User model is to inherit from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django.contrib.auth.models.AbstractBaseUser` provides the core implementation of a `User` model, including hashed passwords and tokenized password resets. You must then provide some key implementation details:"
msgstr ""

#: ../../topics/auth.txt:1885
# 3e750e38807c4c6fb969e8c1820e5a12
msgid "A string describing the name of the field on the User model that is used as the unique identifier. This will usually be a username of some kind, but it can also be an email address, or any other unique identifier. In the following example, the field `identifier` is used as the identifying field::"
msgstr ""

#: ../../topics/auth.txt:1898
# 37f0b5ca6f2848e1aac775f2d944d2e1
msgid "A list of the field names that *must* be provided when creating a user. For example, here is the partial definition for a User model that defines two required fields - a date of birth and height::"
msgstr ""

#: ../../topics/auth.txt:1911
# ec41a5a9d913446e88326a0aa91eba52
msgid "``REQUIRED_FIELDS`` must contain all required fields on your User model, but should *not* contain the ``USERNAME_FIELD``."
msgstr ""

#: ../../topics/auth.txt:1916
# 853cb5b60ed148fc95fd7204b8c1e21e
msgid "A boolean attribute that indicates whether the user is considered \"active\".  This attribute is provided as an attribute on ``AbstractBaseUser`` defaulting to ``True``. How you choose to implement it will depend on the details of your chosen auth backends. See the documentation of the :attr:`attribute on the builtin user model <django.contrib.auth.models.User.is_active>` for details."
msgstr ""

#: ../../topics/auth.txt:1925
# a559e603c89f437c86cbd7a0bfcdfb0f
msgid "A longer formal identifier for the user. A common interpretation would be the full name name of the user, but it can be any string that identifies the user."
msgstr ""

#: ../../topics/auth.txt:1931
# 9c62bbfcbb1d4c059f66dc6340490b88
msgid "A short, informal identifier for the user. A common interpretation would be the first name of the user, but it can be any string that identifies the user in an informal way. It may also return the same value as :meth:`django.contrib.auth.User.get_full_name()`."
msgstr ""

#: ../../topics/auth.txt:1936
# 362222f13bc84b5ca90e2d7ebda06c49
msgid "The following methods are available on any subclass of :class:`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""

#: ../../topics/auth.txt:1943
# 84406b454dcb46b8b42dce49f4013db9
msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr ""

#: ../../topics/auth.txt:1947
# 7b4b9f04df354d70a76d07269479a9f6
msgid "Always returns ``False``. This is a way of differentiating from  :class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you should prefer using :meth:`~django.contrib.auth.models.AbstractBaseUser.is_authenticated()` to this method."
msgstr ""

#: ../../topics/auth.txt:1962
# 7ac4c6b764b34c9cae443e185a1f8947
msgid "Sets the user's password to the given raw string, taking care of the password hashing. Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr ""

#: ../../topics/auth.txt:1974
# 2ec34ce90a564a51b39b05da1c18e3b7
msgid "Marks the user as having no password set.  This isn't the same as having a blank string for a password. :meth:`~django.contrib.auth.models.AbstractBaseUser.check_password()` for this user will never return ``True``. Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` object."
msgstr ""

#: ../../topics/auth.txt:1985
# d164244cb758405d8c3cdcf7c47960ff
msgid "Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser.set_unusable_password()` has been called for this user."
msgstr ""

#: ../../topics/auth.txt:1990
# 5f1149091f334d43acd564bc7e147274
msgid "You should also define a custom manager for your User model. If your User model defines `username` and `email` fields the same as Django's default User, you can just install Django's :class:`~django.contrib.auth.models.UserManager`; however, if your User model defines different fields, you will need to define a custom manager that extends :class:`~django.contrib.auth.models.BaseUserManager` providing two additional methods:"
msgstr ""

#: ../../topics/auth.txt:2002
# cdec83a673314fd78da5655fb18b1ed9
msgid "The prototype of `create_user()` should accept the username field, plus all required fields as arguments. For example, if your user model uses `email` as the username field, and has `date_of_birth` as a required fields, then create_user should be defined as::"
msgstr ""

#: ../../topics/auth.txt:2012
# e948baae1a734fa5be5b5b0ff73c3c76
msgid "The prototype of `create_superuser()` should accept the username field, plus all required fields as arguments. For example, if your user model uses `email` as the username field, and has `date_of_birth` as a required fields, then create_superuser should be defined as::"
msgstr ""

#: ../../topics/auth.txt:2020
# 053561aa85e14a13a8a633193c652760
msgid "Unlike `create_user()`, `create_superuser()` *must* require the caller to provider a password."
msgstr ""

#: ../../topics/auth.txt:2023
# f98e481b726e4873b91c1b61898bf328
msgid ":class:`~django.contrib.auth.models.BaseUserManager` provides the following utility methods:"
msgstr ""

#: ../../topics/auth.txt:2030
# 5e899f100a684a178e9454761fc03b59
msgid "A classmethod that normalizes email addresses by lowercasing the domain portion of the email address."
msgstr ""

#: ../../topics/auth.txt:2035
# 39fbc0951b65481b8fdbda09a2e416c7
msgid "Retrieves a user instance using the contents of the field nominated by ``USERNAME_FIELD``."
msgstr ""

#: ../../topics/auth.txt:2050
# a7c88b9d9ed74652b0360b392b5f10b2
msgid "Extending Django's default User"
msgstr ""

#: ../../topics/auth.txt:2052
# 46fc8de578e642d68d40623088449456
msgid "If you're entirely happy with Django's :class:`~django.contrib.auth.models.User` model and you just want to add some additional profile information, you can simply subclass :class:`~django.contrib.auth.models.AbstractUser` and add your custom profile fields."
msgstr ""

#: ../../topics/auth.txt:2058
# 4dd588bcfdf648f5aa9aeafb7cf8dd46
msgid "Custom users and the built-in auth forms"
msgstr ""

#: ../../topics/auth.txt:2060
# 1ae765eb398f4baaa43bf71a082ad1f3
msgid "As you may expect, built-in Django's :ref:`forms <built-in-auth-forms>` and :ref:`views <other-built-in-views>` make certain assumptions about the user model that they are working with."
msgstr ""

#: ../../topics/auth.txt:2064
# ba12dccf9f7745fe8bfa3475399fd585
msgid "If your user model doesn't follow the same assumptions, it may be necessary to define a replacement form, and pass that form in as part of the configuration of the auth views."
msgstr ""

#: ../../topics/auth.txt:2068
# dc0028dbb50949aca5eae0b880e1d01e
msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ""

#: ../../topics/auth.txt:2070
#: ../../topics/auth.txt:2075
# db1750a6b49a4ca6a704bffab75a0362
# 87ec88079dd448fdb2dd037697644cf8
msgid "Depends on the :class:`~django.contrib.auth.models.User` model. Must be re-written for any custom user model."
msgstr ""

#: ../../topics/auth.txt:2073
# 3558b3bcab5d4094bad0aa016e98f5e8
msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ""

#: ../../topics/auth.txt:2078
# 8efecdcbaaf94eb1ae6c381abab44469
msgid ":class:`~django.contrib.auth.forms.AuthenticationForm`"
msgstr ""

#: ../../topics/auth.txt:2080
# b1818c36616443229f9b552d2c87775d
msgid "Works with any subclass of :class:`~django.contrib.auth.models.AbstractBaseUser`, and will adapt to use the field defined in `USERNAME_FIELD`."
msgstr ""

#: ../../topics/auth.txt:2083
# 4b82f47012284da3ab3966ac8fefefb2
msgid ":class:`~django.contrib.auth.forms.PasswordResetForm`"
msgstr ""

#: ../../topics/auth.txt:2085
# f8b72440fb564a47b3e832b59c656f0e
msgid "Assumes that the user model has an integer primary key, has a field named `email` that can be used to identify the user, and a boolean field named `is_active` to prevent password resets for inactive users."
msgstr ""

#: ../../topics/auth.txt:2089
# bfd780938c3246c6a0132720f6cf5ccf
msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

#: ../../topics/auth.txt:2091
#: ../../topics/auth.txt:2095
#: ../../topics/auth.txt:2099
# cc28a8a2c85e492680e988f328287b15
# fd67209424c147bc9527a5c1c715ab49
# 45dd99e0e7234746a3f40115db6b5d73
msgid "Works with any subclass of :class:`~django.contrib.auth.models.AbstractBaseUser`"
msgstr ""

#: ../../topics/auth.txt:2093
# 3065c6e988324bfabde87816829974ad
msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ""

#: ../../topics/auth.txt:2097
# 374e2c76dc104731902bcf7b02c30663
msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ""

#: ../../topics/auth.txt:2103
# 060a3f843c0e46d6bbac003c6647d1b2
msgid "Custom users and django.contrib.admin"
msgstr ""

#: ../../topics/auth.txt:2105
# 95768c4eba854f91b280137d7ca61d31
msgid "If you want your custom User model to also work with Admin, your User model must define some additional attributes and methods. These methods allow the admin to control access of the User to admin content:"
msgstr ""

#: ../../topics/auth.txt:2111
# 51489a8659b34726ba524d724fd835bd
msgid "Returns True if the user is allowed to have access to the admin site."
msgstr ""

#: ../../topics/auth.txt:2115
# 24f38556ee4a43f59e666ad6d3bb308f
msgid "Returns True if the user account is currently active."
msgstr ""

#: ../../topics/auth.txt:2119
# 80981d81bb394b5e869cba1477213a4a
msgid "Returns True if the user has the named permission. If `obj` is provided, the permission needs to be checked against a specific object instance."
msgstr ""

#: ../../topics/auth.txt:2125
# 65124412b85242b0a236b3a800304f6c
msgid "Returns True if the user has permission to access models in the given app."
msgstr ""

#: ../../topics/auth.txt:2128
# b5f97f77720e4e94962783517a0ffb49
msgid "You will also need to register your custom User model with the admin. If your custom User model extends :class:`~django.contrib.auth.models.AbstractUser`, you can use Django's existing :class:`~django.contrib.auth.admin.UserAdmin` class. However, if your User model extends :class:`~django.contrib.auth.models.AbstractBaseUser`, you'll need to define a custom ModelAdmin class. It may be possible to subclass the default :class:`~django.contrib.auth.admin.UserAdmin`; however, you'll need to override any of the definitions that refer to fields on :class:`~django.contrib.auth.models.AbstractUser` that aren't on your custom User class."
msgstr ""

#: ../../topics/auth.txt:2140
# 2e01339541a94d35b365ae168b702015
msgid "Custom users and Proxy models"
msgstr ""

#: ../../topics/auth.txt:2142
# 490325991c0644e58e6325cd9cf09485
msgid "One limitation of custom User models is that installing a custom User model will break any proxy model extending :class:`~django.contrib.auth.models.User`. Proxy models must be based on a concrete base class; by defining a custom User model, you remove the ability of Django to reliably identify the base class."
msgstr ""

#: ../../topics/auth.txt:2147
# 4502540f90f34268b0cd210a09ffe26b
msgid "If your project uses proxy models, you must either modify the proxy to extend the User model that is currently in use in your project, or merge your proxy's behavior into your User subclass."
msgstr ""

#: ../../topics/auth.txt:2152
# 8138e912ca934bd6a78ae3b411df8fb6
msgid "Custom users and signals"
msgstr ""

#: ../../topics/auth.txt:2154
# 6d999255c91a436292cdbe5f6381f65c
msgid "Another limitation of custom User models is that you can't use :func:`django.contrib.auth.get_user_model()` as the sender or target of a signal handler. Instead, you must register the handler with the actual User model."
msgstr ""

#: ../../topics/auth.txt:2159
#: ../../topics/forms/modelforms.txt:143
# adfbd72fa4874ef5a96d795f149a12e7
# 93e5c1e08d2342dea4806a9356d433c6
msgid "A full example"
msgstr ""

#: ../../topics/auth.txt:2161
# e7cae776c8f446a9bb9aaffb5bfdd4f0
msgid "Here is an example of an admin-compliant custom user app. This user model uses an email address as the username, and has a required date of birth; it provides no permission checking, beyond a simple `admin` flag on the user account. This model would be compatible with all the built-in auth forms and views, except for the User creation forms."
msgstr ""

#: ../../topics/auth.txt:2167
# 92d45c2ac7c04dd2a92918a6fbef7819
msgid "This code would all live in a ``models.py`` file for a custom authentication app::"
msgstr ""

#: ../../topics/auth.txt:2251
# 6d7d8609f1814d7fbc17e4c283f33692
msgid "Then, to register this custom User model with Django's admin, the following code would be required in the app's ``admin.py`` file::"
msgstr ""

#: ../../topics/auth.txt:2342
# 9c8011a3230e49238656bdbfc4ed86b8
msgid "Other authentication sources"
msgstr ""

#: ../../topics/auth.txt:2344
# c1f1321f1af448c4b4e464c80c133293
msgid "The authentication that comes with Django is good enough for most common cases, but you may have the need to hook into another authentication source -- that is, another source of usernames and passwords or authentication methods."
msgstr ""

#: ../../topics/auth.txt:2348
# 0da85350c49c4c7b906f11be1575d291
msgid "For example, your company may already have an LDAP setup that stores a username and password for every employee. It'd be a hassle for both the network administrator and the users themselves if users had separate accounts in LDAP and the Django-based applications."
msgstr ""

#: ../../topics/auth.txt:2353
# b6994d03072548bfb6253af552191c06
msgid "So, to handle situations like this, the Django authentication system lets you plug in other authentication sources. You can override Django's default database-based scheme, or you can use the default system in tandem with other systems."
msgstr ""

#: ../../topics/auth.txt:2358
# f2ceda56b95f4b9cb5af1b14ebc1a7c0
msgid "See the :doc:`authentication backend reference </ref/authbackends>` for information on the authentication backends included with Django."
msgstr ""

#: ../../topics/auth.txt:2362
# 0ee45f74f2d84108903f25102ce1f96e
msgid "Specifying authentication backends"
msgstr ""

#: ../../topics/auth.txt:2364
# adcd95bea00a4e82b5d37c9a49bf8b14
msgid "Behind the scenes, Django maintains a list of \"authentication backends\" that it checks for authentication. When somebody calls :func:`django.contrib.auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-log-a-user-in>` above -- Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted."
msgstr ""

#: ../../topics/auth.txt:2371
# dd8572c27b2440e0bab37140f598e27f
msgid "The list of authentication backends to use is specified in the :setting:`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path names that point to Python classes that know how to authenticate. These classes can be anywhere on your Python path."
msgstr ""

#: ../../topics/auth.txt:2376
# e3d77040020149cdbc62dcb28424fbb9
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""

#: ../../topics/auth.txt:2380
# 4f809b7d85f34db4bf1835dff9135279
msgid "That's the basic authentication backend that checks the Django users database and queries the builtin permissions. It does not provide protection against brute force attacks via any rate limiting mechanism. You may either implement your own rate limiting mechanism in a custom auth backend, or use the mechanisms provided by most Web servers."
msgstr ""

#: ../../topics/auth.txt:2386
# 1535b56f05f24e24be7be24e52ae7ae2
msgid "The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same username and password is valid in multiple backends, Django will stop processing at the first positive match."
msgstr ""

#: ../../topics/auth.txt:2392
# 63673b9193254f82aa3f85510c330cad
msgid "Once a user has authenticated, Django stores which backend was used to authenticate the user in the user's session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change :setting:`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

#: ../../topics/auth.txt:2402
# 2d2cb3e0724448abbcc93cac17c388b1
msgid "Writing an authentication backend"
msgstr ""

#: ../../topics/auth.txt:2404
# a07538a3da1e42ec991506bb9c2efc3a
msgid "An authentication backend is a class that implements two required methods: ``get_user(user_id)`` and ``authenticate(**credentials)``, as well as a set of optional permission related :ref:`authorization methods <authorization_methods>`."
msgstr ""

#: ../../topics/auth.txt:2408
# 0159d8298eb0411db1cdee396ad673ea
msgid "The ``get_user`` method takes a ``user_id`` -- which could be a username, database ID or whatever -- and returns a ``User`` object."
msgstr ""

#: ../../topics/auth.txt:2411
# 5c17e62bec7142539b1191e43de4b43c
msgid "The ``authenticate`` method takes credentials as keyword arguments. Most of the time, it'll just look like this::"
msgstr ""

#: ../../topics/auth.txt:2418
# 12799af4a79d4e2cb88ab74f69bf70e1
msgid "But it could also authenticate a token, like so::"
msgstr ""

#: ../../topics/auth.txt:2424
# 1fd9d22b5aab4420bcea606b06cbc8a4
msgid "Either way, ``authenticate`` should check the credentials it gets, and it should return a ``User`` object that matches those credentials, if the credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

#: ../../topics/auth.txt:2428
# 651efadbcce54522bc8d61d1884a24d6
msgid "The Django admin system is tightly coupled to the Django ``User`` object described at the beginning of this document. For now, the best way to deal with this is to create a Django ``User`` object for each user that exists for your backend (e.g., in your LDAP directory, your external SQL database, etc.) You can either write a script to do this in advance, or your ``authenticate`` method can do it the first time a user logs in."
msgstr ""

#: ../../topics/auth.txt:2435
# 21858f34764447e998a2ce7a60cd8cc1
msgid "Here's an example backend that authenticates against a username and password variable defined in your ``settings.py`` file and creates a Django ``User`` object the first time a user authenticates::"
msgstr ""

#: ../../topics/auth.txt:2478
# 54552fbe591343c584073f057d1a2d0a
msgid "Handling authorization in custom backends"
msgstr ""

#: ../../topics/auth.txt:2480
# fe450c1cd5b34e0086b7838998144478
msgid "Custom auth backends can provide their own permissions."
msgstr ""

#: ../../topics/auth.txt:2482
# 6e0ee66b9050428ab8dde0d80c464110
msgid "The user model will delegate permission lookup functions (:meth:`~django.contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib.auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models.User.has_perm()`, and :meth:`~django.contrib.auth.models.User.has_module_perms()`) to any authentication backend that implements these functions."
msgstr ""

#: ../../topics/auth.txt:2489
# 92c3c04530e0473e862abcb30de1d5f4
msgid "The permissions given to the user will be the superset of all permissions returned by all backends. That is, Django grants a permission to a user that any one backend grants."
msgstr ""

#: ../../topics/auth.txt:2493
# dcf685d480e345fbb3a695de457d7094
msgid "The simple backend above could implement permissions for the magic admin fairly simply::"
msgstr ""

#: ../../topics/auth.txt:2506
# 771f1c988a7247a49f5e6f593adfdfc2
msgid "This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated :class:`django.contrib.auth.models.User` functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument."
msgstr ""

#: ../../topics/auth.txt:2511
# 15f7233793ed44b28824917e3d0f1a91
msgid "A full authorization implementation can be found in the ``ModelBackend`` class in `django/contrib/auth/backends.py`_, which is the default backend and queries the ``auth_permission`` table most of the time. If you wish to provide custom behavior for only part of the backend API, you can take advantage of Python inheritence and subclass ``ModelBackend`` instead of implementing the complete API in a custom backend."
msgstr ""

#: ../../topics/auth.txt:2523
# 82b3c6d0b24648bf98a34690b318f359
msgid "Authorization for anonymous users"
msgstr ""

#: ../../topics/auth.txt:2525
# 5011f9b3ec334380944a943cf8920e70
msgid "An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most Web sites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc."
msgstr ""

#: ../../topics/auth.txt:2531
# a81d311852264eee9cd2fe4caa5da922
msgid "Django's permission framework does not have a place to store permissions for anonymous users. However, the user object passed to an authentication backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, allowing the backend to specify custom authorization behavior for anonymous users. This is especially useful for the authors of re-usable apps, who can delegate all questions of authorization to the auth backend, rather than needing settings, for example, to control anonymous access."
msgstr ""

#: ../../topics/auth.txt:2542
# 3089ad20a5cd4dfaa146ffa72039b0d9
msgid "Authorization for inactive users"
msgstr ""

#: ../../topics/auth.txt:2544
# 48b1c18634194ac098e48e850138ecb6
msgid "An inactive user is a one that is authenticated but has its attribute ``is_active`` set to ``False``. However this does not mean they are not authorized to do anything. For example they are allowed to activate their account."
msgstr ""

#: ../../topics/auth.txt:2549
# 90e4b32d4d114bd6994b8aef85c5725e
msgid "The support for anonymous users in the permission system allows for a scenario where anonymous users have permissions to do something while inactive authenticated users do not."
msgstr ""

#: ../../topics/auth.txt:2553
# 2fe90fe020fa401f879c8246e87532a5
msgid "Do not forget to test for the ``is_active`` attribute of the user in your own backend permission methods."
msgstr ""

#: ../../topics/auth.txt:2558
# 9f43e82a99fa4503a49faf1f6c2ad153
msgid "Handling object permissions"
msgstr ""

#: ../../topics/auth.txt:2560
# 48c0a615d8cf4cdb850dd842e86736b4
msgid "Django's permission framework has a foundation for object permissions, though there is no implementation for it in the core. That means that checking for object permissions will always return ``False`` or an empty list (depending on the check performed). An authentication backend will receive the keyword parameters ``obj`` and ``user_obj`` for each object related authorization method and can return the object level permission as appropriate."
msgstr ""

#: ../../topics/cache.txt:3
# 71c7f58802b946748bbe7387fe6f6c36
msgid "Django's cache framework"
msgstr ""

#: ../../topics/cache.txt:5
# 5774c84b41d0456ebd848b4982191895
msgid "A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each time a user requests a page, the Web server makes all sorts of calculations -- from database queries to template rendering to business logic -- to create the page that your site's visitor sees. This is a lot more expensive, from a processing-overhead perspective, than your standard read-a-file-off-the-filesystem server arrangement."
msgstr ""

#: ../../topics/cache.txt:12
# a2670c872bd7429bab375f90a5ca5869
msgid "For most Web applications, this overhead isn't a big deal. Most Web applications aren't washingtonpost.com or slashdot.org; they're simply small- to medium-sized sites with so-so traffic. But for medium- to high-traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

#: ../../topics/cache.txt:17
# 9abfc5f39d414686a328937ad1322d39
msgid "That's where caching comes in."
msgstr ""

#: ../../topics/cache.txt:19
# c7c16fb57fc847d89fd5a5846b7cf5d0
msgid "To cache something is to save the result of an expensive calculation so that you don't have to perform the calculation next time. Here's some pseudocode explaining how this would work for a dynamically generated Web page::"
msgstr ""

#: ../../topics/cache.txt:31
# f0d4b62f61f740b7b731955dec659446
msgid "Django comes with a robust cache system that lets you save dynamic pages so they don't have to be calculated for each request. For convenience, Django offers different levels of cache granularity: You can cache the output of specific views, you can cache only the pieces that are difficult to produce, or you can cache your entire site."
msgstr ""

#: ../../topics/cache.txt:37
# 6daf31ef87544ee59f8af3482f97621e
msgid "Django also works well with \"upstream\" caches, such as `Squid <http://www.squid-cache.org>`_ and browser-based caches. These are the types of caches that you don't directly control but to which you can provide hints (via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""

#: ../../topics/cache.txt:43
# a6a8b6bba2b9462e9b6ac18e9e4a45d9
msgid "Setting up the cache"
msgstr ""

#: ../../topics/cache.txt:45
# c70574cab9394d9697750fa5dcf8fd36
msgid "The cache system requires a small amount of setup. Namely, you have to tell it where your cached data should live -- whether in a database, on the filesystem or directly in memory. This is an important decision that affects your cache's performance; yes, some cache types are faster than others."
msgstr ""

#: ../../topics/cache.txt:50
# cbdb64c140cf48f582d82d0607ae513e
msgid "Your cache preference goes in the :setting:`CACHES` setting in your settings file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

#: ../../topics/cache.txt:57
# 1482625bbb1d48538fb6a8053abe2fdf
msgid "Memcached"
msgstr ""

#: ../../topics/cache.txt:59
# a8617bff2c9841f8b68b57ce8da5af1a
msgid "By far the fastest, most efficient type of cache available to Django, Memcached__ is an entirely memory-based cache framework originally developed to handle high loads at LiveJournal.com and subsequently open-sourced by Danga Interactive.  It is used by sites such as Facebook and Wikipedia to reduce database access and dramatically increase site performance."
msgstr ""

#: ../../topics/cache.txt:67
# 8819427c5ec34fdbad4e5996eea4f5a7
msgid "Memcached runs as a daemon and is allotted a specified amount of RAM. All it does is provide a fast interface for adding, retrieving and deleting arbitrary data in the cache.  All data is stored directly in memory, so there's no overhead of database or filesystem usage."
msgstr ""

#: ../../topics/cache.txt:72
# 1616fe5d9e9f416093bfbc5cea1e8fce
msgid "After installing Memcached itself, you'll need to install a memcached binding. There are several python memcached bindings available; the two most common are `python-memcached`_ and `pylibmc`_."
msgstr ""

#: ../../topics/cache.txt:79
# 8c297824e143402b903237d0e7e9fc18
msgid "To use Memcached with Django:"
msgstr ""

#: ../../topics/cache.txt:81
# e42e01df37fd4fba8afc97a0485585bf
msgid "Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.memcached.MemcachedCache`` or ``django.core.cache.backends.memcached.PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

#: ../../topics/cache.txt:86
# 876aa6a5b6764713bddc9fae4f66f2c0
msgid "Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where ``ip`` is the IP address of the Memcached daemon and ``port`` is the port on which Memcached is running, or to a ``unix:path`` value, where ``path`` is the path to a Memcached Unix socket file."
msgstr ""

#: ../../topics/cache.txt:91
# f3526ff312f545ff843d782f36887a91
msgid "In this example, Memcached is running on localhost (127.0.0.1) port 11211, using the ``python-memcached`` binding::"
msgstr ""

#: ../../topics/cache.txt:101
# 852795c14f824a0e80510559ff9917dc
msgid "In this example, Memcached is available through a local Unix socket file :file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

#: ../../topics/cache.txt:111
# 5fda2ab8fb2c45baa660cc58ab76abc4
msgid "One excellent feature of Memcached is its ability to share cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a *single* cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in :setting:`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""

#: ../../topics/cache.txt:118
# dbed75cea76a43eb9e9c1693e3cbc567
msgid "In this example, the cache is shared over Memcached instances running on IP address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

#: ../../topics/cache.txt:131
# 74989da00cdb4783a961567aa0e633c9
msgid "In the following example, the cache is shared over Memcached instances running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port 11212), and 172.19.26.244 (port 11213)::"
msgstr ""

#: ../../topics/cache.txt:146
# fbfa1615450041578e7c9ca0e3f610a4
msgid "A final point about Memcached is that memory-based caching has one disadvantage: Because the cached data is stored in memory, the data will be lost if your server crashes. Clearly, memory isn't intended for permanent data storage, so don't rely on memory-based caching as your only data storage. Without a doubt, *none* of the Django caching backends should be used for permanent storage -- they're all intended to be solutions for caching, not storage -- but we point this out here because memory-based caching is particularly temporary."
msgstr ""

#: ../../topics/cache.txt:156
# befce00280cc4d92945c736c086802d4
msgid "Database caching"
msgstr ""

#: ../../topics/cache.txt:158
# 028d1c86db1044a5b7bc5678bbacae10
msgid "To use a database table as your cache backend, first create a cache table in your database by running this command::"
msgstr ""

#: ../../topics/cache.txt:163
# af907301a0e448b1a4e55c2c9e93f472
msgid "...where ``[cache_table_name]`` is the name of the database table to create. (This name can be whatever you want, as long as it's a valid table name that's not already being used in your database.) This command creates a single table in your database that is in the proper format that Django's database-cache system expects."
msgstr ""

#: ../../topics/cache.txt:169
# 79623960766b4db79cb9e8383243cf72
msgid "Once you've created that database table, set your :setting:`BACKEND <CACHES-BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of the database table. In this example, the cache table's name is ``my_cache_table``::"
msgstr ""

#: ../../topics/cache.txt:183
# 256349ed4f0b46a19f7052d96a4e6fad
msgid "The database caching backend uses the same database as specified in your settings file. You can't use a different database backend for your cache table."
msgstr ""

#: ../../topics/cache.txt:186
# dbbb7d4116b44fbba657083d97a582ec
msgid "Database caching works best if you've got a fast, well-indexed database server."
msgstr ""

#: ../../topics/cache.txt:189
# c6403285640d43b89a26c5358839f99d
msgid "Database caching and multiple databases"
msgstr ""

#: ../../topics/cache.txt:191
# b2feff174c7246b6bfa890486e86ce4b
msgid "If you use database caching with multiple databases, you'll also need to set up routing instructions for your database cache table. For the purposes of routing, the database cache table appears as a model named ``CacheEntry``, in an application named ``django_cache``. This model won't appear in the models cache, but the model details can be used for routing purposes."
msgstr ""

#: ../../topics/cache.txt:198
# cf5fcdfdf2714db2919e595282b7ad30
msgid "For example, the following router would direct all cache read operations to ``cache_slave``, and all write operations to ``cache_master``. The cache table will only be synchronized onto ``cache_master``::"
msgstr ""

#: ../../topics/cache.txt:224
# 41346048337f4e5a98f84043cdc999d4
msgid "If you don't specify routing directions for the database cache model, the cache backend will use the ``default`` database."
msgstr ""

#: ../../topics/cache.txt:227
# 4cbb256d1e0640fe8d24b8a61975b9c6
msgid "Of course, if you don't use the database cache backend, you don't need to worry about providing routing instructions for the database cache model."
msgstr ""

#: ../../topics/cache.txt:232
# 6827b790c0ef4225bcbb4587524eab85
msgid "Filesystem caching"
msgstr ""

#: ../../topics/cache.txt:234
# 7cd391fdb69645b995f0978782b075c8
msgid "To store cached items on a filesystem, use ``\"django.core.cache.backends.filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For example, to store cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""

#: ../../topics/cache.txt:247
# 45eaf2e8233543ea80b9f7944e1f5317
msgid "If you're on Windows, put the drive letter at the beginning of the path, like this::"
msgstr ""

#: ../../topics/cache.txt:257
# a79c83bf94184eccb3624c92782269c3
msgid "The directory path should be absolute -- that is, it should start at the root of your filesystem. It doesn't matter whether you put a slash at the end of the setting."
msgstr ""

#: ../../topics/cache.txt:261
# ce44469873c9435bb9b5e0b54fba63d3
msgid "Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under which your Web server runs. Continuing the above example, if your server runs as the user ``apache``, make sure the directory ``/var/tmp/django_cache`` exists and is readable and writable by the user ``apache``."
msgstr ""

#: ../../topics/cache.txt:267
# ed6265623718473cb36d7fd6b0a1d009
msgid "Each cache value will be stored as a separate file whose contents are the cache data saved in a serialized (\"pickled\") format, using Python's ``pickle`` module. Each file's name is the cache key, escaped for safe filesystem use."
msgstr ""

#: ../../topics/cache.txt:272
# eabf0d05b880480faeeb81f7e794ba1a
msgid "Local-memory caching"
msgstr ""

#: ../../topics/cache.txt:274
# f60b0036080847d5aad80ea6f7aca2b1
msgid "If you want the speed advantages of in-memory caching but don't have the capability of running Memcached, consider the local-memory cache backend. This cache is multi-process and thread-safe. To use it, set :setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem.LocMemCache\"``. For example::"
msgstr ""

#: ../../topics/cache.txt:287
# e0cb89bb67d247adb4d76083658358d7
msgid "The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify individual memory stores. If you only have one locmem cache, you can omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more than one local memory cache, you will need to assign a name to at least one of them in order to keep them separate."
msgstr ""

#: ../../topics/cache.txt:293
# 08f34e3a3fd54bdc8b3175f14f49ee31
msgid "Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn't particularly memory-efficient, so it's probably not a good choice for production environments. It's nice for development."
msgstr ""

#: ../../topics/cache.txt:299
# 3c06dd17e6e04be68b1541059c3c9e77
msgid "Dummy caching (for development)"
msgstr ""

#: ../../topics/cache.txt:301
# c9c147588b084ce5bc2dc602f5bf2f69
msgid "Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- it just implements the cache interface without doing anything."
msgstr ""

#: ../../topics/cache.txt:304
# 3788763debd6433596a3811d672293bb
msgid "This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don't want to cache and don't want to have to change your code to special-case the latter. To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

#: ../../topics/cache.txt:316
# 65be021d09b643b79f38fc084d5d7cb5
msgid "Using a custom cache backend"
msgstr ""

#: ../../topics/cache.txt:318
# 5452d08687ce49d2b7b10b03490931d6
msgid "While Django includes support for a number of cache backends out-of-the-box, sometimes you might want to use a customized cache backend. To use an external cache backend with Django, use the Python import path as the :setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like so::"
msgstr ""

#: ../../topics/cache.txt:329
# b0c97f23f86d4f07bd6a24841f040d1b
msgid "If you're building your own backend, you can use the standard cache backends as reference implementations. You'll find the code in the ``django/core/cache/backends/`` directory of the Django source."
msgstr ""

#: ../../topics/cache.txt:333
# cd652ef60d95452485caf6ab219c86cc
msgid "Note: Without a really compelling reason, such as a host that doesn't support them, you should stick to the cache backends included with Django. They've been well-tested and are easy to use."
msgstr ""

#: ../../topics/cache.txt:338
# 51e206ffa0eb4a73b0f2606ed1b66db4
msgid "Cache arguments"
msgstr ""

#: ../../topics/cache.txt:340
# 73ab0df47e254d20a445e00d1cafbf3c
msgid "In addition to the defining the engine and name of the each cache backend, each cache backend can be given additional arguments to control caching behavior. These arguments are provided as additional keys in the :setting:`CACHES` setting. Valid arguments are as follows:"
msgstr ""

#: ../../topics/cache.txt:345
# 3dc0a4d972d1439fac6b6e46ee87a734
msgid ":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use for the cache. This argument defaults to 300 seconds (5 minutes)."
msgstr ""

#: ../../topics/cache.txt:349
# 4d77f8fc06d549d2a146871040dee714
msgid ":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to cache backend. The list options understood by each backend vary with each backend."
msgstr ""

#: ../../topics/cache.txt:353
# 06a38db3a59443a0b2003dbfa7a52b65
msgid "Cache backends that implement their own culling strategy (i.e., the ``locmem``, ``filesystem`` and ``database`` backends) will honor the following options:"
msgstr ""

#: ../../topics/cache.txt:357
# 796bfdec59c442d88011bc56116af941
msgid "``MAX_ENTRIES``: the maximum number of entries allowed in the cache before old values are deleted. This argument defaults to ``300``."
msgstr ""

#: ../../topics/cache.txt:361
# f346cb73e6ba49ed9b93a99ac2743528
msgid "``CULL_FREQUENCY``: The fraction of entries that are culled when ``MAX_ENTRIES`` is reached. The actual ratio is ``1/CULL_FREQUENCY``, so set ``CULL_FREQUENCY``: to ``2`` to cull half of the entries when ``MAX_ENTRIES`` is reached."
msgstr ""

#: ../../topics/cache.txt:366
# 5d74284c2cbe403383f11f5d3f2800c9
msgid "A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be dumped when ``MAX_ENTRIES`` is reached. This makes culling *much* faster at the expense of more cache misses."
msgstr ""

#: ../../topics/cache.txt:371
# aa350def13df4c94ac955f8699a7f896
msgid "Cache backends backed by a third-party library will pass their options directly to the underlying cache library. As a result, the list of valid options depends on the library in use."
msgstr ""

#: ../../topics/cache.txt:375
# ad38f19273a7489088d324ce38c0838f
msgid ":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be automatically included (prepended by default) to all cache keys used by the Django server."
msgstr ""

#: ../../topics/cache.txt:379
# a6283f88940341f0a1f52fe7daf17d82
msgid "See the :ref:`cache documentation <cache_key_prefixing>` for more information."
msgstr ""

#: ../../topics/cache.txt:382
# 22070a787b1e46ab8f742bc8599134ea
msgid ":setting:`VERSION <CACHES-VERSION>`: The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../topics/cache.txt:385
# d2e1ec12a4d4407eaccd483732dd7ac5
msgid "See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../topics/cache.txt:388
# 93a588610b5a4144a830dbbe39c72eba
msgid ":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted path to a function that defines how to compose a prefix, version and key into a final cache key."
msgstr ""

#: ../../topics/cache.txt:392
# 0b9df479af8c44a684c1815737aa1813
msgid "See the :ref:`cache documentation <cache_key_transformation>` for more information."
msgstr ""

#: ../../topics/cache.txt:395
# 2c09abf6102643be883ea51c888302d3
msgid "In this example, a filesystem backend is being configured with a timeout of 60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

#: ../../topics/cache.txt:409
# 8741b9d86b4c430daab470af237814f8
msgid "Invalid arguments are silently ignored, as are invalid values of known arguments."
msgstr ""

#: ../../topics/cache.txt:413
# d10aa31476224f19810f75f9b983693c
msgid "The per-site cache"
msgstr ""

#: ../../topics/cache.txt:415
# 09d70533faf6426eb2e35fce9649c145
msgid "Once the cache is set up, the simplest way to use caching is to cache your entire site. You'll need to add ``'django.middleware.cache.UpdateCacheMiddleware'`` and ``'django.middleware.cache.FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, as in this example::"
msgstr ""

#: ../../topics/cache.txt:429
# 91d533cf94664eb9af34dd83774df68e
msgid "No, that's not a typo: the \"update\" middleware must be first in the list, and the \"fetch\" middleware must be last. The details are a bit obscure, but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

#: ../../topics/cache.txt:433
# 9116b75256e54abda15d4ba32c5b6bea
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

#: ../../topics/cache.txt:435
# 06ffe9374cb445518df277959996919b
msgid ":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

#: ../../topics/cache.txt:436
# aad3cb8c7fe642b7816ccc85b5ef6a23
msgid ":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page should be cached."
msgstr ""

#: ../../topics/cache.txt:438
# ded45564f80d4be79cfd9ac6c9eb3f60
msgid ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across multiple sites using the same Django installation, set this to the name of the site, or some other string that is unique to this Django instance, to prevent key collisions. Use an empty string if you don't care."
msgstr ""

#: ../../topics/cache.txt:443
# 1ce031ff53f044d4988f2c004ce9252e
msgid "The cache middleware caches GET and HEAD responses with status 200, where the request and response headers allow. Responses to requests for the same URL with different query parameters are considered to be unique pages and are cached separately. Optionally, if the :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous requests (i.e., not those made by a logged-in user) will be cached. This is a simple and effective way of disabling caching for any user-specific pages (including Django's admin interface). Note that if you use :setting:`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated ``AuthenticationMiddleware``. The cache middleware expects that a HEAD request is answered with the same response headers as the corresponding GET request; in which case it can return a cached GET response for HEAD request."
msgstr ""

#: ../../topics/cache.txt:456
# afaa06faa3e84a2cafbace252f8ac1c1
msgid "Additionally, the cache middleware automatically sets a few headers in each :class:`~django.http.HttpResponse`:"
msgstr ""

#: ../../topics/cache.txt:459
# dda80da2ad664c4fb1e95ee981ad6bb3
msgid "Sets the ``Last-Modified`` header to the current date/time when a fresh (uncached) version of the page is requested."
msgstr ""

#: ../../topics/cache.txt:462
# b489499ee6904629bff8737efbabaf7a
msgid "Sets the ``Expires`` header to the current date/time plus the defined :setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

#: ../../topics/cache.txt:465
# 3cd5a253f47e4ff99cb381aaa9767522
msgid "Sets the ``Cache-Control`` header to give a max age for the page -- again, from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

#: ../../topics/cache.txt:468
# 17ad3e8dae8f4f0a99f62050dd035968
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

#: ../../topics/cache.txt:470
# 8eaa6bad7ba44ebdb3816f431dcbba47
msgid "If a view sets its own cache expiry time (i.e. it has a ``max-age`` section in its ``Cache-Control`` header) then the page will be cached until the expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the decorators in ``django.views.decorators.cache`` you can easily set a view's expiry time (using the ``cache_control`` decorator) or disable caching for a view (using the ``never_cache`` decorator). See the `using other headers`__ section for more on these decorators."
msgstr ""

#: ../../topics/cache.txt:480
# dda8248dbc6240a9a035721da43089f5
msgid "If :setting:`USE_I18N` is set to ``True`` then the generated cache key will include the name of the active :term:`language<language code>` -- see also :ref:`how-django-discovers-language-preference`). This allows you to easily cache multilingual sites without having to create the cache key yourself."
msgstr ""

#: ../../topics/cache.txt:487
# b4c5b858cb84414b9dbf255990e20c54
msgid "Cache keys also include the active :term:`language <language code>` when :setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone <default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

#: ../../topics/cache.txt:494
# 74bd2db5de4e405cb7df7d7e972dc92a
msgid "The per-view cache"
msgstr ""

#: ../../topics/cache.txt:498
# 1341f18b327843cf817884c13e709e0c
msgid "A more granular way to use the caching framework is by caching the output of individual views. ``django.views.decorators.cache`` defines a ``cache_page`` decorator that will automatically cache the view's response for you. It's easy to use::"
msgstr ""

#: ../../topics/cache.txt:509
# c2319a9b8fd746abbe8ba5e566a9928a
msgid "``cache_page`` takes a single argument: the cache timeout, in seconds. In the above example, the result of the ``my_view()`` view will be cached for 15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes multiplied by 60 seconds per minute.)"
msgstr ""

#: ../../topics/cache.txt:515
# f2adc9aa02a444d2b133cde2cd1480dc
msgid "The per-view cache, like the per-site cache, is keyed off of the URL. If multiple URLs point at the same view, each URL will be cached separately. Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

#: ../../topics/cache.txt:523
# a0dc13c8065e4842bc9b3f7e7dbe1a37
msgid "then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as you may expect. But once a particular URL (e.g., ``/foo/23/``) has been requested, subsequent requests to that URL will use the cache."
msgstr ""

#: ../../topics/cache.txt:527
# 05f3231cd70f454db22db3a5c428900a
msgid "``cache_page`` can also take an optional keyword argument, ``cache``, which directs the decorator to use a specific cache (from your :setting:`CACHES` setting) when caching view results. By default, the ``default`` cache will be used, but you can specify any cache you want::"
msgstr ""

#: ../../topics/cache.txt:537
# ab17d884dee74c12abb3d9294d70b3a4
msgid "You can also override the cache prefix on a per-view basis. ``cache_page`` takes an optional keyword argument, ``key_prefix``, which works in the same way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the middleware.  It can be used like this::"
msgstr ""

#: ../../topics/cache.txt:546
# af5ead4542314f2280fe8a0615e90710
msgid "The two settings can also be combined. If you specify a ``cache`` *and* a ``key_prefix``, you will get all the settings of the requested cache alias, but with the key_prefix overridden."
msgstr ""

#: ../../topics/cache.txt:551
# 2ac4515f73c74ca9814c800f7c55fcfc
msgid "Specifying per-view cache in the URLconf"
msgstr ""

#: ../../topics/cache.txt:553
# d67399f154da4804bac4fb5cad727f88
msgid "The examples in the previous section have hard-coded the fact that the view is cached, because ``cache_page`` alters the ``my_view`` function in place. This approach couples your view to the cache system, which is not ideal for several reasons. For instance, you might want to reuse the view functions on another, cache-less site, or you might want to distribute the views to people who might want to use them without being cached. The solution to these problems is to specify the per-view cache in the URLconf rather than next to the view functions themselves."
msgstr ""

#: ../../topics/cache.txt:562
# c4f2128d0d2547af98aea2ba7f73be5e
msgid "Doing so is easy: simply wrap the view function with ``cache_page`` when you refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

#: ../../topics/cache.txt:569
# e88c183fc45c4547aff357f92eb14c80
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

#: ../../topics/cache.txt:580
# 1e47e3a2576c4e0ebc2d059132d0ddcc
msgid "Template fragment caching"
msgstr ""

#: ../../topics/cache.txt:582
# 3a6f34e012144f499a152806f432ceb9
msgid "If you're after even more control, you can also cache template fragments using the ``cache`` template tag. To give your template access to this tag, put ``{% load cache %}`` near the top of your template."
msgstr ""

#: ../../topics/cache.txt:586
# fdd8071a613148d2a53dd99dd9cbda5b
msgid "The ``{% cache %}`` template tag caches the contents of the block for a given amount of time. It takes at least two arguments: the cache timeout, in seconds, and the name to give the cache fragment. The name will be taken as is, do not use a variable. For example:"
msgstr ""

#: ../../topics/cache.txt:598
# b2b704d0d7ad40c1964a10afc3a01cc8
msgid "Sometimes you might want to cache multiple copies of a fragment depending on some dynamic data that appears inside the fragment. For example, you might want a separate cached copy of the sidebar used in the previous example for every user of your site. Do this by passing additional arguments to the ``{% cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

#: ../../topics/cache.txt:611
# eb5b9fa6e3a844c4a7b9c4ad57ca210e
msgid "It's perfectly fine to specify more than one argument to identify the fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

#: ../../topics/cache.txt:614
# 272ac6f79dea432cab07d3a31a5591fd
msgid "If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` template tag you could use one of the :ref:`translation-specific variables<template-translation-vars>` available in templates to achieve the same result:"
msgstr ""

#: ../../topics/cache.txt:631
# dfd752e125bf45bf9cfea1298c083263
msgid "The cache timeout can be a template variable, as long as the template variable resolves to an integer value. For example, if the template variable ``my_timeout`` is set to the value ``600``, then the following two examples are equivalent:"
msgstr ""

#: ../../topics/cache.txt:641
# a5071ce0757d4488a72243dd3a44abbf
msgid "This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and just reuse that value."
msgstr ""

#: ../../topics/cache.txt:645
# 4432423b6f2d485fa1e5b28c9327b769
msgid "The low-level cache API"
msgstr ""

#: ../../topics/cache.txt:649
# a89febad517a4be9964d0f89562225d9
msgid "Sometimes, caching an entire rendered page doesn't gain you very much and is, in fact, inconvenient overkill."
msgstr ""

#: ../../topics/cache.txt:652
# 72d08081ace94c2490706c6a33c808fe
msgid "Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn't want to cache the entire result (since some of the data changes often), but you'd still want to cache the results that rarely change."
msgstr ""

#: ../../topics/cache.txt:659
# 1719ea8aba27402bb6eee4a8cb40f267
msgid "For cases like this, Django exposes a simple, low-level cache API. You can use this API to store objects in the cache with any level of granularity you like. You can cache any Python object that can be pickled safely: strings, dictionaries, lists of model objects, and so forth. (Most common Python objects can be pickled; refer to the Python documentation for more information about pickling.)"
msgstr ""

#: ../../topics/cache.txt:667
# 8e39594a2e974aa9a782a49a3e3a8088
msgid "Accessing the cache"
msgstr ""

#: ../../topics/cache.txt:669
# cb6a8fb98ca44b9a87b04d190b7177c6
msgid "The cache module, ``django.core.cache``, has a ``cache`` object that's automatically created from the ``'default'`` entry in the :setting:`CACHES` setting::"
msgstr ""

#: ../../topics/cache.txt:675
# 24750282731e49f9a2713ca5abedb3eb
msgid "If you have multiple caches defined in :setting:`CACHES`, then you can use :func:`django.core.cache.get_cache` to retrieve a cache object for any key::"
msgstr ""

#: ../../topics/cache.txt:681
# c0d532bc995f4fe1a73e93bc0833307a
msgid "If the named key does not exist, :exc:`InvalidCacheBackendError` will be raised."
msgstr ""

#: ../../topics/cache.txt:687
# 95118f009735445886bf59ffcc225b9b
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

#: ../../topics/cache.txt:693
# c9311aff69d8406fb5f705dc6a2f9516
msgid "The ``timeout`` argument is optional and defaults to the ``timeout`` argument of the appropriate backend in the :setting:`CACHES` setting (explained above). It's the number of seconds the value should be stored in the cache."
msgstr ""

#: ../../topics/cache.txt:698
# af67c1ab1cb5477191db62219a7bb762
msgid "If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

#: ../../topics/cache.txt:705
# 1e60b4d0d1cd4df48492c266374cdb51
msgid "We advise against storing the literal value ``None`` in the cache, because you won't be able to distinguish between your stored ``None`` value and a cache miss signified by a return value of ``None``."
msgstr ""

#: ../../topics/cache.txt:709
# 0dd8a0d979ca4622a91e9e37fcb11ab0
msgid "``cache.get()`` can take a ``default`` argument. This specifies which value to return if the object doesn't exist in the cache::"
msgstr ""

#: ../../topics/cache.txt:715
# 4639ada2aef4462c8c159a157b84170c
msgid "To add a key only if it doesn't already exist, use the ``add()`` method. It takes the same parameters as ``set()``, but it will not attempt to update the cache if the key specified is already present::"
msgstr ""

#: ../../topics/cache.txt:724
# 2ed32f898edf4e209f2654acead56c69
msgid "If you need to know whether ``add()`` stored a value in the cache, you can check the return value. It will return ``True`` if the value was stored, ``False`` otherwise."
msgstr ""

#: ../../topics/cache.txt:728
# cd51234767f8436fb64d999f2306986a
msgid "There's also a ``get_many()`` interface that only hits the cache once. ``get_many()`` returns a dictionary with all the keys you asked for that actually exist in the cache (and haven't expired)::"
msgstr ""

#: ../../topics/cache.txt:738
# d838fc63575e4cbc90bbcc07ed932ca2
msgid "To set multiple values more efficiently, use ``set_many()`` to pass a dictionary of key-value pairs::"
msgstr ""

#: ../../topics/cache.txt:745
# 98b7deb9d53142678aa321553bc0ed44
msgid "Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

#: ../../topics/cache.txt:747
# a9e0d6ce14804e3aba850a5c97f3b4cd
msgid "You can delete keys explicitly with ``delete()``. This is an easy way of clearing the cache for a particular object::"
msgstr ""

#: ../../topics/cache.txt:752
# 62514c43611d4cc289b74b973d1d7ad8
msgid "If you want to clear a bunch of keys at once, ``delete_many()`` can take a list of keys to be cleared::"
msgstr ""

#: ../../topics/cache.txt:757
# 2d7a238a2b584aea83c0b1eb0debd2b6
msgid "Finally, if you want to delete all the keys in the cache, use ``cache.clear()``.  Be careful with this; ``clear()`` will remove *everything* from the cache, not just the keys set by your application. ::"
msgstr ""

#: ../../topics/cache.txt:763
# be77376f55f641eda723a73922e3d82f
msgid "You can also increment or decrement a key that already exists using the ``incr()`` or ``decr()`` methods, respectively. By default, the existing cache value will incremented or decremented by 1. Other increment/decrement values can be specified by providing an argument to the increment/decrement call. A ValueError will be raised if you attempt to increment or decrement a nonexistent cache key.::"
msgstr ""

#: ../../topics/cache.txt:782
# 36b3a05bda754c6db9794fc6b36d8518
msgid "``incr()``/``decr()`` methods are not guaranteed to be atomic. On those backends that support atomic increment/decrement (most notably, the memcached backend), increment and decrement operations will be atomic. However, if the backend doesn't natively provide an increment/decrement operation, it will be implemented using a two-step retrieve/update."
msgstr ""

#: ../../topics/cache.txt:791
# 4b67a7ed81674124a20fd03d82e9c33e
msgid "Cache key prefixing"
msgstr ""

#: ../../topics/cache.txt:793
# 86690d16649948999e5a70344382f77d
msgid "If you are sharing a cache instance between servers, or between your production and development environments, it's possible for data cached by one server to be used by another server. If the format of cached data is different between servers, this can lead to some very hard to diagnose problems."
msgstr ""

#: ../../topics/cache.txt:799
# 64b5618c7aac4a008baee97c2c807e54
msgid "To prevent this, Django provides the ability to prefix all cache keys used by a server. When a particular cache key is saved or retrieved, Django will automatically prefix the cache key with the value of the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

#: ../../topics/cache.txt:804
# 7b717d2639f34f34bc6ce4f737ab10f6
msgid "By ensuring each Django instance has a different :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in cache values."
msgstr ""

#: ../../topics/cache.txt:811
# 9f7324e460694913944a2aef89b022bd
msgid "Cache versioning"
msgstr ""

#: ../../topics/cache.txt:813
# 1f3b516920334c26849a3af3d29d503d
msgid "When you change running code that uses cached values, you may need to purge any existing cached values. The easiest way to do this is to flush the entire cache, but this can lead to the loss of cache values that are still valid and useful."
msgstr ""

#: ../../topics/cache.txt:818
# 4391f64c34884b96a579b1330bcda922
msgid "Django provides a better way to target individual cache values. Django's cache framework has a system-wide version identifier, specified using the :setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting is automatically combined with the cache prefix and the user-provided cache key to obtain the final cache key."
msgstr ""

#: ../../topics/cache.txt:824
# 5abe42fe8595407a8b5d034d8cb48278
msgid "By default, any key request will automatically include the site default cache key version. However, the primitive cache functions all include a ``version`` argument, so you can specify a particular cache key version to set or get. For example::"
msgstr ""

#: ../../topics/cache.txt:838
# d8f6080af53d4c20b3d80759622b5c20
msgid "The version of a specific key can be incremented and decremented using the :func:`incr_version()` and :func:`decr_version()` methods. This enables specific keys to be bumped to a new version, leaving other keys unaffected. Continuing our previous example::"
msgstr ""

#: ../../topics/cache.txt:858
# 59760b92c52949a59e076430c6060600
msgid "Cache key transformation"
msgstr ""

#: ../../topics/cache.txt:860
# 53636af1312d40bda0ce426cadcf6654
msgid "As described in the previous two sections, the cache key provided by a user is not used verbatim -- it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string::"
msgstr ""

#: ../../topics/cache.txt:868
# be00c11d097944c98047751aad831a71
msgid "If you want to combine the parts in different ways, or apply other processing to the final key (e.g., taking a hash digest of the key parts), you can provide a custom key function."
msgstr ""

#: ../../topics/cache.txt:872
# 7b44dd94871a49a4a3416f6589d3b1e1
msgid "The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a dotted-path to a function matching the prototype of :func:`make_key()` above. If provided, this custom key function will be used instead of the default key combining function."
msgstr ""

#: ../../topics/cache.txt:878
# 7d7fde62f91440d49d1c80c8ad5a85f5
msgid "Cache key warnings"
msgstr ""

#: ../../topics/cache.txt:880
# 118269a569bf4fe2867cf5c23f2d7d93
msgid "Memcached, the most commonly-used production cache backend, does not allow cache keys longer than 250 characters or containing whitespace or control characters, and using such keys will cause an exception. To encourage cache-portable code and minimize unpleasant surprises, the other built-in cache backends issue a warning (``django.core.cache.backends.base.CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

#: ../../topics/cache.txt:887
# 93184d0addd649d69b511d6bf5f5c0d9
msgid "If you are using a production backend that can accept a wider range of keys (a custom backend, or one of the non-memcached built-in backends), and want to use this wider range without warnings, you can silence ``CacheKeyWarning`` with this code in the ``management`` module of one of your :setting:`INSTALLED_APPS`::"
msgstr ""

#: ../../topics/cache.txt:899
# adb628e933014db3bfce5d61bd4c4d89
msgid "If you want to instead provide custom key validation logic for one of the built-in backends, you can subclass it, override just the ``validate_key`` method, and follow the instructions for `using a custom cache backend`_. For instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

#: ../../topics/cache.txt:911
# 68fdd4be7c62461a99a363a0781269b8
msgid "...and use the dotted Python path to this class in the :setting:`BACKEND <CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

#: ../../topics/cache.txt:915
# 7b607682e736423ba62dd64b2cc0f27f
msgid "Upstream caches"
msgstr ""

#: ../../topics/cache.txt:917
# 9f1d00bf98fc4935bd54afc7f5faa68a
msgid "So far, this document has focused on caching your *own* data. But another type of caching is relevant to Web development, too: caching performed by \"upstream\" caches. These are systems that cache pages for users even before the request reaches your Web site."
msgstr ""

#: ../../topics/cache.txt:922
# bf34c9ea23f44b3387c506512d237458
msgid "Here are a few examples of upstream caches:"
msgstr ""

#: ../../topics/cache.txt:924
# 3cbeec17821c4c16b202e9de684ae68f
msgid "Your ISP may cache certain pages, so if you requested a page from http://example.com/, your ISP would send you the page without having to access example.com directly. The maintainers of example.com have no knowledge of this caching; the ISP sits between example.com and your Web browser, handling all of the caching transparently."
msgstr ""

#: ../../topics/cache.txt:930
# 33d0962cc39f44a58b81457d8a4d3d5b
msgid "Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy Cache (http://www.squid-cache.org/), that caches pages for performance. In this case, each request first would be handled by the proxy, and it would be passed to your application only if needed."
msgstr ""

#: ../../topics/cache.txt:935
# 6854dd7cfa4a4bdcbc269771bec5aa62
msgid "Your Web browser caches pages, too. If a Web page sends out the appropriate headers, your browser will use the local cached copy for subsequent requests to that page, without even contacting the Web page again to see whether it has changed."
msgstr ""

#: ../../topics/cache.txt:940
# 8410effa85f34fa4b94bfc0b3823a9ab
msgid "Upstream caching is a nice efficiency boost, but there's a danger to it: Many Web pages' contents differ based on authentication and a host of other variables, and cache systems that blindly save pages based purely on URLs could expose incorrect or sensitive data to subsequent visitors to those pages."
msgstr ""

#: ../../topics/cache.txt:945
# ba6fb7ef3633487983fe3ac1ccac87eb
msgid "For example, say you operate a Web email system, and the contents of the \"inbox\" page obviously depend on which user is logged in. If an ISP blindly cached your site, then the first user who logged in through that ISP would have his user-specific inbox page cached for subsequent visitors to the site. That's not cool."
msgstr ""

#: ../../topics/cache.txt:951
# d78d1861562f4c8fa5472f3120db6f95
msgid "Fortunately, HTTP provides a solution to this problem. A number of HTTP headers exist to instruct upstream caches to differ their cache contents depending on designated variables, and to tell caching mechanisms not to cache particular pages. We'll look at some of these headers in the sections that follow."
msgstr ""

#: ../../topics/cache.txt:959
# bf9eb784279e4d6b947875b8650455fb
msgid "Using Vary headers"
msgstr ""

#: ../../topics/cache.txt:961
# 80e89545c55148bbb64a130d6e19488c
msgid "The ``Vary`` header defines which request headers a cache mechanism should take into account when building its cache key. For example, if the contents of a Web page depend on a user's language preference, the page is said to \"vary on language.\""
msgstr ""

#: ../../topics/cache.txt:966
# 6a8152e2c2764195a9ad75981842e5aa
msgid "By default, Django's cache system creates its cache keys using the requested path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means every request to that URL will use the same cached version, regardless of user-agent differences such as cookies or language preferences. However, if this page produces different content based on some difference in request headers -- such as a cookie, or a language, or a user-agent -- you'll need to use the ``Vary`` header to tell caching mechanisms that the page output depends on those things."
msgstr ""

#: ../../topics/cache.txt:974
# 0a05c043bd3d40d8beb1ba74b1368b96
msgid "To do this in Django, use the convenient ``vary_on_headers`` view decorator, like so::"
msgstr ""

#: ../../topics/cache.txt:983
# ab981af8fc364bc3b91356e22d9fb17c
msgid "In this case, a caching mechanism (such as Django's own cache middleware) will cache a separate version of the page for each unique user-agent."
msgstr ""

#: ../../topics/cache.txt:986
# ae468148f2ec4b51a1f323b817bdbe4c
msgid "The advantage to using the ``vary_on_headers`` decorator rather than manually setting the ``Vary`` header (using something like ``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the ``Vary`` header (which may already exist), rather than setting it from scratch and potentially overriding anything that was already in there."
msgstr ""

#: ../../topics/cache.txt:992
# ba4a06f0bf9b4814ae38f00e474b4c37
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

#: ../../topics/cache.txt:998
# 3888e02dbb1d4c20b7d9620d0468f81b
msgid "This tells upstream caches to vary on *both*, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` will be considered different from a request with the user-agent ``Mozilla`` and the cookie value ``foo=ham``."
msgstr ""

#: ../../topics/cache.txt:1004
# b4bbaf3e0d4d4c2ab7c26ba2714097a1
msgid "Because varying on cookie is so common, there's a ``vary_on_cookie`` decorator. These two views are equivalent::"
msgstr ""

#: ../../topics/cache.txt:1015
# 97dace8464b24745bba6c9c8f6f47812
msgid "The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

#: ../../topics/cache.txt:1018
# d4b4ccec66294714a1574f1ed50693f2
msgid "You can also use a helper function, ``django.utils.cache.patch_vary_headers``, directly. This function sets, or adds to, the ``Vary header``. For example::"
msgstr ""

#: ../../topics/cache.txt:1029
# 9aff853cafaa4c2d95a00072820dc6d8
msgid "``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance as its first argument and a list/tuple of case-insensitive header names as its second argument."
msgstr ""

#: ../../topics/cache.txt:1033
# de80722325f943448263c61e9973a430
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

#: ../../topics/cache.txt:1038
# 7df3a714b6274b85a6572faccb5b4149
msgid "Controlling cache: Using other headers"
msgstr ""

#: ../../topics/cache.txt:1040
# 333784c2cdae400a9b9dcd6cbc2535ac
msgid "Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches."
msgstr ""

#: ../../topics/cache.txt:1043
# c3e94c153a2d4dadaa43110742b77c06
msgid "A user usually faces two kinds of caches: his or her own browser cache (a private cache) and his or her provider's cache (a public cache). A public cache is used by multiple users and controlled by someone else. This poses problems with sensitive data--you don't want, say, your bank account number stored in a public cache. So Web applications need a way to tell caches which data is private and which is public."
msgstr ""

#: ../../topics/cache.txt:1050
# bffc5f9fb8d14b3c8e9241412f30f1d3
msgid "The solution is to indicate a page's cache should be \"private.\" To do this in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

#: ../../topics/cache.txt:1059
# 87fc1f94cff64ae6b434e6007ea8fc74
msgid "This decorator takes care of sending out the appropriate HTTP header behind the scenes."
msgstr ""

#: ../../topics/cache.txt:1062
# f03112a927934dcbb3d81bf73ebad4e9
msgid "Note that the cache control settings \"private\" and \"public\" are mutually exclusive. The decorator ensures that the \"public\" directive is removed if \"private\" should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses ``patch_cache_control``, the manual way to modify the cache control header (it is internally called by the ``cache_control`` decorator)::"
msgstr ""

#: ../../topics/cache.txt:1084
# c6becf9918de44b285b2da3911f31eb2
msgid "There are a few other ways to control cache parameters. For example, HTTP allows applications to do the following:"
msgstr ""

#: ../../topics/cache.txt:1087
# 4930a39a90684330ac22ad4b6d19e4ca
msgid "Define the maximum time a page should be cached."
msgstr ""

#: ../../topics/cache.txt:1089
# ea5af0d89e8c4b4ab85e748fd6aaffea
msgid "Specify whether a cache should always check for newer versions, only delivering the cached content when there are no changes. (Some caches might deliver cached content even if the server page changed, simply because the cache copy isn't yet expired.)"
msgstr ""

#: ../../topics/cache.txt:1094
# dbea127d21d84c2494492bb8d40062d1
msgid "In Django, use the ``cache_control`` view decorator to specify these cache parameters. In this example, ``cache_control`` tells caches to revalidate the cache on every access and to store cached versions for, at most, 3,600 seconds::"
msgstr ""

#: ../../topics/cache.txt:1104
# 5668f60498aa4ba4bf3892a8661c8a37
msgid "Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. Here's a full list:"
msgstr ""

#: ../../topics/cache.txt:1107
# c27ec12a513a4412be1fb438efe785d0
msgid "``public=True``"
msgstr ""

#: ../../topics/cache.txt:1108
# 14b4d35cddcc415494de5bcadb43ae0d
msgid "``private=True``"
msgstr ""

#: ../../topics/cache.txt:1109
# bef47fff245a4bc296e65b71fa7c1c39
msgid "``no_cache=True``"
msgstr ""

#: ../../topics/cache.txt:1110
# 927ab484df5d499f81a78e6ff0e7317d
msgid "``no_transform=True``"
msgstr ""

#: ../../topics/cache.txt:1111
# 4fb53cea367c42d7a71350d651757262
msgid "``must_revalidate=True``"
msgstr ""

#: ../../topics/cache.txt:1112
# b6c7eb647eb74e86aafab39aa51d7043
msgid "``proxy_revalidate=True``"
msgstr ""

#: ../../topics/cache.txt:1113
# 477484b20d944c8692079e7953af63f4
msgid "``max_age=num_seconds``"
msgstr ""

#: ../../topics/cache.txt:1114
# 9cfe2dce844b4462bb97968e7cb44fb8
msgid "``s_maxage=num_seconds``"
msgstr ""

#: ../../topics/cache.txt:1116
# 12d5e33abe0c430d9d0d917433021309
msgid "For explanation of Cache-Control HTTP directives, see the `Cache-Control spec`_."
msgstr ""

#: ../../topics/cache.txt:1118
# 4f67059982a8492a82822d4e45b0ce47
msgid "(Note that the caching middleware already sets the cache header's max-age with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you use a custom ``max_age`` in a ``cache_control`` decorator, the decorator will take precedence, and the header values will be merged correctly.)"
msgstr ""

#: ../../topics/cache.txt:1123
# 4d47369c67224406bd9b122198de371f
msgid "If you want to use headers to disable caching altogether, ``django.views.decorators.cache.never_cache`` is a view decorator that adds headers to ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

#: ../../topics/cache.txt:1137
# f82d5b6ea5bb49109c922eeae2bb345b
msgid "Other optimizations"
msgstr ""

#: ../../topics/cache.txt:1139
# 58c405e9de1a42198419676d18a734a1
msgid "Django comes with a few other pieces of middleware that can help optimize your site's performance:"
msgstr ""

#: ../../topics/cache.txt:1142
# 36b54a3c3fd240318175a142b32422ff
msgid "``django.middleware.http.ConditionalGetMiddleware`` adds support for modern browsers to conditionally GET responses based on the ``ETag`` and ``Last-Modified`` headers."
msgstr ""

#: ../../topics/cache.txt:1146
# fedc2564a6a449c3ad59de9ac8335741
msgid ":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all modern browsers, saving bandwidth and transfer time."
msgstr ""

#: ../../topics/cache.txt:1150
# 463e1d5b2fc445158c4ade27689c7479
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

#: ../../topics/cache.txt:1152
# 468b88bb74b843028c4a1afbc97aa523
msgid "If you use caching middleware, it's important to put each half in the right place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the cache middleware needs to know which headers by which to vary the cache storage. Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""

#: ../../topics/cache.txt:1157
# e84bc980731c4df5a371668856b9386a
msgid "``UpdateCacheMiddleware`` runs during the response phase, where middleware is run in reverse order, so an item at the top of the list runs *last* during the response phase. Thus, you need to make sure that ``UpdateCacheMiddleware`` appears *before* any other middleware that might add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

#: ../../topics/cache.txt:1163
# fe80a97a125842ab81c24c75de1f113b
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

#: ../../topics/cache.txt:1164
# dd02d2f941144848823841d6b5d0e14e
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

#: ../../topics/cache.txt:1165
# 5e403ff312194d0dbd5c1c572c3c36b3
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

#: ../../topics/cache.txt:1167
# 2cd695e4b7b049ddbb549d17acb1dd16
msgid "``FetchFromCacheMiddleware``, on the other hand, runs during the request phase, where middleware is applied first-to-last, so an item at the top of the list runs *first* during the request phase. The ``FetchFromCacheMiddleware`` also needs to run after other middleware updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* any item that does so."
msgstr ""

#: ../../topics/class-based-views.txt:3
#: ../../topics/class-based-views/generic-display.txt:5
# b04ce72b8f4b4332a4ca832c42f09fc5
# d94beff8d65940fcbb8946edeb88db5a
msgid "Class-based generic views"
msgstr ""

#: ../../topics/class-based-views.txt:8
# a908a22459334b7e83e78d8c702c23f3
msgid "Prior to Django 1.3, generic views were implemented as functions. The function-based implementation has been deprecated in favor of the class-based approach described here."
msgstr ""

#: ../../topics/class-based-views.txt:12
# ca6205f6ab77470e80a7f0b75685c9bb
msgid "For details on the previous generic views implementation, see the :doc:`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/generic-views>`."
msgstr ""

#: ../../topics/class-based-views.txt:16
#: ../../topics/class-based-views/generic-display.txt:7
#: ../../topics/generic-views.txt:15
# 407caa8b81c84c82916e7d66c6a581e8
# 80a625ffb6a04778a7c16b500dc4e223
# c76a2f599d444b04b8f20e8f94b799d6
msgid "Writing Web applications can be monotonous, because we repeat certain patterns again and again. Django tries to take away some of that monotony at the model and template layers, but Web developers also experience this boredom at the view level."
msgstr ""

#: ../../topics/class-based-views.txt:21
#: ../../topics/class-based-views/generic-display.txt:12
#: ../../topics/generic-views.txt:20
# 110c3907f2a34d488e72c7e04020697c
# be2e703a3be04dbfb6af6545031fad37
# 5434fabb26bc418b8f754f9264249bdd
msgid "Django's *generic views* were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code."
msgstr ""

#: ../../topics/class-based-views.txt:26
#: ../../topics/class-based-views/generic-display.txt:17
#: ../../topics/generic-views.txt:25
# ecc087fd4ce94548b968cd8eecfaa344
# 1ab60afd94d341f7bc266b78914f72cb
# 13677b2039374840b0466732523756ed
msgid "We can recognize certain common tasks, like displaying a list of objects, and write code that displays a list of *any* object. Then the model in question can be passed as an extra argument to the URLconf."
msgstr ""

#: ../../topics/class-based-views.txt:30
#: ../../topics/class-based-views/generic-display.txt:21
#: ../../topics/generic-views.txt:29
# 00dc89b7ecd84bc0bb5fbc5bd3f57be4
# 5bb4edf840d84a85b9372d2c736daeea
# 5623e8ab48614cde88e165122e68b1e6
msgid "Django ships with generic views to do the following:"
msgstr ""

#: ../../topics/class-based-views.txt:32
#: ../../topics/generic-views.txt:31
# fb00c0d8a79e47f3ae5da02a49d1bc0e
# 73a9f70bb1f948f0b7882455f445cd30
msgid "Perform common \"simple\" tasks: redirect to a different page and render a given template."
msgstr ""

#: ../../topics/class-based-views.txt:35
#: ../../topics/class-based-views/generic-display.txt:23
# 6cbfb1cb0f8c4ae98e3c5d733df5a32b
# 00ea6b0be5734c42abb87e00ab62ff34
msgid "Display list and detail pages for a single object. If we were creating an application to manage conferences then a ``TalkListView`` and a ``RegisteredUserListView`` would be examples of list views. A single talk page is an example of what we call a \"detail\" view."
msgstr ""

#: ../../topics/class-based-views.txt:40
# b774d2cad9324cc69b0b2d0c29a57992
msgid "Present date-based objects in year/month/day archive pages, associated detail, and \"latest\" pages. `The Django Weblog <https://www.djangoproject.com/weblog/>`_'s year, month, and day archives are built with these, as would be a typical newspaper's archives."
msgstr ""

#: ../../topics/class-based-views.txt:46
#: ../../topics/class-based-views/generic-display.txt:31
#: ../../topics/generic-views.txt:45
# b0a262604fc54e4eb80c0c3fd2adb17c
# 689157aa3135491f9c3f2a01fd8f1578
# a4a72cd8986e4ce5836c0af1f9cf13be
msgid "Allow users to create, update, and delete objects -- with or without authorization."
msgstr ""

#: ../../topics/class-based-views.txt:49
#: ../../topics/class-based-views/generic-display.txt:34
#: ../../topics/generic-views.txt:48
# a41641a5b4ed40eda826c11b681ab33f
# 1932eacf165147b8bc404897a3794b7f
# 51e0eb03c0cf48c79857e9ffcb74dc56
msgid "Taken together, these views provide easy interfaces to perform the most common tasks developers encounter."
msgstr ""

#: ../../topics/class-based-views.txt:54
# e7115ae6ff65474aa1a9393523943b1e
msgid "Simple usage"
msgstr ""

#: ../../topics/class-based-views.txt:56
# 81548c6647e34d50a4e5f9826353d938
msgid "Class-based generic views (and any class-based views that inherit from the base classes Django provides) can be configured in two ways: subclassing, or passing in arguments directly in the URLconf."
msgstr ""

#: ../../topics/class-based-views.txt:60
# 838da9cb20fa4cc3ae67acffa5d54dc0
msgid "When you subclass a class-based view, you can override attributes (such as the ``template_name``) or methods (such as ``get_context_data``) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, ``about.html``. Django has a generic view to do this - :class:`~django.views.generic.base.TemplateView` - so we can just subclass it, and override the template name::"
msgstr ""

#: ../../topics/class-based-views.txt:73
# c12a97283e84411e9412a4e3d27c17d7
msgid "Then, we just need to add this new view into our URLconf. As the class-based views themselves are classes, we point the URL to the ``as_view`` class method instead, which is the entry point for class-based views::"
msgstr ""

#: ../../topics/class-based-views.txt:85
# a3dc7d7fc11c40bfb5cea904757df2ea
msgid "Alternatively, if you're only changing a few simple attributes on a class-based view, you can simply pass the new attributes into the ``as_view`` method call itself::"
msgstr ""

#: ../../topics/class-based-views.txt:96
# be699c27390a42689985cb1f919406ac
msgid "A similar overriding pattern can be used for the ``url`` attribute on :class:`~django.views.generic.base.RedirectView`, another simple generic view."
msgstr ""

#: ../../topics/class-based-views.txt:102
#: ../../topics/class-based-views/generic-display.txt:63
#: ../../topics/generic-views.txt:128
# bc7447754b6b4684905e3c9f45f9b23a
# 7a361d6a510442f8a848373f7e0e911f
# c595709e4c9f4539aa181448816ea063
msgid "Generic views of objects"
msgstr ""

#: ../../topics/class-based-views.txt:104
#: ../../topics/class-based-views/generic-display.txt:65
# 8fd423da96514c37b17e2227ebe77f5d
# 275879c2ce2048a1a5a9c62320f95114
msgid ":class:`~django.views.generic.base.TemplateView` certainly is useful, but Django's generic views really shine when it comes to presenting views of your database content. Because it's such a common task, Django comes with a handful of built-in generic views that make generating list and detail views of objects incredibly easy."
msgstr ""

#: ../../topics/class-based-views.txt:110
#: ../../topics/generic-views.txt:135
# 1308e2062f4a453f929388dbe60adde6
# 5fe614cf7e2d474f88801eed260345fd
msgid "Let's take a look at one of these generic views: the \"object list\" view. We'll be using these models::"
msgstr ""

#: ../../topics/class-based-views.txt:136
#: ../../topics/generic-views.txt:161
# b66f573bb53b42ed8850d6a0c5f68350
# 2a942ed953d34aef8a2f9e656912a282
msgid "To build a list page of all publishers, we'd use a URLconf along these lines::"
msgstr ""

#: ../../topics/class-based-views.txt:148
# 5849d5fb690e437d87f8a2359bc47ff4
msgid "That's all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by including a ``template_name`` key in the arguments to as_view, but in the absence of an explicit template Django will infer one from the object's name. In this case, the inferred template will be ``\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of the app that defines the model, while the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../topics/class-based-views.txt:158
# 6b9a9677feb2486ea8d6cc063f4e27f0
msgid "Thus, when (for example) the :class:`django.template.loaders.app_directories.Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, the template location would be::"
msgstr ""

#: ../../topics/class-based-views.txt:166
#: ../../topics/class-based-views/generic-display.txt:137
#: ../../topics/generic-views.txt:186
# b0eb7c771ef64e6197525399b4f887b0
# 147b12ee024d49f4a8d7b6bf5f5466a3
# 986c47bce5834426be3840c4c39e1baf
msgid "This template will be rendered against a context containing a variable called ``object_list`` that contains all the publisher objects. A very simple template might look like the following::"
msgstr ""

#: ../../topics/class-based-views.txt:181
# 48af5ce71df34b2ca0230410dc313d24
msgid "That's really all there is to it. All the cool features of generic views come from changing the \"info\" dictionary passed to the generic view. The :doc:`generic views reference</ref/class-based-views>` documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../topics/class-based-views.txt:189
#: ../../topics/class-based-views/generic-display.txt:39
#: ../../topics/generic-views.txt:208
# 73b4576ff96944beb75226d5d8e3ae6d
# 3259052c91ca442bbdc80af4e3db7201
# cb6ddb5891fc405c84112c95fafabc6e
msgid "Extending generic views"
msgstr ""

#: ../../topics/class-based-views.txt:193
#: ../../topics/class-based-views/generic-display.txt:41
#: ../../topics/generic-views.txt:212
# bf32c0247677430f8699de187f3d30f9
# 9f2652b18d074feeb3e170bf3c9760ba
# a546460395de4e7f8ac72ab429448c28
msgid "There's no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations."
msgstr ""

#: ../../topics/class-based-views.txt:199
#: ../../topics/class-based-views/generic-display.txt:47
# 64ae4bb4bc464225af22f40cd0cf62e0
# 09abee59723e416a837dceecef021566
msgid "This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were just view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods."
msgstr ""

#: ../../topics/class-based-views.txt:207
#: ../../topics/class-based-views/generic-display.txt:160
#: ../../topics/generic-views.txt:223
# fc48d13042f44f7182a270ea4c91946f
# 0e687c9649c943629bfe8c76023c9427
# 6cc554ed663a416e84cdf0ac77636a74
msgid "Making \"friendly\" template contexts"
msgstr ""

#: ../../topics/class-based-views.txt:209
#: ../../topics/class-based-views/generic-display.txt:164
# be2d3f85f50e4b44b9d37eeb496302b7
# cf747c1d79624bc9b7dbd0ee0a398ccf
msgid "You might have noticed that our sample publisher list template stores all the publishers in a variable named ``object_list``. While this works just fine, it isn't all that \"friendly\" to template authors: they have to \"just know\" that they're dealing with publishers here."
msgstr ""

#: ../../topics/class-based-views.txt:214
# 9a25a571f28745d69efe389fd6a10fa4
msgid "Well, if you're dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the verbose name (or the plural verbose name, in the case of a list of objects) of the object being displayed. This is provided in addition to the default ``object_list`` entry, but contains exactly the same data."
msgstr ""

#: ../../topics/class-based-views.txt:221
# 9a7dbde5640b4a958cd42ebce5ac4a07
msgid "If the verbose name (or plural verbose name) still isn't a good match, you can manually set the name of the context variable. The ``context_object_name`` attribute on a generic view specifies the context variable to use. In this example, we'll override it in the URLconf, since it's a simple change:"
msgstr ""

#: ../../topics/class-based-views.txt:236
#: ../../topics/class-based-views/generic-display.txt:187
# 7c6b04e02f134a57af3ec45c9b285363
# d164bd91efb44b4ab12715cec81ac368
msgid "Providing a useful ``context_object_name`` is always a good idea. Your coworkers who design templates will thank you."
msgstr ""

#: ../../topics/class-based-views.txt:241
#: ../../topics/class-based-views/generic-display.txt:192
#: ../../topics/generic-views.txt:249
# c56802a80e2d47f7bef84630aa616344
# 0d1d21d2383c4236a6f86ec41e2de7f0
# a8a2b5dfc3e242779326a7fbd6aae84f
msgid "Adding extra context"
msgstr ""

#: ../../topics/class-based-views.txt:243
# 898e80714e0042b7897540ea2f1e8bed
msgid "Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The :class:`~django.views.generic.detail.DetailView` generic view provides the publisher to the context, but it seems there's no way to get additional information in that template."
msgstr ""

#: ../../topics/class-based-views.txt:250
# c6654037b17843d2b45429dbe5345a4c
msgid "However, there is; you can subclass :class:`~django.views.generic.detail.DetailView` and provide your own implementation of the ``get_context_data`` method. The default implementation of this that comes with :class:`~django.views.generic.detail.DetailView` simply adds in the object being displayed to the template, but you can override it to show more::"
msgstr ""

#: ../../topics/class-based-views.txt:275
#: ../../topics/class-based-views/generic-display.txt:238
#: ../../topics/generic-views.txt:322
# 3b32624b04d84009aba45b1db9113dfa
# 0812f2f348f649d5ba14a37255817867
# 489af83cb8ee4e368c1fefae1ef40717
msgid "Viewing subsets of objects"
msgstr ""

#: ../../topics/class-based-views.txt:277
#: ../../topics/class-based-views/generic-display.txt:240
# a7c91525f324466380f8cdf86211819e
# bbc507c24719438f80abf61cd6db9799
msgid "Now let's take a closer look at the ``model`` argument we've been using all along. The ``model`` argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the ``model`` argument is not the only way to specify the objects that the view will operate upon -- you can also specify the list of objects using the ``queryset`` argument::"
msgstr ""

#: ../../topics/class-based-views.txt:293
# 380f01a4156a4947b452765219f3a2e8
msgid "Specifying ``model = Publisher`` is really just shorthand for saying ``queryset = Publisher.objects.all()``. However, by using ``queryset`` to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see :doc:`/topics/db/queries` for more information about :class:`QuerySet` objects, and see the :doc:`class-based views reference </ref/class-based-views>` for the complete details)."
msgstr ""

#: ../../topics/class-based-views.txt:301
#: ../../topics/class-based-views/generic-display.txt:264
# 3bfcd5339f1c4b60ad5c67ba8fde5a2d
# 245a51114329439ba0b5a1676d04843f
msgid "To pick a simple example, we might want to order a list of books by publication date, with the most recent first::"
msgstr ""

#: ../../topics/class-based-views.txt:316
# cdb4d2c6e71b46dc9680e01a5da5dcb1
msgid "That's a pretty simple example, but it illustrates the idea nicely. Of course, you'll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique (here, illustrated using subclassing rather than by passing arguments in the URLconf)::"
msgstr ""

#: ../../topics/class-based-views.txt:331
#: ../../topics/class-based-views/generic-display.txt:288
#: ../../topics/generic-views.txt:362
# 014d27f23ae04ee9ac2b22ecf807be57
# 140763ef0525491d9725129eb8092237
# ebcc4f86a90c49bd8af13b41c4153e00
msgid "Notice that along with a filtered ``queryset``, we're also using a custom template name. If we didn't, the generic view would use the same template as the \"vanilla\" object list, which might not be what we want."
msgstr ""

#: ../../topics/class-based-views.txt:335
#: ../../topics/class-based-views/generic-display.txt:292
#: ../../topics/generic-views.txt:366
# 0db144c1b7004d9f89385ae009f7c185
# 93ff5d342ea94232bfaed000ec7d058d
# ecaa2efdf157463c8607baf269f9b923
msgid "Also notice that this isn't a very elegant way of doing publisher-specific books. If we want to add another publisher page, we'd need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We'll deal with this problem in the next section."
msgstr ""

#: ../../topics/class-based-views.txt:342
# 758ad61541e144f39120d9dd2712920a
msgid "If you get a 404 when requesting ``/books/acme/``, check to ensure you actually have a Publisher with the name 'ACME Publishing'.  Generic views have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-views reference</ref/class-based-views>` for more details."
msgstr ""

#: ../../topics/class-based-views.txt:349
#: ../../topics/class-based-views/generic-display.txt:307
# 090988a26cc843e3a15bdea94e335b53
# 6cbc04c431bd44d88d9175d5fbafb76f
msgid "Dynamic filtering"
msgstr ""

#: ../../topics/class-based-views.txt:351
#: ../../topics/class-based-views/generic-display.txt:309
# efc6937419464129b6c9deeec9d678d2
# 77df39bbff594b8c9803edcfb5e7043a
msgid "Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher's name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?"
msgstr ""

#: ../../topics/class-based-views.txt:356
#: ../../topics/class-based-views/generic-display.txt:314
# ef14ae5f7787454aaaf7c458ba7b4794
# ea97b67ba01e462c896d16725e2bf97b
msgid "Handily, the ``ListView`` has a :meth:`~django.views.generic.detail.ListView.get_queryset` method we can override. Previously, it has just been returning the value of the ``queryset`` attribute, but now we can add more logic."
msgstr ""

#: ../../topics/class-based-views.txt:361
#: ../../topics/class-based-views/generic-display.txt:319
# 2898258f866141d0b6e2beb50e504fe5
# 080c4f6b711a4b3bb65f83a1520afbfe
msgid "The key part to making this work is that when class-based views are called, various useful things are stored on ``self``; as well as the request (``self.request``) this includes the positional (``self.args``) and name-based (``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

#: ../../topics/class-based-views.txt:366
#: ../../topics/class-based-views/generic-display.txt:324
# a2203743378845efb4ad449d42550de7
# 13e786f1c03e49a5af749625cfec49be
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

#: ../../topics/class-based-views.txt:374
# b3da3bd133554ee69764c50ec1f95fb3
msgid "Next, we'll write the ``PublisherBookListView`` view itself::"
msgstr ""

#: ../../topics/class-based-views.txt:389
#: ../../topics/class-based-views/generic-display.txt:348
# d1b4142c39e448858157764d696c94ef
# 58f48604c6804fae8a69259f57d2c6d3
msgid "As you can see, it's quite easy to add more logic to the queryset selection; if we wanted, we could use ``self.request.user`` to filter using the current user, or other more complex logic."
msgstr ""

#: ../../topics/class-based-views.txt:393
#: ../../topics/class-based-views/generic-display.txt:352
# 94f2744d6cad4355a03f9015837744f3
# f932a1a35f214ac5bb932fab24231d2e
msgid "We can also add the publisher into the context at the same time, so we can use it in the template::"
msgstr ""

#: ../../topics/class-based-views.txt:413
#: ../../topics/class-based-views/generic-display.txt:367
#: ../../topics/generic-views.txt:433
# 4b3988aac1f64749894d4e4af82263be
# bc2f62495c094c56b830145f4373ee35
# 6ade1419ec754396a38b6ce09739ad5c
msgid "Performing extra work"
msgstr ""

#: ../../topics/class-based-views.txt:415
#: ../../topics/class-based-views/generic-display.txt:369
#: ../../topics/generic-views.txt:435
# 166f833558c446329642e10fd68db440
# a03c312969a243c3ab123a5684aab241
# 6e2a40b6726b40edbad898cd6cce5c86
msgid "The last common pattern we'll look at involves doing some extra work before or after calling the generic view."
msgstr ""

#: ../../topics/class-based-views.txt:418
#: ../../topics/class-based-views/generic-display.txt:372
#: ../../topics/generic-views.txt:438
# 7e415a1a5ddc4d0d80ca38795b471407
# 26f48a9ddc754f9683395b9405b548db
# 265dee5b270140378d801db45dad9071
msgid "Imagine we had a ``last_accessed`` field on our ``Author`` object that we were using to keep track of the last time anybody looked at that author::"
msgstr ""

#: ../../topics/class-based-views.txt:431
#: ../../topics/class-based-views/generic-display.txt:384
# 5da6c177bed743e7bed94ebccaa5de83
# 6af18abff8d54d2891a746dd7d743893
msgid "The generic ``DetailView`` class, of course, wouldn't know anything about this field, but once again we could easily write a custom view to keep that field updated."
msgstr ""

#: ../../topics/class-based-views.txt:435
#: ../../topics/generic-views.txt:455
# 0a6ff4e0993e4b1c919fe65518e8325e
# 0fe0bf7bf5c143189975cc210c0fbd47
msgid "First, we'd need to add an author detail bit in the URLconf to point to a custom view:"
msgstr ""

#: ../../topics/class-based-views.txt:447
#: ../../topics/class-based-views/generic-display.txt:398
# 4cc10324bd6344798355934a753dba74
# 6b1e25b9fb5742feada77a1ef8216518
msgid "Then we'd write our new view -- ``get_object`` is the method that retrieves the object -- so we simply override it and wrap the call::"
msgstr ""

#: ../../topics/class-based-views.txt:470
#: ../../topics/generic-views.txt:491
# 2edf40aa950c471dbd8e89feea0d9150
# 463d401250c44173b675e64c465b08a8
msgid "This code won't actually work unless you create a ``books/author_detail.html`` template."
msgstr ""

#: ../../topics/class-based-views.txt:475
#: ../../topics/class-based-views/generic-display.txt:421
# 12883ad0fd854f5fbb5f920f652a9dc8
# 79a00efeaf0444bca278184b3f54a06c
msgid "The URLconf here uses the named group ``pk`` - this name is the default name that ``DetailView`` uses to find the value of the primary key used to filter the queryset."
msgstr ""

#: ../../topics/class-based-views.txt:479
# 506f42cfe67d4f5d8ab66c4d2b6b1b7c
msgid "If you want to change it, you'll need to do your own ``get()`` call on ``self.queryset`` using the new named parameter from ``self.kwargs``."
msgstr ""

#: ../../topics/class-based-views.txt:483
#: ../../topics/class-based-views/mixins.txt:603
# 9cfff141667a463b815d39997ac5c09f
# 99ce8dfe01f34167ab91840b809e02e9
msgid "More than just HTML"
msgstr ""

#: ../../topics/class-based-views.txt:485
# 0d5ddf5cb456424cb707767c1aa2f811
msgid "So far, we've been focusing on rendering templates to generate responses. However, that's not all generic views can do."
msgstr ""

#: ../../topics/class-based-views.txt:488
# 91948d27aaed45fbbf36adb2ff960eb4
msgid "Each generic view is composed out of a series of mixins, and each mixin contributes a little piece of the entire view. Some of these mixins -- such as :class:`~django.views.generic.base.TemplateResponseMixin` -- are specifically designed for rendering content to an HTML response using a template. However, you can write your own mixins that perform different rendering behavior."
msgstr ""

#: ../../topics/class-based-views.txt:496
#: ../../topics/class-based-views/mixins.txt:612
# 278a93207a174d849edbb8dda0679140
# 41f2aac6ecc542b5a7fa6319cc1c7998
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

#: ../../topics/class-based-views.txt:520
# 8f8fb6caa4f940c19c0aab6cfeefd3f5
msgid "Then, you could build a JSON-returning :class:`~django.views.generic.detail.DetailView` by mixing your :class:`JSONResponseMixin` with the :class:`~django.views.generic.detail.BaseDetailView` -- (the :class:`~django.views.generic.detail.DetailView` before template rendering behavior has been mixed in)::"
msgstr ""

#: ../../topics/class-based-views.txt:530
#: ../../topics/class-based-views/mixins.txt:658
# 304b3960a0284648839b38ba59909079
# 3f2982e85ef4420b933851fe431b237f
msgid "This view can then be deployed in the same way as any other :class:`~django.views.generic.detail.DetailView`, with exactly the same behavior -- except for the format of the response."
msgstr ""

#: ../../topics/class-based-views.txt:534
#: ../../topics/class-based-views/mixins.txt:662
# d45bdfe3c31d4cdcbb819737927de04c
# 8231473f304b4861833498e85b2535f7
msgid "If you want to be really adventurous, you could even mix a :class:`~django.views.generic.detail.DetailView` subclass that is able to return *both* HTML and JSON content, depending on some property of the HTTP request, such as a query argument or a HTTP header. Just mix in both the :class:`JSONResponseMixin` and a :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, and override the implementation of :func:`render_to_response()` to defer to the appropriate subclass depending on the type of response that the user requested::"
msgstr ""

#: ../../topics/class-based-views.txt:552
#: ../../topics/class-based-views/mixins.txt:680
# 888025db25a94e2c9c3e90d958c00034
# 1409941072de447586c321bdcd0aa67d
msgid "Because of the way that Python resolves method overloading, the local ``render_to_response()`` implementation will override the versions provided by :class:`JSONResponseMixin` and :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`."
msgstr ""

#: ../../topics/class-based-views.txt:558
#: ../../topics/class-based-views/index.txt:132
# 36fdb6d4c7e04a8bb3dd2e35ca6264c0
# 451f3e761e644ab0b2626c46f645e34e
msgid "Decorating class-based views"
msgstr ""

#: ../../topics/class-based-views.txt:562
# 57cd5a380ef44f8ea711a65c6f63ca8e
msgid "The extension of class-based views isn't limited to using mixins. You can use also use decorators."
msgstr ""

#: ../../topics/class-based-views.txt:566
#: ../../topics/class-based-views/index.txt:140
# 20a30c1e0c1649d28e1e103468792648
# 4e3c4ad4246d42a8921b632deb1969c3
msgid "Decorating in URLconf"
msgstr ""

#: ../../topics/class-based-views.txt:568
#: ../../topics/class-based-views/index.txt:142
# 104eb1f34c8345fa8cb64223d5a5fe61
# 95972a5fc9044afaa1cc4cf061c8a862
msgid "The simplest way of decorating class-based views is to decorate the result of the :meth:`~django.views.generic.base.View.as_view` method. The easiest place to do this is in the URLconf where you deploy your view::"
msgstr ""

#: ../../topics/class-based-views.txt:583
#: ../../topics/class-based-views/index.txt:156
# 55b90e01128342368f37f63ca571e15b
# 451bc2a01b2a4eb8b0eac821c95c8fac
msgid "This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach."
msgstr ""

#: ../../topics/class-based-views.txt:590
#: ../../topics/class-based-views/index.txt:163
# 0401c9f5cef3470e81615bcecbfafd3d
# fbf8c3f941984a95978f9a4ac9d55be9
msgid "Decorating the class"
msgstr ""

#: ../../topics/class-based-views.txt:592
#: ../../topics/class-based-views/index.txt:165
# f33c65e444f048018a6a10cf251d328f
# fdaf05a5aef340198ed9cc2836a395ee
msgid "To decorate every instance of a class-based view, you need to decorate the class definition itself. To do this you apply the decorator to the :meth:`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

#: ../../topics/class-based-views.txt:596
#: ../../topics/class-based-views/index.txt:169
# 15eec45203964ae987316c2a5edcc41b
# ef7b6171c1f64395a593eaf9887ea00b
msgid "A method on a class isn't quite the same as a standalone function, so you can't just apply a function decorator to the method -- you need to transform it into a method decorator first. The ``method_decorator`` decorator transforms a function decorator into a method decorator so that it can be used on an instance method. For example::"
msgstr ""

#: ../../topics/class-based-views.txt:613
#: ../../topics/class-based-views/index.txt:186
# 65dca8a2dc2f488493173fbd29466b09
# f1a89197a24e43c09c40f7c0c22f3513
msgid "In this example, every instance of ``ProtectedView`` will have login protection."
msgstr ""

#: ../../topics/class-based-views.txt:618
#: ../../topics/class-based-views/index.txt:191
# e84e7ee97b8a4cd8bdd246306c840721
# 36f5cab42a6c4faaa91c7dcde5377b66
msgid "``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the decorated method on the class. If your method does not accept a compatible set of parameters it will raise a ``TypeError`` exception."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:28
# e5bdeab58dfd4549b548b0859c0a6e54
msgid "Present date-based objects in year/month/day archive pages, associated detail, and \"latest\" pages."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:53
# 92e818e35c2c4f0096edea02813cf98a
msgid "That said, generic views will have a limit. If you find you're struggling to implement your view as a subclass of a generic view, then you may find it more effective to write just the code you need, using your own class-based or functional views."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:58
# c2adc1cd72284d42b1766638d10f0d45
msgid "More examples of generic views are available in some third party applications, or you could write your own as needed."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:71
# fc5e5caae3044acd802db462bd5a889c
msgid "Let's start by looking at some examples of showing a list of objects or an individual object."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:76
# e5c16221d4154eaba73ae46d1d559e08
msgid "We'll be using these models::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:101
# 853129be5c81480d8d31553dabf966f5
msgid "Now we need to define a view::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:110
# c60b14faf50d4d1b9491e5d3a7ec31d5
msgid "Finally hook that view into your urls::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:120
# 48768ca9093a4532a6282c7c378cd259
msgid "That's all the Python code we need to write. We still need to write a template, however. We could explicitly tell the view which template to use by adding a ``template_name`` attribute to the view, but in the absence of an explicit template Django will infer one from the object's name. In this case, the inferred template will be ``\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of the app that defines the model, while the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:130
# 1d41860564084892b61c1e64111b15e9
msgid "Thus, when (for example) the :class:`django.template.loaders.app_directories.Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, a template location could be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:152
# 2095e5155f1d479b80830db1f431a1ff
msgid "That's really all there is to it. All the cool features of generic views come from changing the attributes set on the generic view. The :doc:`generic views reference</ref/class-based-views/index>` documents all the generic views and their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:169
# b907b01aab194a59becd6c84fab1df39
msgid "Well, if you're dealing with a model object, this is already done for you. When you are dealing with an object or queryset, Django is able to populate the context using the lower cased version of the model class' name. This is provided in addition to the default ``object_list`` entry, but contains exactly the same data, i.e. ``publisher_list``."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:175
# 755e5256ad1a4227b2d245fb55fc9cb6
msgid "If the this still isn't a good match, you can manually set the name of the context variable. The ``context_object_name`` attribute on a generic view specifies the context variable to use::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:194
# d3bb9491539d40b8914014f5f2e5870a
msgid "Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The :class:`~django.views.generic.detail.DetailView` generic view provides the publisher to the context, but how do we get additional information in that template."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:201
# 83f9e6b949524de7b4372a5bb2a4c677
msgid "However, there is; you can subclass :class:`~django.views.generic.detail.DetailView` and provide your own implementation of the ``get_context_data`` method. The default implementation of this that comes with :class:`~django.views.generic.detail.DetailView` simply adds in the object being displayed to the template, but you can override it to send more::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:225
# 43485e8535064b4f8415301bf7fa3e5d
msgid "Generally, get_context_data will merge the context data of all parent classes with those of the current class. To preserve this behavior in your own classes where you want to alter the context, you should be sure to call get_context_data on the super class. When no two classes try to define the same key, this will give the expected results. However if any class attempts to override a key after parent classes have set it (after the call to super), any children of that class will also need to explictly set it after super if they want to be sure to override all parents. If you're having trouble, review the method resolution order of your view."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:256
# a4d958463d974abc9ed35a852c9acf5b
msgid "Specifying ``model = Publisher`` is really just shorthand for saying ``queryset = Publisher.objects.all()``. However, by using ``queryset`` to define a filtered list of objects you can be more specific about the objects that will be visible in the view (see :doc:`/topics/db/queries` for more information about :class:`QuerySet` objects, and see the :doc:`class-based views reference </ref/class-based-views/index>` for the complete details)."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:274
# 565a30556cdf416f9c27a22bd6d39c58
msgid "That's a pretty simple example, but it illustrates the idea nicely. Of course, you'll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:299
# 5341db7150034f4cb86bfd352730f133
msgid "If you get a 404 when requesting ``/books/acme/``, check to ensure you actually have a Publisher with the name 'ACME Publishing'.  Generic views have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-views reference</ref/class-based-views/index>` for more details."
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:333
# d0054cf1e77241aa8deae8926081ce70
msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:388
# 7ecd5e65504e42c49bd883d9ce65d1e3
msgid "First, we'd need to add an author detail bit in the URLconf to point to a custom view::"
msgstr ""

#: ../../topics/class-based-views/generic-display.txt:425
# ec07edf546334ecabf7e061b65efc435
msgid "If you want to call the group something else, you can set ``pk_url_kwarg`` on the view. More details can be found in the reference for :class:`~django.views.generic.detail.DetailView`"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:2
# 2058a7459a714ed993cd3be039fdebd6
msgid "Form handling with class-based views"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:4
# 68f91c2cf15148999c380ad0e3ce806e
msgid "Form processing generally has 3 paths:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:6
# 8ac30c7f2ee844c79adb36f61d4282a3
msgid "Initial GET (blank or prepopulated form)"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:7
# 7280550b50dc4f90a4f208b4a1d43cc8
msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:8
# 94ad118429784816a13a53cf107aed37
msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:10
# aa2f986ef90c44618a244a788bc3cfeb
msgid "Implementing this yourself often results in a lot of repeated boilerplate code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help avoid this, Django provides a collection of generic class-based views for form processing."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:16
# ea1b22542d8f418086fd1ecbac5b637a
msgid "Basic Forms"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:18
# 23230388abf14cbdb2c8bf7baba0f9b9
msgid "Given a simple contact form::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:31
# d5878cc887804798b1d45fa111a494e1
msgid "The view can be constructed using a FormView::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:48
#: ../../topics/http/urls.txt:79
#: ../../topics/i18n/translation.txt:1435
# 0f4b71120e8a40a58a294acd62e81a87
# 68c2076a598f4dfabb19ef9caaa78bf3
# 0e04d9c82ddc4bdfba300ee44a9876d6
msgid "Notes:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:50
# 55c2f7e1dce04a4e9c60a56562f84eba
msgid "FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` can be used here"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:54
# 86a8406a91434f13846ebeb61b48c55c
msgid "The default implementation for :meth:`~django.views.generic.edit.FormView.form_valid` simply redirects to the :attr:`success_url`"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:59
# 424bd75649ba44ab812542b74ad375e8
msgid "Model Forms"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:61
# 7965e8fc043b4d1b9248d03e259f5339
msgid "Generic views really shine when working with models.  These generic views will automatically create a :class:`ModelForm`, so long as they can work out which model class to use:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:65
# e75e5ed089fd4c4bb1cce2c1f0dd3b97
msgid "If the :attr:`model` attribute is given, that model class will be used"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:66
# 70e31f9cc43e48c5886e5c2b95b79dc8
msgid "If :meth:`get_object()` returns an object, the class of that object will be used"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:68
# 5c101fb811124327a15d99b22a0c9517
msgid "If a :attr:`queryset` is given, the model for that queryset will be used"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:70
# 736e6e49215e4d6e82b289ae660ba32f
msgid "Model form views provide a :meth:`form_valid()` implementation that saves the model automatically.  You can override this if you have any special requirements; see below for examples."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:74
# 6a44cab8639446bf9969929cd26e3a99
msgid "You don't even need to provide a attr:`success_url` for :class:`~django.views.generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - they will use :meth:`get_absolute_url()` on the model object if available."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:79
# c9cd24a3e9574252bb21976c3993d22f
msgid "If you want to use a custom :class:`ModelForm` (for instance to add extra validation) simply set :attr:`~django.views.generic.edit.FormMixin.form_class` on your view."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:84
# 52fbe7376ddf4ac1a74513b48c2c5528
msgid "When specifying a custom form class, you must still specify the model, even though the :attr:`form_class` may be a :class:`ModelForm`."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:87
# 3a1671ac656748d2abe8ee8caf800ffe
msgid "First we need to add :meth:`get_absolute_url()` to our :class:`Author` class:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:102
# 7f5fa8b5c3db4a189019602e43baf5a3
msgid "Then we can use :class:`CreateView` and friends to do the actual work. Notice how we're just configuring the generic class-based views here; we don't have to write any logic ourselves::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:122
# c0e316b60fdd4feb891a67ab9dc45314
msgid "We have to use :func:`~django.core.urlresolvers.reverse_lazy` here, not just ``reverse`` as the urls are not loaded when the file is imported."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:125
# 3c6abda6066e4458bd139459f10c1323
msgid "Finally, we hook these new views into the URLconf::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:140
# e4aa0ef7e7bb46ab922c91a2fe9ee6c5
msgid "These views inherit :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_prefix` to construct the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` based on the model."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:146
# 2c6ec9ea9f434d49ac094d2695e31a19
msgid "In this example:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:148
# a725ab7eeaa64789be6c6910d000fbc5
msgid ":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:149
# f3db9cfa65094fc5a0f5ab98d2e0f747
msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:151
# a63521a79ee64c1e9b90cd65f7fa56fa
msgid "If you wish to have separate templates for :class:`CreateView` and :class:1UpdateView`, you can set either :attr:`template_name` or :attr:`template_name_suffix` on your view class."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:156
# eeaa5a8f55db4cb8a40be8d124759095
msgid "Models and request.user"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:158
# a7676fdb2855416194b009c6a90c2696
msgid "To track the user that created an object using a :class:`CreateView`, you can use a custom :class:`ModelForm` to do this. First, add the foreign key relation to the model::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:172
# ff064d815e744481971107ee3006d050
msgid "Create a custom :class:`ModelForm` in order to exclude the ``created_by`` field and prevent the user from editing it:"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:186
# 5acf003aacf346c9b86a421315d05711
msgid "In the view, use the custom :attr:`form_class` and override :meth:`form_valid()` to add the user::"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:202
# 0cc0f54b38834e4fa1ab98b0a2af34c4
msgid "Note that you'll need to :ref:`decorate this view<decorating-class-based-views>` using :func:`~django.contrib.auth.decorators.login_required`, or alternatively handle unauthorised users in the :meth:`form_valid()`."
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:208
# a18d7cbbcbc74c17971604dafa6758f3
msgid "AJAX example"
msgstr ""

#: ../../topics/class-based-views/generic-editing.txt:210
# ea58a00bec824a16b3cfa3545ed3ded4
msgid "Here is a simple example showing how you might go about implementing a form that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

#: ../../topics/class-based-views/index.txt:3
# 411c23862c1f456399264535d3e851a9
msgid "Class-based views"
msgstr ""

#: ../../topics/class-based-views/index.txt:5
# 00c48127031a41bdb54b55b43361f8b1
msgid "A view is a callable which takes a request and returns a response. This can be more than just a function, and Django provides an example of some classes which can be used as views. These allow you to structure your views and reuse code by harnessing inheritance and mixins. There are also some generic views for simple tasks which we'll get to later, but you may want to design your own structure of reusable views which suits your use case. For full details, see the :doc:`class-based views reference documentation</ref/class-based-views/index>`."
msgstr ""

#: ../../topics/class-based-views/index.txt:22
# c51327c002ed46efbca4d21f2ac7970f
msgid "Basic examples"
msgstr ""

#: ../../topics/class-based-views/index.txt:24
# bbdb94186d7a480ba7374496d1aeb365
msgid "Django provides base view classes which will suit a wide range of applications. All views inherit from the :class:`~django.views.generic.base.View` class, which handles linking the view in to the URLs, HTTP method dispatching and other simple features. :class:`~django.views.generic.base.RedirectView` is for a simple HTTP redirect, and :class:`~django.views.generic.base.TemplateView` extends the base class to make it also render a template."
msgstr ""

#: ../../topics/class-based-views/index.txt:33
# 91d973b50a4a4d7d8daf8043a2e06127
msgid "Simple usage in your URLconf"
msgstr ""

#: ../../topics/class-based-views/index.txt:35
# 93c68334c5c942019733f1a9478d7ef0
msgid "The simplest way to use generic views is to create them directly in your URLconf. If you're only changing a few simple attributes on a class-based view, you can simply pass them into the :meth:`~django.views.generic.base.View.as_view` method call itself::"
msgstr ""

#: ../../topics/class-based-views/index.txt:47
# 77944456c12048e8957e8f66693a05a9
msgid "Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will override attributes set on the class. In this example, we set ``template_name`` on the ``TemplateView``. A similar overriding pattern can be used for the ``url`` attribute on :class:`~django.views.generic.base.RedirectView`."
msgstr ""

#: ../../topics/class-based-views/index.txt:54
# fe484c4c416a456c8a22a99340ac7acf
msgid "Subclassing generic views"
msgstr ""

#: ../../topics/class-based-views/index.txt:56
# 919726099a6e462f8ad8abb67f6a80f6
msgid "The second, more powerful way to use generic views is to inherit from an existing view and override attributes (such as the ``template_name``) or methods (such as ``get_context_data``) in your subclass to provide new values or methods. Consider, for example, a view that just displays one template, ``about.html``. Django has a generic view to do this - :class:`~django.views.generic.base.TemplateView` - so we can just subclass it, and override the template name::"
msgstr ""

#: ../../topics/class-based-views/index.txt:70
# 89dec703766f4ca68273b069b0c3d302
msgid "Then we just need to add this new view into our URLconf. `~django.views.generic.base.TemplateView` is a class, not a function, so we point the URL to the :meth:`~django.views.generic.base.View.as_view` class method instead, which provides a function-like entry to class-based views::"
msgstr ""

#: ../../topics/class-based-views/index.txt:84
# ce2263ec261542f58628ce2df94033ad
msgid "For more information on how to use the built in generic views, consult the next topic on :doc:`generic class based views</topics/class-based-views/generic-display>`."
msgstr ""

#: ../../topics/class-based-views/index.txt:90
# 830e7b07edc447088140ae8fc7ccc0b4
msgid "Supporting other HTTP methods"
msgstr ""

#: ../../topics/class-based-views/index.txt:92
# e74c03b3d3e444b19c65027542d33c9f
msgid "Suppose somebody wants to access our book library over HTTP using the views as an API. The API client would connect every now and then and download book data for the books published since last visit. But if no new books appeared since then, it is a waste of CPU time and bandwidth to fetch the books from the database, render a full response and send it to the client. It might be preferable to ask the API when the most recent book was published."
msgstr ""

#: ../../topics/class-based-views/index.txt:99
# bcec48116fd9459f8b7380ccbbf5d33b
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

#: ../../topics/class-based-views/index.txt:108
# f0c1d03d8cfe440ebabc9c00dbdade02
msgid "And the view::"
msgstr ""

#: ../../topics/class-based-views/index.txt:124
# 0c1237b9b5d3430bae85ea806371c2c3
msgid "If the view is accessed from a ``GET`` request, a plain-and-simple object list is returned in the response (using ``book_list.html`` template). But if the client issues a ``HEAD`` request, the response has an empty body and the ``Last-Modified`` header indicates when the most recent book was published. Based on this information, the client may or may not download the full object list."
msgstr ""

#: ../../topics/class-based-views/index.txt:136
# dbfbef4f585d45fb8652df3b55cb394c
msgid "Since class-based views aren't functions, decorating them works differently depending on if you're using ``as_view`` or creating a subclass."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:3
# 7152a98f506449fa962d19f0a9c4db36
msgid "Using mixins with class-based views"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:7
# 41adb49f810842aba1004ea6a90d3280
msgid "This is an advanced topic. A working knowledge of :doc:`Django's class-based views<index>` is advised before exploring these techniques."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:11
# 86cf28ce70544359bceb623c6704eef1
msgid "Django's built-in class-based views provide a lot of functionality, but some of it you may want to use separately. For instance, you may want to write a view that renders a template to make the HTTP response, but you can't use :class:`~django.views.generic.base.TemplateView`; perhaps you need to render a template only on `POST`, with `GET` doing something else entirely. While you could use :class:`~django.template.response.TemplateResponse` directly, this will likely result in duplicate code."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:21
# 34447430c44e4cfeab79ab48f73d3c3c
msgid "For this reason, Django also provides a number of mixins that provide more discrete functionality. Template rendering, for instance, is encapsulated in the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django reference documentation contains :doc:`full documentation of all the mixins</ref/class-based-views/mixins>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:29
# 05ce02983ff045728845af1208554c9c
msgid "Context and template responses"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:31
# 424add8c4a314c36a1f6fcbb8ec8eeba
msgid "Two central mixins are provided that help in providing a consistent interface to working with templates in class-based views."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:35
# 6f0c5f80f33342518b917dce860b981d
msgid "Every built in view which returns a :class:`~django.template.response.TemplateResponse` will call the :meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response` method that :class:`TemplateResponseMixin` provides. Most of the time this will be called for you (for instance, it is called by the ``get()`` method implemented by both :class:`~django.views.generic.base.TemplateView` and :class:`~django.views.generic.base.DetailView`); similarly, it's unlikely that you'll need to override it, although if you want your response to return something not rendered via a Django template then you'll want to do it. For an example of this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:47
# 7f89080f6fa64c17876557b58834736f
msgid "``render_to_response`` itself calls :meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`, which by default will just look up :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on the class-based view; two other mixins (:class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`) override this to provide more flexible defaults when dealing with actual objects."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:61
# 72ce49047b7742b9bded69a2768ca19b
msgid "Every built in view which needs context data, such as for rendering a template (including :class:`TemplateResponseMixin` above), should call :meth:`~django.views.generic.base.ContextMixin.get_context_data` passing any data they want to ensure is in there as keyword arguments. ``get_context_data`` returns a dictionary; in :class:`ContextMixin` it simply returns its keyword arguments, but it is common to override this to add more members to the dictionary."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:70
# 85229f77599c4724becc9cd16cd271a0
msgid "Building up Django's generic class-based views"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:72
# 8eee4f557ddb40d49abcb23205cef835
msgid "Let's look at how two of Django's generic class-based views are built out of mixins providing discrete functionality. We'll consider :class:`~django.views.generic.detail.DetailView`, which renders a \"detail\" view of an object, and :class:`~django.views.generic.list.ListView`, which will render a list of objects, typically from a queryset, and optionally paginate them. This will introduce us to four mixins which between them provide useful functionality when working with either a single Django object, or multiple objects."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:82
# bbad63529cfd4fe0956a0022b2df4232
msgid "There are also mixins involved in the generic edit views (:class:`~django.views.generic.edit.FormView`, and the model-specific views :class:`~django.views.generic.edit.CreateView`, :class:`~django.views.generic.edit.UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the date-based generic views. These are covered in the :doc:`mixin reference documentation</ref/class-based-views/mixins>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:92
# 6643cc4137f446af90af2a9693ea410c
msgid "DetailView: working with a single Django object"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:94
# 43ccd95f387642e7990636cfca5f52dd
msgid "To show the detail of an object, we basically need to do two things: we need to look up the object and then we need to make a :class:`TemplateResponse` with a suitable template, and that object as context."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:99
# 5821c7fe96e74173b15ed33da23293e6
msgid "To get the object, :class:`~django.views.generic.detail.DetailView` relies on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method that figures out the object based on the URL of the request (it looks for ``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks the object up either from the :attr:`~django.views.generic.detail.SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` attribute if that's provided). :class:`SingleObjectMixin` also overrides :meth:`~django.views.generic.base.ContextMixin.get_context_data`, which is used across all Django's built in class-based views to supply context data for template renders."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:114
# 15b5df86e6d242e28020c441589e8f39
msgid "To then make a :class:`TemplateResponse`, :class:`DetailView` uses :class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin`, which extends :class:`~django.views.generic.base.TemplateResponseMixin`, overriding :meth:`get_template_names()` as discussed above. It actually provides a fairly sophisticated set of options, but the main one that most people are going to use is ``<app_label>/<object_name>_detail.html``. The ``_detail`` part can be changed by setting :attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a subclass to something else. (For instance, the :doc:`generic edit views<generic-editing>` use ``_form`` for create and update views, and ``_confirm_delete`` for delete views.)"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:129
# e73164eb9a4f4b5eb1417aea32296a2c
msgid "ListView: working with many Django objects"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:131
# 65090a4a057841e591d069d1d0f9cd5c
msgid "Lists of objects follow roughly the same pattern: we need a (possibly paginated) list of objects, typically a :class:`QuerySet`, and then we need to make a :class:`TemplateResponse` with a suitable template using that list of objects."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:136
# 3e14f3cc36f14cc2909c3a83b46de7d6
msgid "To get the objects, :class:`~django.views.generic.list.ListView` uses :class:`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike with :class:`SingleObjectMixin`, there's no need to key off parts of the URL to figure out the queryset to work with, so the default just uses the :attr:`~django.views.generic.list.MultipleObjectMixin.queryset` or :attr:`~django.views.generic.list.MultipleObjectMixin.model` attribute on the view class. A common reason to override :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` here would be to dynamically vary the objects, such as depending on the current user or to exclude posts in the future for a blog."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:152
# e3dc60bb891c4a65bdce9d1161c2255e
msgid ":class:`MultipleObjectMixin` also overrides :meth:`~django.views.generic.base.ContextMixin.get_context_data` to include appropriate context variables for pagination (providing dummies if pagination is disabled). It relies on ``object_list`` being passed in as a keyword argument, which :class:`ListView` arranges for it."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:159
# 211de1e4056241569fd62e7408140e3e
msgid "To make a :class:`TemplateResponse`, :class:`ListView` then uses :class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin`; as with :class:`SingleObjectTemplateResponseMixin` above, this overrides :meth:`get_template_names()` to provide :meth:`a range of options <~django.views.generic.list.MultipleObjectTempalteResponseMixin>`, with the most commonly-used being ``<app_label>/<object_name>_list.html``, with the ``_list`` part again being taken from the :attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The date based generic views use suffixes such as ``_archive``, ``_archive_year`` and so on to use different templates for the various specialised date-based list views.)"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:174
# edcd8c7f3ef640a79c2dbf41b055184a
msgid "Using Django's class-based view mixins"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:176
# 4d25cb04712742249f6826eec5d093b6
msgid "Now we've seen how Django's generic class-based views use the provided mixins, let's look at other ways we can combine them. Of course we're still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:185
# cb491ff7c2234874a0f05dec75553532
msgid "Not all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you'll have to consider interactions between attributes and methods that overlap between the different classes you're using, and how `method resolution order`_ will affect which versions of the methods will be called in what order."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:193
# b4214d81e2224e7599e5fc732e4402e8
msgid "The reference documentation for Django's :doc:`class-based views</ref/class-based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/mixins>` will help you in understanding which attributes and methods are likely to cause conflict between different classes and mixins."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:199
# 99d7e8e20f4a4ce3900ae7ced5cc99ca
msgid "If in doubt, it's often better to back off and base your work on :class:`View` or :class:`TemplateView`, perhaps with :class:`SimpleObjectMixin` and :class:`MultipleObjectMixin`. Although you will probably end up writing more code, it is more likely to be clearly understandable to someone else coming to it later, and with fewer interactions to worry about you will save yourself some thinking. (Of course, you can always dip into Django's implementation of the generic class based views for inspiration on how to tackle problems.)"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:213
# 9fccc9e022ff4a87b5e01e3cac2e6dad
msgid "Using SingleObjectMixin with View"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:215
# f7e9bf90289140f8956f463dd6a67222
msgid "If we want to write a simple class-based view that responds only to ``POST``, we'll subclass :class:`~django.views.generic.base.View` and write a ``post()`` method in the subclass. However if we want our processing to work on a particular object, identified from the URL, we'll want the functionality provided by :class:`~django.views.generic.detail.SingleObjectMixin`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:222
# 648d3ee70fec44f7b77ba82b074d1479
msgid "We'll demonstrate this with the publisher modelling we used in the :doc:`generic class-based views introduction<generic-display>`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:248
# 37170b060f0f471097d46fe04935c865
msgid "In practice you'd probably want to record the interest in a key-value store rather than in a relational database, so we've left that bit out. The only bit of the view that needs to worry about using :class:`SingleObjectMixin` is where we want to look up the author we're interested in, which it just does with a simple call to ``self.get_object()``. Everything else is taken care of for us by the mixin."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:256
# 7ae90bea403b4da38d0f3b616463b49a
msgid "We can hook this into our URLs easily enough::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:266
# 4a5d3c5e58a04fdc9732f104a122bade
msgid "Note the ``pk`` named group, which :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` uses to look up the :class:`Author` instance. You could also use a slug, or any of the other features of :class:`SingleObjectMixin`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:272
# 03d7b57dbc204712822c24633529ed08
msgid "Using SingleObjectMixin with ListView"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:274
# d177d953b159484cae49e08ea93660c9
msgid ":class:`~django.views.generic.list.ListView` provides built-in pagination, but you might want to paginate a list of objects that are all linked (by a foreign key) to another object. In our publishing example, you might want to paginate through all the books by a particular publisher."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:280
# 4567dc48abeb4e389878c0c27de63251
msgid "One way to do this is to combine :class:`ListView` with :class:`SingleObjectMixin`, so that the queryset for the paginated list of books can hang off the publisher found as the single object. In order to do this, we need to have two different querysets:"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:286
# 6b0b6acd7d364b79b0915b1803eca066
msgid "We'll set that up directly when we call :meth:`get_object()`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:289
# 738d0647d12a4c14861dd528ee788d9c
msgid "We'll figure that out ourselves in :meth:`get_queryset()` so we can take into account the Publisher we're looking at."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:294
# 392691def6444f9b923c3e4bc54d5ab1
msgid "We have to think carefully about :meth:`get_context_data()`. Since both :class:`SingleObjectMixin` and :class:`ListView` will put things in the context data under the value of :attr:`context_object_name` if it's set, we'll instead explictly ensure the Publisher is in the context data. :class:`ListView` will add in the suitable ``page_obj`` and ``paginator`` for us providing we remember to call ``super()``."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:302
# 3dbcf2ccaf0a40e4991477b2182bdc82
msgid "Now we can write a new :class:`PublisherDetail`::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:320
# b006d8ed8525454186be9a90aa05e70c
msgid "Notice how we set ``self.object`` within :meth:`get_queryset` so we can use it again later in :meth:`get_context_data`. If you don't set :attr:`template_name`, the template will default to the normal :class:`ListView` choice, which in this case would be ``\"books/book_list.html\"`` because it's a list of books; :class:`ListView` knows nothing about :class:`SingleObjectMixin`, so it doesn't have any clue this view is anything to do with a Publisher."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:330
# f400a90a327e43d48ee0089112be5e01
msgid "The ``paginate_by`` is deliberately small in the example so you don't have to create lots of books to see the pagination working! Here's the template you'd want to use::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:363
# a106a87b888d43dca4fd4f46b3b47602
msgid "Avoid anything more complex"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:365
# e89ffad78fc742598eb8f10988799cb5
msgid "Generally you can use :class:`~django.views.generic.base.TemplateResponseMixin` and :class:`~django.views.generic.detail.SingleObjectMixin` when you need their functionality. As shown above, with a bit of care you can even combine :class:`SingleObjectMixin` with :class:`~django.views.generic.list.ListView`. However things get increasingly complex as you try to do so, and a good rule of thumb is:"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:375
# 2cc5724697214e1eb127f03ee3c2790f
msgid "Each of your views should use only mixins or views from one of the groups of generic class-based views: :doc:`detail, list<generic-display>`, :doc:`editing<generic-editing>` and date. For example it's fine to combine :class:`TemplateView` (built in view) with :class:`MultipleObjectMixin` (generic list), but you're likely to have problems combining :class:`SingleObjectMixin` (generic detail) with :class:`MultipleObjectMixin` (generic list)."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:384
# 1c02d3d34e134e6788dcaddd91e99ea7
msgid "To show what happens when you try to get more sophisticated, we show an example that sacrifices readability and maintainability when there is a simpler solution. First, let's look at a naive attempt to combine :class:`~django.views.generic.detail.DetailView` with :class:`~django.views.generic.edit.FormMixin` to enable use to ``POST`` a Django :class:`Form` to the same URL as we're displaying an object using :class:`DetailView`."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:393
# 29719f8f974947c1a1eea1cce131ebfe
msgid "Using FormMixin with DetailView"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:395
# f3550aafedc54b48a244ed6803ecf4d2
msgid "Think back to our earlier example of using :class:`View` and :class:`SingleObjectMixin` together. We were recording a user's interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let's assume we're not going to store this in a relational database but instead in something more esoteric that we won't worry about here."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:402
# 4ef1b0912f2f4610b422c42f38aec316
msgid "At this point it's natural to reach for a :class:`Form` to encapsulate the information sent from the user's browser to Django. Say also that we're heavily invested in `REST`_, so we want to use the same URL for displaying the author as for capturing the message from the user. Let's rewrite our :class:`AuthorDetailView` to do that."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:410
# 6e86c0559f8b4072adc1240e199b2f55
msgid "We'll keep the ``GET`` handling from :class:`DetailView`, although we'll have to add a :class:`Form` into the context data so we can render it in the template. We'll also want to pull in form processing from :class:`~django.views.generic.edit.FormMixin`, and write a bit of code so that on ``POST`` the form gets called appropriately."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:418
# 4186b5dbb2524b13b9df5f4682dca270
msgid "We use :class:`FormMixin` and implement :meth:`post()` ourselves rather than try to mix :class:`DetailView` with :class:`FormView` (which provides a suitable :meth:`post()` already) because both of the views implement :meth:`get()`, and things would get much more confusing."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:426
# 1d6c3dc14d084831b9cbf88c5901906a
msgid "Our new :class:`AuthorDetail` looks like this::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:476
# 0ba70e3320e849cabc7ea1e1bfecd4a7
msgid ":meth:`get_success_url()` is just providing somewhere to redirect to, which gets used in the default implementation of :meth:`form_valid()`. We have to provide our own :meth:`post()` as noted earlier, and override :meth:`get_context_data()` to make the :class:`Form` available in the context data."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:483
# 272a1810ccfb41c2a677e0939c84b4e8
msgid "A better solution"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:485
# 07236360701447c091a6dd200292409e
msgid "It should be obvious that the number of subtle interactions between :class:`FormMixin` and :class:`DetailView` is already testing our ability to manage things. It's unlikely you'd want to write this kind of class yourself."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:490
# e8fd32bd55d246ec84163c1e07049c18
msgid "In this case, it would be fairly easy to just write the :meth:`post()` method yourself, keeping :class:`DetailView` as the only generic functionality, although writing :class:`Form` handling code involves a lot of duplication."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:495
# 3713eb54890948cea0e57bea417ed5a2
msgid "Alternatively, it would still be easier than the above approach to have a separate view for processing the form, which could use :class:`~django.views.generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:501
# bda68c55e19f487eafd85264317f8f32
msgid "An alternative better solution"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:503
# a991bde812454944837e099af25a1d38
msgid "What we're really trying to do here is to use two different class based views from the same URL. So why not do just that? We have a very clear division here: ``GET`` requests should get the :class:`DetailView` (with the :class:`Form` added to the context data), and ``POST`` requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:510
# c1f1eaea286e4de38f322bf3a6c0fa50
msgid "The :class:`AuthorDisplay` view is almost the same as :ref:`when we first introduced AuthorDetail<generic-views-extra-work>`; we have to write our own :meth:`get_context_data()` to make the :class:`AuthorInterestForm` available to the template. We'll skip the :meth:`get_object()` override from before for clarity."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:536
# aa3ab3c4c33248e29779bbfccda981ac
msgid "Then the :class:`AuthorInterest` is a simple :class:`FormView`, but we have to bring in :class:`SingleObjectMixin` so we can find the author we're talking about, and we have to remember to set :attr:`template_name` to ensure that form errors will render the same template as :class:`AuthorDisplay` is using on ``GET``."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:571
# 309817fc59334c8588ad2441b204d504
msgid "Finally we bring this together in a new :class:`AuthorDetail` view. We already know that calling :meth:`as_view()` on a class-based view gives us something that behaves exactly like a function based view, so we can do that at the point we choose between the two subviews."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:576
# 6a10beac1d5042d395f1fc76dbc1bdf3
msgid "You can of course pass through keyword arguments to :meth:`as_view()` in the same way you would in your URLconf, such as if you wanted the :class:`AuthorInterest` behaviour to also appear at another URL but using a different template."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:595
# 787090d8a6fe454496d2fb4c9ecd2a78
msgid "This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from :class:`View` or :class:`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:605
# 6e5cbed60aa9405ab887678969e57ac5
msgid "Where class based views shine is when you want to do the same thing many times. Suppose you're writing an API, and every view should return JSON instead of rendered HTML."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:609
# 073712ce25334cca820f87d9c859a17b
msgid "We can create a mixin class to use in all of our views, handling the conversion to JSON once."
msgstr ""

#: ../../topics/class-based-views/mixins.txt:641
# 7be7d2f90ab64d68818a604d0bc95497
msgid "Now we mix this into the base TemplateView::"
msgstr ""

#: ../../topics/class-based-views/mixins.txt:648
# f48039793a8c43ba9d722941b0793fb9
msgid "Equally we could use our mixin with one of the generic views. We can make our own version of :class:`~django.views.generic.detail.DetailView` by mixing :class:`JSONResponseMixin` with the :class:`~django.views.generic.detail.BaseDetailView` -- (the :class:`~django.views.generic.detail.DetailView` before template rendering behavior has been mixed in)::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:3
# 4b969f9b79184ac08c4a2b499feac837
msgid "Conditional View Processing"
msgstr ""

#: ../../topics/conditional-view-processing.txt:5
# 1b2e6b8428a543c28cede4e7a87d023a
msgid "HTTP clients can send a number of headers to tell the server about copies of a resource that they have already seen. This is commonly used when retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all the data for something the client has already retrieved. However, the same headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, etc)."
msgstr ""

#: ../../topics/conditional-view-processing.txt:11
# bef5d95426ba459cbdba8a7a29e6261d
msgid "For each page (response) that Django sends back from a view, it might provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` header. These headers are optional on HTTP responses. They can be set by your view function, or you can rely on the :class:`~django.middleware.common.CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

#: ../../topics/conditional-view-processing.txt:17
# 5962bae3dbb04180862226bf4d380e00
msgid "When the client next requests the same resource, it might send along a header such as `If-modified-since`_, containing the date of the last modification time it was sent, or `If-none-match`_, containing the ``ETag`` it was sent. If the current version of the page matches the ``ETag`` sent by the client, or if the resource has not been modified, a 304 status code can be sent back, instead of a full response, telling the client that nothing has changed."
msgstr ""

#: ../../topics/conditional-view-processing.txt:27
# 0f5061ccd1f144e78feea0b27f7cf1b3
msgid "When you need more fine-grained control you may use per-view conditional processing functions."
msgstr ""

#: ../../topics/conditional-view-processing.txt:33
# 09f4cf3a6bf241a8a1f5ec2aac4e62df
msgid "The ``condition`` decorator"
msgstr ""

#: ../../topics/conditional-view-processing.txt:35
# e97a505e99914eebb15f1c3c5285f0d5
msgid "Sometimes (in fact, quite often) you can create functions to rapidly compute the ETag_ value or the last-modified time for a resource, **without** needing to do all the computations needed to construct the full view. Django can then use these functions to provide an \"early bailout\" option for the view processing. Telling the client that the content has not been modified since the last request, perhaps."
msgstr ""

#: ../../topics/conditional-view-processing.txt:44
# ab09ccc6126a4c4d8d7614ea256da978
msgid "These two functions are passed as parameters the ``django.views.decorators.http.condition`` decorator. This decorator uses the two functions (you only need to supply one, if you can't compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don't match, a new copy of the resource must be computed and your normal view is called."
msgstr ""

#: ../../topics/conditional-view-processing.txt:51
# 15303663ce694b8595bfe39a474b8712
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:55
# 49ef7e2cd23e4c74954eb322456684ac
msgid "The two functions, to compute the ETag and the last modified time, will be passed the incoming ``request`` object and the same parameters, in the same order, as the view function they are helping to wrap. The function passed ``last_modified_func`` should return a standard datetime value specifying the last time the resource was modified, or ``None`` if the resource doesn't exist. The function passed to the ``etag`` decorator should return a string representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

#: ../../topics/conditional-view-processing.txt:63
# 2cff1895ecd540afb54c2e187c90ac7e
msgid "Using this feature usefully is probably best explained with an example. Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:77
# aa5b30ed42cf47388924be3a1cd94d89
msgid "If the front page, displaying the latest blog entries, only changes when you add a new blog entry, you can compute the last modified time very quickly. You need the latest ``published`` date for every entry associated with that blog. One way to do this would be::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:85
# 776e4a2b866346028d9f4a77260cc7a4
msgid "You can then use this function to provide early detection of an unchanged page for your front page view::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:95
# 5f5de6616bf74ca2b4d838469e2660ca
msgid "Shortcuts for only computing one value"
msgstr ""

#: ../../topics/conditional-view-processing.txt:97
# 6eac887208bc4e778e929fbebbe69b8c
msgid "As a general rule, if you can provide functions to compute *both* the ETag and the last modified time, you should do so. You don't know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations."
msgstr ""

#: ../../topics/conditional-view-processing.txt:103
# 8b49748492c547c0877a71ba8287358f
msgid "The ``django.views.decorators.http.etag`` and ``django.views.decorators.http.last_modified`` decorators are passed the same type of functions as the ``condition`` decorator. Their signatures are::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:110
# 36827d1f88c4421cad3b465380d47e88
msgid "We could write the earlier example, which only uses a last-modified function, using one of these decorators::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:117
# 58f7856c7ef04cc085fec63a0766f649
msgid "...or::"
msgstr ""

#: ../../topics/conditional-view-processing.txt:124
# 876ec58c8f894ea7a6eb532bbd362fb3
msgid "Use ``condition`` when testing both conditions"
msgstr ""

#: ../../topics/conditional-view-processing.txt:126
# 12e11b0994fc42fb9d2b4b4421c8dfa2
msgid "It might look nicer to some people to try and chain the ``etag`` and ``last_modified`` decorators if you want to test both preconditions. However, this would lead to incorrect behavior."
msgstr ""

#: ../../topics/conditional-view-processing.txt:140
# d24df8bc53a04dfdb00f82571c2ae13c
msgid "The first decorator doesn't know anything about the second and might answer that the response is not modified even if the second decorators would determine otherwise. The ``condition`` decorator uses both callback functions simultaneously to work out the right action to take."
msgstr ""

#: ../../topics/conditional-view-processing.txt:146
# 7f56fcec47944ff9a909850098294075
msgid "Using the decorators with other HTTP methods"
msgstr ""

#: ../../topics/conditional-view-processing.txt:148
# 99e9c32f09d7428695287429142759ed
msgid "The ``condition`` decorator is useful for more than only ``GET`` and ``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this situation). It can be used also to be used to provide checking for ``POST``, ``PUT`` and ``DELETE`` requests. In these situations, the idea isn't to return a \"not modified\" response, but to tell the client that the resource they are trying to change has been altered in the meantime."
msgstr ""

#: ../../topics/conditional-view-processing.txt:155
# 4bda97590b72439e88b62422785f6913
msgid "For example, consider the following exchange between the client and server:"
msgstr ""

#: ../../topics/conditional-view-processing.txt:157
# f2c97eb8f9e247a48c222c7abede0862
msgid "Client requests ``/foo/``."
msgstr ""

#: ../../topics/conditional-view-processing.txt:158
# 32c9a3debc38428c91a8541220ee6b2a
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

#: ../../topics/conditional-view-processing.txt:159
# 9625802c987d4f33bf549fdb2a1b1db9
msgid "Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is trying to update."
msgstr ""

#: ../../topics/conditional-view-processing.txt:162
# ef05aacfa8244fd99527bbfe0727a79d
msgid "Server checks to see if the resource has changed, by computing the ETag the same way it does for a ``GET`` request (using the same function). If the resource *has* changed, it will return a 412 status code code, meaning \"precondition failed\"."
msgstr ""

#: ../../topics/conditional-view-processing.txt:166
# 85c54a2c06f44651ba9fd46ed4ef22bc
msgid "Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, to retrieve an updated version of the content before updating it."
msgstr ""

#: ../../topics/conditional-view-processing.txt:170
# d07eb43a07344534811abc824699ae6d
msgid "The important thing this example shows is that the same functions can be used to compute the ETag and last modification values in all situations. In fact, you **should** use the same functions, so that the same values are returned every time."
msgstr ""

#: ../../topics/conditional-view-processing.txt:176
# 33464215e1164966bea15633aa73d2d5
msgid "Comparison with middleware conditional processing"
msgstr ""

#: ../../topics/conditional-view-processing.txt:178
# 449ac7ec6ab54dda810cd88ef13e2da4
msgid "You may notice that Django already provides simple and straightforward conditional ``GET`` handling via the :class:`django.middleware.http.ConditionalGetMiddleware` and :class:`~django.middleware.common.CommonMiddleware`. Whilst certainly being easy to use and suitable for many situations, those pieces of middleware functionality have limitations for advanced usage:"
msgstr ""

#: ../../topics/conditional-view-processing.txt:185
# d06827f385db4675891080b9d03f5ce7
msgid "They are applied globally to all views in your project"
msgstr ""

#: ../../topics/conditional-view-processing.txt:186
# 0aa63065e8b643b794ab361e396e65df
msgid "They don't save you from generating the response itself, which may be expensive"
msgstr ""

#: ../../topics/conditional-view-processing.txt:188
# c35899e93d0b4902b19a6160cd6ebe9d
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

#: ../../topics/conditional-view-processing.txt:190
# 01ba36367926463290189ff23364e576
msgid "You should choose the most appropriate tool for your particular problem here. If you have a way to compute ETags and modification times quickly and if some view takes a while to generate the content, you should consider using the ``condition`` decorator described in this document. If everything already runs fairly quickly, stick to using the middleware and the amount of network traffic sent back to the clients will still be reduced if the view hasn't changed."
msgstr ""

#: ../../topics/db/aggregation.txt:3
# a33146c04ad64cb7afc5520b2d3eabb1
msgid "Aggregation"
msgstr ""

#: ../../topics/db/aggregation.txt:7
# 498213303cad4da28fde9c01fe0d334b
msgid "The topic guide on :doc:`Django's database-abstraction API </topics/db/queries>` described the way that you can use Django queries that create, retrieve, update and delete individual objects. However, sometimes you will need to retrieve values that are derived by summarizing or *aggregating* a collection of objects. This topic guide describes the ways that aggregate values can be generated and returned using Django queries."
msgstr ""

#: ../../topics/db/aggregation.txt:14
# 11c929c88823453482376518d63b80ec
msgid "Throughout this guide, we'll refer to the following models. These models are used to track the inventory for a series of online bookstores:"
msgstr ""

#: ../../topics/db/aggregation.txt:45
# 6e9e4d0becfe4006bc2870bbe968f3d2
msgid "Cheat sheet"
msgstr ""

#: ../../topics/db/aggregation.txt:47
# 17406649b844415bbd18fbfd311a203a
msgid "In a hurry? Here's how to do common aggregate queries, assuming the models above::"
msgstr ""

#: ../../topics/db/aggregation.txt:82
# 94725ab0f72b4b8fb8cdbfde862d897b
msgid "Generating aggregates over a QuerySet"
msgstr ""

#: ../../topics/db/aggregation.txt:84
# 4969ffef47a4429a90437d33a7b27a27
msgid "Django provides two ways to generate aggregates. The first way is to generate summary values over an entire ``QuerySet``. For example, say you wanted to calculate the average price of all books available for sale. Django's query syntax provides a means for describing the set of all books::"
msgstr ""

#: ../../topics/db/aggregation.txt:91
# e31bd5f042e440619b68724f4b106a24
msgid "What we need is a way to calculate summary values over the objects that belong to this ``QuerySet``. This is done by appending an ``aggregate()`` clause onto the ``QuerySet``::"
msgstr ""

#: ../../topics/db/aggregation.txt:99
# c3e2a8c71cf447fba462e4acb0c43dd2
msgid "The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

#: ../../topics/db/aggregation.txt:104
# 55a539146fc34c5ca82d58620bad781a
msgid "The argument to the ``aggregate()`` clause describes the aggregate value that we want to compute - in this case, the average of the ``price`` field on the ``Book`` model. A list of the aggregate functions that are available can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

#: ../../topics/db/aggregation.txt:109
# 15c4304c048c4171959a2802c1fc060e
msgid "``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

#: ../../topics/db/aggregation.txt:119
# 1db4b28e21514d5282c7952f9e64bc18
msgid "If you want to generate more than one aggregate, you just add another argument to the ``aggregate()`` clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:128
# 7e70a56edfe64ea9b0621b6bb28962e5
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

#: ../../topics/db/aggregation.txt:130
# bc5a84a992f84895ae3c50e6d01a2465
msgid "The second way to generate summary values is to generate an independent summary for each object in a ``QuerySet``. For example, if you are retrieving a list of books, you may want to know how many authors contributed to each book. Each Book has a many-to-many relationship with the Author; we want to summarize this relationship for each book in the ``QuerySet``."
msgstr ""

#: ../../topics/db/aggregation.txt:136
# a92fd28ff40745c19178ca3078610f95
msgid "Per-object summaries can be generated using the ``annotate()`` clause. When an ``annotate()`` clause is specified, each object in the ``QuerySet`` will be annotated with the specified values."
msgstr ""

#: ../../topics/db/aggregation.txt:140
# 1f5a1f8898c247fe9b28f55b06495755
msgid "The syntax for these annotations is identical to that used for the ``aggregate()`` clause. Each argument to ``annotate()`` describes an aggregate that is to be calculated. For example, to annotate Books with the number of authors::"
msgstr ""

#: ../../topics/db/aggregation.txt:158
# 20a501e4fdc540f0b75ebbfc8bd8f4ad
msgid "As with ``aggregate()``, the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation::"
msgstr ""

#: ../../topics/db/aggregation.txt:169
# 18988333da2f4fb9b7f05af9a1526908
msgid "Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can be modified using any other ``QuerySet`` operation, including ``filter()``, ``order_by``, or even additional calls to ``annotate()``."
msgstr ""

#: ../../topics/db/aggregation.txt:175
# 6ffc539f34754395991c95e11344ac9a
msgid "Joins and aggregates"
msgstr ""

#: ../../topics/db/aggregation.txt:177
# 6558a438d1eb428eac11ecc7a4b46aff
msgid "So far, we have dealt with aggregates over fields that belong to the model being queried. However, sometimes the value you want to aggregate will belong to a model that is related to the model you are querying."
msgstr ""

#: ../../topics/db/aggregation.txt:181
# 0ace98e1862e4bc0970914f969bb0452
msgid "When specifying the field to be aggregated in an aggregate function, Django will allow you to use the same :ref:`double underscore notation <field-lookups-intro>` that is used when referring to related fields in filters. Django will then handle any table joins that are required to retrieve and aggregate the related value."
msgstr ""

#: ../../topics/db/aggregation.txt:187
# 14b6c6315497484cae72b2204331bb80
msgid "For example, to find the price range of books offered in each store, you could use the annotation::"
msgstr ""

#: ../../topics/db/aggregation.txt:192
# 412c382beb3a4ec59342ce920b7f7188
msgid "This tells Django to retrieve the Store model, join (through the many-to-many relationship) with the Book model, and aggregate on the price field of the book model to produce a minimum and maximum value."
msgstr ""

#: ../../topics/db/aggregation.txt:196
# ba1e8ee114bf44fda59f168e68ccdd75
msgid "The same rules apply to the ``aggregate()`` clause. If you wanted to know the lowest and highest price of any book that is available for sale in a store, you could use the aggregate::"
msgstr ""

#: ../../topics/db/aggregation.txt:202
# be132b2ec5d1430385fc158073626c83
msgid "Join chains can be as deep as you require. For example, to extract the age of the youngest author of any book available for sale, you could issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:209
# 98b4e11eb0a7465ca8445467bb95e2e3
msgid "Aggregations and other QuerySet clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:212
# 53500803a7d144be8683f90888126693
msgid "``filter()`` and ``exclude()``"
msgstr ""

#: ../../topics/db/aggregation.txt:214
# b3daa6ac9bb848858da208b6d5615ccb
msgid "Aggregates can also participate in filters. Any ``filter()`` (or ``exclude()``) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation."
msgstr ""

#: ../../topics/db/aggregation.txt:218
# e98660b9cbe74de29765d6c709292071
msgid "When used with an ``annotate()`` clause, a filter has the effect of constraining the objects for which an annotation is calculated. For example, you can generate an annotated list of all books that have a title starting with \"Django\" using the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:225
# ac41583aff1f4e2ca1ca8d739ccf3182
msgid "When used with an ``aggregate()`` clause, a filter has the effect of constraining the objects over which the aggregate is calculated. For example, you can generate the average price of all books with a title that starts with \"Django\" using the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:233
# ade906fbd081494ea03162e7eb9f1ead
msgid "Filtering on annotations"
msgstr ""

#: ../../topics/db/aggregation.txt:235
# 0ddf1e2c1af149168b0a2e4ceffd7598
msgid "Annotated values can also be filtered. The alias for the annotation can be used in ``filter()`` and ``exclude()`` clauses in the same way as any other model field."
msgstr ""

#: ../../topics/db/aggregation.txt:239
# 06e3033d69284ffa8282714f6d95f4a7
msgid "For example, to generate a list of books that have more than one author, you can issue the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:244
# 6b30d07cde524748a242cff0eb1512e5
msgid "This query generates an annotated result set, and then generates a filter based upon that annotation."
msgstr ""

#: ../../topics/db/aggregation.txt:248
# 889ff6ea7b634b38beb0f8c2a060121c
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:250
# 527e8f7826bf4427a7a9657fed82730d
msgid "When developing a complex query that involves both ``annotate()`` and ``filter()`` clauses, particular attention should be paid to the order in which the clauses are applied to the ``QuerySet``."
msgstr ""

#: ../../topics/db/aggregation.txt:254
# df4edcaf744546f28cb6e19309635eb7
msgid "When an ``annotate()`` clause is applied to a query, the annotation is computed over the state of the query up to the point where the annotation is requested. The practical implication of this is that ``filter()`` and ``annotate()`` are not commutative operations -- that is, there is a difference between the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:262
# e4b21ae92546486f9c5de638d70bc3a4
msgid "and the query::"
msgstr ""

#: ../../topics/db/aggregation.txt:266
# c16bad9c571a46099932bffd825a8917
msgid "Both queries will return a list of Publishers that have at least one good book (i.e., a book with a rating exceeding 3.0). However, the annotation in the first query will provide the total number of all books published by the publisher; the second query will only include good books in the annotated count. In the first query, the annotation precedes the filter, so the filter has no effect on the annotation. In the second query, the filter precedes the annotation, and as a result, the filter constrains the objects considered when calculating the annotation."
msgstr ""

#: ../../topics/db/aggregation.txt:276
# fbb7d5851eea404d83167f7262113023
msgid "``order_by()``"
msgstr ""

#: ../../topics/db/aggregation.txt:278
# 11d6f056434842deadb27d8041b4c95a
msgid "Annotations can be used as a basis for ordering. When you define an ``order_by()`` clause, the aggregates you provide can reference any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:282
# 09412aa8428d4bc197683a31a650c1ee
msgid "For example, to order a ``QuerySet`` of books by the number of authors that have contributed to the book, you could use the following query::"
msgstr ""

#: ../../topics/db/aggregation.txt:288
# 74710189fc8c4daea73b0694247e3937
msgid "``values()``"
msgstr ""

#: ../../topics/db/aggregation.txt:290
# 99054bd545234a039dfda8d61e1f4a69
msgid "Ordinarily, annotations are generated on a per-object basis - an annotated ``QuerySet`` will return one result for each object in the original ``QuerySet``. However, when a ``values()`` clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original ``QuerySet``, the original results are grouped according to the unique combinations of the fields specified in the ``values()`` clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group."
msgstr ""

#: ../../topics/db/aggregation.txt:300
# c8baaf93fc314ab4939d9ea79aa4b386
msgid "For example, consider an author query that attempts to find out the average rating of books written by each author:"
msgstr ""

#: ../../topics/db/aggregation.txt:305
# 5d2678b0dd8f4d1f9119299af3bdd057
msgid "This will return one result for each author in the database, annotated with their average book rating."
msgstr ""

#: ../../topics/db/aggregation.txt:308
# ab770a1b6c404b1b8b7a212044646f9d
msgid "However, the result will be slightly different if you use a ``values()`` clause::"
msgstr ""

#: ../../topics/db/aggregation.txt:312
# 73fc90115e6c431c9529a2346769b3dc
msgid "In this example, the authors will be grouped by name, so you will only get an annotated result for each *unique* author name. This means if you have two authors with the same name, their results will be merged into a single result in the output of the query; the average will be computed as the average over the books written by both authors."
msgstr ""

#: ../../topics/db/aggregation.txt:319
# 53b67157f9704052b7f8b7b7a2d78203
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

#: ../../topics/db/aggregation.txt:321
# 630233c76d134749a3e508b2fecc5692
msgid "As with the ``filter()`` clause, the order in which ``annotate()`` and ``values()`` clauses are applied to a query is significant. If the ``values()`` clause precedes the ``annotate()``, the annotation will be computed using the grouping described by the ``values()`` clause."
msgstr ""

#: ../../topics/db/aggregation.txt:326
# 2cf0f57fffff43f4847e02e56fc396ce
msgid "However, if the ``annotate()`` clause precedes the ``values()`` clause, the annotations will be generated over the entire query set. In this case, the ``values()`` clause only constrains the fields that are generated on output."
msgstr ""

#: ../../topics/db/aggregation.txt:331
# 696e12911f7b43c4a9e3cd9ef5597753
msgid "For example, if we reverse the order of the ``values()`` and ``annotate()`` clause from our previous example::"
msgstr ""

#: ../../topics/db/aggregation.txt:336
# a56453ef5fed4dd384da94275afd1d28
msgid "This will now yield one unique result for each author; however, only the author's name and the ``average_rating`` annotation will be returned in the output data."
msgstr ""

#: ../../topics/db/aggregation.txt:340
# 487df0378eed471aadc4e37415ab73a6
msgid "You should also note that ``average_rating`` has been explicitly included in the list of values to be returned. This is required because of the ordering of the ``values()`` and ``annotate()`` clause."
msgstr ""

#: ../../topics/db/aggregation.txt:344
# c8cc8f0d3bcd4386b54e63cc06bce6ce
msgid "If the ``values()`` clause precedes the ``annotate()`` clause, any annotations will be automatically added to the result set. However, if the ``values()`` clause is applied after the ``annotate()`` clause, you need to explicitly include the aggregate column."
msgstr ""

#: ../../topics/db/aggregation.txt:350
# 8e7cc745fd454d50bdf19d9c0c654986
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

#: ../../topics/db/aggregation.txt:352
# f625a0429bb34d078066f04c4fb6adb2
msgid "Fields that are mentioned in the ``order_by()`` part of a queryset (or which are used in the default ordering on a model) are used when selecting the output data, even if they are not otherwise specified in the ``values()`` call. These extra fields are used to group \"like\" results together and they can make otherwise identical result rows appear to be separate. This shows up, particularly, when counting things."
msgstr ""

#: ../../topics/db/aggregation.txt:359
# f3476f6c4c5d40f4af99596eaec2319c
msgid "By way of example, suppose you have a model like this::"
msgstr ""

#: ../../topics/db/aggregation.txt:368
# ec5234a8f9f54f38ad2acb6909a2e7b1
msgid "The important part here is the default ordering on the ``name`` field. If you want to count how many times each distinct ``data`` value appears, you might try this::"
msgstr ""

#: ../../topics/db/aggregation.txt:375
# 02a66030469d41a698ddac7013d470de
msgid "...which will group the ``Item`` objects by their common ``data`` values and then count the number of ``id`` values in each group. Except that it won't quite work. The default ordering by ``name`` will also play a part in the grouping, so this query will group by distinct ``(data, name)`` pairs, which isn't what you want. Instead, you should construct this queryset::"
msgstr ""

#: ../../topics/db/aggregation.txt:383
# a25a497033cf41138339f92849dd10f5
msgid "...clearing any ordering in the query. You could also order by, say, ``data`` without any harmful effects, since that is already playing a role in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:387
# d5f3e9f2a50c42578c4765bc5deb3ba7
msgid "This behavior is the same as that noted in the queryset documentation for :meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the same: normally you won't want extra columns playing a part in the result, so clear out the ordering, or at least make sure it's restricted only to those fields you also select in a ``values()`` call."
msgstr ""

#: ../../topics/db/aggregation.txt:394
# b21f2c4c94414133bda9380a7dc7b167
msgid "You might reasonably ask why Django doesn't remove the extraneous columns for you. The main reason is consistency with ``distinct()`` and other places: Django **never** removes ordering constraints that you have specified (and we can't change those other methods' behavior, as that would violate our :doc:`/misc/api-stability` policy)."
msgstr ""

#: ../../topics/db/aggregation.txt:401
# 3af6b51c7e8d45b8bc43b285329f3dc5
msgid "Aggregating annotations"
msgstr ""

#: ../../topics/db/aggregation.txt:403
# 3e2f2bf482c94e15973f7bd3231e51ae
msgid "You can also generate an aggregate on the result of an annotation. When you define an ``aggregate()`` clause, the aggregates you provide can reference any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

#: ../../topics/db/aggregation.txt:407
# 09b0d12b2a2f4b7ba81fdea38a156b3a
msgid "For example, if you wanted to calculate the average number of authors per book you first annotate the set of books with the author count, then aggregate that author count, referencing the annotation field::"
msgstr ""

#: ../../topics/db/examples/index.txt:3
# 9621574a947a4282bbb416aff58dd890
msgid "Examples of model relationship API usage"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:3
#: ../../topics/db/models.txt:329
#: ../../topics/db/queries.txt:1170
# c6f52cd202a749f598434bd722b73448
# 2f27096fdd9b496f8e88a5c3536cdbc4
# 38e8f6dd01c14e3689e6296e49338795
msgid "Many-to-many relationships"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:7
# ad5d980a28bd4503ba8fec1f017d7448
msgid "To define a many-to-many relationship, use :ref:`ref-manytomany`."
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:9
# bd6a2adc5f9f42dcab13702615b296d3
msgid "In this example, an ``Article`` can be published in multiple ``Publication`` objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:35
#: ../../topics/db/examples/many_to_one.txt:32
#: ../../topics/db/examples/one_to_one.txt:37
# 70fbadd852db43618d4b857425641daa
# 2d8d83132b9d4f77a4569a5ae1ede1a8
# 6e3df87d41b74fe0a4e21a3b49a2402b
msgid "What follows are examples of operations that can be performed using the Python API facilities."
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:38
# 19c6eb82ea4342b3a8eda33b3bc89c7b
msgid "Create a couple of Publications::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:47
#: ../../topics/db/examples/many_to_one.txt:43
# 6df9dc0204e1463eb8c3c2d9db052ea8
# c06b2c10580e45dca222e6949acdbf5c
msgid "Create an Article::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:51
# e8c90b79f85d4400b6b85a0fc458a2e8
msgid "You can't associate it with a Publication until it's been saved::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:58
# 4378ebd5a32f4418970d54624284de79
msgid "Save it! ::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:63
# 63600998c3d94496ba747f16ae7975c2
msgid "Associate the Article with a Publication::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:67
# 1b1da79bfcfd47a89e737a9414a8b0d6
msgid "Create another Article, and set it to appear in both Publications::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:74
# 66d2e8908d87444c80756e5d8f292ff7
msgid "Adding a second time is OK::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:78
#: ../../topics/db/examples/many_to_one.txt:95
# bd8354fb60784d478e81e9d0b22a7d50
# ec548945cbfa409bad95a5d359725136
msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:85
# cfddb07c33894bd8b3a8fe6c89a94955
msgid "Add a Publication directly via publications.add by using keyword arguments::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:89
# 01fdc6672546449fb7f965314dc6e94f
msgid "Article objects have access to their related Publication objects::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:96
# 1526ecf7b50c40a3a5a30145fdb889f8
msgid "Publication objects have access to their related Article objects::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:105
# 41564e92ddfe4558a86645c29934f026
msgid "Many-to-many relationships can be queried using :ref:`lookups across relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:122
# 95469ee9077946bf93fe6735f98350c9
msgid "The count() function respects distinct() as well::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:135
# b43745907a2347cfabef73519ab12cae
msgid "Reverse m2m queries are supported (i.e., starting at the table that doesn't have a ManyToManyField)::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:160
# 29ed685a46c94600a2c8cbf1f2762f3f
msgid "Excluding a related item works as you would expect, too (although the SQL involved is a little complex)::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:166
# af06600fb61141f7882b931f3f50d777
msgid "If we delete a Publication, its Articles won't be able to access it::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:175
# 4a93da85eaff49a88349305b7381af15
msgid "If we delete an Article, its Publications won't be able to access it::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:183
# 1bc5af8008d64951b35a3d1a2671b6d7
msgid "Adding via the 'other' end of an m2m::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:193
# 2d50ba9b4f894063895e5f646d384066
msgid "Adding via the other end using keywords::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:202
# 9db261722b87485b800bc9f25d3accf6
msgid "Removing publication from an article::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:210
# d3dcdc7486124082a8d9cf88c3f0ff60
msgid "And from the other end::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:218
# 172fd3b3057549eb893daa20848ed398
msgid "Relation sets can be assigned. Assignment clears any existing set members::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:226
# f94442b78e264d56bdbabd3c4df177e9
msgid "Relation sets can be cleared::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:232
# 60811eb5820b477085317fa5f2d51eba
msgid "And you can clear from the other end::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:245
# 95adaa2bf99b4baeb7bdacbd47b0c558
msgid "Recreate the article and Publication we have deleted::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:253
# 3d02f1d3686a402599b5a735ca9d6f92
msgid "Bulk delete some Publications - references to deleted publications should go::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:263
# 264c425cc5194e178ef9143958222514
msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:270
# acb5ca4b923c4f0db09f0f30a9b584f4
msgid "After the delete, the QuerySet cache needs to be cleared, and the referenced objects should be gone::"
msgstr ""

#: ../../topics/db/examples/many_to_many.txt:278
# 0a6773a5b4a742f1a0bd9bfc3835e9b4
msgid "An alternate to calling clear() is to assign the empty set::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:3
#: ../../topics/db/models.txt:280
# 62bd23c3937e41bba621b9da786348b6
# eedea1942cc6415baa4db2e0ab702d43
msgid "Many-to-one relationships"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:7
# 7c9bfe2653b145e9ae05b26217bc882b
msgid "To define a many-to-one relationship, use :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:35
# 9d17683bc1fe43168be2731dcde1c12f
msgid "Create a few Reporters::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:55
# 3af7c80d1eac4f3384d5ad812e30ff0f
msgid "Article objects have access to their related Reporter objects::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:59
# 7f11014967b344dda273223ca05a92b4
msgid "These are strings instead of unicode strings because that's what was used in the creation of this reporter (and we haven't refreshed the data from the database, which always returns unicode strings)::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:66
# 3152184c86ce4ed786149ae881f1df49
msgid "Create an Article via the Reporter object::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:76
# 7d163d0842bf419ab08d03459a43dca4
msgid "Create a new article, and add it to the article set::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:87
# adfbf2702fba44d2908410a5ab652c44
msgid "Add the same article to a different article set - check that it moves::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:113
# 9b110fa9faab4b81896648d0e58d3b68
msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:115
# 2ed0310d91654eab8b1f603a189b5a3d
msgid "Related managers support field lookups as well. The API automatically follows relationships as far as you need. Use double underscores to separate relationships. This works as many levels deep as you want. There's no limit. For example::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:127
# 052411a5458e472191a74229ccf7fa09
msgid "Exact match is implied here::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:132
# 9db91cabf81b45dc83e78ac2bc831297
msgid "Query twice over the related field. This translates to an AND condition in the WHERE clause::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:138
# f8c5d76a43e24eee8dd8eeb9eb1f0d7a
msgid "For the related lookup you can supply a primary key value or pass the related object explicitly::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:153
# 20be829ebd29400aa875d6ac8fe4f70c
msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:158
# c6abd8825b0441be80f173662f6b23c6
msgid "Querying in the opposite direction::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:172
# c064ffc9741349e0b7b5d44c27688da3
msgid "Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:179
# 77df5bec443b485491c29b6093fbcb2e
msgid "Queries can go round in circles::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:188
# 161008c866ff433982353039e2b37ab1
msgid "If you delete a reporter, his articles will be deleted (assuming that the ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` set to ``CASCADE``, which is the default)::"
msgstr ""

#: ../../topics/db/examples/many_to_one.txt:202
# 631a374c5ff64ce5b949dccec9794dc9
msgid "You can delete using a JOIN in the query::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:3
#: ../../topics/db/models.txt:536
#: ../../topics/db/queries.txt:1197
# 9fc5d056592e4e12af9acd69f4f33cae
# 16a22ba57c404ab78e4b0cf6004bf735
# c6e5f05b9836452997394346b8a3eb90
msgid "One-to-one relationships"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:7
# 9993f333d31542f7bdd75107508a0f61
msgid "To define a one-to-one relationship, use :ref:`ref-onetoone`."
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:9
# 6b15d12f5f68442fada98db6e5e2dbbc
msgid "In this example, a ``Place`` optionally can be a ``Restaurant``:"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:40
# 6e7372d6da3d4c658f43a8802efb1b80
msgid "Create a couple of Places::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:47
# f20b58317b7148f888803c861c49dc2a
msgid "Create a Restaurant. Pass the ID of the \"parent\" object as this object's ID::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:52
# b3bc6fe768de42abb116b2e07e0c84df
msgid "A Restaurant can access its place::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:57
# 01ba63f04ead457cb52acebbfd58db97
msgid "A Place can access its restaurant, if available::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:62
# 007b497d5e9243eea208f8f8863f2529
msgid "p2 doesn't have an associated restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:69
# d842a4d879da491ba83c6fec904b1b26
msgid "Set the place using assignment notation. Because place is the primary key on Restaurant, the save will create a new restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:79
# 3c17b3a0948e4cccb36982fd4f805d27
msgid "Set the place back again, using assignment in the reverse direction::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:85
# 1eeada89720c4102b33a56d0f6c6b4b9
msgid "Restaurant.objects.all() just returns the Restaurants, not the Places.  Note that there are two restaurants - Ace Hardware the Restaurant was created in the call to r.place = p2::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:92
# c6ae438272c04b1685395cc43f448d43
msgid "Place.objects.all() returns all Places, regardless of whether they have Restaurants::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:98
# 387f912dd8864301b43729a47135a096
msgid "You can query the models using :ref:`lookups across relationships <lookups-that-span-relationships>`::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:109
# d9a802be5acd46189a6c12fa68468871
msgid "This of course works in reverse::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:120
# 5ec76eb5d1ef4f8f8e96eb5e37a6fb4d
msgid "Add a Waiter to the Restaurant::"
msgstr ""

#: ../../topics/db/examples/one_to_one.txt:127
# 4d67633ed5354dbbbb9624947b6dd1d0
msgid "Query the waiters::"
msgstr ""

#: ../../topics/db/index.txt:2
# 9f88e56de29c414a83e4c335aa71e803
msgid "Models and databases"
msgstr ""

#: ../../topics/db/index.txt:6
#: ../../topics/db/models.txt:7
# 714bc60d8152492281775a8df38bee7e
# af7b4167a00b4fec906dc17dbbbb4db5
msgid "A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you're storing. Generally, each model maps to a single database table."
msgstr ""

#: ../../topics/db/managers.txt:3
# 67afc8670e424e71bcceacc5cf37107b
msgid "Managers"
msgstr ""

#: ../../topics/db/managers.txt:9
# c45818f098a6444d99d54cde71fd5daf
msgid "A ``Manager`` is the interface through which database query operations are provided to Django models. At least one ``Manager`` exists for every model in a Django application."
msgstr ""

#: ../../topics/db/managers.txt:13
# 5169718789c84fe481a465eb7d8af3fc
msgid "The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; this document specifically touches on model options that customize ``Manager`` behavior."
msgstr ""

#: ../../topics/db/managers.txt:20
# 5c2fb4e906874cfcb1ecf3fdc166b386
msgid "Manager names"
msgstr ""

#: ../../topics/db/managers.txt:22
# bed7b2ba26b84ede9a1778496b72d6c4
msgid "By default, Django adds a ``Manager`` with the name ``objects`` to every Django model class. However, if you want to use ``objects`` as a field name, or if you want to use a name other than ``objects`` for the ``Manager``, you can rename it on a per-model basis. To rename the ``Manager`` for a given class, define a class attribute of type ``models.Manager()`` on that model. For example::"
msgstr ""

#: ../../topics/db/managers.txt:34
# 6494abb4216b417fa7c863f70166aedd
msgid "Using this example model, ``Person.objects`` will generate an ``AttributeError`` exception, but ``Person.people.all()`` will provide a list of all ``Person`` objects."
msgstr ""

#: ../../topics/db/managers.txt:41
# 39671a1799c54ac3bae8891a24ec6dcf
msgid "Custom Managers"
msgstr ""

#: ../../topics/db/managers.txt:43
# 7e52e37d31ad41d7bbe9ebda1d89b5a4
msgid "You can use a custom ``Manager`` in a particular model by extending the base ``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

#: ../../topics/db/managers.txt:46
# 3db105f0ebac47ed99158a17387fdb17
msgid "There are two reasons you might want to customize a ``Manager``: to add extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the ``Manager`` returns."
msgstr ""

#: ../../topics/db/managers.txt:51
# 2b1fc763e03e4f91b6e02d51b0947eea
msgid "Adding extra Manager methods"
msgstr ""

#: ../../topics/db/managers.txt:53
# ee6aa6f0bf0f403ea87eac866d0edf63
msgid "Adding extra ``Manager`` methods is the preferred way to add \"table-level\" functionality to your models. (For \"row-level\" functionality -- i.e., functions that act on a single instance of a model object -- use :ref:`Model methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

#: ../../topics/db/managers.txt:58
# 177cb3665f88482180dec659f3c74104
msgid "A custom ``Manager`` method can return anything you want. It doesn't have to return a ``QuerySet``."
msgstr ""

#: ../../topics/db/managers.txt:61
# 663fa4fb09ba4b2a95006e7d3c936fae
msgid "For example, this custom ``Manager`` offers a method ``with_counts()``, which returns a list of all ``OpinionPoll`` objects, each with an extra ``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

#: ../../topics/db/managers.txt:92
# 0c5f22d28ed7428cb2607477a90692d8
msgid "With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

#: ../../topics/db/managers.txt:95
# 4b29db989d5b40babbed73fa30741c9c
msgid "Another thing to note about this example is that ``Manager`` methods can access ``self.model`` to get the model class to which they're attached."
msgstr ""

#: ../../topics/db/managers.txt:99
# 4e12985284a14ab2a662046a3692cb46
msgid "Modifying initial Manager QuerySets"
msgstr ""

#: ../../topics/db/managers.txt:101
# b00ad22135ba43ebb65bd919b8f7665a
msgid "A ``Manager``'s base ``QuerySet`` returns all objects in the system. For example, using this model::"
msgstr ""

#: ../../topics/db/managers.txt:108
# b17d68410331434db2ce3a772523ff7c
msgid "...the statement ``Book.objects.all()`` will return all books in the database."
msgstr ""

#: ../../topics/db/managers.txt:110
# bc1ade5deb8147ac8a68e82372180ae9
msgid "You can override a ``Manager``\\'s base ``QuerySet`` by overriding the ``Manager.get_query_set()`` method. ``get_query_set()`` should return a ``QuerySet`` with the properties you require."
msgstr ""

#: ../../topics/db/managers.txt:114
# de07a395fe2e495cb2e8e7b90c1c8bde
msgid "For example, the following model has *two* ``Manager``\\s -- one that returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

#: ../../topics/db/managers.txt:130
# 0daab9dbbeb84c17b6b4b5ff588362f2
msgid "With this sample model, ``Book.objects.all()`` will return all books in the database, but ``Book.dahl_objects.all()`` will only return the ones written by Roald Dahl."
msgstr ""

#: ../../topics/db/managers.txt:134
# 85acfabd93f8449e8b0c07287b59656f
msgid "Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on it. So these statements are all legal::"
msgstr ""

#: ../../topics/db/managers.txt:142
# 9d1571529365483a83c8dc5f945ee50f
msgid "This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many ``Manager()`` instances to a model as you'd like. This is an easy way to define common \"filters\" for your models."
msgstr ""

#: ../../topics/db/managers.txt:165
# 3568c4690f5549078ceacae8ba90d3ca
msgid "This example allows you to request ``Person.men.all()``, ``Person.women.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

#: ../../topics/db/managers.txt:168
# bd2cc5da65184a6386abe668b3557918
msgid "If you use custom ``Manager`` objects, take note that the first ``Manager`` Django encounters (in the order in which they're defined in the model) has a special status. Django interprets the first ``Manager`` defined in a class as the \"default\" ``Manager``, and several parts of Django (including :djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As a result, it's a good idea to be careful in your choice of default manager in order to avoid a situation where overriding ``get_query_set()`` results in an inability to retrieve objects you'd like to work with."
msgstr ""

#: ../../topics/db/managers.txt:181
# 7fa5779525994ce8a3532d133d1aefd4
msgid "Using managers for related object access"
msgstr ""

#: ../../topics/db/managers.txt:183
# 2bd2bcb4e07243eea92836da51d9ef74
msgid "By default, Django uses an instance of a \"plain\" manager class when accessing related objects (i.e. ``choice.poll``), not the default manager on the related object. This is because Django needs to be able to retrieve the related object, even if it would otherwise be filtered out (and hence be inaccessible) by the default manager."
msgstr ""

#: ../../topics/db/managers.txt:189
# 1d8ac504217f483baeac9d0f6190a11f
msgid "If the normal plain manager class (:class:`django.db.models.Manager`) is not appropriate for your circumstances, you can force Django to use the same class as the default manager for your model by setting the `use_for_related_fields` attribute on the manager class. This is documented fully below_."
msgstr ""

#: ../../topics/db/managers.txt:199
# 7bb739bc441646b5b00e4a9db2405353
msgid "Custom managers and model inheritance"
msgstr ""

#: ../../topics/db/managers.txt:201
# 898c8114c3544db6aa1954873824721f
msgid "Class inheritance and model managers aren't quite a perfect match for each other. Managers are often specific to the classes they are defined on and inheriting them in subclasses isn't necessarily a good idea. Also, because the first manager declared is the *default manager*, it is important to allow that to be controlled. So here's how Django handles custom managers and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

#: ../../topics/db/managers.txt:208
# 784ab8d5c2e9440abbe549f6f9411b44
msgid "Managers defined on non-abstract base classes are *not* inherited by child classes. If you want to reuse a manager from a non-abstract base, redeclare it explicitly on the child class. These sorts of managers are likely to be fairly specific to the class they are defined on, so inheriting them can often lead to unexpected results (particularly as far as the default manager goes). Therefore, they aren't passed onto child classes."
msgstr ""

#: ../../topics/db/managers.txt:216
# 9e3a90fecc9d4662b04bdfca7d640197
msgid "Managers from abstract base classes are always inherited by the child class, using Python's normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on). Abstract base classes are designed to capture information and behavior that is common to their child classes. Defining common managers is an appropriate part of this common information."
msgstr ""

#: ../../topics/db/managers.txt:223
# 4432b7e6c37841b89755530cb2889fc7
msgid "The default manager on a class is either the first manager declared on the class, if that exists, or the default manager of the first abstract base class in the parent hierarchy, if that exists. If no default manager is explicitly declared, Django's normal default manager is used."
msgstr ""

#: ../../topics/db/managers.txt:229
# 516c5cd3d758422daa26b54f9366e770
msgid "These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class::"
msgstr ""

#: ../../topics/db/managers.txt:241
# 2427a633e539474ab93bd1bebaf4eb61
msgid "If you use this directly in a subclass, ``objects`` will be the default manager if you declare no managers in the base class::"
msgstr ""

#: ../../topics/db/managers.txt:248
# eb14e06f19b94a81ba679393c6f5e684
msgid "If you want to inherit from ``AbstractBase``, but provide a different default manager, you can provide the default manager on the child class::"
msgstr ""

#: ../../topics/db/managers.txt:256
# 154591859f95427eb4f8672fc11ee04f
msgid "Here, ``default_manager`` is the default. The ``objects`` manager is still available, since it's inherited. It just isn't used as the default."
msgstr ""

#: ../../topics/db/managers.txt:259
# 8351a41e68304f05b120269f58d58d77
msgid "Finally for this example, suppose you want to add extra managers to the child class, but still use the default from ``AbstractBase``. You can't add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy *after* the defaults::"
msgstr ""

#: ../../topics/db/managers.txt:278
# 20dd2ae7365347388265e74395c203e7
msgid "Implementation concerns"
msgstr ""

#: ../../topics/db/managers.txt:280
# 111471f8afb34848b863ba42a22f7f82
msgid "Whatever features you add to your custom ``Manager``, it must be possible to make a shallow copy of a ``Manager`` instance; i.e., the following code must work::"
msgstr ""

#: ../../topics/db/managers.txt:288
# 5aea2aac95894dca9dd23c5a3e92ee6c
msgid "Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail."
msgstr ""

#: ../../topics/db/managers.txt:291
# 998548e4fd6e444ebd40b00d7f91ddf0
msgid "This won't be an issue for most custom managers. If you are just adding simple methods to your ``Manager``, it is unlikely that you will inadvertently make instances of your ``Manager`` uncopyable. However, if you're overriding ``__getattr__`` or some other private method of your ``Manager`` object that controls object state, you should ensure that you don't affect the ability of your ``Manager`` to be copied."
msgstr ""

#: ../../topics/db/managers.txt:302
# 341daa2e3b8348309ed31413ec922ec0
msgid "Controlling automatic Manager types"
msgstr ""

#: ../../topics/db/managers.txt:304
# 11e247d7046745c1820b1813c426e704
msgid "This document has already mentioned a couple of places where Django creates a manager class for you: `default managers`_ and the \"plain\" manager used to `access related objects`_. There are other places in the implementation of Django where temporary plain managers are needed. Those automatically created managers will normally be instances of the :class:`django.db.models.Manager` class."
msgstr ""

#: ../../topics/db/managers.txt:314
# 3c0a952888b4426a8a7a41bd7682cd24
msgid "Throughout this section, we will use the term \"automatic manager\" to mean a manager that Django creates for you -- either as a default manager on a model with no managers, or to use temporarily when accessing related objects."
msgstr ""

#: ../../topics/db/managers.txt:318
# 681a85b0263b4fd8b71f9ae7b3397815
msgid "Sometimes this default class won't be the right choice. One example is in the :mod:`django.contrib.gis` application that ships with Django itself. All ``gis`` models must use a special manager class (:class:`~django.contrib.gis.db.models.GeoManager`) because they need a special queryset (:class:`~django.contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the database.  It turns out that models which require a special manager like this need to use the same manager class wherever an automatic manager is created."
msgstr ""

#: ../../topics/db/managers.txt:326
# da6ec8fd91b44fdbb82248a6427b868f
msgid "Django provides a way for custom manager developers to say that their manager class should be used for automatic managers whenever it is the default manager on a model. This is done by setting the ``use_for_related_fields`` attribute on the manager class::"
msgstr ""

#: ../../topics/db/managers.txt:336
# b00d0833130146f09eec3683e0675047
msgid "If this attribute is set on the *default* manager for a model (only the default manager is considered in these situations), Django will use that class whenever it needs to automatically create a manager for the class.  Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

#: ../../topics/db/managers.txt:343
# 9923def804f4440ca141a0e3bdd6d5b0
msgid "Given the purpose for which it's used, the name of this attribute (``use_for_related_fields``) might seem a little odd. Originally, the attribute only controlled the type of manager used for related field access, which is where the name came from. As it became clear the concept was more broadly useful, the name hasn't been changed. This is primarily so that existing code will :doc:`continue to work </misc/api-stability>` in future Django versions."
msgstr ""

#: ../../topics/db/managers.txt:352
# 6028b1c4e28a4a709cc744c7c7c58a1b
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

#: ../../topics/db/managers.txt:354
# 3ef6b3cd764f4418b90018580be3448c
msgid "As already suggested by the `django.contrib.gis` example, above, the ``use_for_related_fields`` feature is primarily for managers that need to return a custom ``QuerySet`` subclass. In providing this functionality in your manager, there are a couple of things to remember."
msgstr ""

#: ../../topics/db/managers.txt:360
# 6121dd869ba14adeaac325cee6257c61
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

#: ../../topics/db/managers.txt:362
# 3911f940fec549f2b42e565f77e494e8
msgid "One reason an automatic manager is used is to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that *anything* which is referred to can be retrieved."
msgstr ""

#: ../../topics/db/managers.txt:367
# a879f16f04584723916115b54916ecec
msgid "If you override the ``get_query_set()`` method and filter out any rows, Django will return incorrect results. Don't do that. A manager that filters results in ``get_query_set()`` is not appropriate for use as an automatic manager."
msgstr ""

#: ../../topics/db/managers.txt:372
# 5ca168b450074420b8def386b9a22a6f
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

#: ../../topics/db/managers.txt:374
# 71fa02df7f70458c8aa5565c7b0c6ec1
msgid "The ``use_for_related_fields`` attribute must be set on the manager *class*, not on an *instance* of the class. The earlier example shows the correct way to set it, whereas the following will not work::"
msgstr ""

#: ../../topics/db/managers.txt:393
# fa96cada836c4f47a389c9fbaae8f265
msgid "You also shouldn't change the attribute on the class object after it has been used in a model, since the attribute's value is processed when the model class is created and not subsequently reread. Set the attribute on the manager class when it is first defined, as in the initial example of this section and everything will work smoothly."
msgstr ""

#: ../../topics/db/models.txt:3
# f3b45c5062cb4faea1d983965fe16966
msgid "Models"
msgstr ""

#: ../../topics/db/models.txt:11
# e5200d63b3234fdb92b64c24c7b7cd1c
msgid "The basics:"
msgstr ""

#: ../../topics/db/models.txt:13
# 9d850e77cdb24b9c9f67cefbe7196c95
msgid "Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

#: ../../topics/db/models.txt:16
# 410f060eb91247debacfa61f7618f970
msgid "Each attribute of the model represents a database field."
msgstr ""

#: ../../topics/db/models.txt:18
# 5da0462466c6487c8398871d4d646f39
msgid "With all of this, Django gives you an automatically-generated database-access API; see :doc:`/topics/db/queries`."
msgstr ""

#: ../../topics/db/models.txt:23
#: ../../topics/email.txt:17
# 1ee5950dff8c41d9b1c93d69da2099a9
# 0fe366f0481647eeab239538e8b81a9a
msgid "Quick example"
msgstr ""

#: ../../topics/db/models.txt:25
# b82ea486d9b347cca4a19c123dab80ac
msgid "This example model defines a ``Person``, which has a ``first_name`` and ``last_name``::"
msgstr ""

#: ../../topics/db/models.txt:34
# 63648c711c5f4807aa005967e6a7c5ef
msgid "``first_name`` and ``last_name`` are fields_ of the model. Each field is specified as a class attribute, and each attribute maps to a database column."
msgstr ""

#: ../../topics/db/models.txt:37
# 0ebf6908f88b4ec8a238bcc5c05540e7
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

#: ../../topics/db/models.txt:47
# 71a9d1f3ba0c4da3973a10510debd8cb
msgid "Some technical notes:"
msgstr ""

#: ../../topics/db/models.txt:49
# 335f116069f241e9b610c0423178bddd
msgid "The name of the table, ``myapp_person``, is automatically derived from some model metadata but can be overridden. See :ref:`table-names` for more details.."
msgstr ""

#: ../../topics/db/models.txt:53
# 1a9472edf85e48a7930c750b38cc0446
msgid "An ``id`` field is added automatically, but this behavior can be overridden. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../topics/db/models.txt:56
# 8a6c72c7fddb4b79a5d5844a5b81852d
msgid "The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL syntax, but it's worth noting Django uses SQL tailored to the database backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

#: ../../topics/db/models.txt:61
# d13a6d539e524c4ca5d2dacb1ea86104
msgid "Using models"
msgstr ""

#: ../../topics/db/models.txt:63
# 3b31bd68f77142cb9ecfaff7d34362e1
msgid "Once you have defined your models, you need to tell Django you're going to *use* those models. Do this by editing your settings file and changing the :setting:`INSTALLED_APPS` setting to add the name of the module that contains your ``models.py``."
msgstr ""

#: ../../topics/db/models.txt:68
# 8e3aa41ef0fc4135b8eaa2bac46e0c97
msgid "For example, if the models for your application live in the module ``mysite.myapp.models`` (the package structure that is created for an application by the :djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` should read, in part::"
msgstr ""

#: ../../topics/db/models.txt:79
# 09b2c2a96da849c1a1cd4cded32badea
msgid "When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

#: ../../topics/db/models.txt:85
# 06ecacfceead4b7087fb859260d52e1c
msgid "The most important part of a model -- and the only required part of a model -- is the list of database fields it defines. Fields are specified by class attributes. Be careful not to choose field names that conflict with the :doc:`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""

#: ../../topics/db/models.txt:91
#: ../../topics/db/queries.txt:258
#: ../../topics/db/queries.txt:1049
#: ../../topics/db/queries.txt:1098
#: ../../topics/db/transactions.txt:122
#: ../../topics/settings.txt:180
# 79f1f52e5cf5412fbf84d122a7136219
# db9fe9a0bae14f69a4cba77e7a2f944f
# 0205d51dac0441eaae898e95ef6b83e8
# c74e91c87c77455a9a095f83323e3b1d
# 59bef6978328408c903d2b525a07a3d2
# b4d932491777437e8da4ed5435870dc5
msgid "Example::"
msgstr ""

#: ../../topics/db/models.txt:105
#: ../../topics/forms/modelforms.txt:40
# 253218dce3d7472191c4a595d40cb701
# c09058d332a440d8ad88cb1d08ad61c9
msgid "Field types"
msgstr ""

#: ../../topics/db/models.txt:107
# f34c2f243dbd4f75b353cd91fa06f55f
msgid "Each field in your model should be an instance of the appropriate :class:`~django.db.models.Field` class. Django uses the field class types to determine a few things:"
msgstr ""

#: ../../topics/db/models.txt:111
# 5bcc78d856a84c76964d9469e9c6f38d
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

#: ../../topics/db/models.txt:113
# c4cdc1f0bfc0457f934a6d36af246c13
msgid "The default :doc:`widget </ref/forms/widgets>` to use when rendering a form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

#: ../../topics/db/models.txt:116
# 901d70a155ac4d1eafbe3ffd5c254d14
msgid "The minimal validation requirements, used in Django's admin and in automatically-generated forms."
msgstr ""

#: ../../topics/db/models.txt:119
# 63543f547ee4497bb07aa8393f3c6385
msgid "Django ships with dozens of built-in field types; you can find the complete list in the :ref:`model field reference <model-field-types>`. You can easily write your own fields if Django's built-in ones don't do the trick; see :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../topics/db/models.txt:125
# 5617ac60600e4d63a4c5c7c1b343ac5f
msgid "Field options"
msgstr ""

#: ../../topics/db/models.txt:127
# 32d6a5793947491e88e52551d422bbd1
msgid "Each field takes a certain set of field-specific arguments (documented in the :ref:`model field reference <model-field-types>`). For example, :class:`~django.db.models.CharField` (and its subclasses) require a :attr:`~django.db.models.CharField.max_length` argument which specifies the size of the ``VARCHAR`` database field used to store the data."
msgstr ""

#: ../../topics/db/models.txt:133
# 288150416bfb4d3f95e2b40c975fcb81
msgid "There's also a set of common arguments available to all field types. All are optional. They're fully explained in the :ref:`reference <common-model-field-options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

#: ../../topics/db/models.txt:139
# 61910da67a4045c181dc74dbbc5747fb
msgid "If ``True``, Django will store empty values as ``NULL`` in the database. Default is ``False``."
msgstr ""

#: ../../topics/db/models.txt:143
# 0c1853e227df4a0cad9f8a9db72f9826
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../topics/db/models.txt:145
# b1f04d878ab244239edf234a0ff18a6d
msgid "Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is purely database-related, whereas :attr:`~Field.blank` is validation-related. If a field has :attr:`blank=True <Field.blank>`, form validation will allow entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, the field will be required."
msgstr ""

#: ../../topics/db/models.txt:153
# 8a4a673f5e984b96ac47f56c804b84cb
msgid "An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this field. If this is given, the default form widget will be a select box instead of the standard text field and will limit choices to the choices given."
msgstr ""

#: ../../topics/db/models.txt:158
# 999b70f0002a4406aacae79d4c913b99
msgid "A choices list looks like this::"
msgstr ""

#: ../../topics/db/models.txt:168
# d85f0bc062f14b889ee0fac413c4a9cb
msgid "The first element in each tuple is the value that will be stored in the database, the second element will be displayed by the default form widget or in a ModelChoiceField. Given an instance of a model object, the display value for a choices field can be accessed using the ``get_FOO_display`` method. For example::"
msgstr ""

#: ../../topics/db/models.txt:195
# 3c92abb28c2e42cba0b86a3a5415375a
msgid "The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created."
msgstr ""

#: ../../topics/db/models.txt:200
# 2209e327cdc04d659534b33d8c3d3ab4
msgid "Extra \"help\" text to be displayed with the form widget. It's useful for documentation even if your field isn't used on a form."
msgstr ""

#: ../../topics/db/models.txt:204
# dcf4f10f5d80452a9d22cbca0f98ded3
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../topics/db/models.txt:206
# b49261139057471587ac75ef75019b30
msgid "If you don't specify :attr:`primary_key=True <Field.primary_key>` for any fields in your model, Django will automatically add an :class:`IntegerField` to hold the primary key, so you don't need to set :attr:`primary_key=True <Field.primary_key>` on any of your fields unless you want to override the default primary-key behavior. For more, see :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../topics/db/models.txt:214
# 5a8a3bf130f04f78a82bb7f0e0d90f8c
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../topics/db/models.txt:216
# 16cfff39c6e4412fb10b1153e072214e
msgid "Again, these are just short descriptions of the most common field options. Full details can be found in the :ref:`common model field option reference <common-model-field-options>`."
msgstr ""

#: ../../topics/db/models.txt:223
# a4fab9a2e9dc46d28214a5d7c40ddc4c
msgid "Automatic primary key fields"
msgstr ""

#: ../../topics/db/models.txt:225
# 228c68421a57455a83cdaa1f2c6c95dd
msgid "By default, Django gives each model the following field::"
msgstr ""

#: ../../topics/db/models.txt:229
# 5bf0f8dfd54a4246823e2e54d21268e9
msgid "This is an auto-incrementing primary key."
msgstr ""

#: ../../topics/db/models.txt:231
# 3caea7367746477bb2fdf2e8db99ff9b
msgid "If you'd like to specify a custom primary key, just specify :attr:`primary_key=True <Field.primary_key>` on one of your fields. If Django sees you've explicitly set :attr:`Field.primary_key`, it won't add the automatic ``id`` column."
msgstr ""

#: ../../topics/db/models.txt:236
# cd3b45fe4bef460e9b9b161f03a62fe6
msgid "Each model requires exactly one field to have :attr:`primary_key=True <Field.primary_key>`."
msgstr ""

#: ../../topics/db/models.txt:242
# 711fea7349444692a0ef4fd86db67094
msgid "Verbose field names"
msgstr ""

#: ../../topics/db/models.txt:244
# aae1b9aa50e04053ab1f5b159ef3223d
msgid "Each field type, except for :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField`, takes an optional first positional argument -- a verbose name. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces."
msgstr ""

#: ../../topics/db/models.txt:251
# b40065e129824d8cbd30b2f9f2e6e4d6
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

#: ../../topics/db/models.txt:255
# 81e90e1e8c4f474d924715b7c477137b
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

#: ../../topics/db/models.txt:259
# 730d1d79c42a4b0c89783c8bea795d6a
msgid ":class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` and :class:`~django.db.models.OneToOneField` require the first argument to be a model class, so use the :attr:`~Field.verbose_name` keyword argument::"
msgstr ""

#: ../../topics/db/models.txt:268
# 2de9ba2d01854fd99cead6b072ca97b1
msgid "The convention is not to capitalize the first letter of the :attr:`~Field.verbose_name`. Django will automatically capitalize the first letter where it needs to."
msgstr ""

#: ../../topics/db/models.txt:273
# cf560cb9d40f4cbb8c739becb305b3bc
msgid "Relationships"
msgstr ""

#: ../../topics/db/models.txt:275
# d73a9646f160405fba71b1b4997ef4a8
msgid "Clearly, the power of relational databases lies in relating tables to each other. Django offers ways to define the three most common types of database relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

#: ../../topics/db/models.txt:282
# 331ecea2dbc3404da9a039b19d69ab49
msgid "To define a many-to-one relationship, use :class:`django.db.models.ForeignKey`. You use it just like any other :class:`~django.db.models.Field` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:286
# 15d44e28eb2e4663a604dc9559851e79
msgid ":class:`~django.db.models.ForeignKey` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:289
# 9115181282bb46ba9d60b7d2e8c0a0f1
msgid "For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a ``Manufacturer`` makes multiple cars but each ``Car`` only has one ``Manufacturer`` -- use the following definitions::"
msgstr ""

#: ../../topics/db/models.txt:300
# 43125f37891e4533a68fe16023099f4d
msgid "You can also create :ref:`recursive relationships <recursive-relationships>` (an object with a many-to-one relationship to itself) and :ref:`relationships to models not yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-foreignkey>` for details."
msgstr ""

#: ../../topics/db/models.txt:305
# 99924415fe42402f87960f1a7005464c
msgid "It's suggested, but not required, that the name of a :class:`~django.db.models.ForeignKey` field (``manufacturer`` in the example above) be the name of the model, lowercase. You can, of course, call the field whatever you want. For example::"
msgstr ""

#: ../../topics/db/models.txt:316
# 586cab018648424994f5cc47c02d9e70
msgid ":class:`~django.db.models.ForeignKey` fields accept a number of extra arguments which are explained in :ref:`the model field reference <foreign-key-arguments>`. These options help define how the relationship should work; all are optional."
msgstr ""

#: ../../topics/db/models.txt:321
# 7da6d1fb9544455499e943aca28e6261
msgid "For details on accessing backwards-related objects, see the :ref:`Following relationships backward example <backwards-related-objects>`."
msgstr ""

#: ../../topics/db/models.txt:324
# 2020b62c5f3c4e18874846e8c3f4369d
msgid "For sample code, see the :doc:`Many-to-one relationship model example </topics/db/examples/many_to_one>`."
msgstr ""

#: ../../topics/db/models.txt:331
# 8068f42a6f224ae2b3c36ffeed71b045
msgid "To define a many-to-many relationship, use :class:`~django.db.models.ManyToManyField`. You use it just like any other :class:`~django.db.models.Field` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:336
# 43b2cd3fbd814597b653c1571df2c110
msgid ":class:`~django.db.models.ManyToManyField` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:339
# 0b114a11fd6f42a49d7beaea0aa23916
msgid "For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a ``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple toppings -- here's how you'd represent that::"
msgstr ""

#: ../../topics/db/models.txt:350
# 5f6928ebaedd4a3f815cd8639e10f3d7
msgid "As with :class:`~django.db.models.ForeignKey`, you can also create :ref:`recursive relationships <recursive-relationships>` (an object with a many-to-many relationship to itself) and :ref:`relationships to models not yet defined <lazy-relationships>`; see :ref:`the model field reference <ref-manytomany>` for details."
msgstr ""

#: ../../topics/db/models.txt:356
# e96885e34ea047ef9265d8c341de9aed
msgid "It's suggested, but not required, that the name of a :class:`~django.db.models.ManyToManyField` (``toppings`` in the example above) be a plural describing the set of related model objects."
msgstr ""

#: ../../topics/db/models.txt:360
# c3eec7ddc4c7413d9177759484902b35
msgid "It doesn't matter which model has the :class:`~django.db.models.ManyToManyField`, but you should only put it in one of the models -- not both."
msgstr ""

#: ../../topics/db/models.txt:364
# dd78a48fe393411ba01262015e84c38f
msgid "Generally, :class:`~django.db.models.ManyToManyField` instances should go in the object that's going to be edited on a form. In the above example, ``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :class:`~django.db.models.ManyToManyField` ) because it's more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it's set up above, the ``Pizza`` form would let users select the toppings."
msgstr ""

#: ../../topics/db/models.txt:373
# 97be41184fec4649a56ab5f12be7e145
msgid "See the :doc:`Many-to-many relationship model example </topics/db/examples/many_to_many>` for a full example."
msgstr ""

#: ../../topics/db/models.txt:376
# 05674dd4e8634a8882cb59058635fbb9
msgid ":class:`~django.db.models.ManyToManyField` fields also accept a number of extra arguments which are explained in :ref:`the model field reference <manytomany-arguments>`. These options help define how the relationship should work; all are optional."
msgstr ""

#: ../../topics/db/models.txt:384
# fee7926747dc4e8ab3940be60ad9c9cf
msgid "Extra fields on many-to-many relationships"
msgstr ""

#: ../../topics/db/models.txt:386
# d0e92cc0f43f46738180574a1c0831f9
msgid "When you're only dealing with simple many-to-many relationships such as mixing and matching pizzas and toppings, a standard :class:`~django.db.models.ManyToManyField` is all you need. However, sometimes you may need to associate data with the relationship between two models."
msgstr ""

#: ../../topics/db/models.txt:391
# daeaaa69d822441d8904bae0774a21b4
msgid "For example, consider the case of an application tracking the musical groups which musicians belong to. There is a many-to-many relationship between a person and the groups of which they are a member, so you could use a :class:`~django.db.models.ManyToManyField` to represent this relationship. However, there is a lot of detail about the membership that you might want to collect, such as the date at which the person joined the group."
msgstr ""

#: ../../topics/db/models.txt:398
# 51e80c60e64f4adf94b9a273e76b26ee
msgid "For these situations, Django allows you to specify the model that will be used to govern the many-to-many relationship. You can then put extra fields on the intermediate model. The intermediate model is associated with the :class:`~django.db.models.ManyToManyField` using the :attr:`through <ManyToManyField.through>` argument to point to the model that will act as an intermediary. For our musician example, the code would look something like this::"
msgstr ""

#: ../../topics/db/models.txt:425
# d67b38f8ce604babb0a985f2cd207ebf
msgid "When you set up the intermediary model, you explicitly specify foreign keys to the models that are involved in the ManyToMany relation. This explicit declaration defines how the two models are related."
msgstr ""

#: ../../topics/db/models.txt:429
# d50b8763831a4cbc9cea02d4df889c88
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

#: ../../topics/db/models.txt:431
# 8b52aedcc00a4780b08a5d0719d329be
msgid "Your intermediate model must contain one - and *only* one - foreign key to the target model (this would be ``Person`` in our example). If you have more than one foreign key, a validation error will be raised."
msgstr ""

#: ../../topics/db/models.txt:435
# 70bbe6a85bee41fba95d7ec6ee37bccc
msgid "Your intermediate model must contain one - and *only* one - foreign key to the source model (this would be ``Group`` in our example). If you have more than one foreign key, a validation error will be raised."
msgstr ""

#: ../../topics/db/models.txt:439
# baa026f44c8548f78c058708b5aba0b8
msgid "The only exception to this is a model which has a many-to-many relationship to itself, through an intermediary model. In this case, two foreign keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many relation."
msgstr ""

#: ../../topics/db/models.txt:445
# 839a819c7b9d497f9e9b1276afd49819
msgid "When defining a many-to-many relationship from a model to itself, using an intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField.symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

#: ../../topics/db/models.txt:450
# 714729e4386d4f34b45205bdcb0b6e1c
msgid "Now that you have set up your :class:`~django.db.models.ManyToManyField` to use your intermediary model (``Membership``, in this case), you're ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model::"
msgstr ""

#: ../../topics/db/models.txt:472
# 1c0ae32daada4c3d9ea58e870156ad2e
msgid "Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

#: ../../topics/db/models.txt:482
# 200167810fbc4bb9801591084dceb54e
msgid "Why? You can't just create a relationship between a ``Person`` and a ``Group`` - you need to specify all the detail for the relationship required by the ``Membership`` model. The simple ``add``, ``create`` and assignment calls don't provide a way to specify this extra detail. As a result, they are disabled for many-to-many relationships that use an intermediate model. The only way to create this type of relationship is to create instances of the intermediate model."
msgstr ""

#: ../../topics/db/models.txt:490
# c468bbff072445f48a036ab674f902b6
msgid "The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is disabled for similar reasons. However, the :meth:`~django.db.models.fields.related.RelatedManager.clear` method can be used to remove all many-to-many relationships for an instance::"
msgstr ""

#: ../../topics/db/models.txt:498
# 89ef1269502d4fa187ac2da0bdfa1238
msgid "Once you have established the many-to-many relationships by creating instances of your intermediate model, you can issue queries. Just as with normal many-to-many relationships, you can query using the attributes of the many-to-many-related model::"
msgstr ""

#: ../../topics/db/models.txt:507
# 9bc7d0f6d0b5480f9ac923989a392a54
msgid "As you are using an intermediate model, you can also query on its attributes::"
msgstr ""

#: ../../topics/db/models.txt:515
# a52a0520c5a941159a552d28a699a8c7
msgid "If you need to access a membership's information you may do so by directly querying the ``Membership`` model::"
msgstr ""

#: ../../topics/db/models.txt:524
# 8b1c6ea92642453bb32dc7740b8ea35f
msgid "Another way to access the same information is by querying the :ref:`many-to-many reverse relationship<m2m-reverse-relationships>` from a ``Person`` object::"
msgstr ""

#: ../../topics/db/models.txt:538
# 8ab1a65c77014097bffbf5555a9a625a
msgid "To define a one-to-one relationship, use :class:`~django.db.models.OneToOneField`. You use it just like any other ``Field`` type: by including it as a class attribute of your model."
msgstr ""

#: ../../topics/db/models.txt:542
# 6cd7a2f4ac72454ba1049943f792e0d2
msgid "This is most useful on the primary key of an object when that object \"extends\" another object in some way."
msgstr ""

#: ../../topics/db/models.txt:545
# cee459fc8f944b6d87beb494eb8b54d7
msgid ":class:`~django.db.models.OneToOneField` requires a positional argument: the class to which the model is related."
msgstr ""

#: ../../topics/db/models.txt:548
# d26568fc01db4b67a9adf1d72957046a
msgid "For example, if you were building a database of \"places\", you would build pretty standard stuff such as address, phone number, etc. in the database. Then, if you wanted to build a database of restaurants on top of the places, instead of repeating yourself and replicating those fields in the ``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django.db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; in fact, to handle this you'd typically use :ref:`inheritance <model-inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

#: ../../topics/db/models.txt:558
# 73bb5cb5a2ad4687b0e2108b251eee86
msgid "As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive relationship <recursive-relationships>` can be defined and :ref:`references to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the model field reference <ref-onetoone>` for details."
msgstr ""

#: ../../topics/db/models.txt:566
# 9ad2648b59ff47678a7b8f99a5e7e4f2
msgid "See the :doc:`One-to-one relationship model example </topics/db/examples/one_to_one>` for a full example."
msgstr ""

#: ../../topics/db/models.txt:569
# 6a36195671e240bbac3fd1d9001f143e
msgid ":class:`~django.db.models.OneToOneField` fields also accept one specific, optional ``parent_link`` argument described in the :ref:`model field reference <ref-onetoone>`."
msgstr ""

#: ../../topics/db/models.txt:573
# a8a3a8f775f8423eac6f7e8f3d7e073e
msgid ":class:`~django.db.models.OneToOneField` classes used to automatically become the primary key on a model. This is no longer true (although you can manually pass in the :attr:`~django.db.models.Field.primary_key` argument if you like). Thus, it's now possible to have multiple fields of type :class:`~django.db.models.OneToOneField` on a single model."
msgstr ""

#: ../../topics/db/models.txt:580
# cc8b2e58c7b447e4a40759054f49b434
msgid "Models across files"
msgstr ""

#: ../../topics/db/models.txt:582
# aff6f50b9c7c488f9a9fa32e56f3bd23
msgid "It's perfectly OK to relate a model to one from another app. To do this, import the related model at the top of the file where your model is defined. Then, just refer to the other model class wherever needed. For example::"
msgstr ""

#: ../../topics/db/models.txt:593
# 1cf620ef74ed4eacad8f1f27b2b25f2d
msgid "Field name restrictions"
msgstr ""

#: ../../topics/db/models.txt:595
# 1a79541d764241bfbd19bae46d263d9e
msgid "Django places only two restrictions on model field names:"
msgstr ""

#: ../../topics/db/models.txt:597
# cbaaace5ac874fe1bda37e3d8c2070a4
msgid "A field name cannot be a Python reserved word, because that would result in a Python syntax error. For example::"
msgstr ""

#: ../../topics/db/models.txt:603
# c1ce5c4ed2ca46b0bc273e352129d8bc
msgid "A field name cannot contain more than one underscore in a row, due to the way Django's query lookup syntax works. For example::"
msgstr ""

#: ../../topics/db/models.txt:609
# 6c4d261900204989815c71a97bd67002
msgid "These limitations can be worked around, though, because your field name doesn't necessarily have to match your database column name. See the :attr:`~Field.db_column` option."
msgstr ""

#: ../../topics/db/models.txt:613
# 4ddd7a114922461b8f6357e8ced2fee8
msgid "SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed as model field names, because Django escapes all database table names and column names in every underlying SQL query. It uses the quoting syntax of your particular database engine."
msgstr ""

#: ../../topics/db/models.txt:619
# 48ef4ef402f243298ec30d306133f9de
msgid "Custom field types"
msgstr ""

#: ../../topics/db/models.txt:621
# 64ab3dae397f414b8e8fb35dc2760944
msgid "If one of the existing model fields cannot be used to fit your purposes, or if you wish to take advantage of some less common database column types, you can create your own field class. Full coverage of creating your own fields is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../topics/db/models.txt:629
# ca25987c885a4d46a945c37c77865f3c
msgid "Meta options"
msgstr ""

#: ../../topics/db/models.txt:631
# ba0e7260aac24f4d8752bbbd71d7f7c3
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

#: ../../topics/db/models.txt:640
# 26ba83e3a7b540f19bf407d88485ba5d
msgid "Model metadata is \"anything that's not a field\", such as ordering options (:attr:`~Options.ordering`), database table name (:attr:`~Options.db_table`), or human-readable singular and plural names (:attr:`~Options.verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, and adding ``class Meta`` to a model is completely optional."
msgstr ""

#: ../../topics/db/models.txt:646
# e241b235a7c847df9e6e00acf8e25671
msgid "A complete list of all possible ``Meta`` options can be found in the :doc:`model option reference </ref/models/options>`."
msgstr ""

#: ../../topics/db/models.txt:652
# 9771b2b45bbd42a2a9f601f7db294234
msgid "Model methods"
msgstr ""

#: ../../topics/db/models.txt:654
# 34bf96cf649f4da1a5f6866401712c03
msgid "Define custom methods on a model to add custom \"row-level\" functionality to your objects. Whereas :class:`~django.db.models.Manager` methods are intended to do \"table-wide\" things, model methods should act on a particular model instance."
msgstr ""

#: ../../topics/db/models.txt:658
# fb5a8c9270694ce5b32d14b92646b1d3
msgid "This is a valuable technique for keeping business logic in one place -- the model."
msgstr ""

#: ../../topics/db/models.txt:661
# 8a076bc3593d433cb8f7036dcbd47deb
msgid "For example, this model has a few custom methods::"
msgstr ""

#: ../../topics/db/models.txt:692
# 45c5a7af5c7b44f69b1e9f2c8949b3ac
msgid "The last method in this example is a :term:`property`."
msgstr ""

#: ../../topics/db/models.txt:694
# e546c454f1184cf8800a85bcdf92a1be
msgid "The :doc:`model instance reference </ref/models/instances>` has a complete list of :ref:`methods automatically given to each model <model-instance-methods>`. You can override most of these -- see `overriding predefined model methods`_, below -- but there are a couple that you'll almost always want to define:"
msgstr ""

#: ../../topics/db/models.txt:700
# ec7ba0abf03d48779c51055ab1e6a4a1
msgid "A Python \"magic method\" that returns a unicode \"representation\" of any object. This is what Python and Django will use whenever a model instance needs to be coerced and displayed as a plain string. Most notably, this happens when you display an object in an interactive console or in the admin."
msgstr ""

#: ../../topics/db/models.txt:706
# 0158f93c77654284b2f23b0e57e24dd1
msgid "You'll always want to define this method; the default isn't very helpful at all."
msgstr ""

#: ../../topics/db/models.txt:710
# f2f31b9651cb4cb38350963c472692b0
msgid "This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object."
msgstr ""

#: ../../topics/db/models.txt:714
# 6fb24e40fbb146f38dfcf852c00b9428
msgid "Any object that has a URL that uniquely identifies it should define this method."
msgstr ""

#: ../../topics/db/models.txt:720
# 239324bcd2e9469c963992077cd54e37
msgid "Overriding predefined model methods"
msgstr ""

#: ../../topics/db/models.txt:722
# 5ccef03b1a6740adaf5b673e52e48d22
msgid "There's another set of :ref:`model methods <model-instance-methods>` that encapsulate a bunch of database behavior that you'll want to customize. In particular you'll often want to change the way :meth:`~Model.save` and :meth:`~Model.delete` work."
msgstr ""

#: ../../topics/db/models.txt:727
# dd43f0388f5643e0a812dac7953977b0
msgid "You're free to override these methods (and any other model method) to alter behavior."
msgstr ""

#: ../../topics/db/models.txt:730
# e7b72ade612a4de5a95fdc8f9c82a06a
msgid "A classic use-case for overriding the built-in methods is if you want something to happen whenever you save an object. For example (see :meth:`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

#: ../../topics/db/models.txt:743
# 46132904c02e45f79b69b33796c207ad
msgid "You can also prevent saving::"
msgstr ""

#: ../../topics/db/models.txt:755
# 4a90ab694066421d8b36be66ad9220b2
msgid "It's important to remember to call the superclass method -- that's that ``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won't happen and the database won't get touched."
msgstr ""

#: ../../topics/db/models.txt:761
# 428034ccc32b4bcf9bd7ef4bd296600e
msgid "It's also important that you pass through the arguments that can be passed to the model method -- that's what the ``*args, **kwargs`` bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new arguments. If you use ``*args, **kwargs`` in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added."
msgstr ""

#: ../../topics/db/models.txt:770
# 24d8d40965da4987a91caa40bb6b2acb
msgid "Note that the :meth:`~Model.delete()` method for an object is not necessarily called when :ref:`deleting objects in bulk using a QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :data:`~django.db.models.signals.post_delete` signals."
msgstr ""

#: ../../topics/db/models.txt:776
# 9a7bc4af4d6044dcb6b2e9911827f688
msgid "Unfortunately, there isn't a workaround when :meth:`creating<django.db.models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models.query.QuerySet.update>` objects in bulk, since none of :meth:`~Model.save()`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db.models.signals.post_save` are called."
msgstr ""

#: ../../topics/db/models.txt:784
# ed3497450513414b8b9c61305053ccfd
msgid "Executing custom SQL"
msgstr ""

#: ../../topics/db/models.txt:786
# cc32c2a6d6614f71a5b46f13d0bb84eb
msgid "Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

#: ../../topics/db/models.txt:793
# 6313f6f4fe74489a8ba330dad28a87b3
msgid "Model inheritance"
msgstr ""

#: ../../topics/db/models.txt:795
# e32246be8da64a6580f910dbe823c335
msgid "Model inheritance in Django works almost identically to the way normal class inheritance works in Python. The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models."
msgstr ""

#: ../../topics/db/models.txt:802
# d1a7eb45fed44a8faf40ca1ce9b60819
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

#: ../../topics/db/models.txt:804
# 0fb030e0015949a0afdef3e18de57d27
msgid "Often, you will just want to use the parent class to hold information that you don't want to have to type out for each child model. This class isn't going to ever be used in isolation, so :ref:`abstract-base-classes` are what you're after."
msgstr ""

#: ../../topics/db/models.txt:808
# 74a2b83a63f547dfb7c3482c889317fa
msgid "If you're subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, :ref:`multi-table-inheritance` is the way to go."
msgstr ""

#: ../../topics/db/models.txt:811
# 9747a0faa7034f74bf0890d485cf0465
msgid "Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use :ref:`proxy-models`."
msgstr ""

#: ../../topics/db/models.txt:818
# 2f37c0dd6f3f4d97ac7ec46f695b592b
msgid "Abstract base classes"
msgstr ""

#: ../../topics/db/models.txt:820
# aa20b31df66042a5830fe21a4ac4cc29
msgid "Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put ``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class. It is an error to have fields in the abstract base class with the same name as those in the child (and Django will raise an exception)."
msgstr ""

#: ../../topics/db/models.txt:829
#: ../../topics/i18n/translation.txt:593
# 6bfc19b527b14f158b731179b93e3a2e
# 9104d02be8584d1198f15e8c89abae9e
msgid "An example::"
msgstr ""

#: ../../topics/db/models.txt:841
# 44a4860fc6264885aef73aec8ceb3ded
msgid "The ``Student`` model will have three fields: ``name``, ``age`` and ``home_group``. The ``CommonInfo`` model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

#: ../../topics/db/models.txt:846
# 996f1031b9e4428e9b98db8cf88f2d28
msgid "For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, whilst still only creating one database table per child model at the database level."
msgstr ""

#: ../../topics/db/models.txt:851
# b4a94afe1ba24f858ffab58f0a6180f6
msgid "``Meta`` inheritance"
msgstr ""

#: ../../topics/db/models.txt:853
# b26c91e49de14c55a2cd20ac26f027a1
msgid "When an abstract base class is created, Django makes any :ref:`Meta <meta-options>` inner class you declared in the base class available as an attribute. If a child class does not declare its own :ref:`Meta <meta-options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If the child wants to extend the parent's :ref:`Meta <meta-options>` class, it can subclass it. For example::"
msgstr ""

#: ../../topics/db/models.txt:870
# 7c7a2155b54f4b709d3c3151919f9caa
msgid "Django does make one adjustment to the :ref:`Meta <meta-options>` class of an abstract base class: before installing the :ref:`Meta <meta-options>` attribute, it sets ``abstract=False``. This means that children of abstract base classes don't automatically become abstract classes themselves. Of course, you can make an abstract base class that inherits from another abstract base class. You just need to remember to explicitly set ``abstract=True`` each time."
msgstr ""

#: ../../topics/db/models.txt:877
# e92fa3ecb0a849008370f747d8ced559
msgid "Some attributes won't make sense to include in the :ref:`Meta <meta-options>` class of an abstract base class. For example, including ``db_table`` would mean that all the child classes (the ones that don't specify their own :ref:`Meta <meta-options>`) would use the same database table, which is almost certainly not what you want."
msgstr ""

#: ../../topics/db/models.txt:885
# f3f8d6b0edce429a9554298acc624eb3
msgid "Be careful with ``related_name``"
msgstr ""

#: ../../topics/db/models.txt:887
# 528916f8b8b54bf0808de65f6e41b913
msgid "If you are using the :attr:`~django.db.models.ForeignKey.related_name` attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always specify a *unique* reverse name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) each time."
msgstr ""

#: ../../topics/db/models.txt:893
# f6f89fc624844963b01e04ba7cf62178
msgid "To work around this problem, when you are using :attr:`~django.db.models.ForeignKey.related_name` in an abstract base class (only), part of the name should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

#: ../../topics/db/models.txt:897
# 04bac1e9ee8840a2927cd6bdf2c97768
msgid "``'%(class)s'`` is replaced by the lower-cased name of the child class that the field is used in."
msgstr ""

#: ../../topics/db/models.txt:899
# 6daa0d177de4494cbc539e82d54b52a0
msgid "``'%(app_label)s'`` is replaced by the lower-cased name of the app the child class is contained within. Each installed application name must be unique and the model class names within each app must also be unique, therefore the resulting name will end up being different."
msgstr ""

#: ../../topics/db/models.txt:904
# 431fee78d19949e98f341af72d7cdca2
msgid "For example, given an app ``common/models.py``::"
msgstr ""

#: ../../topics/db/models.txt:918
# 20f45ee491ac435992ba847d816521af
msgid "Along with another app ``rare/models.py``::"
msgstr ""

#: ../../topics/db/models.txt:925
# 369bcb83365740a2941e5f006b207c53
msgid "The reverse name of the ``common.ChildA.m2m`` field will be ``common_childa_related``, whilst the reverse name of the ``common.ChildB.m2m`` field will be ``common_childb_related``, and finally the reverse name of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to construct your related name, but if you forget to use it, Django will raise errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

#: ../../topics/db/models.txt:933
# bdb940ee101d4b629015cdc200065c3c
msgid "If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by ``'_set'``, just as it normally would be if you'd declared the field directly on the child class. For example, in the above code, if the :attr:`~django.db.models.ForeignKey.related_name` attribute was omitted, the reverse name for the ``m2m`` field would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the ``ChildB`` field."
msgstr ""

#: ../../topics/db/models.txt:945
# b185b05743a64db7920f0fba023cf4ef
msgid "Multi-table inheritance"
msgstr ""

#: ../../topics/db/models.txt:947
# a914d3c469744cd6ac29f3c584617d85
msgid "The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created :class:`~django.db.models.OneToOneField`). For example::"
msgstr ""

#: ../../topics/db/models.txt:962
# 8396a959b28c422ead55442d472323b1
msgid "All of the fields of ``Place`` will also be available in ``Restaurant``, although the data will reside in a different database table. So these are both possible::"
msgstr ""

#: ../../topics/db/models.txt:969
# 1a9ecf4311394fec91869708e2089552
msgid "If you have a ``Place`` that is also a ``Restaurant``, you can get from the ``Place`` object to the ``Restaurant`` object by using the lower-case version of the model name::"
msgstr ""

#: ../../topics/db/models.txt:978
# b553ad92d23643f4b0e236c0cc65f30d
msgid "However, if ``p`` in the above example was *not* a ``Restaurant`` (it had been created directly as a ``Place`` object or was the parent of some other class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist exception."
msgstr ""

#: ../../topics/db/models.txt:983
# f7cb98ad83d34215a1a4d6f2adb8eaf4
msgid "``Meta`` and multi-table inheritance"
msgstr ""

#: ../../topics/db/models.txt:985
# 8ccd8b1bb6af4699a68a5cc9988cb533
msgid "In the multi-table inheritance situation, it doesn't make sense for a child class to inherit from its parent's :ref:`Meta <meta-options>` class. All the :ref:`Meta <meta-options>` options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn't exist in its own right)."
msgstr ""

#: ../../topics/db/models.txt:992
# 38ccef296450432693fa2118874bb0e9
msgid "So a child model does not have access to its parent's :ref:`Meta <meta-options>` class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an :attr:`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models.Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

#: ../../topics/db/models.txt:999
# 0dad92ffed7b49f7964897ad2dc50315
msgid "If the parent has an ordering and you don't want the child to have any natural ordering, you can explicitly disable it::"
msgstr ""

#: ../../topics/db/models.txt:1009
# 2f024fd63b21489689fd393961f9b935
msgid "Inheritance and reverse relations"
msgstr ""

#: ../../topics/db/models.txt:1011
# 1e8d3b2bb7de4c8e89b6a2ca8629028f
msgid "Because multi-table inheritance uses an implicit :class:`~django.db.models.OneToOneField` to link the child and the parent, it's possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default :attr:`~django.db.models.ForeignKey.related_name` value for :class:`~django.db.models.ForeignKey` and :class:`~django.db.models.ManyToManyField` relations.  If you are putting those types of relations on a subclass of another model, you **must** specify the :attr:`~django.db.models.ForeignKey.related_name` attribute on each such field. If you forget, Django will raise an error when you run :djadmin:`validate` or :djadmin:`syncdb`."
msgstr ""

#: ../../topics/db/models.txt:1024
# e4be6ec7ff7a45d6ab2fa147a433ce30
msgid "For example, using the above ``Place`` class again, let's create another subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

#: ../../topics/db/models.txt:1033
# 5d417345844d4184bba7009f7ad36ac4
msgid "Specifying the parent link field"
msgstr ""

#: ../../topics/db/models.txt:1035
# e4c758c21ae44228a22184811b89e588
msgid "As mentioned, Django will automatically create a :class:`~django.db.models.OneToOneField` linking your child class back any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own :class:`~django.db.models.OneToOneField` and set :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to indicate that your field is the link back to the parent class."
msgstr ""

#: ../../topics/db/models.txt:1046
# ceecca768416447583fe751f2627c3f8
msgid "Proxy models"
msgstr ""

#: ../../topics/db/models.txt:1048
# e5ed6b62492047bb99b000d035fa0de4
msgid "When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model -- perhaps to change the default manager, or add a new method."
msgstr ""

#: ../../topics/db/models.txt:1055
# 053ea45da8ef4fdf870f5307e7b72fd0
msgid "This is what proxy model inheritance is for: creating a *proxy* for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original."
msgstr ""

#: ../../topics/db/models.txt:1062
# da008632934848dab85d04cd3aee51f4
msgid "Proxy models are declared like normal models. You tell Django that it's a proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute of the ``Meta`` class to ``True``."
msgstr ""

#: ../../topics/db/models.txt:1066
# be6e33e88a4d44cc9e1449f5515f0f8a
msgid "For example, suppose you want to add a method to the standard :class:`~django.contrib.auth.models.User` model that will be used in your templates. You can do it like this::"
msgstr ""

#: ../../topics/db/models.txt:1079
# fc907e887f2d4fc5aa54e51b31ca04f8
msgid "The ``MyUser`` class operates on the same database table as its parent :class:`~django.contrib.auth.models.User` class. In particular, any new instances of :class:`~django.contrib.auth.models.User` will also be accessible through ``MyUser``, and vice-versa::"
msgstr ""

#: ../../topics/db/models.txt:1088
# 7bce4880886c48ccb9c96066ae777a97
msgid "You could also use a proxy model to define a different default ordering on a model. The standard :class:`~django.contrib.auth.models.User` model has no ordering defined on it (intentionally; sorting is expensive and we don't want to do it all the time when we fetch users). You might want to regularly order by the ``username`` attribute when you use the proxy. This is easy::"
msgstr ""

#: ../../topics/db/models.txt:1099
# d9a45a503c2e43f2a1ec0ee131407851
msgid "Now normal :class:`~django.contrib.auth.models.User` queries will be unordered and ``OrderedUser`` queries will be ordered by ``username``."
msgstr ""

#: ../../topics/db/models.txt:1103
# f378bac50f71439e8486bb2aa2b4c33f
msgid "QuerySets still return the model that was requested"
msgstr ""

#: ../../topics/db/models.txt:1105
# 233c76c128a6447a8094fa26dc776e69
msgid "There is no way to have Django return, say, a ``MyUser`` object whenever you query for :class:`~django.contrib.auth.models.User` objects. A queryset for ``User`` objects will return those types of objects. The whole point of proxy objects is that code relying on the original ``User`` will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the ``User`` (or any other) model everywhere with something of your own creation."
msgstr ""

#: ../../topics/db/models.txt:1114
# 54480330305f49a58cba35a1521f4d4f
msgid "Base class restrictions"
msgstr ""

#: ../../topics/db/models.txt:1116
# 7409d74b777a462ca3af03d6b92b7a21
msgid "A proxy model must inherit from exactly one non-abstract model class. You can't inherit from multiple non-abstract models as the proxy model doesn't provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do *not* define any model fields."
msgstr ""

#: ../../topics/db/models.txt:1122
# 8f324f829f614284abb23f08da6b82f5
msgid "Proxy models inherit any ``Meta`` options that they don't define from their non-abstract model parent (the model they are proxying for)."
msgstr ""

#: ../../topics/db/models.txt:1126
# 13e3ec80903847fba23f68bbb38d64c4
msgid "Proxy model managers"
msgstr ""

#: ../../topics/db/models.txt:1128
# cb0ea88c5b024e6f8954d1b90ffc1ced
msgid "If you don't specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available."
msgstr ""

#: ../../topics/db/models.txt:1133
# ccd14f1a1c9149b8a01bbe995e1b7b6d
msgid "Continuing our example from above, you could change the default manager used when you query the ``User`` model like this::"
msgstr ""

#: ../../topics/db/models.txt:1145
# 9d056953bfd64b48960d60d86df8cc92
msgid "If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the :ref:`custom manager <custom-managers-and-inheritance>` documentation: create a base class containing the new managers and inherit that after the primary base class::"
msgstr ""

#: ../../topics/db/models.txt:1161
# 36bfaad600464bdb92a6ac48ce70055b
msgid "You probably won't need to do this very often, but, when you do, it's possible."
msgstr ""

#: ../../topics/db/models.txt:1167
# b8308bf974594c6891426b280aaeef08
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

#: ../../topics/db/models.txt:1169
# 91724b8327db4e0882b855ef0b1edd2d
msgid "Proxy model inheritance might look fairly similar to creating an unmanaged model, using the :attr:`~django.db.models.Options.managed` attribute on a model's ``Meta`` class. The two alternatives are not quite the same and it's worth considering which one you should use."
msgstr ""

#: ../../topics/db/models.txt:1174
# f5061263f15f4f569a25985c311c1fa6
msgid "One difference is that you can (and, in fact, must unless you want an empty model) specify model fields on models with ``Meta.managed=False``. You could, with careful setting of :attr:`Meta.db_table <django.db.models.Options.db_table>` create an unmanaged model that shadowed an existing model and add Python methods to it. However, that would be very repetitive and fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

#: ../../topics/db/models.txt:1182
# 652d170369594059af3b67e16b68793c
msgid "The other difference that is more important for proxy models, is how model managers are handled. Proxy models are intended to behave exactly like the model they are proxying for. So they inherit the parent model's managers, including the default manager. In the normal multi-table model inheritance case, children do not inherit managers from their parents as the custom managers aren't always appropriate when extra fields are involved. The :ref:`manager documentation <custom-managers-and-inheritance>` has more details about this latter case."
msgstr ""

#: ../../topics/db/models.txt:1191
# de177e551e7448719b8a3701e13f4997
msgid "When these two features were implemented, attempts were made to squash them into a single option. It turned out that interactions with inheritance, in general, and managers, in particular, made the API very complicated and potentially difficult to understand and use. It turned out that two options were needed in any case, so the current separation arose."
msgstr ""

#: ../../topics/db/models.txt:1197
# 019b7bdf11564655bdee0b5967dd67e9
msgid "So, the general rules are:"
msgstr ""

#: ../../topics/db/models.txt:1199
# 9539075b81a44c3db6eed920394cc4b9
msgid "If you are mirroring an existing model or database table and don't want all the original database table columns, use ``Meta.managed=False``. That option is normally useful for modeling database views and tables not under the control of Django."
msgstr ""

#: ../../topics/db/models.txt:1203
# 6dfa031345394dd1b0d696f133190146
msgid "If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use ``Meta.proxy=True``. This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved."
msgstr ""

#: ../../topics/db/models.txt:1209
# 8cc5e99fc8df401881088e73bb6ed558
msgid "Multiple inheritance"
msgstr ""

#: ../../topics/db/models.txt:1211
# 5ae23280bc3e43838b12ea186ad7e8b7
msgid "Just as with Python's subclassing, it's possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. :ref:`Meta <meta-options>`) appears in will be the one that is used; for example, this means that if multiple parents contain a :ref:`Meta <meta-options>` class, only the first one is going to be used, and all others will be ignored."
msgstr ""

#: ../../topics/db/models.txt:1218
# d4fd282bb48249e78393ccb45e3e7ae8
msgid "Generally, you won't need to inherit from multiple parents. The main use-case where this is useful is for \"mix-in\" classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won't have to struggle to work out where a particular piece of information is coming from."
msgstr ""

#: ../../topics/db/models.txt:1226
# 1d39203aa1fc4cfeb8df600b03ccd2bc
msgid "Field name \"hiding\" is not permitted"
msgstr ""

#: ../../topics/db/models.txt:1228
# af70debdf54e4e43b1bdc398f05164ef
msgid "In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this is not permitted for attributes that are :class:`~django.db.models.Field` instances (at least, not at the moment). If a base class has a field called ``author``, you cannot create another model field called ``author`` in any class that inherits from that base class."
msgstr ""

#: ../../topics/db/models.txt:1235
# ef976a4b9cc54d6bbf72a7f71be46b40
msgid "Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in ``Model.__init__``) and serialization. These are features which normal Python class inheritance doesn't have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn't arbitrary."
msgstr ""

#: ../../topics/db/models.txt:1242
# dc3ccbb42df74e6aa3e9495d19215a98
msgid "This restriction only applies to attributes which are :class:`~django.db.models.Field` instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables)."
msgstr ""

#: ../../topics/db/models.txt:1250
# b376339e05a940b6a51cd99b030329f8
msgid "Django will raise a :exc:`~django.core.exceptions.FieldError` if you override any model field in any ancestor model."
msgstr ""

#: ../../topics/db/multi-db.txt:3
# abb97609e17f4f668326cce5f81816e2
msgid "Multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:5
# 66eb17d1638e473eb2d41147f42d0211
msgid "This topic guide describes Django's support for interacting with multiple databases. Most of the rest of Django's documentation assumes you are interacting with a single database. If you want to interact with multiple databases, you'll need to take some additional steps."
msgstr ""

#: ../../topics/db/multi-db.txt:11
# 82ed3ac41a214449be14cc8071a0865d
msgid "Defining your databases"
msgstr ""

#: ../../topics/db/multi-db.txt:13
# 0dfed63e6b914bf1b906dce5a120744a
msgid "The first step to using more than one database with Django is to tell Django about the database servers you'll be using. This is done using the :setting:`DATABASES` setting. This setting maps database aliases, which are a way to refer to a specific database throughout Django, to a dictionary of settings for that specific connection. The settings in the inner dictionaries are described fully in the :setting:`DATABASES` documentation."
msgstr ""

#: ../../topics/db/multi-db.txt:21
# bb9d45086a194963b4cde968189670bb
msgid "Databases can have any alias you choose. However, the alias ``default`` has special significance. Django uses the database with the alias of ``default`` when no other database has been selected. If you don't have a ``default`` database, you need to be careful to always specify the database that you want to use."
msgstr ""

#: ../../topics/db/multi-db.txt:27
# 80317e05c1584da990df339858d6dac5
msgid "The following is an example ``settings.py`` snippet defining two databases -- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

#: ../../topics/db/multi-db.txt:48
# b24c9675a98e4e6189df35d50033d954
msgid "If you attempt to access a database that you haven't defined in your :setting:`DATABASES` setting, Django will raise a ``django.db.utils.ConnectionDoesNotExist`` exception."
msgstr ""

#: ../../topics/db/multi-db.txt:53
# be748343312649199fb0bea463288cb9
msgid "Synchronizing your databases"
msgstr ""

#: ../../topics/db/multi-db.txt:55
# 185152bf453048bd927480c8529eecaf
msgid "The :djadmin:`syncdb` management command operates on one database at a time. By default, it operates on the ``default`` database, but by providing a :djadminopt:`--database` argument, you can tell syncdb to synchronize a different database. So, to synchronize all models onto all databases in our example, you would need to call::"
msgstr ""

#: ../../topics/db/multi-db.txt:64
# 0bc88da7b65f4a579ebdaa81d69a14c3
msgid "If you don't want every application to be synchronized onto a particular database, you can define a :ref:`database router<topics-db-multi-db-routing>` that implements a policy constraining the availability of particular models."
msgstr ""

#: ../../topics/db/multi-db.txt:69
# 1bafe4ea91ef4c57a0b9eee65a8f637d
msgid "Alternatively, if you want fine-grained control of synchronization, you can pipe all or part of the output of :djadmin:`sqlall` for a particular application directly into your database prompt, like this::"
msgstr ""

#: ../../topics/db/multi-db.txt:76
# 35cd022cbd6b4e6c899f3e89a03cd1ad
msgid "Using other management commands"
msgstr ""

#: ../../topics/db/multi-db.txt:78
# e2d3620289b74d2e8bd4f7311eee7e58
msgid "The other ``django-admin.py`` commands that interact with the database operate in the same way as :djadmin:`syncdb` -- they only ever operate on one database at a time, using :djadminopt:`--database` to control the database used."
msgstr ""

#: ../../topics/db/multi-db.txt:86
# 9ca668898a184be68fabc536ee403318
msgid "Automatic database routing"
msgstr ""

#: ../../topics/db/multi-db.txt:88
# 88c43fa65c374c9792d08914cc354626
msgid "The easiest way to use multiple databases is to set up a database routing scheme. The default routing scheme ensures that objects remain 'sticky' to their original database (i.e., an object retrieved from the ``foo`` database will be saved on the same database). The default routing scheme ensures that if a database isn't specified, all queries fall back to the ``default`` database."
msgstr ""

#: ../../topics/db/multi-db.txt:95
# a2af7fe66db44a19aea3d7bacce2b078
msgid "You don't have to do anything to activate the default routing scheme -- it is provided 'out of the box' on every Django project. However, if you want to implement more interesting database allocation behaviors, you can define and install your own database routers."
msgstr ""

#: ../../topics/db/multi-db.txt:101
# 2602bf60e9214ff0a4da80a9485212f8
msgid "Database routers"
msgstr ""

#: ../../topics/db/multi-db.txt:103
# 9f158f20b56c474795862886a9c8489c
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

#: ../../topics/db/multi-db.txt:107
# 2c22ec9391ed4cbdae119d18edba951e
msgid "Suggest the database that should be used for read operations for objects of type ``model``."
msgstr ""

#: ../../topics/db/multi-db.txt:110
#: ../../topics/db/multi-db.txt:122
# 27f604f806e5449cba5a5b8a9dcaadf0
# bdabaa1b7b5d4f758c267b2c13b8722a
msgid "If a database operation is able to provide any additional information that might assist in selecting a database, it will be provided in the ``hints`` dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-db-hints>`."
msgstr ""

#: ../../topics/db/multi-db.txt:115
#: ../../topics/db/multi-db.txt:127
# 80b65150f05247908cdcbaf2cf80376d
# 52bbcb48d57245c7bbc1a2eb9ad6c48c
msgid "Returns None if there is no suggestion."
msgstr ""

#: ../../topics/db/multi-db.txt:119
# b6b6779b694c4a1384eb17b35583acfa
msgid "Suggest the database that should be used for writes of objects of type Model."
msgstr ""

#: ../../topics/db/multi-db.txt:131
# c9e90f2b3582497db67562d3a89cb99e
msgid "Return True if a relation between obj1 and obj2 should be allowed, False if the relation should be prevented, or None if the router has no opinion. This is purely a validation operation, used by foreign key and many to many operations to determine if a relation should be allowed between two objects."
msgstr ""

#: ../../topics/db/multi-db.txt:139
# 4978e87263954c7ab8596154f311b87d
msgid "Determine if the ``model`` should be synchronized onto the database with alias ``db``. Return True if the model should be synchronized, False if it should not be synchronized, or None if the router has no opinion. This method can be used to determine the availability of a model on a given database."
msgstr ""

#: ../../topics/db/multi-db.txt:145
# 1d1b8428842c4331899331e543741763
msgid "A router doesn't have to provide *all* these methods -- it may omit one or more of them. If one of the methods is omitted, Django will skip that router when performing the relevant check."
msgstr ""

#: ../../topics/db/multi-db.txt:152
# e094b3a882984304916755fabcda5163
msgid "Hints"
msgstr ""

#: ../../topics/db/multi-db.txt:154
# 060149e1ae084879a6fc3bd84e411aee
msgid "The hints received by the database router can be used to decide which database should receive a given request."
msgstr ""

#: ../../topics/db/multi-db.txt:157
# c1bef27554c048019bc2cada80ae89aa
msgid "At present, the only hint that will be provided is ``instance``, an object instance that is related to the read or write operation that is underway. This might be the instance that is being saved, or it might be an instance that is being added in a many-to-many relation. In some cases, no instance hint will be provided at all. The router checks for the existence of an instance hint, and determine if that hint should be used to alter routing behavior."
msgstr ""

#: ../../topics/db/multi-db.txt:166
# 469947fe56174ca1bb907ec0a0473068
msgid "Using routers"
msgstr ""

#: ../../topics/db/multi-db.txt:168
# 4b5ea865c3134d80850f7359201f9508
msgid "Database routers are installed using the :setting:`DATABASE_ROUTERS` setting. This setting defines a list of class names, each specifying a router that should be used by the master router (``django.db.router``)."
msgstr ""

#: ../../topics/db/multi-db.txt:173
# 6821cd04bd274c80a8dba7bb38232f80
msgid "The master router is used by Django's database operations to allocate database usage. Whenever a query needs to know which database to use, it calls the master router, providing a model and a hint (if available). Django then tries each router in turn until a database suggestion can be found. If no suggestion can be found, it tries the current ``_state.db`` of the hint instance. If a hint instance wasn't provided, or the instance doesn't currently have database state, the master router will allocate the ``default`` database."
msgstr ""

#: ../../topics/db/multi-db.txt:183
#: ../../topics/db/tablespaces.txt:45
#: ../../topics/logging.txt:240
# d3d642ddfe284b48925a2bf858583c4e
# ab535f4a24f8476b9284735eefc3e96d
# 311fba369a8f4b159ac11ecc9ba04405
msgid "An example"
msgstr ""

#: ../../topics/db/multi-db.txt:187
# 1a47103c1bad415aa70f5d4820426e88
msgid "This example is intended as a demonstration of how the router infrastructure can be used to alter database usage. It intentionally ignores some complex issues in order to demonstrate how routers are used."
msgstr ""

#: ../../topics/db/multi-db.txt:192
# 92781231aff74275acfd0075b57a8193
msgid "This example won't work if any of the models in ``myapp`` contain relationships to models outside of the ``other`` database. :ref:`Cross-database relationships <no_cross_database_relations>` introduce referential integrity problems that Django can't currently handle."
msgstr ""

#: ../../topics/db/multi-db.txt:198
# b72024db7d664527858438c43fc243e2
msgid "The master/slave configuration described is also flawed -- it doesn't provide any solution for handling replication lag (i.e., query inconsistencies introduced because of the time taken for a write to propagate to the slaves). It also doesn't consider the interaction of transactions with the database utilization strategy."
msgstr ""

#: ../../topics/db/multi-db.txt:204
# 61f10ed4236c4dc6b99cdd7b47122c2e
msgid "So - what does this mean in practice? Let's consider another sample configuration. This one will have several databases: one for the ``auth`` application, and all other apps using a master/slave setup with two read slaves. Here are the settings specifying these databases::"
msgstr ""

#: ../../topics/db/multi-db.txt:237
# 77ebb2bb607747458b1e22d8483b7556
msgid "Now we'll need to handle routing. First we want a router that knows to send queries for the ``auth`` app to ``auth_db``::"
msgstr ""

#: ../../topics/db/multi-db.txt:281
# af4c4322e1d54cb2bfc6f4ce8c83270f
msgid "And we also want a router that sends all other apps to the master/slave configuration, and randomly chooses a slave to read from::"
msgstr ""

#: ../../topics/db/multi-db.txt:316
# 5ceee1a52a6c4afa89050d84de0d9af7
msgid "Finally, in the settings file, we add the following (substituting ``path.to.`` with the actual python path to the module(s) where the routers are defined)::"
msgstr ""

#: ../../topics/db/multi-db.txt:322
# c7539881535f467fa82aa0878aeb8777
msgid "The order in which routers are processed is significant. Routers will be queried in the order the are listed in the :setting:`DATABASE_ROUTERS` setting . In this example, the ``AuthRouter`` is processed before the ``MasterSlaveRouter``, and as a result, decisions concerning the models in ``auth`` are processed before any other decision is made. If the :setting:`DATABASE_ROUTERS` setting listed the two routers in the other order, ``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all nature of the MasterSlaveRouter implementation would mean that all models would be available on all databases."
msgstr ""

#: ../../topics/db/multi-db.txt:333
# 56ad970784664582b66c4235705121ef
msgid "With this setup installed, lets run some Django code::"
msgstr ""

#: ../../topics/db/multi-db.txt:360
# 9d91f6b5756b48018628ac3410220ada
msgid "Manually selecting a database"
msgstr ""

#: ../../topics/db/multi-db.txt:362
# 3f44c6f179e64acfa2c42f613de36cec
msgid "Django also provides an API that allows you to maintain complete control over database usage in your code. A manually specified database allocation will take priority over a database allocated by a router."
msgstr ""

#: ../../topics/db/multi-db.txt:367
# 3c56d5f5b28f4b129f52021a6cfaf3b6
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

#: ../../topics/db/multi-db.txt:369
# 77aa1d83d7fa41f8b8be47f81f4156dc
msgid "You can select the database for a ``QuerySet`` at any point in the ``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get another ``QuerySet`` that uses the specified database."
msgstr ""

#: ../../topics/db/multi-db.txt:373
# 14e90b642dbd480d8a76fd0b7f4ff8fb
msgid "``using()`` takes a single argument: the alias of the database on which you want to run the query. For example::"
msgstr ""

#: ../../topics/db/multi-db.txt:386
# 2fba45de203141a4956ee08aac3830f1
msgid "Selecting a database for ``save()``"
msgstr ""

#: ../../topics/db/multi-db.txt:388
# 6e1a173b9e2948c59f8adc8eba55d31f
msgid "Use the ``using`` keyword to ``Model.save()`` to specify to which database the data should be saved."
msgstr ""

#: ../../topics/db/multi-db.txt:391
# ed7eef2bc0ee42ac95060676bc474f17
msgid "For example, to save an object to the ``legacy_users`` database, you'd use this::"
msgstr ""

#: ../../topics/db/multi-db.txt:396
# 71655405bb944010a5c3232975d2e900
msgid "If you don't specify ``using``, the ``save()`` method will save into the default database allocated by the routers."
msgstr ""

#: ../../topics/db/multi-db.txt:400
# df4053085dc5471383cfa9da57cde058
msgid "Moving an object from one database to another"
msgstr ""

#: ../../topics/db/multi-db.txt:402
# ca515dc4f0284b048d337e506f9aab43
msgid "If you've saved an instance to one database, it might be tempting to use ``save(using=...)`` as a way to migrate the instance to a new database. However, if you don't take appropriate steps, this could have some unexpected consequences."
msgstr ""

#: ../../topics/db/multi-db.txt:407
# cc798705a7df4b288d2cca8fe7a9d365
msgid "Consider the following example::"
msgstr ""

#: ../../topics/db/multi-db.txt:413
# c05fdff623be4d5ab4b57089908cc36c
msgid "In statement 1, a new ``Person`` object is saved to the ``first`` database. At this time, ``p`` doesn't have a primary key, so Django issues a SQL ``INSERT`` statement. This creates a primary key, and Django assigns that primary key to ``p``."
msgstr ""

#: ../../topics/db/multi-db.txt:418
# a5b4e27ff12f4ceb862fbcb31cfc37bc
msgid "When the save occurs in statement 2, ``p`` already has a primary key value, and Django will attempt to use that primary key on the new database. If the primary key value isn't in use in the ``second`` database, then you won't have any problems -- the object will be copied to the new database."
msgstr ""

#: ../../topics/db/multi-db.txt:424
# 953c22c38569404b8631e60919b78964
msgid "However, if the primary key of ``p`` is already in use on the ``second`` database, the existing object in the ``second`` database will be overridden when ``p`` is saved."
msgstr ""

#: ../../topics/db/multi-db.txt:428
# 1b1fcd73efa9494f9b0dde713fb17530
msgid "You can avoid this in two ways. First, you can clear the primary key of the instance. If an object has no primary key, Django will treat it as a new object, avoiding any loss of data on the ``second`` database::"
msgstr ""

#: ../../topics/db/multi-db.txt:438
# 30749583a3124379872a74877990efef
msgid "The second option is to use the ``force_insert`` option to ``save()`` to ensure that Django does a SQL ``INSERT``::"
msgstr ""

#: ../../topics/db/multi-db.txt:445
# 1eafeac8825e41fcad33a30fe56ba505
msgid "This will ensure that the person named ``Fred`` will have the same primary key on both databases. If that primary key is already in use when you try to save onto the ``second`` database, an error will be raised."
msgstr ""

#: ../../topics/db/multi-db.txt:451
# f01e7db3b8364f7b9de308723029c46d
msgid "Selecting a database to delete from"
msgstr ""

#: ../../topics/db/multi-db.txt:453
# 7c443cfe84e64542a68885ea44e9e0ae
msgid "By default, a call to delete an existing object will be executed on the same database that was used to retrieve the object in the first place::"
msgstr ""

#: ../../topics/db/multi-db.txt:460
# b9b95a039310416bae96b43bb78d7f64
msgid "To specify the database from which a model will be deleted, pass a ``using`` keyword argument to the ``Model.delete()`` method. This argument works just like the ``using`` keyword argument to ``save()``."
msgstr ""

#: ../../topics/db/multi-db.txt:464
# 652d4269e61c47e9ae40a965a0bc8d1b
msgid "For example, if you're migrating a user from the ``legacy_users`` database to the ``new_users`` database, you might use these commands::"
msgstr ""

#: ../../topics/db/multi-db.txt:471
# 51a546b157e5467d86bc9d9c37d72e16
msgid "Using managers with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:473
# 5064bf6324854d358e60a934b31c6164
msgid "Use the ``db_manager()`` method on managers to give managers access to a non-default database."
msgstr ""

#: ../../topics/db/multi-db.txt:476
# 4dbec15853ff47b5bdc453e867af27ad
msgid "For example, say you have a custom manager method that touches the database -- ``User.objects.create_user()``. Because ``create_user()`` is a manager method, not a ``QuerySet`` method, you can't do ``User.objects.using('new_users').create_user()``. (The ``create_user()`` method is only available on ``User.objects``, the manager, not on ``QuerySet`` objects derived from the manager.) The solution is to use ``db_manager()``, like this::"
msgstr ""

#: ../../topics/db/multi-db.txt:486
# 43a7aa3016c24160bdb0f6ca1c4b5bb0
msgid "``db_manager()`` returns a copy of the manager bound to the database you specify."
msgstr ""

#: ../../topics/db/multi-db.txt:489
# f2ddeedc1a75409eb2c387c074f212f0
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:491
# 0e6dffb1997545b0876ce8e698dc66c5
msgid "If you're overriding ``get_query_set()`` on your manager, be sure to either call the method on the parent (using ``super()``) or do the appropriate handling of the ``_db`` attribute on the manager (a string containing the name of the database to use)."
msgstr ""

#: ../../topics/db/multi-db.txt:496
# fbb2eb44560e41ddb729cff57a1969b1
msgid "For example, if you want to return a custom ``QuerySet`` class from the ``get_query_set`` method, you could do this::"
msgstr ""

#: ../../topics/db/multi-db.txt:507
# 68e9cae5d1b04b5ba80b8104ebaeb3b9
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

#: ../../topics/db/multi-db.txt:509
# 374bf383c8c44123bb7ad34cd61252ac
msgid "Django's admin doesn't have any explicit support for multiple databases. If you want to provide an admin interface for a model on a database other than that specified by your router chain, you'll need to write custom :class:`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use a specific database for content."
msgstr ""

#: ../../topics/db/multi-db.txt:515
# c723709d83324e09b9ed29e623095df1
msgid "``ModelAdmin`` objects have five methods that require customization for multiple-database support::"
msgstr ""

#: ../../topics/db/multi-db.txt:544
# addbd37f6c0341c1919ff58472f2e95f
msgid "The implementation provided here implements a multi-database strategy where all objects of a given type are stored on a specific database (e.g., all ``User`` objects are in the ``other`` database). If your usage of multiple databases is more complex, your ``ModelAdmin`` will need to reflect that strategy."
msgstr ""

#: ../../topics/db/multi-db.txt:550
# 469ba0d5dc324df4a6827e0bbea05bd1
msgid "Inlines can be handled in a similar fashion. They require three customized methods::"
msgstr ""

#: ../../topics/db/multi-db.txt:569
# ee86061b905f45ea9a98f51ca730a00e
msgid "Once you've written your model admin definitions, they can be registered with any ``Admin`` instance::"
msgstr ""

#: ../../topics/db/multi-db.txt:587
# 3ea52d27c4ac44188ee3fd6040b12016
msgid "This example sets up two admin sites. On the first site, the ``Author`` and ``Publisher`` objects are exposed; ``Publisher`` objects have an tabular inline showing books published by that publisher. The second site exposes just publishers, without the inlines."
msgstr ""

#: ../../topics/db/multi-db.txt:594
# 1e427587ff6146b3bdb0b9d8b50be404
msgid "Using raw cursors with multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:596
# 6bda22120e1d4bd7ba8d561d8b39b999
msgid "If you are using more than one database you can use ``django.db.connections`` to obtain the connection (and cursor) for a specific database. ``django.db.connections`` is a dictionary-like object that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../topics/db/multi-db.txt:606
# 497d3855ee79413e954631b01a565b2f
msgid "Limitations of multiple databases"
msgstr ""

#: ../../topics/db/multi-db.txt:611
# 86dde4bede0f401196f32e3a1e3e32ff
msgid "Cross-database relations"
msgstr ""

#: ../../topics/db/multi-db.txt:613
# 442ee2bf2cd447cba690f4ddaba6ed3f
msgid "Django doesn't currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database."
msgstr ""

#: ../../topics/db/multi-db.txt:619
# c993d02bc9594b13a37724965f6d88d6
msgid "This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

#: ../../topics/db/multi-db.txt:625
# f3dedba5efa347d489cc85cfd3578d41
msgid "If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level -- database level key constraints prevent the creation of relations that can't be validated."
msgstr ""

#: ../../topics/db/multi-db.txt:629
# 0ff580456bfc473c805dbe0165963415
msgid "However, if you're using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to 'fake' cross database foreign keys. However, this configuration is not officially supported by Django."
msgstr ""

#: ../../topics/db/multi-db.txt:637
# 26d51dc8b8da4856a4aec8f1f10d57b3
msgid "Behavior of contrib apps"
msgstr ""

#: ../../topics/db/multi-db.txt:639
# fe39db11cefa4d6aa94a0a3be3ee8d40
msgid "Several contrib apps include models, and some apps depend on others. Since cross-database relationships are impossible, this creates some restrictions on how you can split these models across databases:"
msgstr ""

#: ../../topics/db/multi-db.txt:643
# 8b88aeda3ac54b1c9ff553e14b59d7b4
msgid "each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites.Site`` can be stored in any database, given a suitable router."
msgstr ""

#: ../../topics/db/multi-db.txt:645
# e4e9957986ee4a319242eb5768986a66
msgid "``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked together and linked to ``ContentType``, so they must be stored in the same database as ``ContentType``."
msgstr ""

#: ../../topics/db/multi-db.txt:648
# f94a0137fd874db98bb627fd71d6712c
msgid "``admin`` and ``comments`` depend on ``auth``, so their models must be in the same database as ``auth``."
msgstr ""

#: ../../topics/db/multi-db.txt:650
# 398e76c8f31445ac915409ff336347a3
msgid "``flatpages`` and ``redirects`` depend on ``sites``, so their models must be in the same database as ``sites``."
msgstr ""

#: ../../topics/db/multi-db.txt:653
# aca44b39a02940ec8237eea644917d94
msgid "In addition, some objects are automatically created just after :djadmin:`syncdb` creates a table to hold them in a database:"
msgstr ""

#: ../../topics/db/multi-db.txt:656
# 9e49996a6642478c8c3b44a3232efba8
msgid "a default ``Site``,"
msgstr ""

#: ../../topics/db/multi-db.txt:657
# 078c4f74373540e48d7b7403d6b18446
msgid "a ``ContentType`` for each model (including those not stored in that database),"
msgstr ""

#: ../../topics/db/multi-db.txt:659
# b585a4c9d3db49668cf283b190826228
msgid "three ``Permission`` for each model (including those not stored in that database)."
msgstr ""

#: ../../topics/db/multi-db.txt:666
# 1f74a37db4bd4d82a54ff3c9fe527820
msgid "For common setups with multiple databases, it isn't useful to have these objects in more than one database. Common setups include master / slave and connecting to external databases. Therefore, it's recommended:"
msgstr ""

#: ../../topics/db/multi-db.txt:670
# f391f26e218a4b2f967301e685fa951f
msgid "either to run :djadmin:`syncdb` only for the default database;"
msgstr ""

#: ../../topics/db/multi-db.txt:671
# 17cf3749973c4b658af8d32529f65907
msgid "or to write :ref:`database router<topics-db-multi-db-routing>` that allows synchronizing these three models only to one database."
msgstr ""

#: ../../topics/db/multi-db.txt:676
# e912651f899540e59a5b9ab2d0ce93a2
msgid "If you're synchronizing content types to more that one database, be aware that their primary keys may not match across databases. This may result in data corruption or data loss."
msgstr ""

#: ../../topics/db/optimization.txt:3
# c320c7ad08114ee490db3d121459d975
msgid "Database access optimization"
msgstr ""

#: ../../topics/db/optimization.txt:5
# f57e77b84cc54f93850b3947caa48005
msgid "Django's database layer provides various ways to help developers get the most out of their databases. This document gathers together links to the relevant documentation, and adds various tips, organized under a number of headings that outline the steps to take when attempting to optimize your database usage."
msgstr ""

#: ../../topics/db/optimization.txt:11
# d85ebbbdae31416aba1f5979215015e2
msgid "Profile first"
msgstr ""

#: ../../topics/db/optimization.txt:13
# 2256999ecafd4672a2450a3db6d9bf05
msgid "As general programming practice, this goes without saying. Find out :ref:`what queries you are doing and what they are costing you <faq-see-raw-sql-queries>`. You may also want to use an external project like django-debug-toolbar_, or a tool that monitors your database directly."
msgstr ""

#: ../../topics/db/optimization.txt:18
# d24ae1633e604c22a403a392bb959529
msgid "Remember that you may be optimizing for speed or memory or both, depending on your requirements. Sometimes optimizing for one will be detrimental to the other, but sometimes they will help each other. Also, work that is done by the database process might not have the same cost (to you) as the same amount of work done in your Python process. It is up to you to decide what your priorities are, where the balance must lie, and profile all of these as required since this will depend on your application and server."
msgstr ""

#: ../../topics/db/optimization.txt:26
# c75d67d7b59e474883460f47e5a977b9
msgid "With everything that follows, remember to profile after every change to ensure that the change is a benefit, and a big enough benefit given the decrease in readability of your code. **All** of the suggestions below come with the caveat that in your circumstances the general principle might not apply, or might even be reversed."
msgstr ""

#: ../../topics/db/optimization.txt:35
# c4c0b15d81c145f996bf0554843d25c5
msgid "Use standard DB optimization techniques"
msgstr ""

#: ../../topics/db/optimization.txt:37
# 48df24b58b98489d8f4eef014a2fe28b
msgid "...including:"
msgstr ""

#: ../../topics/db/optimization.txt:39
# ff261d6e140648e4929c582db7fe0494
msgid "Indexes. This is a number one priority, *after* you have determined from profiling what indexes should be added. Use :attr:`django.db.models.Field.db_index` to add these from Django."
msgstr ""

#: ../../topics/db/optimization.txt:43
# d3d270c7e450445a904fa9a08c901f88
msgid "Appropriate use of field types."
msgstr ""

#: ../../topics/db/optimization.txt:45
# f5a9c30edddb4bf9a1c09eb73a74b75c
msgid "We will assume you have done the obvious things above. The rest of this document focuses on how to use Django in such a way that you are not doing unnecessary work. This document also does not address other optimization techniques that apply to all expensive operations, such as :doc:`general purpose caching </topics/cache>`."
msgstr ""

#: ../../topics/db/optimization.txt:52
# 21305c721abd4ecb856e4f9954b81634
msgid "Understand QuerySets"
msgstr ""

#: ../../topics/db/optimization.txt:54
# 448b2228f08c48219a53d471fa8ab54c
msgid "Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting good performance with simple code. In particular:"
msgstr ""

#: ../../topics/db/optimization.txt:58
# 0615d0d66a3e4374bb11c89158d40649
msgid "Understand QuerySet evaluation"
msgstr ""

#: ../../topics/db/optimization.txt:60
# a78d5f5db28b40cabf83851a784104a8
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

#: ../../topics/db/optimization.txt:62
# 71965480bf00411d828100ba27dfd7d9
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

#: ../../topics/db/optimization.txt:64
# d5acfe567a624d0c9543a39571ecaff8
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

#: ../../topics/db/optimization.txt:66
# 60667ab22b9e4bccadab5633773f098d
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

#: ../../topics/db/optimization.txt:69
# b20ba10f65624ddb8aaecbb76d697c97
msgid "Understand cached attributes"
msgstr ""

#: ../../topics/db/optimization.txt:71
# db290ed85e5245f7973fa538803a0633
msgid "As well as caching of the whole ``QuerySet``, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

#: ../../topics/db/optimization.txt:80
# 7472e77901bb4954b880ae6bdd3e3abf
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

#: ../../topics/db/optimization.txt:86
# e8fe764248a9430cbf6030518c416879
msgid "Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction."
msgstr ""

#: ../../topics/db/optimization.txt:90
# 94072d1ec7704d33aa2c2b795cf8cb6d
msgid "Be careful with your own custom properties - it is up to you to implement caching."
msgstr ""

#: ../../topics/db/optimization.txt:94
# f09a4f5c5bad4c77b0a588bc993c217b
msgid "Use the ``with`` template tag"
msgstr ""

#: ../../topics/db/optimization.txt:96
# 6e53d460ed9e4cf3a53e3eaab71dcb4e
msgid "To make use of the caching behavior of ``QuerySet``, you may need to use the :ttag:`with` template tag."
msgstr ""

#: ../../topics/db/optimization.txt:100
# 34ef363ae6004a83ba6c7967bfae6067
msgid "Use ``iterator()``"
msgstr ""

#: ../../topics/db/optimization.txt:102
# c55f1b242ede4152b84d875ac73aad01
msgid "When you have a lot of objects, the caching behavior of the ``QuerySet`` can cause a large amount of memory to be used. In this case, :meth:`~django.db.models.query.QuerySet.iterator()` may help."
msgstr ""

#: ../../topics/db/optimization.txt:107
# b775a6e0f80d4834bca58ca57c61088c
msgid "Do database work in the database rather than in Python"
msgstr ""

#: ../../topics/db/optimization.txt:109
# c1c1e692befc4bd78607c0fa092d0726
msgid "For instance:"
msgstr ""

#: ../../topics/db/optimization.txt:111
# 52b2a49e5c844f94aeed4c4e670c338e
msgid "At the most basic level, use :ref:`filter and exclude <queryset-api>` to do filtering in the database."
msgstr ""

#: ../../topics/db/optimization.txt:114
# 03bed50aba094ba1931503c1384f07e9
msgid "Use :ref:`F() object query expressions <query-expressions>` to do filtering against other fields within the same model."
msgstr ""

#: ../../topics/db/optimization.txt:117
# ff41804994844793a7d1947d775c1007
msgid "Use :doc:`annotate to do aggregation in the database </topics/db/aggregation>`."
msgstr ""

#: ../../topics/db/optimization.txt:119
# 02ea9c30d0894c2998884d24a7af347f
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

#: ../../topics/db/optimization.txt:122
# 87282481274e41f8822be90a6bd1c754
msgid "Use ``QuerySet.extra()``"
msgstr ""

#: ../../topics/db/optimization.txt:124
# 532248342ef3453485deacdcf49326ff
msgid "A less portable but more powerful method is :meth:`~django.db.models.query.QuerySet.extra()`, which allows some SQL to be explicitly added to the query. If that still isn't powerful enough:"
msgstr ""

#: ../../topics/db/optimization.txt:129
# 1748adbf23ba4d7184a968a70fadff1a
msgid "Use raw SQL"
msgstr ""

#: ../../topics/db/optimization.txt:131
# f4d62a09ba1249e4af95511cd9057640
msgid "Write your own :doc:`custom SQL to retrieve data or populate models </topics/db/sql>`. Use ``django.db.connection.queries`` to find out what Django is writing for you and start from there."
msgstr ""

#: ../../topics/db/optimization.txt:136
# b1d65096e5e84362a1211ff79ba10e29
msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

#: ../../topics/db/optimization.txt:138
# 6295fe0b8e7a4b26abd5e25664d67440
msgid "There are two reasons to use a column with :attr:`~django.db.models.Field.unique` or :attr:`~django.db.models.Field.db_index` when using :meth:`~django.db.models.query.QuerySet.get` to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen."
msgstr ""

#: ../../topics/db/optimization.txt:146
# 5f26ff032ba44fba9a52f502d1e29679
msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

#: ../../topics/db/optimization.txt:150
# 5809b0c73ec446fa8681f615f9aa8921
msgid "will be quicker than:"
msgstr ""

#: ../../topics/db/optimization.txt:154
# 590e197610954ab6be7cdbdb4bef916e
msgid "because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

#: ../../topics/db/optimization.txt:156
# cc8acb5ed58749fd9c32733c87d45a4f
msgid "Doing the following is potentially quite slow:"
msgstr ""

#: ../../topics/db/optimization.txt:160
# 728887184c3546d190244f12dee1802a
msgid "First of all, `headline` is not indexed, which will make the underlying database fetch slower."
msgstr ""

#: ../../topics/db/optimization.txt:163
# 13ab26807a5e4be383e3cf1688ca3804
msgid "Second, the lookup doesn't guarantee that only one object will be returned. If the query matches more than one object, it will retrieve and transfer all of them from the database. This penalty could be substantial if hundreds or thousands of records are returned. The penalty will be compounded if the database lives on a separate server, where network overhead and latency also play a factor."
msgstr ""

#: ../../topics/db/optimization.txt:171
# 4a64a6eb95d14400bb78f6f940c11032
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

#: ../../topics/db/optimization.txt:173
# 552280230c294223a205dfa7b1ea7ece
msgid "Hitting the database multiple times for different parts of a single 'set' of data that you will need all parts of is, in general, less efficient than retrieving it all in one query. This is particularly important if you have a query that is executed in a loop, and could therefore end up doing many database queries, when only one was needed. So:"
msgstr ""

#: ../../topics/db/optimization.txt:180
# 4e1db04759464aa9a864ce133c8b6d39
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

#: ../../topics/db/optimization.txt:182
# 726ea4535e5141549b2989a0c37aa9d9
msgid "Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

#: ../../topics/db/optimization.txt:186
# d892ad031ae54758a2e7689db2d184b1
msgid "in view code,"
msgstr ""

#: ../../topics/db/optimization.txt:188
# 74c15270f26f4be8ad2969576b953dc0
msgid "and in :doc:`managers and default managers </topics/db/managers>` where appropriate. Be aware when your manager is and is not used; sometimes this is tricky so don't make assumptions."
msgstr ""

#: ../../topics/db/optimization.txt:193
# 109dc244a8124e3698d2e2742c31b48c
msgid "Don't retrieve things you don't need"
msgstr ""

#: ../../topics/db/optimization.txt:196
# 2d3793e14ac44a60b4792d8e83ea2c53
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

#: ../../topics/db/optimization.txt:198
# 24630f2f06f54c289251a7ad26554f14
msgid "When you just want a ``dict`` or ``list`` of values, and don't need ORM model objects, make appropriate usage of :meth:`~django.db.models.query.QuerySet.values()`. These can be useful for replacing model objects in template code - as long as the dicts you supply have the same attributes as those used in the template, you are fine."
msgstr ""

#: ../../topics/db/optimization.txt:206
# 7caa0898325c40d48c6fe197d39f8b2e
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

#: ../../topics/db/optimization.txt:208
# e1242cf0524c42aeb27060496ac0178b
msgid "Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db.models.query.QuerySet.only()` if there are database columns you know that you won't need (or won't need in most cases) to avoid loading them. Note that if you *do* use them, the ORM will have to go and get them in a separate query, making this a pessimization if you use it inappropriately."
msgstr ""

#: ../../topics/db/optimization.txt:214
# a66116593089494c81cb4246dfa9d066
msgid "Also, be aware that there is some (small extra) overhead incurred inside Django when constructing a model with deferred fields. Don't be too aggressive in deferring fields without profiling as the database has to read most of the non-text, non-VARCHAR data from the disk for a single row in the results, even if it ends up only using a few columns. The ``defer()`` and ``only()`` methods are most useful when you can avoid loading a lot of text data or for fields that might take a lot of processing to convert back to Python. As always, profile first, then optimize."
msgstr ""

#: ../../topics/db/optimization.txt:224
# d2db8b9142a14b9193f2e862cbe05006
msgid "Use QuerySet.count()"
msgstr ""

#: ../../topics/db/optimization.txt:226
# 1dd4d2e96b3b450a8342b924eb56ac18
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

#: ../../topics/db/optimization.txt:229
# 894e6a108e004adbb066d2886eb47791
msgid "Use QuerySet.exists()"
msgstr ""

#: ../../topics/db/optimization.txt:231
# c8c2b9ef7ad74330993f3ce8fa16b0bc
msgid "...if you only want to find out if at least one result exists, rather than ``if queryset``."
msgstr ""

#: ../../topics/db/optimization.txt:234
# 2d433832e6a649fba13e6f052531bf46
msgid "But:"
msgstr ""

#: ../../topics/db/optimization.txt:237
# 86e474581549405ea7a1453d69ef4125
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

#: ../../topics/db/optimization.txt:239
# 442d4274116446f0a2cbc49502d39df2
msgid "If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

#: ../../topics/db/optimization.txt:241
# 24c35794441e4405ba024e19bc3644d5
msgid "For example, assuming an Email model that has a ``body`` attribute and a many-to-many relation to User, the following template code is optimal:"
msgstr ""

#: ../../topics/db/optimization.txt:260
# e342255319c142d89a405d42b8009ba9
msgid "It is optimal because:"
msgstr ""

#: ../../topics/db/optimization.txt:262
# 6e24f012e7504a74a2d62fd0c11d8231
msgid "Since QuerySets are lazy, this does no database queries if 'display_inbox' is False."
msgstr ""

#: ../../topics/db/optimization.txt:265
# 480520923fc4451f876f33618584a24a
msgid "Use of :ttag:`with` means that we store ``user.emails.all`` in a variable for later use, allowing its cache to be re-used."
msgstr ""

#: ../../topics/db/optimization.txt:268
# 79b1c3dde06c43659cfa7f0bcaac4c16
msgid "The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, which causes the ``user.emails.all()`` query to be run on the database, and at the least the first line to be turned into an ORM object. If there aren't any results, it will return False, otherwise True."
msgstr ""

#: ../../topics/db/optimization.txt:273
# 30b7e6e5412d4dd3b32a47974a3458e6
msgid "The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out the rest of the cache without doing another query."
msgstr ""

#: ../../topics/db/optimization.txt:276
# 4812423f8adf43fa920c3c668b5c1710
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

#: ../../topics/db/optimization.txt:278
# 3ee50e29a848409d808a60f56f9704ae
msgid "In total, this code does either one or zero database queries. The only deliberate optimization performed is the use of the :ttag:`with` tag. Using ``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause additional queries."
msgstr ""

#: ../../topics/db/optimization.txt:284
# a64e380c62f3423dba8922ff7ee365ff
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

#: ../../topics/db/optimization.txt:286
# 10c8ec8ce7a24f58ba1c56ef539d516b
msgid "Rather than retrieve a load of objects, set some values, and save them individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() <topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-queries-delete>` where possible."
msgstr ""

#: ../../topics/db/optimization.txt:291
# 47ef3d3758bf4226882d65bbae6ddc76
msgid "Note, however, that these bulk update methods cannot call the ``save()`` or ``delete()`` methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object :doc:`signals </ref/signals>`."
msgstr ""

#: ../../topics/db/optimization.txt:297
# 559afbdf5e6d4c2c8a3ff5fe332e4b04
msgid "Use foreign key values directly"
msgstr ""

#: ../../topics/db/optimization.txt:299
# 371aa1ba47ea4fbe86107551c6b32ce3
msgid "If you only need a foreign key value, use the foreign key value that is already on the object you've got, rather than getting the whole related object and taking its primary key. i.e. do::"
msgstr ""

#: ../../topics/db/optimization.txt:305
# 30e6f47379104283ae6ef189b17e2bab
msgid "instead of::"
msgstr ""

#: ../../topics/db/optimization.txt:310
# 6437e9a3fbb546f1aac1494061e8e66f
msgid "Insert in bulk"
msgstr ""

#: ../../topics/db/optimization.txt:312
# 14b6b0b084d64ed2a525a70286fc45fc
msgid "When creating objects, where possible, use the :meth:`~django.db.models.query.QuerySet.bulk_create()` method to reduce the number of SQL queries. For example::"
msgstr ""

#: ../../topics/db/optimization.txt:321
#: ../../topics/db/optimization.txt:335
# 7237583bfc2d4a95923237c3f72dc010
# 49fbf87b8ee24ef081a37262cf9b677e
msgid "...is preferable to::"
msgstr ""

#: ../../topics/db/optimization.txt:326
# 34b19d9345824af98f355190bc2ef33c
msgid "Note that there are a number of :meth:`caveats to this method <django.db.models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your use case."
msgstr ""

#: ../../topics/db/optimization.txt:330
# 0a066f4bc7a14bafa2b9d7e76cb399b1
msgid "This also applies to :class:`ManyToManyFields <django.db.models.ManyToManyField>`, so doing::"
msgstr ""

#: ../../topics/db/optimization.txt:340
# e091154278344d218fbfa303672d22cd
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

#: ../../topics/db/queries.txt:3
# 14b3c9a5fbf04230bb2c1d257307e5a9
msgid "Making queries"
msgstr ""

#: ../../topics/db/queries.txt:7
# 58cb0643e7fb4070827e733adc04b010
msgid "Once you've created your :doc:`data models </topics/db/models>`, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects. This document explains how to use this API. Refer to the :doc:`data model reference </ref/models/index>` for full details of all the various model lookup options."
msgstr ""

#: ../../topics/db/queries.txt:13
# 6e803a0b51d948bdbb70de01277ed8c8
msgid "Throughout this guide (and in the reference), we'll refer to the following models, which comprise a Weblog application:"
msgstr ""

#: ../../topics/db/queries.txt:49
# 0e88409176494612a91d626a65f377b9
msgid "Creating objects"
msgstr ""

#: ../../topics/db/queries.txt:51
# 837231a71fcd4b2ba5b6c381e076f216
msgid "To represent database-table data in Python objects, Django uses an intuitive system: A model class represents a database table, and an instance of that class represents a particular record in the database table."
msgstr ""

#: ../../topics/db/queries.txt:55
# 01a923ad500149df840bf2ad1414ae4e
msgid "To create an object, instantiate it using keyword arguments to the model class, then call :meth:`~django.db.models.Model.save` to save it to the database."
msgstr ""

#: ../../topics/db/queries.txt:58
# 0679c812c864435d86f0f603f43f8a6d
msgid "You import the model class from wherever it lives on the Python path, as you may expect. (We point this out here because previous Django versions required funky model importing.)"
msgstr ""

#: ../../topics/db/queries.txt:62
# 72b5c5fcfcaa4f0cb7a54b6133a6cd29
msgid "Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

#: ../../topics/db/queries.txt:68
# 577c4919967d4364b82b1cf7dfa364ef
msgid "This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't hit the database until you explicitly call :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:71
# 833f034ca9f1425ab7874eaf11d52c2f
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

#: ../../topics/db/queries.txt:75
# 31c1c368f62d479da8f16e61136b7644
msgid ":meth:`~django.db.models.Model.save` takes a number of advanced options not described here. See the documentation for :meth:`~django.db.models.Model.save` for complete details."
msgstr ""

#: ../../topics/db/queries.txt:79
# adb9d20d9c4b44d6838f500bc01934c6
msgid "To create and save an object in a single step, use the :meth:`~django.db.models.query.QuerySet.create()` method."
msgstr ""

#: ../../topics/db/queries.txt:83
# b1b05f7995484cff9c4a1712fa2d0f5a
msgid "Saving changes to objects"
msgstr ""

#: ../../topics/db/queries.txt:85
# 7336cd8cb001405c87cc8a8643ba1c67
msgid "To save changes to an object that's already in the database, use :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:88
# cb1b1bca00cd43fda12787467c63c952
msgid "Given a ``Blog`` instance ``b5`` that has already been saved to the database, this example changes its name and updates its record in the database::"
msgstr ""

#: ../../topics/db/queries.txt:94
# db6afdca5ad541af87ed493afa410d1b
msgid "This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't hit the database until you explicitly call :meth:`~django.db.models.Model.save`."
msgstr ""

#: ../../topics/db/queries.txt:98
# b79aee063c984bb3b68306c287ea8658
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

#: ../../topics/db/queries.txt:100
# 3c0d88af7d1f43728d9daa348b72ea77
msgid "Updating a :class:`~django.db.models.ForeignKey` field works exactly the same way as saving a normal field -- simply assign an object of the right type to the field in question. This example updates the ``blog`` attribute of an ``Entry`` instance ``entry``::"
msgstr ""

#: ../../topics/db/queries.txt:111
# 9d7063b3ef7b4a869ca55f1a285e92c4
msgid "Updating a :class:`~django.db.models.ManyToManyField` works a little differently -- use the :meth:`~django.db.models.fields.related.RelatedManager.add` method on the field to add a record to the relation. This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

#: ../../topics/db/queries.txt:121
# 96f093f22cf9403c8ba6b46709a00dbd
msgid "To add multiple records to a :class:`~django.db.models.ManyToManyField` in one go, include multiple arguments in the call to :meth:`~django.db.models.fields.related.RelatedManager.add`, like this::"
msgstr ""

#: ../../topics/db/queries.txt:131
# f7b1969de3794fb38f5aa2f3a5929f5d
msgid "Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

#: ../../topics/db/queries.txt:134
# f8de32791afa4b47bd5918c5f4cbaf59
msgid "Retrieving objects"
msgstr ""

#: ../../topics/db/queries.txt:136
# 40f74621d0014cbfaeffaa3dc191962f
msgid "To retrieve objects from your database, construct a :class:`~django.db.models.query.QuerySet` via a :class:`~django.db.models.Manager` on your model class."
msgstr ""

#: ../../topics/db/queries.txt:140
# 1bd785e8258747908cb49a5d4145cc5e
msgid "A :class:`~django.db.models.query.QuerySet` represents a collection of objects from your database. It can have zero, one or many *filters* -- criteria that narrow down the collection based on given parameters. In SQL terms, a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

#: ../../topics/db/queries.txt:146
# 6524c41fd5fa4f39a6dc34ff567f5f46
msgid "You get a :class:`~django.db.models.query.QuerySet` by using your model's :class:`~django.db.models.Manager`. Each model has at least one :class:`~django.db.models.Manager`, and it's called ``objects`` by default. Access it directly via the model class, like so::"
msgstr ""

#: ../../topics/db/queries.txt:161
# e7130d233ec74cc0a1a2a734427bea28
msgid "``Managers`` are accessible only via model classes, rather than from model instances, to enforce a separation between \"table-level\" operations and \"record-level\" operations."
msgstr ""

#: ../../topics/db/queries.txt:165
# 7fc2ad5e44ab4a2b92ec5bfab742285b
msgid "The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` for a model. It acts as a \"root\" :class:`~django.db.models.query.QuerySet` that describes all objects in the model's database table. For example, ``Blog.objects`` is the initial :class:`~django.db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""

#: ../../topics/db/queries.txt:172
# 6d7d2f0cdab745048785f4be41e2fc16
msgid "Retrieving all objects"
msgstr ""

#: ../../topics/db/queries.txt:174
# e03d1af65449497991d25ec044505937
msgid "The simplest way to retrieve objects from a table is to get all of them. To do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :class:`~django.db.models.Manager`::"
msgstr ""

#: ../../topics/db/queries.txt:180
# 7bc9100e43534049a5b3f39ca2c6b1f4
msgid "The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

#: ../../topics/db/queries.txt:183
# 1b7a169b1ae945a0a05f7bf683a47d1f
msgid "(If ``Entry.objects`` is a :class:`~django.db.models.query.QuerySet`, why can't we just do ``Entry.objects``?  That's because ``Entry.objects``, the root :class:`~django.db.models.query.QuerySet`, is a special case that cannot be evaluated. The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:`~django.db.models.query.QuerySet` that *can* be evaluated.)"
msgstr ""

#: ../../topics/db/queries.txt:191
# 9f04a544f10b474c85a9c7e587bc1483
msgid "Retrieving specific objects with filters"
msgstr ""

#: ../../topics/db/queries.txt:193
# ede022f991334e37b69c110ffe3a0029
msgid "The root :class:`~django.db.models.query.QuerySet` provided by the :class:`~django.db.models.Manager` describes all objects in the database table. Usually, though, you'll need to select only a subset of the complete set of objects."
msgstr ""

#: ../../topics/db/queries.txt:198
# a0ceef7ed21548cdb3c0a9962c6275a1
msgid "To create such a subset, you refine the initial :class:`~django.db.models.query.QuerySet`, adding filter conditions. The two most common ways to refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

#: ../../topics/db/queries.txt:203
# 09ed9117dbff48678d819a5dfa68c947
msgid "Returns a new :class:`~django.db.models.query.QuerySet` containing objects that match the given lookup parameters."
msgstr ""

#: ../../topics/db/queries.txt:207
# 6ba4bfa844e8477c84618d46de6f267a
msgid "Returns a new :class:`~django.db.models.query.QuerySet` containing objects that do *not* match the given lookup parameters."
msgstr ""

#: ../../topics/db/queries.txt:210
# b58ea30923f443f68ecaf0ea137c9856
msgid "The lookup parameters (``**kwargs`` in the above function definitions) should be in the format described in `Field lookups`_ below."
msgstr ""

#: ../../topics/db/queries.txt:213
# 2d773c736d7e4ae9af8a0c4075f25894
msgid "For example, to get a :class:`~django.db.models.query.QuerySet` of blog entries from the year 2006, use :meth:`~django.db.models.query.QuerySet.filter` like so::"
msgstr ""

#: ../../topics/db/queries.txt:219
# a474e55d5c8444afb15fb11631082b92
msgid "We don't have to add an :meth:`~django.db.models.query.QuerySet.all` -- ``Entry.objects.all().filter(...)``. That would still work, but you only need :meth:`~django.db.models.query.QuerySet.all` when you want all objects from the root :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:227
# 3e478671592d425d91853985b71a8a0e
msgid "Chaining filters"
msgstr ""

#: ../../topics/db/queries.txt:229
# 67b3621b2a0f4674b5fb704db359a6c1
msgid "The result of refining a :class:`~django.db.models.query.QuerySet` is itself a :class:`~django.db.models.query.QuerySet`, so it's possible to chain refinements together. For example::"
msgstr ""

#: ../../topics/db/queries.txt:241
# 14c8a1abdf834a8fbecf60d16954cc8d
msgid "This takes the initial :class:`~django.db.models.query.QuerySet` of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a :class:`~django.db.models.query.QuerySet` containing all entries with a headline that starts with \"What\", that were published between January 30, 2005, and the current day."
msgstr ""

#: ../../topics/db/queries.txt:250
# e1ad9b096b884763967ead9c12f0d58d
msgid "Filtered QuerySets are unique"
msgstr ""

#: ../../topics/db/queries.txt:252
# b26f3851f17043a0a660798d07d26972
msgid "Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound to the previous :class:`~django.db.models.query.QuerySet`. Each refinement creates a separate and distinct :class:`~django.db.models.query.QuerySet` that can be stored, used and reused."
msgstr ""

#: ../../topics/db/queries.txt:264
# 20d70fa8b40f47588faddd3793106327
msgid "These three ``QuerySets`` are separate. The first is a base :class:`~django.db.models.query.QuerySet` containing all entries that contain a headline starting with \"What\". The second is a subset of the first, with an additional criteria that excludes records whose ``pub_date`` is greater than now. The third is a subset of the first, with an additional criteria that selects only the records whose ``pub_date`` is greater than now. The initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by the refinement process."
msgstr ""

#: ../../topics/db/queries.txt:276
# 0f9d587a1e8a4be498c808d68e8f4092
msgid "QuerySets are lazy"
msgstr ""

#: ../../topics/db/queries.txt:278
# bca9d4199ba54ffc8d9bbc7ee28062d7
msgid "``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models.query.QuerySet` doesn't involve any database activity. You can stack filters together all day long, and Django won't actually run the query until the :class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this example::"
msgstr ""

#: ../../topics/db/queries.txt:289
# 95f0ab352fae40fda0666b4cc93d74db
msgid "Though this looks like three database hits, in fact it hits the database only once, at the last line (``print(q)``). In general, the results of a :class:`~django.db.models.query.QuerySet` aren't fetched from the database until you \"ask\" for them. When you do, the :class:`~django.db.models.query.QuerySet` is *evaluated* by accessing the database. For more details on exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

#: ../../topics/db/queries.txt:301
# 610ef06fcd2f4fe581ef42ad565588b7
msgid "Retrieving a single object with get"
msgstr ""

#: ../../topics/db/queries.txt:303
# 43f6a623512d499cb8cc1fcaae96a09b
msgid ":meth:`~django.db.models.query.QuerySet.filter` will always give you a :class:`~django.db.models.query.QuerySet`, even if only a single object matches the query - in this case, it will be a :class:`~django.db.models.query.QuerySet` containing a single element."
msgstr ""

#: ../../topics/db/queries.txt:308
# 4c174cff46e445cba0c5e6e61d4ab470
msgid "If you know there is only one object that matches your query, you can use the :meth:`~django.db.models.query.QuerySet.get` method on a `Manager` which returns the object directly::"
msgstr ""

#: ../../topics/db/queries.txt:314
# 36b667ca9e424616a04c956a97cd8648
msgid "You can use any query expression with :meth:`~django.db.models.query.QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet.filter` - again, see `Field lookups`_ below."
msgstr ""

#: ../../topics/db/queries.txt:319
# af56ad0652be4b179b95b4882e90a1d7
msgid "Note that there is a difference between using :meth:`~django.db.models.query.QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` with a slice of ``[0]``. If there are no results that match the query, :meth:`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no ``Entry`` object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

#: ../../topics/db/queries.txt:328
# bdf0bf41b11d489b87f80c49d28e3312
msgid "Similarly, Django will complain if more than one item matches the :meth:`~django.db.models.query.QuerySet.get` query. In this case, it will raise ``MultipleObjectsReturned``, which again is an attribute of the model class itself."
msgstr ""

#: ../../topics/db/queries.txt:335
# 895843e813544e988308a17dbf2855c6
msgid "Other QuerySet methods"
msgstr ""

#: ../../topics/db/queries.txt:337
# c60b35f2b16e4b5ab48c0235db72fb0d
msgid "Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query.QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when you need to look up objects from the database. However, that's far from all there is; see the :ref:`QuerySet API Reference <queryset-api>` for a complete list of all the various :class:`~django.db.models.query.QuerySet` methods."
msgstr ""

#: ../../topics/db/queries.txt:348
# 83fd3f69599a484bbe48ec2ee578eab9
msgid "Limiting QuerySets"
msgstr ""

#: ../../topics/db/queries.txt:350
# eabbe16bbb5342c7a8bb9b2c74782305
msgid "Use a subset of Python's array-slicing syntax to limit your :class:`~django.db.models.query.QuerySet` to a certain number of results. This is the equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

#: ../../topics/db/queries.txt:354
# ca70ae01a20c43e6bfc7d664c1df5093
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

#: ../../topics/db/queries.txt:358
# 308cdfdb34dc4ed1b23f8ddb96d42db8
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

#: ../../topics/db/queries.txt:362
# 4d5f87d2f6054ac6abb5dfd291e49424
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

#: ../../topics/db/queries.txt:364
# 1603c087ed5240c399f529e580a78d9d
msgid "Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the query. An exception is if you use the \"step\" parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every *second* object of the first 10::"
msgstr ""

#: ../../topics/db/queries.txt:372
# 8f6b58e445e44ee3a9a8639a9d3ab129
msgid "To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar LIMIT 1``), use a simple index instead of a slice. For example, this returns the first ``Entry`` in the database, after ordering entries alphabetically by headline::"
msgstr ""

#: ../../topics/db/queries.txt:379
# 98c43bd856fe43338ed747ca81b19dc0
msgid "This is roughly equivalent to::"
msgstr ""

#: ../../topics/db/queries.txt:383
# 0eaa7cf5ae0b4875bfa2f6e2feff232a
msgid "Note, however, that the first of these will raise ``IndexError`` while the second will raise ``DoesNotExist`` if no objects match the given criteria. See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

#: ../../topics/db/queries.txt:390
# 9c99d1d3d5e9402bb213ea93732196b0
msgid "Field lookups"
msgstr ""

#: ../../topics/db/queries.txt:392
# a8462d654a1441fcbdfe8c67233076a0
msgid "Field lookups are how you specify the meat of an SQL ``WHERE`` clause. They're specified as keyword arguments to the :class:`~django.db.models.query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models.query.QuerySet.get`."
msgstr ""

#: ../../topics/db/queries.txt:398
# aceaf7d8e8114c9e94d5c36a4743d3b1
msgid "Basic lookups keyword arguments take the form ``field__lookuptype=value``. (That's a double-underscore). For example::"
msgstr ""

#: ../../topics/db/queries.txt:403
# 5aba8d35e2fc43f1bb09072cfcd4e902
msgid "translates (roughly) into the following SQL::"
msgstr ""

#: ../../topics/db/queries.txt:409
# fdf658f4335847539cf5139224985f0d
msgid "Python has the ability to define functions that accept arbitrary name-value arguments whose names and values are evaluated at runtime. For more information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

#: ../../topics/db/queries.txt:424
# 2b82edcc5d944bdb98acab4bf28710bd
msgid "If you pass an invalid keyword argument, a lookup function will raise ``TypeError``."
msgstr ""

#: ../../topics/db/queries.txt:427
# 4b4ccc99a7a34a5186c37acace58baf2
msgid "The database API supports about two dozen lookup types; a complete reference can be found in the :ref:`field lookup reference <field-lookups>`. To give you a taste of what's available, here's some of the more common lookups you'll probably use:"
msgstr ""

#: ../../topics/db/queries.txt:433
# 0b29eeabd7a84d25b9d5752a73bbed51
msgid "An \"exact\" match. For example::"
msgstr ""

#: ../../topics/db/queries.txt:437
# 58b9c133fe0e45dca8edebcc511b3201
msgid "Would generate SQL along these lines:"
msgstr ""

#: ../../topics/db/queries.txt:443
# 666d2552588a447abc7b1b1db8779aa8
msgid "If you don't provide a lookup type -- that is, if your keyword argument doesn't contain a double underscore -- the lookup type is assumed to be ``exact``."
msgstr ""

#: ../../topics/db/queries.txt:447
# f0b03e0aba00484caef2637fc44b1096
msgid "For example, the following two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:452
# 7b1ee593cf924e1997d97d7bc4b7793e
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

#: ../../topics/db/queries.txt:455
# c8aaa77b5a1941f4954cf1f107b3250c
msgid "A case-insensitive match. So, the query::"
msgstr ""

#: ../../topics/db/queries.txt:459
# e2deb5fd09454cd4843fdbb5f27414c1
msgid "Would match a ``Blog`` titled \"Beatles Blog\", \"beatles blog\", or even \"BeAtlES blOG\"."
msgstr ""

#: ../../topics/db/queries.txt:463
# 5eae40bd75a44ff8895234925173fdc2
msgid "Case-sensitive containment test. For example::"
msgstr ""

#: ../../topics/db/queries.txt:467
# 60ec1898536542a5b4784b5bec290d03
msgid "Roughly translates to this SQL:"
msgstr ""

#: ../../topics/db/queries.txt:473
# 9a15a4b0e16245b6b9d66ce7c047241b
msgid "Note this will match the headline ``'Today Lennon honored'`` but not ``'today lennon honored'``."
msgstr ""

#: ../../topics/db/queries.txt:476
# 672c7b0a0c2a431ca372fc2a7d4389a3
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

#: ../../topics/db/queries.txt:479
# 30ff7a90658a4b919b48ddefe1d6dc4f
msgid "Starts-with and ends-with search, respectively. There are also case-insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

#: ../../topics/db/queries.txt:483
# 47abda4e9e2b4214af1089c842936c21
msgid "Again, this only scratches the surface. A complete reference can be found in the :ref:`field lookup reference <field-lookups>`."
msgstr ""

#: ../../topics/db/queries.txt:489
# 91100a6a657c4fd4b0abb3b063886420
msgid "Lookups that span relationships"
msgstr ""

#: ../../topics/db/queries.txt:491
# 60d8fbd0ed2848a999d83145b6b628a6
msgid "Django offers a powerful and intuitive way to \"follow\" relationships in lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind the scenes. To span a relationship, just use the field name of related fields across models, separated by double underscores, until you get to the field you want."
msgstr ""

#: ../../topics/db/queries.txt:497
# eed348102a144ea08fc725af2b52ce7f
msgid "This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` is ``'Beatles Blog'``::"
msgstr ""

#: ../../topics/db/queries.txt:502
# 3c535d749da646c6ba3b82fe33047b10
msgid "This spanning can be as deep as you'd like."
msgstr ""

#: ../../topics/db/queries.txt:504
# 3ae69821a45a4186b59c59905ec0a6e0
msgid "It works backwards, too. To refer to a \"reverse\" relationship, just use the lowercase name of the model."
msgstr ""

#: ../../topics/db/queries.txt:507
# f8717a785a1e46ebbf2fc7758f473cd8
msgid "This example retrieves all ``Blog`` objects which have at least one ``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

#: ../../topics/db/queries.txt:512
# c11e27eff79b4fccbdd506dbac7113e2
msgid "If you are filtering across multiple relationships and one of the intermediate models doesn't have a value that meets the filter condition, Django will treat it as if there is an empty (all values are ``NULL``), but valid, object there. All this means is that no error will be raised. For example, in this filter::"
msgstr ""

#: ../../topics/db/queries.txt:519
# c2b8def8f5e3446f819d96462c5287ef
msgid "(if there was a related ``Author`` model), if there was no ``author`` associated with an entry, it would be treated as if there was also no ``name`` attached, rather than raising an error because of the missing ``author``. Usually this is exactly what you want to have happen. The only case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

#: ../../topics/db/queries.txt:527
# 49fbdbb603304f06b2d4233fafd36be3
msgid "will return ``Blog`` objects that have an empty ``name`` on the ``author`` and also those which have an empty ``author`` on the ``entry``. If you don't want those latter objects, you could write::"
msgstr ""

#: ../../topics/db/queries.txt:535
# 5d4d6c07ebae491abfdfb195539da074
msgid "Spanning multi-valued relationships"
msgstr ""

#: ../../topics/db/queries.txt:537
# 67dfe46a63344872952fc44791bf3a1d
msgid "When you are filtering an object based on a :class:`~django.db.models.ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there are two different sorts of filter you may be interested in. Consider the ``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many relation). We might be interested in finding blogs that have an entry which has both *\"Lennon\"* in the headline and was published in 2008. Or we might want to find blogs that have an entry with *\"Lennon\"* in the headline as well as an entry that was published in 2008. Since there are multiple entries associated with a single ``Blog``, both of these queries are possible and make sense in some situations."
msgstr ""

#: ../../topics/db/queries.txt:548
# b5fc7aadad8c4f49bfcfc379e4f128ef
msgid "The same type of situation arises with a :class:`~django.db.models.ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db.models.ManyToManyField` called ``tags``, we might want to find entries linked to tags called *\"music\"* and *\"bands\"* or we might want an entry that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

#: ../../topics/db/queries.txt:554
# efb545e120b74517b52a4c2cde18a930
msgid "To handle both of these situations, Django has a consistent way of processing :meth:`~django.db.models.query.QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` calls. Everything inside a single :meth:`~django.db.models.query.QuerySet.filter` call is applied simultaneously to filter out items matching all those requirements. Successive :meth:`~django.db.models.query.QuerySet.filter` calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` call."
msgstr ""

#: ../../topics/db/queries.txt:564
# de7d514df7ba4169ab8575ab5a2debc3
msgid "That may sound a bit confusing, so hopefully an example will clarify. To select all blogs that contain entries with both *\"Lennon\"* in the headline and that were published in 2008 (the same entry satisfying both conditions), we would write::"
msgstr ""

#: ../../topics/db/queries.txt:572
# 14c31bbf8a4f4bcfada05a62136b2472
msgid "To select all blogs that contain an entry with *\"Lennon\"* in the headline **as well as** an entry that was published in 2008, we would write::"
msgstr ""

#: ../../topics/db/queries.txt:578
# 28f2c2b18f21453a9ae07c6641304537
msgid "Suppose there is only one blog that had both entries containing *\"Lennon\"* and entries from 2008, but that none of the entries from 2008 contained *\"Lennon\"*. The first query would not return any blogs, but the second query would return that one blog."
msgstr ""

#: ../../topics/db/queries.txt:583
# e08db09afdd847c7a4b30dce95e1ed6f
msgid "In the second example, the first filter restricts the queryset to all those blogs linked to entries with *\"Lennon\"* in the headline. The second filter restricts the set of blogs *further* to those that are also linked to entries that were published in 2008. The entries selected by the second filter may or may not be the same as the entries in the first filter. We are filtering the ``Blog`` items with each filter statement, not the ``Entry`` items."
msgstr ""

#: ../../topics/db/queries.txt:590
# add14aabe0a14813badccf1f9a6e0b49
msgid "All of this behavior also applies to :meth:`~django.db.models.query.QuerySet.exclude`: all the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` statement apply to a single instance (if those conditions are talking about the same multi-valued relation). Conditions in subsequent :meth:`~django.db.models.query.QuerySet.filter` or :meth:`~django.db.models.query.QuerySet.exclude` calls that refer to the same relation may end up filtering on different linked objects."
msgstr ""

#: ../../topics/db/queries.txt:602
# 7fd2555a91f84e3785fa1fddc2af2f3f
msgid "Filters can reference fields on the model"
msgstr ""

#: ../../topics/db/queries.txt:604
# 723cfd11ba8847caa0573a29b0dc29bf
msgid "In the examples given so far, we have constructed filters that compare the value of a model field with a constant. But what if you want to compare the value of a model field with another field on the same model?"
msgstr ""

#: ../../topics/db/queries.txt:608
# e1c9faa25a0242289129354b2a3fbf60
msgid "Django provides the :ref:`F() expressions <query-expressions>` to allow such comparisons. Instances of ``F()`` act as a reference to a model field within a query. These references can then be used in query filters to compare the values of two different fields on the same model instance."
msgstr ""

#: ../../topics/db/queries.txt:613
# 0fc01fcf810a40979effb05915a7ca20
msgid "For example, to find a list of all blog entries that have had more comments than pingbacks, we construct an ``F()`` object to reference the pingback count, and use that ``F()`` object in the query::"
msgstr ""

#: ../../topics/db/queries.txt:620
# 7984a885682d41dd9a64269533280fc1
msgid "Django supports the use of addition, subtraction, multiplication, division and modulo arithmetic with ``F()`` objects, both with constants and with other ``F()`` objects. To find all the blog entries with more than *twice* as many comments as pingbacks, we modify the query::"
msgstr ""

#: ../../topics/db/queries.txt:627
# ea104c54e24d4044b090c4fcf8f10919
msgid "To find all the entries where the rating of the entry is less than the sum of the pingback count and comment count, we would issue the query::"
msgstr ""

#: ../../topics/db/queries.txt:633
# 2426665c2c574bd3bd67dad00c133bea
msgid "You can also use the double underscore notation to span relationships in an ``F()`` object. An ``F()`` object with a double underscore will introduce any joins needed to access the related object. For example, to retrieve all the entries where the author's name is the same as the blog name, we could issue the query::"
msgstr ""

#: ../../topics/db/queries.txt:641
# 5b3992767883462495ba3f6f07e95a4d
msgid "For date and date/time fields, you can add or subtract a :class:`~datetime.timedelta` object. The following would return all entries that were modified more than 3 days after they were published::"
msgstr ""

#: ../../topics/db/queries.txt:651
# d02c6e83fe1f49268ef8035655453f7c
msgid "The ``F()`` objects now support bitwise operations by ``.bitand()`` and ``.bitor()``, for example::"
msgstr ""

#: ../../topics/db/queries.txt:661
# a9895990b47c4a9ab5f57a1c9a7f887e
msgid "The pk lookup shortcut"
msgstr ""

#: ../../topics/db/queries.txt:663
# b08b21bbb6174e95874f56a9d76b4678
msgid "For convenience, Django provides a ``pk`` lookup shortcut, which stands for \"primary key\"."
msgstr ""

#: ../../topics/db/queries.txt:666
# 39d0a474128e47cca5c709b618a37a7e
msgid "In the example ``Blog`` model, the primary key is the ``id`` field, so these three statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:673
# be04f5bce185436ba623712b9ba66734
msgid "The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

#: ../../topics/db/queries.txt:682
# 19ecc312ab494a2c8ba1acc2e262e510
msgid "``pk`` lookups also work across joins. For example, these three statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:690
# d214dad723d0430baa92eaa0267a32f3
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

#: ../../topics/db/queries.txt:692
# 3fb39e2e5f3c41abada89db3f5d73990
msgid "The field lookups that equate to ``LIKE`` SQL statements (``iexact``, ``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` and ``iendswith``) will automatically escape the two special characters used in ``LIKE`` statements -- the percent sign and the underscore. (In a ``LIKE`` statement, the percent sign signifies a multiple-character wildcard and the underscore signifies a single-character wildcard.)"
msgstr ""

#: ../../topics/db/queries.txt:699
# 71a28e88b0fb4abaa4eba8b1916f1fc0
msgid "This means things should work intuitively, so the abstraction doesn't leak. For example, to retrieve all the entries that contain a percent sign, just use the percent sign as any other character::"
msgstr ""

#: ../../topics/db/queries.txt:705
# bbc24753bccf40dbae78358e4a178b6c
msgid "Django takes care of the quoting for you; the resulting SQL will look something like this:"
msgstr ""

#: ../../topics/db/queries.txt:712
# 946474e84bd7404c94ac6136737d7eef
msgid "Same goes for underscores. Both percentage signs and underscores are handled for you transparently."
msgstr ""

#: ../../topics/db/queries.txt:718
# 9e511512e70b494e9248ffb0271976de
msgid "Caching and QuerySets"
msgstr ""

#: ../../topics/db/queries.txt:720
# 204669ab6d9041a1876c7726afcf8561
msgid "Each :class:`~django.db.models.query.QuerySet` contains a cache, to minimize database access. It's important to understand how it works, in order to write the most efficient code."
msgstr ""

#: ../../topics/db/queries.txt:724
# 3a02371e14604dad88fb6dcc13e675f3
msgid "In a newly created :class:`~django.db.models.query.QuerySet`, the cache is empty. The first time a :class:`~django.db.models.query.QuerySet` is evaluated -- and, hence, a database query happens -- Django saves the query results in the :class:`~django.db.models.query.QuerySet`\\'s cache and returns the results that have been explicitly requested (e.g., the next element, if the :class:`~django.db.models.query.QuerySet` is being iterated over). Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` reuse the cached results."
msgstr ""

#: ../../topics/db/queries.txt:733
# e15b246c1b3c4ceca758d2405a7c5fc9
msgid "Keep this caching behavior in mind, because it may bite you if you don't use your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, the following will create two :class:`~django.db.models.query.QuerySet`\\s, evaluate them, and throw them away::"
msgstr ""

#: ../../topics/db/queries.txt:741
# 297b7fab6dd44b8cbdfb8ec75764b785
msgid "That means the same database query will be executed twice, effectively doubling your database load. Also, there's a possibility the two lists may not include the same database records, because an ``Entry`` may have been added or deleted in the split second between the two requests."
msgstr ""

#: ../../topics/db/queries.txt:746
# d4843ac06479495b9a364f051d45ed3c
msgid "To avoid this problem, simply save the :class:`~django.db.models.query.QuerySet` and reuse it::"
msgstr ""

#: ../../topics/db/queries.txt:756
# 4a568abe33174e74bea6305c8660bfcd
msgid "Complex lookups with Q objects"
msgstr ""

#: ../../topics/db/queries.txt:758
# e8a21bf5b1b9439e80bd31bcc26d03fb
msgid "Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet.filter`, etc. -- are \"AND\"ed together. If you need to execute more complex queries (for example, queries with ``OR`` statements), you can use ``Q`` objects."
msgstr ""

#: ../../topics/db/queries.txt:764
# 4996241d205448ce97c442032a31e1ed
msgid "A :class:`~django.db.models.Q` object (``django.db.models.Q``) is an object used to encapsulate a collection of keyword arguments. These keyword arguments are specified as in \"Field lookups\" above."
msgstr ""

#: ../../topics/db/queries.txt:768
# 384e6c667a2d46179fb410a8f4f9daf3
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

#: ../../topics/db/queries.txt:773
# 4d800f941e3d4d1dbf0a0a2d7f6b61dc
msgid "``Q`` objects can be combined using the ``&`` and ``|`` operators. When an operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

#: ../../topics/db/queries.txt:776
# f684c4d83f74442f9f9dc8f79f05bdba
msgid "For example, this statement yields a single ``Q`` object that represents the \"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

#: ../../topics/db/queries.txt:781
# 07fcc557f65e42b998da943a19a73498
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

#: ../../topics/db/queries.txt:785
# 0458ac4fff864c9fae5770513788cc98
msgid "You can compose statements of arbitrary complexity by combining ``Q`` objects with the ``&`` and ``|`` operators and use parenthetical grouping. Also, ``Q`` objects can be negated using the ``~`` operator, allowing for combined lookups that combine both a normal query and a negated (``NOT``) query::"
msgstr ""

#: ../../topics/db/queries.txt:792
# c44a9b326bad4e3db75978f3988e30c6
msgid "Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db.models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet.exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed one or more ``Q`` objects as positional (not-named) arguments. If you provide multiple ``Q`` object arguments to a lookup function, the arguments will be \"AND\"ed together. For example::"
msgstr ""

#: ../../topics/db/queries.txt:805
# 9d4e56b94107492994d095225d603609
msgid "... roughly translates into the SQL::"
msgstr ""

#: ../../topics/db/queries.txt:810
# 0adb690481a24c788ef9e67d645149d5
msgid "Lookup functions can mix the use of ``Q`` objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or ``Q`` objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it must precede the definition of any keyword arguments. For example::"
msgstr ""

#: ../../topics/db/queries.txt:819
# 424101aef6234ecab4c4b4c8d0262b3f
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

#: ../../topics/db/queries.txt:826
# 81251f0bc266468e839910dc7b4a25c0
msgid "... would not be valid."
msgstr ""

#: ../../topics/db/queries.txt:830
# b340af6b42014ffa9b7ef2512163a81c
msgid "The `OR lookups examples`_ in the Django unit tests show some possible uses of ``Q``."
msgstr ""

#: ../../topics/db/queries.txt:836
# 591286930f9f4283b0f18c1694eb977a
msgid "Comparing objects"
msgstr ""

#: ../../topics/db/queries.txt:838
# 8f61505af8cd465b931a5c34397a146c
msgid "To compare two model instances, just use the standard Python comparison operator, the double equals sign: ``==``. Behind the scenes, that compares the primary key values of two models."
msgstr ""

#: ../../topics/db/queries.txt:842
# 4b9ac8dbd666468cbcb08611e65d7595
msgid "Using the ``Entry`` example above, the following two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:847
# d8606850f449432b9f992baec0226e20
msgid "If a model's primary key isn't called ``id``, no problem. Comparisons will always use the primary key, whatever it's called. For example, if a model's primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

#: ../../topics/db/queries.txt:857
# 183882728cb643619a7da06101d4028f
msgid "Deleting objects"
msgstr ""

#: ../../topics/db/queries.txt:859
# 63f420da6f6742b69fafedea96ba52e8
msgid "The delete method, conveniently, is named :meth:`~django.db.models.Model.delete`. This method immediately deletes the object and has no return value. Example::"
msgstr ""

#: ../../topics/db/queries.txt:865
# 756c642e5dcf43e58eb9bc7ca070783a
msgid "You can also delete objects in bulk. Every :class:`~django.db.models.query.QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:870
# 0f6efa5b15e44df58802d9cd16d0d629
msgid "For example, this deletes all ``Entry`` objects with a ``pub_date`` year of 2005::"
msgstr ""

#: ../../topics/db/queries.txt:875
# 24170001e9fc4125ba67f26609d2eaa1
msgid "Keep in mind that this will, whenever possible, be executed purely in SQL, and so the ``delete()`` methods of individual object instances will not necessarily be called during the process. If you've provided a custom ``delete()`` method on a model class and want to ensure that it is called, you will need to \"manually\" delete instances of that model (e.g., by iterating over a :class:`~django.db.models.query.QuerySet` and calling ``delete()`` on each object individually) rather than using the bulk :meth:`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../topics/db/queries.txt:885
# 33232c79a11a429e88cc18b3ebd381fa
msgid "When Django deletes an object, by default it emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which had foreign keys pointing at the object to be deleted will be deleted along with it. For example::"
msgstr ""

#: ../../topics/db/queries.txt:894
# d7eada1a93f74e39ae795b00b01dd6e8
msgid "This cascade behavior is customizable via the :attr:`~django.db.models.ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../topics/db/queries.txt:898
# 81b6bb78e29d48ce8b367ffcc25364bd
msgid "Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:`~django.db.models.query.QuerySet` method that is not exposed on a :class:`~django.db.models.Manager` itself. This is a safety mechanism to prevent you from accidentally requesting ``Entry.objects.delete()``, and deleting *all* the entries. If you *do* want to delete all the objects, then you have to explicitly request a complete query set::"
msgstr ""

#: ../../topics/db/queries.txt:910
# fb72251e2f4442d3bdcad76805651f39
msgid "Copying model instances"
msgstr ""

#: ../../topics/db/queries.txt:912
# 92018a4227104213a3136debe40720bf
msgid "Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields' values copied. In the simplest case, you can just set ``pk`` to ``None``. Using our blog example::"
msgstr ""

#: ../../topics/db/queries.txt:922
# aa93b9b092604864a4762ec2729b5814
msgid "Things get more complicated if you use inheritance. Consider a subclass of ``Blog``::"
msgstr ""

#: ../../topics/db/queries.txt:931
# bca6e082cfe644668adb2aa8bae8ceab
msgid "Due to how inheritance works, you have to set both ``pk`` and ``id`` to None::"
msgstr ""

#: ../../topics/db/queries.txt:937
# 76b326ca805b4684bffa0794f9fe85f5
msgid "This process does not copy related objects. If you want to copy relations, you have to write a little bit more code. In our example, ``Entry`` has a many to many field to ``Author``::"
msgstr ""

#: ../../topics/db/queries.txt:950
# 7efaaeab177f458ba9425b2c034e2528
msgid "Updating multiple objects at once"
msgstr ""

#: ../../topics/db/queries.txt:952
# 04510444b37c45ba90e2b3bc32256e8a
msgid "Sometimes you want to set a field to a particular value for all the objects in a :class:`~django.db.models.query.QuerySet`. You can do this with the :meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

#: ../../topics/db/queries.txt:959
# 5ebc348d062d49e0842bea52b6dae4ea
msgid "You can only set non-relation fields and :class:`~django.db.models.ForeignKey` fields using this method. To update a non-relation field, provide the new value as a constant. To update :class:`~django.db.models.ForeignKey` fields, set the new value to be the new model instance you want to point to. For example::"
msgstr ""

#: ../../topics/db/queries.txt:969
# 30e28412ea4145a68d972196e64e2d04
msgid "The ``update()`` method is applied instantly and returns the number of rows matched by the query (which may not be equal to the number of rows updated if some rows already have the new value). The only restriction on the :class:`~django.db.models.query.QuerySet` that is updated is that it can only access one database table, the model's main table. You can filter based on related fields, but you can only update columns in the model's main table. Example::"
msgstr ""

#: ../../topics/db/queries.txt:982
# 88478484e75145d78c9e64c5e0c23d0e
msgid "Be aware that the ``update()`` method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn't run any :meth:`~django.db.models.Model.save` methods on your models, or emit the ``pre_save`` or ``post_save`` signals (which are a consequence of calling :meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models.DateField.auto_now` field option. If you want to save every item in a :class:`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db.models.Model.save` method is called on each instance, you don't need any special function to handle that. Just loop over them and call :meth:`~django.db.models.Model.save`::"
msgstr ""

#: ../../topics/db/queries.txt:996
# 69b91c20bf1c4098b8014c024401acd9
msgid "Calls to update can also use :ref:`F() objects <query-expressions>` to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value. For example, to increment the pingback count for every entry in the blog::"
msgstr ""

#: ../../topics/db/queries.txt:1003
# 32847496042144ad80b4e2e4dda0ba4f
msgid "However, unlike ``F()`` objects in filter and exclude clauses, you can't introduce joins when you use ``F()`` objects in an update -- you can only reference fields local to the model being updated. If you attempt to introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

#: ../../topics/db/queries.txt:1014
# 1097ad36da1047e48da7a29104052831
msgid "Related objects"
msgstr ""

#: ../../topics/db/queries.txt:1016
# 86f5f936dbe74772b540558eee1d0c53
msgid "When you define a relationship in a model (i.e., a :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db.models.ManyToManyField`), instances of that model will have a convenient API to access the related object(s)."
msgstr ""

#: ../../topics/db/queries.txt:1022
# 558a7b3512a9400babe0a51deb862dde
msgid "Using the models at the top of this page, for example, an ``Entry`` object ``e`` can get its associated ``Blog`` object by accessing the ``blog`` attribute: ``e.blog``."
msgstr ""

#: ../../topics/db/queries.txt:1026
# 4de5bd130f6243ac91f4df99369b03cd
msgid "(Behind the scenes, this functionality is implemented by Python descriptors_. This shouldn't really matter to you, but we point it out here for the curious.)"
msgstr ""

#: ../../topics/db/queries.txt:1029
# d5be66906a844c07b9df12eae8166e5e
msgid "Django also creates API accessors for the \"other\" side of the relationship -- the link from the related model to the model that defines the relationship. For example, a ``Blog`` object ``b`` has access to a list of all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set.all()``."
msgstr ""

#: ../../topics/db/queries.txt:1034
# f8284271d85e42a6aa0d625d09687190
msgid "All examples in this section use the sample ``Blog``, ``Author`` and ``Entry`` models defined at the top of this page."
msgstr ""

#: ../../topics/db/queries.txt:1040
# b7856d8920764c76aaf2f913ae5bbc34
msgid "One-to-many relationships"
msgstr ""

#: ../../topics/db/queries.txt:1043
# 1fade3cf0ce6434fa0807cbcba6da0e5
msgid "Forward"
msgstr ""

#: ../../topics/db/queries.txt:1045
# 8938e6e275a74f279309110af09d669c
msgid "If a model has a :class:`~django.db.models.ForeignKey`, instances of that model will have access to the related (foreign) object via a simple attribute of the model."
msgstr ""

#: ../../topics/db/queries.txt:1054
# d0e49882018c4ef1bc4ef1f139c44e8f
msgid "You can get and set via a foreign-key attribute. As you may expect, changes to the foreign key aren't saved to the database until you call :meth:`~django.db.models.Model.save`. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1062
# 8d8202889da04e209f916ab7cc042fac
msgid "If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i.e., it allows ``NULL`` values), you can assign ``None`` to it. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1069
# 0a25526f593f4ddb8228764cb371ef6f
msgid "Forward access to one-to-many relationships is cached the first time the related object is accessed. Subsequent accesses to the foreign key on the same object instance are cached. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1077
# eba856671bfe4d5cac8869370609b515
msgid "Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:`~django.db.models.query.QuerySet` method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example::"
msgstr ""

#: ../../topics/db/queries.txt:1088
# 447bb540729d49c0b64d8482bb8462ce
msgid "Following relationships \"backward\""
msgstr ""

#: ../../topics/db/queries.txt:1090
# 25fb5c541df348988996f6f0e9405877
msgid "If a model has a :class:`~django.db.models.ForeignKey`, instances of the foreign-key model will have access to a :class:`~django.db.models.Manager` that returns all instances of the first model. By default, this :class:`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the source model name, lowercased. This :class:`~django.db.models.Manager` returns ``QuerySets``, which can be filtered and manipulated as described in the \"Retrieving objects\" section above."
msgstr ""

#: ../../topics/db/queries.txt:1107
# d1f0264154164d7ea2d2b58db7b8a5c8
msgid "You can override the ``FOO_set`` name by setting the ``related_name`` parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, the above example code would look like this::"
msgstr ""

#: ../../topics/db/queries.txt:1119
# c528e534c4414b858538f97ea02ca1d2
msgid "You cannot access a reverse :class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` from the class; it must be accessed from an instance::"
msgstr ""

#: ../../topics/db/queries.txt:1128
# 6f8d34b9400e4d07a4f330407537d19e
msgid "In addition to the :class:`~django.db.models.query.QuerySet` methods defined in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :class:`~django.db.models.Manager` has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

#: ../../topics/db/queries.txt:1135
# 35531dde66de4526b48ef40f25057bb2
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1138
# 68800f994e00449eba6bbca44c92c39b
msgid "Creates a new object, saves it and puts it in the related object set. Returns the newly created object."
msgstr ""

#: ../../topics/db/queries.txt:1142
# 80e238afb47145948f3c456725f3266e
msgid "Removes the specified model objects from the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1145
# dc27da64a8dd49f895204150f25e63f0
msgid "Removes all objects from the related object set."
msgstr ""

#: ../../topics/db/queries.txt:1147
# 8338586f8a03452d93c10ed7f0867eb8
msgid "To assign the members of a related set in one fell swoop, just assign to it from any iterable object. The iterable can contain object instances, or just a list of primary key values. For example::"
msgstr ""

#: ../../topics/db/queries.txt:1154
# 9e32db767150446888ce7bdef6559d1d
msgid "In this example, ``e1`` and ``e2`` can be full Entry instances, or integer primary key values."
msgstr ""

#: ../../topics/db/queries.txt:1157
# 978a1b1f3dca4c01bca70b61a6035135
msgid "If the ``clear()`` method is available, any pre-existing objects will be removed from the ``entry_set`` before all objects in the iterable (in this case, a list) are added to the set. If the ``clear()`` method is *not* available, all objects in the iterable will be added without removing any existing elements."
msgstr ""

#: ../../topics/db/queries.txt:1163
# ef897cce276d4eff8237861353a985ee
msgid "Each \"reverse\" operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database."
msgstr ""

#: ../../topics/db/queries.txt:1172
# 7e61815cf9fe4e98b42175582a064452
msgid "Both ends of a many-to-many relationship get automatic API access to the other end. The API works just as a \"backward\" one-to-many relationship, above."
msgstr ""

#: ../../topics/db/queries.txt:1175
# 20278955662246d0be88916bfc45b89d
msgid "The only difference is in the attribute naming: The model that defines the :class:`~django.db.models.ManyToManyField` uses the attribute name of that field itself, whereas the \"reverse\" model uses the lowercased model name of the original model, plus ``'_set'`` (just like reverse one-to-many relationships)."
msgstr ""

#: ../../topics/db/queries.txt:1180
# df3be6bfb21d4f4197b28f99c10d54f6
msgid "An example makes this easier to understand::"
msgstr ""

#: ../../topics/db/queries.txt:1190
# 819711b1c2634d76a8923703fc5bb5ff
msgid "Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models.ManyToManyField` can specify ``related_name``. In the above example, if the :class:`~django.db.models.ManyToManyField` in ``Entry`` had specified ``related_name='entries'``, then each ``Author`` instance would have an ``entries`` attribute instead of ``entry_set``."
msgstr ""

#: ../../topics/db/queries.txt:1199
# 65a2e8b2f1164b13bfe3d13012da2aa9
msgid "One-to-one relationships are very similar to many-to-one relationships. If you define a :class:`~django.db.models.OneToOneField` on your model, instances of that model will have access to the related object via a simple attribute of the model."
msgstr ""

#: ../../topics/db/queries.txt:1213
# 306069a16d594371981155ffca49dc16
msgid "The difference comes in \"reverse\" queries. The related model in a one-to-one relationship also has access to a :class:`~django.db.models.Manager` object, but that :class:`~django.db.models.Manager` represents a single object, rather than a collection of objects::"
msgstr ""

#: ../../topics/db/queries.txt:1221
# 11a86d9a3e5f46b7bc0a85be729f9b04
msgid "If no object has been assigned to this relationship, Django will raise a ``DoesNotExist`` exception."
msgstr ""

#: ../../topics/db/queries.txt:1224
# b2102f05f06146b393208dee745df836
msgid "Instances can be assigned to the reverse relationship in the same way as you would assign the forward relationship::"
msgstr ""

#: ../../topics/db/queries.txt:1230
# a1742e6eca19482bb739ffd7e3df4699
msgid "How are the backward relationships possible?"
msgstr ""

#: ../../topics/db/queries.txt:1232
# 9c6fd2f261ce4e1f96785bc640400192
msgid "Other object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don't Repeat Yourself) principle, so Django only requires you to define the relationship on one end."
msgstr ""

#: ../../topics/db/queries.txt:1237
# d7e42ff9c1c04b989eb4f30779422441
msgid "But how is this possible, given that a model class doesn't know which other model classes are related to it until those other model classes are loaded?"
msgstr ""

#: ../../topics/db/queries.txt:1240
# eefccd0fcf9d48e699675b8a36adb1d4
msgid "The answer lies in the :setting:`INSTALLED_APPS` setting. The first time any model is loaded, Django iterates over every model in :setting:`INSTALLED_APPS` and creates the backward relationships in memory as needed. Essentially, one of the functions of :setting:`INSTALLED_APPS` is to tell Django the entire model domain."
msgstr ""

#: ../../topics/db/queries.txt:1247
# f24ab1c5b3d4435da82f25a361e623d1
msgid "Queries over related objects"
msgstr ""

#: ../../topics/db/queries.txt:1249
# e67cef3323304b479122a718cfc7450c
msgid "Queries involving related objects follow the same rules as queries involving normal value fields. When specifying the value for a query to match, you may use either an object instance itself, or the primary key value for the object."
msgstr ""

#: ../../topics/db/queries.txt:1253
# 68d406019ad34e3180a141e51cd25d25
msgid "For example, if you have a Blog object ``b`` with ``id=5``, the following three queries would be identical::"
msgstr ""

#: ../../topics/db/queries.txt:1261
# afa3b800233a48a0a7e153b0b5a3623a
msgid "Falling back to raw SQL"
msgstr ""

#: ../../topics/db/queries.txt:1263
# e55991bee5d14b278752d4b12481ac1f
msgid "If you find yourself needing to write an SQL query that is too complex for Django's database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see :doc:`/topics/db/sql`."
msgstr ""

#: ../../topics/db/queries.txt:1268
# fcbadad4e097475abc97156f51efee76
msgid "Finally, it's important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there's nothing Django-specific about your database."
msgstr ""

#: ../../topics/db/sql.txt:3
# c3307ddd842249eda345055fb19d14b9
msgid "Performing raw SQL queries"
msgstr ""

#: ../../topics/db/sql.txt:7
# c183b107fbd44e7bb66effe334b0bc2d
msgid "When the :doc:`model query APIs </topics/db/queries>` don't go far enough, you can fall back to writing raw SQL. Django gives you two ways of performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform raw queries and return model instances`__, or you can avoid the model layer entirely and `execute custom SQL directly`__."
msgstr ""

#: ../../topics/db/sql.txt:19
# 65cbc408ece443cd829790ce045b9e86
msgid "Performing raw queries"
msgstr ""

#: ../../topics/db/sql.txt:21
# 9c7826c2e23b4b5fbf727a603df34029
msgid "The ``raw()`` manager method can be used to perform raw SQL queries that return model instances:"
msgstr ""

#: ../../topics/db/sql.txt:26
# 1c721d19b6954de7a8a8b119ed73b224
msgid "This method method takes a raw SQL query, executes it, and returns a :class:`~django.db.models.query.RawQuerySet` instance. This :class:`~django.db.models.query.RawQuerySet` instance can be iterated over just like an normal QuerySet to provide object instances."
msgstr ""

#: ../../topics/db/sql.txt:31
# d2bf7ebcbe8b472ab33ed56eb62fe351
msgid "This is best illustrated with an example. Suppose you've got the following model::"
msgstr ""

#: ../../topics/db/sql.txt:38
# 634a13d84ea0433aa5b9f8d334c4c7c0
msgid "You could then execute custom SQL like so::"
msgstr ""

#: ../../topics/db/sql.txt:45
# cd7ee318cf3649458367f0e6d527cb70
msgid "Of course, this example isn't very exciting -- it's exactly the same as running ``Person.objects.all()``. However, ``raw()`` has a bunch of other options that make it very powerful."
msgstr ""

#: ../../topics/db/sql.txt:51
# e5d17e0739da49a6a289e9e566be5430
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

#: ../../topics/db/sql.txt:53
# 5bf8633d7733438f8aa3e2d1ae48431b
msgid "By default, Django figures out a database table name by joining the model's \"app label\" -- the name you used in ``manage.py startapp`` -- to the model's class name, with an underscore between them. In the example we've assumed that the ``Person`` model lives in an app named ``myapp``, so its table would be ``myapp_person``."
msgstr ""

#: ../../topics/db/sql.txt:59
# 970f1cdeea7a4dbc8766f470e5002270
msgid "For more details check out the documentation for the :attr:`~Options.db_table` option, which also lets you manually set the database table name."
msgstr ""

#: ../../topics/db/sql.txt:65
# 88f2391580bf48f284507b3708a1f642
msgid "No checking is done on the SQL statement that is passed in to ``.raw()``. Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result."
msgstr ""

#: ../../topics/db/sql.txt:71
# d749371dd3e44c5c84e371958cbed1f6
msgid "Mapping query fields to model fields"
msgstr ""

#: ../../topics/db/sql.txt:73
# b7963c7eecbc428bb174ff22989f63a7
msgid "``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

#: ../../topics/db/sql.txt:75
# 3d2bd7e052c04255ac6b29dfef0f43e1
msgid "The order of fields in your query doesn't matter. In other words, both of the following queries work identically::"
msgstr ""

#: ../../topics/db/sql.txt:83
# d2255d4757964563bedad8241354d8c8
msgid "Matching is done by name. This means that you can use SQL's ``AS`` clauses to map fields in the query to model fields. So if you had some other table that had ``Person`` data in it, you could easily map it into ``Person`` instances::"
msgstr ""

#: ../../topics/db/sql.txt:93
# d97fa6359dad441a91d79d6347c271c7
msgid "As long as the names match, the model instances will be created correctly."
msgstr ""

#: ../../topics/db/sql.txt:95
# 7a8b56bcd54b40348c4584eed9daa00e
msgid "Alternatively, you can map fields in the query to model fields using the ``translations`` argument to ``raw()``. This is a dictionary mapping names of fields in the query to names of fields on the model. For example, the above query could also be written::"
msgstr ""

#: ../../topics/db/sql.txt:104
# 86d90231c5534c289ff30241f2f9dc03
msgid "Index lookups"
msgstr ""

#: ../../topics/db/sql.txt:106
# a0dea55ae50447c5a9c12f3f724e678c
msgid "``raw()`` supports indexing, so if you need only the first result you can write::"
msgstr ""

#: ../../topics/db/sql.txt:111
# 4a1ed22462034145bc0276be34c8ce9d
msgid "However, the indexing and slicing are not performed at the database level. If you have a big amount of ``Person`` objects in your database, it is more efficient to limit the query at the SQL level::"
msgstr ""

#: ../../topics/db/sql.txt:118
# e156db4b1f8a44118e3c3e8797eed3db
msgid "Deferring model fields"
msgstr ""

#: ../../topics/db/sql.txt:120
# 0b80e948f3264e32b5051db08dc8f5c1
msgid "Fields may also be left out::"
msgstr ""

#: ../../topics/db/sql.txt:124
# 4fca404c1ff6469caddd1149bf174b82
msgid "The ``Person`` objects returned by this query will be deferred model instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means that the fields that are omitted from the query will be loaded on demand. For example::"
msgstr ""

#: ../../topics/db/sql.txt:135
# 3893c50ba4af4951bfc3ddabc6afc29b
msgid "From outward appearances, this looks like the query has retrieved both the first name and last name. However, this example actually issued 3 queries. Only the first names were retrieved by the raw() query -- the last names were both retrieved on demand when they were printed."
msgstr ""

#: ../../topics/db/sql.txt:140
# 6dc9bf2e94204ca386a117a67c7ab4f7
msgid "There is only one field that you can't leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An ``InvalidQuery`` exception will be raised if you forget to include the primary key."
msgstr ""

#: ../../topics/db/sql.txt:146
# dc49d8f0f5e84590992cea5979414d30
msgid "Adding annotations"
msgstr ""

#: ../../topics/db/sql.txt:148
# 694c1456567541eeb92d7fc522c61c31
msgid "You can also execute queries containing fields that aren't defined on the model. For example, we could use `PostgreSQL's age() function`__ to get a list of people with their ages calculated by the database::"
msgstr ""

#: ../../topics/db/sql.txt:162
# d37b22b6b6bf44a08ecb69c7e1d448ab
msgid "Passing parameters into ``raw()``"
msgstr ""

#: ../../topics/db/sql.txt:164
# 3747c271818b491a9e3c48a62381128c
msgid "If you need to perform parameterized queries, you can use the ``params`` argument to ``raw()``::"
msgstr ""

#: ../../topics/db/sql.txt:170
# 06827eb0e2d347ca96d39aa49ad1c236
msgid "``params`` is a list of parameters. You'll use ``%s`` placeholders in the query string (regardless of your database engine); they'll be replaced with parameters from the ``params`` list."
msgstr ""

#: ../../topics/db/sql.txt:176
# af826307f0594f3abac0299434689d70
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

#: ../../topics/db/sql.txt:178
# 519fe6f9d9ba474e922fb2755c9f21b1
msgid "It's tempting to write the above query as::"
msgstr ""

#: ../../topics/db/sql.txt:183
# ec1884381e314a338d19047bb8b146b7
msgid "**Don't.**"
msgstr ""

#: ../../topics/db/sql.txt:185
# db628d400a0e461885936cd698745dd9
msgid "Using the ``params`` list completely protects you from `SQL injection attacks`__, a common exploit where attackers inject arbitrary SQL into your database. If you use string interpolation, sooner or later you'll fall victim to SQL injection. As long as you remember to always use the ``params`` list you'll be protected."
msgstr ""

#: ../../topics/db/sql.txt:196
# b3f2251232884e76bf6bb45479f1529e
msgid "Executing custom SQL directly"
msgstr ""

#: ../../topics/db/sql.txt:198
# 1fd91961db8e4950a266c308c1e3cef5
msgid "Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to perform queries that don't map cleanly to models, or directly execute ``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

#: ../../topics/db/sql.txt:202
# dd99b91926e74cc68641c44de4c4cdb9
msgid "In these cases, you can always access the database directly, routing around the model layer entirely."
msgstr ""

#: ../../topics/db/sql.txt:205
# 9227df5e99de4dfc98add259d8b64506
msgid "The object ``django.db.connection`` represents the default database connection, and ``django.db.transaction`` represents the default database transaction. To use the database connection, call ``connection.cursor()`` to get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the resulting rows. After performing a data changing operation, you should then call ``transaction.commit_unless_managed()`` to ensure your changes are committed to the database. If your query is purely a data retrieval operation, no commit is required. For example::"
msgstr ""

#: ../../topics/db/sql.txt:230
# 02a8d26c8ad14c4cbea91172bfcb95c5
msgid "If you are using :doc:`more than one database </topics/db/multi-db>`, you can use ``django.db.connections`` to obtain the connection (and cursor) for a specific database. ``django.db.connections`` is a dictionary-like object that allows you to retrieve a specific connection using its alias::"
msgstr ""

#: ../../topics/db/sql.txt:241
# fbcd07435f294d9097b4f4ec6ffdfbae
msgid "By default, the Python DB API will return results without their field names, which means you end up with a ``list`` of values, rather than a ``dict``. At a small performance cost, you can return results as a ``dict`` by using something like this::"
msgstr ""

#: ../../topics/db/sql.txt:254
# 7a19d4a59da742cfb844cd3608c5804a
msgid "Here is an example of the difference between the two::"
msgstr ""

#: ../../topics/db/sql.txt:268
# 09e505adc51840ab95edb258d7adecc2
msgid "Transactions and raw SQL"
msgstr ""

#: ../../topics/db/sql.txt:270
# cb0a45251d8749068652ccb93f605dd9
msgid "When you make a raw SQL call, Django will automatically mark the current transaction as dirty. You must then ensure that the transaction containing those calls is closed correctly. See :ref:`the notes on the requirements of Django's transaction handling <topics-db-transactions-requirements>` for more details."
msgstr ""

#: ../../topics/db/sql.txt:277
# 34b44b8fdb7e457b9fb65c6deaafebd9
msgid "Connections and cursors"
msgstr ""

#: ../../topics/db/sql.txt:279
# 09accaf909d841d19db61a6a5cc0764b
msgid "``connection`` and ``cursor`` mostly implement the standard Python DB-API described in :pep:`249` (except when it comes to :doc:`transaction handling </topics/db/transactions>`). If you're not familiar with the Python DB-API, note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding parameters directly within the SQL. If you use this technique, the underlying database library will automatically add quotes and escaping to your parameter(s) as necessary. (Also note that Django expects the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used by the SQLite Python bindings. This is for the sake of consistency and sanity.)"
msgstr ""

#: ../../topics/db/tablespaces.txt:3
# 56332ca535e34b68b85f756954bfc788
msgid "Tablespaces"
msgstr ""

#: ../../topics/db/tablespaces.txt:5
# f0c19edd7bcc4018a9a64df36aaf2f32
msgid "A common paradigm for optimizing performance in database systems is the use of `tablespaces`_ to organize disk layout."
msgstr ""

#: ../../topics/db/tablespaces.txt:11
# 1f3c2c1eaf3d489ea21d206c0dc26f0d
msgid "Django does not create the tablespaces for you. Please refer to your database engine's documentation for details on creating and managing tablespaces."
msgstr ""

#: ../../topics/db/tablespaces.txt:17
# 6a1cd541a37249d5a530f9c36beec254
msgid "Declaring tablespaces for tables"
msgstr ""

#: ../../topics/db/tablespaces.txt:19
# 0032ffa138a14e6398c2a13b88a3a8a2
msgid "A tablespace can be specified for the table generated by a model by supplying the :attr:`~django.db.models.Options.db_tablespace` option inside the model's ``class Meta``. This option also affects tables automatically created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

#: ../../topics/db/tablespaces.txt:24
# 8a08c1594c6540529c52211ce3f36cef
msgid "You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default value for :attr:`~django.db.models.Options.db_tablespace`. This is useful for setting a tablespace for the built-in Django apps and other applications whose code you cannot control."
msgstr ""

#: ../../topics/db/tablespaces.txt:30
# cab3e682f3f643879a88c4a3ee1131bc
msgid "Declaring tablespaces for indexes"
msgstr ""

#: ../../topics/db/tablespaces.txt:32
# af7ae0e5856047abb4a9f217d0a2e051
msgid "You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a ``Field`` constructor to specify an alternate tablespace for the ``Field``'s column index. If no index would be created for the column, the option is ignored."
msgstr ""

#: ../../topics/db/tablespaces.txt:37
# 36aae660d0da4ce88623235449fc2235
msgid "You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

#: ../../topics/db/tablespaces.txt:40
# 8c3ed1ba3a674c31abf16c6a36904137
msgid "If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the same tablespace as the tables."
msgstr ""

#: ../../topics/db/tablespaces.txt:57
# 52e1c87bad3d47739f191fa34db9e8bf
msgid "In this example, the tables generated by the ``TablespaceExample`` model (i.e. the model table and the many-to-many table) would be stored in the ``tables`` tablespace. The index for the name field and the indexes on the many-to-many table would be stored in the ``indexes`` tablespace. The ``data`` field would also generate an index, but no tablespace for it is specified, so it would be stored in the model tablespace ``tables`` by default."
msgstr ""

#: ../../topics/db/tablespaces.txt:65
# e299e2fcccfc458782fb102edb3e1913
msgid "Database support"
msgstr ""

#: ../../topics/db/tablespaces.txt:67
# 4af60dd945a64ca7ae21a04231d75da3
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

#: ../../topics/db/tablespaces.txt:69
# f74f31f15e3645799227fd0a4d215d57
msgid "When you use a backend that lacks support for tablespaces, Django ignores all tablespace-related options."
msgstr ""

#: ../../topics/db/transactions.txt:3
# 9f57e1bd4e724021a0b27c367306a037
msgid "Managing database transactions"
msgstr ""

#: ../../topics/db/transactions.txt:7
# a039e3f410784280a931f63486e221b9
msgid "Django gives you a few ways to control how database transactions are managed, if you're using a database that supports transactions."
msgstr ""

#: ../../topics/db/transactions.txt:11
# fc7f9e00b46649168c57269b755734b0
msgid "Django's default transaction behavior"
msgstr ""

#: ../../topics/db/transactions.txt:13
# 9be86b81d6ae4de8a7f5e74fe405a1d6
msgid "Django's default behavior is to run with an open transaction which it commits automatically when any built-in, data-altering model function is called. For example, if you call ``model.save()`` or ``model.delete()``, the change will be committed immediately."
msgstr ""

#: ../../topics/db/transactions.txt:18
# 54423c7e2aff4f17bfad7bdeea89b1f6
msgid "This is much like the auto-commit setting for most databases. As soon as you perform an action that needs to write to the database, Django produces the ``INSERT``/``UPDATE``/``DELETE`` statements and then does the ``COMMIT``. There's no implicit ``ROLLBACK``."
msgstr ""

#: ../../topics/db/transactions.txt:24
# bf8c0a35722541078bd420414109f546
msgid "Tying transactions to HTTP requests"
msgstr ""

#: ../../topics/db/transactions.txt:26
# 9a247ada1a424bf6886ac9b7dcf522b7
msgid "The recommended way to handle transactions in Web requests is to tie them to the request and response phases via Django's ``TransactionMiddleware``."
msgstr ""

#: ../../topics/db/transactions.txt:29
# 6db8f49dc8c848ae89a8a455a499f6e8
msgid "It works like this: When a request starts, Django starts a transaction. If the response is produced without problems, Django commits any pending transactions. If the view function produces an exception, Django rolls back any pending transactions."
msgstr ""

#: ../../topics/db/transactions.txt:34
# b676dd1fe79b4e69b13a99012df08926
msgid "To activate this feature, just add the ``TransactionMiddleware`` middleware to your :setting:`MIDDLEWARE_CLASSES` setting::"
msgstr ""

#: ../../topics/db/transactions.txt:45
# b66367f255624735b06ceb5f1b892038
msgid "The order is quite important. The transaction middleware applies not only to view functions, but also for all middleware modules that come after it. So if you use the session middleware after the transaction middleware, session creation will be part of the transaction."
msgstr ""

#: ../../topics/db/transactions.txt:50
# 69f08d84c00c4fc196ffe88ea34a15e8
msgid "The various cache middlewares are an exception: :class:`~django.middleware.cache.CacheMiddleware`, :class:`~django.middleware.cache.UpdateCacheMiddleware`, and :class:`~django.middleware.cache.FetchFromCacheMiddleware` are never affected. Even when using database caching, Django's cache backend uses its own database cursor (which is mapped to its own database connection internally)."
msgstr ""

#: ../../topics/db/transactions.txt:59
# 074388d74fc74c5285f6ac56e6b2517d
msgid "The ``TransactionMiddleware`` only affects the database aliased as \"default\" within your :setting:`DATABASES` setting.  If you are using multiple databases and want transaction control over databases other than \"default\", you will need to write your own transaction middleware."
msgstr ""

#: ../../topics/db/transactions.txt:67
# 6d7d0b1c10f74323bb56aae878c8f973
msgid "Controlling transaction management in views"
msgstr ""

#: ../../topics/db/transactions.txt:69
# 60e4063240b34d8ab41be42c4a6b8cb9
msgid "For most people, implicit request-based transactions work wonderfully. However, if you need more fine-grained control over how transactions are managed, you can use a set of functions in ``django.db.transaction`` to control transactions on a per-function or per-code-block basis."
msgstr ""

#: ../../topics/db/transactions.txt:74
# ddfb3707712344b8bed254670ee8fbde
msgid "These functions, described in detail below, can be used in two different ways:"
msgstr ""

#: ../../topics/db/transactions.txt:76
# 4160de909b624e6bb09ea2c2f1bf3ca2
msgid "As a decorator_ on a particular function. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:86
# 26e47eb1808d4c43aa34c5c330d17c62
msgid "As a `context manager`_ around a particular block of code::"
msgstr ""

#: ../../topics/db/transactions.txt:100
# 64e45cfcb69f473dbdf68fd03f6c2b4b
msgid "Both techniques work with all supported version of Python."
msgstr ""

#: ../../topics/db/transactions.txt:105
# 56c8dc35c5c043febc1cc90a27020a53
msgid "For maximum compatibility, all of the examples below show transactions using the decorator syntax, but all of the follow functions may be used as context managers, too."
msgstr ""

#: ../../topics/db/transactions.txt:111
# 8481a0ede17b491da2884d5cbd32ddc1
msgid "Although the examples below use view functions as examples, these decorators and context managers can be used anywhere in your code that you need to deal with transactions."
msgstr ""

#: ../../topics/db/transactions.txt:119
# baa538a1f2a04157bb85252d21b4fbc6
msgid "Use the ``autocommit`` decorator to switch a view function to Django's default commit behavior, regardless of the global transaction setting."
msgstr ""

#: ../../topics/db/transactions.txt:134
# 3633a3326dd54aa2845a4af722ed53bc
msgid "Within ``viewfunc()``, transactions will be committed as soon as you call ``model.save()``, ``model.delete()``, or any other function that writes to the database.  ``viewfunc2()`` will have this same behavior, but for the ``\"my_other_database\"`` connection."
msgstr ""

#: ../../topics/db/transactions.txt:141
# c4b171a2c2d84ca7aa78a1d0fcb6cb87
msgid "Use the ``commit_on_success`` decorator to use a single transaction for all the work done in a function::"
msgstr ""

#: ../../topics/db/transactions.txt:154
# d220126f061b4b21825c5b74fe9106b6
msgid "If the function returns successfully, then Django will commit all work done within the function at that point. If the function raises an exception, though, Django will roll back the transaction."
msgstr ""

#: ../../topics/db/transactions.txt:160
# abf72e6b68fa4d10b263ed1f3a3770d6
msgid "Use the ``commit_manually`` decorator if you need full control over transactions. It tells Django you'll be managing the transaction on your own."
msgstr ""

#: ../../topics/db/transactions.txt:164
# 71da1c78e9a644dd832ff599e1691569
msgid "Whether you are writing or simply reading from the database, you must ``commit()`` or ``rollback()`` explicitly or Django will raise a :exc:`TransactionManagementError` exception. This is required when reading from the database because ``SELECT`` statements may call functions which modify tables, and thus it is impossible to know if any data has been modified."
msgstr ""

#: ../../topics/db/transactions.txt:171
# a917d60f4b364afe8c22d0636a7cf698
msgid "Manual transaction management looks like this::"
msgstr ""

#: ../../topics/db/transactions.txt:197
# ce3cd0f856a14177980b61fc1d063deb
msgid "Requirements for transaction handling"
msgstr ""

#: ../../topics/db/transactions.txt:199
# c7e1c19651c348abbb8f3b23031cc6f5
msgid "Django requires that every transaction that is opened is closed before the completion of a request. If you are using :func:`autocommit` (the default commit mode) or :func:`commit_on_success`, this will be done for you automatically. However, if you are manually managing transactions (using the :func:`commit_manually` decorator), you must ensure that the transaction is either committed or rolled back before a request is completed."
msgstr ""

#: ../../topics/db/transactions.txt:207
# 7e44f4f006374f3a9236de5aaf6e2a81
msgid "This applies to all database operations, not just write operations. Even if your transaction only reads from the database, the transaction must be committed or rolled back before you complete a request."
msgstr ""

#: ../../topics/db/transactions.txt:212
# 7d06dd36a7e34d0988dd6613f161c7eb
msgid "How to globally deactivate transaction management"
msgstr ""

#: ../../topics/db/transactions.txt:214
# e75b7983a64e48caa850be596aa1a50b
msgid "Control freaks can totally disable all transaction management by setting ``DISABLE_TRANSACTION_MANAGEMENT`` to ``True`` in the Django settings file."
msgstr ""

#: ../../topics/db/transactions.txt:217
# ff48b1577c484ad3a6dfd784f84104f1
msgid "If you do this, Django won't provide any automatic transaction management whatsoever. Middleware will no longer implicitly commit transactions, and you'll need to roll management yourself. This even requires you to commit changes done by middleware somewhere else."
msgstr ""

#: ../../topics/db/transactions.txt:222
# 7d3952e6b4534f5ab9cb38af0182c9eb
msgid "Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange. In almost all situations, you'll be better off using the default behavior, or the transaction middleware, and only modify selected functions as needed."
msgstr ""

#: ../../topics/db/transactions.txt:230
# 2b27b174e19c4f4daa28febd600e3909
msgid "Savepoints"
msgstr ""

#: ../../topics/db/transactions.txt:232
# 0e4f92d1fbb44021af5218ee9c20dfbc
msgid "A savepoint is a marker within a transaction that enables you to roll back part of a transaction, rather than the full transaction. Savepoints are available with the PostgreSQL 8, Oracle and MySQL (when using the InnoDB storage engine) backends. Other backends provide the savepoint functions, but they're empty operations -- they don't actually do anything."
msgstr ""

#: ../../topics/db/transactions.txt:241
# 594161aab3214834a10b8dab75dfc2ad
msgid "Savepoints aren't especially useful if you are using the default ``autocommit`` behavior of Django. However, if you are using ``commit_on_success`` or ``commit_manually``, each open transaction will build up a series of database operations, awaiting a commit or rollback. If you issue a rollback, the entire transaction is rolled back. Savepoints provide the ability to perform a fine-grained rollback, rather than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""

#: ../../topics/db/transactions.txt:249
# a8256451479443a995b1c8fc3cd76a67
msgid "Each of these functions takes a ``using`` argument which should be the name of a database for which the behavior applies.  If no ``using`` argument is provided then the ``\"default\"`` database is used."
msgstr ""

#: ../../topics/db/transactions.txt:253
# 8c989740a1c64409ba8933cb75665e75
msgid "Savepoints are controlled by three methods on the transaction object:"
msgstr ""

#: ../../topics/db/transactions.txt:257
# 16feaef264724fefb03f42096828f0ed
msgid "Creates a new savepoint. This marks a point in the transaction that is known to be in a \"good\" state."
msgstr ""

#: ../../topics/db/transactions.txt:260
# 4fce1114125444aba9e2325f50ae71b3
msgid "Returns the savepoint ID (sid)."
msgstr ""

#: ../../topics/db/transactions.txt:264
# 47b8665fa9e7484184b31f1cdfd04d2a
msgid "Updates the savepoint to include any operations that have been performed since the savepoint was created, or since the last commit."
msgstr ""

#: ../../topics/db/transactions.txt:269
# 9d66f351f23d47ec84362dc11533ae4d
msgid "Rolls the transaction back to the last point at which the savepoint was committed."
msgstr ""

#: ../../topics/db/transactions.txt:272
# e6f2d12d65ea4a159de9ab38d36b7bc4
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

#: ../../topics/db/transactions.txt:296
# b1fd9cd53eb240ac88a682d9fd6f7a82
msgid "Transactions in MySQL"
msgstr ""

#: ../../topics/db/transactions.txt:298
# 10712e9485c44167afd86db5d33f5da7
msgid "If you're using MySQL, your tables may or may not support transactions; it depends on your MySQL version and the table types you're using. (By \"table types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction peculiarities are outside the scope of this article, but the MySQL site has `information on MySQL transactions`_."
msgstr ""

#: ../../topics/db/transactions.txt:304
# a9e9a317186e4419a61e54c3c5b471bb
msgid "If your MySQL setup does *not* support transactions, then Django will function in auto-commit mode: Statements will be executed and committed as soon as they're called. If your MySQL setup *does* support transactions, Django will handle transactions as explained in this document."
msgstr ""

#: ../../topics/db/transactions.txt:312
# d1734f3c858a4bbd87511b4dbf8ae3b2
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

#: ../../topics/db/transactions.txt:314
# 6036cdcdf1cb4ae6be4f3d8cb5fc45ab
msgid "When a call to a PostgreSQL cursor raises an exception (typically ``IntegrityError``), all subsequent SQL in the same transaction will fail with the error \"current transaction is aborted, queries ignored until end of transaction block\". Whilst simple use of ``save()`` is unlikely to raise an exception in PostgreSQL, there are more advanced usage patterns which might, such as saving objects with unique fields, saving using the force_insert/force_update flag, or invoking custom SQL."
msgstr ""

#: ../../topics/db/transactions.txt:322
# 6cdc03ea11a84dab9a547b3aeb25bdf6
msgid "There are several ways to recover from this sort of error."
msgstr ""

#: ../../topics/db/transactions.txt:325
# 5df5b1e9d13e43c7b91355e1065b181f
msgid "Transaction rollback"
msgstr ""

#: ../../topics/db/transactions.txt:327
# e3dcb7b826aa412c86190968934a8077
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:336
# 1896fe164d454ad7b05b0fed17d18b77
msgid "Calling ``transaction.rollback()`` rolls back the entire transaction. Any uncommitted database operations will be lost. In this example, the changes made by ``a.save()`` would be lost, even though that operation raised no error itself."
msgstr ""

#: ../../topics/db/transactions.txt:342
# 2e84ddc6be50445189157ee2cca73fa8
msgid "Savepoint rollback"
msgstr ""

#: ../../topics/db/transactions.txt:344
# 1f6f5d0fcb4a4b5c8002303782edda82
msgid "If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-db-transactions-savepoints>` to control the extent of a rollback. Before performing a database operation that could fail, you can set or update the savepoint; that way, if the operation fails, you can roll back the single offending operation, rather than the entire transaction. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:359
# afcee529a43c45c8a48268a830b7c9ce
msgid "In this example, ``a.save()`` will not be undone in the case where ``b.save()`` raises an exception."
msgstr ""

#: ../../topics/db/transactions.txt:363
# b17cb4cfe0804baaa6721bb301b32981
msgid "Database-level autocommit"
msgstr ""

#: ../../topics/db/transactions.txt:365
# a1ecff7af93441e3bf7e27d2d04e4faa
msgid "With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL with :doc:`database-level autocommit </ref/databases>`. If you use this option, there is no constantly open transaction, so it is always possible to continue after catching an exception. For example::"
msgstr ""

#: ../../topics/db/transactions.txt:379
# c2145a83141046b3ae1993c5ea19b1e7
msgid "This is not the same as the :ref:`autocommit decorator <topics-db-transactions-autocommit>`. When using database level autocommit there is no database transaction at all. The ``autocommit`` decorator still uses transactions, automatically committing each transaction when a database modifying operation occurs."
msgstr ""

#: ../../topics/email.txt:3
# dc2bbc4ce5c544c38246b256fd579b4f
msgid "Sending email"
msgstr ""

#: ../../topics/email.txt:8
# 3308e63a0a384530873149d2072a902a
msgid "Although Python makes sending email relatively easy via the :mod:`smtplib` module, Django provides a couple of light wrappers over it. These wrappers are provided to make sending email extra quick, to make it easy to test email sending during development, and to provide support for platforms that can't use SMTP."
msgstr ""

#: ../../topics/email.txt:14
# b65c368b00a74f44ad0f828a5d1d6d24
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

#: ../../topics/email.txt:19
# e4dd929569dd4d91beff5e3e0fd88351
msgid "In two lines::"
msgstr ""

#: ../../topics/email.txt:26
# 2fb2f924d8904935854a8e9ac28d8f0a
msgid "Mail is sent using the SMTP host and port specified in the :setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` setting controls whether a secure connection is used."
msgstr ""

#: ../../topics/email.txt:34
# b5a120d44f5e43089ecef731f5bb3ea1
msgid "The character set of email sent with ``django.core.mail`` will be set to the value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

#: ../../topics/email.txt:38
# 3727f2b14170458283b44729de8b90cf
msgid "send_mail()"
msgstr ""

#: ../../topics/email.txt:42
# 4e0f3a7e5e704cec9f0975dc43a03156
msgid "The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

#: ../../topics/email.txt:45
# 7fa51710b2b74b7ca4d0573c0acde700
msgid "The ``subject``, ``message``, ``from_email`` and ``recipient_list`` parameters are required."
msgstr ""

#: ../../topics/email.txt:48
# d6a60b70a43d45778db36f40a4e6ff8b
msgid "``subject``: A string."
msgstr ""

#: ../../topics/email.txt:49
# 2ddb55c6bb4545269bd000b488a04f1a
msgid "``message``: A string."
msgstr ""

#: ../../topics/email.txt:50
# f83b9939ccc64ebe9b51b72ba741f078
msgid "``from_email``: A string."
msgstr ""

#: ../../topics/email.txt:51
# 283e87ced0fc4bf4a4d0e265df756e7d
msgid "``recipient_list``: A list of strings, each an email address. Each member of ``recipient_list`` will see the other recipients in the \"To:\" field of the email message."
msgstr ""

#: ../../topics/email.txt:54
# d8f6bc74dd064310940106d14e760378
msgid "``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of possible exceptions, all of which are subclasses of :exc:`~smtplib.SMTPException`."
msgstr ""

#: ../../topics/email.txt:58
# 2034f7e3a2b44f29b7cfe8b6facd5951
msgid "``auth_user``: The optional username to use to authenticate to the SMTP server. If this isn't provided, Django will use the value of the :setting:`EMAIL_HOST_USER` setting."
msgstr ""

#: ../../topics/email.txt:61
# 0bdf91336d0442f484b49b319c9bbc23
msgid "``auth_password``: The optional password to use to authenticate to the SMTP server. If this isn't provided, Django will use the value of the :setting:`EMAIL_HOST_PASSWORD` setting."
msgstr ""

#: ../../topics/email.txt:64
# cf2a0af25c6244168508d535d9d0b26a
msgid "``connection``: The optional email backend to use to send the mail. If unspecified, an instance of the default backend will be used. See the documentation on :ref:`Email backends <topic-email-backends>` for more details."
msgstr ""

#: ../../topics/email.txt:70
# 429970cf15f644d98fe4181a1c517043
msgid "send_mass_mail()"
msgstr ""

#: ../../topics/email.txt:74
# 4f9899d9f79d48b190c70ff8503c5036
msgid "``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

#: ../../topics/email.txt:76
# d707b4cf2a8e494a8ece73a98ac944da
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

#: ../../topics/email.txt:80
# 423d4baa2b7b4ad497a43302d1bb6c7c
msgid "``fail_silently``, ``auth_user`` and ``auth_password`` have the same functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

#: ../../topics/email.txt:83
# 63f92e15504b4f9f8bf8876e166dc06f
msgid "Each separate element of ``datatuple`` results in a separate email message. As in :meth:`~django.core.mail.send_mail()`, recipients in the same ``recipient_list`` will all see the other addresses in the email messages' \"To:\" field."
msgstr ""

#: ../../topics/email.txt:88
# 858a1db4a3004bb1999863d02ac24699
msgid "For example, the following code would send two different messages to two different sets of recipients; however, only one connection to the mail server would be opened::"
msgstr ""

#: ../../topics/email.txt:97
# 347d316b03df432b8e03af4f1f0a161d
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

#: ../../topics/email.txt:99
# 2a63b777f4e240de9ff9796be1fc3aeb
msgid "The main difference between :meth:`~django.core.mail.send_mass_mail()` and :meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail.send_mail()` opens a connection to the mail server each time it's executed, while :meth:`~django.core.mail.send_mass_mail()` uses a single connection for all of its messages. This makes :meth:`~django.core.mail.send_mass_mail()` slightly more efficient."
msgstr ""

#: ../../topics/email.txt:107
# 9ced1d3164094054ab7afb327450205b
msgid "mail_admins()"
msgstr ""

#: ../../topics/email.txt:111
# 7e75756ec4bb4c57b099a13b995137b6
msgid "``django.core.mail.mail_admins()`` is a shortcut for sending an email to the site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

#: ../../topics/email.txt:114
# fa8f20ce3f8e4783bb78aaf0addd07ff
msgid "``mail_admins()`` prefixes the subject with the value of the :setting:`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

#: ../../topics/email.txt:117
# fdcf9b531af04a0986817226004dc4d9
msgid "The \"From:\" header of the email will be the value of the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../topics/email.txt:120
# 49d86a7bc8aa401d96bf8f2738ec78ed
msgid "This method exists for convenience and readability."
msgstr ""

#: ../../topics/email.txt:122
# c3744668eb474d568986f6d832f676c6
msgid "If ``html_message`` is provided, the resulting email will be a :mimetype:`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

#: ../../topics/email.txt:128
# aa1fe12ebf7d4626ada4e3d2592e8274
msgid "mail_managers()"
msgstr ""

#: ../../topics/email.txt:132
# 1ce4f30ca1d74023b5dbf434b19aa4a3
msgid "``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except it sends an email to the site managers, as defined in the :setting:`MANAGERS` setting."
msgstr ""

#: ../../topics/email.txt:137
#: ../../topics/http/sessions.txt:304
#: ../../topics/http/shortcuts.txt:174
#: ../../topics/http/urls.txt:562
# e213f30cb0664215b3c1cfc8da3e3c5c
# 30c6033513e24df2b59cb0e1513fd6b3
# 1ecc40c7250248b49ad473c78e21c148
# ea87c50d675d43bdad44060e965dd158
msgid "Examples"
msgstr ""

#: ../../topics/email.txt:139
# cd8d23f272df4c41a3c126dede34bef4
msgid "This sends a single email to john@example.com and jane@example.com, with them both appearing in the \"To:\"::"
msgstr ""

#: ../../topics/email.txt:145
# 743a3cea87a64602b12414ce885c1532
msgid "This sends a message to john@example.com and jane@example.com, with them both receiving a separate email::"
msgstr ""

#: ../../topics/email.txt:155
# 0d634a3b2f4d431c9cfcfce4d8fe9cf7
msgid "Preventing header injection"
msgstr ""

#: ../../topics/email.txt:157
# d1469a4f4ac64f07ac2e6c090907938d
msgid "`Header injection`_ is a security exploit in which an attacker inserts extra email headers to control the \"To:\" and \"From:\" in email messages that your scripts generate."
msgstr ""

#: ../../topics/email.txt:161
# af26c7608d5d499d83dd922250aeb254
msgid "The Django email functions outlined above all protect against header injection by forbidding newlines in header values. If any ``subject``, ``from_email`` or ``recipient_list`` contains a newline (in either Unix, Windows or Mac style), the email function (e.g. :meth:`~django.core.mail.send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of ``ValueError``) and, hence, will not send the email. It's your responsibility to validate all data before passing it to the email functions."
msgstr ""

#: ../../topics/email.txt:169
# 571f85d0245f4a10aba56f74c01f53fa
msgid "If a ``message`` contains headers at the start of the string, the headers will simply be printed as the first bit of the email message."
msgstr ""

#: ../../topics/email.txt:172
# 771dde55b3d74f8380c083fdb7dea4be
msgid "Here's an example view that takes a ``subject``, ``message`` and ``from_email`` from the request's POST data, sends that to admin@example.com and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

#: ../../topics/email.txt:198
# 0a639489efdc4163b399757b8155c589
msgid "The EmailMessage class"
msgstr ""

#: ../../topics/email.txt:200
# acc9b5aaaf904a239f4a75a8f447ce68
msgid "Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail.send_mass_mail()` functions are actually thin wrappers that make use of the :class:`~django.core.mail.EmailMessage` class."
msgstr ""

#: ../../topics/email.txt:204
# b8bd0af993b94d50bf1041ee710670aa
msgid "Not all features of the :class:`~django.core.mail.EmailMessage` class are available through the :meth:`~django.core.mail.send_mail()` and related wrapper functions. If you wish to use advanced features, such as BCC'ed recipients, file attachments, or multi-part email, you'll need to create :class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

#: ../../topics/email.txt:211
# 7df3bb9d6d1c47d48ae53903a277c643
msgid "This is a design feature. :meth:`~django.core.mail.send_mail()` and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility."
msgstr ""

#: ../../topics/email.txt:218
# 6b42e347606643439868bf27ead071d8
msgid ":class:`~django.core.mail.EmailMessage` is responsible for creating the email message itself. The :ref:`email backend <topic-email-backends>` is then responsible for sending the email."
msgstr ""

#: ../../topics/email.txt:222
# ceb9f76e1c134a7c8a2c2c1143b1b92b
msgid "For convenience, :class:`~django.core.mail.EmailMessage` provides a simple ``send()`` method for sending a single email. If you need to send multiple messages, the email backend API :ref:`provides an alternative <topics-sending-multiple-emails>`."
msgstr ""

#: ../../topics/email.txt:228
# bb106818cf92455290391dcc5b8b6b3b
msgid "EmailMessage Objects"
msgstr ""

#: ../../topics/email.txt:232
# 4f05c8d82f4e4334bbd7234a1e45744a
msgid "The :class:`~django.core.mail.EmailMessage` class is initialized with the following parameters (in the given order, if positional arguments are used). All parameters are optional and can be set at any time prior to calling the ``send()`` method."
msgstr ""

#: ../../topics/email.txt:237
# b16635557bfa49f9ae9376b32a27389a
msgid "``subject``: The subject line of the email."
msgstr ""

#: ../../topics/email.txt:239
# 9929de9685664602a06ddfaa09991b29
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

#: ../../topics/email.txt:241
# 59057f9a2c7243f9aeb1cf5df6f44deb
msgid "``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred <fred@example.com>`` forms are legal. If omitted, the :setting:`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

#: ../../topics/email.txt:245
# 75ddd352986b4cfab339814858a272bc
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

#: ../../topics/email.txt:247
# 12c57553e1004783886991a13db906e5
msgid "``bcc``: A list or tuple of addresses used in the \"Bcc\" header when sending the email."
msgstr ""

#: ../../topics/email.txt:250
# 61717c93293d40089b2d743e4cda2dd3
msgid "``connection``: An email backend instance. Use this parameter if you want to use the same connection for multiple messages. If omitted, a new connection is created when ``send()`` is called."
msgstr ""

#: ../../topics/email.txt:254
# 2ddd7e9a67a448a3a2430c5883b9c303
msgid "``attachments``: A list of attachments to put on the message. These can be either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, mimetype)`` triples."
msgstr ""

#: ../../topics/email.txt:258
# 6d7ede81db7b425783db61e8527500f3
msgid "``headers``: A dictionary of extra headers to put on the message. The keys are the header name, values are the header values. It's up to the caller to ensure header names and values are in the correct format for an email message."
msgstr ""

#: ../../topics/email.txt:263
# ab69908bf46b4bedb7f728860ab25e82
msgid "``cc``: A list or tuple of recipient addresses used in the \"Cc\" header when sending the email."
msgstr ""

#: ../../topics/email.txt:272
# 597c6544401b40c18d22ab1ccfa9b5b3
msgid "The class has the following methods:"
msgstr ""

#: ../../topics/email.txt:274
# b8e4bd37f58e412c9089e34b3a8644e8
msgid "``send(fail_silently=False)`` sends the message. If a connection was specified when the email was constructed, that connection will be used. Otherwise, an instance of the default backend will be instantiated and used. If the keyword argument ``fail_silently`` is ``True``, exceptions raised while sending the message will be quashed."
msgstr ""

#: ../../topics/email.txt:280
# 81e1b01f0916417ba4b4b0b7bf9ac354
msgid "``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core.mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever need to extend the :class:`~django.core.mail.EmailMessage` class, you'll probably want to override this method to put the content you want into the MIME object."
msgstr ""

#: ../../topics/email.txt:287
# d1fad881afeb46b182fcbce650b6ea5f
msgid "``recipients()`` returns a list of all the recipients of the message, whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This is another method you might need to override when subclassing, because the SMTP server needs to be told the full list of recipients when the message is sent. If you add another way to specify recipients in your class, they need to be returned from this method as well."
msgstr ""

#: ../../topics/email.txt:294
# fe23e1639ea3445caa64968fcd32536d
msgid "``attach()`` creates a new file attachment and adds it to the message. There are two ways to call ``attach()``:"
msgstr ""

#: ../../topics/email.txt:297
# a95a3bb2732c4f3f8185b615b6ddecec
msgid "You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` instance. This will be inserted directly into the resulting message."
msgstr ""

#: ../../topics/email.txt:301
# be095f219c634d2f85ede25561d18dba
msgid "Alternatively, you can pass ``attach()`` three arguments: ``filename``, ``content`` and ``mimetype``. ``filename`` is the name of the file attachment as it will appear in the email, ``content`` is the data that will be contained inside the attachment and ``mimetype`` is the optional MIME type for the attachment. If you omit ``mimetype``, the MIME content type will be guessed from the filename of the attachment."
msgstr ""

#: ../../topics/email.txt:313
# 8f60f807f104485d9882c55eaff42e48
msgid "``attach_file()`` creates a new attachment using a file from your filesystem. Call it with the path of the file to attach and, optionally, the MIME type to use for the attachment. If the MIME type is omitted, it will be guessed from the filename. The simplest use would be::"
msgstr ""

#: ../../topics/email.txt:323
# a3b0e3afc8fa4d12a8f6d61ba3c4dc73
msgid "Sending alternative content types"
msgstr ""

#: ../../topics/email.txt:325
# b1ec528ff55a4d0cb7839305aaec1bd0
msgid "It can be useful to include multiple versions of the content in an email; the classic example is to send both text and HTML versions of a message. With Django's email library, you can do this using the ``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail.EmailMessage` has an ``attach_alternative()`` method for including extra versions of the message body in the email. All the other methods (including the class initialization) are inherited directly from :class:`~django.core.mail.EmailMessage`."
msgstr ""

#: ../../topics/email.txt:333
# 3b41bfb5e5544d6d87fc2b926f6467cc
msgid "To send a text and HTML combination, you could write::"
msgstr ""

#: ../../topics/email.txt:344
# e58b645a4f6f4fa8bc02f78b53e3972e
msgid "By default, the MIME type of the ``body`` parameter in an :class:`~django.core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the ``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` class to change the main content type. The major type will always be ``\"text\"``, but you can change the subtype. For example::"
msgstr ""

#: ../../topics/email.txt:361
# 617cb91e03454909a19611b5d11793cb
msgid "Email backends"
msgstr ""

#: ../../topics/email.txt:363
# 19786ebca0e54f31bddbfdf75078a45b
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

#: ../../topics/email.txt:365
# 8cbb3cf6672a4431a5984ec4e771eae2
msgid "The email backend class has the following methods:"
msgstr ""

#: ../../topics/email.txt:367
# 4a390d37b2a24af8900b2421e88a8730
msgid "``open()`` instantiates an long-lived email-sending connection."
msgstr ""

#: ../../topics/email.txt:369
# d53c7a5ad21443319400ad710f3a4abe
msgid "``close()`` closes the current email-sending connection."
msgstr ""

#: ../../topics/email.txt:371
# b42176ea8c014c34ba50d96d6e16ef63
msgid "``send_messages(email_messages)`` sends a list of :class:`~django.core.mail.EmailMessage` objects. If the connection is not open, this call will implicitly open the connection, and close the connection afterwards. If the connection is already open, it will be left open after mail has been sent."
msgstr ""

#: ../../topics/email.txt:378
# 3de0d35e4ec643878f4f0abc3dd6336c
msgid "Obtaining an instance of an email backend"
msgstr ""

#: ../../topics/email.txt:380
# 965c413c015e42a0a394c909e99ee9a7
msgid "The :meth:`get_connection` function in ``django.core.mail`` returns an instance of the email backend that you can use."
msgstr ""

#: ../../topics/email.txt:387
# 5ab546271bc1479caede7372f7d72785
msgid "By default, a call to ``get_connection()`` will return an instance of the email backend specified in :setting:`EMAIL_BACKEND`. If you specify the ``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

#: ../../topics/email.txt:391
# 856a4252b67e498fa10b86c79a8d39f7
msgid "The ``fail_silently`` argument controls how the backend should handle errors. If ``fail_silently`` is True, exceptions during the email sending process will be silently ignored."
msgstr ""

#: ../../topics/email.txt:395
# c17777f7ef9640d5be2faa5f00408f55
msgid "All other arguments are passed directly to the constructor of the email backend."
msgstr ""

#: ../../topics/email.txt:398
# c8f7e3b148614ccca07007c994b8e8eb
msgid "Django ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

#: ../../topics/email.txt:406
# 1b05871104134ea49f4620a5440761b6
msgid "SMTP backend"
msgstr ""

#: ../../topics/email.txt:408
# 9235445cb4844e518fc2f8d07a76c0e3
msgid "This is the default backend. Email will be sent through a SMTP server. The server address and authentication credentials are set in the :setting:`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:`EMAIL_HOST_PASSWORD` and :setting:`EMAIL_USE_TLS` settings in your settings file."
msgstr ""

#: ../../topics/email.txt:414
# 158981da62864b53944de0051d6210ed
msgid "The SMTP backend is the default configuration inherited by Django. If you want to specify it explicitly, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:422
# 96d32df2c30e41f7b401f18daa4c11b9
msgid "Console backend"
msgstr ""

#: ../../topics/email.txt:424
# ba8d1013ca7f4763b77a0f0557876fd4
msgid "Instead of sending out real emails the console backend just writes the emails that would be send to the standard output. By default, the console backend writes to ``stdout``. You can use a different stream-like object by providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

#: ../../topics/email.txt:429
#: ../../topics/email.txt:447
#: ../../topics/email.txt:466
# 517f005bd2d14d47b89e5427fe291a08
# 24784b029e294961b8cc2162148cb953
# f69ebe8bc1b94a76b1edf51a93bf8127
msgid "To specify this backend, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:433
#: ../../topics/email.txt:452
#: ../../topics/email.txt:483
# 1f09635ca7b541e0bbfa9a9dbaf3714a
# 4ad1545a599f450aab67c8ed9537228a
# e71bd457f5744c47b81959c2336b7aed
msgid "This backend is not intended for use in production -- it is provided as a convenience that can be used during development."
msgstr ""

#: ../../topics/email.txt:439
# 934719b1d24e4c369a5dffeae5e2cbbb
msgid "File backend"
msgstr ""

#: ../../topics/email.txt:441
# e73eca246bbd47c7a4fac87e88eae4bf
msgid "The file backend writes emails to a file. A new file is created for each new session that is opened on this backend. The directory to which the files are written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from the ``file_path`` keyword when creating a connection with :meth:`~django.core.mail.get_connection`."
msgstr ""

#: ../../topics/email.txt:458
# b07ae6c562d746d5b205b6af56e4ab2f
msgid "In-memory backend"
msgstr ""

#: ../../topics/email.txt:460
# b85fe4eec07e43f2ba8903db7339831d
msgid "The ``'locmem'`` backend stores messages in a special attribute of the ``django.core.mail`` module. The ``outbox`` attribute is created when the first message is sent. It's a list with an :class:`~django.core.mail.EmailMessage` instance for each message that would be send."
msgstr ""

#: ../../topics/email.txt:470
# 58bafa34d07646c69738f02ee4573099
msgid "This backend is not intended for use in production -- it is provided as a convenience that can be used during development and testing."
msgstr ""

#: ../../topics/email.txt:476
# 948e7ea327cb4c0d8c42c9e7fcffdbf6
msgid "Dummy backend"
msgstr ""

#: ../../topics/email.txt:478
# c412d6435c3d4b58b4b9c66cdded2729
msgid "As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings::"
msgstr ""

#: ../../topics/email.txt:489
# 057753c050e94b3c9614a6f7fb977b9d
msgid "Defining a custom email backend"
msgstr ""

#: ../../topics/email.txt:491
# 7ec3a3da7dd1452ca21ed5fce6d65209
msgid "If you need to change how emails are sent you can write your own email backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then the Python import path for your backend class."
msgstr ""

#: ../../topics/email.txt:495
# 60a8b14747584f3685f3a5fd14d54ee5
msgid "Custom email backends should subclass ``BaseEmailBackend`` that is located in the ``django.core.mail.backends.base`` module. A custom email backend must implement the ``send_messages(email_messages)`` method. This method receives a list of :class:`~django.core.mail.EmailMessage` instances and returns the number of successfully delivered messages. If your backend has any concept of a persistent session or connection, you should also implement the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a reference implementation."
msgstr ""

#: ../../topics/email.txt:507
# 333b1ba880424f6a9e304ad9bb6b38af
msgid "Sending multiple emails"
msgstr ""

#: ../../topics/email.txt:509
# 29117752db324ff18a2f0c82e219b963
msgid "Establishing and closing an SMTP connection (or any other network connection, for that matter) is an expensive process. If you have a lot of emails to send, it makes sense to reuse an SMTP connection, rather than creating and destroying a connection every time you want to send an email."
msgstr ""

#: ../../topics/email.txt:514
# 2f45ae96d31f4197811385bbbf7d71d3
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

#: ../../topics/email.txt:516
# f894f27530a942e69e6ec053c14f9549
msgid "Firstly, you can use the ``send_messages()`` method. ``send_messages()`` takes a list of :class:`~django.core.mail.EmailMessage` instances (or subclasses), and sends them all using a single connection."
msgstr ""

#: ../../topics/email.txt:520
# a098306bed66484ab9fc0458cb1896a5
msgid "For example, if you have a function called ``get_notification_email()`` that returns a list of :class:`~django.core.mail.EmailMessage` objects representing some periodic email you wish to send out, you could send these emails using a single call to send_messages::"
msgstr ""

#: ../../topics/email.txt:530
# 5dcf60275f5140cc984c12c5e86721d0
msgid "In this example, the call to ``send_messages()`` opens a connection on the backend, sends the list of messages, and then closes the connection again."
msgstr ""

#: ../../topics/email.txt:533
# 445e1fcf4fce45098b47b1b921ed930e
msgid "The second approach is to use the ``open()`` and ``close()`` methods on the email backend to manually control the connection. ``send_messages()`` will not manually open or close the connection if it is already open, so if you manually open the connection, you can control when it is closed. For example::"
msgstr ""

#: ../../topics/email.txt:563
# be2db447ee4d4206aa78f59cae1a448b
msgid "Testing email sending"
msgstr ""

#: ../../topics/email.txt:565
# 52d869813c824a8980cd86025bd2e9cb
msgid "There are times when you do not want Django to send emails at all. For example, while developing a Web site, you probably don't want to send out thousands of emails -- but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content."
msgstr ""

#: ../../topics/email.txt:571
# cecb409ef24f4100bdbb3533e78798b0
msgid "The easiest way to test your project's use of email is to use the ``console`` email backend. This backend redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""

#: ../../topics/email.txt:575
# cd4c9b179e8e44ec9fc352245c00f033
msgid "The ``file`` email backend can also be useful during development -- this backend dumps the contents of every SMTP connection to a file that can be inspected at your leisure."
msgstr ""

#: ../../topics/email.txt:579
# 8754551a59d44a3386447150bcd7d723
msgid "Another approach is to use a \"dumb\" SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command::"
msgstr ""

#: ../../topics/email.txt:585
# e2a169afbfce417393ebdf3a7bf6d535
msgid "This command will start a simple SMTP server listening on port 1025 of localhost. This server simply prints to standard output all email headers and the email body. You then only need to set the :setting:`EMAIL_HOST` and :setting:`EMAIL_PORT` accordingly, and you are set."
msgstr ""

#: ../../topics/email.txt:590
# 5823c7de708446479dddc7b9a51073bf
msgid "For a more detailed discussion of testing and processing of emails locally, see the Python documentation for the :mod:`smtpd` module."
msgstr ""

#: ../../topics/files.txt:3
# 1f737e46f36e42e9b5237458e39c5260
msgid "Managing files"
msgstr ""

#: ../../topics/files.txt:5
# 2f4b06aff26549e39e6aa780b8f26547
msgid "This document describes Django's file access APIs."
msgstr ""

#: ../../topics/files.txt:7
# 6f08cfc4cef1433ba73133ae292e0320
msgid "By default, Django stores files locally, using the :setting:`MEDIA_ROOT` and :setting:`MEDIA_URL` settings. The examples below assume that you're using these defaults."
msgstr ""

#: ../../topics/files.txt:11
# 3568791a058d4288a22c9ded40eb8544
msgid "However, Django provides ways to write custom `file storage systems`_ that allow you to completely customize where and how Django stores files. The second half of this document describes how these storage systems work."
msgstr ""

#: ../../topics/files.txt:18
# c8afa90f83a344898a6855ca5d97d8da
msgid "Using files in models"
msgstr ""

#: ../../topics/files.txt:20
# f1fdc0849f47497ca4919ba49e6ba393
msgid "When you use a :class:`~django.db.models.FileField` or :class:`~django.db.models.ImageField`, Django provides a set of APIs you can use to deal with that file."
msgstr ""

#: ../../topics/files.txt:24
# 9dc397aabcfe4243b20dbf8f28bef83f
msgid "Consider the following model, using an :class:`~django.db.models.ImageField` to store a photo::"
msgstr ""

#: ../../topics/files.txt:32
# 5b497000070f454db92cef8b69fad1e1
msgid "Any ``Car`` instance will have a ``photo`` attribute that you can use to get at the details of the attached photo::"
msgstr ""

#: ../../topics/files.txt:45
# 9df1b36dfd12439ea80e3b44fcd66ee3
msgid "This object -- ``car.photo`` in the example -- is a ``File`` object, which means it has all the methods and attributes described below."
msgstr ""

#: ../../topics/files.txt:49
# ae97acdf0839457da734ac9cd7a32fce
msgid "The file is saved as part of saving the model in the database, so the actual file name used on disk cannot be relied on until after the model has been saved."
msgstr ""

#: ../../topics/files.txt:55
# fd3dc31c4e334746995577fa28705f9d
msgid "The ``File`` object"
msgstr ""

#: ../../topics/files.txt:57
# fd32633c90454237a6b803726f5eeeae
msgid "Internally, Django uses a :class:`django.core.files.File` instance any time it needs to represent a file. This object is a thin wrapper around Python's `built-in file object`_ with some Django-specific additions."
msgstr ""

#: ../../topics/files.txt:63
# 097d3719b35f48ef9b82f11892b4fbbd
msgid "Most of the time you'll simply use a ``File`` that Django's given you (i.e. a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

#: ../../topics/files.txt:66
# 2109cd5a65434074ad19df10ac332f7e
msgid "If you need to construct a ``File`` yourself, the easiest way is to create one using a Python built-in ``file`` object::"
msgstr ""

#: ../../topics/files.txt:75
# 5e12755639a24a0a87f39a038125e8c2
msgid "Now you can use any of the documented attributes and methods of the :class:`~django.core.files.File` class."
msgstr ""

#: ../../topics/files.txt:78
# 8d6f14f93e8d4a9ab88dd011b3cf20ec
msgid "Be aware that files created in this way are not automatically closed. The following approach may be used to close files automatically::"
msgstr ""

#: ../../topics/files.txt:93
# 90bee529493749c7909c409d91242cfb
msgid "Closing files is especially important when accessing file fields in a loop over a large number of objects:: If files are not manually closed after accessing them, the risk of running out of file descriptors may arise. This may lead to the following error:"
msgstr ""

#: ../../topics/files.txt:98
# 6fa758d1f6984970b96b693735332b0c
msgid "IOError: [Errno 24] Too many open files"
msgstr ""

#: ../../topics/files.txt:102
# cf478f2b90e14ead95bdf37ace4026c9
msgid "File storage"
msgstr ""

#: ../../topics/files.txt:104
# da79243482bd4add97821b99ca958593
msgid "Behind the scenes, Django delegates decisions about how and where to store files to a file storage system. This is the object that actually understands things like file systems, opening and reading files, etc."
msgstr ""

#: ../../topics/files.txt:108
# 3f2804f36d9448149146eaec1a84f1e6
msgid "Django's default file storage is given by the :setting:`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage system, this is the one that will be used."
msgstr ""

#: ../../topics/files.txt:112
# ed3c3238b63d4e80bcd781580b746ea4
msgid "See below for details of the built-in default file storage system, and see :doc:`/howto/custom-file-storage` for information on writing your own file storage system."
msgstr ""

#: ../../topics/files.txt:117
# 7231cb4c0f9f486dba51760c193adbbc
msgid "Storage objects"
msgstr ""

#: ../../topics/files.txt:119
# 70ee325699424683aaaa690868aab355
msgid "Though most of the time you'll want to use a ``File`` object (which delegates to the proper storage for that file), you can use file storage systems directly. You can create an instance of some custom file storage class, or -- often more useful -- you can use the global default storage system::"
msgstr ""

#: ../../topics/files.txt:140
# a31b5468b13442a29517810d0e3258c9
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

#: ../../topics/files.txt:145
# 050435f69f6d4179947a38cf2ac0e47f
msgid "The built-in filesystem storage class"
msgstr ""

#: ../../topics/files.txt:147
# 99da4d15a4424544b77c800552a342c2
msgid "Django ships with a built-in ``FileSystemStorage`` class (defined in ``django.core.files.storage``) which implements basic local filesystem file storage. Its initializer takes two arguments:"
msgstr ""

#: ../../topics/files.txt:152
# e2940b88df08402e9a014cd6c94d97db
msgid "Argument"
msgstr ""

#: ../../topics/files.txt:152
# 991bbeb2ffcb4d9cb208df911f0e1fb5
msgid "Description"
msgstr ""

#: ../../topics/files.txt:154
# 78feba54a8c5428fb882a4c8cf104d37
msgid "``location``"
msgstr ""

#: ../../topics/files.txt:154
# c1aace05f66c4b1290ced2b2032d616c
msgid "Optional. Absolute path to the directory that will hold the files. If omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

#: ../../topics/files.txt:157
# c5359df4b67743cebc6840512e995777
msgid "``base_url``"
msgstr ""

#: ../../topics/files.txt:157
# e0bebd4d5524495085f64deb3dea0456
msgid "Optional. URL that serves the files stored at this location. If omitted, it will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../topics/files.txt:162
# ec7d4a03a37341a5b2424f9ed40f5d90
msgid "For example, the following code will store uploaded files under ``/media/photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

#: ../../topics/files.txt:174
# 7b8beec3377a4d3ba2bd777892cf1fdc
msgid ":doc:`Custom storage systems </howto/custom-file-storage>` work the same way: you can pass them in as the ``storage`` argument to a :class:`~django.db.models.FileField`."
msgstr ""

#: ../../topics/forms/formsets.txt:4
# ab94343b11e3422995766e2cffd93295
msgid "Formsets"
msgstr ""

#: ../../topics/forms/formsets.txt:6
# 6b6252c6d1da49b6b013a67e24534f85
msgid "A formset is a layer of abstraction to working with multiple forms on the same page. It can be best compared to a data grid. Let's say you have the following form::"
msgstr ""

#: ../../topics/forms/formsets.txt:15
# 947f4b9184b14c8890f31a604b688037
msgid "You might want to allow the user to create several articles at once. To create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

#: ../../topics/forms/formsets.txt:21
# 5a5bb21f8d084642af0c0967f4d48e73
msgid "You now have created a formset named ``ArticleFormSet``. The formset gives you the ability to iterate over the forms in the formset and display them as you would with a regular form::"
msgstr ""

#: ../../topics/forms/formsets.txt:31
# 9372243f852943689869dc3803b518de
msgid "As you can see it only displayed one empty form. The number of empty forms that is displayed is controlled by the ``extra`` parameter. By default, ``formset_factory`` defines one extra form; the following example will display two blank forms::"
msgstr ""

#: ../../topics/forms/formsets.txt:38
# 332776c5854243aa8a06516e6263de62
msgid "Iterating over the ``formset`` will render the forms in the order they were created. You can change this order by providing an alternate implementation for the :meth:`__iter__()` method."
msgstr ""

#: ../../topics/forms/formsets.txt:42
# 421c86bd97e6438cbfd1e2a11427722f
msgid "Formsets can also be indexed into, which returns the corresponding form. If you override ``__iter__``, you will need to also override ``__getitem__`` to have matching behavior."
msgstr ""

#: ../../topics/forms/formsets.txt:49
# 5875b3826cfe4fdcb446992e366b312a
msgid "Using initial data with a formset"
msgstr ""

#: ../../topics/forms/formsets.txt:51
# aa41dc899e034d0bafea6cfa5e58744a
msgid "Initial data is what drives the main usability of a formset. As shown above you can define the number of extra forms. What this means is that you are telling the formset how many additional forms to show in addition to the number of forms it generates from the initial data. Lets take a look at an example::"
msgstr ""

#: ../../topics/forms/formsets.txt:72
# 4414a684d940400481806b5cfe407dcc
msgid "There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data."
msgstr ""

#: ../../topics/forms/formsets.txt:78
# 574918dbbcf147409b0ad4ad1b89aa5a
msgid ":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

#: ../../topics/forms/formsets.txt:83
# e6481231a8e64e6693566ad4a19c8e5d
msgid "Limiting the maximum number of forms"
msgstr ""

#: ../../topics/forms/formsets.txt:85
# c686994d2761409b8a4f7eff604e8a12
msgid "The ``max_num`` parameter to ``formset_factory`` gives you the ability to limit the maximum number of empty forms the formset will display::"
msgstr ""

#: ../../topics/forms/formsets.txt:95
# 90378d2ce5294abdb4614595f803d2e9
msgid "If the value of ``max_num`` is greater than the number of existing objects, up to ``extra`` additional blank forms will be added to the formset, so long as the total number of forms does not exceed ``max_num``."
msgstr ""

#: ../../topics/forms/formsets.txt:99
#: ../../topics/forms/modelforms.txt:703
# f1a11dfc182e4d919e494dd269f7ff38
# 9c26cdb05a574f65a310762a2b6eb0ee
msgid "A ``max_num`` value of ``None`` (the default) puts no limit on the number of forms displayed."
msgstr ""

#: ../../topics/forms/formsets.txt:103
# 3832f4bf82cb489eb340490c194218da
msgid "Formset validation"
msgstr ""

#: ../../topics/forms/formsets.txt:105
# fa33ac8ace1748fb9073bbd22a5cc4fd
msgid "Validation with a formset is almost identical to a regular ``Form``. There is an ``is_valid`` method on the formset to provide a convenient way to validate all forms in the formset::"
msgstr ""

#: ../../topics/forms/formsets.txt:119
# 33656c334fa447d1b860fb6513e89ad4
msgid "We passed in no data to the formset which is resulting in a valid form. The formset is smart enough to ignore extra forms that were not changed. If we provide an invalid article::"
msgstr ""

#: ../../topics/forms/formsets.txt:138
# 466f9a779d514d81be15002f80909a3c
msgid "As we can see, ``formset.errors`` is a list whose entries correspond to the forms in the formset. Validation was performed for each of the two forms, and the expected error message appears for the second item."
msgstr ""

#: ../../topics/forms/formsets.txt:144
# 47594555884d45f18089ce048f0b3a8d
msgid "We can also check if form data differs from the initial data (i.e. the form was sent without any data)::"
msgstr ""

#: ../../topics/forms/formsets.txt:161
# d253e5e5641c4156b4bc204032bab3c6
msgid "Understanding the ManagementForm"
msgstr ""

#: ../../topics/forms/formsets.txt:163
# 579994dfc2a24671840364cdc36f4cae
msgid "You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the formset's data above. This data is required for the ``ManagementForm``. This form is used by the formset to manage the collection of forms contained in the formset. If you don't provide this management data, an exception will be raised::"
msgstr ""

#: ../../topics/forms/formsets.txt:179
# 0f315c70dad942d78398a787987cf8ef
msgid "It is used to keep track of how many form instances are being displayed. If you are adding new forms via JavaScript, you should increment the count fields in this form as well."
msgstr ""

#: ../../topics/forms/formsets.txt:183
# c4508e9e7ee5461a980b610e979cae49
msgid "The management form is available as an attribute of the formset itself. When rendering a formset in a template, you can include all the management data by rendering ``{{ my_formset.management_form }}`` (substituting the name of your formset as appropriate)."
msgstr ""

#: ../../topics/forms/formsets.txt:189
# ac1613da4993492c985d32f4ce256698
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

#: ../../topics/forms/formsets.txt:191
# af4710a2289d403fbdd00badddc466cf
msgid "``BaseFormSet`` has a couple of methods that are closely related to the ``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

#: ../../topics/forms/formsets.txt:194
# 6244cb646af74454a65af5fae2d9b53b
msgid "``total_form_count`` returns the total number of forms in this formset. ``initial_form_count`` returns the number of forms in the formset that were pre-filled, and is also used to determine how many forms are required. You will probably never need to override either of these methods, so please be sure you understand what they do before doing so."
msgstr ""

#: ../../topics/forms/formsets.txt:201
# 7d23f4d8fcd844c988758ca6ed56308c
msgid "``empty_form``"
msgstr ""

#: ../../topics/forms/formsets.txt:203
# 33866e45dbb34afcb8be9aa84a8b4fb2
msgid "``BaseFormSet`` provides an additional attribute ``empty_form`` which returns a form instance with a prefix of ``__prefix__`` for easier use in dynamic forms with JavaScript."
msgstr ""

#: ../../topics/forms/formsets.txt:208
# 514933b8b8c84f0d9fe09887dcf0f1c0
msgid "Custom formset validation"
msgstr ""

#: ../../topics/forms/formsets.txt:210
# 4425003c2bbe48a69b9e9446e33d7cb8
msgid "A formset has a ``clean`` method similar to the one on a ``Form`` class. This is where you define your own validation that works at the formset level::"
msgstr ""

#: ../../topics/forms/formsets.txt:247
# 4405c978bc0f4f3e97c318808c506b6e
msgid "The formset ``clean`` method is called after all the ``Form.clean`` methods have been called. The errors will be found using the ``non_form_errors()`` method on the formset."
msgstr ""

#: ../../topics/forms/formsets.txt:252
# bd8b6cf318b3463e85d682ce978bfceb
msgid "Dealing with ordering and deletion of forms"
msgstr ""

#: ../../topics/forms/formsets.txt:254
# fd22a9781f5f4b29bc3979881850691e
msgid "Common use cases with a formset is dealing with ordering and deletion of the form instances. This has been dealt with for you. The ``formset_factory`` provides two optional parameters ``can_order`` and ``can_delete`` that will do the extra work of adding the extra fields and providing simpler ways of getting to that data."
msgstr ""

#: ../../topics/forms/formsets.txt:261
# bdebcf2419264e8cbd7a855562f776bf
msgid "``can_order``"
msgstr ""

#: ../../topics/forms/formsets.txt:263
#: ../../topics/forms/formsets.txt:319
#: ../../topics/http/sessions.txt:588
#: ../../topics/http/sessions.txt:597
#: ../../topics/http/sessions.txt:605
# 9398ae73ab904f5b82f15306d60889f8
# e9caf792e25d4f6e897e8bec06060329
# c05b8b105b6747eeacee430980782435
# 53dcaa1a852f431b86647bc08d7df885
# 4a21271ddff541f2ad20d8816b0438a0
msgid "Default: ``False``"
msgstr ""

#: ../../topics/forms/formsets.txt:265
# 0f3a3e935dff4dc3b5662834c0868374
msgid "Lets you create a formset with the ability to order::"
msgstr ""

#: ../../topics/forms/formsets.txt:284
# 78e137a391ca41859821f6e8805e4148
msgid "This adds an additional field to each form. This new field is named ``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the initial data it automatically assigned them a numeric value. Let's look at what will happen when the user changes these values::"
msgstr ""

#: ../../topics/forms/formsets.txt:317
# 3f778d82f28a4aca8f3c8976ca86e21c
msgid "``can_delete``"
msgstr ""

#: ../../topics/forms/formsets.txt:321
# 91319629e1524fde8d485a18e7690bfb
msgid "Lets you create a formset with the ability to delete::"
msgstr ""

#: ../../topics/forms/formsets.txt:341
# 2cb018b8614446eb844f4bb1a781f113
msgid "Similar to ``can_order`` this adds a new field to each form named ``DELETE`` and is a ``forms.BooleanField``. When data comes through marking any of the delete fields you can access them with ``deleted_forms``::"
msgstr ""

#: ../../topics/forms/formsets.txt:368
# 5cd5462df51f4275a63cedce7f83a066
msgid "Adding additional fields to a formset"
msgstr ""

#: ../../topics/forms/formsets.txt:370
# dc5d9b6f91c9458dafe9584f14b20b35
msgid "If you need to add additional fields to the formset this can be easily accomplished. The formset base class provides an ``add_fields`` method. You can simply override this method to add your own fields or even redefine the default fields/attributes of the order and deletion fields::"
msgstr ""

#: ../../topics/forms/formsets.txt:389
# d83e28e3c7744b2b8f6dfb4ca2c170ec
msgid "Using a formset in views and templates"
msgstr ""

#: ../../topics/forms/formsets.txt:391
# 1c9c39ed8c6648ab9a87592ade4e54c9
msgid "Using a formset inside a view is as easy as using a regular ``Form`` class. The only thing you will want to be aware of is making sure to use the management form inside the template. Let's look at a sample view:"
msgstr ""

#: ../../topics/forms/formsets.txt:408
# ac6debcf363f42c1916f99d9ede83dd8
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

#: ../../topics/forms/formsets.txt:421
# 0931b47103164f6096a0fc38c34ccb9d
msgid "However the above can be slightly shortcutted and let the formset itself deal with the management form:"
msgstr ""

#: ../../topics/forms/formsets.txt:432
# f9165ccde2b04bfea811524bd56be53f
msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

#: ../../topics/forms/formsets.txt:437
# 027a983be02b44ee90cd50087c93673a
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

#: ../../topics/forms/formsets.txt:439
# 4ebe35ab9e2941a394cb5f2a13229ff3
msgid "If you manually render fields in the template, you can render ``can_delete`` parameter with ``{{ form.DELETE }}``:"
msgstr ""

#: ../../topics/forms/formsets.txt:458
# 3374387026954fc2a21f45cbe8211fc5
msgid "Similarly, if the formset has the ability to order (``can_order=True``), it is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

#: ../../topics/forms/formsets.txt:462
# 2b4932b031e3409d8eec244aec94165c
msgid "Using more than one formset in a view"
msgstr ""

#: ../../topics/forms/formsets.txt:464
# 6f87a2aa82a549b4bbbb3ef187ea2b01
msgid "You are able to use more than one formset in a view if you like. Formsets borrow much of its behavior from forms. With that said you are able to use ``prefix`` to prefix formset form field names with a given value to allow more than one formset to be sent to a view without name clashing. Lets take a look at how this might be accomplished:"
msgstr ""

#: ../../topics/forms/formsets.txt:489
# 49d74b572be84176b06e5820e75f25de
msgid "You would then render the formsets as normal. It is important to point out that you need to pass ``prefix`` on both the POST and non-POST cases so that it is rendered and processed correctly."
msgstr ""

#: ../../topics/forms/index.txt:3
# 08a4b64fafe742d881b95f2696da4879
msgid "Working with forms"
msgstr ""

#: ../../topics/forms/index.txt:7
# b93d994ebd324557ba2995873d333382
msgid "This document provides an introduction to Django's form handling features. For a more detailed look at specific areas of the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:`/ref/forms/validation`."
msgstr ""

#: ../../topics/forms/index.txt:14
# 4f9a0e883c03448fb287cd0ed029dcfb
msgid "``django.forms`` is Django's form-handling library."
msgstr ""

#: ../../topics/forms/index.txt:16
# dfc489ce084a426296e24fdc4907d09e
msgid "While it is possible to process form submissions just using Django's :class:`~django.http.HttpRequest` class, using the form library takes care of a number of common form-related tasks. Using it, you can:"
msgstr ""

#: ../../topics/forms/index.txt:20
# 880a1ab9a1e64975aa56b1cfcfdf70ec
msgid "Display an HTML form with automatically generated form widgets."
msgstr ""

#: ../../topics/forms/index.txt:21
# 57889e51f85f43e7b8ca8c3afe24f3cd
msgid "Check submitted data against a set of validation rules."
msgstr ""

#: ../../topics/forms/index.txt:22
# 7a50d22d9690425d8132a42ee9c89cd2
msgid "Redisplay a form in the case of validation errors."
msgstr ""

#: ../../topics/forms/index.txt:23
# 5d6103c4710c499f9787624d51e988c1
msgid "Convert submitted form data to the relevant Python data types."
msgstr ""

#: ../../topics/forms/index.txt:28
# 330f85cbfd884dd1860a9aeab8556cbf
msgid "The library deals with these concepts:"
msgstr ""

#: ../../topics/forms/index.txt:33
# 6de50ae2858749648599cf2ff545e39a
msgid "A class that corresponds to an HTML form widget, e.g. ``<input type=\"text\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
msgstr ""

#: ../../topics/forms/index.txt:38
# 7d18b3c270334b3fb852bf7ddc5dadab
msgid "A class that is responsible for doing validation, e.g. an ``EmailField`` that makes sure its data is a valid email address."
msgstr ""

#: ../../topics/forms/index.txt:42
# 43667489cf09495b9813ec275fa4706e
msgid "A collection of fields that knows how to validate itself and display itself as HTML."
msgstr ""

#: ../../topics/forms/index.txt:46
# c101aa8797eb4c7d8e846ee47548254e
msgid "The CSS and JavaScript resources that are required to render a form."
msgstr ""

#: ../../topics/forms/index.txt:48
# bf61b8d1ff08475ea9e2fe0f12c72114
msgid "The library is decoupled from the other Django components, such as the database layer, views and templates. It relies only on Django settings, a couple of ``django.utils`` helper functions and Django's internationalization hooks (but you're not required to be using internationalization features to use this library)."
msgstr ""

#: ../../topics/forms/index.txt:55
# ba0bdb96d4524552badb2d5fbeabc944
msgid "Form objects"
msgstr ""

#: ../../topics/forms/index.txt:57
# 062aaffb51124fbc8a6480d0185752da
msgid "A Form object encapsulates a sequence of form fields and a collection of validation rules that must be fulfilled in order for the form to be accepted. Form classes are created as subclasses of ``django.forms.Form`` and make use of a declarative style that you'll be familiar with if you've used Django's database models."
msgstr ""

#: ../../topics/forms/index.txt:63
# 0a4532b726244054bc2c835240cd6634
msgid "For example, consider a form used to implement \"contact me\" functionality on a personal Web site:"
msgstr ""

#: ../../topics/forms/index.txt:76
# 0c167aa317364a9baaa6082d4170ecaf
msgid "A form is composed of ``Field`` objects. In this case, our form has four fields: ``subject``, ``message``, ``sender`` and ``cc_myself``. ``CharField``, ``EmailField`` and ``BooleanField`` are just three of the available field types; a full list can be found in :doc:`/ref/forms/fields`."
msgstr ""

#: ../../topics/forms/index.txt:81
# 6515a38aaf084c838544e9c4a662f245
msgid "If your form is going to be used to directly add or edit a Django model, you can use a :doc:`ModelForm </topics/forms/modelforms>` to avoid duplicating your model description."
msgstr ""

#: ../../topics/forms/index.txt:88
# 53a32e8cc853431cbd76157526d21e4f
msgid "Using a form in a view"
msgstr ""

#: ../../topics/forms/index.txt:90
# e0842873a96b45ea9a67fe38a67e1971
msgid "The standard pattern for processing a form in a view looks like this:"
msgstr ""

#: ../../topics/forms/index.txt:112
# 3f091dceba1e435a9789a43b26010939
msgid "There are three possible code paths here:"
msgstr ""

#: ../../topics/forms/index.txt:115
# fe1983662361430587bb9af6c0d3ba1d
msgid "Form submitted?"
msgstr ""

#: ../../topics/forms/index.txt:115
# 2c9aec5a30e74190b928e5b3fe26fc29
msgid "Data?"
msgstr ""

#: ../../topics/forms/index.txt:115
# d479c688afa842249feaf9c5900d2836
msgid "What occurs"
msgstr ""

#: ../../topics/forms/index.txt:117
# 23d3310954184bf09148ccf232bad284
msgid "Unsubmitted"
msgstr ""

#: ../../topics/forms/index.txt:117
# c5ed8750fe5e4755bda8db63061e4818
msgid "None yet"
msgstr ""

#: ../../topics/forms/index.txt:117
# d297ac7d78a4479dbac899cab039a62a
msgid "Template gets passed unbound instance of ContactForm."
msgstr ""

#: ../../topics/forms/index.txt:120
#: ../../topics/forms/index.txt:123
# f206c8fa85de414b9fdc25218d69b751
# 389066806e704ae0ae2f3a9b44ee9437
msgid "Submitted"
msgstr ""

#: ../../topics/forms/index.txt:120
# eb54ae896070467aa6b118038179e75e
msgid "Invalid data"
msgstr ""

#: ../../topics/forms/index.txt:120
# e88f764b3ceb4e6983a3a7f33707f135
msgid "Template gets passed bound instance of ContactForm."
msgstr ""

#: ../../topics/forms/index.txt:123
# e1ded655d39f4e49a73306d48962112e
msgid "Valid data"
msgstr ""

#: ../../topics/forms/index.txt:123
# 11794aa8a88844b481ffedafc999914c
msgid "Valid data is processed. Redirect to a \"thanks\" page."
msgstr ""

#: ../../topics/forms/index.txt:127
# 67a8f853d58e408cb67b161eb223fae7
msgid "The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr ""

#: ../../topics/forms/index.txt:129
# 1107189a2d9f4a9b84a903d6be7c94a1
msgid "An unbound form has no data associated with it. When rendered to the user, it will be empty or will contain default values."
msgstr ""

#: ../../topics/forms/index.txt:132
# c56ddc28d7fb46489b6c4bfcea1cffaa
msgid "A bound form has submitted data, and hence can be used to tell if that data is valid. If an invalid bound form is rendered, it can include inline error messages telling the user what data to correct."
msgstr ""

#: ../../topics/forms/index.txt:137
# 6567f45a60b94c0dad393248dbcf91d9
msgid "Handling file uploads with a form"
msgstr ""

#: ../../topics/forms/index.txt:139
# d90622a2660543a79c60431f4e9d5a17
msgid "To see how to handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""

#: ../../topics/forms/index.txt:143
# c21b1fafe0b7401c9213379936217fde
msgid "Processing the data from a form"
msgstr ""

#: ../../topics/forms/index.txt:145
# 862893949d584ff3a8455fbeea1d9d5f
msgid "Once ``is_valid()`` returns ``True``, the successfully validated form data will be in the ``form.cleaned_data`` dictionary. This data will have been converted nicely into Python types for you."
msgstr ""

#: ../../topics/forms/index.txt:151
# aeae0feb0d91423bb7e844ea87875f4b
msgid "You can still access the unvalidated data directly from ``request.POST`` at this point, but the validated data is better."
msgstr ""

#: ../../topics/forms/index.txt:154
# fd2debe6a8fc431c98dc8b6177a477ff
msgid "In the above example, ``cc_myself`` will be a boolean value. Likewise, fields such as ``IntegerField`` and ``FloatField`` convert values to a Python int and float respectively."
msgstr ""

#: ../../topics/forms/index.txt:158
# f4b271df638d40f8bff1f950a7e70dfe
msgid "Read-only fields are not available in ``form.cleaned_data`` (and setting a value in a custom ``clean()`` method won't have any effect). These fields are displayed as text rather than as input elements, and thus are not posted back to the server."
msgstr ""

#: ../../topics/forms/index.txt:163
# f86db4a7daf542e8b62d7645e9559c4e
msgid "Extending the earlier example, here's how the form data could be processed:"
msgstr ""

#: ../../topics/forms/index.txt:183
# db141ec84894489c94744329d5c536fa
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

#: ../../topics/forms/index.txt:186
# 1c26091f94a348718b27f016bab9cdd6
msgid "Displaying a form using a template"
msgstr ""

#: ../../topics/forms/index.txt:188
# 8dea98ef1e804b8a9beac646ca6bcfc5
msgid "Forms are designed to work with the Django template language. In the above example, we passed our ``ContactForm`` instance to the template using the context variable ``form``. Here's a simple example template::"
msgstr ""

#: ../../topics/forms/index.txt:197
# 74113bcc0e5242429b5cd8e5b2fe6174
msgid "The form only outputs its own fields; it is up to you to provide the surrounding ``<form>`` tags and the submit button."
msgstr ""

#: ../../topics/forms/index.txt:202
# cfa493582d7149f2a0f2d054bc2c9794
msgid "Django ships with an easy-to-use :doc:`protection against Cross Site Request Forgeries </ref/contrib/csrf>`. When submitting a form via POST with CSRF protection enabled you must use the :ttag:`csrf_token` template tag as in the preceding example. However, since CSRF protection is not directly tied to forms in templates, this tag is omitted from the following examples in this document."
msgstr ""

#: ../../topics/forms/index.txt:209
# a916c42df25c4b82a0f1fecf0ffbc257
msgid "``form.as_p`` will output the form with each form field and accompanying label wrapped in a paragraph. Here's the output for our example template::"
msgstr ""

#: ../../topics/forms/index.txt:224
# 5f751a141529456da12d9cb8f83a0cd8
msgid "Note that each form field has an ID attribute set to ``id_<field-name>``, which is referenced by the accompanying label tag. This is important for ensuring forms are accessible to assistive technology such as screen reader software. You can also :ref:`customize the way in which labels and ids are generated <ref-forms-api-configuring-label>`."
msgstr ""

#: ../../topics/forms/index.txt:230
# a0cc7bf337aa4a699fa6449979ce8bcf
msgid "You can also use ``form.as_table`` to output table rows (you'll need to provide your own ``<table>`` tags) and ``form.as_ul`` to output list items."
msgstr ""

#: ../../topics/forms/index.txt:234
# a789ac9dcae04ee6ab88d44e01e87d2a
msgid "Customizing the form template"
msgstr ""

#: ../../topics/forms/index.txt:236
# bc33987ec40943deb6ccf52b40dc638f
msgid "If the default generated HTML is not to your taste, you can completely customize the way a form is presented using the Django template language. Extending the above example::"
msgstr ""

#: ../../topics/forms/index.txt:265
# c8e77ed4b95049f6adb3431b8fc4fdb4
msgid "Each named form-field can be output to the template using ``{{ form.name_of_field }}``, which will produce the HTML needed to display the form widget. Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, rendered as an unordered list. This might look like::"
msgstr ""

#: ../../topics/forms/index.txt:274
# 566309bbe6314e8fa89a6fa69038f731
msgid "The list has a CSS class of ``errorlist`` to allow you to style its appearance. If you wish to further customize the display of errors you can do so by looping over them::"
msgstr ""

#: ../../topics/forms/index.txt:287
# e5d7d04ca75a40cc8fbb5e048b167192
msgid "Looping over the form's fields"
msgstr ""

#: ../../topics/forms/index.txt:289
# 2aebb257a59044859bb745ec91872625
msgid "If you're using the same HTML for each of your form fields, you can reduce duplicate code by looping through each field in turn using a ``{% for %}`` loop::"
msgstr ""

#: ../../topics/forms/index.txt:303
# 06ee845291db4556b53a9746d2b6c5cb
msgid "Within this loop, ``{{ field }}`` is an instance of :class:`BoundField`. ``BoundField`` also has the following attributes, which can be useful in your templates:"
msgstr ""

#: ../../topics/forms/index.txt:308
# 0326d534c25b44d99691f027a8bf733b
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

#: ../../topics/forms/index.txt:311
# 023eea635257470a9249c9689644c7fe
msgid "The field's label wrapped in the appropriate HTML ``<label>`` tag, e.g. ``<label for=\"id_email\">Email address</label>``"
msgstr ""

#: ../../topics/forms/index.txt:315
# 841c81b32e604e29b0d442d89116b739
msgid "The value of the field. e.g ``someone@example.com``"
msgstr ""

#: ../../topics/forms/index.txt:318
# 1b6c8c89538c4938a3fbab91477f6048
msgid "The name of the field that will be used in the input element's name field. This takes the form prefix into account, if it has been set."
msgstr ""

#: ../../topics/forms/index.txt:322
# d0ab82e479fa4fb7a1ce7e587fad834d
msgid "Any help text that has been associated with the field."
msgstr ""

#: ../../topics/forms/index.txt:325
# 38213c6601604ce9b8831ced179c8ecf
msgid "Outputs a ``<ul class=\"errorlist\">`` containing any validation errors corresponding to this field. You can customize the presentation of the errors with a ``{% for error in field.errors %}`` loop. In this case, each object in the loop is a simple string containing the error message."
msgstr ""

#: ../../topics/forms/index.txt:332
# d6982f3585a64c27868c1e9626bdf706
msgid "This attribute is ``True`` if the form field is a hidden field and ``False`` otherwise. It's not particularly useful as a template variable, but could be useful in conditional tests such as::"
msgstr ""

#: ../../topics/forms/index.txt:341
# 182ca020c12e4d00bfcceff39a2a1643
msgid "Looping over hidden and visible fields"
msgstr ""

#: ../../topics/forms/index.txt:343
# 2c51562a032f4839b65fdbd9ab964fbd
msgid "If you're manually laying out a form in a template, as opposed to relying on Django's default form layout, you might want to treat ``<input type=\"hidden\">`` fields differently than non-hidden fields. For example, because hidden fields don't display anything, putting error messages \"next to\" the field could cause confusion for your users -- so errors for those fields should be handled differently."
msgstr ""

#: ../../topics/forms/index.txt:350
# 19c6df2e3eee4b37bf9385ffc2fd178b
msgid "Django provides two methods on a form that allow you to loop over the hidden and visible fields independently: ``hidden_fields()`` and ``visible_fields()``. Here's a modification of an earlier example that uses these two methods::"
msgstr ""

#: ../../topics/forms/index.txt:370
# c1a71c9ad2a146768b3aa7bd2580634c
msgid "This example does not handle any errors in the hidden fields. Usually, an error in a hidden field is a sign of form tampering, since normal form interaction won't alter them. However, you could easily insert some error displays for those form errors, as well."
msgstr ""

#: ../../topics/forms/index.txt:376
# e2cb4822d78042e1bd8129fb16151f3f
msgid "Reusable form templates"
msgstr ""

#: ../../topics/forms/index.txt:378
# f97fe27db6f9440c8a1eec55a4b20ff0
msgid "If your site uses the same rendering logic for forms in multiple places, you can reduce duplication by saving the form's loop in a standalone template and using the :ttag:`include` tag to reuse it in other templates::"
msgstr ""

#: ../../topics/forms/index.txt:396
# 8ad6e09cce12496eadf09134890276de
msgid "If the form object passed to a template has a different name within the context, you can alias it using the ``with`` argument of the :ttag:`include` tag::"
msgstr ""

#: ../../topics/forms/index.txt:405
# 9f1422f2bee94358b0673df46b0e1c03
msgid "If you find yourself doing this often, you might consider creating a custom :ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../topics/forms/index.txt:409
# efd222f9e3ee4b359bf336fb40078521
msgid "Further topics"
msgstr ""

#: ../../topics/forms/index.txt:411
# edaa18efcb444682a29df5e01aeff69d
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

#: ../../topics/forms/index.txt:423
# 254b9991947d4e3f888c0d8feaa098e1
msgid "Covers the full API reference, including form fields, form widgets, and form and field validation."
msgstr ""

#: ../../topics/forms/media.txt:2
# bf982b84aa9c416397dd2581ba154809
msgid "Form Media"
msgstr ""

#: ../../topics/forms/media.txt:4
# 388abe0b42ed4df6b01fdc06db093fe1
msgid "Rendering an attractive and easy-to-use Web form requires more than just HTML - it also requires CSS stylesheets, and if you want to use fancy \"Web2.0\" widgets, you may also need to include some JavaScript on each page. The exact combination of CSS and JavaScript that is required for any given page will depend upon the widgets that are in use on that page."
msgstr ""

#: ../../topics/forms/media.txt:10
# f70c02b22dcb4296a1357e5407bf290a
msgid "This is where Django media definitions come in. Django allows you to associate different media files with the forms and widgets that require that media. For example, if you want to use a calendar to render DateFields, you can define a custom Calendar widget. This widget can then be associated with the CSS and JavaScript that is required to render the calendar. When the Calendar widget is used on a form, Django is able to identify the CSS and JavaScript files that are required, and provide the list of file names in a form suitable for easy inclusion on your Web page."
msgstr ""

#: ../../topics/forms/media.txt:21
# 528f4d48b2584fc880e658b76b2441ec
msgid "The Django Admin application defines a number of customized widgets for calendars, filtered selections, and so on. These widgets define media requirements, and the Django Admin uses the custom widgets in place of the Django defaults. The Admin templates will only include those media files that are required to render the widgets on any given page."
msgstr ""

#: ../../topics/forms/media.txt:28
# c968d1964746498a85aec170020e4159
msgid "If you like the widgets that the Django Admin application uses, feel free to use them in your own application! They're all stored in ``django.contrib.admin.widgets``."
msgstr ""

#: ../../topics/forms/media.txt:34
# 7bd9d27f78e44cd5b79e85aa1162aeac
msgid "Many JavaScript toolkits exist, and many of them include widgets (such as calendar widgets) that can be used to enhance your application. Django has deliberately avoided blessing any one JavaScript toolkit. Each toolkit has its own relative strengths and weaknesses - use whichever toolkit suits your requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

#: ../../topics/forms/media.txt:44
# 7ec1196442484ff780a0a7f2b525ec6d
msgid "Media as a static definition"
msgstr ""

#: ../../topics/forms/media.txt:46
# e72d3a31eab64142856e92e4e5eddefe
msgid "The easiest way to define media is as a static definition. Using this method, the media declaration is an inner class. The properties of the inner class define the media requirements."
msgstr ""

#: ../../topics/forms/media.txt:50
# a3b07e52d6b6448390d04137362cc873
msgid "Here's a simple example::"
msgstr ""

#: ../../topics/forms/media.txt:59
# 6d512bd3c1d94d148f92070cb2696776
msgid "This code defines a ``CalendarWidget``, which will be based on ``TextInput``. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file ``pretty.css``, and the JavaScript files ``animations.js`` and ``actions.js``."
msgstr ""

#: ../../topics/forms/media.txt:64
# b924b72380014ecfac7e2733f745486c
msgid "This static media definition is converted at runtime into a widget property named ``media``. The media for a CalendarWidget instance can be retrieved through this property::"
msgstr ""

#: ../../topics/forms/media.txt:74
# f4c0263d467241b4b0753035aa284691
msgid "Here's a list of all possible ``Media`` options. There are no required options."
msgstr ""

#: ../../topics/forms/media.txt:77
# 2ef88948e8b94b25a13115f49e12131f
msgid "``css``"
msgstr ""

#: ../../topics/forms/media.txt:79
# baaeceec96d148f9a042672f71fe84e7
msgid "A dictionary describing the CSS files required for various forms of output media."
msgstr ""

#: ../../topics/forms/media.txt:82
# 5b416a8fb7454d5294dba5c83fb9b42e
msgid "The values in the dictionary should be a tuple/list of file names. See :ref:`the section on media paths <form-media-paths>` for details of how to specify paths to media files."
msgstr ""

#: ../../topics/forms/media.txt:86
# f6a845ec55ea4c438d24cd6b0ff291c7
msgid "The keys in the dictionary are the output media types. These are the same types accepted by CSS files in media declarations: 'all', 'aural', 'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' and 'tv'. If you need to have different stylesheets for different media types, provide a list of CSS files for each output medium. The following example would provide two CSS options -- one for the screen, and one for print::"
msgstr ""

#: ../../topics/forms/media.txt:99
# fe9a831eee9e41f6b0e546b8958e9262
msgid "If a group of CSS files are appropriate for multiple output media types, the dictionary key can be a comma separated list of output media types. In the following example, TV's and projectors will have the same media requirements::"
msgstr ""

#: ../../topics/forms/media.txt:111
# 67d6ef5036564804ac0e3102a7d3aa6d
msgid "If this last CSS definition were to be rendered, it would become the following HTML::"
msgstr ""

#: ../../topics/forms/media.txt:118
# d49a8f79ee214daebe45a593366d4254
msgid "``js``"
msgstr ""

#: ../../topics/forms/media.txt:120
# 4acd4fbef1804e23afa9e12d510a467f
msgid "A tuple describing the required JavaScript files. See :ref:`the section on media paths <form-media-paths>` for details of how to specify paths to media files."
msgstr ""

#: ../../topics/forms/media.txt:125
# 951b76fb69e94bb6a4a78d94aa953cec
msgid "``extend``"
msgstr ""

#: ../../topics/forms/media.txt:127
# 6f3859a8251c4ace853bb3c6d4dc0aa4
msgid "A boolean defining inheritance behavior for media declarations."
msgstr ""

#: ../../topics/forms/media.txt:129
# 371c37b678e8403e92dd82d927754360
msgid "By default, any object using a static media definition will inherit all the media associated with the parent widget. This occurs regardless of how the parent defines its media requirements. For example, if we were to extend our basic Calendar widget from the example above::"
msgstr ""

#: ../../topics/forms/media.txt:149
# da97462876184c11be2649080db147a5
msgid "The FancyCalendar widget inherits all the media from it's parent widget. If you don't want media to be inherited in this way, add an ``extend=False`` declaration to the media declaration::"
msgstr ""

#: ../../topics/forms/media.txt:166
# 8807c3f273974aab8b7c469a82d2a905
msgid "If you require even more control over media inheritance, define your media using a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you complete control over which media files are inherited, and which are not."
msgstr ""

#: ../../topics/forms/media.txt:173
# 04d86de3eff14f17aa804ba0367746ac
msgid "Media as a dynamic property"
msgstr ""

#: ../../topics/forms/media.txt:175
# 2737b387e3224e1d931eecfd0cd22707
msgid "If you need to perform some more sophisticated manipulation of media requirements, you can define the media property directly. This is done by defining a widget property that returns an instance of ``forms.Media``. The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword arguments in the same format as that used in a static media definition."
msgstr ""

#: ../../topics/forms/media.txt:181
# 127d476bd0514d98a94ed0e44300c6c7
msgid "For example, the static media definition for our Calendar Widget could also be defined in a dynamic fashion::"
msgstr ""

#: ../../topics/forms/media.txt:190
# be566a4fc8d94df08c1f0f04bf76dee4
msgid "See the section on `Media objects`_ for more details on how to construct return values for dynamic media properties."
msgstr ""

#: ../../topics/forms/media.txt:196
# 4068e0b248a3401990f6871263235a03
msgid "Paths in media definitions"
msgstr ""

#: ../../topics/forms/media.txt:198
# 8c0ae7189c4c4111986f3c506f23f980
msgid "Paths used to specify media can be either relative or absolute. If a path starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix."
msgstr ""

#: ../../topics/forms/media.txt:203
# 4aa58d25448b417fbbc8741d5c8d66a3
msgid "As part of the introduction of the :doc:`staticfiles app </ref/contrib/staticfiles>` two new settings were added to refer to \"static files\" (images, CSS, Javascript, etc.) that are needed to render a complete web page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

#: ../../topics/forms/media.txt:208
# 2a383f015b5b487f962577a959f2aec8
msgid "To find the appropriate prefix to use, Django will check if the :setting:`STATIC_URL` setting is not ``None`` and automatically fall back to using :setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was ``None``::"
msgstr ""

#: ../../topics/forms/media.txt:227
# 912e2b2bae8241c3bb3ca8ef16d264fe
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

#: ../../topics/forms/media.txt:237
# e1e639605da04678b43443edb16fbaab
msgid "Media objects"
msgstr ""

#: ../../topics/forms/media.txt:239
# 349dd4a0fe7f46dfb2e63922d138ed72
msgid "When you interrogate the media attribute of a widget or form, the value that is returned is a ``forms.Media`` object. As we have already seen, the string representation of a Media object is the HTML required to include media in the ``<head>`` block of your HTML page."
msgstr ""

#: ../../topics/forms/media.txt:244
# c50c3031d4be4e36bc965b7eeccee45b
msgid "However, Media objects have some other interesting properties."
msgstr ""

#: ../../topics/forms/media.txt:247
# 35197442c91c4ec39eb3b4826904c1de
msgid "Media subsets"
msgstr ""

#: ../../topics/forms/media.txt:249
# 6c461a1e571745918cf5eaf38feef003
msgid "If you only want media of a particular type, you can use the subscript operator to filter out a medium of interest. For example::"
msgstr ""

#: ../../topics/forms/media.txt:261
# c1fee969a6e9448e9ead183b1911844e
msgid "When you use the subscript operator, the value that is returned is a new Media object -- but one that only contains the media of interest."
msgstr ""

#: ../../topics/forms/media.txt:265
# 7c3a4bac616842ceaf25661850d0501e
msgid "Combining media objects"
msgstr ""

#: ../../topics/forms/media.txt:267
# 0cf27c07186141a4aaf780feadd4d450
msgid "Media objects can also be added together. When two media objects are added, the resulting Media object contains the union of the media from both files::"
msgstr ""

#: ../../topics/forms/media.txt:290
# 76ec104124834ac09908a47272e9fda1
msgid "Media on Forms"
msgstr ""

#: ../../topics/forms/media.txt:292
# 4f56b95f7f02409380af5a842fc3f988
msgid "Widgets aren't the only objects that can have media definitions -- forms can also define media. The rules for media definitions on forms are the same as the rules for widgets: declarations can be static or dynamic; path and inheritance rules for those declarations are exactly the same."
msgstr ""

#: ../../topics/forms/media.txt:297
# 8cdb6d96b04b4425b5de122f075b9228
msgid "Regardless of whether you define a media declaration, *all* Form objects have a media property. The default value for this property is the result of adding the media definitions for all widgets that are part of the form::"
msgstr ""

#: ../../topics/forms/media.txt:312
# ee3e65fb16724b80a76f8956b72447b1
msgid "If you want to associate additional media with a form -- for example, CSS for form layout -- simply add a media declaration to the form::"
msgstr ""

#: ../../topics/forms/modelforms.txt:3
# 84cdaded6b6644c788f6d0d62b03ed8d
msgid "Creating forms from models"
msgstr ""

#: ../../topics/forms/modelforms.txt:11
# e89798d0659f4ea9b4b0de59121f2eb9
msgid "``ModelForm``"
msgstr ""

#: ../../topics/forms/modelforms.txt:14
# fbc4cbb1dc2c4db3bd202283396d1988
msgid "If you're building a database-driven app, chances are you'll have forms that map closely to Django models. For instance, you might have a ``BlogComment`` model, and you want to create a form that lets people submit comments. In this case, it would be redundant to define the field types in your form, because you've already defined the fields in your model."
msgstr ""

#: ../../topics/forms/modelforms.txt:20
# ca90e8e713b84c978f2ca9a5b5796626
msgid "For this reason, Django provides a helper class that let you create a ``Form`` class from a Django model."
msgstr ""

#: ../../topics/forms/modelforms.txt:42
# 3d60edd7eb064c99a63335218624aaf3
msgid "The generated ``Form`` class will have a form field for every model field. Each model field has a corresponding default form field. For example, a ``CharField`` on a model is represented as a ``CharField`` on a form. A model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here is the full list of conversions:"
msgstr ""

#: ../../topics/forms/modelforms.txt:49
# 199a2a0100cc412e98ba444689462883
msgid "Model field"
msgstr ""

#: ../../topics/forms/modelforms.txt:49
# 5fbc58e460f14169983165c556f87148
msgid "Form field"
msgstr ""

#: ../../topics/forms/modelforms.txt:51
# 3f3f27bb76f64f3abd89ab37f655c12e
msgid "``AutoField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:51
# 7e81dc12df934082b3977fb3180494ff
msgid "Not represented in the form"
msgstr ""

#: ../../topics/forms/modelforms.txt:53
# 99c081fefcba4e6da772528bc6cf7df1
msgid "``BigIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:53
# 404b092cb03f4ba29ffcae0f24cc5eca
msgid "``IntegerField`` with ``min_value`` set to -9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""

#: ../../topics/forms/modelforms.txt:57
#: ../../topics/forms/modelforms.txt:57
# 7b5ee847c04b4e789aae28f90496b208
# 65847070047042cba3bd65a716d68a56
msgid "``BooleanField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:59
#: ../../topics/forms/modelforms.txt:62
#: ../../topics/forms/modelforms.txt:74
#: ../../topics/forms/modelforms.txt:91
# de888c12103649a096008011fd3e4411
# 99b9d347e0d04ec28eff5ef1e8e0ad9b
# 8c4c7e83919d469a923cf0aa1308419f
# c8cec3a30e3646f495f6ec7febbcf9a0
msgid "``CharField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:59
# f8ad89f6b5bb4e489a5df3697d69970f
msgid "``CharField`` with ``max_length`` set to the model field's ``max_length``"
msgstr ""

#: ../../topics/forms/modelforms.txt:62
# c0fec8bd3f7645cd879652e747aea4de
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:64
#: ../../topics/forms/modelforms.txt:64
# 780846d2d394486bb41c253493c6dc5f
# 362d65fee7404884912ed93714cd97c2
msgid "``DateField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:66
#: ../../topics/forms/modelforms.txt:66
# b2d544dde0c94454bc08487fab72e243
# f187eb12ac9044a08fa0b92283efe3a4
msgid "``DateTimeField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:68
#: ../../topics/forms/modelforms.txt:68
# 435ab589f7394cb481a3c75908dbcecd
# 449b8ef41ccb4c53b1d9d0b0e30a12af
msgid "``DecimalField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:70
#: ../../topics/forms/modelforms.txt:70
# 96a07638b00f4dd38eb0b022649da938
# d44f7729bde849a5bcbd67c43415b2c7
msgid "``EmailField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:72
#: ../../topics/forms/modelforms.txt:72
# 9a12b3243158409e8f8de406da66b4f7
# 6088a43e6e4d4cd6bc9bc7b1b5b6637a
msgid "``FileField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:74
# ac91e06e0c5d4776ab98ad658dca5dd8
msgid "``FilePathField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:76
#: ../../topics/forms/modelforms.txt:76
# 63224a27726e4c12bbe588ab00cd2cb2
# 88c6888cb4d64c2eaba7447ad895e8b3
msgid "``FloatField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:78
# 6c11f7c05e5a4dd39106e29890d50eed
msgid "``ForeignKey``"
msgstr ""

#: ../../topics/forms/modelforms.txt:78
# 4104f44b7b5e497c8c98cf1c482d265c
msgid "``ModelChoiceField`` (see below)"
msgstr ""

#: ../../topics/forms/modelforms.txt:80
#: ../../topics/forms/modelforms.txt:80
# 492e753ba67f421c9ba2093ce882a43e
# 011bcdacc3e243fd83458d49990aef4e
msgid "``ImageField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:82
#: ../../topics/forms/modelforms.txt:82
#: ../../topics/forms/modelforms.txt:93
#: ../../topics/forms/modelforms.txt:95
#: ../../topics/forms/modelforms.txt:99
# 68399abd24844fe184cf52c80d93acf1
# c30507d5c21040c8ba462f35b80174b9
# 964dc8a7d7ef4549baaf708bf65d0936
# 0cf18e6ef40c40368357e10a1e4b55e8
# 2efd647341a44483b2b04e7694c774ec
msgid "``IntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:84
#: ../../topics/forms/modelforms.txt:84
# a199fb0e7cec45588dcde02c01063b79
# a60576e5abc648e9990400d58493f699
msgid "``IPAddressField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:86
#: ../../topics/forms/modelforms.txt:86
# 29a76cb3b0eb4ced88bd6cd1fc89c89d
# 2dfd889cb9d441a88d77c113747f5b11
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:88
# fbef9b0ca49d41718c2cf401e3fb020a
msgid "``ManyToManyField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:88
# 44222c0d7c214243b6770569910feac4
msgid "``ModelMultipleChoiceField`` (see below)"
msgstr ""

#: ../../topics/forms/modelforms.txt:91
# d2935ee2c11c48d19a436368722ddf9c
msgid "``NullBooleanField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:93
# ffe434c27a004a17a8cb75b032d7884f
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:95
# 0da26c8b000448a99fdc0e475d7914f3
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:97
#: ../../topics/forms/modelforms.txt:97
# 71fcc9493c2d494bb08dd40e1bd01b51
# 0234d0e8234c42f8b3c2e3b7a0cba6f3
msgid "``SlugField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:99
# f8671789787d4f23965c53102b397384
msgid "``SmallIntegerField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:101
# 3be220b83620462484f88213d3896996
msgid "``TextField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:101
# 885b540f0f34437d83b6e3957b68ae28
msgid "``CharField`` with ``widget=forms.Textarea``"
msgstr ""

#: ../../topics/forms/modelforms.txt:104
#: ../../topics/forms/modelforms.txt:104
# 0f4b8e1ae1ee4ea18b416d922f94f21e
# b503cdd9ed3a42d2bf27372c359cbe3d
msgid "``TimeField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:106
#: ../../topics/forms/modelforms.txt:106
# 115328760e874302b1018742a50b635c
# 0ba3351b94344e77a84e7f9e43703549
msgid "``URLField``"
msgstr ""

#: ../../topics/forms/modelforms.txt:110
# c5be8aa75c5146d185d8226e8a34f594
msgid "As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field types are special cases:"
msgstr ""

#: ../../topics/forms/modelforms.txt:113
# 230f68c4bd32444f8ce33ec464b72653
msgid "``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

#: ../../topics/forms/modelforms.txt:116
# b769b700c8634fa4bd7bf5691c3f6734
msgid "``ManyToManyField`` is represented by ``django.forms.ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

#: ../../topics/forms/modelforms.txt:120
# a0b530646cde47efa43e369bc9cd8fa4
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

#: ../../topics/forms/modelforms.txt:122
# 47a303b2789d4c6f801f92129e00a87a
msgid "If the model field has ``blank=True``, then ``required`` is set to ``False`` on the form field. Otherwise, ``required=True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:125
# f7a552d0ab104efbaa72f0e861dbfdfb
msgid "The form field's ``label`` is set to the ``verbose_name`` of the model field, with the first character capitalized."
msgstr ""

#: ../../topics/forms/modelforms.txt:128
# 52690fa1b32d418699972341f480ed35
msgid "The form field's ``help_text`` is set to the ``help_text`` of the model field."
msgstr ""

#: ../../topics/forms/modelforms.txt:131
# 9bcd62b82c524083b1cede606741429b
msgid "If the model field has ``choices`` set, then the form field's ``widget`` will be set to ``Select``, with choices coming from the model field's ``choices``. The choices will normally include the blank choice which is selected by default. If the field is required, this forces the user to make a selection. The blank choice will not be included if the model field has ``blank=False`` and an explicit ``default`` value (the ``default`` value will be initially selected instead)."
msgstr ""

#: ../../topics/forms/modelforms.txt:139
# 0e105ab2040248a6a534a4c5a9e33fd1
msgid "Finally, note that you can override the form field used for a given model field. See `Overriding the default field types or widgets`_ below."
msgstr ""

#: ../../topics/forms/modelforms.txt:145
# aa07692e9e45487e8648e853b269584f
msgid "Consider this set of models::"
msgstr ""

#: ../../topics/forms/modelforms.txt:176
# 45cfc779deed4a08898c82265b692049
msgid "With these models, the ``ModelForm`` subclasses above would be roughly equivalent to this (the only difference being the ``save()`` method, which we'll discuss in a moment.)::"
msgstr ""

#: ../../topics/forms/modelforms.txt:195
# 75ba343e85fb4e5db8582559bc93d850
msgid "The ``is_valid()`` method and ``errors``"
msgstr ""

#: ../../topics/forms/modelforms.txt:197
# 300fe2e9bfe240c5a4e0ee6b7934b15d
msgid "The first time you call ``is_valid()`` or access the ``errors`` attribute of a ``ModelForm`` triggers :ref:`form validation <form-and-field-validation>` as well as :ref:`model validation <validating-objects>`. This has the side-effect of cleaning the model you pass to the ``ModelForm`` constructor. For instance, calling ``is_valid()`` on your form will convert any date fields on your model to actual date objects. If form validation fails, only some of the updates may be applied. For this reason, you'll probably want to avoid reusing the model instance passed to the form, especially if validation fails."
msgstr ""

#: ../../topics/forms/modelforms.txt:208
# 2f3421678d2349b3bc7092bc2f9dd4d7
msgid "The ``save()`` method"
msgstr ""

#: ../../topics/forms/modelforms.txt:210
# 336855e6767c4ec3997305e3fe64a737
msgid "Every form produced by ``ModelForm`` also has a ``save()`` method. This method creates and saves a database object from the data bound to the form. A subclass of ``ModelForm`` can accept an existing model instance as the keyword argument ``instance``; if this is supplied, ``save()`` will update that instance. If it's not supplied, ``save()`` will create a new instance of the specified model:"
msgstr ""

#: ../../topics/forms/modelforms.txt:236
# cf45cc581b99404bb17839193c0c7e01
msgid "Note that if the form :ref:`hasn't been validated <modelform-is-valid-and-errors>`, calling ``save()`` will do so by checking ``form.errors``. A ``ValueError`` will be raised if the data in the form doesn't validate -- i.e., if ``form.errors`` evaluates to ``True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:241
# 897924fe229f4b46bb5c03a54c5ebd61
msgid "This ``save()`` method accepts an optional ``commit`` keyword argument, which accepts either ``True`` or ``False``. If you call ``save()`` with ``commit=False``, then it will return an object that hasn't yet been saved to the database. In this case, it's up to you to call ``save()`` on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized :ref:`model saving options <ref-models-force-insert>`. ``commit`` is ``True`` by default."
msgstr ""

#: ../../topics/forms/modelforms.txt:250
# 0a3eff945da64a12a092687acca7bd02
msgid "Another side effect of using ``commit=False`` is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify ``commit=False`` when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn't possible to save many-to-many data for an instance until the instance exists in the database."
msgstr ""

#: ../../topics/forms/modelforms.txt:257
# 727a9cb1635c4f4aa77144b864440b02
msgid "To work around this problem, every time you save a form using ``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` subclass. After you've manually saved the instance produced by the form, you can invoke ``save_m2m()`` to save the many-to-many form data. For example::"
msgstr ""

#: ../../topics/forms/modelforms.txt:277
# 2dd2e7b5532b46e68da028312fb5c80c
msgid "Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. When you use a simple ``save()`` on a form, all data -- including many-to-many data -- is saved without the need for any additional method calls. For example::"
msgstr ""

#: ../../topics/forms/modelforms.txt:289
# 838fdaa05b8846cf9e56df963073df46
msgid "Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works exactly the same way as any other ``forms`` form. For example, the ``is_valid()`` method is used to check for validity, the ``is_multipart()`` method is used to determine whether a form requires multipart file upload (and hence whether ``request.FILES`` must be passed to the form), etc. See :ref:`binding-uploaded-files` for more information."
msgstr ""

#: ../../topics/forms/modelforms.txt:297
# 7c409595c9f547218148bb4f58b5c965
msgid "Using a subset of fields on the form"
msgstr ""

#: ../../topics/forms/modelforms.txt:299
# fbda833277fb4bae89624d389cbedff2
msgid "In some cases, you may not want all the model fields to appear on the generated form. There are three ways of telling ``ModelForm`` to use only a subset of the model fields:"
msgstr ""

#: ../../topics/forms/modelforms.txt:303
# ca9814966ea44116aa3dd39e0ac80185
msgid "Set ``editable=False`` on the model field. As a result, *any* form created from the model via ``ModelForm`` will not include that field."
msgstr ""

#: ../../topics/forms/modelforms.txt:307
# 2a3e77bef6524ba2bcc59090c0dd5232
msgid "Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` class.  This attribute, if given, should be a list of field names to include in the form. The order in which the fields names are specified in that list is respected when the form renders them."
msgstr ""

#: ../../topics/forms/modelforms.txt:312
# d9a23b2b886c41dc90132f0fe181f685
msgid "Use the ``exclude`` attribute of the ``ModelForm``'s inner ``Meta`` class.  This attribute, if given, should be a list of field names to exclude from the form."
msgstr ""

#: ../../topics/forms/modelforms.txt:316
# d22a0aa4c3e1494a8e9afab69e1bb4d9
msgid "For example, if you want a form for the ``Author`` model (defined above) that includes only the ``name`` and ``birth_date`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:330
# a6f22f4d473b4cf2a50a4fa59d9d2b0d
msgid "Since the Author model has only 3 fields, 'name', 'title', and 'birth_date', the forms above will contain exactly the same fields."
msgstr ""

#: ../../topics/forms/modelforms.txt:335
# bc4d4e4f65ff4e9a97d86e0466ee697a
msgid "If you specify ``fields`` or ``exclude`` when creating a form with ``ModelForm``, then the fields that are not in the resulting form will not be set by the form's ``save()`` method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:341
# 57863f44f169469ea8dcc20c43e37dd8
msgid "Django will prevent any attempt to save an incomplete model, so if the model does not allow the missing fields to be empty, and does not provide a default value for the missing fields, any attempt to ``save()`` a ``ModelForm`` with missing fields will fail.  To avoid this failure, you must instantiate your model with initial values for the missing, but required fields::"
msgstr ""

#: ../../topics/forms/modelforms.txt:352
# 8e00f704de254c1c8e61448a5a1ff631
msgid "Alternatively, you can use ``save(commit=False)`` and manually set any extra required fields::"
msgstr ""

#: ../../topics/forms/modelforms.txt:360
# 06889a3054564e73bc56b02bd97e72e4
msgid "See the `section on saving forms`_ for more details on using ``save(commit=False)``."
msgstr ""

#: ../../topics/forms/modelforms.txt:366
# 07b0abe15fcb4d8789588b1230cc6750
msgid "Overriding the default field types or widgets"
msgstr ""

#: ../../topics/forms/modelforms.txt:368
# 98b871627cc44b9fa490a11c2428bfe3
msgid "The default field types, as described in the `Field types`_ table above, are sensible defaults. If you have a ``DateField`` in your model, chances are you'd want that to be represented as a ``DateField`` in your form. But ``ModelForm`` gives you the flexibility of changing the form field type and widget for a given model field."
msgstr ""

#: ../../topics/forms/modelforms.txt:374
# f3f680274741488e96ca9cc31d4e434d
msgid "To specify a custom widget for a field, use the ``widgets`` attribute of the inner ``Meta`` class. This should be a dictionary mapping field names to widget classes or instances."
msgstr ""

#: ../../topics/forms/modelforms.txt:378
# 4a8d5e5fdd8947d9924245d753509160
msgid "For example, if you want the a ``CharField`` for the ``name`` attribute of ``Author`` to be represented by a ``<textarea>`` instead of its default ``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

#: ../../topics/forms/modelforms.txt:393
# 682b6fc1fb6145849f9b0459f8f26fc7
msgid "The ``widgets`` dictionary accepts either widget instances (e.g., ``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

#: ../../topics/forms/modelforms.txt:396
# 06088e08f1794358a80ac5b62e4197f7
msgid "If you want to further customize a field -- including its type, label, etc. -- you can do this by declaratively specifying fields like you would in a regular ``Form``. Declared fields will override the default ones generated by using the ``model`` attribute."
msgstr ""

#: ../../topics/forms/modelforms.txt:401
# 3cc1f479ce8f4e379c1c38abc68f778d
msgid "For example, if you wanted to use ``MyDateFormField`` for the ``pub_date`` field, you could do the following::"
msgstr ""

#: ../../topics/forms/modelforms.txt:410
# ebef8b1a90524976920566fbe7b34ba8
msgid "If you want to override a field's default label, then specify the ``label`` parameter when declaring the form field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:421
# 321e4ab3491a44a988dfcd425878b268
msgid "If you explicitly instantiate a form field like this, Django assumes that you want to completely define its behavior; therefore, default attributes (such as ``max_length`` or ``required``) are not drawn from the corresponding model. If you want to maintain the behavior specified in the model, you must set the relevant arguments explicitly when declaring the form field."
msgstr ""

#: ../../topics/forms/modelforms.txt:427
# c768cab617584156b0e5f014a1081d3e
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:434
# 3d926812054547528f91e0662e38a1db
msgid "and you want to do some custom validation for ``headline``, while keeping the ``blank`` and ``help_text`` values as specified, you might define ``ArticleForm`` like this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:445
# 0503f9d9a883463fa2ce0317cddac318
msgid "You must ensure that the type of the form field can be used to set the contents of the corresponding model field. When they are not compatible, you will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""

#: ../../topics/forms/modelforms.txt:449
# d6708f936ed24c4c971616991bf80dec
msgid "See the :doc:`form field documentation </ref/forms/fields>` for more information on fields and their arguments."
msgstr ""

#: ../../topics/forms/modelforms.txt:453
# 99d055a7f42e44349ebe428d2064dc11
msgid "Changing the order of fields"
msgstr ""

#: ../../topics/forms/modelforms.txt:455
# b8e6015042254dc18ad07348e4bcfcc7
msgid "By default, a ``ModelForm`` will render fields in the same order that they are defined on the model, with ``ManyToManyField`` instances appearing last. If you want to change the order in which fields are rendered, you can use the ``fields`` attribute on the ``Meta`` class."
msgstr ""

#: ../../topics/forms/modelforms.txt:460
# 46480955f1c846fa9656a69fa1b0ba9b
msgid "The ``fields`` attribute defines the subset of model fields that will be rendered, and the order in which they will be rendered. For example given this model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:468
# 6af9f37f13a34aae84537d98e5cb95db
msgid "the ``author`` field would be rendered first. If we wanted the title field to be rendered first, we could specify the following ``ModelForm``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:479
# a8b929f54480447c87e44296265ff1be
msgid "Overriding the clean() method"
msgstr ""

#: ../../topics/forms/modelforms.txt:481
# c9cc8a59679d45378e1af394fd385e0a
msgid "You can override the ``clean()`` method on a model form to provide additional validation in the same way you can on a normal form."
msgstr ""

#: ../../topics/forms/modelforms.txt:484
# c704347395c043aa93d5c9a7331c338b
msgid "In this regard, model forms have two specific characteristics when compared to forms:"
msgstr ""

#: ../../topics/forms/modelforms.txt:487
# 0a68e90844154f2c8a5601a29e04a6aa
msgid "By default the ``clean()`` method validates the uniqueness of fields that are marked as ``unique``, ``unique_together`` or ``unique_for_date|month|year`` on the model.  Therefore, if you would like to override the ``clean()`` method and maintain the default validation, you must call the parent class's ``clean()`` method."
msgstr ""

#: ../../topics/forms/modelforms.txt:493
# 31ce300811db47c88a0832b44608f9e3
msgid "Also, a model form instance bound to a model object will contain a ``self.instance`` attribute that gives model form methods access to that specific model instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:498
# bcaa1f1b1fc94796834f9700507ec655
msgid "Form inheritance"
msgstr ""

#: ../../topics/forms/modelforms.txt:500
# 9727362d115945e38c54d5d104ddbe01
msgid "As with basic forms, you can extend and reuse ``ModelForms`` by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous ``ArticleForm`` class::"
msgstr ""

#: ../../topics/forms/modelforms.txt:509
# ce66981292494e11bca32c8f28fb69b4
msgid "This creates a form that behaves identically to ``ArticleForm``, except there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

#: ../../topics/forms/modelforms.txt:512
# 101f3e1f105d4fcf92ffd4f4233e69e4
msgid "You can also subclass the parent's ``Meta`` inner class if you want to change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

#: ../../topics/forms/modelforms.txt:519
# 73a64a74e04040409d4b8ee1389af765
msgid "This adds the extra method from the ``EnhancedArticleForm`` and modifies the original ``ArticleForm.Meta`` to remove one field."
msgstr ""

#: ../../topics/forms/modelforms.txt:522
# aac933af7fcc4ee384f42fbbc232ca49
msgid "There are a couple of things to note, however."
msgstr ""

#: ../../topics/forms/modelforms.txt:524
# f66bd85676904a20b804564c9a3412ce
msgid "Normal Python name resolution rules apply. If you have multiple base classes that declare a ``Meta`` inner class, only the first one will be used. This means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the first parent, etc."
msgstr ""

#: ../../topics/forms/modelforms.txt:529
# 59db174cb80748299e11aae0aa88046b
msgid "For technical reasons, a subclass cannot inherit from both a ``ModelForm`` and a ``Form`` simultaneously."
msgstr ""

#: ../../topics/forms/modelforms.txt:532
# f60a85a641304e5999d952300f601924
msgid "Chances are these notes won't affect you unless you're trying to do something tricky with subclassing."
msgstr ""

#: ../../topics/forms/modelforms.txt:536
# 253858599fdf4575b65cd0324be87f8d
msgid "Interaction with model validation"
msgstr ""

#: ../../topics/forms/modelforms.txt:538
# 47efaf08a21649e687908659fc356836
msgid "As part of its validation process, ``ModelForm`` will call the ``clean()`` method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the :doc:`form validation </ref/forms/validation>` documentation for more on how field cleaning and validation work. Also, your model's ``clean()`` method will be called before any uniqueness checks are made. See :ref:`Validating objects <validating-objects>` for more information on the model's ``clean()`` hook."
msgstr ""

#: ../../topics/forms/modelforms.txt:550
# bdd90f442d044cc2a3990156b297ecc4
msgid "Model formsets"
msgstr ""

#: ../../topics/forms/modelforms.txt:552
# fe3d1564c00f494da1e0385000de10c0
msgid "Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a couple of enhanced formset classes that make it easy to work with Django models. Let's reuse the ``Author`` model from above::"
msgstr ""

#: ../../topics/forms/modelforms.txt:559
# 4af215918c54470b8367e999190d0e94
msgid "This will create a formset that is capable of working with the data associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

#: ../../topics/forms/modelforms.txt:575
# f77354bf3c9643b2b0d491e90817e831
msgid "``modelformset_factory`` uses ``formset_factory`` to generate formsets. This means that a model formset is just an extension of a basic formset that knows how to interact with a particular model."
msgstr ""

#: ../../topics/forms/modelforms.txt:580
# 711794ae1c0841519fd1883e6a1dd1ee
msgid "Changing the queryset"
msgstr ""

#: ../../topics/forms/modelforms.txt:582
# 752034827323444fa6a5e0d1b9f89cef
msgid "By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., ``Author.objects.all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

#: ../../topics/forms/modelforms.txt:589
# 1d961578bcdf42808c8183891128024b
msgid "Alternatively, you can create a subclass that sets ``self.queryset`` in ``__init__``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:599
# e2ff0ab72be04ba1958524668e1a3252
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

#: ../../topics/forms/modelforms.txt:603
# 61bc7448210144ddb7fa393aa5f63cf8
msgid "If you want to return a formset that doesn't include *any* pre-existing instances of the model, you can specify an empty QuerySet::"
msgstr ""

#: ../../topics/forms/modelforms.txt:610
# 8da63514e7a040278bdbd77dd72af7b2
msgid "Controlling which fields are used with ``fields`` and ``exclude``"
msgstr ""

#: ../../topics/forms/modelforms.txt:612
# d76375f1737d407a85a8413cf776f5e9
msgid "By default, a model formset uses all fields in the model that are not marked with ``editable=False``. However, this can be overridden at the formset level::"
msgstr ""

#: ../../topics/forms/modelforms.txt:617
# 23e761bfb8e64d32ab15942269b994bd
msgid "Using ``fields`` restricts the formset to use only the given fields. Alternatively, you can take an \"opt-out\" approach, specifying which fields to exclude::"
msgstr ""

#: ../../topics/forms/modelforms.txt:624
# 8dc44c0ca7ca4589a0b2d240cd2abce1
msgid "Providing initial values"
msgstr ""

#: ../../topics/forms/modelforms.txt:628
# 458d97f2d1174747b829ef5b13f8fd88
msgid "As with regular formsets, it's possible to :ref:`specify initial data <formsets-initial-data>` for forms in the formset by specifying an ``initial`` parameter when instantiating the model formset class returned by ``modelformset_factory``. However, with model formsets, the initial values only apply to extra forms, those that aren't bound to an existing object instance."
msgstr ""

#: ../../topics/forms/modelforms.txt:637
# ba31601413a94dc6b9686497fc4380bc
msgid "Saving objects in the formset"
msgstr ""

#: ../../topics/forms/modelforms.txt:639
# ce24aca4b7b241a9b58a51bea737eeef
msgid "As with a ``ModelForm``, you can save the data as a model object. This is done with the formset's ``save()`` method::"
msgstr ""

#: ../../topics/forms/modelforms.txt:648
# eb7640916da345408f3a91388ab0bf07
msgid "The ``save()`` method returns the instances that have been saved to the database. If a given instance's data didn't change in the bound data, the instance won't be saved to the database and won't be included in the return value (``instances``, in the above example)."
msgstr ""

#: ../../topics/forms/modelforms.txt:653
# 05b27d7e839d4c6a80e52e8d427bcacb
msgid "When fields are missing from the form (for example because they have been excluded), these fields will not be set by the ``save()`` method. You can find more information about this restriction, which also holds for regular ``ModelForms``, in `Using a subset of fields on the form`_."
msgstr ""

#: ../../topics/forms/modelforms.txt:659
# 6b7991cd97b84b39bb955fbf1e14546d
msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""

#: ../../topics/forms/modelforms.txt:667
# e7874a006efd474199c6ada5ff5ed793
msgid "This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a ``ManyToManyField``, you'll also need to call ``formset.save_m2m()`` to ensure the many-to-many relationships are saved properly."
msgstr ""

#: ../../topics/forms/modelforms.txt:675
# 2d80d66ea9af4b3a9a3c16d68e0ac937
msgid "Limiting the number of editable objects"
msgstr ""

#: ../../topics/forms/modelforms.txt:677
# 9eee0f08d11d4da89c427c008938d5de
msgid "As with regular formsets, you can use the ``max_num`` and ``extra`` parameters to ``modelformset_factory`` to limit the number of extra forms displayed."
msgstr ""

#: ../../topics/forms/modelforms.txt:680
# 7621a98863f846e593b9794b5189c058
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

#: ../../topics/forms/modelforms.txt:690
# 06652b32a9c44de2b4036915ace65c12
msgid "If the value of ``max_num`` is greater than the number of existing related objects, up to ``extra`` additional blank forms will be added to the formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:707
# b79a5f106cd541c5926a367601966f4f
msgid "Using a model formset in a view"
msgstr ""

#: ../../topics/forms/modelforms.txt:709
# 2727cb76573a45b898a170ad4fc5c549
msgid "Model formsets are very similar to formsets. Let's say we want to present a formset to edit ``Author`` model instances::"
msgstr ""

#: ../../topics/forms/modelforms.txt:725
# fd154e6132384eac8fa3129af7c05af9
msgid "As you can see, the view logic of a model formset isn't drastically different than that of a \"normal\" formset. The only difference is that we call ``formset.save()`` to save the data into the database. (This was described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

#: ../../topics/forms/modelforms.txt:731
# de6e79faeeb24ff29a4992a2c1c80f5e
msgid "Overiding ``clean()`` on a ``model_formset``"
msgstr ""

#: ../../topics/forms/modelforms.txt:733
# 4c6ab0cc1e3547f5b5f1c99ed80eef3a
msgid "Just like with ``ModelForms``, by default the ``clean()`` method of a ``model_formset`` will validate that none of the items in the formset violate the unique constraints on your model (either ``unique``, ``unique_together`` or ``unique_for_date|month|year``).  If you want to override the ``clean()`` method on a ``model_formset`` and maintain this validation, you must call the parent class's ``clean`` method::"
msgstr ""

#: ../../topics/forms/modelforms.txt:748
# 9e74cce1b96f49e6bd1c2afe1d0e51f6
msgid "Using a custom queryset"
msgstr ""

#: ../../topics/forms/modelforms.txt:750
# 61efff9eafbd4280b2eca707d9b573d4
msgid "As stated earlier, you can override the default queryset used by the model formset::"
msgstr ""

#: ../../topics/forms/modelforms.txt:767
# 4c90a370bb034fc9b23f559e9c884c69
msgid "Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` cases in this example."
msgstr ""

#: ../../topics/forms/modelforms.txt:771
# 30eb6a37f8ea45b098bb4bd3075905b7
msgid "Using the formset in the template"
msgstr ""

#: ../../topics/forms/modelforms.txt:775
# 7c1918130270402c8c43c0f7615b2690
msgid "There are three ways to render a formset in a Django template."
msgstr ""

#: ../../topics/forms/modelforms.txt:777
# 04c64e1ca62546a98fe5706190cf574c
msgid "First, you can let the formset do most of the work::"
msgstr ""

#: ../../topics/forms/modelforms.txt:783
# 2e7bd2004cfa49cf95d1a48baf6e3299
msgid "Second, you can manually render the formset, but let the form deal with itself::"
msgstr ""

#: ../../topics/forms/modelforms.txt:793
# a2e2be311b9b4ba58981a46db5a6f363
msgid "When you manually render the forms yourself, be sure to render the management form as shown above. See the :ref:`management form documentation <understanding-the-managementform>`."
msgstr ""

#: ../../topics/forms/modelforms.txt:797
# 195e52ae57d546bab49460f52576a6db
msgid "Third, you can manually render each field::"
msgstr ""

#: ../../topics/forms/modelforms.txt:808
# fe590e3c2b734a628c9bf0f075009ba8
msgid "If you opt to use this third method and you don't iterate over the fields with a ``{% for %}`` loop, you'll need to render the primary key field. For example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:823
# ab13483bd6734ac5b0c50e69cbc3e2a7
msgid "Notice how we need to explicitly render ``{{ form.id }}``. This ensures that the model formset, in the ``POST`` case, will work correctly. (This example assumes a primary key named ``id``. If you've explicitly defined your own primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

#: ../../topics/forms/modelforms.txt:831
# 0f44b67258b7436b8fb5878ca456c541
msgid "Inline formsets"
msgstr ""

#: ../../topics/forms/modelforms.txt:833
# 50825125cbe74a35b8d342dea9257616
msgid "Inline formsets is a small abstraction layer on top of model formsets. These simplify the case of working with related objects via a foreign key. Suppose you have these two models::"
msgstr ""

#: ../../topics/forms/modelforms.txt:844
# b0565a733efe47f6adc297ef858f24df
msgid "If you want to create a formset that allows you to edit books belonging to a particular author, you could do this::"
msgstr ""

#: ../../topics/forms/modelforms.txt:853
# fa8d5f8307c644c98b3cbd4b6f509746
msgid "``inlineformset_factory`` uses ``modelformset_factory`` and marks ``can_delete=True``."
msgstr ""

#: ../../topics/forms/modelforms.txt:858
# f91db902ecd74957baf4e1703da860b2
msgid ":ref:`Manually rendered can_delete and can_order <manually-rendered-can-delete-and-can-order>`."
msgstr ""

#: ../../topics/forms/modelforms.txt:861
# 8b2b45e4528b4c668980c413d81861ff
msgid "More than one foreign key to the same model"
msgstr ""

#: ../../topics/forms/modelforms.txt:863
# 7a8441ce79094e3c831597441d0a76e5
msgid "If your model contains more than one foreign key to the same model, you'll need to resolve the ambiguity manually using ``fk_name``. For example, consider the following model::"
msgstr ""

#: ../../topics/forms/modelforms.txt:872
# 9138eae15c214e5cab17ecc5b8b4572e
msgid "To resolve this, you can use ``fk_name`` to ``inlineformset_factory``::"
msgstr ""

#: ../../topics/forms/modelforms.txt:877
# f4c35ea68b0644d5bdf009b4d7c183cb
msgid "Using an inline formset in a view"
msgstr ""

#: ../../topics/forms/modelforms.txt:879
# 71303716ffb14d50869cce1c5d8a0219
msgid "You may want to provide a view that allows a user to edit the related objects of a model. Here's how you can do that::"
msgstr ""

#: ../../topics/forms/modelforms.txt:897
# 634d27dea83b40a4910010c229543610
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

#: ../../topics/generic-views.txt:3
#: ../../topics/http/generic-views.txt:3
# 6967ec32f3b549c1a3e9fbf4ba3fc751
# 2f84af1c731f4a7d87f3189bdfffed31
msgid "Generic views"
msgstr ""

#: ../../topics/generic-views.txt:10
# 3c415ca2524b47de95a310036e665e6c
msgid "From Django 1.3, function-based generic views have been deprecated in favor of a class-based approach, described in the class-based views :doc:`topic guide </topics/class-based-views>` and :doc:`detailed reference </ref/class-based-views>`."
msgstr ""

#: ../../topics/generic-views.txt:34
# fb911a2ac17846eeae9f36936a1ab1e5
msgid "Display list and detail pages for a single object. If we were creating an application to manage conferences then a ``talk_list`` view and a ``registered_user_list`` view would be examples of list views. A single talk page is an example of what we call a \"detail\" view."
msgstr ""

#: ../../topics/generic-views.txt:39
# 412e7859a2b0443a896dbb47026221a3
msgid "Present date-based objects in year/month/day archive pages, associated detail, and \"latest\" pages. The Django Weblog's (https://www.djangoproject.com/weblog/) year, month, and day archives are built with these, as would be a typical newspaper's archives."
msgstr ""

#: ../../topics/generic-views.txt:52
# f94846f082c94a54bbd66122804cf7ab
msgid "Using generic views"
msgstr ""

#: ../../topics/generic-views.txt:54
# d8f80921858343c0ae6d526cc8610705
msgid "All of these views are used by creating configuration dictionaries in your URLconf files and passing those dictionaries as the third member of the URLconf tuple for a given pattern."
msgstr ""

#: ../../topics/generic-views.txt:58
# 90a7ef5783cd48b99f3bb88432e23363
msgid "For example, here's a simple URLconf you could use to present a static \"about\" page::"
msgstr ""

#: ../../topics/generic-views.txt:70
# f70e1070caf1434a9cf70876fb103e9d
msgid "Though this might seem a bit \"magical\" at first glance  -- look, a view with no code! --, actually the ``direct_to_template`` view simply grabs information from the extra-parameters dictionary and uses that information when rendering the view."
msgstr ""

#: ../../topics/generic-views.txt:75
# a6abadf64ef84906ba5863e6afed1e7c
msgid "Because this generic view -- and all the others -- is a regular view function like any other, we can reuse it inside our own views. As an example, let's extend our \"about\" example to map URLs of the form ``/about/<whatever>/`` to statically rendered ``about/<whatever>.html``. We'll do this by first modifying the URLconf to point to a view function:"
msgstr ""

#: ../../topics/generic-views.txt:94
# d65717fcbdff4d939361f1d32c91700f
msgid "Next, we'll write the ``about_pages`` view::"
msgstr ""

#: ../../topics/generic-views.txt:106
# 5226c14f2c4e419da2a85a6fbc3fdc5a
msgid "Here we're treating ``direct_to_template`` like any other function. Since it returns an ``HttpResponse``, we can simply return it as-is. The only slightly tricky business here is dealing with missing templates. We don't want a nonexistent template to cause a server error, so we catch ``TemplateDoesNotExist`` exceptions and return 404 errors instead."
msgstr ""

#: ../../topics/generic-views.txt:114
# 3d3e244e4dbc483780523134863c3635
msgid "Sharp-eyed readers may have noticed a possible security hole: we're constructing the template name using interpolated content from the browser (``template=\"about/%s.html\" % page``). At first glance, this looks like a classic *directory traversal* vulnerability. But is it really?"
msgstr ""

#: ../../topics/generic-views.txt:119
# ba3c3021fe6b42878663ff9c2b9bbb0c
msgid "Not exactly. Yes, a maliciously crafted value of ``page`` could cause directory traversal, but although ``page`` *is* taken from the request URL, not every value will be accepted. The key is in the URLconf: we're using the regular expression ``\\w+`` to match the ``page`` part of the URL, and ``\\w`` only accepts letters and numbers. Thus, any malicious characters (dots and slashes, here) will be rejected by the URL resolver before they reach the view itself."
msgstr ""

#: ../../topics/generic-views.txt:130
# 167ec2675de74105b3854e8768af8e61
msgid "The ``direct_to_template`` certainly is useful, but Django's generic views really shine when it comes to presenting views on your database content. Because it's such a common task, Django comes with a handful of built-in generic views that make generating list and detail views of objects incredibly easy."
msgstr ""

#: ../../topics/generic-views.txt:175
# 9e5cc818f01f4705a449fbc3ac7b5869
msgid "That's all the Python code we need to write. We still need to write a template, however. We could explicitly tell the ``object_list`` view which template to use by including a ``template_name`` key in the extra arguments dictionary, but in the absence of an explicit template Django will infer one from the object's name. In this case, the inferred template will be ``\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of the app that defines the model, while the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

#: ../../topics/generic-views.txt:201
# 3ba4dd85c04b434ea6bb5db88b04f783
msgid "That's really all there is to it. All the cool features of generic views come from changing the \"info\" dictionary passed to the generic view. The :doc:`generic views reference</ref/generic-views>` documents all the generic views and all their options in detail; the rest of this document will consider some of the common ways you might customize and extend generic views."
msgstr ""

#: ../../topics/generic-views.txt:218
# 65775d55e9ef469aa97a5d78fca166a7
msgid "Luckily, in nearly every one of these cases, there are ways to simply extend generic views to handle a larger array of use cases. These situations usually fall into a handful of patterns dealt with in the sections that follow."
msgstr ""

#: ../../topics/generic-views.txt:225
# aafcbcfb46854ee79e3b5d3586fe74f9
msgid "You might have noticed that our sample publisher list template stores all the books in a variable named ``object_list``. While this works just fine, it isn't all that \"friendly\" to template authors: they have to \"just know\" that they're dealing with publishers here. A better name for that variable would be ``publisher_list``; that variable's content is pretty obvious."
msgstr ""

#: ../../topics/generic-views.txt:231
# 379da8f9246541c1a3c7444aa0763035
msgid "We can change the name of that variable easily with the ``template_object_name`` argument:"
msgstr ""

#: ../../topics/generic-views.txt:245
# 09f42c9d0cf945efbe9b42e0c2160a52
msgid "Providing a useful ``template_object_name`` is always a good idea. Your coworkers who design templates will thank you."
msgstr ""

#: ../../topics/generic-views.txt:251
# 5e5de21aa8f24106a3755d35bc6bf0ff
msgid "Often you simply need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The ``object_detail`` generic view provides the publisher to the context, but it seems there's no way to get additional information in that template."
msgstr ""

#: ../../topics/generic-views.txt:257
# bc1f407569a14b90a21bee37941fd976
msgid "But there is: all generic views take an extra optional parameter, ``extra_context``. This is a dictionary of extra objects that will be added to the template's context. So, to provide the list of all books on the detail detail view, we'd use an info dict like this:"
msgstr ""

#: ../../topics/generic-views.txt:272
# 8175f1dc2d374fb1aa0564f73455d662
msgid "This would populate a ``{{ book_list }}`` variable in the template context. This pattern can be used to pass any information down into the template for the generic view. It's very handy."
msgstr ""

#: ../../topics/generic-views.txt:276
# 15259a5369d24946bab10bd82553a9c1
msgid "However, there's actually a subtle bug here -- can you spot it?"
msgstr ""

#: ../../topics/generic-views.txt:278
# 367180db666541d7b68927cdb0dc28d0
msgid "The problem has to do with when the queries in ``extra_context`` are evaluated. Because this example puts ``Book.objects.all()`` in the URLconf, it will be evaluated only once (when the URLconf is first loaded). Once you add or remove books, you'll notice that the generic view doesn't reflect those changes until you reload the Web server (see :ref:`caching-and-querysets` for more information about when QuerySets are cached and evaluated)."
msgstr ""

#: ../../topics/generic-views.txt:287
# 04b7babface74bc9be5c3289eeb12a2b
msgid "This problem doesn't apply to the ``queryset`` generic view argument. Since Django knows that particular QuerySet should *never* be cached, the generic view takes care of clearing the cache when each view is rendered."
msgstr ""

#: ../../topics/generic-views.txt:291
# cdd997351f384f6a91890e84337ab160
msgid "The solution is to use a callback in ``extra_context`` instead of a value. Any callable (i.e., a function) that's passed to ``extra_context`` will be evaluated when the view is rendered (instead of only once). You could do this with an explicitly defined function:"
msgstr ""

#: ../../topics/generic-views.txt:307
# 8a2d2d9c32cd47889471dc6c7509f15b
msgid "or you could use a less obvious but shorter version that relies on the fact that ``Book.objects.all`` is itself a callable:"
msgstr ""

#: ../../topics/generic-views.txt:318
# 51a590a0a0064f4abf2de1721930fe60
msgid "Notice the lack of parentheses after ``Book.objects.all``; this references the function without actually calling it (which the generic view will do later)."
msgstr ""

#: ../../topics/generic-views.txt:324
# 2e48b38be4c049be8fa776dba238512a
msgid "Now let's take a closer look at this ``queryset`` key we've been using all along. Most generic views take one of these ``queryset`` arguments -- it's how the view knows which set of objects to display (see :doc:`/topics/db/queries` for more information about ``QuerySet`` objects, and see the :doc:`generic views reference</ref/generic-views>` for the complete details)."
msgstr ""

#: ../../topics/generic-views.txt:330
# 42156ac764844f2fb5e58bfa14415bcb
msgid "To pick a simple example, we might want to order a list of books by publication date, with the most recent first:"
msgstr ""

#: ../../topics/generic-views.txt:345
# d68c09d74464441aa1e3414c88ebd4c4
msgid "That's a pretty simple example, but it illustrates the idea nicely. Of course, you'll usually want to do more than just reorder objects. If you want to present a list of books by a particular publisher, you can use the same technique:"
msgstr ""

#: ../../topics/generic-views.txt:373
# bf813731c1d840cc93198adfb5be9538
msgid "If you get a 404 when requesting ``/books/acme/``, check to ensure you actually have a Publisher with the name 'ACME Publishing'.  Generic views have an ``allow_empty`` parameter for this case.  See the :doc:`generic views reference</ref/generic-views>` for more details."
msgstr ""

#: ../../topics/generic-views.txt:379
# d2bec675285d42fda467222b02ada81c
msgid "Complex filtering with wrapper functions"
msgstr ""

#: ../../topics/generic-views.txt:381
# 72442e065cee4c9aa0049db9a807c8f5
msgid "Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher's name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher? We can \"wrap\" the ``object_list`` generic view to avoid writing a lot of code by hand. As usual, we'll start by writing a URLconf:"
msgstr ""

#: ../../topics/generic-views.txt:396
# a8e0cb365485433e979df5e86ca98b72
msgid "Next, we'll write the ``books_by_publisher`` view itself::"
msgstr ""

#: ../../topics/generic-views.txt:419
# b260950cd3cc40ffa9146bd66ad34ab9
msgid "This works because there's really nothing special about generic views -- they're just Python functions. Like any view function, generic views expect a certain set of arguments and return ``HttpResponse`` objects. Thus, it's incredibly easy to wrap a small function around a generic view that does additional work before (or after; see the next section) handing things off to the generic view."
msgstr ""

#: ../../topics/generic-views.txt:427
# a34230b3a16f473a9a88cc570fd177bb
msgid "Notice that in the preceding example we passed the current publisher being displayed in the ``extra_context``. This is usually a good idea in wrappers of this nature; it lets the template know which \"parent\" object is currently being browsed."
msgstr ""

#: ../../topics/generic-views.txt:451
# 9e0e2575bb3341578690a9884147b7ff
msgid "The generic ``object_detail`` view, of course, wouldn't know anything about this field, but once again we could easily write a custom view to keep that field updated."
msgstr ""

#: ../../topics/generic-views.txt:467
# 25eb6fee0d0942b7816478148c3c9edc
msgid "Then we'd write our wrapper function::"
msgstr ""

#: ../../topics/generic-views.txt:494
# 97b709850c81415cb57da4570170b7f7
msgid "We can use a similar idiom to alter the response returned by the generic view. If we wanted to provide a downloadable plain-text version of the list of authors, we could use a view like this::"
msgstr ""

#: ../../topics/generic-views.txt:508
# b35cae60c6554a179b47ca9d85c8674a
msgid "This works because the generic views return simple ``HttpResponse`` objects that can be treated like dictionaries to set HTTP headers. This ``Content-Disposition`` business, by the way, instructs the browser to download and save the page instead of displaying it in the browser."
msgstr ""

#: ../../topics/generic-views-migration.txt:3
# 88e0cef8c95142e3a8a43d6c236fe561
msgid "Migrating function-based generic views"
msgstr ""

#: ../../topics/generic-views-migration.txt:5
# 43b6c22c7bf34debb16e83003564e147
msgid "All the :doc:`function-based generic views</ref/generic-views>` that existed in Django 1.2 have analogs as :doc:`class-based generic views</ref/class-based-views>` in Django 1.3. The feature set exposed in those function-based views can be replicated in a class-based way."
msgstr ""

#: ../../topics/generic-views-migration.txt:12
# 55654ed97a174dfcac48921264e53cca
msgid "How to migrate"
msgstr ""

#: ../../topics/generic-views-migration.txt:15
# 2308b93a45994056b7d72e723f621d6c
msgid "Replace generic views with generic classes"
msgstr ""

#: ../../topics/generic-views-migration.txt:17
# 469fb45fa4b445daac239f8df3b7e453
msgid "Existing usage of function-based generic views should be replaced with their class-based analogs:"
msgstr ""

#: ../../topics/generic-views-migration.txt:21
# c696bf7369ec4f6f8b66af270ab83299
msgid "Old function-based generic view"
msgstr ""

#: ../../topics/generic-views-migration.txt:21
# b0b35ff4e9f24b80a50da307d3aa9ac9
msgid "New class-based generic view"
msgstr ""

#: ../../topics/generic-views-migration.txt:23
# 802f5833780d4fad93a9d87473ad29ac
msgid "``django.views.generic.simple.direct_to_template``"
msgstr ""

#: ../../topics/generic-views-migration.txt:23
# 01ee4eecd03e4b509826ff2464a7ab8e
msgid ":class:`django.views.generic.base.TemplateView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:24
# b8d71846e10944329cbf550ecb7d45a2
msgid "``django.views.generic.simple.redirect_to``"
msgstr ""

#: ../../topics/generic-views-migration.txt:24
# 9121abe35af243bf8779302081d71495
msgid ":class:`django.views.generic.base.RedirectView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:25
# 12acd64413704084ab6d0c20b3c81b47
msgid "``django.views.generic.list_detail.object_list``"
msgstr ""

#: ../../topics/generic-views-migration.txt:25
# 34205f09eb2d4972ae034d5e4d9dfdce
msgid ":class:`django.views.generic.list.ListView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:26
# bea437548e864d8c9867b1da3e3ee3fb
msgid "``django.views.generic.list_detail.object_detail``"
msgstr ""

#: ../../topics/generic-views-migration.txt:26
# 0ff9988b8b6c4d4a862fcc7f8324786d
msgid ":class:`django.views.generic.detail.DetailView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:27
# 5e4b51b77ae745c4b6b9644c309a47e8
msgid "``django.views.generic.create_update.create_object``"
msgstr ""

#: ../../topics/generic-views-migration.txt:27
# ad6b8eac61b34802bfa6661e562a58ad
msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:28
# 7abc867060644162bda4d1cd1c913267
msgid "``django.views.generic.create_update.update_object``"
msgstr ""

#: ../../topics/generic-views-migration.txt:28
# be3bb89f3fd54eb58c7c3cd4fdb5b8fc
msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:29
# 602e61ccdf734b47a2bee8ee274497af
msgid "``django.views.generic.create_update.delete_object``"
msgstr ""

#: ../../topics/generic-views-migration.txt:29
# 534471b88a8347dfa1c89176656a4fed
msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:30
# 5d083d4d3f2241a2bf2d5871a7d3a0f6
msgid "``django.views.generic.date_based.archive_index``"
msgstr ""

#: ../../topics/generic-views-migration.txt:30
# 35e322bc5c944789ad6838a1dd5f119f
msgid ":class:`django.views.generic.dates.ArchiveIndexView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:31
# ca9b3c604d9d4d98bd17e42aef52f37d
msgid "``django.views.generic.date_based.archive_year``"
msgstr ""

#: ../../topics/generic-views-migration.txt:31
# 9176c020fb934428826b7e30832d1443
msgid ":class:`django.views.generic.dates.YearArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:32
# 49616802b9db4a31a2f7a9877f3ceec8
msgid "``django.views.generic.date_based.archive_month``"
msgstr ""

#: ../../topics/generic-views-migration.txt:32
# 6516f33104cd4c5d9a9c2a0c454211a3
msgid ":class:`django.views.generic.dates.MonthArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:33
# 4dea1f4f75ad430a99088b785f2d87ea
msgid "``django.views.generic.date_based.archive_week``"
msgstr ""

#: ../../topics/generic-views-migration.txt:33
# 41cf71f43ebe48358b225973b11fc97e
msgid ":class:`django.views.generic.dates.WeekArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:34
# bf9c0c107f9e4a478a500c23e9f2f614
msgid "``django.views.generic.date_based.archive_day``"
msgstr ""

#: ../../topics/generic-views-migration.txt:34
# 176bddaa5de0446192052a1791d3644a
msgid ":class:`django.views.generic.dates.DayArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:35
# 91411d9a4e5e4501bbbe44c143d81a70
msgid "``django.views.generic.date_based.archive_today``"
msgstr ""

#: ../../topics/generic-views-migration.txt:35
# 50a534db8f2e478898563a5f4db4478e
msgid ":class:`django.views.generic.dates.TodayArchiveView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:36
# 5ea870b0840a47528b66253ea4dd52b0
msgid "``django.views.generic.date_based.object_detail``"
msgstr ""

#: ../../topics/generic-views-migration.txt:36
# 600247da692347a79919c240c05dc4cf
msgid ":class:`django.views.generic.dates.DateDetailView`"
msgstr ""

#: ../../topics/generic-views-migration.txt:39
# f58a76f445b64fabb7295f9dd7f91427
msgid "To do this, replace the reference to the generic view function with a ``as_view()`` instantiation of the class-based view. For example, the old-style ``direct_to_template`` pattern::"
msgstr ""

#: ../../topics/generic-views-migration.txt:45
# 2f9e50b1e1a4467ba831ab31c55a115f
msgid "can be replaced with an instance of :class:`~django.views.generic.base.TemplateView`::"
msgstr ""

#: ../../topics/generic-views-migration.txt:51
# 8c69a2e60280431ca5adf9546acb6ea2
msgid "``template`` argument to ``direct_to_template`` views"
msgstr ""

#: ../../topics/generic-views-migration.txt:53
# 6e3cc669657b48888aeaa2354b3ac11d
msgid "The ``template`` argument to the ``direct_to_template`` view has been renamed ``template_name``. This has been done to maintain consistency with other views."
msgstr ""

#: ../../topics/generic-views-migration.txt:57
# 53f1aa3405dd478ba583979af175a1ef
msgid "``object_id`` argument to detail views"
msgstr ""

#: ../../topics/generic-views-migration.txt:59
# 1e5a47ba91bc42eaaba3f9f128603c1c
msgid "The object_id argument to the ``object_detail`` view has been renamed ``pk`` on the :class:`~django.views.generic.detail.DetailView`."
msgstr ""

#: ../../topics/generic-views-migration.txt:63
# b37b3246056341c095c7a707a9ef0744
msgid "``template_object_name``"
msgstr ""

#: ../../topics/generic-views-migration.txt:65
# a8609569a2de4e77a7c907611d05b276
msgid "``template_object_name`` has been renamed ``context_object_name``, reflecting the fact that the context data can be used for purposes other than template rendering (e.g., to populate JSON output)."
msgstr ""

#: ../../topics/generic-views-migration.txt:70
# 1ad2700e7753431b99465843709e1b6a
msgid "The ``_list`` suffix on list views"
msgstr ""

#: ../../topics/generic-views-migration.txt:72
# a2fefb6220f94d45a1accd324a608477
msgid "In a function-based :class:`ListView`, the ``template_object_name`` was appended with the suffix ``'_list'`` to yield the final context variable name. In a class-based ``ListView``, the ``context_object_name`` is used verbatim. The ``'_list'`` suffix is only applied when generating a default context object name."
msgstr ""

#: ../../topics/generic-views-migration.txt:79
# c36838c9611842c7964cefd467fefed6
msgid "The context data for ``object_list`` views"
msgstr ""

#: ../../topics/generic-views-migration.txt:81
# 86f961160fef4f50b84425efb1a50a47
msgid "The context provided by :class:`~django.views.generic.list.MultipleObjectMixin` is quite different from that provided by ``object_list``, with most pagination related variables replaced by a single ``page_obj`` object. The following are no longer provided:"
msgstr ""

#: ../../topics/generic-views-migration.txt:86
# b5d3cf71580e4300a6f09ad4d4d55d42
msgid "``first_on_page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:87
# eb77841a5ab84082b9c4b6a6fd2c805e
msgid "``has_next``"
msgstr ""

#: ../../topics/generic-views-migration.txt:88
# 0200a1a52d164f9ea50027cd40c69b5b
msgid "``has_previous``"
msgstr ""

#: ../../topics/generic-views-migration.txt:89
# 3fc076b6015345b19ff7e47df7167865
msgid "``hits``"
msgstr ""

#: ../../topics/generic-views-migration.txt:90
# eaf9e70334e6423f92bb66b082cd01ed
msgid "``last_on_page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:91
# bc3ceb2dd88a498e8772af3cc6c6dc97
msgid "``next``"
msgstr ""

#: ../../topics/generic-views-migration.txt:92
# 36a07759d4c04c639ed867cf5d0e8b1d
msgid "``page_range``"
msgstr ""

#: ../../topics/generic-views-migration.txt:93
# db40d8e35a1341a9b2a082ccda1244b5
msgid "``page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:94
# c89956835a6e4024b7685977cec5b6d6
msgid "``pages``"
msgstr ""

#: ../../topics/generic-views-migration.txt:95
# 0ba214a18ecf482ba4f31d0a0f26b44c
msgid "``previous``"
msgstr ""

#: ../../topics/generic-views-migration.txt:96
# a65e624f912c4ba98096c014a9e8190a
msgid "``results_per_page``"
msgstr ""

#: ../../topics/generic-views-migration.txt:99
# 012491c4c511405b84fb0a5c49a71115
msgid "``extra_context``"
msgstr ""

#: ../../topics/generic-views-migration.txt:101
# bf84d2503ce04d3c80401f4143c1ce15
msgid "Function-based generic views provided an ``extra_context`` argument as way to insert extra items into the context at time of rendering."
msgstr ""

#: ../../topics/generic-views-migration.txt:104
# 86e5d4320e074425837eb7d2102a785a
msgid "Class-based views don't provide an ``extra_context`` argument. Instead, you subclass the view, overriding :meth:`get_context_data()`. For example::"
msgstr ""

#: ../../topics/generic-views-migration.txt:118
# 277f202ed0ae4d489d42a3d740d7f1e3
msgid "``post_save_redirect`` argument to create and update views"
msgstr ""

#: ../../topics/generic-views-migration.txt:120
# b24850f2dc1a4cd5bc4e4828cb38ec3c
msgid "The ``post_save_redirect`` argument to the create and update views has been renamed ``success_url`` on the :class:`~django.views.generic.edit.ModelFormMixin`."
msgstr ""

#: ../../topics/generic-views-migration.txt:125
# be023e87b7454a5fa08741c77faa4394
msgid "``mimetype``"
msgstr ""

#: ../../topics/generic-views-migration.txt:127
# 0a9b8201ad9c453fb9a4e03cbc98e0be
msgid "Some function-based generic views provided a ``mimetype`` argument as way to control the mimetype of the response."
msgstr ""

#: ../../topics/generic-views-migration.txt:130
# a399f7b626584cccad32c662876d8201
msgid "Class-based views don't provide a ``mimetype`` argument. Instead, you subclass the view, overriding :meth:`TemplateResponseMixin.render_to_response()` and pass in arguments for the TemplateResponse constructor. For example::"
msgstr ""

#: ../../topics/generic-views-migration.txt:141
# 6eb2507dadeb43f2ac7773e67a143876
msgid "``context_processors``"
msgstr ""

#: ../../topics/generic-views-migration.txt:143
# 64dbc6f9fd2f4d9fb753f637440c7aa9
msgid "Some function-based generic views provided a ``context_processors`` argument that could be used to force the use of specialized context processors when rendering template content."
msgstr ""

#: ../../topics/generic-views-migration.txt:147
# f619a22c4f6d4851bf2b81432f821bb6
msgid "Class-based views don't provide a ``context_processors`` argument. Instead, you subclass the view, overriding :meth:`TemplateResponseMixin.render_to_response()`, and passing in a context instance that has been instantiated with the processors you want to use. For example::"
msgstr ""

#: ../../topics/http/decorators.txt:3
# 0c0530cd2dda4e35ab5823db0457cb30
msgid "View decorators"
msgstr ""

#: ../../topics/http/decorators.txt:7
# 632886d22f5941719fe682db3f62eb68
msgid "Django provides several decorators that can be applied to views to support various HTTP features."
msgstr ""

#: ../../topics/http/decorators.txt:11
# b01f87e49fd54d53bbd08439004184ce
msgid "Allowed HTTP methods"
msgstr ""

#: ../../topics/http/decorators.txt:13
# 7d9e83da6c44429db7c938070ba262eb
msgid "The decorators in :mod:`django.views.decorators.http` can be used to restrict access to views based on the request method. These decorators will return a :class:`django.http.HttpResponseNotAllowed` if the conditions are not met."
msgstr ""

#: ../../topics/http/decorators.txt:19
# 67b2b0f145984362abaa8387dd5a60a1
msgid "Decorator to require that a view only accept particular request methods. Usage::"
msgstr ""

#: ../../topics/http/decorators.txt:30
# 0c176250d7864ce89e6fd6689108ec97
msgid "Note that request methods should be in uppercase."
msgstr ""

#: ../../topics/http/decorators.txt:34
# 283ca6061afc4d07a78b1d5062647090
msgid "Decorator to require that a view only accept the GET method."
msgstr ""

#: ../../topics/http/decorators.txt:38
# e192e386adc845018816f0efa095b6f9
msgid "Decorator to require that a view only accept the POST method."
msgstr ""

#: ../../topics/http/decorators.txt:44
# 93904651ceba46e5864b2dca5495cac2
msgid "Decorator to require that a view only accept the GET and HEAD methods. These methods are commonly considered \"safe\" because they should not have the significance of taking an action other than retrieving the requested resource."
msgstr ""

#: ../../topics/http/decorators.txt:50
# 328ae36ce71f4b688a4394518cdcaba4
msgid "Django will automatically strip the content of responses to HEAD requests while leaving the headers unchanged, so you may handle HEAD requests exactly like GET requests in your views. Since some software, such as link checkers, rely on HEAD requests, you might prefer using ``require_safe`` instead of ``require_GET``."
msgstr ""

#: ../../topics/http/decorators.txt:57
# 382f3270012540a2ac539eec3f1c7beb
msgid "Conditional view processing"
msgstr ""

#: ../../topics/http/decorators.txt:59
# dceb6356ab914d0598aff73403c7ceda
msgid "The following decorators in :mod:`django.views.decorators.http` can be used to control caching behavior on particular views."
msgstr ""

#: ../../topics/http/decorators.txt:68
# fb8f02fe5be748108887081d70bbc205
msgid "These decorators can be used to generate ``ETag`` and ``Last-Modified`` headers; see :doc:`conditional view processing </topics/conditional-view-processing>`."
msgstr ""

#: ../../topics/http/decorators.txt:75
# b0484233525c4dd7a76302c9bb88af53
msgid "GZip compression"
msgstr ""

#: ../../topics/http/decorators.txt:77
# 09d407d7a89642d3ba394a3e34e7bd5e
msgid "The decorators in :mod:`django.views.decorators.gzip` control content compression on a per-view basis."
msgstr ""

#: ../../topics/http/decorators.txt:82
# 283104a8290b46809695d69caf7cf3a0
msgid "This decorator compresses content if the browser allows gzip compression. It sets the ``Vary`` header accordingly, so that caches will base their storage on the ``Accept-Encoding`` header."
msgstr ""

#: ../../topics/http/decorators.txt:89
# 90f9c9f4f3b94c27bcec223da3c86070
msgid "Vary headers"
msgstr ""

#: ../../topics/http/decorators.txt:91
# 153c32657a6e44b783e9a1d5bc0c69ab
msgid "The decorators in :mod:`django.views.decorators.vary` can be used to control caching based on specific request headers."
msgstr ""

#: ../../topics/http/decorators.txt:98
# 71323d0c0692493f812acaf5d0f69be4
msgid "The ``Vary`` header defines which request headers a cache mechanism should take into account when building its cache key."
msgstr ""

#: ../../topics/http/decorators.txt:101
# 760a6959100a4443b1f02d639cba9231
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

#: ../../topics/http/file-uploads.txt:3
# 7845289ff1094070a00827c81b1baf19
msgid "File Uploads"
msgstr ""

#: ../../topics/http/file-uploads.txt:7
# f2e072cded4d42aaa579a31e957642d4
msgid "When Django handles a file upload, the file data ends up placed in :attr:`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` object see the documentation for :doc:`request and response objects </ref/request-response>`). This document explains how files are stored on disk and in memory, and how to customize the default behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:14
# d701e5e17a4248c1af51a6a30f634cda
msgid "Basic file uploads"
msgstr ""

#: ../../topics/http/file-uploads.txt:16
# 42645c8e08e94af380c368a412c11806
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

#: ../../topics/http/file-uploads.txt:24
# b15b07a76ee745ae8901725e19cd2f9c
msgid "A view handling this form will receive the file data in :attr:`request.FILES <django.http.HttpRequest.FILES>`, which is a dictionary containing a key for each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, or other :class:`~django.forms.FileField` subclass) in the form. So the data from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

#: ../../topics/http/file-uploads.txt:31
# 971d169d26ce46d79ebea11fa50a7c5b
msgid "Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only contain data if the request method was ``POST`` and the ``<form>`` that posted the request has the attribute ``enctype=\"multipart/form-data\"``. Otherwise, ``request.FILES`` will be empty."
msgstr ""

#: ../../topics/http/file-uploads.txt:36
# 7f16eb61fca9446a9e39d3430a18c55d
msgid "Most of the time, you'll simply pass the file data from ``request`` into the form as described in :ref:`binding-uploaded-files`. This would look something like::"
msgstr ""

#: ../../topics/http/file-uploads.txt:56
# b2f0835af801490ebee9c2049828c167
msgid "Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest.FILES>` into the form's constructor; this is how file data gets bound into a form."
msgstr ""

#: ../../topics/http/file-uploads.txt:60
# f00986beb20547f1970a896f2c9e779e
msgid "Handling uploaded files"
msgstr ""

#: ../../topics/http/file-uploads.txt:64
# 98fac8f0196844fc9e0c89788fb491d7
msgid "The final piece of the puzzle is handling the actual file data from :attr:`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this dictionary is an ``UploadedFile`` object -- a simple wrapper around an uploaded file. You'll usually use one of these methods to access the uploaded content:"
msgstr ""

#: ../../topics/http/file-uploads.txt:71
# e98398f32dd64d3eacc67efe35138a4c
msgid "Read the entire uploaded data from the file. Be careful with this method: if the uploaded file is huge it can overwhelm your system if you try to read it into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

#: ../../topics/http/file-uploads.txt:78
# 2a45809f48df4c9b8acea969c13495ae
msgid "Returns ``True`` if the uploaded file is big enough to require reading in multiple chunks. By default this will be any file larger than 2.5 megabytes, but that's configurable; see below."
msgstr ""

#: ../../topics/http/file-uploads.txt:84
# b985cf41bcfe47fbb5f3bdda1912939c
msgid "A generator returning chunks of the file. If ``multiple_chunks()`` is ``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

#: ../../topics/http/file-uploads.txt:87
# 6eb930a7a33d406383149e456f7d9e55
msgid "In practice, it's often easiest simply to use ``chunks()`` all the time; see the example below."
msgstr ""

#: ../../topics/http/file-uploads.txt:92
# aa9421349fcd473f9c23de0903040d72
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

#: ../../topics/http/file-uploads.txt:96
# 9875fa48c2764904bae2e3c738f39f2b
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../topics/http/file-uploads.txt:98
# 5a3a15a625a04455a548336fa8b1df20
msgid "There are a few other methods and attributes available on ``UploadedFile`` objects; see `UploadedFile objects`_ for a complete reference."
msgstr ""

#: ../../topics/http/file-uploads.txt:101
# 33c7da940ab74e11bea4e78bb35a99a0
msgid "Putting it all together, here's a common way you might handle an uploaded file::"
msgstr ""

#: ../../topics/http/file-uploads.txt:108
# 87890d2f2782478ab10f9b2fd03d045b
msgid "Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures that large files don't overwhelm your system's memory."
msgstr ""

#: ../../topics/http/file-uploads.txt:112
# e76bbde02170413f93998d771014adf5
msgid "Where uploaded data is stored"
msgstr ""

#: ../../topics/http/file-uploads.txt:114
# 4ac3413c14ce44d2a90640c35c033545
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

#: ../../topics/http/file-uploads.txt:116
# ff7d2fa5623a42a583ba99abc5022a71
msgid "By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast."
msgstr ""

#: ../../topics/http/file-uploads.txt:120
# 34c6bde42d574192a760ee29e14362a1
msgid "However, if an uploaded file is too large, Django will write the uploaded file to a temporary file stored in your system's temporary directory. On a Unix-like platform this means you can expect Django to generate a file called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large enough, you can watch this file grow in size as Django streams the data onto disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:126
# 13f0b2a3c3b541f0bc68d485b1f2fd9a
msgid "These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable defaults\". Read on for details on how you can customize or completely replace upload behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:131
# 92ad67fedc644775b40c2bba9f50bf36
msgid "Changing upload handler behavior"
msgstr ""

#: ../../topics/http/file-uploads.txt:133
# 55af8754ff0b4a7ea91ccf6c16725291
msgid "Three settings control Django's file upload behavior:"
msgstr ""

#: ../../topics/http/file-uploads.txt:136
# 6dfcc1e1699f43f5b5366d294e46da14
msgid "The maximum size, in bytes, for files that will be uploaded into memory. Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed to disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:140
# 85a70c07bd454bc092eeb28d94963253
msgid "Defaults to 2.5 megabytes."
msgstr ""

#: ../../topics/http/file-uploads.txt:143
# 8b2127dc250740e4b21f7253ebb08906
msgid "The directory where uploaded files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
msgstr ""

#: ../../topics/http/file-uploads.txt:146
# c7bed734ebae46ac999ecc11d10d7b28
msgid "Defaults to your system's standard temporary directory (i.e. ``/tmp`` on most Unix-like systems)."
msgstr ""

#: ../../topics/http/file-uploads.txt:150
# 7473a543759b4614bde3fad92cca78d2
msgid "The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more information about what these modes mean, see the documentation for :func:`os.chmod`."
msgstr ""

#: ../../topics/http/file-uploads.txt:154
# 6212731c82e0472e8bec46929f93173d
msgid "If this isn't given or is ``None``, you'll get operating-system dependent behavior. On most platforms, temporary files will have a mode of ``0600``, and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../topics/http/file-uploads.txt:161
# 034cd37dba734dbbaf5aef587dd24a0d
msgid "If you're not familiar with file modes, please note that the leading ``0`` is very important: it indicates an octal number, which is the way that modes must be specified. If you try to use ``644``, you'll get totally incorrect behavior."
msgstr ""

#: ../../topics/http/file-uploads.txt:166
# 617ff08e12164cc28f95cfaba2c3d2d6
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../topics/http/file-uploads.txt:169
# f156272319c94f12a855ade340a2700b
msgid "The actual handlers for uploaded files. Changing this setting allows complete customization -- even replacement -- of Django's upload process. See `upload handlers`_, below, for details."
msgstr ""

#: ../../topics/http/file-uploads.txt:173
# 81def8632b3a4eaf885864d9f4a645de
msgid "Defaults to::"
msgstr ""

#: ../../topics/http/file-uploads.txt:178
# 6cb08e06ca934347934e53db4c047677
msgid "Which means \"try to upload to memory first, then fall back to temporary files.\""
msgstr ""

#: ../../topics/http/file-uploads.txt:182
# 79d2217459e14642b8f5e3cf1243e7e4
msgid "Handling uploaded files with a model"
msgstr ""

#: ../../topics/http/file-uploads.txt:184
# fad47280c9624937bb6b48e7f1d3447a
msgid "If you're saving a file on a :class:`~django.db.models.Model` with a :class:`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` makes this process much easier. The file object will be saved to the location specified by the :attr:`~django.db.models.FileField.upload_to` argument of the corresponding :class:`~django.db.models.FileField` when calling ``form.save()``::"
msgstr ""

#: ../../topics/http/file-uploads.txt:206
# 82cae1d16d9449dc9ac4a7dd815169c7
msgid "If you are constructing an object manually, you can simply assign the file object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the file field in the model::"
msgstr ""

#: ../../topics/http/file-uploads.txt:228
# e716904609f143248c1187836515cb61
msgid "``UploadedFile`` objects"
msgstr ""

#: ../../topics/http/file-uploads.txt:230
# 3f258badf4af438ab1e1314df06a2133
msgid "In addition to those inherited from :class:`File`, all ``UploadedFile`` objects define the following methods/attributes:"
msgstr ""

#: ../../topics/http/file-uploads.txt:235
# f70f383d15504901bc42ee7f7908ff51
msgid "The content-type header uploaded with the file (e.g. :mimetype:`text/plain` or :mimetype:`application/pdf`). Like any data supplied by the user, you shouldn't trust that the uploaded file is actually this type. You'll still need to validate that the file contains the content that the content-type header claims -- \"trust but verify.\""
msgstr ""

#: ../../topics/http/file-uploads.txt:243
# 9711123cf4a34100b2177e2d362d161e
msgid "For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

#: ../../topics/http/file-uploads.txt:248
# 598ce98ced3b46cfadd8b0838545e3df
msgid "Only files uploaded onto disk will have this method; it returns the full path to the temporary uploaded file."
msgstr ""

#: ../../topics/http/file-uploads.txt:253
# 2a4141f57b0e43ee9504a11a28de1f06
msgid "Like regular Python files, you can read the file line-by-line simply by iterating over the uploaded file:"
msgstr ""

#: ../../topics/http/file-uploads.txt:261
# 63792af5f88e4b7d82000bce0a58bd67
msgid "However, *unlike* standard Python files, :class:`UploadedFile` only understands ``\\n`` (also known as \"Unix-style\") line endings. If you know that you need to handle uploaded files with different line endings, you'll need to do so in your view."
msgstr ""

#: ../../topics/http/file-uploads.txt:267
# 69ab987316484f0dbbd240c11988d17c
msgid "Upload Handlers"
msgstr ""

#: ../../topics/http/file-uploads.txt:269
# 71cdfb803a734d79954a593d24392e3b
msgid "When a user uploads a file, Django passes off the file data to an *upload handler* -- a small class that handles file data as it gets uploaded. Upload handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` setting, which defaults to::"
msgstr ""

#: ../../topics/http/file-uploads.txt:277
# 1f32de0ef1ba424bb140b0d9f5c2efff
msgid "Together the ``MemoryFileUploadHandler`` and ``TemporaryFileUploadHandler`` provide Django's default file upload behavior of reading small files into memory and large ones onto disk."
msgstr ""

#: ../../topics/http/file-uploads.txt:281
# 80eda83e89a546078d86eb9dd90e77c5
msgid "You can write custom handlers that customize how Django handles files. You could, for example, use custom handlers to enforce user-level quotas, compress data on the fly, render progress bars, and even send data to another storage location directly without storing it locally."
msgstr ""

#: ../../topics/http/file-uploads.txt:289
# 354c724e412f4aff9e5fd56ede36ece0
msgid "Modifying upload handlers on the fly"
msgstr ""

#: ../../topics/http/file-uploads.txt:291
# 07c9ab75303046b2a4199cbf0659503f
msgid "Sometimes particular views require different upload behavior. In these cases, you can override upload handlers on a per-request basis by modifying ``request.upload_handlers``. By default, this list will contain the upload handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the list as you would any other list."
msgstr ""

#: ../../topics/http/file-uploads.txt:297
# 7e36f81b778a4eb7a3547a560344eff7
msgid "For instance, suppose you've written a ``ProgressBarUploadHandler`` that provides feedback on upload progress to some sort of AJAX widget. You'd add this handler to your upload handlers like this::"
msgstr ""

#: ../../topics/http/file-uploads.txt:303
# 40c75fcd0bf34461ac3ff15d86f52e52
msgid "You'd probably want to use ``list.insert()`` in this case (instead of ``append()``) because a progress bar handler would need to run *before* any other handlers. Remember, the upload handlers are processed in order."
msgstr ""

#: ../../topics/http/file-uploads.txt:307
# a89887b848314e28acfc390837972654
msgid "If you want to replace the upload handlers completely, you can just assign a new list::"
msgstr ""

#: ../../topics/http/file-uploads.txt:314
# 73c545277ff24ef8a6b50bac1a18c2dc
msgid "You can only modify upload handlers *before* accessing ``request.POST`` or ``request.FILES`` -- it doesn't make sense to change upload handlers after upload handling has already started. If you try to modify ``request.upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` Django will throw an error."
msgstr ""

#: ../../topics/http/file-uploads.txt:321
# 1630b09f7d2e4ba9a027748f3369a211
msgid "Thus, you should always modify uploading handlers as early in your view as possible."
msgstr ""

#: ../../topics/http/file-uploads.txt:324
# 4278d66b7d25480291f74ddf18de3935
msgid "Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf.CsrfViewMiddleware` which is enabled by default. This means you will need to use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow you to change the upload handlers.  You will then need to use :func:`~django.views.decorators.csrf.csrf_protect` on the function that actually processes the request.  Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:"
msgstr ""

#: ../../topics/http/file-uploads.txt:349
# 8c6035a887fa431f903da8450e89e59e
msgid "Writing custom upload handlers"
msgstr ""

#: ../../topics/http/file-uploads.txt:351
# 68e875d97ffa496caba464ecd809a483
msgid "All file upload handlers should be subclasses of ``django.core.files.uploadhandler.FileUploadHandler``. You can define upload handlers wherever you wish."
msgstr ""

#: ../../topics/http/file-uploads.txt:356
# 7f0fb70354cc495dbb3cdb43b00ecac4
msgid "Required methods"
msgstr ""

#: ../../topics/http/file-uploads.txt:358
# fbaf2ec113ae45cb8b7f463a1c4bdf2a
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

#: ../../topics/http/file-uploads.txt:361
# ed1fd7d9c502432e9586f6908724b662
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

#: ../../topics/http/file-uploads.txt:363
# 79ac48cdaa904ed2988a6d92569f97cb
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

#: ../../topics/http/file-uploads.txt:365
# 2518403645cc4904bdf208c58d13285f
msgid "``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

#: ../../topics/http/file-uploads.txt:368
# d9d06a2f95d24948a56740aca670759d
msgid "The data you return will get fed into the subsequent upload handlers' ``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" for other handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:372
# a9ef94afd2904f78ae14799be2a5ee00
msgid "Return ``None`` from ``receive_data_chunk`` to sort-circuit remaining upload handlers from getting this chunk.. This is useful if you're storing the uploaded data yourself and don't want future handlers to store a copy of the data."
msgstr ""

#: ../../topics/http/file-uploads.txt:377
# 162ba37570d14f2583333568d6953712
msgid "If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will abort or the file will be completely skipped."
msgstr ""

#: ../../topics/http/file-uploads.txt:381
# 6bf21ea93fab421c85864ea07554bdd8
msgid "Called when a file has finished uploading."
msgstr ""

#: ../../topics/http/file-uploads.txt:383
# d15c302a0f4446a2a51c4fc2390e418a
msgid "The handler should return an ``UploadedFile`` object that will be stored in ``request.FILES``. Handlers may also return ``None`` to indicate that the ``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:388
# 91485d5915024fa59b7a31e6a88d6125
msgid "Optional methods"
msgstr ""

#: ../../topics/http/file-uploads.txt:390
# 1c06ef2d052e49f98aa1767e13ff82b2
msgid "Custom upload handlers may also define any of the following optional methods or attributes:"
msgstr ""

#: ../../topics/http/file-uploads.txt:394
# e788128851e14c7b9608dd4407328483
msgid "Size, in bytes, of the \"chunks\" Django should store into memory and feed into the handler. That is, this attribute controls the size of chunks fed into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

#: ../../topics/http/file-uploads.txt:398
# aa099fc1090d40bfadb698c5f8817af7
msgid "For maximum performance the chunk sizes should be divisible by ``4`` and should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are multiple chunk sizes provided by multiple handlers, Django will use the smallest chunk size defined by any handler."
msgstr ""

#: ../../topics/http/file-uploads.txt:403
# 321b362188724f43af20621bbb47af16
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

#: ../../topics/http/file-uploads.txt:406
# e9a3f0788d204f0998845958fac7e08b
msgid "Callback signaling that a new file upload is starting. This is called before any data has been fed to any upload handlers."
msgstr ""

#: ../../topics/http/file-uploads.txt:409
# eb73c0b3eff54d969cc2291fb6fffa12
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

#: ../../topics/http/file-uploads.txt:411
# 62102618f0a240a081129e46ede25ae8
msgid "``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

#: ../../topics/http/file-uploads.txt:413
# 58aded0cfdc9437ca7d9669a53ecf9bf
msgid "``content_type`` is the MIME type provided by the browser -- E.g. ``'image/jpeg'``."
msgstr ""

#: ../../topics/http/file-uploads.txt:416
# cfd140da6d804bb9b7aff7e4e4578ba6
msgid "``content_length`` is the length of the image given by the browser. Sometimes this won't be provided and will be ``None``."
msgstr ""

#: ../../topics/http/file-uploads.txt:419
# 09f37a6a70a14fc7b7996ea197717ae2
msgid "``charset`` is the character set (i.e. ``utf8``) given by the browser. Like ``content_length``, this sometimes won't be provided."
msgstr ""

#: ../../topics/http/file-uploads.txt:422
# 45744b4453074ae1a9b0d7e2834bf57f
msgid "This method may raise a ``StopFutureHandlers`` exception to prevent future handlers from handling this file."
msgstr ""

#: ../../topics/http/file-uploads.txt:426
# db9da32752b54b4680119b26342f384a
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

#: ../../topics/http/file-uploads.txt:429
# 823a50c29df3439d9c8eaece1ff92c1e
msgid "Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

#: ../../topics/http/file-uploads.txt:432
# e8a4472c627a400f9993c62b41df5a5a
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

#: ../../topics/http/file-uploads.txt:434
# cac8805722484f9399bb8b617583cfd8
msgid "``META`` is the same object as ``request.META``."
msgstr ""

#: ../../topics/http/file-uploads.txt:436
# c04b7e72b00f477180b52badc505e3a7
msgid "``content_length`` is the length of the data in ``input_data``. Don't read more than ``content_length`` bytes from ``input_data``."
msgstr ""

#: ../../topics/http/file-uploads.txt:439
# a4f9618c7b044f15b6538e001c517edf
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

#: ../../topics/http/file-uploads.txt:441
# affb3a23cce4405a9f3523613e11c65b
msgid "``encoding`` is the encoding of the request."
msgstr ""

#: ../../topics/http/file-uploads.txt:443
# 816b1f0bfa354cb498c34dcb10bb75e1
msgid "Return ``None`` if you want upload handling to continue, or a tuple of ``(POST, FILES)`` if you want to return the new data structures suitable for the request directly."
msgstr ""

#: ../../topics/http/generic-views.txt:5
# 03ff52449c214b7f91ca7c30669aab38
msgid "See :doc:`/ref/class-based-views/index`."
msgstr ""

#: ../../topics/http/index.txt:2
# 67b2f22c64854413bb2060b8ea218600
msgid "Handling HTTP requests"
msgstr ""

#: ../../topics/http/index.txt:4
# c6a9d725ecea4924a96d870f9eb69ece
msgid "Information on handling HTTP requests in Django:"
msgstr ""

#: ../../topics/http/middleware.txt:3
# 31658711ebf049228871ee7ee4ee52f8
msgid "Middleware"
msgstr ""

#: ../../topics/http/middleware.txt:5
# 407d71f1e396468d9ba13fc716a6ca83
msgid "Middleware is a framework of hooks into Django's request/response processing. It's a light, low-level \"plugin\" system for globally altering Django's input and/or output."
msgstr ""

#: ../../topics/http/middleware.txt:9
# decf170c55414447abdaa19fc0375619
msgid "Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, ``XViewMiddleware``, that adds an ``\"X-View\"`` HTTP header to every response to a ``HEAD`` request."
msgstr ""

#: ../../topics/http/middleware.txt:13
# abdafc05cf804ed691c9034b98e196b0
msgid "This document explains how middleware works, how you activate middleware, and how to write your own middleware. Django ships with some built-in middleware you can use right out of the box; they're documented in the :doc:`built-in middleware reference </ref/middleware>`."
msgstr ""

#: ../../topics/http/middleware.txt:19
# 8ce29d46137f43cb830657a5f12d3687
msgid "Activating middleware"
msgstr ""

#: ../../topics/http/middleware.txt:21
# a617d1e72ae4431d9dbbf43c66a0ef12
msgid "To activate a middleware component, add it to the :setting:`MIDDLEWARE_CLASSES` list in your Django settings. In :setting:`MIDDLEWARE_CLASSES`, each middleware component is represented by a string: the full Python path to the middleware's class name. For example, here's the default :setting:`MIDDLEWARE_CLASSES` created by :djadmin:`django-admin.py startproject <startproject>`::"
msgstr ""

#: ../../topics/http/middleware.txt:35
# a22b288a70604ec2ad906b647e6d1a06
msgid "During the request phases (:meth:`process_request` and :meth:`process_view` middleware), Django applies middleware in the order it's defined in :setting:`MIDDLEWARE_CLASSES`, top-down. During the response phases (:meth:`process_response` and :meth:`process_exception` middleware), the classes are applied in reverse order, from the bottom up. You can think of it like an onion: each middleware class is a \"layer\" that wraps the view:"
msgstr ""

#: ../../topics/http/middleware.txt:47
# 0f914228b7af44deacabcd8a8554aa00
msgid "A Django installation doesn't require any middleware -- e.g., :setting:`MIDDLEWARE_CLASSES` can be empty, if you'd like -- but it's strongly suggested that you at least use :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

#: ../../topics/http/middleware.txt:53
# e2d5649f99c0488cb7495640cb6d7fec
msgid "Writing your own middleware"
msgstr ""

#: ../../topics/http/middleware.txt:55
# ce750eb2a59642bdb375157adf4bfa56
msgid "Writing your own middleware is easy. Each middleware component is a single Python class that defines one or more of the following methods:"
msgstr ""

#: ../../topics/http/middleware.txt:61
# 25ae16be023e43f2a1e128f672ec3643
msgid "``process_request``"
msgstr ""

#: ../../topics/http/middleware.txt:65
# bd86f15a4074416790992ce8b6a12b52
msgid "``request`` is an :class:`~django.http.HttpRequest` object. This method is called on each request, before Django decides which view to execute."
msgstr ""

#: ../../topics/http/middleware.txt:68
# 00a6307be4cc41b0bf8d8e933d39ada5
msgid "``process_request()`` should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns ``None``, Django will continue processing this request, executing any other middleware and, then, the appropriate view. If it returns an :class:`~django.http.HttpResponse` object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that :class:`~django.http.HttpResponse`. Response middleware is always called on every response."
msgstr ""

#: ../../topics/http/middleware.txt:79
# f25a87e18ab04438a14ca74416b0a069
msgid "``process_view``"
msgstr ""

#: ../../topics/http/middleware.txt:83
# 80c243f9130a45a1a5acca5845b4d076
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is the Python function that Django is about to use. (It's the actual function object, not the name of the function as a string.) ``view_args`` is a list of positional arguments that will be passed to the view, and ``view_kwargs`` is a dictionary of keyword arguments that will be passed to the view. Neither ``view_args`` nor ``view_kwargs`` include the first view argument (``request``)."
msgstr ""

#: ../../topics/http/middleware.txt:91
# 2075c955fff14c60abdc3dbe8be9cc0d
msgid "``process_view()`` is called just before Django calls the view. It should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns ``None``, Django will continue processing this request, executing any other ``process_view()`` middleware and, then, the appropriate view. If it returns an :class:`~django.http.HttpResponse` object, Django won't bother calling ANY other request, view or exception middleware, or the appropriate view; it'll return that :class:`~django.http.HttpResponse`. Response middleware is always called on every response."
msgstr ""

#: ../../topics/http/middleware.txt:102
# a956d41088f7403eba7d4fe327ac8d7f
msgid "Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from ``process_request`` or ``process_view`` will prevent any view running after the middleware from being able to :ref:`modify the upload handlers for the request <modifying_upload_handlers_on_the_fly>`, and should normally be avoided."
msgstr ""

#: ../../topics/http/middleware.txt:109
# f479b85b990a4c8a96cbce14d3456e1f
msgid "The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be considered an exception, as it provides the :func:`~django.views.decorators.csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` decorators which allow views to explicitly control at what point the CSRF validation should occur."
msgstr ""

#: ../../topics/http/middleware.txt:118
# b35bf290b93d46be9ac8b9edc5f674df
msgid "``process_template_response``"
msgstr ""

#: ../../topics/http/middleware.txt:122
# a172d15657c64893bbc565e19abab763
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is a subclass of :class:`~django.template.response.SimpleTemplateResponse` (e.g. :class:`~django.template.response.TemplateResponse`) or any response object that implements a ``render`` method."
msgstr ""

#: ../../topics/http/middleware.txt:127
# 7a068f3ebe5b4c4385b33b3305f546e9
msgid "``process_template_response()`` must return a response object that implements a ``render`` method. It could alter the given ``response`` by changing ``response.template_name`` and ``response.context_data``, or it could create and return a brand-new :class:`~django.template.response.SimpleTemplateResponse` or equivalent."
msgstr ""

#: ../../topics/http/middleware.txt:133
# 33953bd76e5a494789dd85cafd66a5b2
msgid "``process_template_response()`` will only be called if the response instance has a ``render()`` method, indicating that it is a :class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

#: ../../topics/http/middleware.txt:137
# d156126e3ee34427b6e5f4f81c0c5e4f
msgid "You don't need to explicitly render responses -- responses will be automatically rendered once all template response middleware has been called."
msgstr ""

#: ../../topics/http/middleware.txt:141
# 2e27e667d11846cba33faa14f184eabc
msgid "Middleware are run in reverse order during the response phase, which includes process_template_response."
msgstr ""

#: ../../topics/http/middleware.txt:147
# 36cce978f9b7484bbbe09a4144288809
msgid "``process_response``"
msgstr ""

#: ../../topics/http/middleware.txt:151
# 1a84aa749bb344c0be1fc62e02ca1c30
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is the :class:`~django.http.HttpResponse` object returned by a Django view."
msgstr ""

#: ../../topics/http/middleware.txt:154
# b5a036c22fcc4116b3b0d7d45e622c1f
msgid "``process_response()`` must return an :class:`~django.http.HttpResponse` object. It could alter the given ``response``, or it could create and return a brand-new :class:`~django.http.HttpResponse`."
msgstr ""

#: ../../topics/http/middleware.txt:158
# cc1c9378fd4e48c29b1f1d5ca24bd83e
msgid "Unlike the ``process_request()`` and ``process_view()`` methods, the ``process_response()`` method is always called, even if the ``process_request()`` and ``process_view()`` methods of the same middleware class were skipped because an earlier middleware method returned an :class:`~django.http.HttpResponse` (this means that your ``process_response()`` method cannot rely on setup done in ``process_request()``, for example). In addition, during the response phase the classes are applied in reverse order, from the bottom up. This means classes defined at the end of :setting:`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

#: ../../topics/http/middleware.txt:171
# 08af453ddebf4d209839e3173ba2de1b
msgid "Unlike :class:`~django.http.HttpResponse`, :class:`~django.http.StreamingHttpResponse` does not have a ``content`` attribute. As a result, middleware can no longer assume that all responses will have a ``content`` attribute. If they need access to the content, they must test for streaming responses and adjust their behavior accordingly::"
msgstr ""

#: ../../topics/http/middleware.txt:182
# 14385604a6354b0cb0656c8baca259f9
msgid "``streaming_content`` should be assumed to be too large to hold in memory. Middleware may wrap it in a new generator, but must not consume it."
msgstr ""

#: ../../topics/http/middleware.txt:188
# b6c4de555fbc4270b0c0b52c0c328d59
msgid "``process_exception``"
msgstr ""

#: ../../topics/http/middleware.txt:192
# 524dc319cfcf40789e42e1aefdd1989c
msgid "``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is an ``Exception`` object raised by the view function."
msgstr ""

#: ../../topics/http/middleware.txt:195
# 234cd84ebb714e5483816760b27379fc
msgid "Django calls ``process_exception()`` when a view raises an exception. ``process_exception()`` should return either ``None`` or an :class:`~django.http.HttpResponse` object. If it returns an :class:`~django.http.HttpResponse` object, the response will be returned to the browser. Otherwise, default exception handling kicks in."
msgstr ""

#: ../../topics/http/middleware.txt:201
# 5babaf58150c4f27820d9d3c1d20f589
msgid "Again, middleware are run in reverse order during the response phase, which includes ``process_exception``. If an exception middleware returns a response, the middleware classes above that middleware will not be called at all."
msgstr ""

#: ../../topics/http/middleware.txt:206
# 3ffde703bc824bbba4e73c267303a8c1
msgid "``__init__``"
msgstr ""

#: ../../topics/http/middleware.txt:208
# 59ab78d13f33430eb64efdaf2a5032e7
msgid "Most middleware classes won't need an initializer since middleware classes are essentially placeholders for the ``process_*`` methods. If you do need some global state you may use ``__init__`` to set up. However, keep in mind a couple of caveats:"
msgstr ""

#: ../../topics/http/middleware.txt:213
# 4b4ebf0120114207aa2c002ca57df569
msgid "Django initializes your middleware without any arguments, so you can't define ``__init__`` as requiring any arguments."
msgstr ""

#: ../../topics/http/middleware.txt:216
# db05c589d61d444cbf13016137618800
msgid "Unlike the ``process_*`` methods which get called once per request, ``__init__`` gets called only *once*, when the Web server responds to the first request."
msgstr ""

#: ../../topics/http/middleware.txt:221
# 3a7a23ba4b9a428e809212082510f957
msgid "Marking middleware as unused"
msgstr ""

#: ../../topics/http/middleware.txt:223
# 7dc3e77d2fa04abeb283e3936517ae69
msgid "It's sometimes useful to determine at run-time whether a piece of middleware should be used. In these cases, your middleware's ``__init__`` method may raise ``django.core.exceptions.MiddlewareNotUsed``. Django will then remove that piece of middleware from the middleware process."
msgstr ""

#: ../../topics/http/middleware.txt:229
# 21e27826ac2b45e49ae1737a1d485bb1
msgid "Guidelines"
msgstr ""

#: ../../topics/http/middleware.txt:231
# e1cecdf16b614aab910c19acf949ef0c
msgid "Middleware classes don't have to subclass anything."
msgstr ""

#: ../../topics/http/middleware.txt:233
# 74504763b89f420c9d460e33629af2f7
msgid "The middleware class can live anywhere on your Python path. All Django cares about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to it."
msgstr ""

#: ../../topics/http/middleware.txt:237
# 2f20122af27f40cbb3bb2983bb6708b3
msgid "Feel free to look at :doc:`Django's available middleware </ref/middleware>` for examples."
msgstr ""

#: ../../topics/http/middleware.txt:240
# 1f3c81be13434978b84d620fa552d5ae
msgid "If you write a middleware component that you think would be useful to other people, contribute to the community! :doc:`Let us know </internals/contributing/index>`, and we'll consider adding it to Django."
msgstr ""

#: ../../topics/http/sessions.txt:3
# 59443ce988ba427889da34de6d834894
msgid "How to use sessions"
msgstr ""

#: ../../topics/http/sessions.txt:8
# 62f354e34a2e49e7a9e81514165f5ae5
msgid "Django provides full support for anonymous sessions. The session framework lets you store and retrieve arbitrary data on a per-site-visitor basis. It stores data on the server side and abstracts the sending and receiving of cookies. Cookies contain a session ID -- not the data itself (unless you're using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

#: ../../topics/http/sessions.txt:15
# 817f07ec3f4c492892ba44367f4a315e
msgid "Enabling sessions"
msgstr ""

#: ../../topics/http/sessions.txt:17
# b8dfbd28843049c3b0575cacd62d0ecc
msgid "Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

#: ../../topics/http/sessions.txt:19
# 2993631519984628819e9967d574dfcc
msgid "To enable session functionality, do the following:"
msgstr ""

#: ../../topics/http/sessions.txt:21
# 7e471afc0b5e4c94ae7a8fff2f729e95
msgid "Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains ``'django.contrib.sessions.middleware.SessionMiddleware'``. The default ``settings.py`` created by ``django-admin.py startproject`` has ``SessionMiddleware`` activated."
msgstr ""

#: ../../topics/http/sessions.txt:26
# 5d41af267b1846049dddcad6049d7a69
msgid "If you don't want to use sessions, you might as well remove the ``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django.contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a small bit of overhead."
msgstr ""

#: ../../topics/http/sessions.txt:32
# a46fa81554694e35b60d74eb107540da
msgid "Configuring the session engine"
msgstr ""

#: ../../topics/http/sessions.txt:34
# 274ed5b7e69c459fb20c4b9e776c687e
msgid "By default, Django stores sessions in your database (using the model ``django.contrib.sessions.models.Session``). Though this is convenient, in some setups it's faster to store session data elsewhere, so Django can be configured to store session data on your filesystem or in your cache."
msgstr ""

#: ../../topics/http/sessions.txt:40
# 90bb371882094f57b2d141eabf639e13
msgid "Using database-backed sessions"
msgstr ""

#: ../../topics/http/sessions.txt:42
# 1aba97bd4a7146aa940b6fa1091cd218
msgid "If you want to use a database-backed session, you need to add ``'django.contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../topics/http/sessions.txt:45
# 888b97acb8f7439e9d2b32913cdcbe0d
msgid "Once you have configured your installation, run ``manage.py syncdb`` to install the single database table that stores session data."
msgstr ""

#: ../../topics/http/sessions.txt:51
# 893526009d1c4246b6cb4bdefe204c5a
msgid "Using cached sessions"
msgstr ""

#: ../../topics/http/sessions.txt:53
# ef33dcff4bb84ff9b7e848c67b80dcde
msgid "For better performance, you may want to use a cache-based session backend."
msgstr ""

#: ../../topics/http/sessions.txt:55
# 6ed577dd94a84051980d16f1cdd3d8fe
msgid "To store session data using Django's cache system, you'll first need to make sure you've configured your cache; see the :doc:`cache documentation </topics/cache>` for details."
msgstr ""

#: ../../topics/http/sessions.txt:61
# 845992f0077141638c2e8e43b02288da
msgid "You should only use cache-based sessions if you're using the Memcached cache backend. The local-memory cache backend doesn't retain data long enough to be a good choice, and it'll be faster to use file or database sessions directly instead of sending everything through the file or database cache backends."
msgstr ""

#: ../../topics/http/sessions.txt:67
# 315e69b289494493a3c35d9bfe48e90b
msgid "If you have multiple caches defined in :setting:`CACHES`, Django will use the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` to the name of that cache."
msgstr ""

#: ../../topics/http/sessions.txt:74
# 0ffb04f198774d769f59e3e18f5113e8
msgid "Once your cache is configured, you've got two choices for how to store data in the cache:"
msgstr ""

#: ../../topics/http/sessions.txt:77
# 104f47cda57a470bae75620585b34bde
msgid "Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache\"`` for a simple caching session store. Session data will be stored directly your cache. However, session data may not be persistent: cached data can be evicted if the cache fills up or if the cache server is restarted."
msgstr ""

#: ../../topics/http/sessions.txt:83
# d3bcfa0ca2de4320a64df4103f84e489
msgid "For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- every write to the cache will also be written to the database. Session reads only use the database if the data is not already in the cache."
msgstr ""

#: ../../topics/http/sessions.txt:89
# a1c4d328c54d4b3daf29753b9353dd1f
msgid "Both session stores are quite fast, but the simple cache is faster because it disregards persistence. In most cases, the ``cached_db`` backend will be fast enough, but if you need that last bit of performance, and are willing to let session data be expunged from time to time, the ``cache`` backend is for you."
msgstr ""

#: ../../topics/http/sessions.txt:94
# cf3d2f632a514d7a95f6351dfaca9254
msgid "If you use the ``cached_db`` session backend, you also need to follow the configuration instructions for the `using database-backed sessions`_."
msgstr ""

#: ../../topics/http/sessions.txt:98
# 63f69f7c1e4f4361ad306a111b0d07c9
msgid "Using file-based sessions"
msgstr ""

#: ../../topics/http/sessions.txt:100
# 17c56d233313468fbe1b5775b96fde98
msgid "To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``\"django.contrib.sessions.backends.file\"``."
msgstr ""

#: ../../topics/http/sessions.txt:103
# 3e96f415ad7844ba9fe26c034c58ff56
msgid "You might also want to set the :setting:`SESSION_FILE_PATH` setting (which defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to control where Django stores session files. Be sure to check that your Web server has permissions to read and write to this location."
msgstr ""

#: ../../topics/http/sessions.txt:111
# 7db2826c862649c3b1233657763eb228
msgid "Using cookie-based sessions"
msgstr ""

#: ../../topics/http/sessions.txt:115
# 9901b640059d438ea241b141073329c4
msgid "To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to ``\"django.contrib.sessions.backends.signed_cookies\"``. The session data will be stored using Django's tools for :doc:`cryptographic signing </topics/signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

#: ../../topics/http/sessions.txt:122
# bf17badb78524fddbd8edfce2adc12a4
msgid "It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting ``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

#: ../../topics/http/sessions.txt:127
# 19054cfdea444e8aaa1fb03202c61037
msgid "**The session data is signed but not encrypted**"
msgstr ""

#: ../../topics/http/sessions.txt:129
# fcc42b17a2f94783aef4a318544afb80
msgid "When using the cookies backend the session data can be read by the client."
msgstr ""

#: ../../topics/http/sessions.txt:131
# 9b15a5154f5b411f9beb73632e549851
msgid "A MAC (Message Authentication Code) is used to protect the data against changes by the client, so that the session data will be invalidated when being tampered with. The same invalidation happens if the client storing the cookie (e.g. your user's browser) can't store all of the session cookie and drops data. Even though Django compresses the data, it's still entirely possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

#: ../../topics/http/sessions.txt:138
# 8985e6fb297b4bcf925656dd57f01e6a
msgid "**No freshness guarantee**"
msgstr ""

#: ../../topics/http/sessions.txt:140
# 161cbcf0b3f446b2b8521dfd9ce47400
msgid "Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to `replay attacks`_. Cookies will only be detected as 'stale' if they are older than your :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../topics/http/sessions.txt:149
# 08a30b69cb8b455eb7a1bdad770eca44
msgid "**Performance**"
msgstr ""

#: ../../topics/http/sessions.txt:151
# 863aea80921548a5ae327b0a9053ba21
msgid "Finally, the size of a cookie can have an impact on the `speed of your site`_."
msgstr ""

#: ../../topics/http/sessions.txt:158
# 8fc304d351664c2296f7933556f23549
msgid "Using sessions in views"
msgstr ""

#: ../../topics/http/sessions.txt:160
# 5ccf7f47dcbd425d815bb3634dae6ac3
msgid "When ``SessionMiddleware`` is activated, each :class:`~django.http.HttpRequest` object -- the first argument to any Django view function -- will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

#: ../../topics/http/sessions.txt:164
# 990d35cfa8614af8a8379f67ecf3825c
msgid "You can read it and write to ``request.session`` at any point in your view. You can edit it multiple times."
msgstr ""

#: ../../topics/http/sessions.txt:169
# 3c0090dba8c540d9810f72e7e6b75781
msgid "This is the base class for all session objects. It has the following standard dictionary methods:"
msgstr ""

#: ../../topics/http/sessions.txt:174
# a919ae58ddc4420d816db34f9c83ef32
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

#: ../../topics/http/sessions.txt:178
# bf15edc4c45a4e2aae8ab489fc1745a7
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

#: ../../topics/http/sessions.txt:182
# 1f10658cb449438b80b2f4e5b5932335
msgid "Example: ``del request.session['fav_color']``. This raises ``KeyError`` if the given ``key`` isn't already in the session."
msgstr ""

#: ../../topics/http/sessions.txt:187
# c3a2f5ac659e4989be6d94e6d037b057
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

#: ../../topics/http/sessions.txt:191
# c6a3f4e172ac4d678731e370aedbf27f
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

#: ../../topics/http/sessions.txt:195
# cd9b6ad970c04d4d93cf84708487959a
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

#: ../../topics/http/sessions.txt:205
# 4db998f4bf7b457ebe8758ddaff6d55b
msgid "It also has these methods:"
msgstr ""

#: ../../topics/http/sessions.txt:209
# 17a6ce1aa9654e57816017e8ad1ac983
msgid "Delete the current session data from the session and regenerate the session key value that is sent back to the user in the cookie. This is used if you want to ensure that the previous session data can't be accessed again from the user's browser (for example, the :func:`django.contrib.auth.logout()` function calls it)."
msgstr ""

#: ../../topics/http/sessions.txt:217
# 7be8dfbfd93a46c29470ec772e189883
msgid "Sets a test cookie to determine whether the user's browser supports cookies. Due to the way cookies work, you won't be able to test this until the user's next page request. See `Setting test cookies`_ below for more information."
msgstr ""

#: ../../topics/http/sessions.txt:224
# 73a8aa401e5e4a63aa323ae73e0b492b
msgid "Returns either ``True`` or ``False``, depending on whether the user's browser accepted the test cookie. Due to the way cookies work, you'll have to call ``set_test_cookie()`` on a previous, separate page request. See `Setting test cookies`_ below for more information."
msgstr ""

#: ../../topics/http/sessions.txt:231
# 478873e51b084bcd996175b4724c9c09
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

#: ../../topics/http/sessions.txt:235
# fd6ddea07c2547558267e10ae9e4a073
msgid "Sets the expiration time for the session. You can pass a number of different values:"
msgstr ""

#: ../../topics/http/sessions.txt:238
# 24850235fe0b45dc94f1630eb6af4ede
msgid "If ``value`` is an integer, the session will expire after that many seconds of inactivity. For example, calling ``request.session.set_expiry(300)`` would make the session expire in 5 minutes."
msgstr ""

#: ../../topics/http/sessions.txt:243
# 864f857498b146358beaa6ab14488e08
msgid "If ``value`` is a ``datetime`` or ``timedelta`` object, the session will expire at that specific date/time."
msgstr ""

#: ../../topics/http/sessions.txt:246
# 14e7b9162b824d8aad7b305eb0c5a01b
msgid "If ``value`` is ``0``, the user's session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../topics/http/sessions.txt:249
# 6b948c7087fc4f1d858c51fbfe7c3cb6
msgid "If ``value`` is ``None``, the session reverts to using the global session expiry policy."
msgstr ""

#: ../../topics/http/sessions.txt:252
# 57624efc442c4395b6340a19197dea2f
msgid "Reading a session is not considered activity for expiration purposes. Session expiration is computed from the last time the session was *modified*."
msgstr ""

#: ../../topics/http/sessions.txt:258
# 4c6afee9da334b17947f2d2f34c6a036
msgid "Returns the number of seconds until this session expires. For sessions with no custom expiration (or those set to expire at browser close), this will equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

#: ../../topics/http/sessions.txt:262
# 694783b1b7f84155bd8ff942c5ab013e
msgid "This function accepts two optional keyword arguments:"
msgstr ""

#: ../../topics/http/sessions.txt:264
# 9bc89ff2e0154b7b8f86e8da3e9d2074
msgid "``modification``: last modification of the session, as a :class:`~datetime.datetime` object. Defaults to the current time."
msgstr ""

#: ../../topics/http/sessions.txt:266
# c9c5a38be7e54f54a06240c762c3c5e6
msgid "``expiry``: expiry information for the session, as a :class:`~datetime.datetime` object, an :class:`int` (in seconds), or ``None``. Defaults to the value stored in the session by :meth:`set_expiry`, if there is one, or ``None``."
msgstr ""

#: ../../topics/http/sessions.txt:273
# a05b88190d804d49b59339c9e2dab113
msgid "Returns the date this session will expire. For sessions with no custom expiration (or those set to expire at browser close), this will equal the date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

#: ../../topics/http/sessions.txt:277
# 6e6972fdb79b46ae91095941275fa5f8
msgid "This function accepts the same keyword argumets as :meth:`get_expiry_age`."
msgstr ""

#: ../../topics/http/sessions.txt:281
# 5bbab79669b1416eb2abaee0e964865a
msgid "Returns either ``True`` or ``False``, depending on whether the user's session cookie will expire when the user's Web browser is closed."
msgstr ""

#: ../../topics/http/sessions.txt:288
# 5f86af055d9a4b53baf87123950ce992
msgid "Removes expired sessions from the session store. This class method is called by :djadmin:`clearsessions`."
msgstr ""

#: ../../topics/http/sessions.txt:292
# d0962d945b8c4d1e9a99ea6381aeb35b
msgid "Session object guidelines"
msgstr ""

#: ../../topics/http/sessions.txt:294
# 2a69f880d5cc4cd9807d573d27512a6f
msgid "Use normal Python strings as dictionary keys on ``request.session``. This is more of a convention than a hard-and-fast rule."
msgstr ""

#: ../../topics/http/sessions.txt:297
# c39d0bdad53c4d2c8e6453c0f269e685
msgid "Session dictionary keys that begin with an underscore are reserved for internal use by Django."
msgstr ""

#: ../../topics/http/sessions.txt:300
# 2db887ee80e44ae7b04d0bbc13fe8bbc
msgid "Don't override ``request.session`` with a new object, and don't access or set its attributes. Use it like a Python dictionary."
msgstr ""

#: ../../topics/http/sessions.txt:306
# 39a9d44928d749db9ff2dd11d5f46b06
msgid "This simplistic view sets a ``has_commented`` variable to ``True`` after a user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

#: ../../topics/http/sessions.txt:317
# 654374ba007c48b3906ac93391b1872d
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

#: ../../topics/http/sessions.txt:327
# 58246d9e194b45baa6c5aba1fdc5624b
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

#: ../../topics/http/sessions.txt:336
# 1e137f6222d245509417ef1b882ad206
msgid "The standard :meth:`django.contrib.auth.logout` function actually does a bit more than this to prevent inadvertent data leakage. It calls the :meth:`~backends.base.SessionBase.flush` method of ``request.session``. We are using this example as a demonstration of how to work with session objects, not as a full ``logout()`` implementation."
msgstr ""

#: ../../topics/http/sessions.txt:343
# a28b53e84f4a41859b799643e6d93127
msgid "Setting test cookies"
msgstr ""

#: ../../topics/http/sessions.txt:345
# 86a54ad64b1140fca36a978ce8db228d
msgid "As a convenience, Django provides an easy way to test whether the user's browser accepts cookies. Just call the :meth:`~backends.base.SessionBase.set_test_cookie` method of ``request.session`` in a view, and call :meth:`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not in the same view call."
msgstr ""

#: ../../topics/http/sessions.txt:352
# 53a5d677b510485d847981891ed78de8
msgid "This awkward split between ``set_test_cookie()`` and ``test_cookie_worked()`` is necessary due to the way cookies work. When you set a cookie, you can't actually tell whether a browser accepted it until the browser's next request."
msgstr ""

#: ../../topics/http/sessions.txt:356
# 2cff463765ea4159897eccd8d11a3097
msgid "It's good practice to use :meth:`~backends.base.SessionBase.delete_test_cookie()` to clean up after yourself. Do this after you've verified that the test cookie worked."
msgstr ""

#: ../../topics/http/sessions.txt:360
# 31b41beaa1e04fd3828d290f50d37db8
msgid "Here's a typical usage example::"
msgstr ""

#: ../../topics/http/sessions.txt:373
# dd5abdf7b56d4d42b1254c727190c8ea
msgid "Using sessions out of views"
msgstr ""

#: ../../topics/http/sessions.txt:375
# a8d60decf0c14c65b4f71357d28eb12f
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

#: ../../topics/http/sessions.txt:389
# 9a970c80b23f40c483b6c748358cb8a7
msgid "In order to prevent session fixation attacks, sessions keys that don't exist are regenerated::"
msgstr ""

#: ../../topics/http/sessions.txt:398
# ae74001d1ebc47cab0be667a00db3df7
msgid "If you're using the ``django.contrib.sessions.backends.db`` backend, each session is just a normal Django model. The ``Session`` model is defined in ``django/contrib/sessions/models.py``. Because it's a normal model, you can access sessions using the normal Django database API::"
msgstr ""

#: ../../topics/http/sessions.txt:408
# 7aecba8a7cf846868d912a2d055c190e
msgid "Note that you'll need to call ``get_decoded()`` to get the session dictionary. This is necessary because the dictionary is stored in an encoded format::"
msgstr ""

#: ../../topics/http/sessions.txt:417
# 6ca34c3b7a8143fbba13a0dd0f11a25e
msgid "When sessions are saved"
msgstr ""

#: ../../topics/http/sessions.txt:419
# b12ab2767a844a068dfdf855d72ec379
msgid "By default, Django only saves to the session database when the session has been modified -- that is if any of its dictionary values have been assigned or deleted::"
msgstr ""

#: ../../topics/http/sessions.txt:436
# ae91b8ac3eb34b70a7584527326a22a5
msgid "In the last case of the above example, we can tell the session object explicitly that it has been modified by setting the ``modified`` attribute on the session object::"
msgstr ""

#: ../../topics/http/sessions.txt:442
# 2fd5440b15474d76b660937ff6f4e188
msgid "To change this default behavior, set the :setting:`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, Django will save the session to the database on every single request."
msgstr ""

#: ../../topics/http/sessions.txt:446
# e8daa811d4154d50a90c91ec7075a1ee
msgid "Note that the session cookie is only sent when a session has been created or modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session cookie will be sent on every request."
msgstr ""

#: ../../topics/http/sessions.txt:450
# e8c7c18d47ac42b7885095e2600d7b49
msgid "Similarly, the ``expires`` part of a session cookie is updated each time the session cookie is sent."
msgstr ""

#: ../../topics/http/sessions.txt:457
# daae6aed93644dfab0995dae82998be2
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

#: ../../topics/http/sessions.txt:459
# 77465bd04af843189b5b1aacbacdf2ca
msgid "You can control whether the session framework uses browser-length sessions vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting."
msgstr ""

#: ../../topics/http/sessions.txt:463
# f7dea2bd48e3434684aa37623d7b9d0f
msgid "By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, which means session cookies will be stored in users' browsers for as long as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have to log in every time they open a browser."
msgstr ""

#: ../../topics/http/sessions.txt:468
# fe55f8a9586148e99655efb21b2445fe
msgid "If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django will use browser-length cookies -- cookies that expire as soon as the user closes his or her browser. Use this if you want people to have to log in every time they open a browser."
msgstr ""

#: ../../topics/http/sessions.txt:473
# 5982c83d5d5b460784413d14776ded15
msgid "This setting is a global default and can be overwritten at a per-session level by explicitly calling the :meth:`~backends.base.SessionBase.set_expiry` method of ``request.session`` as described above in `using sessions in views`_."
msgstr ""

#: ../../topics/http/sessions.txt:478
# 1ee039792e044aea9d7be2167f7de352
msgid "Clearing the session store"
msgstr ""

#: ../../topics/http/sessions.txt:480
# 98e6529c36a04a55b7a622781759160c
msgid "As users create new sessions on your website, session data can accumulate in your session store. If you're using the database backend, the ``django_session`` database table will grow. If you're using the file backend, your temporary directory will contain an increasing number of files."
msgstr ""

#: ../../topics/http/sessions.txt:485
# 73209ce6778f47749ead0a5b7aa40ad3
msgid "To understand this problem, consider what happens with the database backend. When a user logs in, Django adds a row to the ``django_session`` database table. Django updates this row each time the session data changes. If the user logs out manually, Django deletes the row. But if the user does *not* log out, the row never gets deleted. A similar process happens with the file backend."
msgstr ""

#: ../../topics/http/sessions.txt:491
# 6ee36539cf234f7e8c07b678f03d6871
msgid "Django does *not* provide automatic purging of expired sessions. Therefore, it's your job to purge expired sessions on a regular basis. Django provides a clean-up management command for this purpose: :djadmin:`clearsessions`. It's recommended to call this command on a regular basis, for example as a daily cron job."
msgstr ""

#: ../../topics/http/sessions.txt:497
# 28f8d509e6014f33acc5cf9f72b8a7ac
msgid "Note that the cache backend isn't vulnerable to this problem, because caches automatically delete stale data. Neither is the cookie backend, because the session data is stored by the users' browsers."
msgstr ""

#: ../../topics/http/sessions.txt:502
# 15928b26cf794ff4b9cb819ab5e62448
msgid "Settings"
msgstr ""

#: ../../topics/http/sessions.txt:504
# 2bd13424b3614acdbcdabd6b88d236e8
msgid "A few :doc:`Django settings </ref/settings>` give you control over session behavior:"
msgstr ""

#: ../../topics/http/sessions.txt:508
# f03ce54da52647c0b093ef44f2195289
msgid "SESSION_ENGINE"
msgstr ""

#: ../../topics/http/sessions.txt:510
# 57250717a06041ef8a606ce03034647a
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../topics/http/sessions.txt:512
# b3f0e8ebae97444d965034f9851ca630
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

#: ../../topics/http/sessions.txt:514
# fbc057ddeb874240a9ba09ece918571e
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../topics/http/sessions.txt:515
# 516d071308944e319086eea28de458a0
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../topics/http/sessions.txt:516
# adedd1d47a2d49a190e3db5585aaf8d0
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../topics/http/sessions.txt:517
# dd40f7c8d3fb4a49b589c4fc8263a519
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../topics/http/sessions.txt:518
# 6101153431b1490d861834a871236a35
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../topics/http/sessions.txt:520
# e55ac728a033444cb680803951e0c09c
msgid "See `configuring the session engine`_ for more details."
msgstr ""

#: ../../topics/http/sessions.txt:523
# bd7b0ca1b94f4dc88f7a454a8852baf9
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../topics/http/sessions.txt:525
# fc521308e8b5431288e13de11578d259
msgid "Default: ``/tmp/``"
msgstr ""

#: ../../topics/http/sessions.txt:527
# 8b635c2758b24185bc9006c00a8050d3
msgid "If you're using file-based session storage, this sets the directory in which Django will store session data."
msgstr ""

#: ../../topics/http/sessions.txt:531
# 0d28556301bc43758fac9bc97d435675
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../topics/http/sessions.txt:533
# ce4905467ffa439783a511ff3c9f148f
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../topics/http/sessions.txt:535
# 3cea6865aac741a59badd51f8060bb88
msgid "The age of session cookies, in seconds."
msgstr ""

#: ../../topics/http/sessions.txt:538
# 7bc616d4eee7434e9b6d3085046aaceb
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../topics/http/sessions.txt:540
# 66b3e30541274e2ba4db9e1b3efdfd13
msgid "Default: ``None``"
msgstr ""

#: ../../topics/http/sessions.txt:542
# cfc5d509cd824fefbf692a794bba1036
msgid "The domain to use for session cookies. Set this to a string such as ``\".example.com\"`` (note the leading dot!) for cross-domain cookies, or use ``None`` for a standard domain cookie."
msgstr ""

#: ../../topics/http/sessions.txt:547
# 663ae70f9728422b92b08b77c3dddea6
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../topics/http/sessions.txt:549
# e5015e59f36a462393200562c5f35768
msgid "Default: ``True``"
msgstr ""

#: ../../topics/http/sessions.txt:551
# dce41029bd7b4285b10ea458e343630e
msgid "Whether to use HTTPOnly flag on the session cookie. If this is set to ``True``, client-side JavaScript will not to be able to access the session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:555
# eb177a50d45f4c2999e4498b81e3734a
msgid "HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not part of the :rfc:`2109` standard for cookies, and it isn't honored consistently by all browsers. However, when it is honored, it can be a useful way to mitigate the risk of client side script accessing the protected cookie data."
msgstr ""

#: ../../topics/http/sessions.txt:567
# 245df9df0d004629b944b272fdc05b81
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../topics/http/sessions.txt:569
# 7049bef7287f429c87ca943184fce5f3
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../topics/http/sessions.txt:571
# 6e4410f69e12420283ccf92341b8453e
msgid "The name of the cookie to use for sessions. This can be whatever you want."
msgstr ""

#: ../../topics/http/sessions.txt:574
# 382bd78b6002473785d68e14af75e951
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../topics/http/sessions.txt:576
# f5dfa06322de48ddbe6b4cd748e1e6e9
msgid "Default: ``'/'``"
msgstr ""

#: ../../topics/http/sessions.txt:578
# a86d867912304e2780a5541f92d59ae6
msgid "The path set on the session cookie. This should either match the URL path of your Django installation or be parent of that path."
msgstr ""

#: ../../topics/http/sessions.txt:581
# 5a58553487114264877cb53460c06d00
msgid "This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:586
# 825648f4f9cf4806aafc5ac09fb8f10f
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../topics/http/sessions.txt:590
# 0b93080469504ed99cd82f18455eff8f
msgid "Whether to use a secure cookie for the session cookie. If this is set to ``True``, the cookie will be marked as \"secure,\" which means browsers may ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../topics/http/sessions.txt:595
# 695217477bfa4e2ca07718774bead831
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../topics/http/sessions.txt:599
# 3d88637523d946d98044b8c0132d9261
msgid "Whether to expire the session when the user closes his or her browser. See \"Browser-length sessions vs. persistent sessions\" above."
msgstr ""

#: ../../topics/http/sessions.txt:603
# 46318e5da0a64c828d862b872bb1751c
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../topics/http/sessions.txt:607
# 762fbeb253b142b78a3e1260905e0405
msgid "Whether to save the session data on every request. If this is ``False`` (default), then the session data will only be saved if it has been modified -- that is, if any of its dictionary values have been assigned or deleted."
msgstr ""

#: ../../topics/http/sessions.txt:614
# e576e109f8e4498d93a11217a55e2be2
msgid "Technical details"
msgstr ""

#: ../../topics/http/sessions.txt:616
# 4230c0c4c2c243f3a169290871583310
msgid "The session dictionary should accept any pickleable Python object. See the :mod:`pickle` module for more information."
msgstr ""

#: ../../topics/http/sessions.txt:619
# 053b03e6e614451aa698fd40b87f71f4
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

#: ../../topics/http/sessions.txt:621
# 9e9e778bf0e84366b8a1738ecffa0dc1
msgid "Django only sends a cookie if it needs to. If you don't set any session data, it won't send a session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:625
# c1c2fc27a19746719ee568f9d184b79e
msgid "Session IDs in URLs"
msgstr ""

#: ../../topics/http/sessions.txt:627
# 8b15f238422c46f28c081dc032d8e213
msgid "The Django sessions framework is entirely, and solely, cookie-based. It does not fall back to putting session IDs in URLs as a last resort, as PHP does. This is an intentional design decision. Not only does that behavior make URLs ugly, it makes your site vulnerable to session-ID theft via the \"Referer\" header."
msgstr ""

#: ../../topics/http/shortcuts.txt:3
# a2f78ee4352c4d9b8d4331c47be5d939
msgid "Django shortcut functions"
msgstr ""

#: ../../topics/http/shortcuts.txt:11
# 6f58048b79764a8cb74eecae4061f5f5
msgid "The package ``django.shortcuts`` collects helper functions and classes that \"span\" multiple levels of MVC. In other words, these functions/classes introduce controlled coupling for convenience's sake."
msgstr ""

#: ../../topics/http/shortcuts.txt:16
# 406700583a6846ca96b5bc192e3e8b42
msgid "``render``"
msgstr ""

#: ../../topics/http/shortcuts.txt:20
# 62e82fb1cc404d7eb676e4e8049c87f1
msgid "Combines a given template with a given context dictionary and returns an :class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

#: ../../topics/http/shortcuts.txt:23
# ca3d936c6a6144478130eff72f02eaaa
msgid ":func:`render()` is the same as a call to :func:`render_to_response()` with a `context_instance` argument that forces the use of a :class:`~django.template.RequestContext`."
msgstr ""

#: ../../topics/http/shortcuts.txt:28
#: ../../topics/http/shortcuts.txt:96
#: ../../topics/http/shortcuts.txt:228
#: ../../topics/http/shortcuts.txt:274
#: ../../topics/pagination.txt:143
# 0ac66e562cd24232abfb09a3548eb525
# 60ad1756313840e0bcbf6416810311b5
# 85f409c039104636906effc8ac389e83
# 7c40d31430c64fcea80066621d0fc7ef
# 9be98bfa5ed9497abcbac8bc9def2e53
msgid "Required arguments"
msgstr ""

#: ../../topics/http/shortcuts.txt:31
# b7bd9190d9014227b7778659f6f4a320
msgid "The request object used to generate this response."
msgstr ""

#: ../../topics/http/shortcuts.txt:34
# 343ed7fd24ca48f98bae16d0e4f7e8a1
msgid "The full name of a template to use or sequence of template names."
msgstr ""

#: ../../topics/http/shortcuts.txt:37
#: ../../topics/http/shortcuts.txt:105
#: ../../topics/pagination.txt:154
# 6b4df55c6a414f538f57cc5a6f92833a
# 7113da272700436a8a7c0cc4933d784b
# f4914a57771b4b96be566b4e7dbadf45
msgid "Optional arguments"
msgstr ""

#: ../../topics/http/shortcuts.txt:40
#: ../../topics/http/shortcuts.txt:108
# 0b818be5c3bb4d5fb93b64a039fda861
# 363dc1f3a9ca459d82b8b3fe3156a626
msgid "A dictionary of values to add to the template context. By default, this is an empty dictionary. If a value in the dictionary is callable, the view will call it just before rendering the template."
msgstr ""

#: ../../topics/http/shortcuts.txt:45
# eef52cb4be4e46ed92d885d86508359c
msgid "The context instance to render the template with. By default, the template will be rendered with a ``RequestContext`` instance (filled with values from ``request`` and ``dictionary``)."
msgstr ""

#: ../../topics/http/shortcuts.txt:50
#: ../../topics/http/shortcuts.txt:125
# f08e975f5a7142df9364993cb0bad858
# d258844972034c77a9a567b64ef314f3
msgid "The MIME type to use for the resulting document. Defaults to the value of the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

#: ../../topics/http/shortcuts.txt:54
# 2d33a9c1cf24422184768298e9cdf9a9
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

#: ../../topics/http/shortcuts.txt:57
# 44c3b5ca4d0e4ad1afa16e0a793f49fa
msgid "A hint indicating which application contains the current view. See the :ref:`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` for more information."
msgstr ""

#: ../../topics/http/shortcuts.txt:62
#: ../../topics/http/shortcuts.txt:129
#: ../../topics/http/shortcuts.txt:240
#: ../../topics/http/shortcuts.txt:286
#: ../../topics/http/urls.txt:66
#: ../../topics/http/urls.txt:746
#: ../../topics/pagination.txt:13
#: ../../topics/testing.txt:1105
#: ../../topics/testing.txt:1156
# 74c7136d39f64ae9ab81272889d5ac57
# 4312349ac0e44ca7bbdbb0416671d588
# 03c8251919d94c8d844389bc9297e748
# 9c06509bcb8e49ca9b4e099df27d3319
# fffb15dbba1c4d27a4531d902cdd48df
# c4a54e09176846ebbafd4672af2b2e70
# fcb23556734a47f69345d7af8f5c9726
# 2668c46608db4a31a1b53a68545c6570
# 4489b1e3e400421eba785fb55a1d8538
msgid "Example"
msgstr ""

#: ../../topics/http/shortcuts.txt:64
#: ../../topics/http/shortcuts.txt:131
# 72794f2d2e034db6a030081f9e1d0baf
# 9e7c17a313ee452a84f07f11f6992ffd
msgid "The following example renders the template ``myapp/index.html`` with the MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

#: ../../topics/http/shortcuts.txt:74
#: ../../topics/http/shortcuts.txt:141
#: ../../topics/http/shortcuts.txt:250
#: ../../topics/http/shortcuts.txt:295
# b7cc21b9fa3b45b0a8e931b01f95aa2d
# 06910fd6dbbd489e80690f9dae148ef0
# 942f518b25f441e0b32242fc5f56f955
# 8650725fcbdf4ac8906d9ad93e8dbb8f
msgid "This example is equivalent to::"
msgstr ""

#: ../../topics/http/shortcuts.txt:88
# 94576ac577a4476ba5029c4736a12852
msgid "``render_to_response``"
msgstr ""

#: ../../topics/http/shortcuts.txt:92
# 384bbf30e05647808f0d6591fa69f52a
msgid "Renders a given template with a given context dictionary and returns an :class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

#: ../../topics/http/shortcuts.txt:99
# 1b87d7e238ec4c8e931675d1e1c1c002
msgid "The full name of a template to use or sequence of template names. If a sequence is given, the first template that exists will be used. See the :ref:`template loader documentation <ref-templates-api-the-python-api>` for more information on how templates are found."
msgstr ""

#: ../../topics/http/shortcuts.txt:113
# 21c85febb0604dff92b33c0690f8c646
msgid "The context instance to render the template with. By default, the template will be rendered with a :class:`~django.template.Context` instance (filled with values from ``dictionary``). If you need to use :ref:`context processors <subclassing-context-requestcontext>`, render the template with a :class:`~django.template.RequestContext` instance instead. Your code might look something like this::"
msgstr ""

#: ../../topics/http/shortcuts.txt:154
# 4c4568deb2614fad979015d27cc48940
msgid "``redirect``"
msgstr ""

#: ../../topics/http/shortcuts.txt:158
# eebae330e76248e0a3979ff245b588cd
msgid "Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL for the arguments passed."
msgstr ""

#: ../../topics/http/shortcuts.txt:161
# 5fb0e808bd5244fc9c5823cf74aa2030
msgid "The arguments could be:"
msgstr ""

#: ../../topics/http/shortcuts.txt:163
# 58b8170f201d4ed2b67981598ca4fee7
msgid "A model: the model's `get_absolute_url()` function will be called."
msgstr ""

#: ../../topics/http/shortcuts.txt:165
# 1391b4a39bb84d5295830483e3f27495
msgid "A view name, possibly with arguments: `urlresolvers.reverse()` will be used to reverse-resolve the name."
msgstr ""

#: ../../topics/http/shortcuts.txt:168
# 18c8e4fb8c2841c6b0f5cbded2883e7f
msgid "A URL, which will be used as-is for the redirect location."
msgstr ""

#: ../../topics/http/shortcuts.txt:170
# cc128f6f7e0347b3a40615474e55588b
msgid "By default issues a temporary redirect; pass ``permanent=True`` to issue a permanent redirect"
msgstr ""

#: ../../topics/http/shortcuts.txt:176
# 5c461b9bed41466bb327fa25ab77bc2e
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

#: ../../topics/http/shortcuts.txt:178
# ae462a232c8343aea87b2d86b2dbd40d
msgid "By passing some object; that object's :meth:`~django.db.models.Model.get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

#: ../../topics/http/shortcuts.txt:189
# 193ac378e26f40b6b00806e810010b6d
msgid "By passing the name of a view and optionally some positional or keyword arguments; the URL will be reverse resolved using the :func:`~django.core.urlresolvers.reverse` method::"
msgstr ""

#: ../../topics/http/shortcuts.txt:197
# 4450c3d3af9e4a47b7bc59d449155984
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

#: ../../topics/http/shortcuts.txt:203
# 3a8c0e1a4fb74e0f8afcdea57eed8485
msgid "This also works with full URLs::"
msgstr ""

#: ../../topics/http/shortcuts.txt:209
# 1f12b46f21cd4cbdbacc037f3f6e9974
msgid "By default, :func:`redirect` returns a temporary redirect. All of the above forms accept a ``permanent`` argument; if set to ``True`` a permanent redirect will be returned::"
msgstr ""

#: ../../topics/http/shortcuts.txt:219
# 5ccb7ffffb2f44b99e1e36d85a430801
msgid "``get_object_or_404``"
msgstr ""

#: ../../topics/http/shortcuts.txt:223
# 4f9e39bdb8fd43db8e635e6068f6ced4
msgid "Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model manager, but it raises :class:`~django.http.Http404` instead of the model's :class:`~django.core.exceptions.DoesNotExist` exception."
msgstr ""

#: ../../topics/http/shortcuts.txt:231
# 1cc65870f99241db94c0d4da2a83f184
msgid "A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :class:`~django.db.models.query.QuerySet` instance from which to get the object."
msgstr ""

#: ../../topics/http/shortcuts.txt:236
#: ../../topics/http/shortcuts.txt:282
# e14082398d684e0397b1b7f4ee1dc4d8
# d534c86ba2bb4be38f7a3432590fb1e0
msgid "Lookup parameters, which should be in the format accepted by ``get()`` and ``filter()``."
msgstr ""

#: ../../topics/http/shortcuts.txt:242
# 5700093efc6646b8926e53eecba065ee
msgid "The following example gets the object with the primary key of 1 from ``MyModel``::"
msgstr ""

#: ../../topics/http/shortcuts.txt:260
# e3a57eb671f4454b9103a99129fb25c5
msgid "Note: As with ``get()``, a :class:`~django.core.exceptions.MultipleObjectsReturned` exception will be raised if more than one object is found."
msgstr ""

#: ../../topics/http/shortcuts.txt:265
# 7895cbc5e54244e6a64ff361502bdbde
msgid "``get_list_or_404``"
msgstr ""

#: ../../topics/http/shortcuts.txt:269
# a915a3bb0e074a00992f742a2fd1fce8
msgid "Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a given model manager, raising :class:`~django.http.Http404` if the resulting list is empty."
msgstr ""

#: ../../topics/http/shortcuts.txt:277
# 4d2d1b7945d049c7bbfd84f25355de8c
msgid "A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

#: ../../topics/http/shortcuts.txt:288
# 197f931be20f4557a7ef4dc05cdc6bf3
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

#: ../../topics/http/urls.txt:3
# c96ac402e96241589250d9d7fbe97857
msgid "URL dispatcher"
msgstr ""

#: ../../topics/http/urls.txt:5
# 6807af3170c848c9bca85591f112c258
msgid "A clean, elegant URL scheme is an important detail in a high-quality Web application. Django lets you design URLs however you want, with no framework limitations."
msgstr ""

#: ../../topics/http/urls.txt:9
# 9edb2d8d76e7408d9f762f10826235c3
msgid "There's no ``.php`` or ``.cgi`` required, and certainly none of that ``0,2097,1-1-1928,00`` nonsense."
msgstr ""

#: ../../topics/http/urls.txt:12
# 031d678d301a488e828328d3d04dd6bf
msgid "See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, for excellent arguments on why URLs should be clean and usable."
msgstr ""

#: ../../topics/http/urls.txt:20
# e937630694c84bb3bbd89bf2448c350a
msgid "To design URLs for an app, you create a Python module informally called a **URLconf** (URL configuration). This module is pure Python code and is a simple mapping between URL patterns (simple regular expressions) to Python functions (your views)."
msgstr ""

#: ../../topics/http/urls.txt:25
# 8044af156b354dde811f74dd61e8c9c8
msgid "This mapping can be as short or as long as needed. It can reference other mappings. And, because it's pure Python code, it can be constructed dynamically."
msgstr ""

#: ../../topics/http/urls.txt:37
# e9d221e4d9624abdb399936bbfda8419
msgid "How Django processes a request"
msgstr ""

#: ../../topics/http/urls.txt:39
# 42191331039f42f997ad61ad0e0312b4
msgid "When a user requests a page from your Django-powered site, this is the algorithm the system follows to determine which Python code to execute:"
msgstr ""

#: ../../topics/http/urls.txt:42
# d030f0e4d4504e5ea6b961574dbf7352
msgid "Django determines the root URLconf module to use. Ordinarily, this is the value of the :setting:`ROOT_URLCONF` setting, but if the incoming ``HttpRequest`` object has an attribute called ``urlconf`` (set by middleware :ref:`request processing <request-middleware>`), its value will be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../topics/http/urls.txt:48
# 0822a99698e6410d88fb6d96175b96a9
msgid "Django loads that Python module and looks for the variable ``urlpatterns``. This should be a Python list, in the format returned by the function :func:`django.conf.urls.patterns`."
msgstr ""

#: ../../topics/http/urls.txt:52
# 35d453e64e77418aa7ce4dcb0210f3d3
msgid "Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL."
msgstr ""

#: ../../topics/http/urls.txt:55
# b8bfedb862da4f4894673ab2eb2c6ad9
msgid "Once one of the regexes matches, Django imports and calls the given view, which is a simple Python function (or a :doc:`class based view </topics/class-based-views/index>`). The view gets passed an :class:`~django.http.HttpRequest` as its first argument and any values captured in the regex as remaining arguments."
msgstr ""

#: ../../topics/http/urls.txt:61
# 0736a500d6ea40568ba7a72cac89ad5b
msgid "If no regex matches, or if an exception is raised during any point in this process, Django invokes an appropriate error-handling view. See `Error handling`_ below."
msgstr ""

#: ../../topics/http/urls.txt:68
# 55914fd6df6042bfa92ee8426fbcc7a1
msgid "Here's a sample URLconf::"
msgstr ""

#: ../../topics/http/urls.txt:81
# 40970daa21024caea5baea63ddbaa553
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

#: ../../topics/http/urls.txt:83
# b837a79642cd42988779164910aa8459
msgid "There's no need to add a leading slash, because every URL has that. For example, it's ``^articles``, not ``^/articles``."
msgstr ""

#: ../../topics/http/urls.txt:86
# 70c4dabf76d946a5b5b1fd9a2ff1d05f
msgid "The ``'r'`` in front of each regular expression string is optional but recommended. It tells Python that a string is \"raw\" -- that nothing in the string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

#: ../../topics/http/urls.txt:90
# 6414fb131e344819842d08661688f664
msgid "Example requests:"
msgstr ""

#: ../../topics/http/urls.txt:92
# 0942ff2788bb400fb269dfa9954334a9
msgid "A request to ``/articles/2005/03/`` would match the third entry in the list. Django would call the function ``news.views.month_archive(request, '2005', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:96
# 91da0d0857d346269768407b686bd9f2
msgid "``/articles/2005/3/`` would not match any URL patterns, because the third entry in the list requires two digits for the month."
msgstr ""

#: ../../topics/http/urls.txt:99
# 1626516c96b0470ea21ce8faa2f16650
msgid "``/articles/2003/`` would match the first pattern in the list, not the second one, because the patterns are tested in order, and the first one is the first test to pass. Feel free to exploit the ordering to insert special cases like this."
msgstr ""

#: ../../topics/http/urls.txt:104
# 9ff4ccd110354f84ae35a67ace774673
msgid "``/articles/2003`` would not match any of these patterns, because each pattern requires that the URL end with a slash."
msgstr ""

#: ../../topics/http/urls.txt:107
# e822f097916d4d6badeeeb7ffb51a3a3
msgid "``/articles/2003/03/03/`` would match the final pattern. Django would call the function ``news.views.article_detail(request, '2003', '03', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:113
# d5a6490bf15c47cfb1d3d36a242e37af
msgid "Named groups"
msgstr ""

#: ../../topics/http/urls.txt:115
# 55aeaf415fec4ab6b703081a72e9846c
msgid "The above example used simple, *non-named* regular-expression groups (via parenthesis) to capture bits of the URL and pass them as *positional* arguments to a view. In more advanced usage, it's possible to use *named* regular-expression groups to capture URL bits and pass them as *keyword* arguments to a view."
msgstr ""

#: ../../topics/http/urls.txt:121
# b06dd2f6d8b846459c80865e940f5091
msgid "In Python regular expressions, the syntax for named regular-expression groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and ``pattern`` is some pattern to match."
msgstr ""

#: ../../topics/http/urls.txt:125
# 459b0a14447a4572919cf710eb132629
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

#: ../../topics/http/urls.txt:134
# e802ad96f4ae4f05b01cd06a8c940b0b
msgid "This accomplishes exactly the same thing as the previous example, with one subtle difference: The captured values are passed to view functions as keyword arguments rather than positional arguments. For example:"
msgstr ""

#: ../../topics/http/urls.txt:138
# f1f86b6d5eb141e5ad8a7ae3d76e65b0
msgid "A request to ``/articles/2005/03/`` would call the function ``news.views.month_archive(request, year='2005', month='03')``, instead of ``news.views.month_archive(request, '2005', '03')``."
msgstr ""

#: ../../topics/http/urls.txt:142
# d3cbfd73806f4117a597f965f8bc875b
msgid "A request to ``/articles/2003/03/03/`` would call the function ``news.views.article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

#: ../../topics/http/urls.txt:145
# 9a9451a37edf417ea97fdc11dd54a3a3
msgid "In practice, this means your URLconfs are slightly more explicit and less prone to argument-order bugs -- and you can reorder the arguments in your views' function definitions. Of course, these benefits come at the cost of brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

#: ../../topics/http/urls.txt:151
# c1d3c3a778ad4165b8b841e1a7f9eb1e
msgid "The matching/grouping algorithm"
msgstr ""

#: ../../topics/http/urls.txt:153
# 88d77b7e398647039dffbb309f93984d
msgid "Here's the algorithm the URLconf parser follows, with respect to named groups vs. non-named groups in a regular expression:"
msgstr ""

#: ../../topics/http/urls.txt:156
# 55cb58407d2a480187b7b1eaa398c74d
msgid "If there are any named arguments, it will use those, ignoring non-named arguments."
msgstr ""

#: ../../topics/http/urls.txt:159
# 04da58ef477d4cf38e70af288ec1ced0
msgid "Otherwise, it will pass all non-named arguments as positional arguments."
msgstr ""

#: ../../topics/http/urls.txt:161
# 6ae4ba9589d743fdb3d262562e391ba8
msgid "In both cases, any extra keyword arguments that have been given as per `Passing extra options to view functions`_ (below) will also be passed to the view."
msgstr ""

#: ../../topics/http/urls.txt:165
# f53b818b8ebd43f4a5233ad27714575e
msgid "What the URLconf searches against"
msgstr ""

#: ../../topics/http/urls.txt:167
# 67c79762776b497ab0c2670928290b7c
msgid "The URLconf searches against the requested URL, as a normal Python string. This does not include GET or POST parameters, or the domain name."
msgstr ""

#: ../../topics/http/urls.txt:170
# c0971e3650254791bc3a9171e13c98d8
msgid "For example, in a request to ``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``."
msgstr ""

#: ../../topics/http/urls.txt:173
# ed6df1aae256476fb664038ed72d8c14
msgid "In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will look for ``myapp/``."
msgstr ""

#: ../../topics/http/urls.txt:176
# 349ca2994baa45479e3cc1eedfbaa4cf
msgid "The URLconf doesn't look at the request method. In other words, all request methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same function for the same URL."
msgstr ""

#: ../../topics/http/urls.txt:181
# 1fcfb52af34c4de0ac4d1d353add0bc8
msgid "Notes on capturing text in URLs"
msgstr ""

#: ../../topics/http/urls.txt:183
# e050632026714c64a2ed1b83321d9313
msgid "Each captured argument is sent to the view as a plain Python string, regardless of what sort of match the regular expression makes. For example, in this URLconf line::"
msgstr ""

#: ../../topics/http/urls.txt:189
# d431926c49ef430b8a56c9f541ed73c0
msgid "...the ``year`` argument to ``news.views.year_archive()`` will be a string, not an integer, even though the ``\\d{4}`` will only match integer strings."
msgstr ""

#: ../../topics/http/urls.txt:192
# 54aea9fbe5a74c78942edb7093164535
msgid "A convenient trick is to specify default parameters for your views' arguments. Here's an example URLconf and view::"
msgstr ""

#: ../../topics/http/urls.txt:205
# ba8334048cd44ba3a330a13ff7f18f08
msgid "In the above example, both URL patterns point to the same view -- ``blog.views.page`` -- but the first pattern doesn't capture anything from the URL. If the first pattern matches, the ``page()`` function will use its default argument for ``num``, ``\"1\"``. If the second pattern matches, ``page()`` will use whatever ``num`` value was captured by the regex."
msgstr ""

#: ../../topics/http/urls.txt:212
# 5d698123a450409fafaf402877d111e4
msgid "Performance"
msgstr ""

#: ../../topics/http/urls.txt:214
# 7a2b7cdf5d1449048577c391960cb48a
msgid "Each regular expression in a ``urlpatterns`` is compiled the first time it's accessed. This makes the system blazingly fast."
msgstr ""

#: ../../topics/http/urls.txt:218
# b0e31d45b5fd4bcdaf94d23313578a29
msgid "Syntax of the urlpatterns variable"
msgstr ""

#: ../../topics/http/urls.txt:220
# 00910a8d07b549919ab1ec209da5a997
msgid "``urlpatterns`` should be a Python list, in the format returned by the function :func:`django.conf.urls.patterns`. Always use ``patterns()`` to create the ``urlpatterns`` variable."
msgstr ""

#: ../../topics/http/urls.txt:225
# 1f828e1926114150be3f786cfdee6c73
msgid "Error handling"
msgstr ""

#: ../../topics/http/urls.txt:227
# ebbe1e4dc96a487392d59136888a62c2
msgid "When Django can't find a regex matching the requested URL, or when an exception is raised, Django will invoke an error-handling view."
msgstr ""

#: ../../topics/http/urls.txt:230
# 52a33027bc704f72abebaf85a9d95b1b
msgid "The views to use for these cases are specified by three variables. Their default values should suffice for most projects, but further customization is possible by assigning values to them."
msgstr ""

#: ../../topics/http/urls.txt:234
# db3cbdd84c5f4bac8fa7e20012377492
msgid "See the documentation on :ref:`customizing error views <customizing-error-views>` for the full details."
msgstr ""

#: ../../topics/http/urls.txt:237
# e926b96eb57740c7ba3bda4853e8b459
msgid "Such values can be set in your root URLconf. Setting these variables in any other URLconf will have no effect."
msgstr ""

#: ../../topics/http/urls.txt:240
# 2c00263d05b84b52ab06cd5dbb7d53e7
msgid "Values must be callables, or strings representing the full Python import path to the view that should be called to handle the error condition at hand."
msgstr ""

#: ../../topics/http/urls.txt:243
# a3f36e7e2cae4254a7203a68574b0dfc
msgid "The variables are:"
msgstr ""

#: ../../topics/http/urls.txt:245
# 55cd452f39994a30b9d367afa3e9a070
msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr ""

#: ../../topics/http/urls.txt:246
# a88c9e508d954348b0658f06eb52fbfe
msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr ""

#: ../../topics/http/urls.txt:247
# ab4cf0f5ec1343d0969ad77bcfead5a0
msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr ""

#: ../../topics/http/urls.txt:255
# e3807f52786b4046873c39d23da379ef
msgid "The view prefix"
msgstr ""

#: ../../topics/http/urls.txt:257
# 193e885078c7467cb831000eccb025b8
msgid "You can specify a common prefix in your ``patterns()`` call, to cut down on code duplication."
msgstr ""

#: ../../topics/http/urls.txt:260
# 095bce493a8a444f860b4e2647c19153
msgid "Here's the example URLconf from the :doc:`Django overview </intro/overview>`::"
msgstr ""

#: ../../topics/http/urls.txt:270
# 28afcf0e9b8441d5b631340bb6ff54f1
msgid "In this example, each view has a common prefix -- ``'news.views'``. Instead of typing that out for each entry in ``urlpatterns``, you can use the first argument to the ``patterns()`` function to specify a prefix to apply to each view function."
msgstr ""

#: ../../topics/http/urls.txt:275
# cbaffb59f8eb44ab8380d0c9f33a28e2
msgid "With this in mind, the above example can be written more concisely as::"
msgstr ""

#: ../../topics/http/urls.txt:285
# aae995dcced74064a0a7488147d2e7ab
msgid "Note that you don't put a trailing dot (``\".\"``) in the prefix. Django puts that in automatically."
msgstr ""

#: ../../topics/http/urls.txt:289
# 8d67e64e42fb409889a0125082fcc21d
msgid "Multiple view prefixes"
msgstr ""

#: ../../topics/http/urls.txt:291
# 50630f531f414e5089b4b3edc43b6395
msgid "In practice, you'll probably end up mixing and matching views to the point where the views in your ``urlpatterns`` won't have a common prefix. However, you can still take advantage of the view prefix shortcut to remove duplication. Just add multiple ``patterns()`` objects together, like this:"
msgstr ""

#: ../../topics/http/urls.txt:296
# bf0a92b34b9f4f7aa14c7c773fafa38d
msgid "Old::"
msgstr ""

#: ../../topics/http/urls.txt:306
# 4c8a40bc8cce44c4bc686fb95e449ed2
msgid "New::"
msgstr ""

#: ../../topics/http/urls.txt:322
# b7b8423a800944d084b719ce6f006480
msgid "Including other URLconfs"
msgstr ""

#: ../../topics/http/urls.txt:324
# 739b22becd90434bbe11bcbba4089183
msgid "At any point, your ``urlpatterns`` can \"include\" other URLconf modules. This essentially \"roots\" a set of URLs below other ones."
msgstr ""

#: ../../topics/http/urls.txt:327
# 20d797717add40038bd183bcdb56cdaa
msgid "For example, here's an excerpt of the URLconf for the `Django Web site`_ itself. It includes a number of other URLconfs::"
msgstr ""

#: ../../topics/http/urls.txt:341
# 1b57c070229d46c9b68433ba14ae6e2f
msgid "Note that the regular expressions in this example don't have a ``$`` (end-of-string match character) but do include a trailing slash. Whenever Django encounters ``include()`` (:func:`django.conf.urls.include()`), it chops off whatever part of the URL matched up to that point and sends the remaining string to the included URLconf for further processing."
msgstr ""

#: ../../topics/http/urls.txt:347
# f73951ae6cbd4d48a0c6ba8b893aca60
msgid "Another possibility is to include additional URL patterns not by specifying the URLconf Python module defining them as the ``include()`` argument but by using directly the pattern list as returned by :func:`~django.conf.urls.patterns` instead. For example, consider this URLconf::"
msgstr ""

#: ../../topics/http/urls.txt:365
# 6a80107dd94044a7a2382be57adb0c0d
msgid "In this example, the ``/credit/reports/`` URL will be handled by the ``credit.views.report()`` Django view."
msgstr ""

#: ../../topics/http/urls.txt:371
# 92ea40eea60745279fd594cd257a00b4
msgid "Captured parameters"
msgstr ""

#: ../../topics/http/urls.txt:373
# 7d2a4bda18154428b6dbd2a48ffe87ae
msgid "An included URLconf receives any captured parameters from parent URLconfs, so the following example is valid::"
msgstr ""

#: ../../topics/http/urls.txt:387
# f7d5d10a86ba4ef585a01b94b27204c4
msgid "In the above example, the captured ``\"username\"`` variable is passed to the included URLconf, as expected."
msgstr ""

#: ../../topics/http/urls.txt:393
# 40853c5728eb467ba9b2369ca466ad59
msgid "Passing extra options to view functions"
msgstr ""

#: ../../topics/http/urls.txt:395
# ee55ad37babe40b6a3ee2962897b81a8
msgid "URLconfs have a hook that lets you pass extra arguments to your view functions, as a Python dictionary."
msgstr ""

#: ../../topics/http/urls.txt:398
# 0dd4ee753daa42afba9e761a2a2cb263
msgid "Any URLconf tuple can have an optional third element, which should be a dictionary of extra keyword arguments to pass to the view function."
msgstr ""

#: ../../topics/http/urls.txt:407
# dfb1c723da63409eaac6eeec14a2dbc6
msgid "In this example, for a request to ``/blog/2005/``, Django will call ``blog.views.year_archive(year='2005', foo='bar')``."
msgstr ""

#: ../../topics/http/urls.txt:410
# 7b0b21d3051848e8844b4de15f620f37
msgid "This technique is used in the :doc:`syndication framework </ref/contrib/syndication>` to pass metadata and options to views."
msgstr ""

#: ../../topics/http/urls.txt:416
# ae8ac54b53ca4bdbb6132f72f3634ae8
msgid "It's possible to have a URL pattern which captures named keyword arguments, and also passes arguments with the same names in its dictionary of extra arguments. When this happens, the arguments in the dictionary will be used instead of the arguments captured in the URL."
msgstr ""

#: ../../topics/http/urls.txt:422
# 4985154ff78e4d2fa6b2d9f021a7926e
msgid "Passing extra options to ``include()``"
msgstr ""

#: ../../topics/http/urls.txt:424
# 8d125cb6999f40bc9b4443fa3327268a
msgid "Similarly, you can pass extra options to :func:`~django.conf.urls.include`. When you pass extra options to ``include()``, *each* line in the included URLconf will be passed the extra options."
msgstr ""

#: ../../topics/http/urls.txt:428
# 1bf3664dc36b4a85b2e3ba43201c72bb
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

#: ../../topics/http/urls.txt:430
# eb5bde0fbee9457ca8b921f16663ecd0
msgid "Set one::"
msgstr ""

#: ../../topics/http/urls.txt:443
# 23abefc3fa584763b2721a1445514b86
msgid "Set two::"
msgstr ""

#: ../../topics/http/urls.txt:456
# ac7482b4910047688d3c83617eaf9a3d
msgid "Note that extra options will *always* be passed to *every* line in the included URLconf, regardless of whether the line's view actually accepts those options as valid. For this reason, this technique is only useful if you're certain that every view in the included URLconf accepts the extra options you're passing."
msgstr ""

#: ../../topics/http/urls.txt:462
# 15140957a0024225be72aed254ba57c5
msgid "Passing callable objects instead of strings"
msgstr ""

#: ../../topics/http/urls.txt:464
# aca11a6542614038a845f82650c34ce6
msgid "Some developers find it more natural to pass the actual Python function object rather than a string containing the path to its module. This alternative is supported -- you can pass any callable object as the view."
msgstr ""

#: ../../topics/http/urls.txt:468
# 4439c93743ef4fa1b58a5157646f91c3
msgid "For example, given this URLconf in \"string\" notation::"
msgstr ""

#: ../../topics/http/urls.txt:476
# 1c59cc7aa3914ceea76c07ea48dae663
msgid "You can accomplish the same thing by passing objects rather than strings. Just be sure to import the objects::"
msgstr ""

#: ../../topics/http/urls.txt:487
# c27b7cc768984661aebb78275a784296
msgid "The following example is functionally identical. It's just a bit more compact because it imports the module that contains the views, rather than importing each view individually::"
msgstr ""

#: ../../topics/http/urls.txt:499
# 6916fcdef3bd40678c7a7557f9bd1e77
msgid "The style you use is up to you."
msgstr ""

#: ../../topics/http/urls.txt:501
# 9e61ba9931204a96be19d5c88631f532
msgid "Note that if you use this technique -- passing objects rather than strings -- the view prefix (as explained in \"The view prefix\" above) will have no effect."
msgstr ""

#: ../../topics/http/urls.txt:504
# 6959731bfa414beaac36ae375cd15c18
msgid "Note that :doc:`class based views</topics/class-based-views/index>` must be imported::"
msgstr ""

#: ../../topics/http/urls.txt:514
# 3daf06bdf6c34bcaaa7f66e56ba88530
msgid "Reverse resolution of URLs"
msgstr ""

#: ../../topics/http/urls.txt:516
# 5aa92c9380314d19bc4970cae62004ff
msgid "A common need when working on a Django project is the possibility to obtain URLs in their final forms either for embedding in generated content (views and assets URLs, URLs shown to the user, etc.) or for handling of the navigation flow on the server side (redirections, etc.)"
msgstr ""

#: ../../topics/http/urls.txt:521
# 568918d22341430fab52ceb6c6676176
msgid "It is strongly desirable not having to hard-code these URLs (a laborious, non-scalable and error-prone strategy) or having to devise ad-hoc mechanisms for generating URLs that are parallel to the design described by the URLconf and as such in danger of producing stale URLs at some point."
msgstr ""

#: ../../topics/http/urls.txt:526
# 5c48e83bee2e4695907145128436b5cd
msgid "In other words, what's needed is a DRY mechanism. Among other advantages it would allow evolution of the URL design without having to go all over the project source code to search and replace outdated URLs."
msgstr ""

#: ../../topics/http/urls.txt:530
# 044f900a3b8445b3a6bca33b6723fa06
msgid "The piece of information we have available as a starting point to get a URL is an identification (e.g. the name) of the view in charge of handling it, other pieces of information that necessarily must participate in the lookup of the right URL are the types (positional, keyword) and values of the view arguments."
msgstr ""

#: ../../topics/http/urls.txt:535
# acdfcb7874844c9ba123f1862dca37da
msgid "Django provides a solution such that the URL mapper is the only repository of the URL design. You feed it with your URLconf and then it can be used in both directions:"
msgstr ""

#: ../../topics/http/urls.txt:539
# a185e77c54ca41718f0f4b5c5c26fafd
msgid "Starting with a URL requested by the user/browser, it calls the right Django view providing any arguments it might need with their values as extracted from the URL."
msgstr ""

#: ../../topics/http/urls.txt:543
# fdc012758d81461e8b3a863e8e0af590
msgid "Starting with the identification of the corresponding Django view plus the values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

#: ../../topics/http/urls.txt:546
# 483db640447240bfac16b56ba1bbb076
msgid "The first one is the usage we've been discussing in the previous sections. The second one is what is known as *reverse resolution of URLs*, *reverse URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

#: ../../topics/http/urls.txt:550
# 598bbf461fb74c928b5c658de2daebae
msgid "Django provides tools for performing URL reversing that match the different layers where URLs are needed:"
msgstr ""

#: ../../topics/http/urls.txt:553
# 45459d556b6e4fa685b4be3a99a6e40a
msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

#: ../../topics/http/urls.txt:555
# a3f8e5c9ac69493dbba070ecb2977366
msgid "In Python code: Using the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

#: ../../topics/http/urls.txt:558
# 08c82114f8a44b1abc4cbd9908d725aa
msgid "In higher level code related to handling of URLs of Django model instances: The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

#: ../../topics/http/urls.txt:564
# 3605c22fd68a41cd947bb35ef57ee9e2
msgid "Consider again this URLconf entry::"
msgstr ""

#: ../../topics/http/urls.txt:574
# f5b423f019d049ce8c8071abdf738385
msgid "According to this design, the URL for the archive corresponding to year *nnnn* is ``/articles/nnnn/``."
msgstr ""

#: ../../topics/http/urls.txt:577
# b822714d7fc64e3d87b495e6a7ab0485
msgid "You can obtain these in template code by using:"
msgstr ""

#: ../../topics/http/urls.txt:589
# ce70ea456c754f108b17c8784cfe933a
msgid "Or in Python code::"
msgstr ""

#: ../../topics/http/urls.txt:600
# 446293f68546497e8df3e378b594a237
msgid "If, for some reason, it was decided that the URLs where content for yearly article archives are published at should be changed then you would only need to change the entry in the URLconf."
msgstr ""

#: ../../topics/http/urls.txt:604
# 41cebebba06148cc8a6a7bef1e0a885b
msgid "In some scenarios where views are of a generic nature, a many-to-one relationship might exist between URLs and views. For these cases the view name isn't a good enough identificator for it when it comes the time of reversing URLs. Read the next section to know about the solution Django provides for this."
msgstr ""

#: ../../topics/http/urls.txt:612
# 38d460eea96c4e809c9d4babd9073f95
msgid "Naming URL patterns"
msgstr ""

#: ../../topics/http/urls.txt:614
# 5b172658c42f449198a6d5032f14cd9c
msgid "It's fairly common to use the same view function in multiple URL patterns in your URLconf. For example, these two URL patterns both point to the ``archive`` view::"
msgstr ""

#: ../../topics/http/urls.txt:623
# f84904e9214940e8b84d8c9cb82890c5
msgid "This is completely valid, but it leads to problems when you try to do reverse URL matching (through the :func:`~django.core.urlresolvers.reverse` function or the :ttag:`url` template tag). Continuing this example, if you wanted to retrieve the URL for the ``archive`` view, Django's reverse URL matcher would get confused, because *two* URL patterns point at that view."
msgstr ""

#: ../../topics/http/urls.txt:629
# ec35b02bdf684e1c9e1e9235ad5d9c96
msgid "To solve this problem, Django supports **named URL patterns**. That is, you can give a name to a URL pattern in order to distinguish it from other patterns using the same view and parameters. Then, you can use this name in reverse URL matching."
msgstr ""

#: ../../topics/http/urls.txt:634
# 0ebae9271b474e4894b15c81631624d3
msgid "Here's the above example, rewritten to use named URL patterns::"
msgstr ""

#: ../../topics/http/urls.txt:641
# 61089c53155c45a595495371a0c641fb
msgid "With these names in place (``full-archive`` and ``arch-summary``), you can target each pattern individually by using its name:"
msgstr ""

#: ../../topics/http/urls.txt:649
# f5f8886d054e4156800db04258ca3fd2
msgid "Even though both URL patterns refer to the ``archive`` view here, using the ``name`` parameter to ``url()`` allows you to tell them apart in templates."
msgstr ""

#: ../../topics/http/urls.txt:652
# 21c809f3a7d84dbcaceff742aff1a471
msgid "The string used for the URL name can contain any characters you like. You are not restricted to valid Python names."
msgstr ""

#: ../../topics/http/urls.txt:657
# 366ba99d94514f20b45e6ff724f74976
msgid "When you name your URL patterns, make sure you use names that are unlikely to clash with any other application's choice of names. If you call your URL pattern ``comment``, and another application does the same thing, there's no guarantee which URL will be inserted into your template when you use this name."
msgstr ""

#: ../../topics/http/urls.txt:663
# 40b9f2ff6a1e47b1a727df7301249eed
msgid "Putting a prefix on your URL names, perhaps derived from the application name, will decrease the chances of collision. We recommend something like ``myapp-comment`` instead of ``comment``."
msgstr ""

#: ../../topics/http/urls.txt:670
# f413ca6e03664efdb914d16d489c8bdc
msgid "URL namespaces"
msgstr ""

#: ../../topics/http/urls.txt:673
# 4a7ae731f7cc4eb8b7e813f5d5ebced1
msgid "Introduction"
msgstr ""

#: ../../topics/http/urls.txt:675
# 2cdd778f0271416f8ed0e4b697fde59c
msgid "When you need to deploy multiple instances of a single application, it can be helpful to be able to differentiate between instances. This is especially important when using :ref:`named URL patterns <naming-url-patterns>`, since multiple instances of a single application will share named URLs. Namespaces provide a way to tell these named URLs apart."
msgstr ""

#: ../../topics/http/urls.txt:681
# 432bae40cbc34110bd194da9eb09a154
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

#: ../../topics/http/urls.txt:686
# 79ef431c69a34055938664160455bb31
msgid "This describes the name of the application that is being deployed. Every instance of a single application will have the same application namespace. For example, Django's admin application has the somewhat predictable application namespace of ``'admin'``."
msgstr ""

#: ../../topics/http/urls.txt:692
# 1a32f2aad20b498aa7dbe690dc66f8ef
msgid "This identifies a specific instance of an application. Instance namespaces should be unique across your entire project. However, an instance namespace can be the same as the application namespace. This is used to specify a default instance of an application. For example, the default Django Admin instance has an instance namespace of ``'admin'``."
msgstr ""

#: ../../topics/http/urls.txt:698
# c8801e0d7ab44a769511a8189e6647af
msgid "Namespaced URLs are specified using the ``':'`` operator. For example, the main index page of the admin application is referenced using ``'admin:index'``. This indicates a namespace of ``'admin'``, and a named URL of ``'index'``."
msgstr ""

#: ../../topics/http/urls.txt:702
# 8376caaa936741829d038f8a0886efa9
msgid "Namespaces can also be nested. The named URL ``'foo:bar:whiz'`` would look for a pattern named ``'whiz'`` in the namespace ``'bar'`` that is itself defined within the top-level namespace ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:709
# fc1490a443fc4e19acd529860915311e
msgid "Reversing namespaced URLs"
msgstr ""

#: ../../topics/http/urls.txt:711
# c4de0c816f7341d099db0190dd57a8c0
msgid "When given a namespaced URL (e.g. ``'myapp:index'``) to resolve, Django splits the fully qualified name into parts, and then tries the following lookup:"
msgstr ""

#: ../../topics/http/urls.txt:714
# 9509b3e0ee0b4c6e988aee0b4579c9f3
msgid "First, Django looks for a matching :term:`application namespace` (in this example, ``'myapp'``). This will yield a list of instances of that application."
msgstr ""

#: ../../topics/http/urls.txt:718
# 29131d2091034119afbf57291a62f933
msgid "If there is a *current* application defined, Django finds and returns the URL resolver for that instance. The *current* application can be specified as an attribute on the template context - applications that expect to have multiple deployments should set the ``current_app`` attribute on any ``Context`` or ``RequestContext`` that is used to render a template."
msgstr ""

#: ../../topics/http/urls.txt:725
# e9e207fd34d944a48f7c7ce5f24d235f
msgid "The current application can also be specified manually as an argument to the :func:`django.core.urlresolvers.reverse` function."
msgstr ""

#: ../../topics/http/urls.txt:728
# 1d376ab9c375463c97534c5fbecdc39c
msgid "If there is no current application. Django looks for a default application instance. The default application instance is the instance that has an :term:`instance namespace` matching the :term:`application namespace` (in this example, an instance of the ``myapp`` called ``'myapp'``)."
msgstr ""

#: ../../topics/http/urls.txt:734
# 204f8e6face44da492936440615327b3
msgid "If there is no default application instance, Django will pick the last deployed instance of the application, whatever its instance name may be."
msgstr ""

#: ../../topics/http/urls.txt:737
# c1231f3acaa44f298b3fa162b1f45c44
msgid "If the provided namespace doesn't match an :term:`application namespace` in step 1, Django will attempt a direct lookup of the namespace as an :term:`instance namespace`."
msgstr ""

#: ../../topics/http/urls.txt:741
# 5d34927e8d8d4228ba046d3fa702155e
msgid "If there are nested namespaces, these steps are repeated for each part of the namespace until only the view name is unresolved. The view name will then be resolved into a URL in the namespace that has been found."
msgstr ""

#: ../../topics/http/urls.txt:748
# bdb130b8b0844f6385d95e4ea707080f
msgid "To show this resolution strategy in action, consider an example of two instances of ``myapp``: one called ``'foo'``, and one called ``'bar'``. ``myapp`` has a main index page with a URL named ``'index'``. Using this setup, the following lookups are possible:"
msgstr ""

#: ../../topics/http/urls.txt:753
#: ../../topics/http/urls.txt:770
# 21500f5e259145e094e1dff93e31b996
# 8b296931c52a4b5eab8033209cfab6ad
msgid "If one of the instances is current - say, if we were rendering a utility page in the instance ``'bar'`` - ``'myapp:index'`` will resolve to the index page of the instance ``'bar'``."
msgstr ""

#: ../../topics/http/urls.txt:757
# bdc6cdbbccb54193b093759186b4d7e6
msgid "If there is no current instance - say, if we were rendering a page somewhere else on the site - ``'myapp:index'`` will resolve to the last registered instance of ``myapp``. Since there is no default instance, the last instance of ``myapp`` that is registered will be used. This could be ``'foo'`` or ``'bar'``, depending on the order they are introduced into the urlpatterns of the project."
msgstr ""

#: ../../topics/http/urls.txt:764
# 1ae4339d73af48e582992bff61d0d91e
msgid "``'foo:index'`` will always resolve to the index page of the instance ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:767
# a4fc2819c2d049729ecf4a4781c75750
msgid "If there was also a default instance - i.e., an instance named ``'myapp'`` - the following would happen:"
msgstr ""

#: ../../topics/http/urls.txt:774
# bc35253a96cc43a8bde4beb77c0c55e7
msgid "If there is no current instance - say, if we were rendering a page somewhere else on the site - ``'myapp:index'`` will resolve to the index page of the default instance."
msgstr ""

#: ../../topics/http/urls.txt:778
# 3cfee94965fb419583ad7fd93d965e21
msgid "``'foo:index'`` will again resolve to the index page of the instance ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:784
# 2f19acffb3d342de8bdc4f0ac5516a38
msgid "URL namespaces and included URLconfs"
msgstr ""

#: ../../topics/http/urls.txt:786
# 5d301ebfa1bc48268912019d9ea158d7
msgid "URL namespaces of included URLconfs can be specified in two ways."
msgstr ""

#: ../../topics/http/urls.txt:788
# f1e51fcb442c4b9ca3d937fcbc5423b6
msgid "Firstly, you can provide the :term:`application <application namespace>` and :term:`instance <instance namespace>` namespaces as arguments to :func:`django.conf.urls.include()` when you construct your URL patterns. For example,::"
msgstr ""

#: ../../topics/http/urls.txt:795
# fc3c26cb558f4b5b98ee0f3fca0e977f
msgid "This will include the URLs defined in ``apps.help.urls`` into the :term:`application namespace` ``'bar'``, with the :term:`instance namespace` ``'foo'``."
msgstr ""

#: ../../topics/http/urls.txt:799
# 613b314fd3f94a569e9a7276cf82fe72
msgid "Secondly, you can include an object that contains embedded namespace data. If you ``include()`` an object as returned by :func:`~django.conf.urls.patterns`, the URLs contained in that object will be added to the global namespace. However, you can also ``include()`` a 3-tuple containing::"
msgstr ""

#: ../../topics/http/urls.txt:815
# 9f79e6d96d7c4e1eb49d20bcab019a29
msgid "This will include the nominated URL patterns into the given application and instance namespace."
msgstr ""

#: ../../topics/http/urls.txt:818
# 113d30b174a44dd5b3a95d69800d6a43
msgid "For example, the Django Admin is deployed as instances of :class:`~django.contrib.admin.AdminSite`.  ``AdminSite`` objects have a ``urls`` attribute: A 3-tuple that contains all the patterns in the corresponding admin site, plus the application namespace ``'admin'``, and the name of the admin instance. It is this ``urls`` attribute that you ``include()`` into your projects ``urlpatterns`` when you deploy an Admin instance."
msgstr ""

#: ../../topics/http/views.txt:3
# 332066a7150f48e3b68f8a3b5931a09f
msgid "Writing views"
msgstr ""

#: ../../topics/http/views.txt:5
# 2d38d50aaa4c4f8c962290b5a22fc047
msgid "A view function, or *view* for short, is simply a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image . . . or anything, really. The view itself contains whatever arbitrary logic is necessary to return that response. This code can live anywhere you want, as long as it's on your Python path. There's no other requirement--no \"magic,\" so to speak. For the sake of putting the code *somewhere*, the convention is to put views in a file called ``views.py``, placed in your project or application directory."
msgstr ""

#: ../../topics/http/views.txt:16
# abb53169858940cb8bf5f3cf1b0e965c
msgid "A simple view"
msgstr ""

#: ../../topics/http/views.txt:18
# 84c9a8af877d4f20bcd5fb9e7664c133
msgid "Here's a view that returns the current date and time, as an HTML document:"
msgstr ""

#: ../../topics/http/views.txt:30
# de9d4ed89435499a8d4dc29fb2efbb63
msgid "Let's step through this code one line at a time:"
msgstr ""

#: ../../topics/http/views.txt:32
# 47043dcee4d7417dac962b261f2c2c74
msgid "First, we import the class :class:`~django.http.HttpResponse` from the :mod:`django.http` module, along with Python's ``datetime`` library."
msgstr ""

#: ../../topics/http/views.txt:35
# 0e5646fb74d14290aad86dc1119ced34
msgid "Next, we define a function called ``current_datetime``. This is the view function. Each view function takes an :class:`~django.http.HttpRequest` object as its first parameter, which is typically named ``request``."
msgstr ""

#: ../../topics/http/views.txt:39
# e4c2bdbd17b8463bb3d87e9dbe4e3573
msgid "Note that the name of the view function doesn't matter; it doesn't have to be named in a certain way in order for Django to recognize it. We're calling it ``current_datetime`` here, because that name clearly indicates what it does."
msgstr ""

#: ../../topics/http/views.txt:44
# e72f8cbb8b3d4c0fbafbf88ae8f46ecd
msgid "The view returns an :class:`~django.http.HttpResponse` object that contains the generated response. Each view function is responsible for returning an :class:`~django.http.HttpResponse` object. (There are exceptions, but we'll get to those later.)"
msgstr ""

#: ../../topics/http/views.txt:51
# 249e3a237c744a6e88f9f4ec1d7a16ae
msgid "Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/Chicago``. This probably isn't where you live, so you might want to change it in your settings file."
msgstr ""

#: ../../topics/http/views.txt:56
# a5c51e0a835c4c4fa06b649b59ec4823
msgid "Mapping URLs to views"
msgstr ""

#: ../../topics/http/views.txt:58
# a32e6d75ec3346c282bfc5a46ed8a9dd
msgid "So, to recap, this view function returns an HTML page that includes the current date and time. To display this view at a particular URL, you'll need to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

#: ../../topics/http/views.txt:63
# fdff791c5afe481abf891740e908787d
msgid "Returning errors"
msgstr ""

#: ../../topics/http/views.txt:65
# 49e0150e7299423cb098f61b6682953a
msgid "Returning HTTP error codes in Django is easy. There are subclasses of :class:`~django.http.HttpResponse` for a number of common HTTP status codes other than 200 (which means *\"OK\"*). You can find the full list of available subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` documentation.  Just return an instance of one of those subclasses instead of a normal :class:`~django.http.HttpResponse` in order to signify an error. For example::"
msgstr ""

#: ../../topics/http/views.txt:80
# f36716f2315141a2a0eeb96493ca113b
msgid "There isn't a specialized subclass for every possible HTTP response code, since many of them aren't going to be that common. However, as documented in the :class:`~django.http.HttpResponse` documentation, you can also pass the HTTP status code into the constructor for :class:`~django.http.HttpResponse` to create a return class for any status code you like. For example::"
msgstr ""

#: ../../topics/http/views.txt:92
# 493b2e1cf11643eaa20a03f03faa5873
msgid "Because 404 errors are by far the most common HTTP error, there's an easier way to handle those errors."
msgstr ""

#: ../../topics/http/views.txt:96
# 448ee7f615904d18a6b6d59057900163
msgid "The Http404 exception"
msgstr ""

#: ../../topics/http/views.txt:100
# 5ca9e05bf799493a88c5d5f972432f1b
msgid "When you return an error such as :class:`~django.http.HttpResponseNotFound`, you're responsible for defining the HTML of the resulting error page::"
msgstr ""

#: ../../topics/http/views.txt:105
# bb84bde9069c4f688ff9d5752c290351
msgid "For convenience, and because it's a good idea to have a consistent 404 error page across your site, Django provides an ``Http404`` exception. If you raise ``Http404`` at any point in a view function, Django will catch it and return the standard error page for your application, along with an HTTP error code 404."
msgstr ""

#: ../../topics/http/views.txt:110
# 2a5877bf9a104420908a81a2ffae8a3f
msgid "Example usage::"
msgstr ""

#: ../../topics/http/views.txt:121
# d606c06a0d2c4824affc7b6eb5d2432e
msgid "In order to use the ``Http404`` exception to its fullest, you should create a template that is displayed when a 404 error is raised. This template should be called ``404.html`` and located in the top level of your template tree."
msgstr ""

#: ../../topics/http/views.txt:128
# 9b2b70cd8e974c9a89e2f2c6f55869eb
msgid "Customizing error views"
msgstr ""

#: ../../topics/http/views.txt:133
# 2947b95d535140b9b56dc8ef4e1a7e02
msgid "The 404 (page not found) view"
msgstr ""

#: ../../topics/http/views.txt:135
# 5b93188d6d70483c8ba7030d3ae1cf9a
msgid "When you raise an ``Http404`` exception, Django loads a special view devoted to handling 404 errors. By default, it's the view ``django.views.defaults.page_not_found``, which either produces a very simple \"Not Found\" message or loads and renders the template ``404.html`` if you created it in your root template directory."
msgstr ""

#: ../../topics/http/views.txt:141
# d53154c55b5d4f99ae2dafb0a4e99afd
msgid "The default 404 view will pass one variable to the template: ``request_path``, which is the URL that resulted in the error."
msgstr ""

#: ../../topics/http/views.txt:144
# d54ed71e1ca648d289c2d42a1426e969
msgid "The ``page_not_found`` view should suffice for 99% of Web applications, but if you want to override it, you can specify ``handler404`` in your URLconf, like so::"
msgstr ""

#: ../../topics/http/views.txt:150
# cfe3858259b5463f91de08ff4ed59eec
msgid "Behind the scenes, Django determines the 404 view by looking for ``handler404`` in your root URLconf, and falling back to ``django.views.defaults.page_not_found`` if you did not define one."
msgstr ""

#: ../../topics/http/views.txt:154
# 647aa67f62374af1b53882f55e34dcb1
msgid "Three things to note about 404 views:"
msgstr ""

#: ../../topics/http/views.txt:156
# 2528c8567223475497cc52d8fe9d7bcf
msgid "The 404 view is also called if Django doesn't find a match after checking every regular expression in the URLconf."
msgstr ""

#: ../../topics/http/views.txt:159
# 3e0f19335a0c4ab29478ceeeeb2e99bf
msgid "The 404 view is passed a :class:`~django.template.RequestContext` and will have access to variables supplied by your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
msgstr ""

#: ../../topics/http/views.txt:163
# d053a833c6574f9e8945ea92d82e1c4f
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module), then your 404 view will never be used, and your URLconf will be displayed instead, with some debug information."
msgstr ""

#: ../../topics/http/views.txt:170
# 772db63a95e146e4864b5a49d569eea4
msgid "The 500 (server error) view"
msgstr ""

#: ../../topics/http/views.txt:172
# b8e4a204112643d8afbe3f422fb4df50
msgid "Similarly, Django executes special-case behavior in the case of runtime errors in view code. If a view results in an exception, Django will, by default, call the view ``django.views.defaults.server_error``, which either produces a very simple \"Server Error\" message or loads and renders the template ``500.html`` if you created it in your root template directory."
msgstr ""

#: ../../topics/http/views.txt:178
# 519e3a2abc914202acb063721214da8e
msgid "The default 500 view passes no variables to the ``500.html`` template and is rendered with an empty ``Context`` to lessen the chance of additional errors."
msgstr ""

#: ../../topics/http/views.txt:181
# 41c40e45bc45474d8dd634722b7e596e
msgid "This ``server_error`` view should suffice for 99% of Web applications, but if you want to override the view, you can specify ``handler500`` in your URLconf, like so::"
msgstr ""

#: ../../topics/http/views.txt:187
# a4c35930f6bf4e7280c14b3db7b44cc2
msgid "Behind the scenes, Django determines the 500 view by looking for ``handler500`` in your root URLconf, and falling back to ``django.views.defaults.server_error`` if you did not define one."
msgstr ""

#: ../../topics/http/views.txt:191
# 2fc243a8829d44a08246cc0183ca604b
msgid "One thing to note about 500 views:"
msgstr ""

#: ../../topics/http/views.txt:193
# fae6812f84ef4c93ae51cc063b75cef6
msgid "If :setting:`DEBUG` is set to ``True`` (in your settings module), then your 500 view will never be used, and the traceback will be displayed instead, with some debug information."
msgstr ""

#: ../../topics/http/views.txt:200
# 7ef3e48f867c4beda5202288f0e8d9f0
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

#: ../../topics/http/views.txt:204
# f6cb1df058c24a60909bbfa319d4c7d0
msgid "In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden errors. If a view results in a 403 exception then Django will, by default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

#: ../../topics/http/views.txt:208
# eb42fc0bed2d4be0a2d39624f6508dc0
msgid "This view loads and renders the template ``403.html`` in your root template directory, or if this file does not exist, instead serves the text \"403 Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

#: ../../topics/http/views.txt:212
# b97c386a26af4646bff64f07b36b6d53
msgid "``django.views.defaults.permission_denied`` is triggered by a :exc:`~django.core.exceptions.PermissionDenied` exception. To deny access in a view you can use code like this::"
msgstr ""

#: ../../topics/http/views.txt:223
# c04383019ae243d5989dbb13caaf4a33
msgid "It is possible to override ``django.views.defaults.permission_denied`` in the same way you can for the 404 and 500 views by specifying a ``handler403`` in your URLconf::"
msgstr ""

#: ../../topics/i18n/formatting.txt:5
# 0f1bf6c150e64025b522cb1844120d0e
msgid "Format localization"
msgstr ""

#: ../../topics/i18n/formatting.txt:10
# cabc0502d0fa4cebac4f034a3f84dfe7
msgid "Django's formatting system is capable to display dates, times and numbers in templates using the format specified for the current :term:`locale <locale name>`. It also handles localized input in forms."
msgstr ""

#: ../../topics/i18n/formatting.txt:13
# 2436d8eec6af456386a87d51d7df7c15
msgid "When it's enabled, two users accessing the same content may see dates, times and numbers formatted in different ways, depending on the formats for their current locale."
msgstr ""

#: ../../topics/i18n/formatting.txt:17
# 6160b221fd5841b883bdc5ffe6310bf8
msgid "The formatting system is disabled by default. To enable it, it's necessary to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

#: ../../topics/i18n/formatting.txt:22
# 6a9029169e754f0e8cdccdbd8b1fd506
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` for convenience.  Note, however, that to enable number formatting with thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR = True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

#: ../../topics/i18n/formatting.txt:31
# 95260d83f33d4a67a12326d23996d7b1
msgid "There is also an independent but related :setting:`USE_I18N` setting that controls if Django should activate translation. See :doc:`/topics/i18n/translation` for more details."
msgstr ""

#: ../../topics/i18n/formatting.txt:36
# 0fbf7592bf1f4c529978530174077db2
msgid "Locale aware input in forms"
msgstr ""

#: ../../topics/i18n/formatting.txt:38
# 1f689c6c34444be291d48c3c70f80f43
msgid "When formatting is enabled, Django can use localized formats when parsing dates, times and numbers in forms. That means it tries different formats for different locales when guessing the format used by the user when inputting data on forms."
msgstr ""

#: ../../topics/i18n/formatting.txt:43
# 96c58a9655244ef693ef900bf3478cc7
msgid "Django uses different formats for displaying data to those it uses for parsing data. Most notably, the formats for parsing dates can't use the ``%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` (abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

#: ../../topics/i18n/formatting.txt:49
# f8f5c7b5e4af4c17bad2874a57acf6e3
msgid "To enable a form field to localize input and output data simply use its ``localize`` argument::"
msgstr ""

#: ../../topics/i18n/formatting.txt:59
# c856640fa4244227a164ed083fe6621b
msgid "Controlling localization in templates"
msgstr ""

#: ../../topics/i18n/formatting.txt:61
# a906bb5572194d3296e9506dbc7dcf3d
msgid "When you have enabled formatting with :setting:`USE_L10N`, Django will try to use a locale specific format whenever it outputs a value in a template."
msgstr ""

#: ../../topics/i18n/formatting.txt:65
# dc9c51687fb041d0a5403b8f8a29ebb6
msgid "However, it may not always be appropriate to use localized values -- for example, if you're outputting Javascript or XML that is designed to be machine-readable, you will always want unlocalized values. You may also want to use localization in selected templates, rather than using localization everywhere."
msgstr ""

#: ../../topics/i18n/formatting.txt:71
# 5fdd6516fa28480781ea0f8d90493090
msgid "To allow for fine control over the use of localization, Django provides the ``l10n`` template library that contains the following tags and filters."
msgstr ""

#: ../../topics/i18n/formatting.txt:76
#: ../../topics/i18n/timezones.txt:259
# 4a6ddf4d6872435cb41f3b205a53d8fe
# 4b2e8080d769401a9aa7b15ce5be26f0
msgid "Template tags"
msgstr ""

#: ../../topics/i18n/formatting.txt:81
#: ../../topics/i18n/formatting.txt:115
# a06e384ff700480fa21d3da2017d8aac
# f142732f65574176a74edd4c16dcdbc3
msgid "localize"
msgstr ""

#: ../../topics/i18n/formatting.txt:83
# 8be7b738b01c45b0a6b5780b7c0583ca
msgid "Enables or disables localization of template variables in the contained block."
msgstr ""

#: ../../topics/i18n/formatting.txt:86
# ac8d13596b1a40a7afbe1b1896443b9a
msgid "This tag allows a more fine grained control of localization than :setting:`USE_L10N`."
msgstr ""

#: ../../topics/i18n/formatting.txt:89
# 484fe279502d4a04b241a5a223675068
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

#: ../../topics/i18n/formatting.txt:103
# 4de87269cb314ff69aac98b9c2b8ba86
msgid "The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}`` block."
msgstr ""

#: ../../topics/i18n/formatting.txt:106
# fa0d3606ee424bfc9f295efc86e081cf
msgid "See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that will do the same job on a per-variable basis."
msgstr ""

#: ../../topics/i18n/formatting.txt:110
#: ../../topics/i18n/timezones.txt:326
# 19913d689b314b4396a8202cf0c32065
# f635c4aea0d24fda9fe5f058006f5de4
msgid "Template filters"
msgstr ""

#: ../../topics/i18n/formatting.txt:117
# 7a291b7d4dcd449fa75c033bdf219193
msgid "Forces localization of a single value."
msgstr ""

#: ../../topics/i18n/formatting.txt:125
# e074503772374c14a572e1f943da2f45
msgid "To disable localization on a single value, use :tfilter:`unlocalize`. To control localization over a large section of a template, use the :ttag:`localize` template tag."
msgstr ""

#: ../../topics/i18n/formatting.txt:133
# ad059f5b361a4f24a3e6f11a81f81db5
msgid "unlocalize"
msgstr ""

#: ../../topics/i18n/formatting.txt:135
# 4f8a6c6224b04aafb27b32984c19c87b
msgid "Forces a single value to be printed without localization."
msgstr ""

#: ../../topics/i18n/formatting.txt:143
# 4662b8828da94178a4dcda2e92aab951
msgid "To force localization of a single value, use :tfilter:`localize`. To control localization over a large section of a template, use the :ttag:`localize` template tag."
msgstr ""

#: ../../topics/i18n/formatting.txt:150
# 0ec77c553b514f748899622c1e210144
msgid "Creating custom format files"
msgstr ""

#: ../../topics/i18n/formatting.txt:152
# a2b01a34f1294356a7581295de196401
msgid "Django provides format definitions for many locales, but sometimes you might want to create your own, because a format files doesn't exist for your locale, or because you want to overwrite some of the values."
msgstr ""

#: ../../topics/i18n/formatting.txt:156
# f12e5b2f749f46b6a71cecf7fc710502
msgid "To use custom formats, specify the path where you'll place format files first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to the package where format files will exist, for instance::"
msgstr ""

#: ../../topics/i18n/formatting.txt:162
# bab1197e1699458f8b49f06a52fc02d2
msgid "Files are not placed directly in this directory, but in a directory named as the locale, and must be named ``formats.py``."
msgstr ""

#: ../../topics/i18n/formatting.txt:165
# 44dc4fe02d7c46b59dec49339646567b
msgid "To customize the English formats, a structure like this would be needed::"
msgstr ""

#: ../../topics/i18n/formatting.txt:174
# cc5f48e79252432c85136513f257d38c
msgid "where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

#: ../../topics/i18n/formatting.txt:178
# 708924b6e4fe49cdbdeb9c239162c010
msgid "to use a non-breaking space (Unicode ``00A0``) as a thousand separator, instead of the default for English, a comma."
msgstr ""

#: ../../topics/i18n/formatting.txt:182
# 8e868ec51fb04319bc687a909cf93aae
msgid "Limitations of the provided locale formats"
msgstr ""

#: ../../topics/i18n/formatting.txt:184
# 0e924d94573c4b438f9711aad11b7c4c
msgid "Some locales use context-sensitive formats for numbers, which Django's localization system cannot handle automatically."
msgstr ""

#: ../../topics/i18n/formatting.txt:188
# 8637df076b7f414bae113495a6d73a35
msgid "Switzerland (German)"
msgstr ""

#: ../../topics/i18n/formatting.txt:190
# 1bc5abcfd38643668e234f23e787d362
msgid "The Swiss number formatting depends on the type of number that is being formatted. For monetary values, a comma is used as the thousand separator and a decimal point for the decimal separator. For all other numbers, a comma is used as decimal separator and a space as thousand separator. The locale format provided by Django uses the generic separators, a comma for decimal and a space for thousand separators."
msgstr ""

#: ../../topics/i18n/index.txt:3
# 9530fb8a68534593a724828b00041a12
msgid "Internationalization and localization"
msgstr ""

#: ../../topics/i18n/index.txt:16
# 1b0c6d68149947eea5ba07d867fbf3fa
msgid "The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience."
msgstr ""

#: ../../topics/i18n/index.txt:20
# 9195482521514ef99e9b05e990d76c2f
msgid "Django has full support for :doc:`translation of text </topics/i18n/translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

#: ../../topics/i18n/index.txt:24
# 970ea3de6a9744d792461977ae1aaa3c
msgid "Essentially, Django does two things:"
msgstr ""

#: ../../topics/i18n/index.txt:26
# 9b9b1c262f8b4cc8abf1a6e44e46fde0
msgid "It allows developers and template authors to specify which parts of their apps should be translated or formatted for local languages and cultures."
msgstr ""

#: ../../topics/i18n/index.txt:28
# 6f6652792ba340bf92c461f4d8e05b4a
msgid "It uses these hooks to localize Web apps for particular users according to their preferences."
msgstr ""

#: ../../topics/i18n/index.txt:31
# 09aef3022ed041579f576ed6988ee41e
msgid "Obviously, translation depends on the target language, and formatting usually depends on the target country. These informations are provided by browsers in the ``Accept-Language`` header. However, the time zone isn't readily available."
msgstr ""

#: ../../topics/i18n/index.txt:36
# 23edf429078b44b2ab4ae183c9711421
msgid "Definitions"
msgstr ""

#: ../../topics/i18n/index.txt:38
# cd50a6e1556f416b92c53c8b1cfc0f4d
msgid "The words \"internationalization\" and \"localization\" often cause confusion; here's a simplified definition:"
msgstr ""

#: ../../topics/i18n/index.txt:44
# 60deb4f7441341b093179581cbad7fb0
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

#: ../../topics/i18n/index.txt:47
# f44fc5bd46a0497f99dd8529b681a4a6
msgid "Writing the translations and local formats. Usually done by translators."
msgstr ""

#: ../../topics/i18n/index.txt:49
# 6862cf730443449ba571ded903672afb
msgid "More details can be found in the `W3C Web Internationalization FAQ`_, the `Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

#: ../../topics/i18n/index.txt:57
# 11982a779b0a4512ac986894a860cbe5
msgid "Translation and formatting are controlled by :setting:`USE_I18N` and :setting:`USE_L10N` settings respectively. However, both features involve internationalization and localization. The names of the settings are an unfortunate result of Django's history."
msgstr ""

#: ../../topics/i18n/index.txt:62
# 0bafc417a0d34b6dad56bf3be4305355
msgid "Here are some other terms that will help us to handle a common language:"
msgstr ""

#: ../../topics/i18n/index.txt:67
# 8c28e28a65624c8abadcb816ed92d277
msgid "A locale name, either a language specification of the form ``ll`` or a combined language and country specification of the form ``ll_CC``. Examples: ``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always is lower case and the country part in upper case. The separator is an underscore."
msgstr ""

#: ../../topics/i18n/index.txt:74
# 3fe45fa47cde436d9f7acf867afe10c9
msgid "Represents the name of a language. Browsers send the names of the languages they accept in the ``Accept-Language`` HTTP header using this format. Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Both the language and the country parts are in lower case. The separator is a dash."
msgstr ""

#: ../../topics/i18n/index.txt:80
# eff034a78e3d4ea6820b055e2e22edda
msgid "A message file is a plain-text file, representing a single language, that contains all available :term:`translation strings <translation string>` and how they should be represented in the given language. Message files have a ``.po`` file extension."
msgstr ""

#: ../../topics/i18n/index.txt:86
# 601aeacd3313460197f550e7186d50c2
msgid "A literal that can be translated."
msgstr ""

#: ../../topics/i18n/index.txt:89
# 229656c28ca44ed6a9fd31778f3b3308
msgid "A format file is a Python module that defines the data formats for a given locale."
msgstr ""

#: ../../topics/i18n/timezones.txt:5
# 99adbcfcd99d4344ad2702fe4a8684d6
msgid "Time zones"
msgstr ""

#: ../../topics/i18n/timezones.txt:14
# 892e6dcfdc6840c4a5d38969e329917d
msgid "When support for time zones is enabled, Django stores date and time information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user's time zone in templates and forms."
msgstr ""

#: ../../topics/i18n/timezones.txt:19
# ef308d97e74745dd97bb7b6de5db49ed
msgid "This is handy if your users live in more than one time zone and you want to display date and time information according to each user's wall clock."
msgstr ""

#: ../../topics/i18n/timezones.txt:22
# e6f6f24cf9cc430cb8547b71853f2eac
msgid "Even if your Web site is available in only one time zone, it's still good practice to store data in UTC in your database. One main reason is Daylight Saving Time (DST). Many countries have a system of DST, where clocks are moved forward in spring and backward in autumn. If you're working in local time, you're likely to encounter errors twice a year, when the transitions happen. (The pytz_ documentation discusses `these issues`_ in greater detail.) This probably doesn't matter for your blog, but it's a problem if you over-bill or under-bill your customers by one hour, twice a year, every year. The solution to this problem is to use UTC in the code and use local time only when interacting with end users."
msgstr ""

#: ../../topics/i18n/timezones.txt:33
# 29b93db5ca184a52b0650360188f51d5
msgid "Time zone support is disabled by default. To enable it, set :setting:`USE_TZ = True <USE_TZ>` in your settings file. Installing pytz_ is highly recommended, but not mandatory. It's as simple as:"
msgstr ""

#: ../../topics/i18n/timezones.txt:43
# 810320ae3bb54ad39487fa2b39d0e56e
msgid "The default :file:`settings.py` file created by :djadmin:`django-admin.py startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for convenience."
msgstr ""

#: ../../topics/i18n/timezones.txt:49
# f59ca514d51f400b996e4fcca447a7c0
msgid "There is also an independent but related :setting:`USE_L10N` setting that controls whether Django should activate format localization. See :doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../topics/i18n/timezones.txt:53
# 0c7f498cb36e4aa79a244cde32ce0ea0
msgid "If you're wrestling with a particular problem, start with the :ref:`time zone FAQ <time-zones-faq>`."
msgstr ""

#: ../../topics/i18n/timezones.txt:57
# 31c7b198068f4ece97a571d5283cd0fa
msgid "Concepts"
msgstr ""

#: ../../topics/i18n/timezones.txt:60
# bf1206a874104c2e9fa967d7e1160dfa
msgid "Naive and aware datetime objects"
msgstr ""

#: ../../topics/i18n/timezones.txt:62
# 9fb9f1a476ba469aa8de33c3f99fa012
msgid "Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that can be used to store time zone information, represented as an instance of a subclass of :class:`datetime.tzinfo`. When this attribute is set and describes an offset, a datetime object is **aware**. Otherwise, it's **naive**."
msgstr ""

#: ../../topics/i18n/timezones.txt:67
# ce9c4a7328f344d5b2f5fa55eadcc88d
msgid "You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils.timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

#: ../../topics/i18n/timezones.txt:71
# d96163e7868947b797f1b29fe2991bea
msgid "When time zone support is disabled, Django uses naive datetime objects in local time. This is simple and sufficient for many use cases. In this mode, to obtain the current time, you would write::"
msgstr ""

#: ../../topics/i18n/timezones.txt:79
# ff516ce9bb2443e782bd9f669f4e05a2
msgid "When time zone support is enabled, Django uses time-zone-aware datetime objects. If your code creates datetime objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

#: ../../topics/i18n/timezones.txt:90
# ec06db75749c4363863afe73babc6811
msgid ":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` function that returns a naive or aware datetime object according to the value of :setting:`USE_TZ`."
msgstr ""

#: ../../topics/i18n/timezones.txt:96
# 1aa7e214aad547018042b71ceb480a9e
msgid "Dealing with aware datetime objects isn't always intuitive. For instance, the ``tzinfo`` argument of the standard datetime constructor doesn't work reliably for time zones with DST. Using UTC is generally safe; if you're using other time zones, you should review the `pytz`_ documentation carefully."
msgstr ""

#: ../../topics/i18n/timezones.txt:104
# 1032f90fd1664bdca4329414742ab5cf
msgid "Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, and PostgreSQL has a matching ``time with time zone`` type. However, as PostgreSQL's docs put it, this type \"exhibits properties which lead to questionable usefulness\"."
msgstr ""

#: ../../topics/i18n/timezones.txt:109
# 088f3e8ee97146f9a4116d9a7b878b7b
msgid "Django only supports naive time objects and will raise an exception if you attempt to save an aware time object."
msgstr ""

#: ../../topics/i18n/timezones.txt:115
# 3af50efa40e6486984b6c57f5382291f
msgid "Interpretation of naive datetime objects"
msgstr ""

#: ../../topics/i18n/timezones.txt:117
# 72f4d64efb6c4c0e8bfccbeac24dfe1b
msgid "When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime objects, in order to preserve backwards-compatibility. When the database layer receives one, it attempts to make it aware by interpreting it in the :ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

#: ../../topics/i18n/timezones.txt:122
# 90b1506303744679bbb0b11b4e34f957
msgid "Unfortunately, during DST transitions, some datetimes don't exist or are ambiguous. In such situations, pytz_ raises an exception. Other :class:`~datetime.tzinfo` implementations, such as the local time zone used as a fallback when pytz_ isn't installed, may raise an exception or return inaccurate results. That's why you should always create aware datetime objects when time zone support is enabled."
msgstr ""

#: ../../topics/i18n/timezones.txt:129
# 9fd523a20ec74694a5c7ebc75f9df7f1
msgid "In practice, this is rarely an issue. Django gives you aware datetime objects in the models and forms, and most often, new datetime objects are created from existing ones through :class:`~datetime.timedelta` arithmetic. The only datetime that's often created in application code is the current time, and :func:`timezone.now() <django.utils.timezone.now>` automatically does the right thing."
msgstr ""

#: ../../topics/i18n/timezones.txt:139
# 5bc2b7bbaa884d838114565ac8a69412
msgid "Default time zone and current time zone"
msgstr ""

#: ../../topics/i18n/timezones.txt:141
# 8cc04c51f7874fcaae1e1eae4cf2549d
msgid "The **default time zone** is the time zone defined by the :setting:`TIME_ZONE` setting."
msgstr ""

#: ../../topics/i18n/timezones.txt:144
# 62738523a3af4a789d91add297b97b3f
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

#: ../../topics/i18n/timezones.txt:146
# 28f9f7961de749bea94592378d994c70
msgid "You should set the current time zone to the end user's actual time zone with :func:`~django.utils.timezone.activate`. Otherwise, the default time zone is used."
msgstr ""

#: ../../topics/i18n/timezones.txt:152
# 1b522bc1417545c895b8b20bcf6d3f1c
msgid "As explained in the documentation of :setting:`TIME_ZONE`, Django sets environment variables so that its process runs in the default time zone. This happens regardless of the value of :setting:`USE_TZ` and of the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:157
# e0d62cd76a80475fb9debd0fee4b760d
msgid "When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-compatibility with applications that still rely on local time. However, :ref:`as explained above <naive-datetime-objects>`, this isn't entirely reliable, and you should always work with aware datetimes in UTC in your own code. For instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :data:`~django.utils.timezone.utc`."
msgstr ""

#: ../../topics/i18n/timezones.txt:167
# 76640e93f5fe465382b9698a639aa493
msgid "Selecting the current time zone"
msgstr ""

#: ../../topics/i18n/timezones.txt:169
# 29e876ac09e84163834a1f4088c92321
msgid "The current time zone is the equivalent of the current :term:`locale <locale name>` for translations. However, there's no equivalent of the ``Accept-Language`` HTTP header that Django could use to determine the user's time zone automatically. Instead, Django provides :ref:`time zone selection functions <time-zone-selection-functions>`. Use them to build the time zone selection logic that makes sense for you."
msgstr ""

#: ../../topics/i18n/timezones.txt:176
# e3c8fbc903ff47e6ab56a1ec3c02b96c
msgid "Most Web sites that care about time zones just ask users in which time zone they live and store this information in the user's profile. For anonymous users, they use the time zone of their primary audience or UTC. pytz_ provides helpers_, like a list of time zones per country, that you can use to pre-select the most likely choices."
msgstr ""

#: ../../topics/i18n/timezones.txt:182
# c2951abf7de54359852a3c61446272c8
msgid "Here's an example that stores the current timezone in the session. (It skips error handling entirely for the sake of simplicity.)"
msgstr ""

#: ../../topics/i18n/timezones.txt:185
# d56b4ad14acf4e7593982904138f8339
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../topics/i18n/timezones.txt:195
# 779eec7a241647c385194a1915e4531c
msgid "Create a view that can set the current timezone::"
msgstr ""

#: ../../topics/i18n/timezones.txt:207
# 1488e075dd8245fa888c4871a2006af6
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

#: ../../topics/i18n/timezones.txt:226
# 16cac43ce9614039bc1bd1aa1eaaf8d9
msgid "Time zone aware input in forms"
msgstr ""

#: ../../topics/i18n/timezones.txt:228
# f328cbc9537643cab8bdc0c08844fec0
msgid "When you enable time zone support, Django interprets datetimes entered in forms in the :ref:`current time zone <default-current-time-zone>` and returns aware datetime objects in ``cleaned_data``."
msgstr ""

#: ../../topics/i18n/timezones.txt:232
# 317e52b06cf742f18cc67b29d58bb543
msgid "If the current time zone raises an exception for datetimes that don't exist or are ambiguous because they fall in a DST transition (the timezones provided by pytz_ do this), such datetimes will be reported as invalid values."
msgstr ""

#: ../../topics/i18n/timezones.txt:239
# 4fd08c9493c24341b2906988058c3a6e
msgid "Time zone aware output in templates"
msgstr ""

#: ../../topics/i18n/timezones.txt:241
# 66995e98da3b403f9fac517052001d81
msgid "When you enable time zone support, Django converts aware datetime objects to the :ref:`current time zone <default-current-time-zone>` when they're rendered in templates. This behaves very much like :doc:`format localization </topics/i18n/formatting>`."
msgstr ""

#: ../../topics/i18n/timezones.txt:248
# 95eff3c91cb84a6bb32ae460d7980e09
msgid "Django doesn't convert naive datetime objects, because they could be ambiguous, and because your code should never produce naive datetimes when time zone support is enabled. However, you can force conversion with the template filters described below."
msgstr ""

#: ../../topics/i18n/timezones.txt:253
# 2c32a228966c4f2191638b965b2fefe1
msgid "Conversion to local time isn't always appropriate -- you may be generating output for computers rather than for humans. The following filters and tags, provided by the ``tz`` template tag library, allow you to control the time zone conversions."
msgstr ""

#: ../../topics/i18n/timezones.txt:264
#: ../../topics/i18n/timezones.txt:335
# 959ada66f9274df4b6289d41bf8f33ac
# cacde7e35e9347b883a3596ba28f02ff
msgid "localtime"
msgstr ""

#: ../../topics/i18n/timezones.txt:266
# 21b2c8ec00dc44258abea3bab89309a0
msgid "Enables or disables conversion of aware datetime objects to the current time zone in the contained block."
msgstr ""

#: ../../topics/i18n/timezones.txt:269
# ce19501537f244bc94c930eafa7c9661
msgid "This tag has exactly the same effects as the :setting:`USE_TZ` setting as far as the template engine is concerned. It allows a more fine grained control of conversion."
msgstr ""

#: ../../topics/i18n/timezones.txt:273
# 93b2911b0b25449896bb884c1722930b
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

#: ../../topics/i18n/timezones.txt:287
# 904013bf2c244ac888005ba99ac1464c
msgid "The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}`` block."
msgstr ""

#: ../../topics/i18n/timezones.txt:293
#: ../../topics/i18n/timezones.txt:361
# f8bc73cf729e4df69190f24ffd43d65d
# ffe42b606ebc44d5b732e747681a73b4
msgid "timezone"
msgstr ""

#: ../../topics/i18n/timezones.txt:295
# 2b8e1beba0fa43b6a1c3c1b5083d3daa
msgid "Sets or unsets the current time zone in the contained block. When the current time zone is unset, the default time zone applies."
msgstr ""

#: ../../topics/i18n/timezones.txt:313
# b45b19d0ef024580b9aab391bd0fb5d4
msgid "get_current_timezone"
msgstr ""

#: ../../topics/i18n/timezones.txt:315
# 82580833777e4c578bcd4d993b4cffef
msgid "When the :func:`django.core.context_processors.tz` context processor is enabled -- by default, it is -- each :class:`~django.template.RequestContext` contains a ``TIME_ZONE`` variable that provides the name of the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:320
# 43093951e450418e9caf1f8c8d8676d3
msgid "If you don't use a :class:`~django.template.RequestContext`, you can obtain this value with the ``get_current_timezone`` tag::"
msgstr ""

#: ../../topics/i18n/timezones.txt:328
# d29635f238174fac84256e3f8dc984c1
msgid "These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes."
msgstr ""

#: ../../topics/i18n/timezones.txt:337
# 6efc5e46c5ae4716b65fd731f57d7ac8
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

#: ../../topics/i18n/timezones.txt:348
# 963ee66883a04f92b01bc52e338036b0
msgid "utc"
msgstr ""

#: ../../topics/i18n/timezones.txt:350
# eb50a753420242c5a24f08b02690f2eb
msgid "Forces conversion of a single value to UTC."
msgstr ""

#: ../../topics/i18n/timezones.txt:363
# edf4e0b43f0c4447b274205c5879a010
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

#: ../../topics/i18n/timezones.txt:365
# b20e024b6ff247d0a15d6ac64228ef06
msgid "The argument must be an instance of a :class:`~datetime.tzinfo` subclass or a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

#: ../../topics/i18n/timezones.txt:377
# e51d89dfddde4cf9bbd81d2ea6c03120
msgid "Migration guide"
msgstr ""

#: ../../topics/i18n/timezones.txt:379
# a0b8b4c4fa7a49b3bf652b9c33d1c63e
msgid "Here's how to migrate a project that was started before Django supported time zones."
msgstr ""

#: ../../topics/i18n/timezones.txt:383
# 8d387aa92d4e4e2689861c1a2d29409d
msgid "Database"
msgstr ""

#: ../../topics/i18n/timezones.txt:386
# 848e42f56b0d4bc3bbf21552a22de00e
msgid "PostgreSQL"
msgstr ""

#: ../../topics/i18n/timezones.txt:388
# e5ebde0a3cf64271a150ccacb9656b9e
msgid "The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In practice, this means it converts datetimes from the connection's time zone to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

#: ../../topics/i18n/timezones.txt:392
# cafde998432143e9974af936a6b5d689
msgid "As a consequence, if you're using PostgreSQL, you can switch between ``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so that Django obtains correct datetimes in all cases. You don't need to perform any data conversions."
msgstr ""

#: ../../topics/i18n/timezones.txt:399
# f80171bdff384392be74b9d3333dcdbb
msgid "Other databases"
msgstr ""

#: ../../topics/i18n/timezones.txt:401
# 10e44ff7511942cf8a79f803c96ee7bc
msgid "Other backends store datetimes without time zone information. If you switch from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data from local time to UTC -- which isn't deterministic if your local time has DST."
msgstr ""

#: ../../topics/i18n/timezones.txt:406
# d21c5548aa4f4518b5464a2652604c05
msgid "Code"
msgstr ""

#: ../../topics/i18n/timezones.txt:408
# 817fb9847f5c450dab1bf1db907e7b96
msgid "The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings file and install pytz_ (if possible). At this point, things should mostly work. If you create naive datetime objects in your code, Django makes them aware when necessary."
msgstr ""

#: ../../topics/i18n/timezones.txt:413
# 6f80a3f9d6b54652b695da6dd69b95b7
msgid "However, these conversions may fail around DST transitions, which means you aren't getting the full benefits of time zone support yet. Also, you're likely to run into a few problems because it's impossible to compare a naive datetime with an aware datetime. Since Django now gives you aware datetimes, you'll get exceptions wherever you compare a datetime that comes from a model or a form with a naive datetime that you've created in your code."
msgstr ""

#: ../../topics/i18n/timezones.txt:420
# 258877745d214629bd01a2d94296e131
msgid "So the second step is to refactor your code wherever you instantiate datetime objects to make them aware. This can be done incrementally. :mod:`django.utils.timezone` defines some handy helpers for compatibility code: :func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone.make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

#: ../../topics/i18n/timezones.txt:429
# 53cf539fa7b748dc9360178fbe6be9bf
msgid "Finally, in order to help you locate code that needs upgrading, Django raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

#: ../../topics/i18n/timezones.txt:434
# 6d855eaa85d44aa3a53b6316b3485950
msgid "During development, you can turn such warnings into exceptions and get a traceback by adding the following to your settings file::"
msgstr ""

#: ../../topics/i18n/timezones.txt:443
# b8f5afd8f7c5438883414dea7c943384
msgid "Fixtures"
msgstr ""

#: ../../topics/i18n/timezones.txt:445
# 20bc3192df5a4f53aa70c16caae5d593
msgid "When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

#: ../../topics/i18n/timezones.txt:449
# 4f7e5626ca414ab0b7c59a580455e1e1
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

#: ../../topics/i18n/timezones.txt:453
# decd3ac4f17640dfb7303e402df492df
msgid "For models with :class:`~django.db.models.DateTimeField`\\ s, this difference makes it impossible to write a fixture that works both with and without time zone support."
msgstr ""

#: ../../topics/i18n/timezones.txt:457
# 50e46545a2814be18ed4cb1e9edb8643
msgid "Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the \"naive\" format. If your project contains such fixtures, after you enable time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. To get rid of the warnings, you must convert your fixtures to the \"aware\" format."
msgstr ""

#: ../../topics/i18n/timezones.txt:462
# 6549ab4b0c164d7a8b0334b7a0a72521
msgid "You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:`dumpdata`. Or, if they're small enough, you can simply edit them to add the UTC offset that matches your :setting:`TIME_ZONE` to each serialized datetime."
msgstr ""

#: ../../topics/i18n/timezones.txt:469
# afc17d1fedcb4cfa9fe8174e9b19e58d
msgid "FAQ"
msgstr ""

#: ../../topics/i18n/timezones.txt:472
# 29cbe1d5c1ae41aeb387957c4446e2fc
msgid "Setup"
msgstr ""

#: ../../topics/i18n/timezones.txt:474
# 6c6533f4162541e18f4d608b32dcd6ce
msgid "**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:476
# 7e271fae108c4d2b825e43a7a214a4f2
msgid "Yes. When time zone support is enabled, Django uses a more accurate model of local time. This shields you from subtle and unreproducible bugs around Daylight Saving Time (DST) transitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:480
# 13eaf64aa8e249899e2425bf79a99499
msgid "In this regard, time zones are comparable to ``unicode`` in Python. At first it's hard. You get encoding and decoding errors. Then you learn the rules. And some problems disappear -- you never get mangled output again when your application receives non-ASCII input."
msgstr ""

#: ../../topics/i18n/timezones.txt:485
# 85573516c86b46bfaad6f1bad645ef1a
msgid "When you enable time zone support, you'll encounter some errors because you're using naive datetimes where Django expects aware datetimes. Such errors show up when running tests and they're easy to fix. You'll quickly learn how to avoid invalid operations."
msgstr ""

#: ../../topics/i18n/timezones.txt:490
# f9e24fd76c11497aa2f57b20a958562b
msgid "On the other hand, bugs caused by the lack of time zone support are much harder to prevent, diagnose and fix. Anything that involves scheduled tasks or datetime arithmetic is a candidate for subtle bugs that will bite you only once or twice a year."
msgstr ""

#: ../../topics/i18n/timezones.txt:495
# 877c45eaae704454b62233fe681f1e25
msgid "For these reasons, time zone support is enabled by default in new projects, and you should keep it unless you have a very good reason not to."
msgstr ""

#: ../../topics/i18n/timezones.txt:498
# 0651511a6907475ab7ec4a3fed89e921
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:500
# 031939fdccc7482ea07e58242feab727
msgid "Maybe. You're better protected from DST-related bugs, but you can still shoot yourself in the foot by carelessly turning naive datetimes into aware datetimes, and vice-versa."
msgstr ""

#: ../../topics/i18n/timezones.txt:504
# b2fd4bacdd304de9b06906ccc9dbf01b
msgid "If your application connects to other systems -- for instance, if it queries a Web service -- make sure datetimes are properly specified. To transmit datetimes safely, their representation should include the UTC offset, or their values should be in UTC (or both!)."
msgstr ""

#: ../../topics/i18n/timezones.txt:509
# c284fe16c1b245078e240d7523fc60be
msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

#: ../../topics/i18n/timezones.txt:521
# 674bc7f570bc487a87b3d48d4c3a40f2
msgid "(To implement this function, you must decide whether 2012-02-29 minus one year is 2011-02-28 or 2011-03-01, which depends on your business requirements.)"
msgstr ""

#: ../../topics/i18n/timezones.txt:525
# bec99cc1a78e4952ae78a5f5fd6c6ce0
msgid "**Should I install pytz?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:527
# 49fcbb6fbea54dd99425c8cc144bef87
msgid "Yes. Django has a policy of not requiring external dependencies, and for this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

#: ../../topics/i18n/timezones.txt:530
# 063b0a04518e4f1f90cd2e08248c7c06
msgid "As soon as you activate time zone support, Django needs a definition of the default time zone. When pytz is available, Django loads this definition from the `tz database`_. This is the most accurate solution. Otherwise, it relies on the difference between local time and UTC, as reported by the operating system, to compute conversions. This is less reliable, especially around DST transitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:537
# db7b6ddb61db444ca09b7ba707b214c3
msgid "Furthermore, if you want to support users in more than one time zone, pytz is the reference for time zone definitions."
msgstr ""

#: ../../topics/i18n/timezones.txt:541
# 556176a85da841438a5e9c73dbf48ab7
msgid "Troubleshooting"
msgstr ""

#: ../../topics/i18n/timezones.txt:543
# 8694f02c3b26485fb74764530fd4ecc4
msgid "**My application crashes with** ``TypeError: can't compare offset-naive`` ``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:546
# 835770eee54d42308c0c7f0107daf992
msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

#: ../../topics/i18n/timezones.txt:557
# 5fb5dac7ba36452685773e2c27e1b421
msgid "If you encounter this error, most likely your code is comparing these two things:"
msgstr ""

#: ../../topics/i18n/timezones.txt:560
# 437ca6a293a94c0d80f64177a1cbe15c
msgid "a datetime provided by Django -- for instance, a value read from a form or a model field. Since you enabled time zone support, it's aware."
msgstr ""

#: ../../topics/i18n/timezones.txt:562
# 634a2023ed9f40afa6daf9015485d8b0
msgid "a datetime generated by your code, which is naive (or you wouldn't be reading this)."
msgstr ""

#: ../../topics/i18n/timezones.txt:565
# f097221a2ed747c69f4a97763a281a61
msgid "Generally, the correct solution is to change your code to use an aware datetime instead."
msgstr ""

#: ../../topics/i18n/timezones.txt:568
# 8aae074a59344c53a95f01e5b26074b4
msgid "If you're writing a pluggable application that's expected to work independently of the value of :setting:`USE_TZ`, you may find :func:`django.utils.timezone.now` useful. This function returns the current date and time as a naive datetime when ``USE_TZ = False`` and as an aware datetime when ``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as needed."
msgstr ""

#: ../../topics/i18n/timezones.txt:575
# 8181ec1d8db04487ba0dac1e84288e78
msgid "**I see lots of** ``RuntimeWarning: DateTimeField received a naive datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` **-- is that bad?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:579
# 1d089ab2d20f4d2ab11dfd0211b2564c
msgid "When time zone support is enabled, the database layer expects to receive only aware datetimes from your code. This warning occurs when it receives a naive datetime. This indicates that you haven't finished porting your code for time zone support. Please refer to the :ref:`migration guide <time-zones-migration-guide>` for tips on this process."
msgstr ""

#: ../../topics/i18n/timezones.txt:585
# 04b3ccc0b90941c094a4339978f4b8b4
msgid "In the meantime, for backwards compatibility, the datetime is considered to be in the default time zone, which is generally what you expect."
msgstr ""

#: ../../topics/i18n/timezones.txt:588
# 8a2bb740eb3c4676af3fe627118289e7
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

#: ../../topics/i18n/timezones.txt:590
# 9c0698ff3c134e42abd3ae1470d8b9f7
msgid "If you've always used naive datetimes, you probably believe that you can convert a datetime to a date by calling its :meth:`~datetime.datetime.date` method. You also consider that a :class:`~datetime.date` is a lot like a :class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

#: ../../topics/i18n/timezones.txt:595
# f47e038896244b068e33484c1805c963
msgid "None of this is true in a time zone aware environment::"
msgstr ""

#: ../../topics/i18n/timezones.txt:613
# fac5d462085141c084952e4f9a04abe5
msgid "As this example shows, the same datetime has a different date, depending on the time zone in which it is represented. But the real problem is more fundamental."
msgstr ""

#: ../../topics/i18n/timezones.txt:617
# 5c7f13634b4c4c5084d1a8372f22a511
msgid "A datetime represents a **point in time**. It's absolute: it doesn't depend on anything. On the contrary, a date is a **calendaring concept**. It's a period of time whose bounds depend on the time zone in which the date is considered. As you can see, these two concepts are fundamentally different, and converting a datetime to a date isn't a deterministic operation."
msgstr ""

#: ../../topics/i18n/timezones.txt:623
# 684434c0cfaa48d0ab2c088f96d31df5
msgid "What does this mean in practice?"
msgstr ""

#: ../../topics/i18n/timezones.txt:625
# 4dc439b1e2d24260891e666cc2a0e4fc
msgid "Generally, you should avoid converting a :class:`~datetime.datetime` to :class:`~datetime.date`. For instance, you can use the :tfilter:`date` template filter to only show the date part of a datetime. This filter will convert the datetime into the current time zone before formatting it, ensuring the results appear correctly."
msgstr ""

#: ../../topics/i18n/timezones.txt:631
# a8c9b0ac70a148e69d098f243ae1287c
msgid "If you really need to do the conversion yourself, you must ensure the datetime is converted to the appropriate time zone first. Usually, this will be the current timezone::"
msgstr ""

#: ../../topics/i18n/timezones.txt:648
# f3e7916eca7341959fe908979c4f2e59
msgid "Usage"
msgstr ""

#: ../../topics/i18n/timezones.txt:650
# f83c86957d9c4f65be595704fd994294
msgid "**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:654
# 08d3f311a4e0441092c03c4cb73daf92
msgid "This is exactly what pytz_ is for."
msgstr ""

#: ../../topics/i18n/timezones.txt:662
# a46859a99afb48e29d89bb71df3c46b5
msgid "Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` API. Also, you may want to catch :exc:`~pytz.InvalidTimeError`. The documentation of pytz contains `more examples`_. You should review it before attempting to manipulate aware datetimes."
msgstr ""

#: ../../topics/i18n/timezones.txt:667
# 6c688af9897f40feb9a4503afdad402e
msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:669
# 44bc1fd0bd394b478d7b0b89a1125909
msgid "Well, the first question is, do you really need to?"
msgstr ""

#: ../../topics/i18n/timezones.txt:671
# 9f1476c360794f83812553d37503b9a5
msgid "You should only use local time when you're interacting with humans, and the template layer provides :ref:`filters and tags <time-zones-in-templates>` to convert datetimes to the time zone of your choice."
msgstr ""

#: ../../topics/i18n/timezones.txt:675
# 657625403d2845caba700f185c3e6d9c
msgid "Furthermore, Python knows how to compare aware datetimes, taking into account UTC offsets when necessary. It's much easier (and possibly faster) to write all your model and view code in UTC. So, in most circumstances, the datetime in UTC returned by :func:`django.utils.timezone.now` will be sufficient."
msgstr ""

#: ../../topics/i18n/timezones.txt:681
# 9b721149f70b4a35bfec489a905cdb7f
msgid "For the sake of completeness, though, if you really want the local time in the current time zone, here's how you can obtain it::"
msgstr ""

#: ../../topics/i18n/timezones.txt:688
# d0d7d843803648f6ac35cb6195c3618d
msgid "In this example, pytz_ is installed and the current time zone is ``\"Europe/Paris\"``."
msgstr ""

#: ../../topics/i18n/timezones.txt:691
# 5a7a08d0c5e046d08710cbb5c27ce2ea
msgid "**How can I see all available time zones?**"
msgstr ""

#: ../../topics/i18n/timezones.txt:693
# cd939a5f5756461686d4e9c8182ae958
msgid "pytz_ provides helpers_, including a list of current time zones and a list of all available time zones -- some of which are only of historical interest."
msgstr ""

#: ../../topics/i18n/translation.txt:3
# f99c4ca8f4034bcc900414fbb85305a7
msgid "Translation"
msgstr ""

#: ../../topics/i18n/translation.txt:10
# e72c54004c91410c92daffbe82aad2da
msgid "In order to make a Django project translatable, you have to add a minimal amount of hooks to your Python code and templates. These hooks are called :term:`translation strings <translation string>`. They tell Django: \"This text should be translated into the end user's language, if a translation for this text is available in that language.\" It's your responsibility to mark translatable strings; the system can only translate strings it knows about."
msgstr ""

#: ../../topics/i18n/translation.txt:17
# 09c5067fbe3e4526a3306e079fa9b47c
msgid "Django then provides utilities to extract the translation strings into a :term:`message file`. This file is a convenient way for translators to provide the equivalent of the translation strings in the target language. Once the translators have filled in the message file, it must be compiled. This process relies on the GNU gettext toolset."
msgstr ""

#: ../../topics/i18n/translation.txt:23
# 4f602f15cabc419eb4c1a0f5412c8614
msgid "Once this is done, Django takes care of translating Web apps on the fly in each available language, according to users' language preferences."
msgstr ""

#: ../../topics/i18n/translation.txt:26
# d00bf468c0a0473d9493ed6d0b479515
msgid "Django's internationalization hooks are on by default, and that means there's a bit of i18n-related overhead in certain places of the framework. If you don't use internationalization, you should take the two seconds to set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then Django will make some optimizations so as not to load the internationalization machinery. You'll probably also want to remove ``'django.core.context_processors.i18n'`` from your :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:36
# 03f98fa2890e449897371cc7c67f4a80
msgid "There is also an independent but related :setting:`USE_L10N` setting that controls if Django should implement format localization. See :doc:`/topics/i18n/formatting` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:42
# 67978240be964a0a969f34946db604c6
msgid "Make sure you've activated translation for your project (the fastest way is to check if :setting:`MIDDLEWARE_CLASSES` includes :mod:`django.middleware.locale.LocaleMiddleware`). If you haven't yet, see :ref:`how-django-discovers-language-preference`."
msgstr ""

#: ../../topics/i18n/translation.txt:48
# 1e34a322b66d4029adc701b5492b4621
msgid "Internationalization: in Python code"
msgstr ""

#: ../../topics/i18n/translation.txt:51
# 0332770e87f14a9db1466fcd2fe9530e
msgid "Standard translation"
msgstr ""

#: ../../topics/i18n/translation.txt:53
# 9a7c33d4315846a5bf746ca6c79a4334
msgid "Specify a translation string by using the function :func:`~django.utils.translation.ugettext`. It's convention to import this as a shorter alias, ``_``, to save typing."
msgstr ""

#: ../../topics/i18n/translation.txt:58
# a8a359e70f6b4314ac9dc08e5de2024b
msgid "Python's standard library ``gettext`` module installs ``_()`` into the global namespace, as an alias for ``gettext()``. In Django, we have chosen not to follow this practice, for a couple of reasons:"
msgstr ""

#: ../../topics/i18n/translation.txt:62
# 4e0caafda068429e85481ee7068661a8
msgid "For international character set (Unicode) support, :func:`~django.utils.translation.ugettext` is more useful than ``gettext()``. Sometimes, you should be using :func:`~django.utils.translation.ugettext_lazy` as the default translation method for a particular file. Without ``_()`` in the global namespace, the developer has to think about which is the most appropriate translation function."
msgstr ""

#: ../../topics/i18n/translation.txt:70
# 0fc14e707b444975a4b1f495ddb6e47e
msgid "The underscore character (``_``) is used to represent \"the previous result\" in Python's interactive shell and doctest tests. Installing a global ``_()`` function causes interference. Explicitly importing ``ugettext()`` as ``_()`` avoids this problem."
msgstr ""

#: ../../topics/i18n/translation.txt:77
# c388fdfd71c5422f8c04d2c9dcd2661e
msgid "In this example, the text ``\"Welcome to my site.\"`` is marked as a translation string::"
msgstr ""

#: ../../topics/i18n/translation.txt:86
# 336efdb73a124dcbba143ae766979308
msgid "Obviously, you could code this without using the alias. This example is identical to the previous one::"
msgstr ""

#: ../../topics/i18n/translation.txt:95
# 66743ac449684e909b2af61b82eb2836
msgid "Translation works on computed values. This example is identical to the previous two::"
msgstr ""

#: ../../topics/i18n/translation.txt:103
# c38274fe616b43fab3acc6c243522e00
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

#: ../../topics/i18n/translation.txt:110
# ad6b8e03b6894f78a2fa654147511989
msgid "(The caveat with using variables or computed values, as in the previous two examples, is that Django's translation-string-detecting utility, :djadmin:`django-admin.py makemessages <makemessages>`, won't be able to find these strings. More on :djadmin:`makemessages` later.)"
msgstr ""

#: ../../topics/i18n/translation.txt:115
# 80fa66ab15e34033a7f30ac2e563fd9d
msgid "The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:122
# 2403dc0c089c4a878e86f2fbb8e24796
msgid "This technique lets language-specific translations reorder the placeholder text. For example, an English translation may be ``\"Today is November 26.\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- with the the month and the day placeholders swapped."
msgstr ""

#: ../../topics/i18n/translation.txt:127
# c7570dd2921c47b1b4b229337d7f627c
msgid "For this reason, you should use named-string interpolation (e.g., ``%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) whenever you have more than a single parameter. If you used positional interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

#: ../../topics/i18n/translation.txt:135
# c1703c297b2c4cbbbfc20c5b3d5d345b
msgid "Comments for translators"
msgstr ""

#: ../../topics/i18n/translation.txt:137
# 8a3662af120843b2be17f5959294c94e
msgid "If you would like to give translators hints about a translatable string, you can add a comment prefixed with the ``Translators`` keyword on the line preceding the string, e.g.::"
msgstr ""

#: ../../topics/i18n/translation.txt:145
# a5d0aac114ff48178b08b7b12ee11303
msgid "This also works in templates with the :ttag:`comment` tag:"
msgstr ""

#: ../../topics/i18n/translation.txt:151
# f5118fc6f31546be87054b82986ba760
msgid "The comment will then appear in the resulting ``.po`` file and should also be displayed by most translation tools."
msgstr ""

#: ../../topics/i18n/translation.txt:155
# 23c94d28d9e34985a4dae297c7d875fe
msgid "Marking strings as no-op"
msgstr ""

#: ../../topics/i18n/translation.txt:157
# 0c75b8d61ce1402d8f8fef68a7d9b0ee
msgid "Use the function :func:`django.utils.translation.ugettext_noop()` to mark a string as a translation string without translating it. The string is later translated from a variable."
msgstr ""

#: ../../topics/i18n/translation.txt:161
# 99366acdba40427d85b0b65657dbbd83
msgid "Use this if you have constant strings that should be stored in the source language because they are exchanged over systems or users -- such as strings in a database -- but should be translated at the last possible point in time, such as when the string is presented to the user."
msgstr ""

#: ../../topics/i18n/translation.txt:167
# c86603c5d69f4f8295c583665c64328e
msgid "Pluralization"
msgstr ""

#: ../../topics/i18n/translation.txt:169
# a5a5d19aa0ed4448908d06b5e746cfe4
msgid "Use the function :func:`django.utils.translation.ungettext()` to specify pluralized messages."
msgstr ""

#: ../../topics/i18n/translation.txt:172
# 027b6638b5674ad09c9aa72792b463e2
msgid "``ungettext`` takes three arguments: the singular translation string, the plural translation string and the number of objects."
msgstr ""

#: ../../topics/i18n/translation.txt:175
# 592a5606a74b49cfa6ded905292b81c8
msgid "This function is useful when you need your Django application to be localizable to languages where the number and complexity of `plural forms <http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is greater than the two forms used in English ('object' for the singular and 'objects' for all the cases where ``count`` is different from one, irrespective of its value.)"
msgstr ""

#: ../../topics/i18n/translation.txt:195
# da622ee05c5347a9a90c337d0a9bb0ea
msgid "In this example the number of objects is passed to the translation languages as the ``count`` variable."
msgstr ""

#: ../../topics/i18n/translation.txt:198
# c367b401c339490996175ef83b856253
msgid "Lets see a slightly more complex usage example::"
msgstr ""

#: ../../topics/i18n/translation.txt:217
# 07b6fad007a0445ba27ea6300f54c1d6
msgid "Here we reuse localizable, hopefully already translated literals (contained in the ``verbose_name`` and ``verbose_name_plural`` model ``Meta`` options) for other parts of the sentence so all of it is consistently based on the cardinality of the elements at play."
msgstr ""

#: ../../topics/i18n/translation.txt:226
# 69f995200f0a4e978a9cc867e059f9c5
msgid "When using this technique, make sure you use a single name for every extrapolated variable included in the literal. In the example above note how we used the ``name`` Python variable in both translation strings. This example would fail::"
msgstr ""

#: ../../topics/i18n/translation.txt:246
# ab68eb3df0c94014aaff768339fd065d
msgid "You would get an error when running :djadmin:`django-admin.py compilemessages <compilemessages>`::"
msgstr ""

#: ../../topics/i18n/translation.txt:254
# 78ef1e14c088458585959acea4408144
msgid "Contextual markers"
msgstr ""

#: ../../topics/i18n/translation.txt:256
# d427aef26b1e42e89102aa9444aec494
msgid "Sometimes words have several meanings, such as ``\"May\"`` in English, which refers to a month name and to a verb. To enable translators to translate these words correctly in different contexts, you can use the :func:`django.utils.translation.pgettext()` function, or the :func:`django.utils.translation.npgettext()` function if the string needs pluralization. Both take a context string as the first variable."
msgstr ""

#: ../../topics/i18n/translation.txt:263
# 4fef8dcdef6e4d3aa6cda65630d78ad0
msgid "In the resulting ``.po`` file, the string will then appear as often as there are different contextual markers for the same string (the context will appear on the ``msgctxt`` line), allowing the translator to give a different translation for each of them."
msgstr ""

#: ../../topics/i18n/translation.txt:274
# 06cb809b035841ac871fddaa2055bf18
msgid "or::"
msgstr ""

#: ../../topics/i18n/translation.txt:282
# ce8b43ccc4e041b68f1e52d5a2f4c15e
msgid "will appear in the ``.po`` file as:"
msgstr ""

#: ../../topics/i18n/translation.txt:292
# c446ae84b53c429b9808a66465b81116
msgid "Contextual markers are also supported by the :ttag:`trans` and :ttag:`blocktrans` template tags."
msgstr ""

#: ../../topics/i18n/translation.txt:298
# e2947d68ad7e4dbf9da8a8068a602bd0
msgid "Lazy translation"
msgstr ""

#: ../../topics/i18n/translation.txt:300
# 95fe6834eb6a4bb0b52ef06dadba93e9
msgid "Use the lazy versions of translation functions in :mod:`django.utils.translation` (easily recognizable by the ``lazy`` suffix in their names) to translate strings lazily -- when the value is accessed rather than when they're called."
msgstr ""

#: ../../topics/i18n/translation.txt:305
# 6bdcd4842ae04fe7b918f075df3a6741
msgid "These functions store a lazy reference to the string -- not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering."
msgstr ""

#: ../../topics/i18n/translation.txt:309
# 4d97439ee1b5415084af76c3d92cf1d5
msgid "This is essential when calls to these functions are located in code paths that are executed at module load time."
msgstr ""

#: ../../topics/i18n/translation.txt:312
# f90375ec5694493b9751445418a2e14f
msgid "This is something that can easily happen when defining models, forms and model forms, because Django implements these such that their fields are actually class-level attributes. For that reason, make sure to use lazy translations in the following cases:"
msgstr ""

#: ../../topics/i18n/translation.txt:318
# eb0ec6a99a0c46f29187b3e0225b1245
msgid "Model fields and relationships ``verbose_name`` and ``help_text`` option values"
msgstr ""

#: ../../topics/i18n/translation.txt:320
# 9244c228532445338546860fed93cde1
msgid "For example, to translate the help text of the *name* field in the following model, do the following::"
msgstr ""

#: ../../topics/i18n/translation.txt:328
# 2f13226b9b924d269074760af58a9efa
msgid "You can mark names of ``ForeignKey``, ``ManyTomanyField`` or ``OneToOneField`` relationship as translatable by using their ``verbose_name`` options::"
msgstr ""

#: ../../topics/i18n/translation.txt:337
# 9a9daeaf964f4c789931ccde0e31db7c
msgid "Just like you would do in :attr:`~django.db.models.Options.verbose_name` you should provide a lowercase verbose name text for the relation as Django will automatically titlecase it when required."
msgstr ""

#: ../../topics/i18n/translation.txt:342
# b35cf812e2c0439c86aede0e1952a6a6
msgid "Model verbose names values"
msgstr ""

#: ../../topics/i18n/translation.txt:344
# 28a372e0dff840478b5424c497c71b45
msgid "It is recommended to always provide explicit :attr:`~django.db.models.Options.verbose_name` and :attr:`~django.db.models.Options.verbose_name_plural` options rather than relying on the fallback English-centric and somewhat naïve determination of verbose names Django performs bu looking at the model's class name::"
msgstr ""

#: ../../topics/i18n/translation.txt:360
# 8e28a93c6ede487994800ce7b75686f5
msgid "Model methods ``short_description`` attribute values"
msgstr ""

#: ../../topics/i18n/translation.txt:362
# 977fcb22a0214d27bb3a637fbecbe725
msgid "For model methods, you can provide translations to Django and the admin site with the ``short_description`` attribute::"
msgstr ""

#: ../../topics/i18n/translation.txt:376
# 318c291efc7e4b04a72f14747bc7f625
msgid "Working with lazy translation objects"
msgstr ""

#: ../../topics/i18n/translation.txt:378
# e4e6c08a0bee4ddfbf3e74f53646aebd
msgid "The result of a ``ugettext_lazy()`` call can be used wherever you would use a unicode string (an object with type ``unicode``) in Python. If you try to use it where a bytestring (a ``str`` object) is expected, things will not work as expected, since a ``ugettext_lazy()`` object doesn't know how to convert itself to a bytestring. You can't use a unicode string inside a bytestring, either, so this is consistent with normal Python behavior. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:392
# b693866a309a4660acb824e404725776
msgid "If you ever see output that looks like ``\"hello <django.utils.functional...>\"``, you have tried to insert the result of ``ugettext_lazy()`` into a bytestring. That's a bug in your code."
msgstr ""

#: ../../topics/i18n/translation.txt:396
# 74174169e4c745df9fa54578f25bca2b
msgid "If you don't like the long ``ugettext_lazy`` name, you can just alias it as ``_`` (underscore), like so::"
msgstr ""

#: ../../topics/i18n/translation.txt:404
# 3ff6d93d1f67446693a9f159d4c088fa
msgid "Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models and utility functions is a common operation. When you're working with these objects elsewhere in your code, you should ensure that you don't accidentally convert them to strings, because they should be converted as late as possible (so that the correct locale is in effect). This necessitates the use of the helper function described next."
msgstr ""

#: ../../topics/i18n/translation.txt:412
# dca3d2f3fdf644aeb7aa7d402d76a1b6
msgid "Joining strings: string_concat()"
msgstr ""

#: ../../topics/i18n/translation.txt:414
# d6d95a6c0f964908b035b53d0abfb9b6
msgid "Standard Python string joins (``''.join([...])``) will not work on lists containing lazy translation objects. Instead, you can use :func:`django.utils.translation.string_concat()`, which creates a lazy object that concatenates its contents *and* converts them to strings only when the result is included in a string. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:426
# 93625d3a8a804f4c955241430859bebb
msgid "In this case, the lazy translations in ``result`` will only be converted to strings when ``result`` itself is used in a string (usually at template rendering time)."
msgstr ""

#: ../../topics/i18n/translation.txt:431
# d433619f2b7c45a39f12f4045aba3230
msgid "Other uses of lazy in delayed translations"
msgstr ""

#: ../../topics/i18n/translation.txt:433
# 89d019be8d2f407897f7062156d5df02
msgid "For any other case where you would like to delay the translation, but have to pass the translatable string as argument to another function, you can wrap this function inside a lazy call yourself. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:444
# e6f44ddb83e14901b4cb41e7729508cc
msgid "And then later::"
msgstr ""

#: ../../topics/i18n/translation.txt:449
# 6557536501f34ff5ad4656a062fbc93a
msgid "Localized names of languages"
msgstr ""

#: ../../topics/i18n/translation.txt:453
# 625c58e829d94b33aa1315b6af231365
msgid "The ``get_language_info()`` function provides detailed information about languages::"
msgstr ""

#: ../../topics/i18n/translation.txt:461
# 0fcbba34b0cf486ebc93cc7c7e6891a1
msgid "The ``name`` and ``name_local`` attributes of the dictionary contain the name of the language in English and in the language itself, respectively.  The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

#: ../../topics/i18n/translation.txt:465
# 7048eaea94524a9880fb0db57bbe9cfa
msgid "The source of the language information is the ``django.conf.locale`` module. Similar access to this information is available for template code. See below."
msgstr ""

#: ../../topics/i18n/translation.txt:471
# ab0eb6af12d049a08ec5365f069d78c1
msgid "Internationalization: in template code"
msgstr ""

#: ../../topics/i18n/translation.txt:475
# 8bef50d1a43143ff9cb9242b8de40a15
msgid "Translations in :doc:`Django templates </topics/templates>` uses two template tags and a slightly different syntax than in Python code. To give your template access to these tags, put ``{% load i18n %}`` toward the top of your template. As with all template tags, this tag needs to be loaded in all templates which use translations, even those templates that extend from other templates which have already loaded the ``i18n`` tag."
msgstr ""

#: ../../topics/i18n/translation.txt:485
# ddcd6f4f6a824f568243e3d0d06ccbc9
msgid "``trans`` template tag"
msgstr ""

#: ../../topics/i18n/translation.txt:487
# d8da70c6964d459f99c9eb12218af2f2
msgid "The ``{% trans %}`` template tag translates either a constant string (enclosed in single or double quotes) or variable content::"
msgstr ""

#: ../../topics/i18n/translation.txt:493
# 9d49b44eb8d14db99aeb36e41ba2a771
msgid "If the ``noop`` option is present, variable lookup still takes place but the translation is skipped. This is useful when \"stubbing out\" content that will require translation in the future::"
msgstr ""

#: ../../topics/i18n/translation.txt:499
# 5474545a24b64dbea0cfdbe78d5c6b5b
msgid "Internally, inline translations use an :func:`~django.utils.translation.ugettext` call."
msgstr ""

#: ../../topics/i18n/translation.txt:502
# 0dfbdfcd0551487db4ab8f8cc0fc795a
msgid "In case a template var (``myvar`` above) is passed to the tag, the tag will first resolve such variable to a string at run-time and then look up that string in the message catalogs."
msgstr ""

#: ../../topics/i18n/translation.txt:506
# 60073b12bfcc4781a453fda649b3d2c2
msgid "It's not possible to mix a template variable inside a string within ``{% trans %}``. If your translations require strings with variables (placeholders), use ``{% blocktrans %}`` instead."
msgstr ""

#: ../../topics/i18n/translation.txt:512
# 0d3f4024472044fd8c0754337b221a51
msgid "If you'd like to retrieve a translated string without displaying it, you can use the following syntax::"
msgstr ""

#: ../../topics/i18n/translation.txt:520
# d62839daed9a4974ac138c590deb1212
msgid "In practice you'll use this to get strings that are used in multiple places or should be used as arguments for other template tags or filters::"
msgstr ""

#: ../../topics/i18n/translation.txt:538
# 1dbe9882cba04b4ea52656acf9554a5c
msgid "``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` using the ``context`` keyword:"
msgstr ""

#: ../../topics/i18n/translation.txt:548
# eeb96f7a4c664235ba6301bc303ab35f
msgid "``blocktrans`` template tag"
msgstr ""

#: ../../topics/i18n/translation.txt:550
# 4c9809b40da04946a941d8e7a62debb0
msgid "Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to mark complex sentences consisting of literals and variable content for translation by making use of placeholders::"
msgstr ""

#: ../../topics/i18n/translation.txt:556
# 0c241f305edf4f219ea63e95f692bc69
msgid "To translate a template expression -- say, accessing object attributes or using template filters -- you need to bind the expression to a local variable for use within the translation block. Examples::"
msgstr ""

#: ../../topics/i18n/translation.txt:568
# c032c9073b844adca6a1eaea0bb09b92
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

#: ../../topics/i18n/translation.txt:574
# 8ebd7b663dae4eada33a17e658bbe6ba
msgid "The previous more verbose format is still supported: ``{% blocktrans with book|title as book_t and author|title as author_t %}``"
msgstr ""

#: ../../topics/i18n/translation.txt:579
# 638f9781d2e5428395715ebb7cfac2a4
msgid "If resolving one of the block arguments fails, blocktrans will fall back to the default language by deactivating the currently active language temporarily with the :func:`~django.utils.translation.deactivate_all` function."
msgstr ""

#: ../../topics/i18n/translation.txt:584
# 46c281a8dd5940d0b686d66b7f0c83ba
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

#: ../../topics/i18n/translation.txt:586
# 6188eaaa62fd41fb910e4991e0281aa3
msgid "Designate and bind a counter value with the name ``count``. This value will be the one used to select the right plural form."
msgstr ""

#: ../../topics/i18n/translation.txt:589
# 503caa7e4cb74649b7626889e4f0c8d5
msgid "Specify both the singular and plural forms separating them with the ``{% plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` tags."
msgstr ""

#: ../../topics/i18n/translation.txt:601
# b10580dd010d4f39ad775a5ac9db3675
msgid "A more complex example::"
msgstr ""

#: ../../topics/i18n/translation.txt:609
# 70e236b5daf64ca0b2795e546fb43b94
msgid "When you use both the pluralization feature and bind values to local variables in addition to the counter value, keep in mind that the ``blocktrans`` construct is internally converted to an ``ungettext`` call. This means the same :ref:`notes regarding ungettext variables <pluralization-var-notes>` apply."
msgstr ""

#: ../../topics/i18n/translation.txt:615
# 67ecc63435d54ec98adb59dbe5f1a029
msgid "Reverse URL lookups cannot be carried out within the ``blocktrans`` and should be retrieved (and stored) beforehand::"
msgstr ""

#: ../../topics/i18n/translation.txt:625
# 34a1bb6e7ded476a8fd278532a736017
msgid "``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-markers>` using the ``context`` keyword:"
msgstr ""

#: ../../topics/i18n/translation.txt:635
# 57be0b3bbbb34184ab56bf03a769dea2
msgid "Other tags"
msgstr ""

#: ../../topics/i18n/translation.txt:637
# aedf28067ec941f3bb65a180f78147ab
msgid "Each ``RequestContext`` has access to three translation-specific variables:"
msgstr ""

#: ../../topics/i18n/translation.txt:639
# fb08646ab5d74328b41444a07c9ab807
msgid "``LANGUAGES`` is a list of tuples in which the first element is the :term:`language code` and the second is the language name (translated into the currently active locale)."
msgstr ""

#: ../../topics/i18n/translation.txt:643
# 5eafbefc3073453289ad1ce3b02f79a4
msgid "``LANGUAGE_CODE`` is the current user's preferred language, as a string. Example: ``en-us``. (See :ref:`how-django-discovers-language-preference`.)"
msgstr ""

#: ../../topics/i18n/translation.txt:646
# 50b8c4247d7e4feab5a986e6292e95af
msgid "``LANGUAGE_BIDI`` is the current locale's direction. If True, it's a right-to-left language, e.g.: Hebrew, Arabic. If False it's a left-to-right language, e.g.: English, French, German etc."
msgstr ""

#: ../../topics/i18n/translation.txt:650
# fa62900fd4e0412e8c98eab59c7ac058
msgid "If you don't use the ``RequestContext`` extension, you can get those values with three tags::"
msgstr ""

#: ../../topics/i18n/translation.txt:657
# 806f70ae2e414ab086f1b31b0a076dc1
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

#: ../../topics/i18n/translation.txt:659
# 8451eb657660465aad17f4b0729f0263
msgid "Translation hooks are also available within any template block tag that accepts constant strings. In those cases, just use ``_()`` syntax to specify a translation string::"
msgstr ""

#: ../../topics/i18n/translation.txt:665
# 2b0926769f5d46e59bb3bc8906c6b2c8
msgid "In this case, both the tag and the filter will see the already-translated string, so they don't need to be aware of translations."
msgstr ""

#: ../../topics/i18n/translation.txt:669
# c9ed192f8cd745a1aa4046d2ba95631d
msgid "In this example, the translation infrastructure will be passed the string ``\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The translated string will need to contain the comma so that the filter parsing code knows how to split up the arguments. For example, a German translator might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the comma intact)."
msgstr ""

#: ../../topics/i18n/translation.txt:676
# 912d07670c9d4f47af9bb2368fbd4457
msgid "You can also retrieve information about any of the available languages using provided template tags and filters. To get information about a single language, use the ``{% get_language_info %}`` tag::"
msgstr ""

#: ../../topics/i18n/translation.txt:683
# 43b78fcd599149c4afe9232ebde1a094
msgid "You can then access the information::"
msgstr ""

#: ../../topics/i18n/translation.txt:690
# a3b1709072d44408b16ced8abe06fd77
msgid "You can also use the ``{% get_language_info_list %}`` template tag to retrieve information for a list of languages (e.g. active languages as specified in :setting:`LANGUAGES`). See :ref:`the section about the set_language redirect view <set_language-redirect-view>` for an example of how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

#: ../../topics/i18n/translation.txt:696
# f8d53f5eeefe4e7f96935ea7aeba5c72
msgid "In addition to :setting:`LANGUAGES` style nested tuples, ``{% get_language_info_list %}`` supports simple lists of language codes. If you do this in your view:"
msgstr ""

#: ../../topics/i18n/translation.txt:706
# cdb1ec5f95cd439eaea27c250b8b3388
msgid "you can iterate over those languages in the template::"
msgstr ""

#: ../../topics/i18n/translation.txt:711
# 7386c16cc8f84835a6f774caa3c4ab52
msgid "There are also simple filters available for convenience:"
msgstr ""

#: ../../topics/i18n/translation.txt:713
# 6870d52fef2b44b19e75d4a2b6e564ca
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

#: ../../topics/i18n/translation.txt:714
# 3f9190db56bc4008a89a3197abb93190
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

#: ../../topics/i18n/translation.txt:715
# b7728dd0f88d48a4a644b24ef6b5aae8
msgid "``{{ LANGUAGE_CODE|bidi }}`` (False)"
msgstr ""

#: ../../topics/i18n/translation.txt:720
# 198e57218902496093cef1dab6a3c331
msgid "Internationalization: in JavaScript code"
msgstr ""

#: ../../topics/i18n/translation.txt:724
# a4c0ab6fa2fc431cb6eb569787c48be1
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

#: ../../topics/i18n/translation.txt:726
# 12f5e2da8336457895a771f97c793ae7
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

#: ../../topics/i18n/translation.txt:728
# 7760192918284dbc8579d9c2f1bc6f63
msgid "JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need to be delivered by the server."
msgstr ""

#: ../../topics/i18n/translation.txt:731
# d55fb10972594cec846081be9366243a
msgid "The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

#: ../../topics/i18n/translation.txt:734
# e5720f114d7a465587a368ae0d18d259
msgid "Django provides an integrated solution for these problems: It passes the translations into JavaScript, so you can call ``gettext``, etc., from within JavaScript."
msgstr ""

#: ../../topics/i18n/translation.txt:741
# a959020a63cd48a9bd60b9edfe180b5d
msgid "The ``javascript_catalog`` view"
msgstr ""

#: ../../topics/i18n/translation.txt:747
# f4b39979c56841b68c7c6d9a493a0e6f
msgid "The main solution to these problems is the :meth:`django.views.i18n.javascript_catalog` view, which sends out a JavaScript code library with functions that mimic the ``gettext`` interface, plus an array of translation strings. Those translation strings are taken from applications or Django core, according to what you specify in either the ``info_dict`` or the URL. Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""

#: ../../topics/i18n/translation.txt:754
# ee1697c6d7214a4e9259751c02b42468
msgid "You hook it up like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:764
# d42a84fe5f914375b1d2cd42425f5588
msgid "Each string in ``packages`` should be in Python dotted-package syntax (the same format as the strings in :setting:`INSTALLED_APPS`) and should refer to a package that contains a ``locale`` directory. If you specify multiple packages, all those catalogs are merged into one catalog. This is useful if you have JavaScript that uses strings from different applications."
msgstr ""

#: ../../topics/i18n/translation.txt:770
# c607acded5cc4a1fbe83b086105850fa
msgid "The precedence of translations is such that the packages appearing later in the ``packages`` argument have higher precedence than the ones appearing at the beginning, this is important in the case of clashing translations for the same literal."
msgstr ""

#: ../../topics/i18n/translation.txt:775
# 7d09e24a5698461d931b750fcf3035c4
msgid "By default, the view uses the ``djangojs`` gettext domain. This can be changed by altering the ``domain`` argument."
msgstr ""

#: ../../topics/i18n/translation.txt:778
# 07d5c2513f2147c48d9021f9f1559a48
msgid "You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

#: ../../topics/i18n/translation.txt:784
# 8ee9b9d4ccba4b35b0befb5456974fc6
msgid "With this, you specify the packages as a list of package names delimited by '+' signs in the URL. This is especially useful if your pages use code from different apps and this changes often and you don't want to pull in one big catalog file. As a security measure, these values can only be either ``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:790
# 763c08a578124e55939c8874bc87f985
msgid "The JavaScript translations found in the paths listed in the :setting:`LOCALE_PATHS` setting are also always included. To keep consistency with the translations lookup order algorithm used for Python and templates, the directories listed in :setting:`LOCALE_PATHS` have the highest precedence with the ones appearing first having higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:798
# 4899c70275fe44808ae5fb0038f07348
msgid "Using the JavaScript translation catalog"
msgstr ""

#: ../../topics/i18n/translation.txt:802
# e5be35b2c1be49bca76cccee28b488c6
msgid "To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

#: ../../topics/i18n/translation.txt:808
# 5b3642921efd4a349c1f31ead9953f48
msgid "This uses reverse URL lookup to find the URL of the JavaScript catalog view. When the catalog is loaded, your JavaScript code can use the standard ``gettext`` interface to access it::"
msgstr ""

#: ../../topics/i18n/translation.txt:814
# 59a0be3364ad4bc4b41b6c312944396b
msgid "There is also an ``ngettext`` interface::"
msgstr ""

#: ../../topics/i18n/translation.txt:820
# 14be600e01174c11936598607007e65a
msgid "and even a string interpolation function::"
msgstr ""

#: ../../topics/i18n/translation.txt:824
# 77d2ea245cec49c0b8b924b680ecacdb
msgid "The interpolation syntax is borrowed from Python, so the ``interpolate`` function supports both positional and named interpolation:"
msgstr ""

#: ../../topics/i18n/translation.txt:827
# 6538422e276f4663a831bfdc808c8a24
msgid "Positional interpolation: ``obj`` contains a JavaScript Array object whose elements values are then sequentially interpolated in their corresponding ``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:837
# 2603fe0ac82744848bc491514e315474
msgid "Named interpolation: This mode is selected by passing the optional boolean ``named`` parameter as true. ``obj`` contains a JavaScript object or associative array. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:850
# f4c55fe4cd5744b18248dc3de74f27bc
msgid "You shouldn't go over the top with string interpolation, though: this is still JavaScript, so the code has to make repeated regular-expression substitutions. This isn't as fast as string interpolation in Python, so keep it to those cases where you really need it (for example, in conjunction with ``ngettext`` to produce proper pluralizations)."
msgstr ""

#: ../../topics/i18n/translation.txt:859
# d345ce5e1ea84515953d8067b7d91e7e
msgid "Internationalization: in URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:865
# a8776e81ffa84b3fb3f9287fc0ed5b18
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

#: ../../topics/i18n/translation.txt:867
# 66309a45a54d4030b893583f6b55c596
msgid "Adding the language prefix to the root of the URL patterns to make it possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect the language to activate from the requested URL."
msgstr ""

#: ../../topics/i18n/translation.txt:871
# 3f31fd194c5f4400a5c6551aaee9c297
msgid "Making URL patterns themselves translatable via the :func:`django.utils.translation.ugettext_lazy()` function."
msgstr ""

#: ../../topics/i18n/translation.txt:876
# 4da25f71fed04e628705b723843d080f
msgid "Using either one of these features requires that an active language be set for each request; in other words, you need to have :class:`django.middleware.locale.LocaleMiddleware` in your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:882
# b4fe05f0bbf24564908782f100c8a1e4
msgid "Language prefix in URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:886
# bde0980facec4ec3a3aa0fb33c6bc018
msgid "This function can be used in your root URLconf as a replacement for the normal :func:`django.conf.urls.patterns` function. Django will automatically prepend the current active language code to all url patterns defined within :func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

#: ../../topics/i18n/translation.txt:910
# 6956c835995740d694a447472728f4f7
msgid "After defining these URL patterns, Django will automatically add the language prefix to the URL patterns that were added by the ``i18n_patterns`` function. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:929
# 6442b255508646789077293594814268
msgid ":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root URLconf. Using it within an included URLconf will throw an :exc:`ImproperlyConfigured` exception."
msgstr ""

#: ../../topics/i18n/translation.txt:935
# cb79f68286dd4adf9ca5180751ac9613
msgid "Ensure that you don't have non-prefixed URL patterns that might collide with an automatically-added language prefix."
msgstr ""

#: ../../topics/i18n/translation.txt:940
# 70caa4abf5c444c4971f1439fff8ab87
msgid "Translating URL patterns"
msgstr ""

#: ../../topics/i18n/translation.txt:942
# a3425c1594e14b058394d24b82cc4a33
msgid "URL patterns can also be marked translatable using the :func:`~django.utils.translation.ugettext_lazy` function. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:965
# d91e11702082406b8be298b588aee83a
msgid "After you've created the translations, the :func:`~django.core.urlresolvers.reverse` function will return the URL in the active language. Example::"
msgstr ""

#: ../../topics/i18n/translation.txt:982
# 0c868f93743946c3b5646fcbd0c84b88
msgid "In most cases, it's best to use translated URLs only within a language-code-prefixed block of patterns (using :func:`~django.conf.urls.i18n.i18n_patterns`), to avoid the possibility that a carelessly translated URL causes a collision with a non-translated URL pattern."
msgstr ""

#: ../../topics/i18n/translation.txt:993
# 1939dc9d10ff40ddb91e8e17b832ae7b
msgid "Reversing in templates"
msgstr ""

#: ../../topics/i18n/translation.txt:995
# 88fa0baed6fd4bacb9d28da3a4519423
msgid "If localized URLs get reversed in templates they always use the current language. To link to a URL in another language use the ``language`` template tag. It enables the given language in the enclosed template section:"
msgstr ""

#: ../../topics/i18n/translation.txt:1012
# 96a85c6e91ab4e97821cee3c5b84d90c
msgid "The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

#: ../../topics/i18n/translation.txt:1017
# 816b59bddee14937af7572eddc4347ff
msgid "Localization: how to create language files"
msgstr ""

#: ../../topics/i18n/translation.txt:1019
# 70b8173261e14b25840651726d23b4c6
msgid "Once the string literals of an application have been tagged for later translation, the translation themselves need to be written (or obtained). Here's how that works."
msgstr ""

#: ../../topics/i18n/translation.txt:1027
# e853702e29f641f09fa3b96c4b960086
msgid "Django does not support localizing your application into a locale for which Django itself has not been translated. In this case, it will ignore your translation files. If you were to try this and Django supported it, you would inevitably see a mixture of translated strings (from your application) and English strings (from Django itself). If you want to support a locale for your application that is not already part of Django, you'll need to make at least a minimal translation of the Django core."
msgstr ""

#: ../../topics/i18n/translation.txt:1035
# d30e7176179e4c789667a8c11962078f
msgid "A good starting point is to copy the Django English ``.po`` file and to translate at least some :term:`translation strings <translation string>`."
msgstr ""

#: ../../topics/i18n/translation.txt:1039
# 1d7b863763bb4ee580ddc0c1ad86ba28
msgid "Message files"
msgstr ""

#: ../../topics/i18n/translation.txt:1041
# a8e69edbaaca4deebbc7a6b609afc63d
msgid "The first step is to create a :term:`message file` for a new language. A message file is a plain-text file, representing a single language, that contains all available translation strings and how they should be represented in the given language. Message files have a ``.po`` file extension."
msgstr ""

#: ../../topics/i18n/translation.txt:1046
# a56a402679c34075bfed927dc623cfaa
msgid "Django comes with a tool, :djadmin:`django-admin.py makemessages <makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

#: ../../topics/i18n/translation.txt:1051
# 8ad76b270b7144d2b8d1bceeab798627
msgid "The ``makemessages`` command (and ``compilemessages`` discussed later) use commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, ``msgmerge`` and ``msguniq``."
msgstr ""

#: ../../topics/i18n/translation.txt:1055
# 194e71b63029482cb21d1530a05c5662
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

#: ../../topics/i18n/translation.txt:1057
# bcc693fb76cc4859b0becbda136503ee
msgid "To create or update a message file, run this command::"
msgstr ""

#: ../../topics/i18n/translation.txt:1061
# fbf344af0b8b4126810fba87dd882c8e
msgid "...where ``de`` is the language code for the message file you want to create. The language code, in this case, is in :term:`locale format<locale name>`. For example, it's ``pt_BR`` for Brazilian Portuguese and ``de_AT`` for Austrian German."
msgstr ""

#: ../../topics/i18n/translation.txt:1066
# d61728aa509043f5861c27b7498e6db8
msgid "The script should be run from one of two places:"
msgstr ""

#: ../../topics/i18n/translation.txt:1068
# f50e3c40261242779da9c2001dab79e7
msgid "The root directory of your Django project."
msgstr ""

#: ../../topics/i18n/translation.txt:1069
# 6a65b6795f624b67a7d62d66e25926de
msgid "The root directory of your Django app."
msgstr ""

#: ../../topics/i18n/translation.txt:1071
# ba09fc33352b423cb779b8ba8e805ab4
msgid "The script runs over your project source tree or your application source tree and pulls out all strings marked for translation. It creates (or updates) a message file in the directory ``locale/LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/LC_MESSAGES/django.po``."
msgstr ""

#: ../../topics/i18n/translation.txt:1076
# 98a8cbfb1f3d40e4b2960f33a30653a1
msgid "By default :djadmin:`django-admin.py makemessages <makemessages>` examines every file that has the ``.html`` or ``.txt`` file extension. In case you want to override that default, use the ``--extension`` or ``-e`` option to specify the file extensions to examine::"
msgstr ""

#: ../../topics/i18n/translation.txt:1083
# 293e8983e5d242a6be3f7042f72b1526
msgid "Separate multiple extensions with commas and/or use ``-e`` or ``--extension`` multiple times::"
msgstr ""

#: ../../topics/i18n/translation.txt:1090
# 5fe17e463a954f0984cab436c8afc700
msgid "When :ref:`creating message files from JavaScript source code <creating-message-files-from-js-code>` you need to use the special 'djangojs' domain, **not** ``-e js``."
msgstr ""

#: ../../topics/i18n/translation.txt:1096
# dbe4aa001bf14ce581e228ae785a2cf0
msgid "If you don't have the ``gettext`` utilities installed, :djadmin:`makemessages` will create empty files. If that's the case, either install the ``gettext`` utilities or just copy the English message file (``locale/en/LC_MESSAGES/django.po``) if available and use it as a starting point; it's just an empty translation file."
msgstr ""

#: ../../topics/i18n/translation.txt:1104
# 9d85e96343a74b49b660312c565e82f6
msgid "If you're using Windows and need to install the GNU gettext utilities so :djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more information."
msgstr ""

#: ../../topics/i18n/translation.txt:1108
# 25485996055f4a63a7205495ec80c781
msgid "The format of ``.po`` files is straightforward. Each ``.po`` file contains a small bit of metadata, such as the translation maintainer's contact information, but the bulk of the file is a list of **messages** -- simple mappings between translation strings and the actual translated text for the particular language."
msgstr ""

#: ../../topics/i18n/translation.txt:1114
# f6319704be3c4ed7bd48e00d288904d4
msgid "For example, if your Django app contained a translation string for the text ``\"Welcome to my site.\"``, like so::"
msgstr ""

#: ../../topics/i18n/translation.txt:1119
# 56ad2cac94c341308a44c13d25067c50
msgid "...then :djadmin:`django-admin.py makemessages <makemessages>` will have created a ``.po`` file containing the following snippet -- a message::"
msgstr ""

#: ../../topics/i18n/translation.txt:1126
# b3cd40fe171a46219317913378b639e5
msgid "A quick explanation:"
msgstr ""

#: ../../topics/i18n/translation.txt:1128
# 042a137131904931b81dfde7b2600bd9
msgid "``msgid`` is the translation string, which appears in the source. Don't change it."
msgstr ""

#: ../../topics/i18n/translation.txt:1130
# 3961d8e4871c47309cd2ee71c1d87a3c
msgid "``msgstr`` is where you put the language-specific translation. It starts out empty, so it's your responsibility to change it. Make sure you keep the quotes around your translation."
msgstr ""

#: ../../topics/i18n/translation.txt:1133
# f9a55f9f8d0a4a45949e9763a5232cec
msgid "As a convenience, each message includes, in the form of a comment line prefixed with ``#`` and located above the ``msgid`` line, the filename and line number from which the translation string was gleaned."
msgstr ""

#: ../../topics/i18n/translation.txt:1137
# e7f2c0369a79478a988a8c0f95013821
msgid "Long messages are a special case. There, the first string directly after the ``msgstr`` (or ``msgid``) is an empty string. Then the content itself will be written over the next few lines as one string per line. Those strings are directly concatenated. Don't forget trailing spaces within the strings; otherwise, they'll be tacked together without whitespace!"
msgstr ""

#: ../../topics/i18n/translation.txt:1145
# d5eb1f24448f484ab5a1adeff8283383
msgid "When creating a PO file with your favorite text editor, first edit the charset line (search for ``\"CHARSET\"``) and set it to the charset you'll be using to edit the content. Due to the way the ``gettext`` tools work internally and because we want to allow non-ASCII source strings in Django's core and your applications, you **must** use UTF-8 as the encoding for your PO file. This means that everybody will be using the same encoding, which is important when Django processes the PO files."
msgstr ""

#: ../../topics/i18n/translation.txt:1153
# 12b566acd4084b7088a40012b060f86f
msgid "To reexamine all source code and templates for new translation strings and update all message files for **all** languages, run this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1159
# f7475912542949c6af3e5363b22b0d70
msgid "Compiling message files"
msgstr ""

#: ../../topics/i18n/translation.txt:1161
# 95ff4bea09e84c85bb0a8c276bc129f6
msgid "After you create your message file -- and each time you make changes to it -- you'll need to compile it into a more efficient form, for use by ``gettext``. Do this with the :djadmin:`django-admin.py compilemessages <compilemessages>` utility."
msgstr ""

#: ../../topics/i18n/translation.txt:1166
# a80ac22859624259bfdb3eced61b9979
msgid "This tool runs over all available ``.po`` files and creates ``.mo`` files, which are binary files optimized for use by ``gettext``. In the same directory from which you ran :djadmin:`django-admin.py makemessages <makemessages>`, run :djadmin:`django-admin.py compilemessages <compilemessages>` like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1172
# 7b75a6aabf4f48ee86ea37876ce77979
msgid "That's it. Your translations are ready for use."
msgstr ""

#: ../../topics/i18n/translation.txt:1176
# 959d4b8e243e47bea11648232a264c2f
msgid "If you're using Windows and need to install the GNU gettext utilities so :djadmin:`django-admin.py compilemessages <compilemessages>` works see :ref:`gettext_on_windows` for more information."
msgstr ""

#: ../../topics/i18n/translation.txt:1182
# deeb754be91546cf9f4de270b78a487f
msgid "Django only supports ``.po`` files encoded in UTF-8 and without any BOM (Byte Order Mark) so if your text editor adds such marks to the beginning of files by default then you will need to reconfigure it."
msgstr ""

#: ../../topics/i18n/translation.txt:1189
# 45a6ebb772144753ba68e51a9ea6d4c4
msgid "Creating message files from JavaScript source code"
msgstr ""

#: ../../topics/i18n/translation.txt:1191
# 36bc256ab4d746ab93ed26fccaae44aa
msgid "You create and update the message files the same way as the other Django message files -- with the :djadmin:`django-admin.py makemessages <makemessages>` tool. The only difference is you need to explicitly specify what in gettext parlance is known as a domain in this case the ``djangojs`` domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1199
# 3afab8c6a1e343fd958baa6cf8dbabb8
msgid "This would create or update the message file for JavaScript for German. After updating message files, just run :djadmin:`django-admin.py compilemessages <compilemessages>` the same way as you do with normal Django message files."
msgstr ""

#: ../../topics/i18n/translation.txt:1206
# fab56949719c48659eed96bef0265eb0
msgid "``gettext`` on Windows"
msgstr ""

#: ../../topics/i18n/translation.txt:1208
# 1a60b6b1d8d6488db7350a8760373a43
msgid "This is only needed for people who either want to extract message IDs or compile message files (``.po``). Translation work itself just involves editing existing files of this type, but if you want to create your own message files, or want to test or compile a changed message file, you will need the ``gettext`` utilities:"
msgstr ""

#: ../../topics/i18n/translation.txt:1213
# 6608a3e98999493c940be1e72e2ae321
msgid "Download the following zip files from the GNOME servers http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/ or from one of its mirrors_"
msgstr ""

#: ../../topics/i18n/translation.txt:1217
# 5cb82e4f8f2445ac847d065f25e94b8b
msgid "``gettext-runtime-X.zip``"
msgstr ""

#: ../../topics/i18n/translation.txt:1218
# e0e2f41628944601a6e07749abf8ed97
msgid "``gettext-tools-X.zip``"
msgstr ""

#: ../../topics/i18n/translation.txt:1220
# 3cb25881d25b41f58dd9b524a1307cf4
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

#: ../../topics/i18n/translation.txt:1222
# 978cb2ff6ed149818ee593640cd7c140
msgid "Extract the contents of the ``bin\\`` directories in both files to the same folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

#: ../../topics/i18n/translation.txt:1225
# d9fa8dad5e084d269cbe22757227862f
msgid "Update the system PATH:"
msgstr ""

#: ../../topics/i18n/translation.txt:1227
# a1b53b5103da49eb923aef6250277b04
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

#: ../../topics/i18n/translation.txt:1228
# 0561372adf1e46e8b5654323361ae871
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

#: ../../topics/i18n/translation.txt:1229
# 9f6fa251a48e41529484d4472311f384
msgid "Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable value`` field."
msgstr ""

#: ../../topics/i18n/translation.txt:1234
# 9da2be6a61794c519b402024455dbbb0
msgid "You may also use ``gettext`` binaries you have obtained elsewhere, so long as the ``xgettext --version`` command works properly. Do not attempt to use Django translation utilities with a ``gettext`` package if the command ``xgettext --version`` entered at a Windows command prompt causes a popup window saying \"xgettext.exe has generated errors and will be closed by Windows\"."
msgstr ""

#: ../../topics/i18n/translation.txt:1242
# f575e9768d0540cb9a2a2747bd3ec488
msgid "Miscellaneous"
msgstr ""

#: ../../topics/i18n/translation.txt:1247
# e4f4eaaee93546edb7d6697ebde83f82
msgid "The ``set_language`` redirect view"
msgstr ""

#: ../../topics/i18n/translation.txt:1253
# 2abcc64720184c8ab5e512625fe517ba
msgid "As a convenience, Django comes with a view, :func:`django.views.i18n.set_language`, that sets a user's language preference and redirects to a given URL or, by default, back to the previous page."
msgstr ""

#: ../../topics/i18n/translation.txt:1257
# 82068aa993ca4420ad970b96cf3aa2b1
msgid "Make sure that the following item is in your :setting:`TEMPLATE_CONTEXT_PROCESSORS` list in your settings file::"
msgstr ""

#: ../../topics/i18n/translation.txt:1262
# 962e3450b8684bc69e72334df108c4f8
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

#: ../../topics/i18n/translation.txt:1266
# d37a45be83c1457b877f44094898da17
msgid "(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1270
# d4d8a55daf9c456ca60ff0321c180add
msgid "Make sure that you don't include the above URL within :func:`~django.conf.urls.i18n.i18n_patterns` - it needs to be language-independent itself to work correctly."
msgstr ""

#: ../../topics/i18n/translation.txt:1274
# 8f4cd5c95e6b42d592c49e0f05bcaa52
msgid "The view expects to be called via the ``POST`` method, with a ``language`` parameter set in request. If session support is enabled, the view saves the language choice in the user's session. Otherwise, it saves the language choice in a cookie that is by default named ``django_language``. (The name can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1280
# c429f2952e6c4a559feaa859430f772f
msgid "After setting the language choice, Django redirects the user, following this algorithm:"
msgstr ""

#: ../../topics/i18n/translation.txt:1283
# c946283d72364986826279800f72f139
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

#: ../../topics/i18n/translation.txt:1284
# 6e280b5dbb9a4b21b3f4636f78500db4
msgid "If that doesn't exist, or is empty, Django tries the URL in the ``Referrer`` header."
msgstr ""

#: ../../topics/i18n/translation.txt:1286
# a5a2e64d58414d7a8b03e05b3ef1bc05
msgid "If that's empty -- say, if a user's browser suppresses that header -- then the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

#: ../../topics/i18n/translation.txt:1289
# 4ba05bcea15b4d25a00e23d23f53eeaf
msgid "Here's example HTML template code:"
msgstr ""

#: ../../topics/i18n/translation.txt:1305
# 2c13726fde914795b447cd260910f1cf
msgid "In this example, Django looks up the URL of the page to which the user will be redirected in the ``redirect_to`` context variable."
msgstr ""

#: ../../topics/i18n/translation.txt:1309
# 92bde85d80754d3090b5cc49ae647d52
msgid "Using translations outside views and templates"
msgstr ""

#: ../../topics/i18n/translation.txt:1311
# fe79988dafd44111bc634df2e551de1e
msgid "While Django provides a rich set of i18n tools for use in views and templates, it does not restrict the usage to Django-specific code. The Django translation mechanisms can be used to translate arbitrary texts to any language that is supported by Django (as long as an appropriate translation catalog exists, of course). You can load a translation catalog, activate it and translate text to language of your choice, but remember to switch back to original language, as activating a translation catalog is done on per-thread basis and such change will affect code running in the same thread."
msgstr ""

#: ../../topics/i18n/translation.txt:1332
# 696a93f94f644358a48053d1bae3a4ad
msgid "Calling this function with the value 'de' will give you ``\"Willkommen\"``, regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

#: ../../topics/i18n/translation.txt:1335
# 7321ecdd9f9e4c76a2cf5273f9c5d662
msgid "Functions of particular interest are ``django.utils.translation.get_language()`` which returns the language used in the current thread, ``django.utils.translation.activate()`` which activates a translation catalog for the current thread, and ``django.utils.translation.check_for_language()`` which checks if the given language is supported by Django."
msgstr ""

#: ../../topics/i18n/translation.txt:1342
# 11adcbe15a1345b6af4f0b451718972d
msgid "Implementation notes"
msgstr ""

#: ../../topics/i18n/translation.txt:1347
# 31483e6680c144ddbb85410ef6d2bb17
msgid "Specialties of Django translation"
msgstr ""

#: ../../topics/i18n/translation.txt:1349
# c7313b7f1053433a822ac697c19a345e
msgid "Django's translation machinery uses the standard ``gettext`` module that comes with Python. If you know ``gettext``, you might note these specialties in the way Django does translation:"
msgstr ""

#: ../../topics/i18n/translation.txt:1353
# efaf2e46aa0a467dbbd1e6004e47448c
msgid "The string domain is ``django`` or ``djangojs``. This string domain is used to differentiate between different programs that store their data in a common message-file library (usually ``/usr/share/locale/``). The ``django`` domain is used for python and template translation strings and is loaded into the global translation catalogs. The ``djangojs`` domain is only used for JavaScript translation catalogs to make sure that those are as small as possible."
msgstr ""

#: ../../topics/i18n/translation.txt:1360
# e2ea79eb35ae41e1bb002d00aa77d8c7
msgid "Django doesn't use ``xgettext`` alone. It uses Python wrappers around ``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

#: ../../topics/i18n/translation.txt:1366
# a8c022446ff4494bb82d9d60cbb72f00
msgid "How Django discovers language preference"
msgstr ""

#: ../../topics/i18n/translation.txt:1368
# fbe478ceea354a24997e3ddab7827327
msgid "Once you've prepared your translations -- or, if you just want to use the translations that come with Django -- you'll just need to activate translation for your app."
msgstr ""

#: ../../topics/i18n/translation.txt:1372
# 7370fddd7a96456684646790f0701a60
msgid "Behind the scenes, Django has a very flexible model of deciding which language should be used -- installation-wide, for a particular user, or both."
msgstr ""

#: ../../topics/i18n/translation.txt:1375
# de56f9b853a54acbb6fa8c0428b3b13d
msgid "To set an installation-wide language preference, set :setting:`LANGUAGE_CODE`. Django uses this language as the default translation -- the final attempt if no other translator finds a translation."
msgstr ""

#: ../../topics/i18n/translation.txt:1379
# 6d6e7f34baae41548a5459ff8cffd00e
msgid "If all you want to do is run Django with your native language, and a language file is available for it, all you need to do is set :setting:`LANGUAGE_CODE`."
msgstr ""

#: ../../topics/i18n/translation.txt:1382
# eb35343047de4992bb5e94fe2e685fe4
msgid "If you want to let each individual user specify which language he or she prefers, use ``LocaleMiddleware``. ``LocaleMiddleware`` enables language selection based on data from the request. It customizes content for each user."
msgstr ""

#: ../../topics/i18n/translation.txt:1386
# c27c5d11a82a4276a8e50af1bf55510e
msgid "To use ``LocaleMiddleware``, add ``'django.middleware.locale.LocaleMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting. Because middleware order matters, you should follow these guidelines:"
msgstr ""

#: ../../topics/i18n/translation.txt:1390
# 8f958098094848ee90329c60657f9ad4
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

#: ../../topics/i18n/translation.txt:1391
# 1f0c4818815e4ab2a6f1bd9ff16ec6d0
msgid "It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` makes use of session data. And it should come before ``CommonMiddleware`` because ``CommonMiddleware`` needs an activated language in order to resolve the requested URL."
msgstr ""

#: ../../topics/i18n/translation.txt:1395
# 84d003145f9a4a65914d1f185d03a411
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

#: ../../topics/i18n/translation.txt:1397
# d44890ee1cb547c38574bd5ae9a302b3
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

#: ../../topics/i18n/translation.txt:1405
# a5fc916c0ebc4b319d482cb48ae91452
msgid "(For more on middleware, see the :doc:`middleware documentation </topics/http/middleware>`.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1408
# 505f267ec95d482491f2d2f1914602d5
msgid "``LocaleMiddleware`` tries to determine the user's language preference by following this algorithm:"
msgstr ""

#: ../../topics/i18n/translation.txt:1413
# 38fb5e64c5904a7289c052185ad89812
msgid "First, it looks for the language prefix in the requested URL.  This is only performed when you are using the ``i18n_patterns`` function in your root URLconf. See :ref:`url-internationalization` for more information about the language prefix and how to internationalize URL patterns."
msgstr ""

#: ../../topics/i18n/translation.txt:1418
# e04855b93e964b0fbaefda770fb69013
msgid "Failing that, it looks for a ``django_language`` key in the current user's session."
msgstr ""

#: ../../topics/i18n/translation.txt:1421
# fd66c5c8e0184d679460843c3ca811ae
msgid "Failing that, it looks for a cookie."
msgstr ""

#: ../../topics/i18n/translation.txt:1423
# 1bbb21a5203c4ed6877401f4a0f62698
msgid "The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` setting. (The default name is ``django_language``.)"
msgstr ""

#: ../../topics/i18n/translation.txt:1426
# 3cdea35b335a43a6b7a2877e5c0580b4
msgid "Failing that, it looks at the ``Accept-Language`` HTTP header. This header is sent by your browser and tells the server which language(s) you prefer, in order by priority. Django tries each language in the header until it finds one with available translations."
msgstr ""

#: ../../topics/i18n/translation.txt:1431
# 92aaf9b085c14601baee559db9f339b9
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:1437
# f5e22963dc8e4b42b23e15290f8b36b2
msgid "In each of these places, the language preference is expected to be in the standard :term:`language format<language code>`, as a string. For example, Brazilian Portuguese is ``pt-br``."
msgstr ""

#: ../../topics/i18n/translation.txt:1441
# 17f7dcacf093452188f023214cd4445b
msgid "If a base language is available but the sublanguage specified is not, Django uses the base language. For example, if a user specifies ``de-at`` (Austrian German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

#: ../../topics/i18n/translation.txt:1446
# 9d6104537ee34b41badd18d44810ef03
msgid "Only languages listed in the :setting:`LANGUAGES` setting can be selected. If you want to restrict the language selection to a subset of provided languages (because your application doesn't provide all those languages), set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1456
# 81891c04f4a74761aef0d9c8aef97a28
msgid "This example restricts languages that are available for automatic selection to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

#: ../../topics/i18n/translation.txt:1460
# d63fdb90b5d24344a1d808e02ff8358e
msgid "If you define a custom :setting:`LANGUAGES` setting, as explained in the previous bullet, it's OK to mark the languages as translation strings -- but use a \"dummy\" ``ugettext()`` function, not the one in ``django.utils.translation``. You should *never* import ``django.utils.translation`` from within your settings file, because that module in itself depends on the settings, and that would cause a circular import."
msgstr ""

#: ../../topics/i18n/translation.txt:1468
# 76dd41b46b714215b5285e77ef29db62
msgid "The solution is to use a \"dummy\" ``ugettext()`` function. Here's a sample settings file::"
msgstr ""

#: ../../topics/i18n/translation.txt:1478
# 4aa453f07d664186aec77da753fe0d90
msgid "With this arrangement, :djadmin:`django-admin.py makemessages <makemessages>` will still find and mark these strings for translation, but the translation won't happen at runtime -- so you'll have to remember to wrap the languages in the *real* ``ugettext()`` in any code that uses :setting:`LANGUAGES` at runtime."
msgstr ""

#: ../../topics/i18n/translation.txt:1484
# 3fe6ad549789408f9d82958c65390fa9
msgid "The ``LocaleMiddleware`` can only select languages for which there is a Django-provided base translation. If you want to provide translations for your application that aren't already in the set of translations in Django's source tree, you'll want to provide at least a basic one as described in the :ref:`Locale restrictions<locale-restrictions>` note."
msgstr ""

#: ../../topics/i18n/translation.txt:1491
# f8be009a35b140f5b46556c42b22e7e8
msgid "Once ``LocaleMiddleware`` determines the user's preference, it makes this preference available as ``request.LANGUAGE_CODE`` for each :class:`~django.http.HttpRequest`. Feel free to read this value in your view code. Here's a simple example::"
msgstr ""

#: ../../topics/i18n/translation.txt:1502
# dcc840af8c554329ad2b1fd532f96f75
msgid "Note that, with static (middleware-less) translation, the language is in ``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, it's in ``request.LANGUAGE_CODE``."
msgstr ""

#: ../../topics/i18n/translation.txt:1514
# 9ff172c1e5444ababc03f7701fa5904b
msgid "How Django discovers translations"
msgstr ""

#: ../../topics/i18n/translation.txt:1516
# 038f120c434644cbaa49b482626cbfe8
msgid "At runtime, Django builds an in-memory unified catalog of literals-translations. To achieve this it looks for translations by following this algorithm regarding the order in which it examines the different file paths to load the compiled :term:`message files <message file>` (``.mo``) and the precedence of multiple translations for the same literal:"
msgstr ""

#: ../../topics/i18n/translation.txt:1522
# 7dd58dae8850475ea8a4b849fdaa77c5
msgid "The directories listed in :setting:`LOCALE_PATHS` have the highest precedence, with the ones appearing first having higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:1525
# e29b08f91e8941378f0348f84f820d66
msgid "Then, it looks for and uses if it exists a ``locale`` directory in each of the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing first have higher precedence than the ones appearing later."
msgstr ""

#: ../../topics/i18n/translation.txt:1528
# af0ff8770d9c4e8193356c7110df131e
msgid "Finally, the Django-provided base translation in ``django/conf/locale`` is used as a fallback."
msgstr ""

#: ../../topics/i18n/translation.txt:1533
# 6e4ab082832d4612ba1042138975cd35
msgid "The translations for literals included in JavaScript assets are looked up following a similar but not identical algorithm. See the :ref:`javascript_catalog view documentation <javascript_catalog-view>` for more details."
msgstr ""

#: ../../topics/i18n/translation.txt:1538
# 9a54f6ac93904948bcbb67ce5d86f98d
msgid "In all cases the name of the directory containing the translation is expected to be named using :term:`locale name` notation. E.g. ``de``, ``pt_BR``, ``es_AR``, etc."
msgstr ""

#: ../../topics/i18n/translation.txt:1542
# 905f7446a03c402b8a3bd5c8833e735b
msgid "This way, you can write applications that include their own translations, and you can override base translations in your project. Or, you can just build a big project out of several apps and put all translations into one big common message file specific to the project you are composing. The choice is yours."
msgstr ""

#: ../../topics/i18n/translation.txt:1547
# 11559612dbcb4e9dbb8c12beec47597d
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

#: ../../topics/i18n/translation.txt:1549
# fee6da5099de4ed2a30a327986b32193
msgid "All paths listed in :setting:`LOCALE_PATHS` in your settings file are searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1551
# a9ad7078969e4d199ff4cabfd5f52934
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1552
# 4418f9b0baf6491fbda6cff53d711443
msgid "``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

#: ../../topics/i18n/translation.txt:1554
# a10673ca178949289c50f4fe89f3906a
msgid "To create message files, you use the :djadmin:`django-admin.py makemessages <makemessages>` tool. You only need to be in the same directory where the ``locale/`` directory is located. And you use :djadmin:`django-admin.py compilemessages <compilemessages>` to produce the binary ``.mo`` files that are used by ``gettext``."
msgstr ""

#: ../../topics/i18n/translation.txt:1559
# af882a309b0b4bb8a3b4421ddac70b0f
msgid "You can also run :djadmin:`django-admin.py compilemessages --settings=path.to.settings <compilemessages>` to make the compiler process all the directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

#: ../../topics/i18n/translation.txt:1563
# 48a5f0cae09941c2ad2ed2d196c4c930
msgid "Finally, you should give some thought to the structure of your translation files. If your applications need to be delivered to other users and will be used in other projects, you might want to use app-specific translations. But using app-specific translations and project-specific translations could produce weird problems with :djadmin:`makemessages`: it will traverse all directories below the current path and so might put message IDs into a unified, common message file for the current project that are already in application message files."
msgstr ""

#: ../../topics/i18n/translation.txt:1571
# 70f876a9f02d4afe9bdb747f6686e693
msgid "The easiest way out is to store applications that are not part of the project (and so carry their own translations) outside the project tree. That way, :djadmin:`django-admin.py makemessages <makemessages>`, when ran on a project level will only extract strings that are connected to your explicit project and not strings that are distributed independently."
msgstr ""

#: ../../topics/index.txt:2
# e35f15168ab64741ad35060e0054d550
msgid "Using Django"
msgstr ""

#: ../../topics/index.txt:4
# 22f17263a5ce494080cbe52fac1009e7
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

#: ../../topics/install.txt:3
# 7761d09ab5e8426686c3e14c02f11e60
msgid "How to install Django"
msgstr ""

#: ../../topics/install.txt:5
# 83703e7b381b49f6846a6a704f2667e9
msgid "This document will get you up and running with Django."
msgstr ""

#: ../../topics/install.txt:8
# 41e409bdf7c145f981bfef09cc5af556
msgid "Install Python"
msgstr ""

#: ../../topics/install.txt:10
# 109f8ec4dccc4dbe995fa6b16c931e3f
msgid "Being a Python Web framework, Django requires Python."
msgstr ""

#: ../../topics/install.txt:12
# 636a4d65e79c4abfbd2f8d2fe0977580
msgid "It works with any Python version from 2.6.5 to 2.7. It also features experimental support for versions from 3.2.3 to 3.3."
msgstr ""

#: ../../topics/install.txt:15
# ddc67dccb9a6471793aadf74ec2e9e19
msgid "Get Python at http://www.python.org. If you're running Linux or Mac OS X, you probably already have it installed."
msgstr ""

#: ../../topics/install.txt:20
# ef7cd9998352418985a6f72e330e8c76
msgid "If you use Jython_ (a Python implementation for the Java platform), you'll need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

#: ../../topics/install.txt:27
# b0cd3248bd3e4a57afed6e1e5320edc7
msgid "On Windows, you might need to adjust your ``PATH`` environment variable to include paths to Python executable and additional scripts. For example, if your Python is installed in ``C:\\Python27\\``, the following paths need to be added to ``PATH``::"
msgstr ""

#: ../../topics/install.txt:35
# 2d86fc5ce2ac4e2483b557e218213efe
msgid "Install Apache and mod_wsgi"
msgstr ""

#: ../../topics/install.txt:37
# ed098e24363b43a38b500fe0d7e50465
msgid "If you just want to experiment with Django, skip ahead to the next section; Django includes a lightweight web server you can use for testing, so you won't need to set up Apache until you're ready to deploy Django in production."
msgstr ""

#: ../../topics/install.txt:42
# 072704fb11224e55bd08b033498966d2
msgid "If you want to use Django on a production site, use `Apache`_ with `mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python within Apache and loads Python code into memory when the server starts. Code stays in memory throughout the life of an Apache process, which leads to significant performance gains over other server arrangements. In daemon mode, mod_wsgi spawns an independent daemon process that handles requests. The daemon process can run as a different user than the Web server, possibly leading to improved security, and the daemon process can be restarted without restarting the entire Apache Web server, possibly making refreshing your codebase more seamless. Consult the mod_wsgi documentation to determine which mode is right for your setup. Make sure you have Apache installed, with the mod_wsgi module activated. Django will work with any version of Apache that supports mod_wsgi."
msgstr ""

#: ../../topics/install.txt:58
# ceb5e11a263c48aea67ec6d00fe4fbb0
msgid "See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` for information on how to configure mod_wsgi once you have it installed."
msgstr ""

#: ../../topics/install.txt:62
# 86a340294fbc4812915c5648dfd707da
msgid "If you can't use mod_wsgi for some reason, fear not: Django supports many other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/uwsgi>`; it works very well with `nginx`_. Another is :doc:`FastCGI </howto/deployment/fastcgi>`, perfect for using Django with servers other than Apache. Additionally, Django follows the WSGI spec (:pep:`3333`), which allows it to run on a variety of server platforms. See the `server-arrangements wiki page`_ for specific installation instructions for each platform."
msgstr ""

#: ../../topics/install.txt:78
# 3faca03138474ed68eda718ba861ec9c
msgid "Get your database running"
msgstr ""

#: ../../topics/install.txt:80
# b9872eba9e534cc1b7c47ebd87dabb9f
msgid "If you plan to use Django's database API functionality, you'll need to make sure a database server is running. Django supports many different database servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and SQLite_."
msgstr ""

#: ../../topics/install.txt:85
# 7047e46246494971879318f9c256422f
msgid "If you are developing a simple project or something you don't plan to deploy in a production environment, SQLite is generally the simplest option as it doesn't require running a separate server. However, SQLite has many differences from other databases, so if you are working on something substantial, it's recommended to develop with the same database as you plan on using in production."
msgstr ""

#: ../../topics/install.txt:92
# 375dbea2155444309e2314b785cfcccd
msgid "In addition to the officially supported databases, there are backends provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../topics/install.txt:95
# 2e8b6c83e15d4d378e96559d8a5da57b
msgid "`Sybase SQL Anywhere`_"
msgstr ""

#: ../../topics/install.txt:96
# e0f0ca1b34f64aa38a84600646f035c0
msgid "`IBM DB2`_"
msgstr ""

#: ../../topics/install.txt:97
# 7b14da5174594e42b3a9e42c7b71a729
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

#: ../../topics/install.txt:98
# e230780ded9e4983a07dacc63d8af88d
msgid "Firebird_"
msgstr ""

#: ../../topics/install.txt:99
# ceff76226fbf48839bed8597fb84c189
msgid "ODBC_"
msgstr ""

#: ../../topics/install.txt:101
# 9799eb85d01c4074b0f7e291c95aee1d
msgid "The Django versions and ORM features supported by these unofficial backends vary considerably. Queries regarding the specific capabilities of these unofficial backends, along with any support queries, should be directed to the support channels provided by each 3rd party project."
msgstr ""

#: ../../topics/install.txt:106
# 2b3cf2f9bae24ac5b927c81c115a51f5
msgid "In addition to a database backend, you'll need to make sure your Python database bindings are installed."
msgstr ""

#: ../../topics/install.txt:109
# 91c40ed6733d4357a16669a4e256c1b3
msgid "If you're using PostgreSQL, you'll need the ``postgresql_psycopg2`` package. You might want to refer to our :ref:`PostgreSQL notes <postgresql-notes>` for further technical details specific to this database."
msgstr ""

#: ../../topics/install.txt:113
# e6d1f14d9bba4671b883c7f8ce53a84e
msgid "If you're on Windows, check out the unofficial `compiled Windows version`_."
msgstr ""

#: ../../topics/install.txt:115
# ef7b06b1df3b4346875ea583a5f4a19e
msgid "If you're using MySQL, you'll need the ``MySQL-python`` package, version 1.2.1p2 or higher. You will also want to read the database-specific :ref:`notes for the MySQL backend <mysql-notes>`."
msgstr ""

#: ../../topics/install.txt:119
# 9eb8003a75974b539497d59bd4e09fac
msgid "If you're using Oracle, you'll need a copy of cx_Oracle_, but please read the database-specific :ref:`notes for the Oracle backend <oracle-notes>` for important information regarding supported versions of both Oracle and ``cx_Oracle``."
msgstr ""

#: ../../topics/install.txt:124
# 0dc1bfda7da4433492f13b6a6cb1c8a7
msgid "If you're using an unofficial 3rd party backend, please consult the documentation provided for any additional requirements."
msgstr ""

#: ../../topics/install.txt:127
# 37beaf6255a2407a8124c954c99d9c5e
msgid "If you plan to use Django's ``manage.py syncdb`` command to automatically create database tables for your models, you'll need to ensure that Django has permission to create and alter tables in the database you're using; if you plan to manually create the tables, you can simply grant Django ``SELECT``, ``INSERT``, ``UPDATE`` and ``DELETE`` permissions. On some databases, Django will need ``ALTER TABLE`` privileges during ``syncdb`` but won't issue ``ALTER TABLE`` statements on a table once ``syncdb`` has created it."
msgstr ""

#: ../../topics/install.txt:136
# 7be668ad390d4a08954d0f0fbf3f8ca0
msgid "If you're using Django's :doc:`testing framework</topics/testing>` to test database queries, Django will need permission to create a test database."
msgstr ""

#: ../../topics/install.txt:155
# 3f2dc778dd584d12b0fa0941a278c944
msgid "Remove any old versions of Django"
msgstr ""

#: ../../topics/install.txt:157
# fce001c3880b4caa904e1e7bd23b52bf
msgid "If you are upgrading your installation of Django from a previous version, you will need to uninstall the old Django version before installing the new version."
msgstr ""

#: ../../topics/install.txt:161
# b8cf39e1a587465e917e010b782d3a4f
msgid "If you installed Django using pip_ or ``easy_install`` previously, installing with pip_ or ``easy_install`` again will automatically take care of the old version, so you don't need to do it yourself."
msgstr ""

#: ../../topics/install.txt:165
# 76ee3178b4ae43dfbc7a5fade517e83d
msgid "If you previously installed Django using ``python setup.py install``, uninstalling is as simple as deleting the ``django`` directory from your Python ``site-packages``. To find the directory you need to remove, you can run the following at your shell prompt (not the interactive Python prompt):"
msgstr ""

#: ../../topics/install.txt:178
# 8bda804710ec4e00914b6097ac0a1548
msgid "Install the Django code"
msgstr ""

#: ../../topics/install.txt:180
# ae9568815fd146d19bf734b04206067d
msgid "Installation instructions are slightly different depending on whether you're installing a distribution-specific package, downloading the latest official release, or fetching the latest development version."
msgstr ""

#: ../../topics/install.txt:184
# d92c629ad5074ef0a7e87e9c36c53eda
msgid "It's easy, no matter which way you choose."
msgstr ""

#: ../../topics/install.txt:187
# bef95a0d9c624c15afde88457a53cba7
msgid "Installing a distribution-specific package"
msgstr ""

#: ../../topics/install.txt:189
# 20566ee98c354a3dab29260867010321
msgid "Check the :doc:`distribution specific notes </misc/distributions>` to see if your platform/distribution provides official Django packages/installers. Distribution-provided packages will typically allow for automatic installation of dependencies and easy upgrade paths."
msgstr ""

#: ../../topics/install.txt:197
# 6785f11ad2024239aefe3314aa2da319
msgid "Installing an official release with ``pip``"
msgstr ""

#: ../../topics/install.txt:199
# 0dc1ec57d8744a7b911818c36784e46f
msgid "This is the recommended way to install Django."
msgstr ""

#: ../../topics/install.txt:201
# c4d09255edbe4b03a7961b5538ca8cc5
msgid "Install pip_. The easiest is to use the `standalone pip installer`_. If your distribution already has ``pip`` installed, you might need to update it if it's outdated. (If it's outdated, you'll know because installation won't work.)"
msgstr ""

#: ../../topics/install.txt:206
# 3eb228c9ea884120a43d4f421b635bff
msgid "(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools provide isolated Python environments, which are more practical than installing packages systemwide. They also allow installing packages without administrator privileges. It's up to you to decide if you want to learn and use them."
msgstr ""

#: ../../topics/install.txt:212
# 1306bcb877bc40918b8aa3de3f03c66d
msgid "If you're using Linux, Mac OS X or some other flavor of Unix, enter the command ``sudo pip install Django`` at the shell prompt. If you're using Windows, start a command shell with administrator privileges and run the command ``pip install Django``. This will install Django in your Python installation's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:218
# 17676290109449c490443d9b90466be2
msgid "If you're using a virtualenv, you don't need ``sudo`` or administrator privileges, and this will install Django in the virtualenv's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:228
# 01f7ef6c843a49538b3bed86e954feba
msgid "Installing an official release manually"
msgstr ""

#: ../../topics/install.txt:230
# 1d59df07739f4ca78ab094a01ed40fab
msgid "Download the latest release from our `download page`_."
msgstr ""

#: ../../topics/install.txt:232
# 19b1f844e2ab45378fbbbe7a8170fb08
msgid "Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where ``X.Y`` is the version number of the latest release). If you're using Windows, you can download the command-line tool bsdtar_ to do this, or you can use a GUI-based tool such as 7-zip_."
msgstr ""

#: ../../topics/install.txt:237
# fb470ba0bb4046fa982ef516168799f2
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

#: ../../topics/install.txt:239
# a3e40d4bb70c45b7b3164e9a6808e8e3
msgid "If you're using Linux, Mac OS X or some other flavor of Unix, enter the command ``sudo python setup.py install`` at the shell prompt. If you're using Windows, start a command shell with administrator privileges and run the command ``python setup.py install``. This will install Django in your Python installation's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:247
# 384706d66b424b53a101c6c91aaee82c
msgid "If you use this installation technique, it is particularly important that you :ref:`remove any existing installations<removing-old-versions-of-django>` of Django first. Otherwise, you can end up with a broken installation that includes files from previous versions that have since been removed from Django."
msgstr ""

#: ../../topics/install.txt:261
# 4be78ae0733f44eb9c34cf61144466c8
msgid "Installing the development version"
msgstr ""

#: ../../topics/install.txt:265
# 2742bd409b7648598f4d4002fe9f60e9
msgid "If you decide to use the latest development version of Django, you'll want to pay close attention to `the development timeline`_, and you'll want to keep an eye on the :ref:`release notes for the upcoming release <development_release_notes>`. This will help you stay on top of any new features you might want to use, as well as any changes you'll need to make to your code when updating your copy of Django. (For stable releases, any necessary changes are documented in the release notes.)"
msgstr ""

#: ../../topics/install.txt:276
# 44c4b7a449234799afa2165cf4e587e4
msgid "If you'd like to be able to update your Django code occasionally with the latest bug fixes and improvements, follow these instructions:"
msgstr ""

#: ../../topics/install.txt:279
# c32fcf1ad3934b03bf442e19ecfb0822
msgid "Make sure that you have Git_ installed and that you can run its commands from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

#: ../../topics/install.txt:282
# 9da2a0eb82534a1ab6091590bf2a735c
msgid "Check out Django's main development branch (the 'trunk' or 'master') like so:"
msgstr ""

#: ../../topics/install.txt:289
# d3e419ab0bd34ccbbf1165521fa836e1
msgid "This will create a directory ``django-trunk`` in your current directory."
msgstr ""

#: ../../topics/install.txt:291
# 0ea4ea8b0da340d2841b6215d3916fb4
msgid "Make sure that the Python interpreter can load Django's code. The most convenient way to do this is via pip_. Run the following command:"
msgstr ""

#: ../../topics/install.txt:298
# 3a4aef1f44934553ba04dceb84cd2b07
msgid "(If using a virtualenv_ you can omit ``sudo``.)"
msgstr ""

#: ../../topics/install.txt:300
# bf0c07276c2a450b9663fa5fc8bff721
msgid "This will make Django's code importable, and will also make the ``django-admin.py`` utility command available. In other words, you're all set!"
msgstr ""

#: ../../topics/install.txt:304
# a41027d38e054696b0c325ae46c6796a
msgid "If you don't have pip_ available, see the alternative instructions for `installing the development version without pip`_."
msgstr ""

#: ../../topics/install.txt:309
# 01dcdc453a034472b7fa734fab6074c2
msgid "Don't run ``sudo python setup.py install``, because you've already carried out the equivalent actions in step 3."
msgstr ""

#: ../../topics/install.txt:312
# 6a014118a0624a05a5667d9ac1a42fa2
msgid "When you want to update your copy of the Django source code, just run the command ``git pull`` from within the ``django-trunk`` directory. When you do this, Git will automatically download any changes."
msgstr ""

#: ../../topics/install.txt:321
# ae81bfdbb46a4ab6a227961bb90429a4
msgid "Installing the development version without pip"
msgstr ""

#: ../../topics/install.txt:323
# 24da1e6f69124b7b86947eecbd186d3d
msgid "If you don't have pip_, you can instead manually `modify Python's search path`_."
msgstr ""

#: ../../topics/install.txt:326
# c75a5e3f474a4ec6a08a6d8b33c51ecf
msgid "First follow steps 1 and 2 above, so that you have a ``django-trunk`` directory with a checkout of Django's latest code in it. Then add a ``.pth`` file containing the full path to the ``django-trunk`` directory to your system's ``site-packages`` directory. For example, on a Unix-like system:"
msgstr ""

#: ../../topics/install.txt:335
# 5a846aba893943828d22bb2c5dfa0bcb
msgid "In the above line, change ``WORKING-DIR/django-trunk`` to match the full path to your new ``django-trunk`` directory, and change ``SITE-PACKAGES-DIR`` to match the location of your system's ``site-packages`` directory."
msgstr ""

#: ../../topics/install.txt:339
# 6b43511fc08c40a6848c15912e824fb8
msgid "The location of the ``site-packages`` directory depends on the operating system, and the location in which Python was installed. To find your system's ``site-packages`` location, execute the following:"
msgstr ""

#: ../../topics/install.txt:347
# 3e48264e63ef4c2d902b6737d7d5adfd
msgid "(Note that this should be run from a shell prompt, not a Python interactive prompt.)"
msgstr ""

#: ../../topics/install.txt:350
# 8e9eb47c798243fb923d0d57128e8da2
msgid "Some Debian-based Linux distributions have separate ``site-packages`` directories for user-installed packages, such as when installing Django from a downloaded tarball. The command listed above will give you the system's ``site-packages``, the user's directory can be found in ``/usr/local/lib/`` instead of ``/usr/lib/``."
msgstr ""

#: ../../topics/install.txt:356
# aac5ed4f13854dc2aad3f82e529a4472
msgid "Next you need to make the ``django-admin.py`` utility available in your shell PATH."
msgstr ""

#: ../../topics/install.txt:359
# 302fb676acc9450c88b2790e9c20d5de
msgid "On Unix-like systems, create a symbolic link to the file ``django-trunk/django/bin/django-admin.py`` in a directory on your system path, such as ``/usr/local/bin``. For example:"
msgstr ""

#: ../../topics/install.txt:367
# ee811a4f91cc41289411d38e1ec445a9
msgid "(In the above line, change WORKING-DIR to match the full path to your new ``django-trunk`` directory.)"
msgstr ""

#: ../../topics/install.txt:370
# 8cc30efaad464f39b9c57d79103dc0e6
msgid "This simply lets you type ``django-admin.py`` from within any directory, rather than having to qualify the command with the full path to the file."
msgstr ""

#: ../../topics/install.txt:373
# 4e9557316765436aa5190c87a4fec1bc
msgid "On Windows systems, the same result can be achieved by copying the file ``django-trunk/django/bin/django-admin.py`` to somewhere on your system path, for example ``C:\\Python27\\Scripts``."
msgstr ""

#: ../../topics/logging.txt:3
# 5b1e94642ad04000af4b024d53807e60
msgid "Logging"
msgstr ""

#: ../../topics/logging.txt:9
# c945ba94f6c94a10a79f90783bea10a0
msgid "A quick logging primer"
msgstr ""

#: ../../topics/logging.txt:11
# 030b9244fcc24283b6e089b8af419d8c
msgid "Django uses Python's builtin :mod:`logging` module to perform system logging. The usage of this module is discussed in detail in Python's own documentation. However, if you've never used Python's logging framework (or even if you have), here's a quick primer."
msgstr ""

#: ../../topics/logging.txt:17
# 83fc12e7be9a4c2aa144b241cdcc73b1
msgid "The cast of players"
msgstr ""

#: ../../topics/logging.txt:19
# c3e7bbe29f004e2a9a505e354c27c416
msgid "A Python logging configuration consists of four parts:"
msgstr ""

#: ../../topics/logging.txt:21
# 47493ef3116d47339f25d3c045d45a59
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

#: ../../topics/logging.txt:22
# 7397b1019b3342f88fa547dee873f51d
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

#: ../../topics/logging.txt:23
# f5c70e820014439e91b738be1c0d7255
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

#: ../../topics/logging.txt:24
# a317eec7d814498c984f190ff654d7a1
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

#: ../../topics/logging.txt:29
#: ../../topics/logging.txt:395
# cccceccd8d9947a0884152cabfc665b5
# 65c4eb117a4e48b8b07b3203f465e903
msgid "Loggers"
msgstr ""

#: ../../topics/logging.txt:31
# 46bd437aae374eddad646a795fe1753b
msgid "A logger is the entry point into the logging system. Each logger is a named bucket to which messages can be written for processing."
msgstr ""

#: ../../topics/logging.txt:34
# 6808c81e30f5494f9753f228eae94735
msgid "A logger is configured to have a *log level*. This log level describes the severity of the messages that the logger will handle. Python defines the following log levels:"
msgstr ""

#: ../../topics/logging.txt:38
# 5f78b4e7bbb0482d966db5baf6304aae
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

#: ../../topics/logging.txt:40
# b236006d69814355800e1d62eb03036a
msgid "``INFO``: General system information"
msgstr ""

#: ../../topics/logging.txt:42
# 9ac32da579b44673929284dd08fd0446
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:45
# f2867235af8441128967b945eb9b99e2
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:48
# 540a977382e445d2a7800e51834055a6
msgid "``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

#: ../../topics/logging.txt:51
# b76706e91bf64ab6b939ae94a2820c68
msgid "Each message that is written to the logger is a *Log Record*. Each log record also has a *log level* indicating the severity of that specific message. A log record can also contain useful metadata that describes the event that is being logged. This can include details such as a stack trace or an error code."
msgstr ""

#: ../../topics/logging.txt:57
# de114b45d41d425aaafdb7de1f26bda1
msgid "When a message is given to the logger, the log level of the message is compared to the log level of the logger. If the log level of the message meets or exceeds the log level of the logger itself, the message will undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

#: ../../topics/logging.txt:63
# 92f3e0f5ae744fc5826ba3a4a6369332
msgid "Once a logger has determined that a message needs to be processed, it is passed to a *Handler*."
msgstr ""

#: ../../topics/logging.txt:69
#: ../../topics/logging.txt:438
# e3527f4d3a2045d490e70699e1e35b5d
# 4eeff4c1d2eb4eaca66998589fcfc8cf
msgid "Handlers"
msgstr ""

#: ../../topics/logging.txt:71
# 7418bf9fd6c54e1382b693786ffbed28
msgid "The handler is the engine that determines what happens to each message in a logger. It describes a particular logging behavior, such as writing a message to the screen, to a file, or to a network socket."
msgstr ""

#: ../../topics/logging.txt:75
# dcf7a41173314423aa02f6df5f5d4d70
msgid "Like loggers, handlers also have a log level. If the log level of a log record doesn't meet or exceed the level of the handler, the handler will ignore the message."
msgstr ""

#: ../../topics/logging.txt:79
# 4cd2666c96414a1081725128201a50b9
msgid "A logger can have multiple handlers, and each handler can have a different log level. In this way, it is possible to provide different forms of notification depending on the importance of a message. For example, you could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages to a paging service, while a second handler logs all messages (including ``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

#: ../../topics/logging.txt:90
#: ../../topics/logging.txt:483
#: ../../topics/templates.txt:124
# 46566dd993c34dc295f4cc371e4ff9f9
# dc8d98b8f1d241a08253e38a8d3aa639
# cb8fca8542c94224b3137dd0d922d952
msgid "Filters"
msgstr ""

#: ../../topics/logging.txt:92
# af007d151f324df3841861465bc283f4
msgid "A filter is used to provide additional control over which log records are passed from logger to handler."
msgstr ""

#: ../../topics/logging.txt:95
# 7bba5ef78b864a0a8bad3d5cee7ecd0b
msgid "By default, any log message that meets log level requirements will be handled. However, by installing a filter, you can place additional criteria on the logging process. For example, you could install a filter that only allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

#: ../../topics/logging.txt:101
# 1b1c07143a654ea7bd21efa41ecb5b9c
msgid "Filters can also be used to modify the logging record prior to being emitted. For example, you could write a filter that downgrades ``ERROR`` log records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

#: ../../topics/logging.txt:106
# fefb5f2b23794b62a27a67453a3bff79
msgid "Filters can be installed on loggers or on handlers; multiple filters can be used in a chain to perform multiple filtering actions."
msgstr ""

#: ../../topics/logging.txt:112
# 2d46385610a64e15a976f2bc3e35d1cc
msgid "Formatters"
msgstr ""

#: ../../topics/logging.txt:114
# 5448d6d49b5f4419804eb7e95b74c0c1
msgid "Ultimately, a log record needs to be rendered as text. Formatters describe the exact format of that text. A formatter usually consists of a Python formatting string; however, you can also write custom formatters to implement specific formatting behavior."
msgstr ""

#: ../../topics/logging.txt:120
# bf14b6474e7c4d95b5a4eabcf00b6644
msgid "Using logging"
msgstr ""

#: ../../topics/logging.txt:122
# 07c78e21323041f485dacc40101931d0
msgid "Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework is very simple. Here's an example::"
msgstr ""

#: ../../topics/logging.txt:138
# cbd9699a26354023a09088a7a62c851f
msgid "And that's it! Every time the ``bad_mojo`` condition is activated, an error log record will be written."
msgstr ""

#: ../../topics/logging.txt:142
# 3e2ff0468474408e88d098882cc4bad0
msgid "Naming loggers"
msgstr ""

#: ../../topics/logging.txt:144
# 03c19ef143d94129acaa40a51f8b26a6
msgid "The call to :meth:`logging.getLogger()` obtains (creating, if necessary) an instance of a logger. The logger instance is identified by a name. This name is used to identify the logger for configuration purposes."
msgstr ""

#: ../../topics/logging.txt:149
# 0bac8e3a0cd04c76a19cf4084e35c812
msgid "By convention, the logger name is usually ``__name__``, the name of the python module that contains the logger. This allows you to filter and handle logging calls on a per-module basis. However, if you have some other way of organizing your logging messages, you can provide any dot-separated name to identify your logger::"
msgstr ""

#: ../../topics/logging.txt:158
# 99a2dc06d8b949ce997df5634f86c268
msgid "The dotted paths of logger names define a hierarchy. The ``project.interesting`` logger is considered to be a parent of the ``project.interesting.stuff`` logger; the ``project`` logger is a parent of the ``project.interesting`` logger."
msgstr ""

#: ../../topics/logging.txt:163
# 0338c8edfed94324950e9c86d6b9029c
msgid "Why is the hierarchy important? Well, because loggers can be set to *propagate* their logging calls to their parents. In this way, you can define a single set of handlers at the root of a logger tree, and capture all logging calls in the subtree of loggers. A logging handler defined in the ``project`` namespace will catch all logging messages issued on the ``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

#: ../../topics/logging.txt:171
# 0f4c818c998145948919c20b6ba712cc
msgid "This propagation can be controlled on a per-logger basis. If you don't want a particular logger to propagate to it's parents, you can turn off this behavior."
msgstr ""

#: ../../topics/logging.txt:176
# b940681d02774e92a88525cda977d89f
msgid "Making logging calls"
msgstr ""

#: ../../topics/logging.txt:178
# f2bcf647b2584272a71d679de70e201d
msgid "The logger instance contains an entry method for each of the default log levels:"
msgstr ""

#: ../../topics/logging.txt:181
# 62642f1760ee45e58db8ad227aed06fc
msgid "``logger.critical()``"
msgstr ""

#: ../../topics/logging.txt:182
# 23e351c63a174dffa8738f29e3ff2255
msgid "``logger.error()``"
msgstr ""

#: ../../topics/logging.txt:183
# 0dd170582f4045c29d5ee7f1355025c2
msgid "``logger.warning()``"
msgstr ""

#: ../../topics/logging.txt:184
# e7e8b0ba22de4f0fa1bb6d92a4290350
msgid "``logger.info()``"
msgstr ""

#: ../../topics/logging.txt:185
# 4d52e5c402b34c5799f34459e34629f3
msgid "``logger.debug()``"
msgstr ""

#: ../../topics/logging.txt:187
# 0458f7b36a724732ab4b6fe79b2b4283
msgid "There are two other logging calls available:"
msgstr ""

#: ../../topics/logging.txt:189
# e1e226a7e43642d78bee8c674810f997
msgid "``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

#: ../../topics/logging.txt:192
# 50c3b71e1d414a9bb8e64dee056cf84f
msgid "``logger.exception()``: Creates an ``ERROR`` level logging message wrapping the current exception stack frame."
msgstr ""

#: ../../topics/logging.txt:198
# 774ef233ebab45b2b9406cb79d174aa2
msgid "Configuring logging"
msgstr ""

#: ../../topics/logging.txt:200
# 34658df445184eb090d2ec89e6045051
msgid "Of course, it isn't enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters and formatters to ensure that logging output is output in a useful way."
msgstr ""

#: ../../topics/logging.txt:204
# 7713daee5ef94a5d902d65b21e5f4f8b
msgid "Python's logging library provides several techniques to configure logging, ranging from a programmatic interface to configuration files. By default, Django uses the `dictConfig format`_."
msgstr ""

#: ../../topics/logging.txt:209
# 3c3e5a5e2ba6441a9a8c7849afb64db1
msgid "``logging.dictConfig`` is a builtin library in Python 2.7. In order to make this library available for users of earlier Python versions, Django includes a copy as part of ``django.utils.log``. If you have Python 2.7 or later, the system native library will be used; if you have Python 2.6, Django's copy will be used."
msgstr ""

#: ../../topics/logging.txt:215
# a8c5fe91733e4e46ae7269960d13a930
msgid "In order to configure logging, you use :setting:`LOGGING` to define a dictionary of logging settings. These settings describes the loggers, handlers, filters and formatters that you want in your logging setup, and the log levels and other properties that you want those components to have."
msgstr ""

#: ../../topics/logging.txt:221
# 16a014fd442947c3b4cee7b1647c0264
msgid "Prior to Django 1.5, the :setting:`LOGGING` setting overwrote the :ref:`default Django logging configuration <default-logging-configuration>`. From Django 1.5 forward, the project's logging configuration is merged with Django's defaults, hence you can decide if you want to add to, or replace the existing configuration. To completely override the default configuration, set the ``disable_existing_loggers`` key to True in the :setting:`LOGGING` dictConfig. Alternatively you can redefine some or all of the loggers."
msgstr ""

#: ../../topics/logging.txt:229
# e6cf436edc4046aa8cbab91322837ddc
msgid "Logging is configured as soon as settings have been loaded (either manually using :func:`~django.conf.settings.configure` or when at least one setting is accessed). Since the loading of settings is one of the first things that Django does, you can be certain that loggers are always ready for use in your project code."
msgstr ""

#: ../../topics/logging.txt:242
# 2d47751d22fe4538b3abe804ba872997
msgid "The full documentation for `dictConfig format`_ is the best source of information about logging configuration dictionaries. However, to give you a taste of what is possible, here is an example of a fairly complex logging setup, configured using :meth:`logging.dictConfig`::"
msgstr ""

#: ../../topics/logging.txt:299
# 1c88707041a1456a8473e35c314857e4
msgid "This logging configuration does the following things:"
msgstr ""

#: ../../topics/logging.txt:301
# 9577b4c8c2a04ca38f259b9eaa8bcef3
msgid "Identifies the configuration as being in 'dictConfig version 1' format. At present, this is the only dictConfig format version."
msgstr ""

#: ../../topics/logging.txt:304
# c73c5242ddb3405198b98c06aac7781d
msgid "Disables all existing logging configurations."
msgstr ""

#: ../../topics/logging.txt:306
# 68ccae4b8b274c48bac332ab27ac4c56
msgid "Defines two formatters:"
msgstr ""

#: ../../topics/logging.txt:308
# 99768c45b8d647fbaf438ee323ade248
msgid "``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the log message."
msgstr ""

#: ../../topics/logging.txt:311
# 30f795476e6e4b1aabd6102ead84a56a
msgid "The `format` string is a normal Python formatting string describing the details that are to be output on each logging line. The full list of detail that can be output can be found in the `formatter documentation`_."
msgstr ""

#: ../../topics/logging.txt:316
# 7a37eea7f55b436ba27606eb720678f8
msgid "``verbose``, that outputs the log level name, the log message, plus the time, process, thread and module that generate the log message."
msgstr ""

#: ../../topics/logging.txt:320
# efe55c9b281a45d78930e2306a409332
msgid "Defines one filter -- :class:`project.logging.SpecialFilter`, using the alias ``special``. If this filter required additional arguments at time of construction, they can be provided as additional keys in the filter configuration dictionary. In this case, the argument ``foo`` will be given a value of ``bar`` when instantiating the :class:`SpecialFilter`."
msgstr ""

#: ../../topics/logging.txt:327
# 11d47c542d844dff92cd9d696e059382
msgid "Defines three handlers:"
msgstr ""

#: ../../topics/logging.txt:329
# c23ef167e4434c50bb03cf8af73dc885
msgid "``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message to ``/dev/null``."
msgstr ""

#: ../../topics/logging.txt:332
# 350cfab2d28c42799e31f6df09b39011
msgid "``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) message to stderr. This handler uses the `simple` output format."
msgstr ""

#: ../../topics/logging.txt:336
# ba6bdf110a67498ca1c87728e226d9ff
msgid "``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

#: ../../topics/logging.txt:340
# 092dd05686174db6b2f73a83e7b270c8
msgid "Configures three loggers:"
msgstr ""

#: ../../topics/logging.txt:342
# dfa1eaa0f78e456ca709c4a7eb7a3cd6
msgid "``django``, which passes all messages at ``INFO`` or higher to the ``null`` handler."
msgstr ""

#: ../../topics/logging.txt:345
# be06c3d4465747cf9d62fecb077dbef2
msgid "``django.request``, which passes all ``ERROR`` messages to the ``mail_admins`` handler. In addition, this logger is marked to *not* propagate messages. This means that log messages written to ``django.request`` will not be handled by the ``django`` logger."
msgstr ""

#: ../../topics/logging.txt:351
# 3c702a4c76604d47ba2ce2fc8dd762fb
msgid "``myproject.custom``, which passes all messages at ``INFO`` or higher that also pass the ``special`` filter to two handlers -- the ``console``, and ``mail_admins``. This means that all ``INFO`` level messages (or higher) will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will also be output via email."
msgstr ""

#: ../../topics/logging.txt:361
# c94ac586e4cb4d97974166f8787fbe6e
msgid "Custom logging configuration"
msgstr ""

#: ../../topics/logging.txt:363
# b5d38274fca44bbeacaa497cb53d3e76
msgid "If you don't want to use Python's dictConfig format to configure your logger, you can specify your own configuration scheme."
msgstr ""

#: ../../topics/logging.txt:366
# 3ce51873709b439c9bf833c1854dbae0
msgid "The :setting:`LOGGING_CONFIG` setting defines the callable that will be used to configure Django's loggers. By default, it points at Python's :meth:`logging.dictConfig()` method. However, if you want to use a different configuration process, you can use any other callable that takes a single argument. The contents of :setting:`LOGGING` will be provided as the value of that argument when logging is configured."
msgstr ""

#: ../../topics/logging.txt:374
# e49b90c8993e4c58bea5b8cb50ab7b3c
msgid "Disabling logging configuration"
msgstr ""

#: ../../topics/logging.txt:376
# ee0eb2e25d534cb9bddf6b0139b43080
msgid "If you don't want to configure logging at all (or you want to manually configure logging using your own approach), you can set :setting:`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

#: ../../topics/logging.txt:382
# ad30efef471d4e41b7c5dade1ae8f532
msgid "Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the configuration process is disabled, not logging itself. If you disable the configuration process, Django will still make logging calls, falling back to whatever default logging behavior is defined."
msgstr ""

#: ../../topics/logging.txt:389
# 146f1a4418334452b97ba5bf046c5fa8
msgid "Django's logging extensions"
msgstr ""

#: ../../topics/logging.txt:391
# fb08b698c3dd40bdb2465b916c610946
msgid "Django provides a number of utilities to handle the unique requirements of logging in Web server environment."
msgstr ""

#: ../../topics/logging.txt:397
# 31ac6980144540c8abba3c4fa5cb4135
msgid "Django provides three built-in loggers."
msgstr ""

#: ../../topics/logging.txt:400
# 22ec38b9788649b6b8f0ef6db556a023
msgid "``django``"
msgstr ""

#: ../../topics/logging.txt:402
# f136d623aede466591cf256debf31a65
msgid "``django`` is the catch-all logger. No messages are posted directly to this logger."
msgstr ""

#: ../../topics/logging.txt:406
# ec5eda52f210415f94d9e8c52ad5167f
msgid "``django.request``"
msgstr ""

#: ../../topics/logging.txt:408
# 07b9d669a45c48f080d9022816ba174a
msgid "Log messages related to the handling of requests. 5XX responses are raised as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

#: ../../topics/logging.txt:412
#: ../../topics/logging.txt:427
# 90eb159623a647a9b756bae5f537b457
# f9667ca3a4ca44fea20aaeb51af00a82
msgid "Messages to this logger have the following extra context:"
msgstr ""

#: ../../topics/logging.txt:414
# 0c66bae9b3ae4d3c81de8c12f99fa00a
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

#: ../../topics/logging.txt:417
# a7665ecd055f472a854bcda626877372
msgid "``request``: The request object that generated the logging message."
msgstr ""

#: ../../topics/logging.txt:421
# feca3d8e520a477ea4b11e912f76f156
msgid "``django.db.backends``"
msgstr ""

#: ../../topics/logging.txt:423
# 0cf73fab50524bd8bcc541d58824de7d
msgid "Messages relating to the interaction of code with the database. For example, every SQL statement executed by a request is logged at the ``DEBUG`` level to this logger."
msgstr ""

#: ../../topics/logging.txt:429
# 8cd34322d0b84ea7b15c25c09a21bff9
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

#: ../../topics/logging.txt:430
# ca52c16b075840d0a3c8fe71be84c5f5
msgid "``sql``: The SQL statement that was executed."
msgstr ""

#: ../../topics/logging.txt:431
# 81f83da29bb140998a7d2c20f026044d
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

#: ../../topics/logging.txt:433
# ce51f76fe05d404585d96d4b9286eb08
msgid "For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` is set to ``True``, regardless of the logging level or handlers that are installed."
msgstr ""

#: ../../topics/logging.txt:440
# 40b70fcbe7004adaa4abc19584d00c62
msgid "Django provides one log handler in addition to those provided by the Python logging module."
msgstr ""

#: ../../topics/logging.txt:445
# b5da4c2ed5424bc58f6e2add896b27bd
msgid "This handler sends an email to the site admins for each log message it receives."
msgstr ""

#: ../../topics/logging.txt:448
# 3985978a2c9d4dd1b60ca34c04ec0263
msgid "If the log record contains a ``request`` attribute, the full details of the request will be included in the email."
msgstr ""

#: ../../topics/logging.txt:451
# feae5cac1323412eb357ed902d1a27b1
msgid "If the log record contains stack trace information, that stack trace will be included in the email."
msgstr ""

#: ../../topics/logging.txt:454
# 2a97f7d1b0bd49e6b9dbbeb66d0daecd
msgid "The ``include_html`` argument of ``AdminEmailHandler`` is used to control whether the traceback email includes an HTML attachment containing the full content of the debug Web page that would have been produced if :setting:`DEBUG` were ``True``. To set this value in your configuration, include it in the handler definition for ``django.utils.log.AdminEmailHandler``, like this::"
msgstr ""

#: ../../topics/logging.txt:469
# ade61d1974d846a4a7e651d766e4e84b
msgid "Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as `Sentry`_ to get the best of both worlds -- the rich information of full tracebacks plus the security of *not* sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports -- learn more on :ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

#: ../../topics/logging.txt:485
# 839286a4e1f6458ba4f14f59680d2f9c
msgid "Django provides two log filters in addition to those provided by the Python logging module."
msgstr ""

#: ../../topics/logging.txt:492
# 836bcfbbc6c1405fb741f57ead9e6d5a
msgid "This filter accepts a callback function (which should accept a single argument, the record to be logged), and calls it for each record that passes through the filter. Handling of that record will not proceed if the callback returns False."
msgstr ""

#: ../../topics/logging.txt:497
# bb9d274bfd5c4cbe835610c31a9b971d
msgid "For instance, to filter out :class:`~django.http.UnreadablePostError` (raised when a user cancels an upload) from the admin emails, you would create a filter function::"
msgstr ""

#: ../../topics/logging.txt:510
# b1361f07d56b4d68b4b2b5ec2ebd93c9
msgid "and then add it to your logging config::"
msgstr ""

#: ../../topics/logging.txt:530
# 79985ace730e4ed6bc9cf54428c15cdb
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

#: ../../topics/logging.txt:532
# 5b40a24852334a2c844f41d843547a12
msgid "This filter is used as follows in the default :setting:`LOGGING` configuration to ensure that the :class:`AdminEmailHandler` only sends error emails to admins when :setting:`DEBUG` is `False`::"
msgstr ""

#: ../../topics/logging.txt:553
# 5d6a91d6fc624c59b8d8f311b1aefddb
msgid "This filter is similar to :class:`RequireDebugFalse`, except that records are passed only when :setting:`DEBUG` is `True`."
msgstr ""

#: ../../topics/logging.txt:559
# 7a6479030eb2481ca7d68a3fdb9c31b6
msgid "Django's default logging configuration"
msgstr ""

#: ../../topics/logging.txt:561
# 4f1d5413f9f54ac18e200fef54e71f97
msgid "By default, Django configures the ``django.request`` logger so that all messages with ``ERROR`` or ``CRITICAL`` level are sent to :class:`AdminEmailHandler`, as long as the :setting:`DEBUG` setting is set to ``False``."
msgstr ""

#: ../../topics/logging.txt:565
# 393112794f9b4f2686738555a376cb62
msgid "All messages reaching the ``django`` catch-all logger when :setting:`DEBUG` is `True` are sent ot the console. They are simply discarded (sent to ``NullHandler``) when :setting:`DEBUG` is `False`."
msgstr ""

#: ../../topics/logging.txt:574
# 5edf614f32cd45afbd5b24fe8da40f58
msgid "See also :ref:`Configuring logging <configuring-logging>` to learn how you can complement or replace this default logging configuration."
msgstr ""

#: ../../topics/pagination.txt:3
# 15549a300dac40d8a5dc8caf1cd15c77
msgid "Pagination"
msgstr ""

#: ../../topics/pagination.txt:8
# c06beda152f54a39884cbff5f335f8b9
msgid "Django provides a few classes that help you manage paginated data -- that is, data that's split across several pages, with \"Previous/Next\" links. These classes live in :file:`django/core/paginator.py`."
msgstr ""

#: ../../topics/pagination.txt:15
# 09e1188b4c9f4d88a7113f6f9e7e8bc1
msgid "Give :class:`Paginator` a list of objects, plus the number of items you'd like to have on each page, and it gives you methods for accessing the items for each page::"
msgstr ""

#: ../../topics/pagination.txt:67
# dc35fc95e0854f28af9bc6e3f84b9191
msgid "Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or any other object with a ``count()`` or ``__len__()`` method. When determining the number of objects contained in the passed object, ``Paginator`` will first try calling ``count()``, then fallback to using ``len()`` if the passed object has no ``count()`` method. This allows objects such as Django's ``QuerySet`` to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../topics/pagination.txt:77
# 630230fdcf7c43e1b89d4223b38d8cb0
msgid "Using ``Paginator`` in a view"
msgstr ""

#: ../../topics/pagination.txt:79
# 78c4cd8f85a043a2a7da3a360ed5903e
msgid "Here's a slightly more complex example using :class:`Paginator` in a view to paginate a queryset. We give both the view and the accompanying template to show how you can display the results. This example assumes you have a ``Contacts`` model that has already been imported."
msgstr ""

#: ../../topics/pagination.txt:84
# dae6459739c044668af2432d1399370d
msgid "The view function looks like this::"
msgstr ""

#: ../../topics/pagination.txt:104
# 95a149beb1ac44018c5d656520b0674b
msgid "In the template :file:`list.html`, you'll want to include navigation between pages along with any interesting information from the objects themselves::"
msgstr ""

#: ../../topics/pagination.txt:136
# 2c61ec077cca4fe3ad4785531627c34a
msgid "``Paginator`` objects"
msgstr ""

#: ../../topics/pagination.txt:138
# 272ba5331d204c7b87ecc09acf32fead
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

#: ../../topics/pagination.txt:146
# cc42c09a1d124d0b8b0e649d0cae4796
msgid "A list, tuple, Django ``QuerySet``, or other sliceable object with a ``count()`` or ``__len__()`` method."
msgstr ""

#: ../../topics/pagination.txt:150
# ba48a3509dd34ca7857bf3cee7fe052e
msgid "The maximum number of items to include on a page, not including orphans (see the ``orphans`` optional argument below)."
msgstr ""

#: ../../topics/pagination.txt:157
# 84f29eb0831740868fa0fc0ad16d6ba2
msgid "The minimum number of items allowed on the last page, defaults to zero. Use this when you don't want to have a last page with very few items. If the last page would normally have a number of items less than or equal to ``orphans``, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will be two pages; the first page with 10 items and the  second (and last) page with 13 items."
msgstr ""

#: ../../topics/pagination.txt:167
# f89aa0197220498fbc9384e5c01e9d10
msgid "Whether or not the first page is allowed to be empty.  If ``False`` and ``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

#: ../../topics/pagination.txt:175
# 95b6a5a4fa5f4240857d318dd198d93a
msgid "Returns a :class:`Page` object with the given 1-based index. Raises :exc:`InvalidPage` if the given page number doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:179
#: ../../topics/pagination.txt:287
#: ../../topics/testing.txt:2189
# 8c1a9db009294e04a8f4b50cc8dc1d7c
# 382b2ea7182d4f5abc62a224df37892a
# b85e3c129b01498391b5efd8630d2815
msgid "Attributes"
msgstr ""

#: ../../topics/pagination.txt:183
# f63d099cf76949b1959e06803dbeddb2
msgid "The total number of objects, across all pages."
msgstr ""

#: ../../topics/pagination.txt:187
# 43be8f8fb0af44d4a80ea623fcdbbae8
msgid "When determining the number of objects contained in ``object_list``, ``Paginator`` will first try calling ``object_list.count()``. If ``object_list`` has no ``count()`` method, then ``Paginator`` will fallback to using ``len(object_list)``. This allows objects, such as Django's ``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

#: ../../topics/pagination.txt:196
# 164a71cb14b84cd69c91a2e4d063a2e9
msgid "The total number of pages."
msgstr ""

#: ../../topics/pagination.txt:200
# 9a226c5c47dd4655bbebd893db9cefdc
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

#: ../../topics/pagination.txt:204
# 710f246b64b246348c009650f9e46e43
msgid "``InvalidPage`` exceptions"
msgstr ""

#: ../../topics/pagination.txt:208
# 07d724d4fa4845488550b34dbfd88151
msgid "A base class for exceptions raised when a paginator is passed an invalid page number."
msgstr ""

#: ../../topics/pagination.txt:211
# df63646a505942c69e299c0f3db86702
msgid "The :meth:`Paginator.page` method raises an exception if the requested page is invalid (i.e., not an integer) or contains no objects. Generally, it's enough to trap the ``InvalidPage`` exception, but if you'd like more granularity, you can trap either of the following exceptions:"
msgstr ""

#: ../../topics/pagination.txt:218
# abb4fa4e90bf41018224ae9706aa0669
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

#: ../../topics/pagination.txt:222
# 51d80f8039214c5694edac761ccca91c
msgid "Raised when ``page()`` is given a valid value but no objects exist on that page."
msgstr ""

#: ../../topics/pagination.txt:225
# 0e9735fc08a5473a8d063b9d57b0f109
msgid "Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can handle them both with a simple ``except InvalidPage``."
msgstr ""

#: ../../topics/pagination.txt:230
# 7965b59321e24f54864bb6dee6888b49
msgid "``Page`` objects"
msgstr ""

#: ../../topics/pagination.txt:232
# 624fb8e9fb844c22a09d3d7e42356a29
msgid "You usually won't construct ``Page`` objects by hand -- you'll get them using :meth:`Paginator.page`."
msgstr ""

#: ../../topics/pagination.txt:246
# e7338c2c83664f36b58babf230771fe0
msgid "Returns ``True`` if there's a next page."
msgstr ""

#: ../../topics/pagination.txt:250
# c4446f50458d4cfb8de6bd3f6f8693b3
msgid "Returns ``True`` if there's a previous page."
msgstr ""

#: ../../topics/pagination.txt:254
# 106cc34e7d9c41a9bc036833d3702621
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

#: ../../topics/pagination.txt:258
# 6042d9fc85384ef6884616f0491fa4d8
msgid "Returns the next page number."
msgstr ""

#: ../../topics/pagination.txt:262
# 3b6860a3d2064a2cbb05886ed0c54fa7
msgid "Raises :exc:`InvalidPage` if next page doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:266
# 9ff1a8be7dd04fbf82dcb6b30c52752f
msgid "Returns the previous page number."
msgstr ""

#: ../../topics/pagination.txt:270
# a659156420454e0280dc33ce15d33eb7
msgid "Raises :exc:`InvalidPage` if previous page doesn't exist."
msgstr ""

#: ../../topics/pagination.txt:274
# fe1a0a8371054addbcfa9e9be6e51e25
msgid "Returns the 1-based index of the first object on the page, relative to all of the objects in the paginator's list. For example, when paginating a list of 5 objects with 2 objects per page, the second page's :meth:`~Page.start_index` would return ``3``."
msgstr ""

#: ../../topics/pagination.txt:281
# 46aafc41ef6b432691ffd3f832317f0c
msgid "Returns the 1-based index of the last object on the page, relative to all of the objects in the paginator's list. For example, when paginating a list of 5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` would return ``4``."
msgstr ""

#: ../../topics/pagination.txt:291
# 3fed2c02ae874cb982d62a974d30a6fc
msgid "The list of objects on this page."
msgstr ""

#: ../../topics/pagination.txt:295
# 806527c4e08e46c8a6067a612c2d2b88
msgid "The 1-based page number for this page."
msgstr ""

#: ../../topics/pagination.txt:299
# 6de5445e9c324332ba9577fdbd6439a7
msgid "The associated :class:`Paginator` object."
msgstr ""

#: ../../topics/python3.txt:3
# 5d9fca1728614e8faac54a7647ef9048
msgid "Porting to Python 3"
msgstr ""

#: ../../topics/python3.txt:5
# cafdfe3999434bfe982acc4c8c5032ea
msgid "Django 1.5 is the first version of Django to support Python 3. The same code runs both on Python 2 (≥ 2.6.5) and Python 3 (≥ 3.2), thanks to the six_ compatibility layer."
msgstr ""

#: ../../topics/python3.txt:11
# 54c83c9fa1c5458db4a64fb29c49051e
msgid "This document is primarily targeted at authors of pluggable application who want to support both Python 2 and 3. It also describes guidelines that apply to Django's code."
msgstr ""

#: ../../topics/python3.txt:16
# 1a3aee8c11794ce58483d703125bbc51
msgid "Philosophy"
msgstr ""

#: ../../topics/python3.txt:18
# 0f463aafae5b4290a7bee943477363c2
msgid "This document assumes that you are familiar with the changes between Python 2 and Python 3. If you aren't, read `Python's official porting guide`_ first. Refreshing your knowledge of unicode handling on Python 2 and 3 will help; the `Pragmatic Unicode`_ presentation is a good resource."
msgstr ""

#: ../../topics/python3.txt:23
# c10de639ae4a48d89b9102e4ab19c5a4
msgid "Django uses the *Python 2/3 Compatible Source* strategy. Of course, you're free to chose another strategy for your own code, especially if you don't need to stay compatible with Python 2. But authors of pluggable applications are encouraged to use the same porting strategy as Django itself."
msgstr ""

#: ../../topics/python3.txt:28
# 684a399bcc694b8ab5b762c26cee2a0f
msgid "Writing compatible code is much easier if you target Python ≥ 2.6. Django 1.5 introduces compatibility tools such as :mod:`django.utils.six`. For convenience, forwards-compatible aliases were introduced in Django 1.4.2. If your application takes advantage of these tools, it will require Django ≥ 1.4.2."
msgstr ""

#: ../../topics/python3.txt:34
# 99d98c9c65114e69a5c62be60dc3e0d2
msgid "Obviously, writing compatible source code adds some overhead, and that can cause frustration. Django's developers have found that attempting to write Python 3 code that's compatible with Python 2 is much more rewarding than the opposite. Not only does that make your code more future-proof, but Python 3's advantages (like the saner string handling) start shining quickly. Dealing with Python 2 becomes a backwards compatibility requirement, and we as developers are used to dealing with such constraints."
msgstr ""

#: ../../topics/python3.txt:42
# c46ef4f43bfe4a01966550ddf36d462c
msgid "Porting tools provided by Django are inspired by this philosophy, and it's reflected throughout this guide."
msgstr ""

#: ../../topics/python3.txt:49
# 936449090d0f48c6a16084c320746571
msgid "Porting tips"
msgstr ""

#: ../../topics/python3.txt:52
# 0cb0b19558d241379809b77e602e371e
msgid "Unicode literals"
msgstr ""

#: ../../topics/python3.txt:54
# 6f864086c6a44be585d346a5f358eb3b
msgid "This step consists in:"
msgstr ""

#: ../../topics/python3.txt:56
# e64e36b266b44ded90234adbff6c9a2f
msgid "Adding ``from __future__ import unicode_literals`` at the top of your Python modules -- it's best to put it in each and every module, otherwise you'll keep checking the top of your files to see which mode is in effect;"
msgstr ""

#: ../../topics/python3.txt:59
# 2775c183d5e84ca3b7ab4ccf38067944
msgid "Removing the ``u`` prefix before unicode strings;"
msgstr ""

#: ../../topics/python3.txt:60
# b06b538175174f69bb7cdd59aa94a32a
msgid "Adding a ``b`` prefix before bytestrings."
msgstr ""

#: ../../topics/python3.txt:62
# 3fafaf318e014c1aa0937b74c077ae28
msgid "Performing these changes systematically guarantees backwards compatibility."
msgstr ""

#: ../../topics/python3.txt:64
# 0b8290df54d84bfc9fb4e31e2b9b544d
msgid "However, Django applications generally don't need bytestrings, since Django only exposes unicode interfaces to the programmer. Python 3 discourages using bytestrings, except for binary data or byte-oriented interfaces. Python 2 makes bytestrings and unicode strings effectively interchangeable, as long as they only contain ASCII data. Take advantage of this to use unicode strings wherever possible and avoid the ``b`` prefixes."
msgstr ""

#: ../../topics/python3.txt:73
# 77ff53a005f14dc9a49802f1ab9ccfc4
msgid "Python 2's ``u`` prefix is a syntax error in Python 3.2 but it will be allowed again in Python 3.3 thanks to :pep:`414`. Thus, this transformation is optional if you target Python ≥ 3.3. It's still recommended, per the \"write Python 3 code\" philosophy."
msgstr ""

#: ../../topics/python3.txt:79
#: ../../topics/python3.txt:336
# 43069e98b6874cc4a93db9dde04c9896
# 494f404539a44b6bb1dcaabb93f4eca6
msgid "String handling"
msgstr ""

#: ../../topics/python3.txt:81
# 9b95ee8d263b4c7486cebe1dffb31bb4
msgid "Python 2's :class:`unicode` type was renamed :class:`str` in Python 3, :class:`str` was renamed :class:`bytes`, and :class:`basestring` disappeared. six_ provides :ref:`tools <string-handling-with-six>` to deal with these changes."
msgstr ""

#: ../../topics/python3.txt:86
# 929e4b5bc32d4913ae1dc7df23c9a5b0
msgid "Django also contains several string related classes and functions in the :mod:`django.utils.encoding` and :mod:`django.utils.safestring` modules. Their names used the words ``str``, which doesn't mean the same thing in Python 2 and Python 3, and ``unicode``, which doesn't exist in Python 3. In order to avoid ambiguity and confusion these concepts were renamed ``bytes`` and ``text``."
msgstr ""

#: ../../topics/python3.txt:93
# 503f4924a93044dcba883b716a1c51fd
msgid "Here are the name changes in :mod:`django.utils.encoding`:"
msgstr ""

#: ../../topics/python3.txt:96
#: ../../topics/python3.txt:120
# 05a85130a0ba4f1c9cc3be3b5f15b167
# 6ba05914ab80486f933c6589825b3041
msgid "Old name"
msgstr ""

#: ../../topics/python3.txt:96
#: ../../topics/python3.txt:120
# 50b101b6b3164729be7e52b0d2ea9ba5
# d5e9e4cf2c03493f89195d4e838a5d60
msgid "New name"
msgstr ""

#: ../../topics/python3.txt:98
# 06dbb6661eab44f7bf2cc9a2337501f2
msgid "``smart_str``"
msgstr ""

#: ../../topics/python3.txt:98
# cc574a8bac3e464bb387eed0419b87a7
msgid "``smart_bytes``"
msgstr ""

#: ../../topics/python3.txt:99
# 35ae69428a7d450f8cfa26679d0c563d
msgid "``smart_unicode``"
msgstr ""

#: ../../topics/python3.txt:99
# 50782012baa949229299c1a7b7ce2135
msgid "``smart_text``"
msgstr ""

#: ../../topics/python3.txt:100
# 6b9afbdda9514496b8a8318f4fc37ddb
msgid "``force_unicode``"
msgstr ""

#: ../../topics/python3.txt:100
# 948a855f16c4431eb5355357282e2ce3
msgid "``force_text``"
msgstr ""

#: ../../topics/python3.txt:103
# 40d46d21e56f44118ede127eef2ef81c
msgid "For backwards compatibility, the old names still work on Python 2. Under Python 3, ``smart_str`` is an alias for ``smart_text``."
msgstr ""

#: ../../topics/python3.txt:106
#: ../../topics/python3.txt:132
# 3390d9b8dabb469f9cba7090cbccbd8c
# ce3c362aca4342f0a79385f8524e0607
msgid "For forwards compatibility, the new names work as of Django 1.4.2."
msgstr ""

#: ../../topics/python3.txt:110
# 047453866cc449edb0d93850c19fbfed
msgid ":mod:`django.utils.encoding` was deeply refactored in Django 1.5 to provide a more consistent API. Check its documentation for more information."
msgstr ""

#: ../../topics/python3.txt:114
# 1d111e54ecb7462596a8bee6ff1bd996
msgid ":mod:`django.utils.safestring` is mostly used via the :func:`~django.utils.safestring.mark_safe` and :func:`~django.utils.safestring.mark_for_escaping` functions, which didn't change. In case you're using the internals, here are the name changes:"
msgstr ""

#: ../../topics/python3.txt:122
# 6d544f5ec68e4c87926eb223429df175
msgid "``EscapeString``"
msgstr ""

#: ../../topics/python3.txt:122
# 133fb08b74284711b06b81ebc884a222
msgid "``EscapeBytes``"
msgstr ""

#: ../../topics/python3.txt:123
# 17eb27b272014ceba6aba5aa06ab20f5
msgid "``EscapeUnicode``"
msgstr ""

#: ../../topics/python3.txt:123
# 241cf02613c74200a4bb4348866d921b
msgid "``EscapeText``"
msgstr ""

#: ../../topics/python3.txt:124
# da09883a63a24220ae1ccc6a5b0dc441
msgid "``SafeString``"
msgstr ""

#: ../../topics/python3.txt:124
# 3530974fb7a748c48ac54651b86e4a73
msgid "``SafeBytes``"
msgstr ""

#: ../../topics/python3.txt:125
# cdd89d245808486aa4cbad5b4321e868
msgid "``SafeUnicode``"
msgstr ""

#: ../../topics/python3.txt:125
# e567f8a7abbd4323b0916395facee98d
msgid "``SafeText``"
msgstr ""

#: ../../topics/python3.txt:128
# c62be0f8e67142f69944f9025d70971d
msgid "For backwards compatibility, the old names still work on Python 2. Under Python 3, ``EscapeString`` and ``SafeString`` are aliases for ``EscapeText`` and ``SafeText`` respectively."
msgstr ""

#: ../../topics/python3.txt:135
# 2b6b21e5d13d44b3b406e3aab7c44c04
msgid ":meth:`__str__` and :meth:`__unicode__` methods"
msgstr ""

#: ../../topics/python3.txt:137
# c874515853294428bf0e29210e879405
msgid "In Python 2, the object model specifies :meth:`__str__` and :meth:`__unicode__` methods. If these methods exist, they must return :class:`str` (bytes) and :class:`unicode` (text) respectively."
msgstr ""

#: ../../topics/python3.txt:141
# fd02be3719034b6689881b09eebd0bce
msgid "The ``print`` statement and the :func:`str` built-in call :meth:`__str__` to determine the human-readable representation of an object. The :func:`unicode` built-in calls :meth:`__unicode__` if it exists, and otherwise falls back to :meth:`__str__` and decodes the result with the system encoding. Conversely, the :class:`~django.db.models.Model` base class automatically derives :meth:`__str__` from :meth:`__unicode__` by encoding to UTF-8."
msgstr ""

#: ../../topics/python3.txt:148
# 5e2915f38b9244ddaac942935ff5aaae
msgid "In Python 3, there's simply :meth:`__str__`, which must return :class:`str` (text)."
msgstr ""

#: ../../topics/python3.txt:151
# 4cf4a218135e415c90baecdcf45370e9
msgid "(It is also possible to define :meth:`__bytes__`, but Django application have little use for that method, because they hardly ever deal with :class:`bytes`.)"
msgstr ""

#: ../../topics/python3.txt:155
# 6a9a775848fb47d0963504a53334c2a4
msgid "Django provides a simple way to define :meth:`__str__` and :meth:`__unicode__` methods that work on Python 2 and 3: you must define a :meth:`__str__` method returning text and to apply the :func:`~django.utils.encoding.python_2_unicode_compatible` decorator."
msgstr ""

#: ../../topics/python3.txt:160
# fb316aadd48e42ca80915ea73570f7e9
msgid "On Python 3, the decorator is a no-op. On Python 2, it defines appropriate :meth:`__unicode__` and :meth:`__str__` methods (replacing the original :meth:`__str__` method in the process). Here's an example::"
msgstr ""

#: ../../topics/python3.txt:172
# e7b7d53630a54fc39cc2d818428a9e65
msgid "This technique is the best match for Django's porting philosophy."
msgstr ""

#: ../../topics/python3.txt:174
# a93f10974b324a76837a4c162af5c5d8
msgid "For forwards compatibility, this decorator is available as of Django 1.4.2."
msgstr ""

#: ../../topics/python3.txt:176
# 2910423ffa95488d81d1bff68474c66c
msgid "Finally, note that :meth:`__repr__` must return a :class:`str` on all versions of Python."
msgstr ""

#: ../../topics/python3.txt:180
# 54126598115f46999a70c53b4f93c63e
msgid ":class:`dict` and :class:`dict`-like classes"
msgstr ""

#: ../../topics/python3.txt:182
# 7d48395a0ae84368bdae660b6b5d97db
msgid ":meth:`dict.keys`, :meth:`dict.items` and :meth:`dict.values` return lists in Python 2 and iterators in Python 3. :class:`~django.http.QueryDict` and the :class:`dict`-like classes defined in :mod:`django.utils.datastructures` behave likewise in Python 3."
msgstr ""

#: ../../topics/python3.txt:187
# 373d7c9dd757444eb1724c50bc5167b2
msgid "six_ provides compatibility functions to work around this change: :func:`~six.iterkeys`, :func:`~six.iteritems`, and :func:`~six.itervalues`. Django's bundled version adds :func:`~django.utils.six.iterlists` for :class:`~django.utils.datastructures.MultiValueDict` and its subclasses."
msgstr ""

#: ../../topics/python3.txt:193
# 370cbe4cd43246d5b271497d8eb20885
msgid ":class:`~django.http.HttpRequest` and :class:`~django.http.HttpResponse` objects"
msgstr ""

#: ../../topics/python3.txt:195
# 03218f8bf9444d8198154987fcd27dc5
msgid "According to :pep:`3333`:"
msgstr ""

#: ../../topics/python3.txt:197
# 4bf91c0936d146389f4621f5d84bc25b
msgid "headers are always :class:`str` objects,"
msgstr ""

#: ../../topics/python3.txt:198
# a8a0cc74c854445db4cb1c07cc506807
msgid "input and output streams are always :class:`bytes` objects."
msgstr ""

#: ../../topics/python3.txt:200
# 8b6bc713463842c68296583f03167ca7
msgid "Specifically, :attr:`HttpResponse.content <django.http.HttpResponse.content>` contains :class:`bytes`, which may become an issue if you compare it with a :class:`str` in your tests. The preferred solution is to rely on :meth:`~django.test.TestCase.assertContains` and :meth:`~django.test.TestCase.assertNotContains`. These methods accept a response and a unicode string as arguments."
msgstr ""

#: ../../topics/python3.txt:208
# 72487a4b96c5483f9f21c9ca569d3850
msgid "Coding guidelines"
msgstr ""

#: ../../topics/python3.txt:210
# 2034314e8e254eb69dab07b17ba171f0
msgid "The following guidelines are enforced in Django's source code. They're also recommended for third-party application who follow the same porting strategy."
msgstr ""

#: ../../topics/python3.txt:214
# 104bceb9e8fb414c9a6404fdfb30921f
msgid "Syntax requirements"
msgstr ""

#: ../../topics/python3.txt:217
# 2788e032dbb44c749158adeb39246a56
msgid "Unicode"
msgstr ""

#: ../../topics/python3.txt:219
# bc125b5a74c1474fbd1fe030ab2b7b56
msgid "In Python 3, all strings are considered Unicode by default. The ``unicode`` type from Python 2 is called ``str`` in Python 3, and ``str`` becomes ``bytes``."
msgstr ""

#: ../../topics/python3.txt:223
# fc69a71567754a3ba49f96b932f4ccc8
msgid "You mustn't use the ``u`` prefix before a unicode string literal because it's a syntax error in Python 3.2. You must prefix byte strings with ``b``."
msgstr ""

#: ../../topics/python3.txt:226
# 57ab65c8ad88412a95a6bf8fab5ff2e8
msgid "In order to enable the same behavior in Python 2, every module must import ``unicode_literals`` from ``__future__``::"
msgstr ""

#: ../../topics/python3.txt:234
# 0d7dc53e7c594a828830e79b6e021b36
msgid "If you need a byte string literal under Python 2 and a unicode string literal under Python 3, use the :func:`str` builtin::"
msgstr ""

#: ../../topics/python3.txt:239
# 5091a43a7af8432cbf0416110df85f9d
msgid "In Python 3, there aren't any automatic conversions between :class:`str` and :class:`bytes`, and the :mod:`codecs` module became more strict. :meth:`str.decode` always returns :class:`bytes`, and :meth:`bytes.decode` always returns :class:`str`. As a consequence, the following pattern is sometimes necessary::"
msgstr ""

#: ../../topics/python3.txt:247
# 16b535ee63354b18b73555a0b7c7e05e
msgid "Be cautious if you have to `index bytestrings`_."
msgstr ""

#: ../../topics/python3.txt:252
#: ../../topics/testing.txt:1059
# 8cd2759477364aa49b6deb3c0dbe6817
# 93c2e5f5a80c4efeb24249b921e5625d
msgid "Exceptions"
msgstr ""

#: ../../topics/python3.txt:254
# 7947ef87bef842d99cc8c570c741904e
msgid "When you capture exceptions, use the ``as`` keyword::"
msgstr ""

#: ../../topics/python3.txt:261
# ae3afc038fb94c2a84bd776a7c8e2ed1
msgid "This older syntax was removed in Python 3::"
msgstr ""

#: ../../topics/python3.txt:268
# 842124c4ef2448349036a792c0a604f8
msgid "The syntax to reraise an exception with a different traceback also changed. Use :func:`six.reraise`."
msgstr ""

#: ../../topics/python3.txt:272
# a11f9edc3af6460fa2e382ea657e961b
msgid "Magic methods"
msgstr ""

#: ../../topics/python3.txt:274
# 2c770cc05f6c4c8d8e6b889f44a9050e
msgid "Use the patterns below to handle magic methods renamed in Python 3."
msgstr ""

#: ../../topics/python3.txt:277
# b48d1ceef7344910a2bec950d9bef0ec
msgid "Iterators"
msgstr ""

#: ../../topics/python3.txt:289
# 17b4cc7624f847e08f1fd30cfa8f2885
msgid "Boolean evaluation"
msgstr ""

#: ../../topics/python3.txt:302
# ff0adae4eae547f7800d821b9f756156
msgid "Division"
msgstr ""

#: ../../topics/python3.txt:323
# f09ad2ade83d4db8bc7779e6c0d7daa0
msgid "Writing compatible code with six"
msgstr ""

#: ../../topics/python3.txt:325
# 6882dbd85cda47c597e06bd9a55d45a9
msgid "six_ is the canonical compatibility library for supporting Python 2 and 3 in a single codebase. Read its documentation!"
msgstr ""

#: ../../topics/python3.txt:328
# 86add5869cb54344a1d673cac47bc801
msgid ":mod:`six` is bundled with Django as of version 1.4.2. You can import it as :mod:`django.utils.six`."
msgstr ""

#: ../../topics/python3.txt:331
# 000a05d52eff43f690298f3ba6d8f241
msgid "Here are the most common changes required to write compatible code."
msgstr ""

#: ../../topics/python3.txt:338
# 516d2e5311fd4e0e89a24f638ac8392e
msgid "The ``basestring`` and ``unicode`` types were removed in Python 3, and the meaning of ``str`` changed. To test these types, use the following idioms::"
msgstr ""

#: ../../topics/python3.txt:345
# d0ce06828f9f4a5688577c0f4eaa5930
msgid "Python ≥ 2.6 provides ``bytes`` as an alias for ``str``, so you don't need :attr:`six.binary_type`."
msgstr ""

#: ../../topics/python3.txt:349
# e3239f4a792d451abefc9670c2548f8a
msgid "``long``"
msgstr ""

#: ../../topics/python3.txt:351
# 12469350f722486ea6b4f894d32dedc7
msgid "The ``long`` type no longer exists in Python 3. ``1L`` is a syntax error. Use :data:`six.integer_types` check if a value is an integer or a long::"
msgstr ""

#: ../../topics/python3.txt:357
# e54832d74fce494a9d5cc9e2cc860e7c
msgid "``xrange``"
msgstr ""

#: ../../topics/python3.txt:359
# c77be86632a44e93ad026e657d0b3a92
msgid "Import :func:`six.moves.xrange` wherever you use ``xrange``."
msgstr ""

#: ../../topics/python3.txt:362
# 95bf47c3898e447b8009fe9932420dbf
msgid "Moved modules"
msgstr ""

#: ../../topics/python3.txt:364
# 370d8fb47a9b4d33bfb8929ef78c6c47
msgid "Some modules were renamed in Python 3. The :mod:`django.utils.six.moves <six.moves>` module provides a compatible location to import them."
msgstr ""

#: ../../topics/python3.txt:367
# 49b9843db8d440bf856c2a3e95abe018
msgid "The ``urllib``, ``urllib2`` and ``urlparse`` modules were reworked in depth and :mod:`django.utils.six.moves <six.moves>` doesn't handle them. Django explicitly tries both locations, as follows::"
msgstr ""

#: ../../topics/python3.txt:377
# d9936a106af84a04af6bd59e3177f4f2
msgid "PY3"
msgstr ""

#: ../../topics/python3.txt:379
# 217b87efde804d6a93f6a8a34f94cbd0
msgid "If you need different code in Python 2 and Python 3, check :data:`six.PY3`::"
msgstr ""

#: ../../topics/python3.txt:386
# 798a1cc5570e4dd794fac6f25a96c43f
msgid "This is a last resort solution when :mod:`six` doesn't provide an appropriate function."
msgstr ""

#: ../../topics/python3.txt:392
# 399a8c49879142568efa8c235170886b
msgid "Customizations of six"
msgstr ""

#: ../../topics/python3.txt:394
# a63757e750a24112a9cc8bbf8863f75d
msgid "The version of six bundled with Django includes one extra function:"
msgstr ""

#: ../../topics/python3.txt:398
# ff900cd2540b438bafd9884c720155d1
msgid "Returns an iterator over the lists of values of a :class:`~django.utils.datastructures.MultiValueDict`. This replaces :meth:`~django.utils.datastructures.MultiValueDict.iterlists()` on Python 2 and :meth:`~django.utils.datastructures.MultiValueDict.lists()` on Python 3."
msgstr ""

#: ../../topics/python3.txt:406
# b1862edd9fff4101981d83d784a21470
msgid "This replaces ``testcase.assertRaisesRegexp`` on Python 2, and ``testcase.assertRaisesRegex`` on Python 3. ``assertRaisesRegexp`` still exists in current Python3 versions, but issues a warning."
msgstr ""

#: ../../topics/python3.txt:411
# 438f2ef00cf84edb91401a4a79e8f99d
msgid "In addition to six' defaults moves, Django's version provides ``thread`` as ``_thread`` and ``dummy_thread`` as ``_dummy_thread``."
msgstr ""

#: ../../topics/security.txt:3
# 11ec992c0e4e434fbfb9107fad1956bb
msgid "Security in Django"
msgstr ""

#: ../../topics/security.txt:5
# d3632e21bce443c99559596a7618de2b
msgid "This document is an overview of Django's security features. It includes advice on securing a Django-powered site."
msgstr ""

#: ../../topics/security.txt:11
# 7f6f1331acf14b5788abf83972613db9
msgid "Cross site scripting (XSS) protection"
msgstr ""

#: ../../topics/security.txt:15
# cc3c7b848a3047e491213435759e0042
msgid "XSS attacks allow a user to inject client side scripts into the browsers of other users. This is usually achieved by storing the malicious scripts in the database where it will be retrieved and displayed to other users, or by getting users to click a link which will cause the attacker's JavaScript to be executed by the user's browser. However, XSS attacks can originate from any untrusted source of data, such as cookies or Web services, whenever the data is not sufficiently sanitized before including in a page."
msgstr ""

#: ../../topics/security.txt:23
# 651e8b5b27214bf397d9aa180c397f90
msgid "Using Django templates protects you against the majority of XSS attacks. However, it is important to understand what protections it provides and its limitations."
msgstr ""

#: ../../topics/security.txt:27
# 58822c2c81e2480ea0ba94fad91ec9f5
msgid "Django templates :ref:`escape specific characters <automatic-html-escaping>` which are particularly dangerous to HTML. While this protects users from most malicious input, it is not entirely foolproof. For example, it will not protect the following:"
msgstr ""

#: ../../topics/security.txt:36
# 900f9f5d835c41e7af79114844865773
msgid "If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can result in unauthorized JavaScript execution, depending on how the browser renders imperfect HTML."
msgstr ""

#: ../../topics/security.txt:40
# 43b6146e941940fab1e08f81f1c4f20a
msgid "It is also important to be particularly careful when using ``is_safe`` with custom template tags, the :ttag:`safe` template tag, :mod:`mark_safe <django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

#: ../../topics/security.txt:44
# 9be4ef0bbb6e41a58ee42f7d9dea0909
msgid "In addition, if you are using the template system to output something other than HTML, there may be entirely separate characters and words which require escaping."
msgstr ""

#: ../../topics/security.txt:48
# 8ede1630a83245a58ae66d6f1605524b
msgid "You should also be very careful when storing HTML in the database, especially when that HTML is retrieved and displayed."
msgstr ""

#: ../../topics/security.txt:52
# f5ed504a443d469ea99f7b9725acaf33
msgid "Markup library"
msgstr ""

#: ../../topics/security.txt:54
# 64cf51ec398445a895098947a4a4f2d3
msgid "If you use :mod:`django.contrib.markup`, you need to ensure that the filters are only used on trusted input, or that you have correctly configured them to ensure they do not allow raw HTML output. See the documentation of that module for more information."
msgstr ""

#: ../../topics/security.txt:60
# da73476161ce441dbc55dd259581137e
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

#: ../../topics/security.txt:62
# 4d2d06e8c2ed404c838be1c591586397
msgid "CSRF attacks allow a malicious user to execute actions using the credentials of another user without that user's knowledge or consent."
msgstr ""

#: ../../topics/security.txt:65
# 364de4017dac4a169006f4dfa387d5ef
msgid "Django has built-in protection against most types of CSRF attacks, providing you have :ref:`enabled and used it <using-csrf>` where appropriate. However, as with any mitigation technique, there are limitations. For example, it is possible to disable the CSRF module globally or for particular views. You should only do this if you know what you are doing. There are other :ref:`limitations <csrf-limitations>` if your site has subdomains that are outside of your control."
msgstr ""

#: ../../topics/security.txt:73
# ba472b653b7c4cd5ad528ccbd80987c9
msgid ":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in each POST request. This ensures that a malicious user cannot simply \"replay\" a form POST to your Web site and have another logged in user unwittingly submit that form. The malicious user would have to know the nonce, which is user specific (using a cookie)."
msgstr ""

#: ../../topics/security.txt:79
# d2655eb626a7452388f5737e5b2d676f
msgid "When deployed with :ref:`HTTPS <security-recommendation-ssl>`, ``CsrfViewMiddleware`` will check that the HTTP referer header is set to a URL on the same origin (including subdomain and port). Because HTTPS provides additional security, it is imperative to ensure connections use HTTPS where it is available by forwarding insecure connection requests and using HSTS for supported browsers."
msgstr ""

#: ../../topics/security.txt:86
# ba70d4ac1cd7463fbf188e4421592974
msgid "Be very careful with marking views with the ``csrf_exempt`` decorator unless it is absolutely necessary."
msgstr ""

#: ../../topics/security.txt:91
# bd957150d33c40ff93d90e60caea405d
msgid "SQL injection protection"
msgstr ""

#: ../../topics/security.txt:93
# 51ce39e6153f47fdac2b7f570440972a
msgid "SQL injection is a type of attack where a malicious user is able to execute arbitrary SQL code on a database. This can result in records being deleted or data leakage."
msgstr ""

#: ../../topics/security.txt:97
# 90dd8bf0cf25413cb63b34279a293432
msgid "By using Django's querysets, the resulting SQL will be properly escaped by the underlying database driver. However, Django also gives developers power to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom sql <executing-custom-sql>`. These capabilities should be used sparingly and you should always be careful to properly escape any parameters that the user can control. In addition, you should exercise caution when using :meth:`extra() <django.db.models.query.QuerySet.extra>`."
msgstr ""

#: ../../topics/security.txt:106
# 8a48c002b0e148f68df84b3b402ef18b
msgid "Clickjacking protection"
msgstr ""

#: ../../topics/security.txt:108
# a74bace6e976460d9f539835a1349048
msgid "Clickjacking is a type of attack where a malicious site wraps another site in a frame. This attack can result in an unsuspecting user being tricked into performing unintended actions on the target site."
msgstr ""

#: ../../topics/security.txt:112
# 2a88c9cf6ede4ea5851770144772d8ba
msgid "Django contains :ref:`clickjacking protection <clickjacking-prevention>` in the form of the :mod:`X-Frame-Options middleware <django.middleware.clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can prevent a site from being rendered inside a frame. It is possible to disable the protection on a per view basis or to configure the exact header value sent."
msgstr ""

#: ../../topics/security.txt:119
# b90f7a148cf0449e9d75c1bef728d15c
msgid "The middleware is strongly recommended for any site that does not need to have its pages wrapped in a frame by third party sites, or only needs to allow that for a small section of the site."
msgstr ""

#: ../../topics/security.txt:126
# 839cb002ee304cc2a4724d6a70ca544a
msgid "SSL/HTTPS"
msgstr ""

#: ../../topics/security.txt:128
# 93b5340aeba845a898f8f96ce1068558
msgid "It is always better for security, though not always practical in all cases, to deploy your site behind HTTPS. Without this, it is possible for malicious network users to sniff authentication credentials or any other information transferred between client and server, and in some cases -- **active** network attackers -- to alter data that is sent in either direction."
msgstr ""

#: ../../topics/security.txt:134
# b3c1f31908354f77a2816594df06fa46
msgid "If you want the protection that HTTPS provides, and have enabled it on your server, there are some additional steps you may need:"
msgstr ""

#: ../../topics/security.txt:137
# aa4bd36bd73f47d1af848ca3204c1166
msgid "If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have understood the warnings there thoroughly. Failure to do this can result in CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

#: ../../topics/security.txt:142
# 50756c6661c24eeabe54375e62ff6e9f
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

#: ../../topics/security.txt:144
# 547d54e279d049f0832e5bb79fa9ac47
msgid "This could be done using a custom middleware. Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the case of a reverse proxy, it may be easier or more secure to configure the main Web server to do the redirect to HTTPS."
msgstr ""

#: ../../topics/security.txt:149
# 018f946a002b420ababccc9e27ccbaf0
msgid "Use 'secure' cookies."
msgstr ""

#: ../../topics/security.txt:151
# 8f380106c8934b368426b3d7cdb50d55
msgid "If a browser connects initially via HTTP, which is the default for most browsers, it is possible for existing cookies to be leaked. For this reason, you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to only send these cookies over HTTPS connections. Note that this will mean that sessions will not work over HTTP, and the CSRF protection will prevent any POST data being accepted over HTTP (which will be fine if you are redirecting all HTTP traffic to HTTPS)."
msgstr ""

#: ../../topics/security.txt:160
# 71af05ddab704e1f8352fcbf5f49ed4d
msgid "Use HTTP Strict Transport Security (HSTS)"
msgstr ""

#: ../../topics/security.txt:162
# 30eae11766a64837abe534b0d4281fa5
msgid "HSTS is an HTTP header that informs a browser that all future connections to a particular site should always use HTTPS. Combined with redirecting requests over HTTP to HTTPS, this will ensure that connections always enjoy the added security of SSL provided one successful connection has occurred. HSTS is usually configured on the web server."
msgstr ""

#: ../../topics/security.txt:171
# e669c48eb8c54844904a799fd280d290
msgid "Host headers and virtual hosting"
msgstr ""

#: ../../topics/security.txt:173
# e091008f309c4fc7838bf110047ba293
msgid "Django uses the ``Host`` header provided by the client to construct URLs in certain cases. While these values are sanitized to prevent Cross Site Scripting attacks, they can be used for Cross-Site Request Forgery and cache poisoning attacks in some circumstances. We recommend you ensure your Web server is configured such that:"
msgstr ""

#: ../../topics/security.txt:179
# b5315d1fb6714e26b9c27deda8edb974
msgid "It always validates incoming HTTP ``Host`` headers against the expected host name."
msgstr ""

#: ../../topics/security.txt:181
# c9747c4a24b94dc88e3c3c282e881d2c
msgid "Disallows requests with no ``Host`` header."
msgstr ""

#: ../../topics/security.txt:182
# b207e8f242764e449942999ee7fa670c
msgid "Is *not* configured with a catch-all virtual host that forwards requests to a Django application."
msgstr ""

#: ../../topics/security.txt:185
# b0c0989a3da94037b6cf8f960b3e87ae
msgid "Additionally, as of 1.3.1, Django requires you to explicitly enable support for the ``X-Forwarded-Host`` header if your configuration requires it."
msgstr ""

#: ../../topics/security.txt:189
# c94234dac8924638b54104d5c2974be2
msgid "Configuration for Apache"
msgstr ""

#: ../../topics/security.txt:191
# 2cac51d1254a401cb5cf3ca717c894df
msgid "The easiest way to get the described behavior in Apache is as follows. Create a `virtual host`_ using the ServerName_ and ServerAlias_ directives to restrict the domains Apache reacts to. Please keep in mind that while the directives do support ports the match is only performed against the hostname. This means that the ``Host`` header could still contain a port pointing to another webserver on the same machine. The next step is to make sure that your newly created virtual host is not also the default virtual host. Apache uses the first virtual host found in the configuration file as default virtual host.  As such you have to ensure that you have another virtual host which will act as catch-all virtual host. Just add one if you do not have one already, there is nothing special about it aside from ensuring it is the first virtual host in the configuration file. Debian/Ubuntu users usually don't have to take any action, since Apache ships with a default virtual host in ``sites-available`` which is linked into ``sites-enabled`` as ``000-default`` and included from ``apache2.conf``. Just make sure not to name your site ``000-abc``, since files are included in alphabetical order."
msgstr ""

#: ../../topics/security.txt:216
# d0d1257de1154f019e7f3ca727bc2c12
msgid "Additional security topics"
msgstr ""

#: ../../topics/security.txt:218
# 48b7c57505b1406f9c0ba12dd4e12f54
msgid "While Django provides good security protection out of the box, it is still important to properly deploy your application and take advantage of the security protection of the Web server, operating system and other components."
msgstr ""

#: ../../topics/security.txt:222
# 7d87a25ae34a4e33b8d35c915ca27f97
msgid "Make sure that your Python code is outside of the Web server's root. This will ensure that your Python code is not accidentally served as plain text (or accidentally executed)."
msgstr ""

#: ../../topics/security.txt:225
# 911ae7864c7442ffa86ff61cd1b6caf4
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

#: ../../topics/security.txt:226
# cac1910b23124e898e77f01017bbd996
msgid "Django does not throttle requests to authenticate users. To protect against brute-force attacks against the authentication system, you may consider deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

#: ../../topics/security.txt:229
# fe00048338e84d48b5e6471aefdd7368
msgid "If your site accepts file uploads, it is strongly advised that you limit these uploads in your Web server configuration to a reasonable size in order to prevent denial of service (DOS) attacks. In Apache, this can be easily set using the LimitRequestBody_ directive."
msgstr ""

#: ../../topics/security.txt:233
# f2c17b2397554737aa19f2b70729f7fa
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

#: ../../topics/security.txt:234
# 3a4fefdb286345aeba7560f7787efd4c
msgid "It is a good idea to limit the accessibility of your caching system and database using a firewall."
msgstr ""

#: ../../topics/serialization.txt:3
# 4c42b65b5a964167bdc723ee51995d59
msgid "Serializing Django objects"
msgstr ""

#: ../../topics/serialization.txt:5
# 498cf64c77ec40c8b1b840ac199f462f
msgid "Django's serialization framework provides a mechanism for \"translating\" Django models into other formats. Usually these other formats will be text-based and used for sending Django data over a wire, but it's possible for a serializer to handle any format (text-based or not)."
msgstr ""

#: ../../topics/serialization.txt:12
# 9e3ef507613242689cd1c76ed77f05bf
msgid "If you just want to get some data from your tables into a serialized form, you could use the :djadmin:`dumpdata` management command."
msgstr ""

#: ../../topics/serialization.txt:16
# b593275a8b524890a5a90cbcc3038188
msgid "Serializing data"
msgstr ""

#: ../../topics/serialization.txt:18
# 6166223d6e83486aa81a62b28ff12d3b
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

#: ../../topics/serialization.txt:23
# c45fc4f6d8da41489e74d37528866dcf
msgid "The arguments to the ``serialize`` function are the format to serialize the data to (see `Serialization formats`_) and a :class:`~django.db.models.query.QuerySet` to serialize. (Actually, the second argument can be any iterator that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

#: ../../topics/serialization.txt:29
# 858a9657505040fda730f474ecc9dc8a
msgid "You can also use a serializer object directly::"
msgstr ""

#: ../../topics/serialization.txt:36
# bbba3ec38a2b43cfad6687f95425a852
msgid "This is useful if you want to serialize data directly to a file-like object (which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

#: ../../topics/serialization.txt:44
# 923e712a0eab4975be76574402655370
msgid "Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:`format <serialization-formats>` will raise a :class:`~django.core.serializers.SerializerDoesNotExist` exception."
msgstr ""

#: ../../topics/serialization.txt:49
# 67f29cbc2dc3437ba9742a7c587ca208
msgid "Subset of fields"
msgstr ""

#: ../../topics/serialization.txt:51
# b641e4cc5b2142e2b8d1bc6ff9c5d57b
msgid "If you only want a subset of fields to be serialized, you can specify a ``fields`` argument to the serializer::"
msgstr ""

#: ../../topics/serialization.txt:57
# 2c8e8f3e6323465dab1c71514168fda3
msgid "In this example, only the ``name`` and ``size`` attributes of each model will be serialized."
msgstr ""

#: ../../topics/serialization.txt:62
# 968e7571bfdb4324918953ce7b1a35a1
msgid "Depending on your model, you may find that it is not possible to deserialize a model that only serializes a subset of its fields. If a serialized object doesn't specify all the fields that are required by a model, the deserializer will not be able to save deserialized instances."
msgstr ""

#: ../../topics/serialization.txt:68
# d03ecd3a90eb4a2dac3c99bd5242d3dd
msgid "Inherited Models"
msgstr ""

#: ../../topics/serialization.txt:70
# cc5adab310d6461881e1cf641616d3ff
msgid "If you have a model that is defined using an :ref:`abstract base class <abstract-base-classes>`, you don't have to do anything special to serialize that model. Just call the serializer on the object (or objects) that you want to serialize, and the output will be a complete representation of the serialized object."
msgstr ""

#: ../../topics/serialization.txt:76
# 4c5ecbd77071449199bcdb07b1be6216
msgid "However, if you have a model that uses :ref:`multi-table inheritance <multi-table-inheritance>`, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized. For example, consider the following models::"
msgstr ""

#: ../../topics/serialization.txt:87
# fddc8cfd78424927bcb0e8637c9aa194
msgid "If you only serialize the Restaurant model::"
msgstr ""

#: ../../topics/serialization.txt:91
# 22fcce3cec4f431ea73243c7b82c7229
msgid "the fields on the serialized output will only contain the `serves_hot_dogs` attribute. The `name` attribute of the base class will be ignored."
msgstr ""

#: ../../topics/serialization.txt:94
# b5c03fc4784945e18902c25fb0b02281
msgid "In order to fully serialize your Restaurant instances, you will need to serialize the Place models as well::"
msgstr ""

#: ../../topics/serialization.txt:101
# ba72de6cca494274adbd42a59bd1dbea
msgid "Deserializing data"
msgstr ""

#: ../../topics/serialization.txt:103
# 28227ac357d94e4c9be8665e11b6872d
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

#: ../../topics/serialization.txt:108
# ab98509b4c614f689b2fe406cc1d5a6c
msgid "As you can see, the ``deserialize`` function takes the same format argument as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

#: ../../topics/serialization.txt:111
# 4ff3507e95764cffac9569bf11b10ee4
msgid "However, here it gets slightly complicated. The objects returned by the ``deserialize`` iterator *aren't* simple Django objects. Instead, they are special ``DeserializedObject`` instances that wrap a created -- but unsaved -- object and any associated relationship data."
msgstr ""

#: ../../topics/serialization.txt:116
# 3981d22804fa45e9a8c86e5e47ece8e1
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

#: ../../topics/serialization.txt:118
# ab511e77140749d1af5b092e0f13e57b
msgid "This ensures that deserializing is a non-destructive operation even if the data in your serialized representation doesn't match what's currently in the database. Usually, working with these ``DeserializedObject`` instances looks something like::"
msgstr ""

#: ../../topics/serialization.txt:127
# cbec0e01cfe54bd0ac7535d7aea73ce4
msgid "In other words, the usual use is to examine the deserialized objects to make sure that they are \"appropriate\" for saving before doing so.  Of course, if you trust your data source you could just save the object and move on."
msgstr ""

#: ../../topics/serialization.txt:131
# d72ee9431c4e4d26b275c1e89c3c9b8c
msgid "The Django object itself can be inspected as ``deserialized_object.object``."
msgstr ""

#: ../../topics/serialization.txt:135
# 804db22bf2774ca1a91384e6d8300f34
msgid "If fields in the serialized data do not exist on a model, a ``DeserializationError`` will be raised unless the ``ignorenonexistent`` argument is passed in as True::"
msgstr ""

#: ../../topics/serialization.txt:144
# 463b79d6f69f4d90a28951c31f8f6270
msgid "Serialization formats"
msgstr ""

#: ../../topics/serialization.txt:146
# 1a0aaabd1dd14abcbecfc0ddc943b9e8
msgid "Django supports a number of serialization formats, some of which require you to install third-party Python modules:"
msgstr ""

#: ../../topics/serialization.txt:150
# 00eb55c951f747a895c992b07f9419eb
msgid "Identifier"
msgstr ""

#: ../../topics/serialization.txt:150
# eceeb2713fcc4987af1cf4fbc7552a5d
msgid "Information"
msgstr ""

#: ../../topics/serialization.txt:152
# 1d00f01311b64510a7c1f9232f300a3e
msgid "``xml``"
msgstr ""

#: ../../topics/serialization.txt:152
# 452a65ba5341462584fb5be8fbce19b6
msgid "Serializes to and from a simple XML dialect."
msgstr ""

#: ../../topics/serialization.txt:154
# 29cb0e0e7fac4d04b3ca7857df6a8c13
msgid "``json``"
msgstr ""

#: ../../topics/serialization.txt:154
# fa4446b4e6394e3e8ad7559978a40397
msgid "Serializes to and from JSON_."
msgstr ""

#: ../../topics/serialization.txt:156
# 7606d8dc27504e398c5bd86cbe2bf2c7
msgid "``yaml``"
msgstr ""

#: ../../topics/serialization.txt:156
# 8c3bed8edc9341b995e659e9ccf0b285
msgid "Serializes to YAML (YAML Ain't a Markup Language). This serializer is only available if PyYAML_ is installed."
msgstr ""

#: ../../topics/serialization.txt:164
# b22c84377a3b483ca8c1c3cec336d25c
msgid "Notes for specific serialization formats"
msgstr ""

#: ../../topics/serialization.txt:167
# d689788e6cbd449397731aa4bf012b8a
msgid "json"
msgstr ""

#: ../../topics/serialization.txt:169
# e1e71c31793d44ed9c4dd83b0aa25b94
msgid "Be aware that not all Django output can be passed unmodified to :mod:`json`. In particular, :ref:`lazy translation objects <lazy-translations>` need a `special encoder`_ written for them. Something like this will work::"
msgstr ""

#: ../../topics/serialization.txt:188
# a652a26b82534e8bb4d453ff639af552
msgid "Natural keys"
msgstr ""

#: ../../topics/serialization.txt:190
# b272d38fcad1411e8d40422fb01ce2fb
msgid "The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation. This strategy works well for most objects, but it can cause difficulty in some circumstances."
msgstr ""

#: ../../topics/serialization.txt:195
# 7fbb00ad71ea406abb707edc73fcf225
msgid "Consider the case of a list of objects that have a foreign key referencing :class:`~django.contrib.conttenttypes.models.ContentType`. If you're going to serialize an object that refers to a content type, then you need to have a way to refer to that content type to begin with. Since ``ContentType`` objects are automatically created by Django during the database synchronization process, the primary key of a given content type isn't easy to predict; it will depend on how and when :djadmin:`syncdb` was executed. This is true for all models which automatically generate objects, notably including :class:`~django.contrib.auth.models.Permission`, :class:`~django.contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../topics/serialization.txt:209
# 43c7e2a00f9f4524b606e72dfe4626d4
msgid "You should never include automatically generated objects in a fixture or other serialized data. By chance, the primary keys in the fixture may match those in the database and loading the fixture will have no effect. In the more likely case that they don't match, the fixture loading will fail with an :class:`~django.db.IntegrityError`."
msgstr ""

#: ../../topics/serialization.txt:215
# fc99f62f7e5d47908eee4259cff62d39
msgid "There is also the matter of convenience. An integer id isn't always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful."
msgstr ""

#: ../../topics/serialization.txt:219
# 25de67a87d5d43f48a913062e7aec57e
msgid "It is for these reasons that Django provides *natural keys*. A natural key is a tuple of values that can be used to uniquely identify an object instance without using the primary key value."
msgstr ""

#: ../../topics/serialization.txt:224
# 49b644ab78324bf9b9399a4efb016cea
msgid "Deserialization of natural keys"
msgstr ""

#: ../../topics/serialization.txt:226
# 21b5bf0b07d043359b5f85fd73578020
msgid "Consider the following two models::"
msgstr ""

#: ../../topics/serialization.txt:243
# fe806d5a1f2c47c0859c39126f3337ed
msgid "Ordinarily, serialized data for ``Book`` would use an integer to refer to the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

#: ../../topics/serialization.txt:257
# 144c570081844897a024770aa38cc591
msgid "This isn't a particularly natural way to refer to an author. It requires that you know the primary key value for the author; it also requires that this primary key value is stable and predictable."
msgstr ""

#: ../../topics/serialization.txt:261
# e2903d19b7ac49b5b978c3d042b29f99
msgid "However, if we add natural key handling to Person, the fixture becomes much more humane. To add natural key handling, you define a default Manager for Person with a ``get_by_natural_key()`` method. In the case of a Person, a good natural key might be the pair of first and last name::"
msgstr ""

#: ../../topics/serialization.txt:284
# 4cc6edae7c764b45989b89def3c8443a
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

#: ../../topics/serialization.txt:297
# 914ee22b6234462bbf55d2affb8b1e7f
msgid "When you try to load this serialized data, Django will use the ``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into the primary key of an actual ``Person`` object."
msgstr ""

#: ../../topics/serialization.txt:303
# 379f7ca26d684561ba647c39e84f44e7
msgid "Whatever fields you use for a natural key must be able to uniquely identify an object. This will usually mean that your model will have a uniqueness clause (either unique=True on a single field, or ``unique_together`` over multiple fields) for the field or fields in your natural key. However, uniqueness doesn't need to be enforced at the database level. If you are certain that a set of fields will be effectively unique, you can still use those fields as a natural key."
msgstr ""

#: ../../topics/serialization.txt:313
# 6be93a271e5c44949e8de38e2d539a64
msgid "Serialization of natural keys"
msgstr ""

#: ../../topics/serialization.txt:315
# 9a303adf1b7a40eeb8b2ffa54a62514c
msgid "So how do you get Django to emit a natural key when serializing an object? Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

#: ../../topics/serialization.txt:332
# 2c27f01d72b04a2fb7717624a56c026a
msgid "That method should always return a natural key tuple -- in this example, ``(first name, last name)``. Then, when you call ``serializers.serialize()``, you provide a ``use_natural_keys=True`` argument::"
msgstr ""

#: ../../topics/serialization.txt:339
# 3173ff393fef4ab7ace924f5b694cf92
msgid "When ``use_natural_keys=True`` is specified, Django will use the ``natural_key()`` method to serialize any reference to objects of the type that defines the method."
msgstr ""

#: ../../topics/serialization.txt:343
# 279251692746465fb73ad8a8a024ea4e
msgid "If you are using :djadmin:`dumpdata` to generate serialized data, you use the `--natural` command line flag to generate natural keys."
msgstr ""

#: ../../topics/serialization.txt:348
# 44a445f4be5c419abd696e66fe765fa4
msgid "You don't need to define both ``natural_key()`` and ``get_by_natural_key()``. If you don't want Django to output natural keys during serialization, but you want to retain the ability to load natural keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

#: ../../topics/serialization.txt:354
# 298bbf567b994ec8b78973bb070d2da3
msgid "Conversely, if (for some strange reason) you want Django to output natural keys during serialization, but *not* be able to load those key values, just don't define the ``get_by_natural_key()`` method."
msgstr ""

#: ../../topics/serialization.txt:359
# 5adf88c9b86640aba5b527a1ab3386ad
msgid "Dependencies during serialization"
msgstr ""

#: ../../topics/serialization.txt:361
# 215339f9c6404c08adb5eac69608bc6b
msgid "Since natural keys rely on database lookups to resolve references, it is important that the data exists before it is referenced. You can't make a `forward reference` with natural keys -- the data you're referencing must exist before you include a natural key reference to that data."
msgstr ""

#: ../../topics/serialization.txt:366
# 3632dbca15ea4c0a9d2e631c93d0483a
msgid "To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :djadminopt:`--natural` option will serialize any model with a ``natural_key()`` method before serializing standard primary key objects."
msgstr ""

#: ../../topics/serialization.txt:370
# ee1b8f61d11e438eb1d4cd055de19191
msgid "However, this may not always be enough. If your natural key refers to another object (by using a foreign key or natural key to another object as part of a natural key), then you need to be able to ensure that the objects on which a natural key depends occur in the serialized data before the natural key requires them."
msgstr ""

#: ../../topics/serialization.txt:376
# dbce4e8455b647a389669427c38d73a2
msgid "To control this ordering, you can define dependencies on your ``natural_key()`` methods. You do this by setting a ``dependencies`` attribute on the ``natural_key()`` method itself."
msgstr ""

#: ../../topics/serialization.txt:380
# 21c65f6a3b8c45af941094c6d14ab3b4
msgid "For example, let's add a natural key to the ``Book`` model from the example above::"
msgstr ""

#: ../../topics/serialization.txt:390
# 8389e357be7a42f19828356988bec693
msgid "The natural key for a ``Book`` is a combination of its name and its author. This means that ``Person`` must be serialized before ``Book``. To define this dependency, we add one extra line::"
msgstr ""

#: ../../topics/serialization.txt:398
# 15a58cae9b6b445ea0f270383a01be7a
msgid "This definition ensures that all ``Person`` objects are serialized before any ``Book`` objects. In turn, any object referencing ``Book`` will be serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

#: ../../topics/settings.txt:3
# 12fe55da42784217b7cc38672bd837b1
msgid "Django settings"
msgstr ""

#: ../../topics/settings.txt:5
# ce87a4a787204bcc897f93518147ca04
msgid "A Django settings file contains all the configuration of your Django installation. This document explains how settings work and which settings are available."
msgstr ""

#: ../../topics/settings.txt:10
# c0bbc233cac845c683409c518fce2c68
msgid "The basics"
msgstr ""

#: ../../topics/settings.txt:12
# c6bd335bad1e4c488097ac8a450100e6
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

#: ../../topics/settings.txt:14
# c31fe5a9066641c08ecef54ea54abda7
msgid "Here are a couple of example settings::"
msgstr ""

#: ../../topics/settings.txt:20
# 6449e4ef27724b1982dd2850708a44f0
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

#: ../../topics/settings.txt:22
# 789aa0a44d504a829bcb03c6475984b1
msgid "It doesn't allow for Python syntax errors."
msgstr ""

#: ../../topics/settings.txt:23
# ae4e65429eba46038ab0a6d237e404d0
msgid "It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

#: ../../topics/settings.txt:28
# 0b414609e4b14b9a8fbe872ea7be7514
msgid "It can import values from other settings files."
msgstr ""

#: ../../topics/settings.txt:33
# 3b02e2ea11e24febb2da7b0281070a92
msgid "Designating the settings"
msgstr ""

#: ../../topics/settings.txt:35
# 11bc6870ab9b4190b1eda37a3304b7e5
msgid "When you use Django, you have to tell it which settings you're using. Do this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../topics/settings.txt:38
# e23cba69f92d4de79c6fff7178b2cf37
msgid "The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e.g. ``mysite.settings``. Note that the settings module should be on the Python `import search path`_."
msgstr ""

#: ../../topics/settings.txt:45
# a33adb78e77f46fd8f885a32a684a265
msgid "The django-admin.py utility"
msgstr ""

#: ../../topics/settings.txt:47
# dad52adc068c4d5d8d1f75db1108c170
msgid "When using :doc:`django-admin.py </ref/django-admin>`, you can either set the environment variable once, or explicitly pass in the settings module each time you run the utility."
msgstr ""

#: ../../topics/settings.txt:51
# f4834fcdae4e4068b93cd87f396ad4f4
msgid "Example (Unix Bash shell)::"
msgstr ""

#: ../../topics/settings.txt:56
# bd20114a0b5043f381bc3ac88c7ce70f
msgid "Example (Windows shell)::"
msgstr ""

#: ../../topics/settings.txt:61
# 6e21c2095e51403cbb68e87fbbee7019
msgid "Use the ``--settings`` command-line argument to specify the settings manually::"
msgstr ""

#: ../../topics/settings.txt:68
# fe09ef1babbb4613b761780086e2be2f
msgid "On the server (mod_wsgi)"
msgstr ""

#: ../../topics/settings.txt:70
# 1176755907b2427ea95cbdff7b7e24e9
msgid "In your live server environment, you'll need to tell your WSGI application what settings file to use. Do that with ``os.environ``::"
msgstr ""

#: ../../topics/settings.txt:77
# 163d84ba31e24d0cade740a95c5b50b9
msgid "Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/modwsgi>` for more information and other common elements to a Django WSGI application."
msgstr ""

#: ../../topics/settings.txt:82
# 4cda5d452cd342229e8fe89355b639be
msgid "Default settings"
msgstr ""

#: ../../topics/settings.txt:84
# 2077b6da4ad44ab8a1bfd2f33095620f
msgid "A Django settings file doesn't have to define any settings if it doesn't need to. Each setting has a sensible default value. These defaults live in the module :file:`django/conf/global_settings.py`."
msgstr ""

#: ../../topics/settings.txt:88
# 15afcd6ce9924f4d9925a66597be591d
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

#: ../../topics/settings.txt:90
# fe044f3b5f414e7e84eb4d28c2fb5bb7
msgid "Load settings from ``global_settings.py``."
msgstr ""

#: ../../topics/settings.txt:91
# fc6acf5d13a249e0bfc058d9aa3be664
msgid "Load settings from the specified settings file, overriding the global settings as necessary."
msgstr ""

#: ../../topics/settings.txt:94
# 300797d65dec48618f302601ac02cee1
msgid "Note that a settings file should *not* import from ``global_settings``, because that's redundant."
msgstr ""

#: ../../topics/settings.txt:98
# 1fe0c2583b314f01b533b1dc17a9c952
msgid "Seeing which settings you've changed"
msgstr ""

#: ../../topics/settings.txt:100
# e0318b4859e64716b5cd42a98ea84470
msgid "There's an easy way to view which of your settings deviate from the default settings. The command ``python manage.py diffsettings`` displays differences between the current settings file and Django's default settings."
msgstr ""

#: ../../topics/settings.txt:104
# 5bede293e511458b8722853d2eb8e583
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

#: ../../topics/settings.txt:107
# cedbaa000dc24baead38b9ebb4a3a15e
msgid "Using settings in Python code"
msgstr ""

#: ../../topics/settings.txt:109
# c3ef14f32af746a6bfadf1e3a78fb528
msgid "In your Django apps, use settings by importing the object ``django.conf.settings``. Example::"
msgstr ""

#: ../../topics/settings.txt:117
# 766281529b134193b5bf7d1e20b272a2
msgid "Note that ``django.conf.settings`` isn't a module -- it's an object. So importing individual settings is not possible::"
msgstr ""

#: ../../topics/settings.txt:122
# 248980bd56964b3d92ca8b8255a49ce3
msgid "Also note that your code should *not* import from either ``global_settings`` or your own settings file. ``django.conf.settings`` abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings."
msgstr ""

#: ../../topics/settings.txt:129
# f5d03ef441a445e6b7d69fbbc6a429d9
msgid "Altering settings at runtime"
msgstr ""

#: ../../topics/settings.txt:131
# 429a608de0d94600a82efac4a24533a2
msgid "You shouldn't alter settings in your applications at runtime. For example, don't do this in a view::"
msgstr ""

#: ../../topics/settings.txt:138
# 0c1d49f2c62c4df689f5d33fc68e44a0
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

#: ../../topics/settings.txt:141
# 952c07cf8644454b875a6f1d6f4412c0
msgid "Security"
msgstr ""

#: ../../topics/settings.txt:143
# 11fc3a62fc35405abbb16b0338809592
msgid "Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your Web server's user can read it. This is especially important in a shared-hosting environment."
msgstr ""

#: ../../topics/settings.txt:149
# 43afca8c4f9a42cca76e9c097bc41ab4
msgid "Available settings"
msgstr ""

#: ../../topics/settings.txt:151
# e7442870a3b34f798ff5608a6debcb4e
msgid "For a full list of available settings, see the :doc:`settings reference </ref/settings>`."
msgstr ""

#: ../../topics/settings.txt:154
# 9deb0e00fc6040149224c471488348a5
msgid "Creating your own settings"
msgstr ""

#: ../../topics/settings.txt:156
# 25ac9918276940b098ed692cfc7266ef
msgid "There's nothing stopping you from creating your own settings, for your own Django apps. Just follow these conventions:"
msgstr ""

#: ../../topics/settings.txt:159
# 3c8bb5aab8dc421bb352da1ed0921127
msgid "Setting names are in all uppercase."
msgstr ""

#: ../../topics/settings.txt:160
# 1f85309edeb546148d73ff78d7f0fa21
msgid "Don't reinvent an already-existing setting."
msgstr ""

#: ../../topics/settings.txt:162
# bfccb9dde44844d7aa782b54219be94e
msgid "For settings that are sequences, Django itself uses tuples, rather than lists, but this is only a convention."
msgstr ""

#: ../../topics/settings.txt:168
# 51058f67e0f64ca598b6ddbc49064d35
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

#: ../../topics/settings.txt:170
# fdba65bf4aaa49938248320ccb0979b4
msgid "In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` environment variable. For example, if you're using the template system by itself, you likely don't want to have to set up an environment variable pointing to a settings module."
msgstr ""

#: ../../topics/settings.txt:175
# 7970c3fb05204b50b9fc2fefdf63c120
msgid "In these cases, you can configure Django's settings manually. Do this by calling:"
msgstr ""

#: ../../topics/settings.txt:187
# 6c64ffe36ae14cd8aee3a6906e22049a
msgid "Pass ``configure()`` as many keyword arguments as you'd like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to ``configure()`` and is needed at some later point, Django will use the default setting value."
msgstr ""

#: ../../topics/settings.txt:193
# 33e94964b9874982b2d428a920484fcd
msgid "Configuring Django in this fashion is mostly necessary -- and, indeed, recommended -- when you're using a piece of the framework inside a larger application."
msgstr ""

#: ../../topics/settings.txt:197
# 25d218b195a643958cd145d4488d7de8
msgid "Consequently, when configured via ``settings.configure()``, Django will not make any modifications to the process environment variables (see the documentation of :setting:`TIME_ZONE` for why this would normally occur). It's assumed that you're already in full control of your environment in these cases."
msgstr ""

#: ../../topics/settings.txt:204
# b97f02fd7ee941bca47d2639bc0be9f8
msgid "Custom default settings"
msgstr ""

#: ../../topics/settings.txt:206
# 69bacc2cea644b978d0fa90652f9e41b
msgid "If you'd like default values to come from somewhere other than ``django.conf.global_settings``, you can pass in a module or class that provides the default settings as the ``default_settings`` argument (or as the first positional argument) in the call to ``configure()``."
msgstr ""

#: ../../topics/settings.txt:211
# f11a270b30f84fd0bf5cd958368b71c8
msgid "In this example, default settings are taken from ``myapp_defaults``, and the :setting:`DEBUG` setting is set to ``True``, regardless of its value in ``myapp_defaults``::"
msgstr ""

#: ../../topics/settings.txt:220
# 148a9b43227b4c50981c148e032936fc
msgid "The following example, which uses ``myapp_defaults`` as a positional argument, is equivalent::"
msgstr ""

#: ../../topics/settings.txt:225
# 4b6aee39e33a4a30ade1d534be8d6bdf
msgid "Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely *replaces* the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in ``django.conf.settings.global_settings`` for the full list."
msgstr ""

#: ../../topics/settings.txt:233
# 6949aba63d31423b9d46f3ff8af2c566
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

#: ../../topics/settings.txt:235
# f76c0d5c9e8646c4a3ce30e657e12f1d
msgid "If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, you *must* call ``configure()`` at some point before using any code that reads settings."
msgstr ""

#: ../../topics/settings.txt:239
# a85184d0acfc41e28347361d45ab7398
msgid "If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, Django will raise an ``ImportError`` exception the first time a setting is accessed."
msgstr ""

#: ../../topics/settings.txt:243
# ee742154a6ed42c2ada02e23b3157e97
msgid "If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, *then* call ``configure()``, Django will raise a ``RuntimeError`` indicating that settings have already been configured. There is a property just for this purpose:"
msgstr ""

#: ../../topics/settings.txt:256
# d8484d96c21146428f5c0d11ab4ff3a1
msgid "Also, it's an error to call ``configure()`` more than once, or to call ``configure()`` after any setting has been accessed."
msgstr ""

#: ../../topics/settings.txt:259
# 029403ee974445a5a6d5b9b3f319a5e4
msgid "It boils down to this: Use exactly one of either ``configure()`` or ``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

#: ../../topics/signals.txt:3
# 5a132c8a990642e7aead33ada6f176f5
msgid "Signals"
msgstr ""

#: ../../topics/signals.txt:8
# e301c495859a490a8bbd8550927082be
msgid "Django includes a \"signal dispatcher\" which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain *senders* to notify a set of *receivers* that some action has taken place. They're especially useful when many pieces of code may be interested in the same events."
msgstr ""

#: ../../topics/signals.txt:14
# 2bcd9f18912b4f679af92805bf78e3d0
msgid "Django provides a :doc:`set of built-in signals </ref/signals>` that let user code get notified by Django itself of certain actions. These include some useful notifications:"
msgstr ""

#: ../../topics/signals.txt:18
# e93e30270ebc495db7a722d9ced5142c
msgid ":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals.post_save`"
msgstr ""

#: ../../topics/signals.txt:21
# c662f2dabd2f4acb8465f329a0e8ea5b
msgid "Sent before or after a model's :meth:`~django.db.models.Model.save` method is called."
msgstr ""

#: ../../topics/signals.txt:24
# 77b9976ff7f44b7f8a11ac3711ae77ad
msgid ":data:`django.db.models.signals.pre_delete` & :data:`django.db.models.signals.post_delete`"
msgstr ""

#: ../../topics/signals.txt:27
# c6c86896712647618dcdd1e5c05585cc
msgid "Sent before or after a model's :meth:`~django.db.models.Model.delete` method or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is called."
msgstr ""

#: ../../topics/signals.txt:31
# d004c8eea5c24d409bff123bb24669bd
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

#: ../../topics/signals.txt:33
# 1e1fd76f13c8426385c5221290d74b12
msgid "Sent when a :class:`ManyToManyField` on a model is changed."
msgstr ""

#: ../../topics/signals.txt:35
# 2cf071307173412baf174ae270966dcd
msgid ":data:`django.core.signals.request_started` & :data:`django.core.signals.request_finished`"
msgstr ""

#: ../../topics/signals.txt:38
# 0c6c90c5ee834ba38ea831bf6373a7a8
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

#: ../../topics/signals.txt:40
# 38a539b2bc4d4bd7b1f94b9fbc498007
msgid "See the :doc:`built-in signal documentation </ref/signals>` for a complete list, and a complete explanation of each signal."
msgstr ""

#: ../../topics/signals.txt:43
# 1a71d6e2f53e4c878e0b8929d29dc155
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

#: ../../topics/signals.txt:48
# a59ce2ccced54a65b157f8a4665d3215
msgid "Listening to signals"
msgstr ""

#: ../../topics/signals.txt:50
# 4d38355b81964e0597d8a3f1d7d2356a
msgid "To receive a signal, you need to register a *receiver* function that gets called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr ""

#: ../../topics/signals.txt:71
# 4e3df29a5a5943b9814e1f66f1397123
msgid "Let's see how this works by registering a signal that gets called after each HTTP request is finished. We'll be connecting to the :data:`~django.core.signals.request_finished` signal."
msgstr ""

#: ../../topics/signals.txt:78
# 5bd7ba4b4f6e4c83a57fa7f84b498a2d
msgid "Receiver functions"
msgstr ""

#: ../../topics/signals.txt:80
# 3bff2953506f40d796ab8626700f1d6f
msgid "First, we need to define a receiver function. A receiver can be any Python function or method:"
msgstr ""

#: ../../topics/signals.txt:88
# 8c1f267185a047c1a4e14887b23c7645
msgid "Notice that the function takes a ``sender`` argument, along with wildcard keyword arguments (``**kwargs``); all signal handlers must take these arguments."
msgstr ""

#: ../../topics/signals.txt:91
# 1952a1648a5c4510898ecea62d3cb651
msgid "We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of :data:`~django.core.signals.request_finished`, it's documented as sending no arguments, which means we might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

#: ../../topics/signals.txt:100
# 448cced9b8f148aea484622defc21e48
msgid "This would be wrong -- in fact, Django will throw an error if you do so. That's because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments."
msgstr ""

#: ../../topics/signals.txt:107
# 2b6f544d17c64b31861bd669ab2aaa11
msgid "Connecting receiver functions"
msgstr ""

#: ../../topics/signals.txt:109
# af2e41c90c524b9ab1c01d4ef84ef445
msgid "There are two ways you can connect a receiver to a signal. You can take the manual connect route:"
msgstr ""

#: ../../topics/signals.txt:118
# fbd701bd9001451fb3b6747d46e4126c
msgid "Alternatively, you can use a ``receiver`` decorator when you define your receiver:"
msgstr ""

#: ../../topics/signals.txt:130
# 71321a5f3b1743c89ae262242b7f877b
msgid "Now, our ``my_callback`` function will be called each time a request finishes."
msgstr ""

#: ../../topics/signals.txt:132
# 643bf238ad6f44e58bb4842d54cc5209
msgid "Note that ``receiver`` can also take a list of signals to connect a function to."
msgstr ""

#: ../../topics/signals.txt:137
# 8dfafed83a8e4bfab5791787a4e31854
msgid "The ability to pass a list of signals was added."
msgstr ""

#: ../../topics/signals.txt:141
# 5b3ab368c73e4b1cb621db20b980c07c
msgid "You can put signal handling and registration code anywhere you like. However, you'll need to make sure that the module it's in gets imported early on so that the signal handling gets registered before any signals need to be sent. This makes your app's ``models.py`` a good place to put registration of signal handlers."
msgstr ""

#: ../../topics/signals.txt:150
# f0d25e907f024f63a575bd83a631aad7
msgid "Connecting to signals sent by specific senders"
msgstr ""

#: ../../topics/signals.txt:152
# 68e92fe3e9774e99aaeca8906ef412ca
msgid "Some signals get sent many times, but you'll only be interested in receiving a certain subset of those signals. For example, consider the :data:`django.db.models.signals.pre_save` signal sent before a model gets saved. Most of the time, you don't need to know when *any* model gets saved -- just when one *specific* model is saved."
msgstr ""

#: ../../topics/signals.txt:158
# 232119b7fccf4364bef92607158aa34a
msgid "In these cases, you can register to receive signals sent only by particular senders. In the case of :data:`django.db.models.signals.pre_save`, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:"
msgstr ""

#: ../../topics/signals.txt:173
# 2742f54339f94d6889d3de3d877f2f15
msgid "The ``my_handler`` function will only be called when an instance of ``MyModel`` is saved."
msgstr ""

#: ../../topics/signals.txt:176
# db49c1968e454b768f4dea176241e67d
msgid "Different signals use different objects as their senders; you'll need to consult the :doc:`built-in signal documentation </ref/signals>` for details of each particular signal."
msgstr ""

#: ../../topics/signals.txt:183
# af806bd785c74f5198006f578a9cfcb9
msgid "Preventing duplicate signals"
msgstr ""

#: ../../topics/signals.txt:185
# 70d7d379c21146418c083b8dbf4291ed
msgid "In some circumstances, the module in which you are connecting signals may be imported multiple times. This can cause your receiver function to be registered more than once, and thus called multiples times for a single signal event."
msgstr ""

#: ../../topics/signals.txt:190
# b3e1ada748da439eb9b7fb32f5f22687
msgid "If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique ``dispatch_uid`` value."
msgstr ""

#: ../../topics/signals.txt:204
# feb22beb7bec402e9d4c79fbc6164c0a
msgid "Defining and sending signals"
msgstr ""

#: ../../topics/signals.txt:206
# 0da3fd0535bf483f94bdd907834f6ef4
msgid "Your applications can take advantage of the signal infrastructure and provide its own signals."
msgstr ""

#: ../../topics/signals.txt:210
# a4783bd9ebc14dea9c99e21afb8e7b05
msgid "Defining signals"
msgstr ""

#: ../../topics/signals.txt:214
# 8c4b7f9a43bf4c89b40782ce4858d811
msgid "All signals are :class:`django.dispatch.Signal` instances. The ``providing_args`` is a list of the names of arguments the signal will provide to listeners."
msgstr ""

#: ../../topics/signals.txt:218
# 04512942ee5540a7895ce0513cc5308c
msgid "For example:"
msgstr ""

#: ../../topics/signals.txt:226
# 062ee86d291e41b198d87e2cae0c859f
msgid "This declares a ``pizza_done`` signal that will provide receivers with ``toppings`` and ``size`` arguments."
msgstr ""

#: ../../topics/signals.txt:229
# 39dd6d81492c4c3b809177b3e120b6f0
msgid "Remember that you're allowed to change this list of arguments at any time, so getting the API right on the first try isn't necessary."
msgstr ""

#: ../../topics/signals.txt:232
# ec13c3022edd46879207edec9430fe2c
msgid "Sending signals"
msgstr ""

#: ../../topics/signals.txt:234
# 3d3e377da3014b2cb3501e3a2e3abc52
msgid "There are two ways to send signals in Django."
msgstr ""

#: ../../topics/signals.txt:239
# 4b6bf16a0b264f3ea2871ad793ad6544
msgid "To send a signal, call either :meth:`Signal.send` or :meth:`Signal.send_robust`. You must provide the ``sender`` argument, and may provide as many other keyword arguments as you like."
msgstr ""

#: ../../topics/signals.txt:243
# 0a8a473d88fe4403b49b1712258f9519
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr ""

#: ../../topics/signals.txt:254
# 84737f2ef0f54ae7992ce8ee5ac518ce
msgid "Both ``send()`` and ``send_robust()`` return a list of tuple pairs ``[(receiver, response), ... ]``, representing the list of called receiver functions and their response values."
msgstr ""

#: ../../topics/signals.txt:258
# 8d5d61a93db64999aca3155a2bb20347
msgid "``send()`` differs from ``send_robust()`` in how exceptions raised by receiver functions are handled. ``send()`` does *not* catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error."
msgstr ""

#: ../../topics/signals.txt:263
# c8130025913f4568bd3d453269cd88fd
msgid "``send_robust()`` catches all errors derived from Python's ``Exception`` class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error."
msgstr ""

#: ../../topics/signals.txt:268
# 4edcf0881b064d4f9b349ee890119b24
msgid "Disconnecting signals"
msgstr ""

#: ../../topics/signals.txt:272
# 3d7af6cbbde84241b949c9b235728903
msgid "To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The arguments are as described in :meth:`.Signal.connect`."
msgstr ""

#: ../../topics/signals.txt:275
# 3703e4ae96c54e699e73f4e05f42b119
msgid "The *receiver* argument indicates the registered receiver to disconnect. It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

#: ../../topics/signing.txt:3
# 70f8937ffa04488f8bb6e09be6753bdf
msgid "Cryptographic signing"
msgstr ""

#: ../../topics/signing.txt:10
# f8978c66e103432da9fe86d1faa6c064
msgid "The golden rule of Web application security is to never trust data from untrusted sources. Sometimes it can be useful to pass data through an untrusted medium. Cryptographically signed values can be passed through an untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

#: ../../topics/signing.txt:15
# 858b36a20c004b5bbc06f053e850052f
msgid "Django provides both a low-level API for signing values and a high-level API for setting and reading signed cookies, one of the most common uses of signing in Web applications."
msgstr ""

#: ../../topics/signing.txt:19
# 9224f8bef468415a90481bc961a1867b
msgid "You may also find signing useful for the following:"
msgstr ""

#: ../../topics/signing.txt:21
# 478f85d74e8744fcbe567c61212cd57c
msgid "Generating \"recover my account\" URLs for sending to users who have lost their password."
msgstr ""

#: ../../topics/signing.txt:24
# a02252aba0284926809d63ebdbcb2f68
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

#: ../../topics/signing.txt:26
# 3bc2265f0f60495ebe90afc4be8189f9
msgid "Generating one-time secret URLs for allowing temporary access to a protected resource, for example a downloadable file that a user has paid for."
msgstr ""

#: ../../topics/signing.txt:31
# 7dadf2e3435e40778119202876c9accf
msgid "Protecting the SECRET_KEY"
msgstr ""

#: ../../topics/signing.txt:33
# bbf6364f3785422788671bfb153fb760
msgid "When you create a new Django project using :djadmin:`startproject`, the ``settings.py`` file is generated automatically and gets a random :setting:`SECRET_KEY` value. This value is the key to securing signed data -- it is vital you keep this secure, or attackers could use it to generate their own signed values."
msgstr ""

#: ../../topics/signing.txt:40
# a7a654232b3b4066aaf207c5bb8a1374
msgid "Using the low-level API"
msgstr ""

#: ../../topics/signing.txt:44
# 9f932c15bf5d4e13958e909699f21aa7
msgid "Django's signing methods live in the ``django.core.signing`` module. To sign a value, first instantiate a ``Signer`` instance::"
msgstr ""

#: ../../topics/signing.txt:53
# 8443df815d6e44db874eea37aeb99f09
msgid "The signature is appended to the end of the string, following the colon. You can retrieve the original value using the ``unsign`` method::"
msgstr ""

#: ../../topics/signing.txt:60
# d3071c4f811a43b5952e692e1cb98e8e
msgid "If the signature or value have been altered in any way, a ``django.core.signing.BadSignature`` exception will be raised::"
msgstr ""

#: ../../topics/signing.txt:69
# 04c7d4d06fb6487cb14d3e0fa296f424
msgid "By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to generate signatures. You can use a different secret by passing it to the ``Signer`` constructor::"
msgstr ""

#: ../../topics/signing.txt:79
# 19a08a149be24c29bc419d44d2bf4b5d
msgid "Using the salt argument"
msgstr ""

#: ../../topics/signing.txt:81
# b85a0ff790a8431d8a453f2e1e4a9eb9
msgid "If you do not wish for every occurrence of a particular string to have the same signature hash, you can use the optional ``salt`` argument to the ``Signer`` class. Using a salt will seed the signing hash function with both the salt and your :setting:`SECRET_KEY`::"
msgstr ""

#: ../../topics/signing.txt:95
# 9c80c750e7f2495d8e5ca2c65cd44436
msgid "Using salt in this way puts the different signatures into different namespaces.  A signature that comes from one namespace (a particular salt value) cannot be used to validate the same plaintext string in a different namespace that is using a different salt setting. The result is to prevent an attacker from using a signed string generated in one place in the code as input to another piece of code that is generating (and verifying) signatures using a different salt."
msgstr ""

#: ../../topics/signing.txt:103
# 96ea6f27ed4d43739d3756c1b22384b4
msgid "Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay secret."
msgstr ""

#: ../../topics/signing.txt:107
# fba3efa494434e0e9699b0b041a07c55
msgid "Verifying timestamped values"
msgstr ""

#: ../../topics/signing.txt:111
# 717e887694c6415db9bcbc89583c1af3
msgid "``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed timestamp to the value. This allows you to confirm that a signed value was created within a specified period of time::"
msgstr ""

#: ../../topics/signing.txt:129
# 335d6c3930f340b69345e7cd62d02d61
msgid "Protecting complex data structures"
msgstr ""

#: ../../topics/signing.txt:131
# 4de78ffb8af74ecbad515216768d45a6
msgid "If you wish to protect a list, tuple or dictionary you can do so using the signing module's ``dumps`` and ``loads`` functions. These imitate Python's pickle module, but use JSON serialization under the hood. JSON ensures that even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

#: ../../topics/signing.txt:146
# 7f72c1b7db634df5adf8a7f32d74da1e
msgid "Returns URL-safe, sha1 signed base64 compressed JSON string."
msgstr ""

#: ../../topics/signing.txt:150
# 535150c3bf9d4a80bc2db88e3a0a45d7
msgid "Reverse of dumps(), raises ``BadSignature`` if signature fails."
msgstr ""

#: ../../topics/templates.txt:3
# a60c5b545eb94d7b9b7d3e35e1ed01e3
msgid "The Django template language"
msgstr ""

#: ../../topics/templates.txt:7
# dc2b0fb3fdd14981887b979486d0bd69
msgid "This document explains the language syntax of the Django template system. If you're looking for a more technical perspective on how it works and how to extend it, see :doc:`/ref/templates/api`."
msgstr ""

#: ../../topics/templates.txt:11
# b2b71711c6464588a42b59045d0b36e2
msgid "Django's template language is designed to strike a balance between power and ease. It's designed to feel comfortable to those used to working with HTML. If you have any exposure to other text-based template languages, such as Smarty_ or CheetahTemplate_, you should feel right at home with Django's templates."
msgstr ""

#: ../../topics/templates.txt:18
# 309c5a02480347afb52bf4a920416428
msgid "If you have a background in programming, or if you're used to languages like PHP which mix programming code directly into HTML, you'll want to bear in mind that the Django template system is not simply Python embedded into HTML. This is by design: the template system is meant to express presentation, not program logic."
msgstr ""

#: ../../topics/templates.txt:24
# 1d9a9924b5354429b60d936ba00628e0
msgid "The Django template system provides tags which function similarly to some programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` tag for looping, etc. -- but these are not simply executed as the corresponding Python code, and the template system will not execute arbitrary Python expressions. Only the tags, filters and syntax listed below are supported by default (although you can add :doc:`your own extensions </howto/custom-template-tags>` to the template language as needed)."
msgstr ""

#: ../../topics/templates.txt:37
# f68637ea336d4359a89d2d3b376c392e
msgid "Templates"
msgstr ""

#: ../../topics/templates.txt:41
# 4adbcc48c3254267986e4b2dd9458296
msgid "A template is simply a text file. It can generate any text-based format (HTML, XML, CSV, etc.)."
msgstr ""

#: ../../topics/templates.txt:44
# 59b651a5860e4ce9984be2f49bd77a4e
msgid "A template contains **variables**, which get replaced with values when the template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

#: ../../topics/templates.txt:47
# 15b88a3d8a534f14a82ee41002185bbe
msgid "Below is a minimal template that illustrates a few basics. Each element will be explained later in this document.::"
msgstr ""

#: ../../topics/templates.txt:69
# 1d03854a9a444c979bfb636e7228b87a
msgid "Why use a text-based template instead of an XML-based one (like Zope's TAL)? We wanted Django's template language to be usable for more than just XML/HTML templates. At World Online, we use it for emails, JavaScript and CSV. You can use the template language for any text-based format."
msgstr ""

#: ../../topics/templates.txt:75
# 64fcb9dc91ff4623a3fb715bc9892147
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

#: ../../topics/templates.txt:78
# a1697e4731024bc49febd08b192f8f07
msgid "Variables"
msgstr ""

#: ../../topics/templates.txt:80
# 6cc30a8af3cc49fcbfb22049a1841465
msgid "Variables look like this: ``{{ variable }}``. When the template engine encounters a variable, it evaluates that variable and replaces it with the result. Variable names consist of any combination of alphanumeric characters and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable sections, although that has a special meaning, as indicated below. Importantly, *you cannot have spaces or punctuation characters in variable names.*"
msgstr ""

#: ../../topics/templates.txt:88
# 2315812aba00416aa6b79c07956f1341
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

#: ../../topics/templates.txt:92
# b1b5e45f2ca648c59ab95e3d30f7eb5c
msgid "Technically, when the template system encounters a dot, it tries the following lookups, in this order:"
msgstr ""

#: ../../topics/templates.txt:95
# 25ff93fa103a4f3098f52db65485ae73
msgid "Dictionary lookup"
msgstr ""

#: ../../topics/templates.txt:96
# aeff6d2fa4044a47800ce6157510d6dc
msgid "Attribute lookup"
msgstr ""

#: ../../topics/templates.txt:97
# 71b85806399d41738c86f69905a61a5e
msgid "Method call"
msgstr ""

#: ../../topics/templates.txt:98
# 5b32e0fe0dad4c8b8ba810418b50de52
msgid "List-index lookup"
msgstr ""

#: ../../topics/templates.txt:100
# cd76eedb8edc4f5893cc946342450540
msgid "This can cause some unexpected behavior with objects that override dictionary lookup. For example, consider the following code snippet that attempts to loop over a ``collections.defaultdict``::"
msgstr ""

#: ../../topics/templates.txt:108
# 03bdce8c5dc44699a61ef70eb862df2b
msgid "Because dictionary lookup happens first, that behavior kicks in and provides a default value instead of using the intended ``.iteritems()`` method. In this case, consider converting to a dictionary first."
msgstr ""

#: ../../topics/templates.txt:112
# cdd87cb1742a4dd185cfc6125ad3eca5
msgid "In the above example, ``{{ section.title }}`` will be replaced with the ``title`` attribute of the ``section`` object."
msgstr ""

#: ../../topics/templates.txt:115
# bd66175976364606a1c74eb08c544992
msgid "If you use a variable that doesn't exist, the template system will insert the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to ``''`` (the empty string) by default."
msgstr ""

#: ../../topics/templates.txt:119
# 3eb1643e0ebf4960927bb4df3ae9590b
msgid "Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be interpreted as a literal string and not using the value of the variable \"bar\", if one exists in the template context."
msgstr ""

#: ../../topics/templates.txt:126
# ed807675331043f7a929252fff0b87dd
msgid "You can modify variables for display by using **filters**."
msgstr ""

#: ../../topics/templates.txt:128
# 4d1f6e9bd2c1489a81304c8707cdd06c
msgid "Filters look like this: ``{{ name|lower }}``. This displays the value of the ``{{ name }}`` variable after being filtered through the :tfilter:`lower` filter, which converts text to lowercase. Use a pipe (``|``) to apply a filter."
msgstr ""

#: ../../topics/templates.txt:132
# 8fa842ab3db64b05b11f0279f319684e
msgid "Filters can be \"chained.\" The output of one filter is applied to the next. ``{{ text|escape|linebreaks }}`` is a common idiom for escaping text contents, then converting line breaks to ``<p>`` tags."
msgstr ""

#: ../../topics/templates.txt:136
# cbba0621fb2e49f28be5db71577731d0
msgid "Some filters take arguments. A filter argument looks like this: ``{{ bio|truncatewords:30 }}``. This will display the first 30 words of the ``bio`` variable."
msgstr ""

#: ../../topics/templates.txt:140
# 216b7e14e07546e3891f03338213c4e3
msgid "Filter arguments that contain spaces must be quoted; for example, to join a list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

#: ../../topics/templates.txt:143
# 85a2f9a4742144168d9a7f0e5c8987a3
msgid "Django provides about thirty built-in template filters. You can read all about them in the :ref:`built-in filter reference <ref-templates-builtins-filters>`. To give you a taste of what's available, here are some of the more commonly used template filters:"
msgstr ""

#: ../../topics/templates.txt:149
# aee4662994ec4e40b7b8e1a6491b6375
msgid "If a variable is false or empty, use given default. Otherwise, use the value of the variable"
msgstr ""

#: ../../topics/templates.txt:156
# 27347cf5701d418bbbeeff0cc2b8e996
msgid "If ``value`` isn't provided or is empty, the above will display \"``nothing``\"."
msgstr ""

#: ../../topics/templates.txt:160
# f73b1718ba4f487c9400b6928270da9d
msgid "Returns the length of the value. This works for both strings and lists; for example::"
msgstr ""

#: ../../topics/templates.txt:165
# d6a132f08fa14f2f94195851ada86998
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../topics/templates.txt:168
# 52c580f179fe4a70adfd26f2bc1d81b0
msgid "Strips all [X]HTML tags. For example::"
msgstr ""

#: ../../topics/templates.txt:172
# ffcc2c03f6b34993be72014e1242a3cc
msgid "If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../topics/templates.txt:175
# 32891b7659fc4455a368ccb96de802b2
msgid "Again, these are just a few examples; see the :ref:`built-in filter reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

#: ../../topics/templates.txt:178
# da9fabd358264bd4bfd3e299a001e550
msgid "You can also create your own custom template filters; see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../topics/templates.txt:183
#: ../../topics/templates.txt:249
# 22f22c04b0c543fbbfae070f69d1e795
# 2afabd076086468c976f509361c8322b
msgid "Django's admin interface can include a complete reference of all template tags and filters available for a given site. See :doc:`/ref/contrib/admin/admindocs`."
msgstr ""

#: ../../topics/templates.txt:188
# 8a2c4008e9ad4663bb51becaafc21ad2
msgid "Tags"
msgstr ""

#: ../../topics/templates.txt:190
# 43d7c5ada005478b9b97984e8172e45b
msgid "Tags look like this: ``{% tag %}``. Tags are more complex than variables: Some create text in the output, some control flow by performing loops or logic, and some load external information into the template to be used by later variables."
msgstr ""

#: ../../topics/templates.txt:194
# 734171bbecfb445592f210b8821f1b56
msgid "Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag contents ... {% endtag %}``)."
msgstr ""

#: ../../topics/templates.txt:197
# f1268438ff3d479e92c4285bf0c5d081
msgid "Django ships with about two dozen built-in template tags. You can read all about them in the :ref:`built-in tag reference <ref-templates-builtins-tags>`. To give you a taste of what's available, here are some of the more commonly used tags:"
msgstr ""

#: ../../topics/templates.txt:203
# e10fbabc7d6d46df9c966c87dbe84009
msgid "Loop over each item in an array.  For example, to display a list of athletes provided in ``athlete_list``::"
msgstr ""

#: ../../topics/templates.txt:213
# 511caa5c07bc49d3910cccf0409bd308
msgid "Evaluates a variable, and if that variable is \"true\" the contents of the block are displayed::"
msgstr ""

#: ../../topics/templates.txt:222
# dbe6ca4040da438ea41373ecf26b09df
msgid "In the above, if ``athlete_list`` is not empty, the number of athletes will be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../topics/templates.txt:225
# ead38df2d4c44ce6adc6698e6f2f10fc
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

#: ../../topics/templates.txt:233
# 18805b7ebf4e427a880e6087a84ef2b4
msgid "While the above example works, be aware that most template filters return strings, so mathematical comparisons using filters will generally not work as you expect. :tfilter:`length` is an exception."
msgstr ""

#: ../../topics/templates.txt:238
# 8b80c3ebea564ac284ad94cb2de57b0c
msgid "Set up `template inheritance`_ (see below), a powerful way of cutting down on \"boilerplate\" in templates."
msgstr ""

#: ../../topics/templates.txt:241
# 4ee4ec3228f54476aa43349352109c49
msgid "Again, the above is only a selection of the whole list; see the :ref:`built-in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

#: ../../topics/templates.txt:244
# 5e8cea2526414dbf9d8d6252bb149253
msgid "You can also create your own custom template tags; see :doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../topics/templates.txt:254
# 2a3c49f9b8254f6a8fa262e69ab64775
msgid "Comments"
msgstr ""

#: ../../topics/templates.txt:256
# 2094d42aa91f46b2aaa7ceb966104e75
msgid "To comment-out part of a line in a template, use the comment syntax: ``{# #}``."
msgstr ""

#: ../../topics/templates.txt:258
# 2f4aa486d78b4cf19087f6354159af47
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

#: ../../topics/templates.txt:262
# c3ee1a71ddad40e1ba3ce79fb493a124
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

#: ../../topics/templates.txt:266
# c6e96f428d3146eabacf4e71d8e7514e
msgid "This syntax can only be used for single-line comments (no newlines are permitted between the ``{#`` and ``#}`` delimiters). If you need to comment out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

#: ../../topics/templates.txt:273
# 46bce69749804a0bb30dc6088de1d688
msgid "Template inheritance"
msgstr ""

#: ../../topics/templates.txt:275
# 3233fb6d5cfe4bc1a37c4ef6959e5997
msgid "The most powerful -- and thus the most complex -- part of Django's template engine is template inheritance. Template inheritance allows you to build a base \"skeleton\" template that contains all the common elements of your site and defines **blocks** that child templates can override."
msgstr ""

#: ../../topics/templates.txt:280
# 1b2100fa34734b04868a75f24b228c52
msgid "It's easiest to understand template inheritance by starting with an example::"
msgstr ""

#: ../../topics/templates.txt:305
# b60e50b196534fe08be31ee863861943
msgid "This template, which we'll call ``base.html``, defines a simple HTML skeleton document that you might use for a simple two-column page. It's the job of \"child\" templates to fill the empty blocks with content."
msgstr ""

#: ../../topics/templates.txt:309
# 8a8be55566454d9985f53eef9f69fc1d
msgid "In this example, the :ttag:`block` tag defines three blocks that child templates can fill in. All the :ttag:`block` tag does is to tell the template engine that a child template may override those portions of the template."
msgstr ""

#: ../../topics/templates.txt:313
# 4809533bb848456b9b320018e5693f6e
msgid "A child template might look like this::"
msgstr ""

#: ../../topics/templates.txt:326
# 72d5e5a9ad414395a9e0feb45971a42e
msgid "The :ttag:`extends` tag is the key here. It tells the template engine that this template \"extends\" another template. When the template system evaluates this template, first it locates the parent -- in this case, \"base.html\"."
msgstr ""

#: ../../topics/templates.txt:330
# f92446ff17124d2f9d588b632136cdad
msgid "At that point, the template engine will notice the three :ttag:`block` tags in ``base.html`` and replace those blocks with the contents of the child template. Depending on the value of ``blog_entries``, the output might look like::"
msgstr ""

#: ../../topics/templates.txt:360
# 40d0f42675fe4c78a194e7e7366bd810
msgid "Note that since the child template didn't define the ``sidebar`` block, the value from the parent template is used instead. Content within a ``{% block %}`` tag in a parent template is always used as a fallback."
msgstr ""

#: ../../topics/templates.txt:364
# 524909ebf3e4451094dfde9d26d5a6fb
msgid "You can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach:"
msgstr ""

#: ../../topics/templates.txt:367
# 22d5a82426e04871b02fe5468687978d
msgid "Create a ``base.html`` template that holds the main look-and-feel of your site."
msgstr ""

#: ../../topics/templates.txt:369
# 3d85ec1a2db0432ead4e5b992ff4ce7a
msgid "Create a ``base_SECTIONNAME.html`` template for each \"section\" of your site. For example, ``base_news.html``, ``base_sports.html``. These templates all extend ``base.html`` and include section-specific styles/design."
msgstr ""

#: ../../topics/templates.txt:373
# 84ed76fbedc04d7d86ba6280f580b34e
msgid "Create individual templates for each type of page, such as a news article or blog entry. These templates extend the appropriate section template."
msgstr ""

#: ../../topics/templates.txt:377
# 56b17f1d9acb4284a723768dc8709532
msgid "This approach maximizes code reuse and makes it easy to add items to shared content areas, such as section-wide navigation."
msgstr ""

#: ../../topics/templates.txt:380
# 0ff5727ee59c4b068e6c80a7dd657809
msgid "Here are some tips for working with inheritance:"
msgstr ""

#: ../../topics/templates.txt:382
# 9579e107f82541edbcbdf5b087006ace
msgid "If you use :ttag:`{% extends %}<extends>` in a template, it must be the first template tag in that template. Template inheritance won't work, otherwise."
msgstr ""

#: ../../topics/templates.txt:385
# 6c78c1cd31a74044b1971a4548945e4e
msgid "More :ttag:`{% block %}<block>` tags in your base templates are better. Remember, child templates don't have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It's better to have more hooks than fewer hooks."
msgstr ""

#: ../../topics/templates.txt:390
# 75fbdfc8086e4aa6b693f8b5d434103f
msgid "If you find yourself duplicating content in a number of templates, it probably means you should move that content to a ``{% block %}`` in a parent template."
msgstr ""

#: ../../topics/templates.txt:394
# 2bf0c79ea85e431ebf28aab7cda251fd
msgid "If you need to get the content of the block from the parent template, the ``{{ block.super }}`` variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using ``{{ block.super }}`` will not be automatically escaped (see the `next section`_), since it was already escaped, if necessary, in the parent template."
msgstr ""

#: ../../topics/templates.txt:401
# ae50a5ad89f5423ba23c88778f964fe5
msgid "For extra readability, you can optionally give a *name* to your ``{% endblock %}`` tag. For example::"
msgstr ""

#: ../../topics/templates.txt:408
# a86bbe6f9dd84dc7a4cca53552302089
msgid "In larger templates, this technique helps you see which ``{% block %}`` tags are being closed."
msgstr ""

#: ../../topics/templates.txt:411
# 5d4ea64e23854c16a97f1f06211a4100
msgid "Finally, note that you can't define multiple :ttag:`block` tags with the same name in the same template. This limitation exists because a block tag works in \"both\" directions. That is, a block tag doesn't just provide a hole to fill -- it also defines the content that fills the hole in the *parent*. If there were two similarly-named :ttag:`block` tags in a template, that template's parent wouldn't know which one of the blocks' content to use."
msgstr ""

#: ../../topics/templates.txt:422
# a4e718f292b1420188d91f0bfdda5fc7
msgid "Automatic HTML escaping"
msgstr ""

#: ../../topics/templates.txt:424
# a191e4f422ed419fa4ee943afd9e5d00
msgid "When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. For example, consider this template fragment::"
msgstr ""

#: ../../topics/templates.txt:430
# 808faec3a7b64b2594ace74c8110412a
msgid "At first, this seems like a harmless way to display a user's name, but consider what would happen if the user entered his name as this::"
msgstr ""

#: ../../topics/templates.txt:435
# ec7da4d1567e46079ba9a96d5b0c2da9
msgid "With this name value, the template would be rendered as::"
msgstr ""

#: ../../topics/templates.txt:439
# 97df6a51efa246d6ac7906b73689b2da
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

#: ../../topics/templates.txt:441
# 6235dc109eb64dc0b45057c238b8794c
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

#: ../../topics/templates.txt:447
# d4e365b8837e4b578c3f66f2637999ca
msgid "That would result in a rendered template like this::"
msgstr ""

#: ../../topics/templates.txt:451
# 79fc9d3e30784b2d9dab7d05d4509f4a
msgid "...which, in turn, would result in the remainder of the Web page being bolded!"
msgstr ""

#: ../../topics/templates.txt:453
# a8629dd0c92048c296bf30aeef9f521d
msgid "Clearly, user-submitted data shouldn't be trusted blindly and inserted directly into your Web pages, because a malicious user could use this kind of hole to do potentially bad things. This type of security exploit is called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

#: ../../topics/templates.txt:458
# 46ebd901bc3e4d3fa70761bfab5c21bd
msgid "To avoid this problem, you have two options:"
msgstr ""

#: ../../topics/templates.txt:460
# 3ba04a2f274f4a63bd1977274dc2b810
msgid "One, you can make sure to run each untrusted variable through the :tfilter:`escape` filter (documented below), which converts potentially harmful HTML characters to unharmful ones. This was the default solution in Django for its first few years, but the problem is that it puts the onus on *you*, the developer / template author, to ensure you're escaping everything. It's easy to forget to escape data."
msgstr ""

#: ../../topics/templates.txt:467
# 5d9e42ac78204b179ed6d83c18fc58fc
msgid "Two, you can take advantage of Django's automatic HTML escaping. The remainder of this section describes how auto-escaping works."
msgstr ""

#: ../../topics/templates.txt:470
# b2c9c41b50644337b4d347e7253572d1
msgid "By default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:"
msgstr ""

#: ../../topics/templates.txt:474
# 480c91a1fca74c9b8e16dad125ef9258
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../topics/templates.txt:475
# efa4487938c549a68650383c424564b8
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../topics/templates.txt:476
# a4210dd9037f4477bc7bcaa163347605
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../topics/templates.txt:477
# 975d0f892bf048228a6802a716d047e3
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../topics/templates.txt:478
# bb70fd630a1a4fe89e494172c81b5d7c
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../topics/templates.txt:480
# 09bc4539affe431cb26bc569dcbce999
msgid "Again, we stress that this behavior is on by default. If you're using Django's template system, you're protected."
msgstr ""

#: ../../topics/templates.txt:486
# e5da0968f5254e4fb5bd1ae3d4219343
msgid "How to turn it off"
msgstr ""

#: ../../topics/templates.txt:488
# 1caa278033b2493bb731bdbf7ef15eee
msgid "If you don't want data to be auto-escaped, on a per-site, per-template level or per-variable level, you can turn it off in several ways."
msgstr ""

#: ../../topics/templates.txt:491
# f8f1a72421164fe1aa00e262f5692eae
msgid "Why would you want to turn it off? Because sometimes, template variables contain data that you *intend* to be rendered as raw HTML, in which case you don't want their contents to be escaped. For example, you might store a blob of HTML in your database and want to embed that directly into your template. Or, you might be using Django's template system to produce text that is *not* HTML -- like an email message, for instance."
msgstr ""

#: ../../topics/templates.txt:499
# 5e7c2a91ce16453e8196695e02f775c9
msgid "For individual variables"
msgstr ""

#: ../../topics/templates.txt:501
# b1391d03a12244a09897c35e6c00829c
msgid "To disable auto-escaping for an individual variable, use the :tfilter:`safe` filter::"
msgstr ""

#: ../../topics/templates.txt:507
# 8681fa30aa614386935ef03de6b58fc4
msgid "Think of *safe* as shorthand for *safe from further escaping* or *can be safely interpreted as HTML*. In this example, if ``data`` contains ``'<b>'``, the output will be::"
msgstr ""

#: ../../topics/templates.txt:515
# a3a7e8c8772348968e9ed72969e8fb4a
msgid "For template blocks"
msgstr ""

#: ../../topics/templates.txt:517
# 49bcc6ef5c39409499a47644a0c1d4bb
msgid "To control auto-escaping for a template, wrap the template (or just a particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

#: ../../topics/templates.txt:524
# 012966bd90064dffb8758d3a3e331013
msgid "The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. At times, you might want to force auto-escaping when it would otherwise be disabled. Here is an example template::"
msgstr ""

#: ../../topics/templates.txt:539
# a608002b15f747759fd5d30acc23a98c
msgid "The auto-escaping tag passes its effect onto templates that extend the current one as well as templates included via the :ttag:`include` tag, just like all block tags. For example::"
msgstr ""

#: ../../topics/templates.txt:558
# df3f2e3182ec4884bd64802b942c03d0
msgid "Because auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

#: ../../topics/templates.txt:566
# 13086803adfe47e4a666bd8ca0c537b1
msgid "Notes"
msgstr ""

#: ../../topics/templates.txt:568
# e4e6e1b943494fad87e1bb3acfd1b79d
msgid "Generally, template authors don't need to worry about auto-escaping very much. Developers on the Python side (people writing views and custom filters) need to think about the cases in which data shouldn't be escaped, and mark data appropriately, so things Just Work in the template."
msgstr ""

#: ../../topics/templates.txt:573
# 6a115959380d406cab6f4a5cbac3ec37
msgid "If you're creating a template that might be used in situations where you're not sure whether auto-escaping is enabled, then add an :tfilter:`escape` filter to any variable that needs escaping. When auto-escaping is on, there's no danger of the :tfilter:`escape` filter *double-escaping* data -- the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

#: ../../topics/templates.txt:582
# d69f792709e041738ae0958e05b910d3
msgid "String literals and automatic escaping"
msgstr ""

#: ../../topics/templates.txt:584
# 18fb28134c0d44079310543876b604bc
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

#: ../../topics/templates.txt:588
# 5c0b4ba100fa40a3afbbe9b9f72fe612
msgid "All string literals are inserted **without** any automatic escaping into the template -- they act as if they were all passed through the :tfilter:`safe` filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written."
msgstr ""

#: ../../topics/templates.txt:594
# 7f406067fdd24a9daa903936ac7fb4a9
msgid "This means you would write ::"
msgstr ""

#: ../../topics/templates.txt:598
# 84006a413f0c462e9d591570a745a5d5
msgid "...rather than ::"
msgstr ""

#: ../../topics/templates.txt:602
# 09729fc552bc4fc7b6ea45a59141591a
msgid "This doesn't affect what happens to data coming from the variable itself. The variable's contents are still automatically escaped, if necessary, because they're beyond the control of the template author."
msgstr ""

#: ../../topics/templates.txt:609
# fd6484dd3b9f41a7a6b63f7794a54fa8
msgid "Accessing method calls"
msgstr ""

#: ../../topics/templates.txt:611
# 860875cbb41d48e2bf4e83ce569d9b24
msgid "Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-related>` syntax for finding a collection of objects related on a foreign key. Therefore, given a model called \"comment\" with a foreign key relationship to a model called \"task\" you can loop through all comments attached to a given task like this::"
msgstr ""

#: ../../topics/templates.txt:623
# 9c564074edc5418d817de60fa6c3ffa5
msgid "Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` method to count the number of objects they contain. Therefore, you can obtain a count of all comments related to the current task with::"
msgstr ""

#: ../../topics/templates.txt:629
# 765ea37e68d141c59de7b3b64cf79561
msgid "And of course you can easily access methods you've explicitly defined on your own models::"
msgstr ""

#: ../../topics/templates.txt:640
# 0d655d49b6b548129a13706326034fba
msgid "Because Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display."
msgstr ""

#: ../../topics/templates.txt:648
# b493e6ade02c4271b29c85b22df4ee0d
msgid "Custom tag and filter libraries"
msgstr ""

#: ../../topics/templates.txt:650
# 7572e9480ea749019e092d8a98ec0879
msgid "Certain applications provide custom tag and filter libraries. To access them in a template, use the :ttag:`load` tag::"
msgstr ""

#: ../../topics/templates.txt:657
# 31fb566a3e3f4fc1af956f990447694d
msgid "In the above, the :ttag:`load` tag loads the ``comments`` tag library, which then makes the ``comment_form`` tag available for use. Consult the documentation area in your admin to find the list of custom libraries in your installation."
msgstr ""

#: ../../topics/templates.txt:661
# b904befe552644b3b6917c7fcfad5fed
msgid "The :ttag:`load` tag can take multiple library names, separated by spaces. Example::"
msgstr ""

#: ../../topics/templates.txt:666
# 2f0c82b8b2c346aea6b62bd549f1e218
msgid "See :doc:`/howto/custom-template-tags` for information on writing your own custom template libraries."
msgstr ""

#: ../../topics/templates.txt:670
# 977b3fefb84d4b35a493bc4d7928484b
msgid "Custom libraries and template inheritance"
msgstr ""

#: ../../topics/templates.txt:672
# f360e5111f404a158c006fff667120f7
msgid "When you load a custom tag or filter library, the tags/filters are only made available to the current template -- not any parent or child templates along the template-inheritance path."
msgstr ""

#: ../../topics/templates.txt:676
# d2bc6773c0f640e38d3b1f091a6e7add
msgid "For example, if a template ``foo.html`` has ``{% load comments %}``, a child template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have access to the comments template tags and filters. The child template is responsible for its own ``{% load comments %}``."
msgstr ""

#: ../../topics/templates.txt:681
# ac0226f2e5bd44e491223b00dae72f2a
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

#: ../../topics/testing.txt:3
# b0f43b9cf22a4dbc86093dea58296605
msgid "Testing Django applications"
msgstr ""

#: ../../topics/testing.txt:8
# a4c7e861d40943a383b2c94eececf4ee
msgid "Automated testing is an extremely useful bug-killing tool for the modern Web developer. You can use a collection of tests -- a **test suite** -- to solve, or avoid, a number of problems:"
msgstr ""

#: ../../topics/testing.txt:12
# 5400d68bbc3a492597fd157a1f7d81bc
msgid "When you're writing new code, you can use tests to validate your code works as expected."
msgstr ""

#: ../../topics/testing.txt:15
# 73d7ec1d95c24a90b9d710e04e26d6ef
msgid "When you're refactoring or modifying old code, you can use tests to ensure your changes haven't affected your application's behavior unexpectedly."
msgstr ""

#: ../../topics/testing.txt:19
# 69611b4cc4cc44ef9535cce594b7a174
msgid "Testing a Web application is a complex task, because a Web application is made of several layers of logic -- from HTTP-level request handling, to form validation and processing, to template rendering. With Django's test-execution framework and assorted utilities, you can simulate requests, insert test data, inspect your application's output and generally verify your code is doing what it should be doing."
msgstr ""

#: ../../topics/testing.txt:26
# 158bcff28e5f472988c0d95abf10322a
msgid "The best part is, it's really easy."
msgstr ""

#: ../../topics/testing.txt:28
# ee72455418574e328e9cee0d3659f3ea
msgid "This document is split into two primary sections. First, we explain how to write tests with Django. Then, we explain how to run them."
msgstr ""

#: ../../topics/testing.txt:32
# 6a9d10ce3ab34df1b4360e100fdb90d0
msgid "Writing tests"
msgstr ""

#: ../../topics/testing.txt:34
# e5d08108dc664b47b7fad10e419f0f66
msgid "There are two primary ways to write tests with Django, corresponding to the two test frameworks that ship in the Python standard library. The two frameworks are:"
msgstr ""

#: ../../topics/testing.txt:38
# 033deae4b829497eb058da3774bf5058
msgid "**Unit tests** -- tests that are expressed as methods on a Python class that subclasses :class:`unittest.TestCase` or Django's customized :class:`TestCase`. For example::"
msgstr ""

#: ../../topics/testing.txt:50
# aae53ccfba464832ad85e234263d8601
msgid "**Doctests** -- tests that are embedded in your functions' docstrings and are written in a way that emulates a session of the Python interactive interpreter. For example::"
msgstr ""

#: ../../topics/testing.txt:64
# 33e095d816f34f53abd5ed25a775b2d9
msgid "We'll discuss choosing the appropriate test framework later, however, most experienced developers prefer unit tests. You can also use any *other* Python test framework, as we'll explain in a bit."
msgstr ""

#: ../../topics/testing.txt:69
# 118f122de5f740508db7e83de150898e
msgid "Writing unit tests"
msgstr ""

#: ../../topics/testing.txt:71
# 1494282827d64b92a61b28d3bbcbf915
msgid "Django's unit tests use a Python standard library module: :mod:`unittest`. This module defines tests in class-based approach."
msgstr ""

#: ../../topics/testing.txt:76
# 4b83d7016d9e43a890ec8d403a832145
msgid "Python 2.7 introduced some major changes to the unittest library, adding some extremely useful features. To ensure that every Django project can benefit from these new features, Django ships with a copy of unittest2_, a copy of the Python 2.7 unittest library, backported for Python 2.5 compatibility."
msgstr ""

#: ../../topics/testing.txt:82
# cc51597bf54646caa861bcd5d19f110f
msgid "To access this library, Django provides the :mod:`django.utils.unittest` module alias. If you are using Python 2.7, or you have installed unittest2 locally, Django will map the alias to the installed version of the unittest library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

#: ../../topics/testing.txt:88
# 7eecd2957738486b93dbcc7797a32b16
msgid "To use this alias, simply use::"
msgstr ""

#: ../../topics/testing.txt:92
# c1db668031ce414e873eb1b732c84329
msgid "wherever you would have historically used::"
msgstr ""

#: ../../topics/testing.txt:96
# ea4430f2f876478f8f8c60d2499493a3
msgid "If you want to continue to use the base unittest library, you can -- you just won't get any of the nice new unittest2 features."
msgstr ""

#: ../../topics/testing.txt:101
# a7e5687ee4564ca7aa7b2bb43d47ddd6
msgid "For a given Django application, the test runner looks for unit tests in two places:"
msgstr ""

#: ../../topics/testing.txt:104
# acf04462f8fa42119d9ce386f1caf20f
msgid "The ``models.py`` file. The test runner looks for any subclass of :class:`unittest.TestCase` in this module."
msgstr ""

#: ../../topics/testing.txt:107
# c8071b30493744b28cb7a22c7af0272c
msgid "A file called ``tests.py`` in the application directory -- i.e., the directory that holds ``models.py``. Again, the test runner looks for any subclass of :class:`unittest.TestCase` in this module."
msgstr ""

#: ../../topics/testing.txt:111
# 9b68adcc11fa4ca4b76bb6d24d1ff537
msgid "Here is an example :class:`unittest.TestCase` subclass::"
msgstr ""

#: ../../topics/testing.txt:126
# 4fb7f505bdc1442fb50a3f65e2310d01
msgid "When you :ref:`run your tests <running-tests>`, the default behavior of the test utility is to find all the test cases (that is, subclasses of :class:`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build a test suite out of those test cases, and run that suite."
msgstr ""

#: ../../topics/testing.txt:131
# d097f968cd624054a0322e7b273e7a85
msgid "There is a second way to define the test suite for a module: if you define a function called ``suite()`` in either ``models.py`` or ``tests.py``, the Django test runner will use that function to construct the test suite for that module. This follows the `suggested organization`_ for unit tests. See the Python documentation for more details on how to construct a complex test suite."
msgstr ""

#: ../../topics/testing.txt:138
# d2f3ebdf94594f43b7650a36a23df528
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

#: ../../topics/testing.txt:143
# 4e2343fe6e5e47cc920a97a56cec6624
msgid "Writing doctests"
msgstr ""

#: ../../topics/testing.txt:145
# 4deeb42547354140b61d90df2d32fbe3
msgid "Doctests use Python's standard :mod:`doctest` module, which searches your docstrings for statements that resemble a session of the Python interactive interpreter. A full explanation of how :mod:`doctest` works is out of the scope of this document; read Python's official documentation for the details."
msgstr ""

#: ../../topics/testing.txt:152
# 75aa13cbc6394930a2788e338a3f2366
msgid "A good explanation of docstrings (and some guidelines for using them effectively) can be found in :pep:`257`:"
msgstr ""

#: ../../topics/testing.txt:155
# 8818ccdbdaf6496dbd954571e81748ff
msgid "A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition.  Such a docstring becomes the ``__doc__`` special attribute of that object."
msgstr ""

#: ../../topics/testing.txt:159
# 7e1aaa1bd234424ca93b4cd7ec78f4fc
msgid "For example, this function has a docstring that describes what it does::"
msgstr ""

#: ../../topics/testing.txt:165
# 443f7c55271242c8bb69260e6bcc950c
msgid "Because tests often make great documentation, putting tests directly in your docstrings is an effective way to document *and* test your code."
msgstr ""

#: ../../topics/testing.txt:168
# 9b4bae47ec954cde9aa03aedf1221425
msgid "As with unit tests, for a given Django application, the test runner looks for doctests in two places:"
msgstr ""

#: ../../topics/testing.txt:171
# cdf8c9d3ed5b478a9b3b17e54428a7d0
msgid "The ``models.py`` file. You can define module-level doctests and/or a doctest for individual models. It's common practice to put application-level doctests in the module docstring and model-level doctests in the model docstrings."
msgstr ""

#: ../../topics/testing.txt:176
# a36ede2df5c241549a79b0463c747326
msgid "A file called ``tests.py`` in the application directory -- i.e., the directory that holds ``models.py``. This file is a hook for any and all doctests you want to write that aren't necessarily related to models."
msgstr ""

#: ../../topics/testing.txt:180
# 35e1cee1f6dc4e84b7739880c325b9ad
msgid "This example doctest is equivalent to the example given in the unittest section above::"
msgstr ""

#: ../../topics/testing.txt:207
# b6b07d2608eb406db0104d7e6ba65e87
msgid "When you :ref:`run your tests <running-tests>`, the test runner will find this docstring, notice that portions of it look like an interactive Python session, and execute those lines while checking that the results match."
msgstr ""

#: ../../topics/testing.txt:211
# b88cc7eeebfe4011a48d5c15483140fc
msgid "In the case of model tests, note that the test runner takes care of creating its own test database. That is, any test that accesses a database -- by creating and saving model instances, for example -- will not affect your production database. However, the database is not refreshed between doctests, so if your doctest requires a certain state you should consider flushing the database or loading a fixture. (See the section on fixtures, below, for more on this.) Note that to use this feature, the database user Django is connecting as must have ``CREATE DATABASE`` rights."
msgstr ""

#: ../../topics/testing.txt:220
# 2aa2b0e6ca654456b25989c11c666c4e
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""

#: ../../topics/testing.txt:223
# 7a54536ba348439f8f36855c4a4600e9
msgid "Which should I use?"
msgstr ""

#: ../../topics/testing.txt:225
# c09d561b1c264114a20e1cbe032fef0c
msgid "Because Django supports both of the standard Python test frameworks, it's up to you and your tastes to decide which one to use. You can even decide to use *both*."
msgstr ""

#: ../../topics/testing.txt:229
# 8d7796cd8b374fb7bd12accdd0790f9b
msgid "For developers new to testing, however, this choice can seem confusing. Here, then, are a few key differences to help you decide which approach is right for you:"
msgstr ""

#: ../../topics/testing.txt:233
# f23cecff8408481aa20943018f28b9a5
msgid "If you've been using Python for a while, :mod:`doctest` will probably feel more \"pythonic\". It's designed to make writing tests as easy as possible, so it requires no overhead of writing classes or methods. You simply put tests in docstrings. This has the added advantage of serving as documentation (and correct documentation, at that!). However, while doctests are good for some simple example code, they are not very good if you want to produce either high quality, comprehensive tests or high quality documentation. Test failures are often difficult to debug as it can be unclear exactly why the test failed. Thus, doctests should generally be avoided and used primarily for documentation examples only."
msgstr ""

#: ../../topics/testing.txt:244
# 68f88deb26604ec385839ca2284a494d
msgid "The :mod:`unittest` framework will probably feel very familiar to developers coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll feel at home with this method if you've used JUnit or any test framework inspired by JUnit."
msgstr ""

#: ../../topics/testing.txt:249
# 81435a54ad53476d8474b595f3e330c1
msgid "If you need to write a bunch of tests that share similar code, then you'll appreciate the :mod:`unittest` framework's organization around classes and methods. This makes it easy to abstract common tasks into common methods. The framework also supports explicit setup and/or cleanup routines, which give you a high level of control over the environment in which your test cases are run."
msgstr ""

#: ../../topics/testing.txt:256
# fc1a490517114b7398641bc07d46baac
msgid "If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""

#: ../../topics/testing.txt:261
# 6537da9625c645e386c50c7ce71d7417
msgid "Running tests"
msgstr ""

#: ../../topics/testing.txt:263
# 9a1d619abc774838bfa9ae57f4eba7de
msgid "Once you've written tests, run them using the :djadmin:`test` command of your project's ``manage.py`` utility::"
msgstr ""

#: ../../topics/testing.txt:268
# d250b759742249d196f2b3b8cfd1aa51
msgid "By default, this will run every test in every application in :setting:`INSTALLED_APPS`. If you only want to run tests for a particular application, add the application name to the command line. For example, if your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and ``'myproject.animals'``, you can run the ``myproject.animals`` unit tests alone with this command::"
msgstr ""

#: ../../topics/testing.txt:277
# 1851baa0c4434d4c8586dbe2aff1abe7
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""

#: ../../topics/testing.txt:279
# e98420b999cd4aaba36dac0890b092a0
msgid "You can be even *more* specific by naming an individual test case. To run a single test case in an application (for example, the ``AnimalTestCase`` described in the \"Writing unit tests\" section), add the name of the test case to the label on the command line::"
msgstr ""

#: ../../topics/testing.txt:286
# c96394d92d8b4c12b6bb0ca28348eb08
msgid "And it gets even more granular than that! To run a *single* test method inside a test case, add the name of the test method to the label::"
msgstr ""

#: ../../topics/testing.txt:292
# 465a0111b87d4c058743868073f35ff4
msgid "You can use the same rules if you're using doctests. Django will use the test label as a path to the test method or class that you want to run. If your ``models.py`` or ``tests.py`` has a function with a doctest, or class with a class-level doctest, you can invoke that test by appending the name of the test method or class to the label::"
msgstr ""

#: ../../topics/testing.txt:300
# a9786530c0864034b0d898d99b5c5ed6
msgid "If you want to run the doctest for a specific method in a class, add the name of the method to the label::"
msgstr ""

#: ../../topics/testing.txt:305
# 0fce7b1ca43d43a0bb6e1adbb597e7d6
msgid "If you're using a ``__test__`` dictionary to specify doctests for a module, Django will use the label as a key in the ``__test__`` dictionary for defined in ``models.py`` and ``tests.py``."
msgstr ""

#: ../../topics/testing.txt:309
# f3f5d3fd2d0e4c419dc16a6861eef574
msgid "If you press ``Ctrl-C`` while the tests are running, the test runner will wait for the currently running test to complete and then exit gracefully. During a graceful exit the test runner will output details of any test failures, report on how many tests were run and how many errors and failures were encountered, and destroy any test databases as usual. Thus pressing ``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--failfast` option, notice that some tests are unexpectedly failing, and want to get details on the failures without waiting for the full test run to complete."
msgstr ""

#: ../../topics/testing.txt:318
# dbceb1d523f3422d81cdf15f9eab07a0
msgid "If you do not want to wait for the currently running test to finish, you can press ``Ctrl-C`` a second time and the test run will halt immediately, but not gracefully. No details of the tests run before the interruption will be reported, and any test databases created by the run will not be destroyed."
msgstr ""

#: ../../topics/testing.txt:325
# c32d2d79ac13432b93f7c368e4c1b852
msgid "It's a good idea to run your tests with Python warnings enabled: ``python -Wall manage.py test``. The ``-Wall`` flag tells Python to display deprecation warnings. Django, like many other Python libraries, uses these warnings to flag when features are going away. It also might flag areas in your code that aren't strictly wrong but could benefit from a better implementation."
msgstr ""

#: ../../topics/testing.txt:333
# d7b1a1c00c6645439fef95ec8c161b80
msgid "Running tests outside the test runner"
msgstr ""

#: ../../topics/testing.txt:335
# a7d8f48c7c35426eb3bc183405818f28
msgid "If you want to run tests outside of ``./manage.py test`` -- for example, from a shell prompt -- you will need to set up the test environment first. Django provides a convenience method to do this::"
msgstr ""

#: ../../topics/testing.txt:342
# 88b741e4551e442daf4607ffb8444c48
msgid "This convenience method sets up the test database, and puts other Django features into modes that allow for repeatable testing."
msgstr ""

#: ../../topics/testing.txt:345
# 3581b4fcaa45496fa2bfe9b3d0d8542a
msgid "The call to :meth:`~django.test.utils.setup_test_environment` is made automatically as part of the setup of `./manage.py test`. You only need to manually invoke this method if you're not using running your tests via Django's test runner."
msgstr ""

#: ../../topics/testing.txt:351
# 1c79b9dc581343139b7c891a489dc6d0
msgid "The test database"
msgstr ""

#: ../../topics/testing.txt:353
# 9b0023429e6e432ab47c44b0d030f7bd
msgid "Tests that require a database (namely, model tests) will not use your \"real\" (production) database. Separate, blank databases are created for the tests."
msgstr ""

#: ../../topics/testing.txt:356
# e2d20acf432146c1b840c64aab336bd9
msgid "Regardless of whether the tests pass or fail, the test databases are destroyed when all the tests have been executed."
msgstr ""

#: ../../topics/testing.txt:359
# 17cf9c6f7ee94cb1bab4cdf0f5ce003a
msgid "By default the test databases get their names by prepending ``test_`` to the value of the :setting:`NAME` settings for the databases defined in :setting:`DATABASES`. When using the SQLite database engine the tests will by default use an in-memory database (i.e., the database will be created in memory, bypassing the filesystem entirely!). If you want to use a different database name, specify :setting:`TEST_NAME` in the dictionary for any given database in :setting:`DATABASES`."
msgstr ""

#: ../../topics/testing.txt:368
# f84ee46ede6349848c2f3cc7329c63a5
msgid "Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: :setting:`ENGINE`, :setting:`USER`, :setting:`HOST`, etc. The test database is created by the user specified by :setting:`USER`, so you'll need to make sure that the given user account has sufficient privileges to create a new database on the system."
msgstr ""

#: ../../topics/testing.txt:375
# de9796af3f344ad4aa54e43a258b7766
msgid "For fine-grained control over the character encoding of your test database, use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also use the :setting:`TEST_COLLATION` option to control the particular collation used by the test database. See the :doc:`settings documentation </ref/settings>` for details of these advanced settings."
msgstr ""

#: ../../topics/testing.txt:384
# f5ed9d245d034946b3f1d19562e1e866
msgid "If your code attempts to access the database when its modules are compiled, this will occur *before* the test database is set up, with potentially unexpected results. For example, if you have a database query in module-level code and a real database exists, production data could pollute your tests. *It is a bad idea to have such import-time database queries in your code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

#: ../../topics/testing.txt:394
# 2cd42508fc13421e9964c7e368867a7f
msgid "Testing master/slave configurations"
msgstr ""

#: ../../topics/testing.txt:396
# 7d1b42c8cbcd4eac92a60c3a6942b6f6
msgid "If you're testing a multiple database configuration with master/slave replication, this strategy of creating test databases poses a problem. When the test databases are created, there won't be any replication, and as a result, data created on the master won't be seen on the slave."
msgstr ""

#: ../../topics/testing.txt:402
# 0c0894026d764b2c8568bff2d472d879
msgid "To compensate for this, Django allows you to define that a database is a *test mirror*. Consider the following (simplified) example database configuration::"
msgstr ""

#: ../../topics/testing.txt:422
# f1c47f4cea634d57b60e17c19a448cc3
msgid "In this setup, we have two database servers: ``dbmaster``, described by the database alias ``default``, and ``dbslave`` described by the alias ``slave``. As you might expect, ``dbslave`` has been configured by the database administrator as a read slave of ``dbmaster``, so in normal activity, any write to ``default`` will appear on ``slave``."
msgstr ""

#: ../../topics/testing.txt:428
# b10ba9c8092d4031bc8f3e420da60e13
msgid "If Django created two independent test databases, this would break any tests that expected replication to occur. However, the ``slave`` database has been configured as a test mirror (using the :setting:`TEST_MIRROR` setting), indicating that under testing, ``slave`` should be treated as a mirror of ``default``."
msgstr ""

#: ../../topics/testing.txt:434
# 8eb0aa64d08b4dbf86ef61399f1438fb
msgid "When the test environment is configured, a test version of ``slave`` will *not* be created. Instead the connection to ``slave`` will be redirected to point at ``default``. As a result, writes to ``default`` will appear on ``slave`` -- but because they are actually the same database, not because there is data replication between the two databases."
msgstr ""

#: ../../topics/testing.txt:444
# f29828de98ff4100bcce07529924e7c5
msgid "Controlling creation order for test databases"
msgstr ""

#: ../../topics/testing.txt:446
# 7abdd73ba92a438db207708f5bdac200
msgid "By default, Django will always create the ``default`` database first. However, no guarantees are made on the creation order of any other databases in your test setup."
msgstr ""

#: ../../topics/testing.txt:450
# 8f27f5063f4e4d939003afd967ed5596
msgid "If your database configuration requires a specific creation order, you can specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` setting. Consider the following (simplified) example database configuration::"
msgstr ""

#: ../../topics/testing.txt:477
# f2e219ec100c46c0a52f8a1a6eb6d615
msgid "Under this configuration, the ``diamonds`` database will be created first, as it is the only database alias without dependencies. The ``default`` and ``clubs`` alias will be created next (although the order of creation of this pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

#: ../../topics/testing.txt:482
# 60480d67ee95462bb8f43dfa85f77572
msgid "If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

#: ../../topics/testing.txt:487
# 07f1e38b62b043c9b5eeaf60e4a88002
msgid "Order in which tests are executed"
msgstr ""

#: ../../topics/testing.txt:489
# 7c53399c61bd4b778f26507129087d9c
msgid "In order to guarantee that all ``TestCase`` code starts with a clean database, the Django test runner reorders tests in the following way:"
msgstr ""

#: ../../topics/testing.txt:492
# e66d94dc38724892b9ba2e12d2a1921e
msgid "First, all unittests (including :class:`unittest.TestCase`, :class:`~django.test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django.test.TransactionTestCase`) are run with no particular ordering guaranteed nor enforced among them."
msgstr ""

#: ../../topics/testing.txt:497
# 501175c171af4134b39aba428c9c22df
msgid "Then any other tests (e.g. doctests) that may alter the database without restoring it to its original state are run."
msgstr ""

#: ../../topics/testing.txt:507
# 0b85db5c412849e88d1907d042835fd6
msgid "The new ordering of tests may reveal unexpected dependencies on test case ordering. This is the case with doctests that relied on state left in the database by a given :class:`~django.test.TransactionTestCase` test, they must be updated to be able to run independently."
msgstr ""

#: ../../topics/testing.txt:513
# 0016ee93496940178fff19de19aaec32
msgid "Other test conditions"
msgstr ""

#: ../../topics/testing.txt:515
# d3cee9ff41da47458c0e4fcc7d0d858c
msgid "Regardless of the value of the :setting:`DEBUG` setting in your configuration file, all Django tests run with :setting:`DEBUG`\\=False. This is to ensure that the observed output of your code matches what will be seen in a production setting."
msgstr ""

#: ../../topics/testing.txt:520
# 4cefbed90f41432582c0db089ddf32b8
msgid "Caches are not cleared after each test, and running \"manage.py test fooapp\" can insert data from the tests into the cache of a live system if you run your tests in production because, unlike databases, a separate \"test cache\" is not used. This behavior `may change`_ in the future."
msgstr ""

#: ../../topics/testing.txt:528
# 67a0564bfa464da18761567a04ec0b20
msgid "Understanding the test output"
msgstr ""

#: ../../topics/testing.txt:530
# d5e36f943867465d94507e4f34839134
msgid "When you run your tests, you'll see a number of messages as the test runner prepares itself. You can control the level of detail of these messages with the ``verbosity`` option on the command line::"
msgstr ""

#: ../../topics/testing.txt:540
# 144a9291a00144d69cd0682da3475183
msgid "This tells you that the test runner is creating a test database, as described in the previous section."
msgstr ""

#: ../../topics/testing.txt:543
# adaa9d86599d40a194a2712e41646e27
msgid "Once the test database has been created, Django will run your tests. If everything goes well, you'll see something like this::"
msgstr ""

#: ../../topics/testing.txt:551
# b24ae1ad4f7247b287322feb81283f3b
msgid "If there are test failures, however, you'll see full details about which tests failed::"
msgstr ""

#: ../../topics/testing.txt:577
# 76814a7eb2944f7ca86212e81dedf49c
msgid "A full explanation of this error output is beyond the scope of this document, but it's pretty intuitive. You can consult the documentation of Python's :mod:`unittest` library for details."
msgstr ""

#: ../../topics/testing.txt:581
# 791a7418336c49079bd866bee066cc57
msgid "Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you're using the test-runner script in a shell script and need to test for success or failure at that level."
msgstr ""

#: ../../topics/testing.txt:587
# 25b21c1c7df34c58b8e80823af6c3fa5
msgid "Speeding up the tests"
msgstr ""

#: ../../topics/testing.txt:589
# 9ff232d3e93d41258a047c19cb0ee14d
msgid "In recent versions of Django, the default password hasher is rather slow by design. If during your tests you are authenticating many users, you may want to use a custom settings file and set the :setting:`PASSWORD_HASHERS` setting to a faster hashing algorithm::"
msgstr ""

#: ../../topics/testing.txt:598
# 4e02ae6792464ff8b0fc1ae6a70a27f6
msgid "Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing algorithm used in fixtures, if any."
msgstr ""

#: ../../topics/testing.txt:604
# d1e2d1e6c2d141078f867ce4158b3391
msgid "Integration with coverage.py"
msgstr ""

#: ../../topics/testing.txt:606
# 0777b1143914403e89252ea367c2721f
msgid "Code coverage describes how much source code has been tested. It shows which parts of your code are being exercised by tests and which are not. It's an important part of testing applications, so it's strongly recommended to check the coverage of your tests."
msgstr ""

#: ../../topics/testing.txt:611
# d8f91f51c27b458b88c981a55e53469e
msgid "Django can be easily integrated with `coverage.py`_, a tool for measuring code coverage of Python programs. First, `install coverage.py`_. Next, run the following from your project folder containing ``manage.py``::"
msgstr ""

#: ../../topics/testing.txt:617
# 97c8136cd6a54d4e8386421192e0bfc2
msgid "This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command::"
msgstr ""

#: ../../topics/testing.txt:622
# 6b54703563b642cda9e206d0dea64a57
msgid "Note that some Django code was executed while running tests, but it is not listed here because of the ``source`` flag passed to the previous command."
msgstr ""

#: ../../topics/testing.txt:625
# 036e15347b71411da8ae3bdcac4e2cc4
msgid "For more options like annotated HTML listings detailing missed lines, see the `coverage.py`_ docs."
msgstr ""

#: ../../topics/testing.txt:632
# b62a527b4c084daa8ffb98cb7381e8f4
msgid "Testing tools"
msgstr ""

#: ../../topics/testing.txt:634
# d9214dd763d948e28a14ad74251cf64b
msgid "Django provides a small set of tools that come in handy when writing tests."
msgstr ""

#: ../../topics/testing.txt:639
# 9dfdb61fde62429dbf4e942af1ecb001
msgid "The test client"
msgstr ""

#: ../../topics/testing.txt:644
# da9fc7f51edc4eeab8e08891df6ce453
msgid "The test client is a Python class that acts as a dummy Web browser, allowing you to test your views and interact with your Django-powered application programmatically."
msgstr ""

#: ../../topics/testing.txt:648
# 9d15fec9dbc94a8d96531bb78623aab5
msgid "Some of the things you can do with the test client are:"
msgstr ""

#: ../../topics/testing.txt:650
# 41eb6f21739b42e19bb021a31b14bde7
msgid "Simulate GET and POST requests on a URL and observe the response -- everything from low-level HTTP (result headers and status codes) to page content."
msgstr ""

#: ../../topics/testing.txt:654
# 591b959223ba404f9ff58b9072c66a5b
msgid "Test that the correct view is executed for a given URL."
msgstr ""

#: ../../topics/testing.txt:656
# 7597b700582b410492a03b3ebde8afcc
msgid "Test that a given request is rendered by a given Django template, with a template context that contains certain values."
msgstr ""

#: ../../topics/testing.txt:659
# 01780694e0914def8dd535dbe57f9571
msgid "Note that the test client is not intended to be a replacement for Selenium_ or other \"in-browser\" frameworks. Django's test client has a different focus. In short:"
msgstr ""

#: ../../topics/testing.txt:663
# b889ce144f1441c48c34e27b301bf02c
msgid "Use Django's test client to establish that the correct view is being called and that the view is collecting the correct context data."
msgstr ""

#: ../../topics/testing.txt:666
# 075166a084134b84af4315aaff9b1f96
msgid "Use in-browser frameworks like Selenium_ to test *rendered* HTML and the *behavior* of Web pages, namely JavaScript functionality. Django also provides special support for those frameworks; see the section on :class:`~django.test.LiveServerTestCase` for more details."
msgstr ""

#: ../../topics/testing.txt:671
# ac5a97fe90e347158c7d2f373e334360
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

#: ../../topics/testing.txt:674
# ed9701ec3a2d4ee69cd6f20bce46f7e4
msgid "Overview and a quick example"
msgstr ""

#: ../../topics/testing.txt:676
# 88fa0fceddcb4e3a9186b7df22411c7a
msgid "To use the test client, instantiate ``django.test.client.Client`` and retrieve Web pages::"
msgstr ""

#: ../../topics/testing.txt:688
# f7bcdea2a65d4811b28171b72d281001
msgid "As this example suggests, you can instantiate ``Client`` from within a session of the Python interactive interpreter."
msgstr ""

#: ../../topics/testing.txt:691
# 77d87dbe27a24874a0d4f07756cb0b58
msgid "Note a few important things about how the test client works:"
msgstr ""

#: ../../topics/testing.txt:693
# abd1318c78b7481c8958f293e7c28903
msgid "The test client does *not* require the Web server to be running. In fact, it will run just fine with no Web server running at all! That's because it avoids the overhead of HTTP and deals directly with the Django framework. This helps make the unit tests run quickly."
msgstr ""

#: ../../topics/testing.txt:698
# 99451d21c54a44a08adac6f2264f69fa
msgid "When retrieving pages, remember to specify the *path* of the URL, not the whole domain. For example, this is correct::"
msgstr ""

#: ../../topics/testing.txt:703
# a42b27f73fc44a5e807b0bf7b5d10140
msgid "This is incorrect::"
msgstr ""

#: ../../topics/testing.txt:707
# a1eae23f6b0a49d3a5af592a4148b590
msgid "The test client is not capable of retrieving Web pages that are not powered by your Django project. If you need to retrieve other Web pages, use a Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

#: ../../topics/testing.txt:712
# aef0a11f548142bda86bc4242836a3bc
msgid "To resolve URLs, the test client uses whatever URLconf is pointed-to by your :setting:`ROOT_URLCONF` setting."
msgstr ""

#: ../../topics/testing.txt:715
# 08653eaabe774d6898fb32646845ab6f
msgid "Although the above example would work in the Python interactive interpreter, some of the test client's functionality, notably the template-related functionality, is only available *while tests are running*."
msgstr ""

#: ../../topics/testing.txt:720
# f9c4981a759a403ebe5999aa198838b9
msgid "The reason for this is that Django's test runner performs a bit of black magic in order to determine which template was loaded by a given view. This black magic (essentially a patching of Django's template system in memory) only happens during test running."
msgstr ""

#: ../../topics/testing.txt:725
# bf14b94d34d049848801147c1bb586fd
msgid "By default, the test client will disable any CSRF checks performed by your site."
msgstr ""

#: ../../topics/testing.txt:728
# 25655b79c040481e9328d15bd076df91
msgid "If, for some reason, you *want* the test client to perform CSRF checks, you can create an instance of the test client that enforces CSRF checks. To do this, pass in the ``enforce_csrf_checks`` argument when you construct your client::"
msgstr ""

#: ../../topics/testing.txt:738
# 3f6806a92353416cbcbedac118aadffd
msgid "Making requests"
msgstr ""

#: ../../topics/testing.txt:740
# 653d8e5de7604a439ae9f91d1e03ef70
msgid "Use the ``django.test.client.Client`` class to make requests."
msgstr ""

#: ../../topics/testing.txt:744
# cf66c577fa7e4d8d80a50b066f71712f
msgid "It requires no arguments at time of construction. However, you can use keywords arguments to specify some default headers. For example, this will send a ``User-Agent`` HTTP header in each request::"
msgstr ""

#: ../../topics/testing.txt:750
# 37623c49f7e84512a326415b4e617b8f
msgid "The values from the ``extra`` keywords arguments passed to :meth:`~django.test.client.Client.get()`, :meth:`~django.test.client.Client.post()`, etc. have precedence over the defaults passed to the class constructor."
msgstr ""

#: ../../topics/testing.txt:755
# 5d08ac7c83464c618036bb23956822d2
msgid "The ``enforce_csrf_checks`` argument can be used to test CSRF protection (see above)."
msgstr ""

#: ../../topics/testing.txt:758
# 6fdaad2c9f4342758b48963492605fde
msgid "Once you have a ``Client`` instance, you can call any of the following methods:"
msgstr ""

#: ../../topics/testing.txt:764
# 684b1e25186e4f9cb8a633c6b3ca9f85
msgid "Makes a GET request on the provided ``path`` and returns a ``Response`` object, which is documented below."
msgstr ""

#: ../../topics/testing.txt:767
# d1be31edfee2461d9accab35170b8b87
msgid "The key-value pairs in the ``data`` dictionary are used to create a GET data payload. For example::"
msgstr ""

#: ../../topics/testing.txt:773
# 9d36aebe15dd4e89be9d6598510dd45d
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

#: ../../topics/testing.txt:777
# fa4b623f9dda4ceaaa9defe8cbc70f20
msgid "The ``extra`` keyword arguments parameter can be used to specify headers to be sent in the request. For example::"
msgstr ""

#: ../../topics/testing.txt:784
# 9853efdfeed44541a1acf0e9b9865b3a
msgid "...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, which is a good way to test code paths that use the :meth:`django.http.HttpRequest.is_ajax()` method."
msgstr ""

#: ../../topics/testing.txt:790
# dbf66671da5f4f42ab82097821dfe3b2
msgid "The headers sent via ``**extra`` should follow CGI_ specification. For example, emulating a different \"Host\" header as sent in the HTTP request from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

#: ../../topics/testing.txt:797
# 20ae85d838aa48db8b92f34e7642ee71
msgid "If you already have the GET arguments in URL-encoded form, you can use that encoding instead of using the data argument. For example, the previous GET request could also be posed as::"
msgstr ""

#: ../../topics/testing.txt:804
# cf57fbdeb796481eaa9313097f99e8b3
msgid "If you provide a URL with both an encoded GET data and a data argument, the data argument will take precedence."
msgstr ""

#: ../../topics/testing.txt:807
#: ../../topics/testing.txt:888
# ae71a60fdfea4bd6817c9fa1d24fd659
# 5f1e6136fd2a49848fc683e8840da128
msgid "If you set ``follow`` to ``True`` the client will follow any redirects and a ``redirect_chain`` attribute will be set in the response object containing tuples of the intermediate urls and status codes."
msgstr ""

#: ../../topics/testing.txt:811
# 5e4afae402b444b29c5deab9a31c3acf
msgid "If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that redirected to ``/final/``, this is what you'd see::"
msgstr ""

#: ../../topics/testing.txt:820
# f14119b713694d4fb5b6d478db0579ee
msgid "Makes a POST request on the provided ``path`` and returns a ``Response`` object, which is documented below."
msgstr ""

#: ../../topics/testing.txt:823
# 93d8fa55b9504948828648424687e479
msgid "The key-value pairs in the ``data`` dictionary are used to submit POST data. For example::"
msgstr ""

#: ../../topics/testing.txt:829
# c652dd62b7944863804787440c7b3df8
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

#: ../../topics/testing.txt:833
# 19358a7204a6465ab3e1a1c95dca271c
msgid "...with this POST data::"
msgstr ""

#: ../../topics/testing.txt:837
# de20239cfe16420c8003fc93ef00bdee
msgid "If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML payload), the contents of ``data`` will be sent as-is in the POST request, using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

#: ../../topics/testing.txt:841
# 6ba306108c4d4dbdbef73d5a05666550
msgid "If you don't provide a value for ``content_type``, the values in ``data`` will be transmitted with a content type of :mimetype:`multipart/form-data`. In this case, the key-value pairs in ``data`` will be encoded as a multipart message and used to create the POST data payload."
msgstr ""

#: ../../topics/testing.txt:847
# 79d07e84a5224923b59fcfa2f7a83cf1
msgid "To submit multiple values for a given key -- for example, to specify the selections for a ``<select multiple>`` -- provide the values as a list or tuple for the required key. For example, this value of ``data`` would submit three selected values for the field named ``choices``::"
msgstr ""

#: ../../topics/testing.txt:854
# 780bde2c6745445b8eac68c368ff06da
msgid "Submitting files is a special case. To POST a file, you need only provide the file field name as a key, and a file handle to the file you wish to upload as a value. For example::"
msgstr ""

#: ../../topics/testing.txt:862
# 9b8dacb562134c6c8cf8c9583f661a6e
msgid "(The name ``attachment`` here is not relevant; use whatever name your file-processing code expects.)"
msgstr ""

#: ../../topics/testing.txt:865
# 4673abc2481e4048a0caa3add374255d
msgid "Note that if you wish to use the same file handle for multiple ``post()`` calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to ``post()``, as demonstrated above."
msgstr ""

#: ../../topics/testing.txt:871
# be226b5181a64a1da5a19b6b11fa71f3
msgid "You should also ensure that the file is opened in a way that allows the data to be read. If your file contains binary data such as an image, this means you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

#: ../../topics/testing.txt:876
# 2a43d55241cd40d29f6cb85c75f262a9
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

#: ../../topics/testing.txt:878
# aff84ef829474af8aa3e2e7a6f19c7b3
msgid "If the URL you request with a POST contains encoded parameters, these parameters will be made available in the request.GET data. For example, if you were to make the request::"
msgstr ""

#: ../../topics/testing.txt:884
# ad40c447cf324cf4b19fb5c0ac0199df
msgid "... the view handling this request could interrogate request.POST to retrieve the username and password, and could interrogate request.GET to determine if the user was a visitor."
msgstr ""

#: ../../topics/testing.txt:894
# 63a1ba46112f4704b1d0816a32d53ff1
msgid "Makes a HEAD request on the provided ``path`` and returns a ``Response`` object. This method works just like :meth:`Client.get`, including the ``follow`` and ``extra`` arguments, except it does not return a message body."
msgstr ""

#: ../../topics/testing.txt:901
# 28a961c3ac9048a5a5fb93d3e06a2dcf
msgid "Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing.txt:904
#: ../../topics/testing.txt:919
#: ../../topics/testing.txt:934
# d04c9e935d334abc9752766dfef4bdc8
# 013c1e267bcf47b1bd126d193c2008c2
# ebab5a4bdcc04083af0a5f8e82701ec9
msgid "When ``data`` is provided, it is used as the request body, and a ``Content-Type`` header is set to ``content_type``."
msgstr ""

#: ../../topics/testing.txt:911
#: ../../topics/testing.txt:926
#: ../../topics/testing.txt:941
# 8dcaa9f76f8d4d25b08786ad7f39b8d6
# a908399faad64f918b44aeb8cdfeff82
# b9da239a96a4438896368ebd97784769
msgid "The ``follow`` and ``extra`` arguments act the same as for :meth:`Client.get`."
msgstr ""

#: ../../topics/testing.txt:916
# 53ec39fccc9045c8a71fa1ad8c8683ec
msgid "Makes a PUT request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing.txt:931
# 3bf36533f3c840a8bb5dc2aaf3a3260f
msgid "Makes an DELETE request on the provided ``path`` and returns a ``Response`` object. Useful for testing RESTful interfaces."
msgstr ""

#: ../../topics/testing.txt:947
# c6a773af1faa4253b1f76d582b2e4f90
msgid "If your site uses Django's :doc:`authentication system</topics/auth>` and you deal with logging in users, you can use the test client's ``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

#: ../../topics/testing.txt:952
# d1fef101e43b4d7f80dd84ab5008e837
msgid "After you call this method, the test client will have all the cookies and session data required to pass any login-based tests that may form part of a view."
msgstr ""

#: ../../topics/testing.txt:956
# 497f931062a041e6a04c43782729e99c
msgid "The format of the ``credentials`` argument depends on which :ref:`authentication backend <authentication-backends>` you're using (which is configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're using the standard authentication backend provided by Django (``ModelBackend``), ``credentials`` should be the user's username and password, provided as keyword arguments::"
msgstr ""

#: ../../topics/testing.txt:968
# 1b4b05a7165d40139fb19a1e8a6c9b22
msgid "If you're using a different authentication backend, this method may require different credentials. It requires whichever credentials are required by your backend's ``authenticate()`` method."
msgstr ""

#: ../../topics/testing.txt:972
# cb5e54a0dc774244a52254e153e107d2
msgid "``login()`` returns ``True`` if it the credentials were accepted and login was successful."
msgstr ""

#: ../../topics/testing.txt:975
# 37e08c01f7db42539e1c88bd762ef09a
msgid "Finally, you'll need to remember to create user accounts before you can use this method. As we explained above, the test runner is executed using a test database, which contains no users by default. As a result, user accounts that are valid on your production site will not work under test conditions. You'll need to create users as part of the test suite -- either manually (using the Django model API) or with a test fixture. Remember that if you want your test user to have a password, you can't set the user's password by setting the password attribute directly -- you must use the :meth:`~django.contrib.auth.models.User.set_password()` function to store a correctly hashed password. Alternatively, you can use the :meth:`~django.contrib.auth.models.UserManager.create_user` helper method to create a new user with a correctly hashed password."
msgstr ""

#: ../../topics/testing.txt:991
# f5733e312bbe40dc9b01d247a3ff3b96
msgid "If your site uses Django's :doc:`authentication system</topics/auth>`, the ``logout()`` method can be used to simulate the effect of a user logging out of your site."
msgstr ""

#: ../../topics/testing.txt:995
# f08bbe3dc72d4e7eb7293d20079dc781
msgid "After you call this method, the test client will have all the cookies and session data cleared to defaults. Subsequent requests will appear to come from an AnonymousUser."
msgstr ""

#: ../../topics/testing.txt:1000
# 6f87f81fea5040948f06b6a8c6b08678
msgid "Testing responses"
msgstr ""

#: ../../topics/testing.txt:1002
# fdce670f9f5d4e578c9be979839aba45
msgid "The ``get()`` and ``post()`` methods both return a ``Response`` object. This ``Response`` object is *not* the same as the ``HttpResponse`` object returned Django views; the test response object has some additional data useful for test code to verify."
msgstr ""

#: ../../topics/testing.txt:1007
# 592c7206b6554c11af4901958a47ca53
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

#: ../../topics/testing.txt:1013
# 5f7e4839e03f49dd881fc2f5303fdc53
msgid "The test client that was used to make the request that resulted in the response."
msgstr ""

#: ../../topics/testing.txt:1018
# a6fe5b302e904733acf3557ef2cc890d
msgid "The body of the response, as a string. This is the final page content as rendered by the view, or any error message."
msgstr ""

#: ../../topics/testing.txt:1023
# d3706399cade4c859835b1c050476b89
msgid "The template ``Context`` instance that was used to render the template that produced the response content."
msgstr ""

#: ../../topics/testing.txt:1026
# a259f07e059846e396e78720b5f82d82
msgid "If the rendered page used multiple templates, then ``context`` will be a list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

#: ../../topics/testing.txt:1029
# fbef314d4b3d4283a02666749b5ed53f
msgid "Regardless of the number of templates used during rendering, you can retrieve context values using the ``[]`` operator. For example, the context variable ``name`` could be retrieved using::"
msgstr ""

#: ../../topics/testing.txt:1039
# a881caafda554934b272fbecbbae1beb
msgid "The request data that stimulated the response."
msgstr ""

#: ../../topics/testing.txt:1043
# fd7fff9d8c3d42629de76fa05581156f
msgid "The HTTP status of the response, as an integer. See :rfc:`2616#section-10` for a full list of HTTP status codes."
msgstr ""

#: ../../topics/testing.txt:1048
# 941342bc779043dd9066806fa9a99942
msgid "A list of ``Template`` instances used to render the final content, in the order they were rendered. For each template in the list, use ``template.name`` to get the template's file name, if the template was loaded from a file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

#: ../../topics/testing.txt:1054
# ea020c4353c24e7196cf48bb29b9a834
msgid "You can also use dictionary syntax on the response object to query the value of any settings in the HTTP headers. For example, you could determine the content type of a response using ``response['Content-Type']``."
msgstr ""

#: ../../topics/testing.txt:1061
# 0fbd828f1e1c45009f84bfc59b410971
msgid "If you point the test client at a view that raises an exception, that exception will be visible in the test case. You can then use a standard ``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test for exceptions."
msgstr ""

#: ../../topics/testing.txt:1065
# 1f32580ed54b4cc9b4fcb9e6220262b5
msgid "The only exceptions that are not visible to the test client are ``Http404``, ``PermissionDenied`` and ``SystemExit``. Django catches these exceptions internally and converts them into the appropriate HTTP response codes. In these cases, you can check ``response.status_code`` in your test."
msgstr ""

#: ../../topics/testing.txt:1071
# 691adbc13720466e866c086c92180ad6
msgid "Persistent state"
msgstr ""

#: ../../topics/testing.txt:1073
# b3d0e3e8e8a04d2080ad4358c68ab720
msgid "The test client is stateful. If a response returns a cookie, then that cookie will be stored in the test client and sent with all subsequent ``get()`` and ``post()`` requests."
msgstr ""

#: ../../topics/testing.txt:1077
# f2ec44eeae814e62b5281dcef9998b58
msgid "Expiration policies for these cookies are not followed. If you want a cookie to expire, either delete it manually or create a new ``Client`` instance (which will effectively delete all cookies)."
msgstr ""

#: ../../topics/testing.txt:1081
# f2be8c50dc8f4cab8f2e413117ea30a5
msgid "A test client has two attributes that store persistent state information. You can access these properties as part of a test condition."
msgstr ""

#: ../../topics/testing.txt:1086
# e35556612a7d493aa3aaa74a1bb16100
msgid "A Python :class:`~Cookie.SimpleCookie` object, containing the current values of all the client cookies. See the documentation of the :mod:`Cookie` module for more."
msgstr ""

#: ../../topics/testing.txt:1092
# 62486ea2d9784937983b0044aaf75f12
msgid "A dictionary-like object containing session information. See the :doc:`session documentation</topics/http/sessions>` for full details."
msgstr ""

#: ../../topics/testing.txt:1095
# 2006a07127ba42c4b633e43c19f0863a
msgid "To modify the session and then save it, it must be stored in a variable first (because a new ``SessionStore`` is created every time this property is accessed)::"
msgstr ""

#: ../../topics/testing.txt:1107
# 5aeb07fa9cd24198970184d616bf690a
msgid "The following is a simple unit test using the test client::"
msgstr ""

#: ../../topics/testing.txt:1128
# 8e52f7bf484c49548137a7544a90355f
msgid "The request factory"
msgstr ""

#: ../../topics/testing.txt:1132
# a126c92ea42f40f080619b8c71935d64
msgid "The :class:`~django.test.client.RequestFactory` shares the same API as the test client. However, instead of behaving like a browser, the RequestFactory provides a way to generate a request instance that can be used as the first argument to any view. This means you can test a view function the same way as you would test any other function -- as a black box, with exactly known inputs, testing for specific outputs."
msgstr ""

#: ../../topics/testing.txt:1139
# fffa0d2c5ba74c82b2dcd662c8f8588c
msgid "The API for the :class:`~django.test.client.RequestFactory` is a slightly restricted subset of the test client API:"
msgstr ""

#: ../../topics/testing.txt:1142
# 72175da7005f4618ba9fa45effd98d6c
msgid "It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client.post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client.head()` and :meth:`~Client.options()`."
msgstr ""

#: ../../topics/testing.txt:1147
# 251d5148be1a48d0ab41907ee5c9d50d
msgid "These methods accept all the same arguments *except* for ``follows``. Since this is just a factory for producing requests, it's up to you to handle the response."
msgstr ""

#: ../../topics/testing.txt:1151
# 9aa40e3530754e8e8f91edc5f0a169cf
msgid "It does not support middleware. Session and authentication attributes must be supplied by the test itself if required for the view to function properly."
msgstr ""

#: ../../topics/testing.txt:1158
# f4b9e9cbe9d34d64b3cfba65aafb62a6
msgid "The following is a simple unit test using the request factory::"
msgstr ""

#: ../../topics/testing.txt:1177
# f20cd6ac86b4445698b52c5636fa5962
msgid "Test cases"
msgstr ""

#: ../../topics/testing.txt:1180
# 4c2ada44124642f38430b7dfee3609f7
msgid "Provided test case classes"
msgstr ""

#: ../../topics/testing.txt:1184
# 5637c46d98564f5cbbbe3ffe1a11b279
msgid "Normal Python unit test classes extend a base class of :class:`unittest.TestCase`. Django provides a few extensions of this base class:"
msgstr ""

#: ../../topics/testing.txt:1195
# 1082cca7455c4e9f87d28f985afb81d7
msgid "TestCase"
msgstr ""

#: ../../topics/testing.txt:1199
# 882ca18011524338add632e75803cc1b
msgid "This class provides some additional capabilities that can be useful for testing Web sites."
msgstr ""

#: ../../topics/testing.txt:1202
# 29ed1c1dc1bd413d8d9ba3c3bd21d5b1
msgid "Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` is easy: Just change the base class of your test from `'unittest.TestCase'` to `'django.test.TestCase'`. All of the standard Python unit test functionality will continue to be available, but it will be augmented with some useful additions, including:"
msgstr ""

#: ../../topics/testing.txt:1208
# fee8dca03aa148ce8de2316a5e545b74
msgid "Automatic loading of fixtures."
msgstr ""

#: ../../topics/testing.txt:1210
# 94867e8719034a579768537904a14e11
msgid "Wraps each test in a transaction."
msgstr ""

#: ../../topics/testing.txt:1212
# 50cde960e3e743fb95694cd6bc428ebc
msgid "Creates a TestClient instance."
msgstr ""

#: ../../topics/testing.txt:1214
# 86334e13b93e40448ce7efe5d9e41bf3
msgid "Django-specific assertions for testing for things like redirection and form errors."
msgstr ""

#: ../../topics/testing.txt:1221
# 02a3ad985e9f4b2ab1dfab680c538c5d
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../topics/testing.txt:1224
# 60f260e35ca546c19c2c266b76685d34
msgid "TransactionTestCase"
msgstr ""

#: ../../topics/testing.txt:1228
# d8ef14325143473e8102891a55a05c2b
msgid "Django ``TestCase`` classes make use of database transaction facilities, if available, to speed up the process of resetting the database to a known state at the beginning of each test. A consequence of this, however, is that the effects of transaction commit and rollback cannot be tested by a Django ``TestCase`` class. If your test requires testing of such transactional behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

#: ../../topics/testing.txt:1235
# bc16fa16e5d74c589479b6ed209fa885
msgid "``TransactionTestCase`` and ``TestCase`` are identical except for the manner in which the database is reset to a known state and the ability for test code to test the effects of commit and rollback:"
msgstr ""

#: ../../topics/testing.txt:1239
# 5d89aa37730b467a9346f035673295c4
msgid "A ``TransactionTestCase`` resets the database after the test runs by truncating all tables. A ``TransactionTestCase`` may call commit and rollback and observe the effects of these calls on the database."
msgstr ""

#: ../../topics/testing.txt:1243
# f6143b3176314a3dad33561521b38f75
msgid "A ``TestCase``, on the other hand, does not truncate tables after a test. Instead, it encloses the test code in a database transaction that is rolled back at the end of the test.  It also prevents the code under test from issuing any commit or rollback operations on the database, to ensure that the rollback at the end of the test restores the database to its initial state."
msgstr ""

#: ../../topics/testing.txt:1249
# f9d2972b18d64ee69881b2de76038757
msgid "When running on a database that does not support rollback (e.g. MySQL with the MyISAM storage engine), ``TestCase`` falls back to initializing the database by truncating tables and reloading initial data."
msgstr ""

#: ../../topics/testing.txt:1257
# 53da571634b94e8992cc5ce42e7184fe
msgid "Prior to 1.5, ``TransactionTestCase`` flushed the database tables *before* each test. In Django 1.5, this is instead done *after* the test has been run."
msgstr ""

#: ../../topics/testing.txt:1260
# ec00aa1aac7a4cb7a125d44fc02d2b69
msgid "When the flush took place before the test, it was guaranteed that primary key values started at one in :class:`~django.test.TransactionTestCase` tests."
msgstr ""

#: ../../topics/testing.txt:1264
# a0b8665adcbd417680605deadd4c33de
msgid "Tests should not depend on this behaviour, but for legacy tests that do, the :attr:`~TransactionTestCase.reset_sequences` attribute can be used until the test has been properly updated."
msgstr ""

#: ../../topics/testing.txt:1272
# 8b39c4e609a8419a9898e2a9db2d2fb4
msgid "``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

#: ../../topics/testing.txt:1278
# 37f26f2c68274dc5b5c29b6d7c1a78cb
msgid "Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make sure sequences are always reset before the test run::"
msgstr ""

#: ../../topics/testing.txt:1289
# 1d31b9fea26d48998ac184cb49f8f839
msgid "Unless you are explicitly testing primary keys sequence numbers, it is recommended that you do not hard code primary key values in tests."
msgstr ""

#: ../../topics/testing.txt:1292
# fa79c81437f14bd0b11b04d92f942f4d
msgid "Using ``reset_sequences = True`` will slow down the test, since the primary key reset is an relatively expensive database operation."
msgstr ""

#: ../../topics/testing.txt:1296
# 3d6eeac3a75a43e0b5a32fa6661027a6
msgid "SimpleTestCase"
msgstr ""

#: ../../topics/testing.txt:1302
# 637adfe711aa4ec6bbf9e48b88942b3d
msgid "A very thin subclass of :class:`unittest.TestCase`, it extends it with some basic functionality like:"
msgstr ""

#: ../../topics/testing.txt:1305
# 9187d855483743c4a6d57c66bd52db98
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

#: ../../topics/testing.txt:1306
# ab1bebda3cc844cbb00345c0455fda44
msgid "Checking that a callable :meth:`raises a certain exception <SimpleTestCase.assertRaisesMessage>`."
msgstr ""

#: ../../topics/testing.txt:1307
# 6af75e52b92f47b7af2d88bafd0ab758
msgid ":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

#: ../../topics/testing.txt:1308
# a2fd76af041b43ddace252e00bd6c083
msgid "Testing server :ref:`HTML responses for the presence/lack of a given fragment <assertions>`."
msgstr ""

#: ../../topics/testing.txt:1309
# 633a109fbd4343c4a3acd75fac69f356
msgid "The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

#: ../../topics/testing.txt:1311
# e91150c93d38458b81bb683155db7071
msgid "If you need any of the other more complex and heavyweight Django-specific features like:"
msgstr ""

#: ../../topics/testing.txt:1314
# b36585e3fbdb47a6952281a77b92b5bc
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

#: ../../topics/testing.txt:1315
# 5311a78f2e9d4524982f8d5884b3f0f3
msgid "Testing or using the ORM."
msgstr ""

#: ../../topics/testing.txt:1316
# 006c74fa7ca044878d3d220939e62f9e
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

#: ../../topics/testing.txt:1317
# 4824fbe443bd4debae74501ba139db74
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

#: ../../topics/testing.txt:1318
# 5779908899fe42fd914268d0ec7fa302
msgid "Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

#: ../../topics/testing.txt:1319
# 1b61c7cd215b45f2be4dfd6c8c938dc4
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

#: ../../topics/testing.txt:1321
# 1d35651f312547f0bbaf9dbe7389febb
msgid "then you should use :class:`~django.test.TransactionTestCase` or :class:`~django.test.TestCase` instead."
msgstr ""

#: ../../topics/testing.txt:1324
# 55f4a72b47ee479ea36da9d03e16e5c0
msgid "``SimpleTestCase`` inherits from :class:`django.utils.unittest.TestCase`."
msgstr ""

#: ../../topics/testing.txt:1327
# 9ce5dfdcb0ec45a1aca869f8536ac9fe
msgid "Default test client"
msgstr ""

#: ../../topics/testing.txt:1331
# 431eead723f745b6a62a0fa19c182bbb
msgid "Every test case in a ``django.test.TestCase`` instance has access to an instance of a Django test client. This client can be accessed as ``self.client``. This client is recreated for each test, so you don't have to worry about state (such as cookies) carrying over from one test to another."
msgstr ""

#: ../../topics/testing.txt:1336
# 8d17b2f99a904086aa0a239f327fc8bc
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

#: ../../topics/testing.txt:1352
# 6ef98c2592a8447793925c4c7974f4ed
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

#: ../../topics/testing.txt:1366
# 144647cf6f8d496a813216d35f4a5abd
msgid "Customizing the test client"
msgstr ""

#: ../../topics/testing.txt:1370
# 48a4010831c44460b2885790da31d41d
msgid "If you want to use a different ``Client`` class (for example, a subclass with customized behavior), use the :attr:`~TestCase.client_class` class attribute::"
msgstr ""

#: ../../topics/testing.txt:1389
# 7ad3293713ab4dbc85f218ca584db2ef
msgid "Fixture loading"
msgstr ""

#: ../../topics/testing.txt:1393
# 4f48d308f8164b39b5cfd63ff6511824
msgid "A test case for a database-backed Web site isn't much use if there isn't any data in the database. To make it easy to put test data into the database, Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

#: ../../topics/testing.txt:1397
# 1b6edf11f4894639865efecd16ae1b12
msgid "A fixture is a collection of data that Django knows how to import into a database. For example, if your site has user accounts, you might set up a fixture of fake user accounts in order to populate your database during tests."
msgstr ""

#: ../../topics/testing.txt:1401
# f332053ab577414da38b67d5a553f7b1
msgid "The most straightforward way of creating a fixture is to use the :djadmin:`manage.py dumpdata <dumpdata>` command. This assumes you already have some data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` for more details."
msgstr ""

#: ../../topics/testing.txt:1408
# 316d9016b90e426cad293fe5bdd4c3a5
msgid "If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used a fixture without even knowing it! When you call :djadmin:`syncdb` in the database for the first time, Django installs a fixture called ``initial_data``. This gives you a way of populating a new database with any initial data, such as a default set of categories."
msgstr ""

#: ../../topics/testing.txt:1415
# b92acc07189b46b39036d06699cab8d3
msgid "Fixtures with other names can always be installed manually using the :djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

#: ../../topics/testing.txt:1420
# 9d2641d23d8f4f94b7aad04cacf02445
msgid "Django provides a second way to insert initial data into models -- the :ref:`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to provide initial data for testing purposes. Django's test framework flushes the contents of the test database after each test; as a result, any data added using the custom SQL hook will be lost."
msgstr ""

#: ../../topics/testing.txt:1427
# 55673a38656d4e489ba29e9bd5e2d781
msgid "Once you've created a fixture and placed it in a ``fixtures`` directory in one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by specifying a ``fixtures`` class attribute on your :class:`django.test.TestCase` subclass::"
msgstr ""

#: ../../topics/testing.txt:1446
# 2fdf03503b4e4ec1a18fdd2988e231de
msgid "Here's specifically what will happen:"
msgstr ""

#: ../../topics/testing.txt:1448
# bc422aa2fb1248d78be7eb76574616cd
msgid "At the start of each test case, before ``setUp()`` is run, Django will flush the database, returning the database to the state it was in directly after :djadmin:`syncdb` was called."
msgstr ""

#: ../../topics/testing.txt:1452
# 340c5dc1721547e6a194924cc267935a
msgid "Then, all the named fixtures are installed. In this example, Django will install any JSON fixture named ``mammals``, followed by any fixture named ``birds``. See the :djadmin:`loaddata` documentation for more details on defining and installing fixtures."
msgstr ""

#: ../../topics/testing.txt:1457
# 0985e9187a814b41b6fb84d6e9e206d5
msgid "This flush/load procedure is repeated for each test in the test case, so you can be certain that the outcome of a test will not be affected by another test, or by the order of test execution."
msgstr ""

#: ../../topics/testing.txt:1462
# 2801f765727d490a830005d5f0f837a9
msgid "URLconf configuration"
msgstr ""

#: ../../topics/testing.txt:1466
# d580a2957cf6424dbf003c45d61f053e
msgid "If your application provides views, you may want to include tests that use the test client to exercise those views. However, an end user is free to deploy the views in your application at any URL of their choosing. This means that your tests can't rely upon the fact that your views will be available at a particular URL."
msgstr ""

#: ../../topics/testing.txt:1472
# 6a3483008c1643a9ab7f51e78055c53b
msgid "In order to provide a reliable URL space for your test, ``django.test.TestCase`` provides the ability to customize the URLconf configuration for the duration of the execution of a test suite. If your ``TestCase`` instance defines an ``urls`` attribute, the ``TestCase`` will use the value of that attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

#: ../../topics/testing.txt:1490
# 1d25d5f8cfee491bb9e3faf5d1b742eb
msgid "This test case will use the contents of ``myapp.test_urls`` as the URLconf for the duration of the test case."
msgstr ""

#: ../../topics/testing.txt:1496
# 969e70d472b04e7f826a97a2f12f85c4
msgid "Multi-database support"
msgstr ""

#: ../../topics/testing.txt:1500
# 79179a7cc03a4ec496307db2eb1b85c9
msgid "Django sets up a test database corresponding to every database that is defined in the :setting:`DATABASES` definition in your settings file. However, a big part of the time taken to run a Django TestCase is consumed by the call to ``flush`` that ensures that you have a clean database at the start of each test run. If you have multiple databases, multiple flushes are required (one for each database), which can be a time consuming activity -- especially if your tests don't need to test multi-database activity."
msgstr ""

#: ../../topics/testing.txt:1509
# eccb37aedc6d4c2da93dcb9ef1175c3b
msgid "As an optimization, Django only flushes the ``default`` database at the start of each test run. If your setup contains multiple databases, and you have a test that requires every database to be clean, you can use the ``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

#: ../../topics/testing.txt:1523
# d3c4969270eb402d8ab3f788bf912ddc
msgid "This test case will flush *all* the test databases before running ``testIndexPageView``."
msgstr ""

#: ../../topics/testing.txt:1529
# 6f5ac69a0a614270bd9a8abb226417b7
msgid "Overriding settings"
msgstr ""

#: ../../topics/testing.txt:1535
# d126cb137cbf4fbe9b532b41171a856c
msgid "For testing purposes it's often useful to change a setting temporarily and revert to the original value after running the testing code. For this use case Django provides a standard Python context manager (see :pep:`343`) :meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

#: ../../topics/testing.txt:1555
# 976e65c435984e2393abc08ab3aea6b0
msgid "This example will override the :setting:`LOGIN_URL` setting for the code in the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

#: ../../topics/testing.txt:1562
# 08b2c5d1db474808bc910d9a36b83c44
msgid "In case you want to override a setting for just one test method or even the whole :class:`TestCase` class, Django provides the :func:`~django.test.utils.override_settings` decorator (see :pep:`318`). It's used like this::"
msgstr ""

#: ../../topics/testing.txt:1577
# 1f58bdffc00649669d1e3844426f4de1
msgid "The decorator can also be applied to test case classes::"
msgstr ""

#: ../../topics/testing.txt:1591
# 7f78fd4f0a4940c29cf50a5153fc25c6
msgid "When given a class, the decorator modifies the class directly and returns it; it doesn't create and return a modified copy of it.  So if you try to tweak the above example to assign the return value to a different name than ``LoginTestCase``, you may be surprised to find that the original ``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

#: ../../topics/testing.txt:1598
# 85cde542ffaa4b0bb44c8a11b3dee4d9
msgid "When overriding settings, make sure to handle the cases in which your app's code uses a cache or similar feature that retains state even if the setting is changed. Django provides the :data:`django.test.signals.setting_changed` signal that lets you register callbacks to clean up and otherwise reset state when settings are changed."
msgstr ""

#: ../../topics/testing.txt:1604
# c94864c573ee4e85b33ef79a59c2f4b8
msgid "Django itself uses this signal to reset various data:"
msgstr ""

#: ../../topics/testing.txt:1607
# 3cfaee22f05d42f086e2ede8b97aca5f
msgid "Overriden settings"
msgstr ""

#: ../../topics/testing.txt:1607
# e8e6b83ea82040cdb4560e2e4f3d8874
msgid "Data reset"
msgstr ""

#: ../../topics/testing.txt:1609
# b09c57f073844d2d9ce30f2a04d72d2b
msgid "USE_TZ, TIME_ZONE"
msgstr ""

#: ../../topics/testing.txt:1609
# b624c7a4e0ec488ab764b65211d0f8c5
msgid "Databases timezone"
msgstr ""

#: ../../topics/testing.txt:1610
# a5d23db082604652a7c77eaa097b2d6e
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

#: ../../topics/testing.txt:1610
# aa9c13a1f04c4345808e58abf9deb83e
msgid "Context processors cache"
msgstr ""

#: ../../topics/testing.txt:1611
# 31d511da6eef47f8ba2350aba6ab99e6
msgid "TEMPLATE_LOADERS"
msgstr ""

#: ../../topics/testing.txt:1611
# 0c315ea008d74c6daa502a664be8ce2e
msgid "Template loaders cache"
msgstr ""

#: ../../topics/testing.txt:1612
# 1649d988434a45db9670759c4f69a0f3
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../topics/testing.txt:1612
# 8048101b4e4e4477be4d559a0e911552
msgid "Serializers cache"
msgstr ""

#: ../../topics/testing.txt:1613
# bcce84ef91314931bb14266016e9e65b
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

#: ../../topics/testing.txt:1613
# e80775615cfc470e820f3e06985e4580
msgid "Default translation and loaded translations"
msgstr ""

#: ../../topics/testing.txt:1614
# 84408ffde13c4df79cbe35edc9638d86
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../topics/testing.txt:1614
# 1900a787fb5f46ed8f801b26ce614559
msgid "Default file storage"
msgstr ""

#: ../../topics/testing.txt:1618
# 8124b8bef4e84f198830009e737f055a
msgid "Emptying the test outbox"
msgstr ""

#: ../../topics/testing.txt:1620
# fcc6e777f4244d55b43d0cf15b7773a0
msgid "If you use Django's custom ``TestCase`` class, the test runner will clear the contents of the test email outbox at the start of each test case."
msgstr ""

#: ../../topics/testing.txt:1623
# 80f3958b03604837a17d4dd5f0cdf602
msgid "For more detail on email services during tests, see `Email services`_."
msgstr ""

#: ../../topics/testing.txt:1628
# 19805c85d4f54fad8b5e2648e56c840f
msgid "Assertions"
msgstr ""

#: ../../topics/testing.txt:1632
# e04777a43f2c4b3da5f8df4e8c8cd5be
msgid "As Python's normal :class:`unittest.TestCase` class implements assertion methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest.TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a number of custom assertion methods that are useful for testing Web applications:"
msgstr ""

#: ../../topics/testing.txt:1638
# bbd41ffb5467433696d8805b44718c7b
msgid "The failure messages given by most of these assertion methods can be customized with the ``msg_prefix`` argument. This string will be prefixed to any failure message generated by the assertion. This allows you to provide additional details that may help you to identify the location and cause of an failure in your test suite."
msgstr ""

#: ../../topics/testing.txt:1648
# 90307519e8594d73bc4acb481cb44a29
msgid "Asserts that execution of callable ``callable_obj`` raised the ``expected_exception`` exception and that such exception has an ``expected_message`` representation. Any other outcome is reported as a failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

#: ../../topics/testing.txt:1658
# b3f54fcd3f2d469bbd73ee48cb0f8ab1
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

#: ../../topics/testing.txt:1669
# 893d2aa868c84b73bebd5d12b1e4b550
msgid "For example, the following code tests that an ``EmailField`` accepts \"a@a.com\" as a valid email address, but rejects \"aaa\" with a reasonable error message::"
msgstr ""

#: ../../topics/testing.txt:1678
# e3e9b9f62dea47529eb20d246aa8bace
msgid "Asserts that a ``Response`` instance produced the given ``status_code`` and that ``text`` appears in the content of the response. If ``count`` is provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

#: ../../topics/testing.txt:1684
#: ../../topics/testing.txt:1697
# 74fbaeee93a242aa99eb2562a67decbb
# 7869253ffc864d7faba6da9debac0310
msgid "Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the response content will be based on HTML semantics instead of character-by-character equality. Whitespace is ignored in most cases, attribute ordering is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more details."
msgstr ""

#: ../../topics/testing.txt:1692
# ead823b49c3d4e8fa3fd09381a1c5a64
msgid "Asserts that a ``Response`` instance produced the given ``status_code`` and that ``text`` does not appears in the content of the response."
msgstr ""

#: ../../topics/testing.txt:1705
# ded11bb3efd84ae3ab52d9191abd5b43
msgid "Asserts that a field on a form raises the provided list of errors when rendered on the form."
msgstr ""

#: ../../topics/testing.txt:1708
# db91482802484a798c96024f11962307
msgid "``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

#: ../../topics/testing.txt:1711
# 1907cee36b9441e0a393c743cf1fa149
msgid "``field`` is the name of the field on the form to check. If ``field`` has a value of ``None``, non-field errors (errors you can access via ``form.non_field_errors()``) will be checked."
msgstr ""

#: ../../topics/testing.txt:1715
# c12a56839f1f43caa6570c505ae2fbd5
msgid "``errors`` is an error string, or a list of error strings, that are expected as a result of form validation."
msgstr ""

#: ../../topics/testing.txt:1720
# ac8a3a9701a243d0a8c12decdc624237
msgid "Asserts that the template with the given name was used in rendering the response."
msgstr ""

#: ../../topics/testing.txt:1723
# 36e2f35341ac419488a3abf10431b19c
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

#: ../../topics/testing.txt:1727
# f40f9318fddc479b8f237f0958986906
msgid "You can use this as a context manager, like this::"
msgstr ""

#: ../../topics/testing.txt:1736
# ae5483cc9c074d72a9ae1aeb926c8cb6
msgid "Asserts that the template with the given name was *not* used in rendering the response."
msgstr ""

#: ../../topics/testing.txt:1741
# 9a1951c3277444a8be25713627c9bcfb
msgid "You can use this as a context manager in the same way as :meth:`~TestCase.assertTemplateUsed`."
msgstr ""

#: ../../topics/testing.txt:1746
# 43b0224750384d5eb4365520d55c307e
msgid "Asserts that the response return a ``status_code`` redirect status, it redirected to ``expected_url`` (including any GET data), and the final page was received with ``target_status_code``."
msgstr ""

#: ../../topics/testing.txt:1750
# 66b95320cf3243268efe92c4e7377019
msgid "If your request used the ``follow`` argument, the ``expected_url`` and ``target_status_code`` will be the url and status code for the final point of the redirect chain."
msgstr ""

#: ../../topics/testing.txt:1756
# 9b8ac7db21dd4f86b39046acab9d707d
msgid "Asserts that a queryset ``qs`` returns a particular list of values ``values``."
msgstr ""

#: ../../topics/testing.txt:1758
# ef04740f109c4b50aa74e0d6191ff010
msgid "The comparison of the contents of ``qs`` and ``values`` is performed using the function ``transform``; by default, this means that the ``repr()`` of each value is compared. Any other callable can be used if ``repr()`` doesn't provide a unique or helpful comparison."
msgstr ""

#: ../../topics/testing.txt:1763
# fb3d14ec2c3d44bfa673dd158a76abe6
msgid "By default, the comparison is also ordering dependent. If ``qs`` doesn't provide an implicit ordering, you can set the ``ordered`` parameter to ``False``, which turns the comparison into a Python set comparison."
msgstr ""

#: ../../topics/testing.txt:1776
# 09dbee0f2b944b729ac65e40d6830bbc
msgid "Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that ``num`` database queries are executed."
msgstr ""

#: ../../topics/testing.txt:1779
# 0a997872da164e5daf794248441fc299
msgid "If a ``\"using\"`` key is present in ``kwargs`` it is used as the database alias for which to check the number of queries.  If you wish to call a function with a ``using`` parameter you can do it by wrapping the call with a ``lambda`` to add an extra parameter::"
msgstr ""

#: ../../topics/testing.txt:1786
# 730a833f733c4c3491db4876067fe71b
msgid "You can also use this as a context manager::"
msgstr ""

#: ../../topics/testing.txt:1796
# 6e3075f60d874abf8327ee46e84e6c08
msgid "Asserts that the strings ``html1`` and ``html2`` are equal. The comparison is based on HTML semantics. The comparison takes following things into account:"
msgstr ""

#: ../../topics/testing.txt:1800
# 5c274fba0d814f63af824b79ebfb449f
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

#: ../../topics/testing.txt:1801
# bce4b475d5ff4d449c838da985079cad
msgid "All types of whitespace are considered equivalent."
msgstr ""

#: ../../topics/testing.txt:1802
# 198877bc37174ad7ade6339c8632f6de
msgid "All open tags are closed implicitly, e.g. when a surrounding tag is closed or the HTML document ends."
msgstr ""

#: ../../topics/testing.txt:1804
# bddb066217f441d589637e54e6964e4a
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

#: ../../topics/testing.txt:1805
# 3c2818fca045486998ac5ec34193b6ae
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

#: ../../topics/testing.txt:1806
# 99ae4d1f204048f6970799a06321393b
msgid "Attributes without an argument are equal to attributes that equal in name and value (see the examples)."
msgstr ""

#: ../../topics/testing.txt:1809
# 1ccd849de7764dc48f5e83cdbb07c2b3
msgid "The following examples are valid tests and don't raise any ``AssertionError``::"
msgstr ""

#: ../../topics/testing.txt:1820
#: ../../topics/testing.txt:1831
# 865ca8b9e6ad4063a0b716de5b38e6f9
# 7fe84419345d45108cc170db3a01226d
msgid "``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be raised if one of them cannot be parsed."
msgstr ""

#: ../../topics/testing.txt:1827
# 5dd418cf3f934c1dbe7a70e5707cd8b8
msgid "Asserts that the strings ``html1`` and ``html2`` are *not* equal. The comparison is based on HTML semantics. See :meth:`~SimpleTestCase.assertHTMLEqual` for details."
msgstr ""

#: ../../topics/testing.txt:1838
# b3310a9f8ecc49138593d020d758d23d
msgid "Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is based on XML semantics. Similarily to :meth:`~SimpleTestCase.assertHTMLEqual`, the comparison is made on parsed content, hence only semantic differences are considered, not syntax differences. When unvalid XML is passed in any parameter, an ``AssertionError`` is always raised, even if both string are identical."
msgstr ""

#: ../../topics/testing.txt:1849
# 52aaf2d68cda4fff85920933fc65e967
msgid "Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The comparison is based on XML semantics. See :meth:`~SimpleTestCase.assertXMLEqual` for details."
msgstr ""

#: ../../topics/testing.txt:1856
# dbafb053700f4ae7bcc84e625c658e21
msgid "Email services"
msgstr ""

#: ../../topics/testing.txt:1858
# 0504ec1045aa4e4b9d8474220f214949
msgid "If any of your Django views send email using :doc:`Django's email functionality </topics/email>`, you probably don't want to send email each time you run a test using that view. For this reason, Django's test runner automatically redirects all Django-sent email to a dummy outbox. This lets you test every aspect of sending email -- from the number of messages sent to the contents of each message -- without actually sending the messages."
msgstr ""

#: ../../topics/testing.txt:1865
# 677130dc7c58486fb7d26252616a5995
msgid "The test runner accomplishes this by transparently replacing the normal email backend with a testing backend. (Don't worry -- this has no effect on any other email senders outside of Django, such as your machine's mail server, if you're running one.)"
msgstr ""

#: ../../topics/testing.txt:1874
# 3a14df7f67304c5ca6c32117812db644
msgid "During test running, each outgoing email is saved in ``django.core.mail.outbox``. This is a simple list of all :class:`~django.core.mail.EmailMessage` instances that have been sent. The ``outbox`` attribute is a special attribute that is created *only* when the ``locmem`` email backend is used. It doesn't normally exist as part of the :mod:`django.core.mail` module and you can't import it directly. The code below shows how to access this attribute correctly."
msgstr ""

#: ../../topics/testing.txt:1882
# 7e46e9b9219f4d42bc7cdcfdbc4543d1
msgid "Here's an example test that examines ``django.core.mail.outbox`` for length and contents::"
msgstr ""

#: ../../topics/testing.txt:1901
# 79fb139634cf471881ad8421616e6509
msgid "As noted :ref:`previously <emptying-test-outbox>`, the test outbox is emptied at the start of every test in a Django ``TestCase``. To empty the outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

#: ../../topics/testing.txt:1913
# 40a36fbbdbe84fcb84f6e09bf2ddcf3e
msgid "Skipping tests"
msgstr ""

#: ../../topics/testing.txt:1917
# 173771a8becd4992b2f7223901a29e1f
msgid "The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip tests if you know ahead of time that those tests are going to fail under certain conditions."
msgstr ""

#: ../../topics/testing.txt:1922
# 7ea55f1cb5874b4ebbdd36b28d884ee1
msgid "For example, if your test requires a particular optional library in order to succeed, you could decorate the test case with :func:`@skipIf <unittest.skipIf>`. Then, the test runner will report that the test wasn't executed and why, instead of failing the test or omitting the test altogether."
msgstr ""

#: ../../topics/testing.txt:1927
# 41574682195c48b7acbf134d469e66f2
msgid "To supplement these test skipping behaviors, Django provides two additional skip decorators. Instead of testing a generic boolean, these decorators check the capabilities of the database, and skip the test if the database doesn't support a specific named feature."
msgstr ""

#: ../../topics/testing.txt:1932
# fa6e89cebeda4aa897d189aff1e453a4
msgid "The decorators use a string identifier to describe database features. This string corresponds to attributes of the database connection features class. See :class:`~django.db.backends.BaseDatabaseFeatures` class for a full list of database features that can be used as a basis for skipping tests."
msgstr ""

#: ../../topics/testing.txt:1940
# ec866b63236241b68474c42158e32c0c
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

#: ../../topics/testing.txt:1942
# d7e13d221b1e47aa96b864bcb199306b
msgid "For example, the following test will not be executed if the database supports transactions (e.g., it would *not* run under PostgreSQL, but it would under MySQL with MyISAM tables)::"
msgstr ""

#: ../../topics/testing.txt:1953
# d5f0bb71619142ccb53ae95a2a1631eb
msgid "Skip the decorated test if the named database feature is *not* supported."
msgstr ""

#: ../../topics/testing.txt:1956
# a985694bfc5549b5a38dbeeb41fafc05
msgid "For example, the following test will only be executed if the database supports transactions (e.g., it would run under PostgreSQL, but *not* under MySQL with MyISAM tables)::"
msgstr ""

#: ../../topics/testing.txt:1966
# 407266ac664849a18e7fcfd018abe0a5
msgid "Live test server"
msgstr ""

#: ../../topics/testing.txt:1974
# 578bb2b996b04bf18c8f60b3217a0646
msgid "``LiveServerTestCase`` does basically the same as :class:`~django.test.TransactionTestCase` with one extra feature: it launches a live Django server in the background on setup, and shuts it down on teardown. This allows the use of automated test clients other than the :ref:`Django dummy client <test-client>` such as, for example, the Selenium_ client, to execute a series of functional tests inside a browser and simulate a real user's actions."
msgstr ""

#: ../../topics/testing.txt:1982
# effbc865fecd4ee1948399c2e77d8db4
msgid "By default the live server's address is `'localhost:8081'` and the full URL can be accessed during the tests with ``self.live_server_url``. If you'd like to change the default address (in the case, for example, where the 8081 port is already taken) then you may pass a different one to the :djadmin:`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

#: ../../topics/testing.txt:1992
# e4e10c18b92e41308efb4d13f0a34639
msgid "Another way of changing the default server address is by setting the `DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your code (for example, in a :ref:`custom test runner<topics-testing-test_runner>`):"
msgstr ""

#: ../../topics/testing.txt:2001
# af7e926b69f34cdd8b5d3c31fe1bb836
msgid "In the case where the tests are run by multiple processes in parallel (for example, in the context of several simultaneous `continuous integration`_ builds), the processes will compete for the same address, and therefore your tests might randomly fail with an \"Address already in use\" error. To avoid this problem, you can pass a comma-separated list of ports or ranges of ports (at least as many as the number of potential parallel processes). For example:"
msgstr ""

#: ../../topics/testing.txt:2012
# 2adccba8c72b427fb2b54f8243ac2ccd
msgid "Then, during test execution, each new live test server will try every specified port until it finds one that is free and takes it."
msgstr ""

#: ../../topics/testing.txt:2017
# b834753e289d4c15af64f656ad3767f5
msgid "To demonstrate how to use ``LiveServerTestCase``, let's write a simple Selenium test. First of all, you need to install the `selenium package`_ into your Python path:"
msgstr ""

#: ../../topics/testing.txt:2025
# 2c4da4abf4db4d13b2fb8a41ef94ff52
msgid "Then, add a ``LiveServerTestCase``-based test to your app's tests module (for example: ``myapp/tests.py``). The code for this test may look as follows:"
msgstr ""

#: ../../topics/testing.txt:2054
# 93e50f9af8bd40c9b710bd9030e62f41
msgid "Finally, you may run the test as follows:"
msgstr ""

#: ../../topics/testing.txt:2060
# 9268773e33c84457a7d4c6ce7dd5fb30
msgid "This example will automatically open Firefox then go to the login page, enter the credentials and press the \"Log in\" button. Selenium offers other drivers in case you do not have Firefox installed or wish to use another browser. The example above is just a tiny fraction of what the Selenium client can do; check out the `full reference`_ for more details."
msgstr ""

#: ../../topics/testing.txt:2073
# 9c55e993b02a4f57861208f6a3ad3ebe
msgid "``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </howto/static-files>` so you'll need to have your project configured accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

#: ../../topics/testing.txt:2079
# 6e92de90b17f49a2bee958df8c97e25c
msgid "When using an in-memory SQLite database to run the tests, the same database connection will be shared by two threads in parallel: the thread in which the live server is run and the thread in which the test case is run. It's important to prevent simultaneous database queries via this shared connection by the two threads, as that may sometimes randomly cause the tests to fail. So you need to ensure that the two threads don't access the database at the same time. In particular, this means that in some cases (for example, just after clicking a link or submitting a form), you might need to check that a response is received by Selenium and that the next page is loaded before proceeding with further test execution. Do this, for example, by making Selenium wait until the `<body>` HTML tag is found in the response (requires Selenium > 2.13):"
msgstr ""

#: ../../topics/testing.txt:2102
# 5466627ca2e54c7ab3b249b9727f5056
msgid "The tricky thing here is that there's really no such thing as a \"page load,\" especially in modern Web apps that generate HTML dynamically after the server generates the initial document. So, simply checking for the presence of `<body>` in the response might not necessarily be appropriate for all use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for more information."
msgstr ""

#: ../../topics/testing.txt:2113
# e3fff84b6a9f4aa2a520c7e6624fecdb
msgid "Using different testing frameworks"
msgstr ""

#: ../../topics/testing.txt:2115
# 0502259227f648b8a73c1fa47083a228
msgid "Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing frameworks. While Django doesn't provide explicit support for alternative frameworks, it does provide a way to invoke tests constructed for an alternative framework as if they were normal Django tests."
msgstr ""

#: ../../topics/testing.txt:2120
# 141ca48852964f3b981c50330b4f1b40
msgid "When you run ``./manage.py test``, Django looks at the :setting:`TEST_RUNNER` setting to determine what to do. By default, :setting:`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This class defines the default Django testing behavior. This behavior involves:"
msgstr ""

#: ../../topics/testing.txt:2125
# 50071b854ec44a95bc5bc9bab4fc9da5
msgid "Performing global pre-test setup."
msgstr ""

#: ../../topics/testing.txt:2127
# bdabefe3633c4bd5a32543e4c72c73ee
msgid "Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` files in each installed application."
msgstr ""

#: ../../topics/testing.txt:2130
# 9bfb1d0608834381987378cc2e481808
msgid "Creating the test databases."
msgstr ""

#: ../../topics/testing.txt:2132
# aeaddc8c400c48ca9a1f0cf395600124
msgid "Running ``syncdb`` to install models and initial data into the test databases."
msgstr ""

#: ../../topics/testing.txt:2135
# 66829bd5d0a84d2ead46a61e3b83d335
msgid "Running the unit tests and doctests that are found."
msgstr ""

#: ../../topics/testing.txt:2137
# 3700134e1bc84cbaa9a8b3f62fc9477a
msgid "Destroying the test databases."
msgstr ""

#: ../../topics/testing.txt:2139
# 710adc8b9092495f9e8c48514f9ccb02
msgid "Performing global post-test teardown."
msgstr ""

#: ../../topics/testing.txt:2141
# 122fb372b811402faf88ef1ab7c99904
msgid "If you define your own test runner class and point :setting:`TEST_RUNNER` at that class, Django will execute your test runner whenever you run ``./manage.py test``. In this way, it is possible to use any test framework that can be executed from Python code, or to modify the Django test execution process to satisfy whatever testing requirements you may have."
msgstr ""

#: ../../topics/testing.txt:2150
# 514f34c38dd8445aaf4525d8fa7176a1
msgid "Defining a test runner"
msgstr ""

#: ../../topics/testing.txt:2154
# 14426b7a49f0492d9e92a00dc840cc3b
msgid "A test runner is a class defining a ``run_tests()`` method. Django ships with a ``DjangoTestSuiteRunner`` class that defines the default Django testing behavior. This class defines the ``run_tests()`` entry point, plus a selection of other methods that are used to by ``run_tests()`` to set up, execute and tear down the test suite."
msgstr ""

#: ../../topics/testing.txt:2162
# 7ded606f9b8e497abf8bf378e8068038
msgid "``verbosity`` determines the amount of notification and debug information that will be printed to the console; ``0`` is no output, ``1`` is normal output, and ``2`` is verbose output."
msgstr ""

#: ../../topics/testing.txt:2166
# 67906ab2413b496e8dbaee4d5221a371
msgid "If ``interactive`` is ``True``, the test suite has permission to ask the user for instructions when the test suite is executed. An example of this behavior would be asking for permission to delete an existing test database. If ``interactive`` is ``False``, the test suite must be able to run without any manual intervention."
msgstr ""

#: ../../topics/testing.txt:2172
# ddd466b8af82439ba8920134bf46c50d
msgid "If ``failfast`` is ``True``, the test suite will stop running after the first test failure is detected."
msgstr ""

#: ../../topics/testing.txt:2175
# 4e0779efcc014ffc8295a0f68811da68
msgid "Django will, from time to time, extend the capabilities of the test runner by adding new arguments. The ``**kwargs`` declaration allows for this expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

#: ../../topics/testing.txt:2183
# de6e6da6939d4a50af5c6e5d9bd7de90
msgid "Your test runner may also define additional command-line options. If you add an ``option_list`` attribute to a subclassed test runner, those options will be added to the list of command-line options that the :djadmin:`test` command can use."
msgstr ""

#: ../../topics/testing.txt:2195
# 78bf81146c794d5e8b58c57e45b2a5f2
msgid "This is the tuple of ``optparse`` options which will be fed into the management command's ``OptionParser`` for parsing arguments. See the documentation for Python's ``optparse`` module for more details."
msgstr ""

#: ../../topics/testing.txt:2204
# e4fac6c32ee2494799bd6d512f22849d
msgid "Run the test suite."
msgstr ""

#: ../../topics/testing.txt:2206
#: ../../topics/testing.txt:2231
# 534bdd3e939b416e8a2d459f7b2347b7
# 9b036ff910524ad0b8543ff2e886ef7c
msgid "``test_labels`` is a list of strings describing the tests to be run. A test label can take one of three forms:"
msgstr ""

#: ../../topics/testing.txt:2209
#: ../../topics/testing.txt:2234
# b77fac6abc7a4b1ea164d3e7d5440a44
# 82967b6dfaa448ad9a92a5c45d2c61a0
msgid "``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

#: ../../topics/testing.txt:2211
#: ../../topics/testing.txt:2236
# dbebad692f59465ea739528d5ab16892
# b11dc5514dbd47769ba2598c3f2cb5c1
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

#: ../../topics/testing.txt:2212
#: ../../topics/testing.txt:2237
# 575b57fe484a4fd68e52362f82361325
# 9e979d1ba4374a39a13354bbf6424378
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

#: ../../topics/testing.txt:2214
#: ../../topics/testing.txt:2239
# ad2c5a7cc0104304b4f302297f0ee917
# f1b6c6f82a0b4d98b5922c8917386335
msgid "If ``test_labels`` has a value of ``None``, the test runner should run search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../topics/testing.txt:2217
#: ../../topics/testing.txt:2242
# a69241404f8646479892e3447d2917ae
# 90996189520b4d98918a04dd86cfe41e
msgid "``extra_tests`` is a list of extra ``TestCase`` instances to add to the suite that is executed by the test runner. These extra tests are run in addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

#: ../../topics/testing.txt:2221
# f40bda2a674f45bfa8cf88072ad7eb8c
msgid "This method should return the number of tests that failed."
msgstr ""

#: ../../topics/testing.txt:2225
# fa94ecf0992d495c8cb73d7231569f73
msgid "Sets up the test environment ready for testing."
msgstr ""

#: ../../topics/testing.txt:2229
# 381c029a1be745d59171f797b3f1c45e
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

#: ../../topics/testing.txt:2246
# 843bdba4303f43e88c9bbaedf4b61380
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

#: ../../topics/testing.txt:2250
# 5720cf5b0fa3461e80383819c2d569e1
msgid "Creates the test databases."
msgstr ""

#: ../../topics/testing.txt:2252
# 307946b9caec496990967a2ac6901302
msgid "Returns a data structure that provides enough detail to undo the changes that have been made. This data will be provided to the ``teardown_databases()`` function at the conclusion of testing."
msgstr ""

#: ../../topics/testing.txt:2258
# 07afbcdcf0f5433c8f247f063205a187
msgid "Runs the test suite."
msgstr ""

#: ../../topics/testing.txt:2260
# 7334874a430347daaeeb4cb923154537
msgid "Returns the result produced by the running the test suite."
msgstr ""

#: ../../topics/testing.txt:2264
# 7bd6c61d5ef7443aaba897f2f2facbcb
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

#: ../../topics/testing.txt:2266
# f793e91c0e824e49805c8f8da4e51bce
msgid "``old_config`` is a data structure defining the changes in the database configuration that need to be reversed. It is the return value of the ``setup_databases()`` method."
msgstr ""

#: ../../topics/testing.txt:2272
# 6b8bf88997404494a5ac2a8ae46195a7
msgid "Restores the pre-test environment."
msgstr ""

#: ../../topics/testing.txt:2276
# 20ecc9abf0f740c7b799484765a065a6
msgid "Computes and returns a return code based on a test suite, and the result from that test suite."
msgstr ""

#: ../../topics/testing.txt:2281
# dff189f8167b4228b69495105bfc0c2e
msgid "Testing utilities"
msgstr ""

#: ../../topics/testing.txt:2286
# 6d581e3c19404ff893c412468dd47e95
msgid "To assist in the creation of your own test runner, Django provides a number of utility methods in the ``django.test.utils`` module."
msgstr ""

#: ../../topics/testing.txt:2291
# eeba938e5b9544e49edebd6805686ec1
msgid "Performs any global pre-test setup, such as the installing the instrumentation of the template rendering system and setting up the dummy email outbox."
msgstr ""

#: ../../topics/testing.txt:2297
# 21e9415445754697bda31976a7b2f256
msgid "Performs any global post-test teardown, such as removing the black magic hooks into the template system and restoring normal email services."
msgstr ""

#: ../../topics/testing.txt:2303
# a52334b7214140ebb51729a8caf31105
msgid "The creation module of the database backend (``connection.creation``) also provides some utilities that can be useful during testing."
msgstr ""

#: ../../topics/testing.txt:2308
# e711ff172ddf4efbb5f150c9c3cc15b3
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

#: ../../topics/testing.txt:2310
# 0ed1b9052f2c4f7480cb3e0eddca2141
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

#: ../../topics/testing.txt:2312
# 4712e327712d42c8b80ff8dfa406faf8
msgid "``autoclobber`` describes the behavior that will occur if a database with the same name as the test database is discovered:"
msgstr ""

#: ../../topics/testing.txt:2315
# 0a9d93446e254234bd97de3f7533db3b
msgid "If ``autoclobber`` is ``False``, the user will be asked to approve destroying the existing database. ``sys.exit`` is called if the user does not approve."
msgstr ""

#: ../../topics/testing.txt:2319
# 10c75d8854f643cf996ed0b99803c0b6
msgid "If autoclobber is ``True``, the database will be destroyed without consulting the user."
msgstr ""

#: ../../topics/testing.txt:2322
# 768980feff0943d7a324928f5c15b58c
msgid "Returns the name of the test database that it created."
msgstr ""

#: ../../topics/testing.txt:2324
# 158deceef43549b3bc321120e28f92bf
msgid "``create_test_db()`` has the side effect of modifying the value of :setting:`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

#: ../../topics/testing.txt:2330
# 992af638cab0415f92c5b7a8e82358b1
msgid "Destroys the database whose name is the value of :setting:`NAME` in :setting:`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

#: ../../topics/testing.txt:2334
# ea93a62e9d1d45d79cbd9f6a06c89446
msgid "The ``verbosity`` argument has the same behavior as for :class:`~django.test.simple.DjangoTestSuiteRunner`."
msgstr ""

