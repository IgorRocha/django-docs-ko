FAQ: 장고의 사용
=================

왜 저는 DJANGO_SETTINGS_MODULE을 임포팅(importing)을하면 에러가 발생하나요? 
-------------------------------------------------------------

확인하세요:

* DJANGO_SETTINGS_MODULE 환경변수를 fully-qualified 파이썬 모듈로 세팅을 하세요
  (i.e. "mysite.settings").

* 모듈을 설정하세요``sys.path`` (``import mysite.settings`` 가 작동해야합니다.).

* 이 모듈은 구문오류를 포합하고있지 않습니다.(물론이죠).

* 만약 사용자께서 장고 요청 handler 사용하는것이 *아닌*, mod_python을 사용하는 중이라면,
  사용자 께서는 ``SetEng``;의 사용과 관련된 mod_python 버그 주위에 대하여 작업을 하실필요가 있습니다. 
  사용자께서 사용자가 해야할 필요가있는 장고로 부터 어떠한것을 임포트(import)하기전에 말이죠.
  다음사항을 따르세요::

        os.environ.update(req.subprocess_env)

  (where ``req`` is the mod_python request object).

저는 당신의 템플릿 언어에 stand할수가 없습니다. 제가 반드시 그것을 사용해야할까요?
----------------------------------------------------------

We happen to think our template engine is the best thing since chunky bacon,
but we recognize that choosing a template language runs close to religion.
There's nothing about Django that requires using the template language, so
if you're attached to ZPT, Cheetah, or whatever, feel free to use those.

제가 당신의 model/database 계층을 사용해야 합니까?
-------------------------------------------

아니요. 그 템플릿 시스템 처럼, 그 모델/데이터베이스 계층은 프레임워크의 나머지로부터 decoupled 됩니다.

The one exception is: If you use a different database library, you won't get to
use Django's automatically-generated admin site. That app is coupled to the
Django database layer.

어떻게 제가 이미지와 피일필드를 사용할수있나요?
-----------------------------------

Using a :class:`~django.db.models.FileField` or an
:class:`~django.db.models.ImageField` in a model takes a few steps:

#. In your settings file, you'll need to define :setting:`MEDIA_ROOT` as
   the full path to a directory where you'd like Django to store uploaded
   files. (For performance, these files are not stored in the database.)
   Define :setting:`MEDIA_URL` as the base public URL of that directory.
   Make sure that this directory is writable by the Web server's user
   account.

#. Add the :class:`~django.db.models.FileField` or
   :class:`~django.db.models.ImageField` to your model, making sure to
   define the :attr:`~django.db.models.FileField.upload_to` option to tell
   Django to which subdirectory of :setting:`MEDIA_ROOT` it should upload
   files.

#. All that will be stored in your database is a path to the file
   (relative to :setting:`MEDIA_ROOT`). You'll most likely want to use the
   convenience :attr:`~django.core.files.File.url` attribute provided by
   Django. For example, if your :class:`~django.db.models.ImageField` is
   called ``mug_shot``, you can get the absolute path to your image in a
   template with ``{{ object.mug_shot.url }}``.

How do I make a variable available to all my templates?
-------------------------------------------------------

Sometimes your templates just all need the same thing. A common example would
be dynamically-generated menus. At first glance, it seems logical to simply
add a common dictionary to the template context.

The correct solution is to use a ``RequestContext``. Details on how to do this
are here: :ref:`subclassing-context-requestcontext`.
